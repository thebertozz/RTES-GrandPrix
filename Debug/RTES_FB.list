
RTES_FB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001571c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010b8  080158b0  080158b0  000258b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016968  08016968  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  08016968  08016968  00026968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016970  08016970  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016970  08016970  00026970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016974  08016974  00026974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  08016978  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048ac  200006e0  08017058  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f8c  08017058  00034f8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b84c  00000000  00000000  00030710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dcf  00000000  00000000  0007bf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031d8  00000000  00000000  00082d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002f50  00000000  00000000  00085f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f79c  00000000  00000000  00088e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000305d9  00000000  00000000  000b85f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011468d  00000000  00000000  000e8bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fd25a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e488  00000000  00000000  001fd2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006e0 	.word	0x200006e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015894 	.word	0x08015894

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006e4 	.word	0x200006e4
 80001cc:	08015894 	.word	0x08015894

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x30>)
 8000eb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200006fc 	.word	0x200006fc
 8000ed0:	200007c0 	.word	0x200007c0

08000ed4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,10);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	230a      	movs	r3, #10
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <_write+0x24>)
 8000eea:	f00e fcc9 	bl	800f880 <HAL_UART_Transmit>
	return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20004d80 	.word	0x20004d80

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b0ca      	sub	sp, #296	; 0x128
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f02:	f00a fb0d 	bl	800b520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f06:	f000 f957 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0a:	f000 fa95 	bl	8001438 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000f0e:	f000 f9b5 	bl	800127c <MX_I2C2_Init>
  MX_SPI3_Init();
 8000f12:	f000 f9f3 	bl	80012fc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f16:	f000 fa2f 	bl	8001378 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f1a:	f000 fa5d 	bl	80013d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	//Proximity

	VL53L0X_PROXIMITY_Init();
 8000f1e:	f00a f9b7 	bl	800b290 <VL53L0X_PROXIMITY_Init>

	//User button
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000f22:	2100      	movs	r1, #0
 8000f24:	2000      	movs	r0, #0
 8000f26:	f001 fcb7 	bl	8002898 <BSP_PB_Init>

	//Temperature
	BSP_TSENSOR_Init();
 8000f2a:	f002 fd99 	bl	8003a60 <BSP_TSENSOR_Init>

	//	//Humidity
	BSP_HSENSOR_Init();
 8000f2e:	f002 fb45 	bl	80035bc <BSP_HSENSOR_Init>

	//	//Pressure
	BSP_PSENSOR_Init();
 8000f32:	f002 fd67 	bl	8003a04 <BSP_PSENSOR_Init>

	//Motion sensors

	//BSP_MOTION_SENSOR_Init(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_GYRO);
	BSP_MOTION_SENSOR_Init(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO);
 8000f36:	2102      	movs	r1, #2
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f002 fb6d 	bl	8003618 <BSP_MOTION_SENSOR_Init>

	//BSP_MOTION_SENSOR_Enable(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_GYRO);
	BSP_MOTION_SENSOR_Enable(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO);
 8000f3e:	2102      	movs	r1, #2
 8000f40:	2000      	movs	r0, #0
 8000f42:	f002 fbb9 	bl	80036b8 <BSP_MOTION_SENSOR_Enable>

	//Struct elements initialization

	manager.humidity_value = 0;
 8000f46:	4b85      	ldr	r3, [pc, #532]	; (800115c <main+0x260>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	711a      	strb	r2, [r3, #4]
	manager.pressure_value = 0;
 8000f4c:	4b83      	ldr	r3, [pc, #524]	; (800115c <main+0x260>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
	manager.temperature_value = 0;
 8000f52:	4b82      	ldr	r3, [pc, #520]	; (800115c <main+0x260>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
	manager.proximity = 0;
 8000f58:	4b80      	ldr	r3, [pc, #512]	; (800115c <main+0x260>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	831a      	strh	r2, [r3, #24]
	manager.b_accelerometer, manager.b_temperature, manager.b_humidity, manager.b_pressure, manager.b_green_light, manager.b_proximity,
	manager.b_proximity, manager.b_race_data, manager.b_track_data, manager.b_user_button = 0;
 8000f5e:	4b7f      	ldr	r3, [pc, #508]	; (800115c <main+0x260>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	775a      	strb	r2, [r3, #29]
	manager.status = WAITING_FOR_GREEN_LIGHT;
 8000f64:	4b7d      	ldr	r3, [pc, #500]	; (800115c <main+0x260>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	769a      	strb	r2, [r3, #26]
	manager.pit_stop_executions = 0;
 8000f6a:	4b7c      	ldr	r3, [pc, #496]	; (800115c <main+0x260>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	manager.waiting_for_race_director_executions = 0;
 8000f72:	4b7a      	ldr	r3, [pc, #488]	; (800115c <main+0x260>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	manager.race_executions = 0;
 8000f7a:	4b78      	ldr	r3, [pc, #480]	; (800115c <main+0x260>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	manager.last_opponent_value = -1;
 8000f82:	4b76      	ldr	r3, [pc, #472]	; (800115c <main+0x260>)
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
	manager.opponent_executions = 0;
 8000f8a:	4b74      	ldr	r3, [pc, #464]	; (800115c <main+0x260>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of managerMutex */
  osMutexDef(managerMutex);
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  managerMutexHandle = osMutexCreate(osMutex(managerMutex));
 8000f9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f00f f96e 	bl	8010284 <osMutexCreate>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a6d      	ldr	r2, [pc, #436]	; (8001160 <main+0x264>)
 8000fac:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of userButtonInterruptSemaphore */
  osSemaphoreDef(userButtonInterruptSemaphore);
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  userButtonInterruptSemaphoreHandle = osSemaphoreCreate(osSemaphore(userButtonInterruptSemaphore), 1);
 8000fba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00f f9fb 	bl	80103bc <osSemaphoreCreate>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a66      	ldr	r2, [pc, #408]	; (8001164 <main+0x268>)
 8000fca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

	osSemaphoreWait(userButtonInterruptSemaphoreHandle, MUTEX_WAIT_TIMEOUT);
 8000fcc:	4b65      	ldr	r3, [pc, #404]	; (8001164 <main+0x268>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f00f fa23 	bl	8010420 <osSemaphoreWait>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of greenLightTask */
  osThreadDef(greenLightTask, startGreenLightTask, osPriorityNormal, 0, 160);
 8000fda:	4b63      	ldr	r3, [pc, #396]	; (8001168 <main+0x26c>)
 8000fdc:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8000fe0:	461d      	mov	r5, r3
 8000fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  greenLightTaskHandle = osThreadCreate(osThread(greenLightTask), NULL);
 8000fee:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00f f8f9 	bl	80101ec <osThreadCreate>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a5b      	ldr	r2, [pc, #364]	; (800116c <main+0x270>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* definition and creation of trackDataPrintTask */
  osThreadDef(trackDataPrintTask, startTrackDataPrintTask, osPriorityNormal, 0, 160);
 8001000:	4b5b      	ldr	r3, [pc, #364]	; (8001170 <main+0x274>)
 8001002:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8001006:	461d      	mov	r5, r3
 8001008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  trackDataPrintTaskHandle = osThreadCreate(osThread(trackDataPrintTask), NULL);
 8001014:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00f f8e6 	bl	80101ec <osThreadCreate>
 8001020:	4603      	mov	r3, r0
 8001022:	4a54      	ldr	r2, [pc, #336]	; (8001174 <main+0x278>)
 8001024:	6013      	str	r3, [r2, #0]

  /* definition and creation of userButtonTask */
  osThreadDef(userButtonTask, startUserButtonTask, osPriorityNormal, 0, 128);
 8001026:	4b54      	ldr	r3, [pc, #336]	; (8001178 <main+0x27c>)
 8001028:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800102c:	461d      	mov	r5, r3
 800102e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001032:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001036:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  userButtonTaskHandle = osThreadCreate(osThread(userButtonTask), NULL);
 800103a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f00f f8d3 	bl	80101ec <osThreadCreate>
 8001046:	4603      	mov	r3, r0
 8001048:	4a4c      	ldr	r2, [pc, #304]	; (800117c <main+0x280>)
 800104a:	6013      	str	r3, [r2, #0]

  /* definition and creation of proximitySensorTask */
  osThreadDef(proximitySensorTask, startProximitySensorTask, osPriorityNormal, 0, 176);
 800104c:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <main+0x284>)
 800104e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001052:	461d      	mov	r5, r3
 8001054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001058:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800105c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  proximitySensorTaskHandle = osThreadCreate(osThread(proximitySensorTask), NULL);
 8001060:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f00f f8c0 	bl	80101ec <osThreadCreate>
 800106c:	4603      	mov	r3, r0
 800106e:	4a45      	ldr	r2, [pc, #276]	; (8001184 <main+0x288>)
 8001070:	6013      	str	r3, [r2, #0]

  /* definition and creation of raceDataPrintTask */
  osThreadDef(raceDataPrintTask, startRaceDataPrintTask, osPriorityNormal, 0, 160);
 8001072:	4b45      	ldr	r3, [pc, #276]	; (8001188 <main+0x28c>)
 8001074:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001078:	461d      	mov	r5, r3
 800107a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001082:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  raceDataPrintTaskHandle = osThreadCreate(osThread(raceDataPrintTask), NULL);
 8001086:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f00f f8ad 	bl	80101ec <osThreadCreate>
 8001092:	4603      	mov	r3, r0
 8001094:	4a3d      	ldr	r2, [pc, #244]	; (800118c <main+0x290>)
 8001096:	6013      	str	r3, [r2, #0]

  /* definition and creation of accelerometerTask */
  osThreadDef(accelerometerTask, startAccelerometerTask, osPriorityNormal, 0, 160);
 8001098:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <main+0x294>)
 800109a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800109e:	461d      	mov	r5, r3
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  accelerometerTaskHandle = osThreadCreate(osThread(accelerometerTask), NULL);
 80010ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00f f89a 	bl	80101ec <osThreadCreate>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a36      	ldr	r2, [pc, #216]	; (8001194 <main+0x298>)
 80010bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of temperatureSensorTask */
  osThreadDef(temperatureSensorTask, startTemperatureSensorTask, osPriorityBelowNormal, 0, 176);
 80010be:	4b36      	ldr	r3, [pc, #216]	; (8001198 <main+0x29c>)
 80010c0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80010c4:	461d      	mov	r5, r3
 80010c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  temperatureSensorTaskHandle = osThreadCreate(osThread(temperatureSensorTask), NULL);
 80010d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f00f f887 	bl	80101ec <osThreadCreate>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a2e      	ldr	r2, [pc, #184]	; (800119c <main+0x2a0>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of humiditySensorTask */
  osThreadDef(humiditySensorTask, startHumiditySensorTask, osPriorityBelowNormal, 0, 176);
 80010e4:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <main+0x2a4>)
 80010e6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80010ea:	461d      	mov	r5, r3
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  humiditySensorTaskHandle = osThreadCreate(osThread(humiditySensorTask), NULL);
 80010f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00f f874 	bl	80101ec <osThreadCreate>
 8001104:	4603      	mov	r3, r0
 8001106:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <main+0x2a8>)
 8001108:	6013      	str	r3, [r2, #0]

  /* definition and creation of pressureSensorTask */
  osThreadDef(pressureSensorTask, startPressureSensorTask, osPriorityBelowNormal, 0, 176);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <main+0x2ac>)
 8001110:	461c      	mov	r4, r3
 8001112:	4615      	mov	r5, r2
 8001114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001118:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureSensorTaskHandle = osThreadCreate(osThread(pressureSensorTask), NULL);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f00f f860 	bl	80101ec <osThreadCreate>
 800112c:	4603      	mov	r3, r0
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <main+0x2b0>)
 8001130:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonInterruptTask */
  osThreadDef(buttonInterruptTask, startButtonInterruptTask, osPriorityNormal, 0, 128);
 8001132:	463b      	mov	r3, r7
 8001134:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <main+0x2b4>)
 8001136:	461c      	mov	r4, r3
 8001138:	4615      	mov	r5, r2
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonInterruptTaskHandle = osThreadCreate(osThread(buttonInterruptTask), NULL);
 8001146:	463b      	mov	r3, r7
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f00f f84e 	bl	80101ec <osThreadCreate>
 8001150:	4603      	mov	r3, r0
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <main+0x2b8>)
 8001154:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001156:	f00f f842 	bl	80101de <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800115a:	e7fe      	b.n	800115a <main+0x25e>
 800115c:	20004ce0 	.word	0x20004ce0
 8001160:	20004e0c 	.word	0x20004e0c
 8001164:	20004c08 	.word	0x20004c08
 8001168:	08015974 	.word	0x08015974
 800116c:	20004c90 	.word	0x20004c90
 8001170:	08015990 	.word	0x08015990
 8001174:	20004e08 	.word	0x20004e08
 8001178:	080159ac 	.word	0x080159ac
 800117c:	20004d78 	.word	0x20004d78
 8001180:	080159c8 	.word	0x080159c8
 8001184:	20004e04 	.word	0x20004e04
 8001188:	080159e4 	.word	0x080159e4
 800118c:	20004d74 	.word	0x20004d74
 8001190:	08015a00 	.word	0x08015a00
 8001194:	20004d0c 	.word	0x20004d0c
 8001198:	08015a1c 	.word	0x08015a1c
 800119c:	20004e14 	.word	0x20004e14
 80011a0:	08015a38 	.word	0x08015a38
 80011a4:	20004e18 	.word	0x20004e18
 80011a8:	08015a54 	.word	0x08015a54
 80011ac:	20004e10 	.word	0x20004e10
 80011b0:	08015a70 	.word	0x08015a70
 80011b4:	20004d7c 	.word	0x20004d7c

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b096      	sub	sp, #88	; 0x58
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2244      	movs	r2, #68	; 0x44
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f011 fe51 	bl	8012e6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011de:	f00b fdf3 	bl	800cdc8 <HAL_PWREx_ControlVoltageScaling>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011e8:	f000 feea 	bl	8001fc0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011ec:	f00b fdce 	bl	800cd8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <SystemClock_Config+0xc0>)
 80011f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f6:	4a20      	ldr	r2, [pc, #128]	; (8001278 <SystemClock_Config+0xc0>)
 80011f8:	f023 0318 	bic.w	r3, r3, #24
 80011fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001200:	2314      	movs	r3, #20
 8001202:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001210:	2360      	movs	r3, #96	; 0x60
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	2302      	movs	r3, #2
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001218:	2301      	movs	r3, #1
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001220:	2328      	movs	r3, #40	; 0x28
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001224:	2307      	movs	r3, #7
 8001226:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001228:	2302      	movs	r3, #2
 800122a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800122c:	2302      	movs	r3, #2
 800122e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4618      	mov	r0, r3
 8001236:	f00b fe1d 	bl	800ce74 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001240:	f000 febe 	bl	8001fc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2303      	movs	r3, #3
 800124a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	2104      	movs	r1, #4
 800125c:	4618      	mov	r0, r3
 800125e:	f00c f9ef 	bl	800d640 <HAL_RCC_ClockConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001268:	f000 feaa 	bl	8001fc0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800126c:	f00d fc74 	bl	800eb58 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001270:	bf00      	nop
 8001272:	3758      	adds	r7, #88	; 0x58
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000

0800127c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_I2C2_Init+0x74>)
 8001282:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <MX_I2C2_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_I2C2_Init+0x74>)
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <MX_I2C2_Init+0x7c>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_I2C2_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_I2C2_Init+0x74>)
 8001294:	2201      	movs	r2, #1
 8001296:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_I2C2_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012b6:	480e      	ldr	r0, [pc, #56]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012b8:	f00a fd58 	bl	800bd6c <HAL_I2C_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012c2:	f000 fe7d 	bl	8001fc0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012ca:	f00b fcc7 	bl	800cc5c <HAL_I2CEx_ConfigAnalogFilter>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012d4:	f000 fe74 	bl	8001fc0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012dc:	f00b fd09 	bl	800ccf2 <HAL_I2CEx_ConfigDigitalFilter>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 fe6b 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20004c94 	.word	0x20004c94
 80012f4:	40005800 	.word	0x40005800
 80012f8:	10909cec 	.word	0x10909cec

080012fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_SPI3_Init+0x74>)
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <MX_SPI3_Init+0x78>)
 8001304:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_SPI3_Init+0x74>)
 8001308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800130c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_SPI3_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_SPI3_Init+0x74>)
 8001316:	f44f 7240 	mov.w	r2, #768	; 0x300
 800131a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_SPI3_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_SPI3_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_SPI3_Init+0x74>)
 800132a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_SPI3_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_SPI3_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_SPI3_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_SPI3_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_SPI3_Init+0x74>)
 800134a:	2207      	movs	r2, #7
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_SPI3_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_SPI3_Init+0x74>)
 8001356:	2208      	movs	r2, #8
 8001358:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_SPI3_Init+0x74>)
 800135c:	f00d fece 	bl	800f0fc <HAL_SPI_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001366:	f000 fe2b 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20004d10 	.word	0x20004d10
 8001374:	40003c00 	.word	0x40003c00

08001378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_USART1_UART_Init+0x58>)
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <MX_USART1_UART_Init+0x5c>)
 8001380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_USART1_UART_Init+0x58>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_USART1_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_USART1_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_USART1_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_USART1_UART_Init+0x58>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_USART1_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_USART1_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_USART1_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_USART1_UART_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_USART1_UART_Init+0x58>)
 80013bc:	f00e fa12 	bl	800f7e4 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013c6:	f000 fdfb 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20004d80 	.word	0x20004d80
 80013d4:	40013800 	.word	0x40013800

080013d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <MX_USART3_UART_Init+0x5c>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_USART3_UART_Init+0x58>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_USART3_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_USART3_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_USART3_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_USART3_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_USART3_UART_Init+0x58>)
 800141c:	f00e f9e2 	bl	800f7e4 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001426:	f000 fdcb 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20004c0c 	.word	0x20004c0c
 8001434:	40004800 	.word	0x40004800

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144e:	4bba      	ldr	r3, [pc, #744]	; (8001738 <MX_GPIO_Init+0x300>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4ab9      	ldr	r2, [pc, #740]	; (8001738 <MX_GPIO_Init+0x300>)
 8001454:	f043 0310 	orr.w	r3, r3, #16
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4bb7      	ldr	r3, [pc, #732]	; (8001738 <MX_GPIO_Init+0x300>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	4bb4      	ldr	r3, [pc, #720]	; (8001738 <MX_GPIO_Init+0x300>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4ab3      	ldr	r2, [pc, #716]	; (8001738 <MX_GPIO_Init+0x300>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4bb1      	ldr	r3, [pc, #708]	; (8001738 <MX_GPIO_Init+0x300>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4bae      	ldr	r3, [pc, #696]	; (8001738 <MX_GPIO_Init+0x300>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4aad      	ldr	r2, [pc, #692]	; (8001738 <MX_GPIO_Init+0x300>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4bab      	ldr	r3, [pc, #684]	; (8001738 <MX_GPIO_Init+0x300>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4ba8      	ldr	r3, [pc, #672]	; (8001738 <MX_GPIO_Init+0x300>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4aa7      	ldr	r2, [pc, #668]	; (8001738 <MX_GPIO_Init+0x300>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4ba5      	ldr	r3, [pc, #660]	; (8001738 <MX_GPIO_Init+0x300>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	4ba2      	ldr	r3, [pc, #648]	; (8001738 <MX_GPIO_Init+0x300>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4aa1      	ldr	r2, [pc, #644]	; (8001738 <MX_GPIO_Init+0x300>)
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4b9f      	ldr	r3, [pc, #636]	; (8001738 <MX_GPIO_Init+0x300>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80014cc:	489b      	ldr	r0, [pc, #620]	; (800173c <MX_GPIO_Init+0x304>)
 80014ce:	f00a fc03 	bl	800bcd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f248 1104 	movw	r1, #33028	; 0x8104
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f00a fbfc 	bl	800bcd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80014e0:	2200      	movs	r2, #0
 80014e2:	f24f 0114 	movw	r1, #61460	; 0xf014
 80014e6:	4896      	ldr	r0, [pc, #600]	; (8001740 <MX_GPIO_Init+0x308>)
 80014e8:	f00a fbf6 	bl	800bcd8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f241 0181 	movw	r1, #4225	; 0x1081
 80014f2:	4894      	ldr	r0, [pc, #592]	; (8001744 <MX_GPIO_Init+0x30c>)
 80014f4:	f00a fbf0 	bl	800bcd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fe:	4891      	ldr	r0, [pc, #580]	; (8001744 <MX_GPIO_Init+0x30c>)
 8001500:	f00a fbea 	bl	800bcd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 7110 	mov.w	r1, #576	; 0x240
 800150a:	488f      	ldr	r0, [pc, #572]	; (8001748 <MX_GPIO_Init+0x310>)
 800150c:	f00a fbe4 	bl	800bcd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2120      	movs	r1, #32
 8001514:	488a      	ldr	r0, [pc, #552]	; (8001740 <MX_GPIO_Init+0x308>)
 8001516:	f00a fbdf 	bl	800bcd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	2101      	movs	r1, #1
 800151e:	4887      	ldr	r0, [pc, #540]	; (800173c <MX_GPIO_Init+0x304>)
 8001520:	f00a fbda 	bl	800bcd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001524:	f240 1315 	movw	r3, #277	; 0x115
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	487f      	ldr	r0, [pc, #508]	; (800173c <MX_GPIO_Init+0x304>)
 800153e:	f00a f92d 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001542:	236a      	movs	r3, #106	; 0x6a
 8001544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001546:	4b81      	ldr	r3, [pc, #516]	; (800174c <MX_GPIO_Init+0x314>)
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4879      	ldr	r0, [pc, #484]	; (800173c <MX_GPIO_Init+0x304>)
 8001556:	f00a f921 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800155a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001560:	4b7b      	ldr	r3, [pc, #492]	; (8001750 <MX_GPIO_Init+0x318>)
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4876      	ldr	r0, [pc, #472]	; (8001748 <MX_GPIO_Init+0x310>)
 8001570:	f00a f914 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001574:	233f      	movs	r3, #63	; 0x3f
 8001576:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001578:	230b      	movs	r3, #11
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4870      	ldr	r0, [pc, #448]	; (8001748 <MX_GPIO_Init+0x310>)
 8001588:	f00a f908 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800158c:	2303      	movs	r3, #3
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800159c:	2308      	movs	r3, #8
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f00a f8f7 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80015ae:	f248 1304 	movw	r3, #33028	; 0x8104
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f00a f8e7 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80015ce:	2308      	movs	r3, #8
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015de:	2301      	movs	r3, #1
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f00a f8d6 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80015f0:	2310      	movs	r3, #16
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f4:	230b      	movs	r3, #11
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001606:	f00a f8c9 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800160a:	23e0      	movs	r3, #224	; 0xe0
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800161a:	2305      	movs	r3, #5
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f00a f8b8 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800162c:	2301      	movs	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001630:	4b46      	ldr	r3, [pc, #280]	; (800174c <MX_GPIO_Init+0x314>)
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4840      	ldr	r0, [pc, #256]	; (8001740 <MX_GPIO_Init+0x308>)
 8001640:	f00a f8ac 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001644:	2302      	movs	r3, #2
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001648:	230b      	movs	r3, #11
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	483a      	ldr	r0, [pc, #232]	; (8001740 <MX_GPIO_Init+0x308>)
 8001658:	f00a f8a0 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800165c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001660:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4832      	ldr	r0, [pc, #200]	; (8001740 <MX_GPIO_Init+0x308>)
 8001676:	f00a f891 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800167a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800168c:	2306      	movs	r3, #6
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	4829      	ldr	r0, [pc, #164]	; (800173c <MX_GPIO_Init+0x304>)
 8001698:	f00a f880 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800169c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80016a0:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016ae:	230a      	movs	r3, #10
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4820      	ldr	r0, [pc, #128]	; (800173c <MX_GPIO_Init+0x304>)
 80016ba:	f00a f86f 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80016be:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80016c2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <MX_GPIO_Init+0x314>)
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	481c      	ldr	r0, [pc, #112]	; (8001744 <MX_GPIO_Init+0x30c>)
 80016d4:	f00a f862 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80016d8:	f243 0381 	movw	r3, #12417	; 0x3081
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4814      	ldr	r0, [pc, #80]	; (8001744 <MX_GPIO_Init+0x30c>)
 80016f2:	f00a f853 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80016f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <MX_GPIO_Init+0x310>)
 8001710:	f00a f844 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001714:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_GPIO_Init+0x314>)
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4807      	ldr	r0, [pc, #28]	; (8001748 <MX_GPIO_Init+0x310>)
 800172a:	f00a f837 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800172e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001734:	2300      	movs	r3, #0
 8001736:	e00d      	b.n	8001754 <MX_GPIO_Init+0x31c>
 8001738:	40021000 	.word	0x40021000
 800173c:	48001000 	.word	0x48001000
 8001740:	48000400 	.word	0x48000400
 8001744:	48000c00 	.word	0x48000c00
 8001748:	48000800 	.word	0x48000800
 800174c:	10110000 	.word	0x10110000
 8001750:	10210000 	.word	0x10210000
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001764:	f00a f81a 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001768:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800177a:	230a      	movs	r3, #10
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001788:	f00a f808 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800178c:	2302      	movs	r3, #2
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800179c:	2305      	movs	r3, #5
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	481c      	ldr	r0, [pc, #112]	; (8001818 <MX_GPIO_Init+0x3e0>)
 80017a8:	f009 fff8 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80017ac:	2378      	movs	r3, #120	; 0x78
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017bc:	2307      	movs	r3, #7
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	4814      	ldr	r0, [pc, #80]	; (8001818 <MX_GPIO_Init+0x3e0>)
 80017c8:	f009 ffe8 	bl	800b79c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80017cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d2:	2312      	movs	r3, #18
 80017d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017de:	2304      	movs	r3, #4
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <MX_GPIO_Init+0x3e4>)
 80017ea:	f009 ffd7 	bl	800b79c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2105      	movs	r1, #5
 80017f2:	2017      	movs	r0, #23
 80017f4:	f009 ffa8 	bl	800b748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017f8:	2017      	movs	r0, #23
 80017fa:	f009 ffc1 	bl	800b780 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2105      	movs	r1, #5
 8001802:	2028      	movs	r0, #40	; 0x28
 8001804:	f009 ffa0 	bl	800b748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001808:	2028      	movs	r0, #40	; 0x28
 800180a:	f009 ffb9 	bl	800b780 <HAL_NVIC_EnableIRQ>

}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	48000c00 	.word	0x48000c00
 800181c:	48000400 	.word	0x48000400

08001820 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == USER_BUTTON_PIN) {
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001830:	d104      	bne.n	800183c <HAL_GPIO_EXTI_Callback+0x1c>

		osSemaphoreRelease(userButtonInterruptSemaphoreHandle);
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <HAL_GPIO_EXTI_Callback+0x24>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f00e fe40 	bl	80104bc <osSemaphoreRelease>
	}
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20004c08 	.word	0x20004c08

08001848 <startGreenLightTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startGreenLightTask */
void startGreenLightTask(void const * argument)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001850:	2000      	movs	r0, #0
 8001852:	f010 fb13 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001856:	6178      	str	r0, [r7, #20]

	TickType_t last_tick_time = 0, end_time = 0,diff = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
	last_tick_time = xTaskGetTickCount();
 8001864:	f010 f834 	bl	80118d0 <xTaskGetTickCount>
 8001868:	4603      	mov	r3, r0
 800186a:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <startGreenLightTask+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	4618      	mov	r0, r3
 8001876:	f00e fd1d 	bl	80102b4 <osMutexWait>

		if (manager.status == RACING) {
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <startGreenLightTask+0x68>)
 800187c:	7e9b      	ldrb	r3, [r3, #26]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d102      	bne.n	8001888 <startGreenLightTask+0x40>
			BSP_LED_Toggle(LED2);
 8001882:	2000      	movs	r0, #0
 8001884:	f000 fff2 	bl	800286c <BSP_LED_Toggle>
		}

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001888:	2000      	movs	r0, #0
 800188a:	f010 faf7 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 800188e:	6178      	str	r0, [r7, #20]

		//printf("green light task watermark %lu \r\n", uxHighWaterMark);

		osMutexRelease(managerMutexHandle);
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <startGreenLightTask+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f00e fd5b 	bl	8010350 <osMutexRelease>

		osDelayUntil(&last_tick_time, OS_DELAY_STANDARD / portTICK_PERIOD_MS);
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018a2:	4618      	mov	r0, r3
 80018a4:	f00e fe40 	bl	8010528 <osDelayUntil>
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 80018a8:	e7e0      	b.n	800186c <startGreenLightTask+0x24>
 80018aa:	bf00      	nop
 80018ac:	20004e0c 	.word	0x20004e0c
 80018b0:	20004ce0 	.word	0x20004ce0

080018b4 <startTrackDataPrintTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTrackDataPrintTask */
void startTrackDataPrintTask(void const * argument)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTrackDataPrintTask */

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80018bc:	2000      	movs	r0, #0
 80018be:	f010 fadd 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 80018c2:	62f8      	str	r0, [r7, #44]	; 0x2c

	TickType_t last_tick_time = 0, end_time = 0,diff = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
	last_tick_time = xTaskGetTickCount();
 80018d0:	f00f fffe 	bl	80118d0 <xTaskGetTickCount>
 80018d4:	4603      	mov	r3, r0
 80018d6:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <startTrackDataPrintTask+0xdc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00e fce7 	bl	80102b4 <osMutexWait>

		if (manager.status == WAITING_FOR_GREEN_LIGHT
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <startTrackDataPrintTask+0xe0>)
 80018e8:	7e9b      	ldrb	r3, [r3, #26]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d13e      	bne.n	800196c <startTrackDataPrintTask+0xb8>
				&& manager.temperature_value > 0
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <startTrackDataPrintTask+0xe0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	dd3a      	ble.n	800196c <startTrackDataPrintTask+0xb8>
				&& manager.waiting_for_race_director_executions % 40 == 0) {
 80018f6:	4b27      	ldr	r3, [pc, #156]	; (8001994 <startTrackDataPrintTask+0xe0>)
 80018f8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80018fc:	4b26      	ldr	r3, [pc, #152]	; (8001998 <startTrackDataPrintTask+0xe4>)
 80018fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001902:	0959      	lsrs	r1, r3, #5
 8001904:	460b      	mov	r3, r1
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d12b      	bne.n	800196c <startTrackDataPrintTask+0xb8>

			//Pressure

			int normalized = manager.pressure_value;
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <startTrackDataPrintTask+0xe0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	623b      	str	r3, [r7, #32]

			printf("Track pressure update: %d mBar \r\n", normalized);
 800191a:	6a39      	ldr	r1, [r7, #32]
 800191c:	481f      	ldr	r0, [pc, #124]	; (800199c <startTrackDataPrintTask+0xe8>)
 800191e:	f011 ff73 	bl	8013808 <iprintf>

			//Temperature

			int temp_value = manager.temperature_value;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <startTrackDataPrintTask+0xe0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	61fb      	str	r3, [r7, #28]
			int tmpInt1 = temp_value;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	61bb      	str	r3, [r7, #24]
			int tmpFrac = temp_value - tmpInt1;
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
			int tmpInt2 = trunc(tmpFrac * 100);
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2264      	movs	r2, #100	; 0x64
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fdf1 	bl	8000524 <__aeabi_i2d>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f905 	bl	8000b58 <__aeabi_d2iz>
 800194e:	4603      	mov	r3, r0
 8001950:	613b      	str	r3, [r7, #16]

			printf("Track temperature update: %d.%02d C\r\n", tmpInt1, tmpInt2);
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	69b9      	ldr	r1, [r7, #24]
 8001956:	4812      	ldr	r0, [pc, #72]	; (80019a0 <startTrackDataPrintTask+0xec>)
 8001958:	f011 ff56 	bl	8013808 <iprintf>

			//Humidity

			uint8_t hmd = manager.humidity_value;
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <startTrackDataPrintTask+0xe0>)
 800195e:	791b      	ldrb	r3, [r3, #4]
 8001960:	73fb      	strb	r3, [r7, #15]

			printf("Track humidity update: %d %%\r\n\n", hmd);
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	4619      	mov	r1, r3
 8001966:	480f      	ldr	r0, [pc, #60]	; (80019a4 <startTrackDataPrintTask+0xf0>)
 8001968:	f011 ff4e 	bl	8013808 <iprintf>
		}

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800196c:	2000      	movs	r0, #0
 800196e:	f010 fa85 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001972:	62f8      	str	r0, [r7, #44]	; 0x2c

		//printf("track data task watermark %lu \r\n", uxHighWaterMark);

		osMutexRelease(managerMutexHandle);
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <startTrackDataPrintTask+0xdc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f00e fce9 	bl	8010350 <osMutexRelease>

		osDelayUntil(&last_tick_time, OS_DELAY_STANDARD / portTICK_PERIOD_MS);
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001986:	4618      	mov	r0, r3
 8001988:	f00e fdce 	bl	8010528 <osDelayUntil>
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 800198c:	e7a4      	b.n	80018d8 <startTrackDataPrintTask+0x24>
 800198e:	bf00      	nop
 8001990:	20004e0c 	.word	0x20004e0c
 8001994:	20004ce0 	.word	0x20004ce0
 8001998:	cccccccd 	.word	0xcccccccd
 800199c:	08015a8c 	.word	0x08015a8c
 80019a0:	08015ab0 	.word	0x08015ab0
 80019a4:	08015ad8 	.word	0x08015ad8

080019a8 <startUserButtonTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUserButtonTask */
void startUserButtonTask(void const * argument)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUserButtonTask */

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80019b0:	2000      	movs	r0, #0
 80019b2:	f010 fa63 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 80019b6:	6178      	str	r0, [r7, #20]

	TickType_t last_tick_time = 0, end_time = 0,diff = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
	last_tick_time = xTaskGetTickCount();
 80019c4:	f00f ff84 	bl	80118d0 <xTaskGetTickCount>
 80019c8:	4603      	mov	r3, r0
 80019ca:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <startUserButtonTask+0x90>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00e fc6d 	bl	80102b4 <osMutexWait>

		if (manager.status == WAITING_FOR_GREEN_LIGHT && manager.waiting_for_race_director_executions % 20 == 0) {
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <startUserButtonTask+0x94>)
 80019dc:	7e9b      	ldrb	r3, [r3, #26]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d111      	bne.n	8001a06 <startUserButtonTask+0x5e>
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <startUserButtonTask+0x94>)
 80019e4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <startUserButtonTask+0x98>)
 80019ea:	fba3 1302 	umull	r1, r3, r3, r2
 80019ee:	0919      	lsrs	r1, r3, #4
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <startUserButtonTask+0x5e>

			//Callback is handled in the HAL_GPIO_EXTI_Callback method

			//printf("\033[2J"); //Clears the terminal

			printf("Press the USER button to start the Grand Prix...\r\n\n");
 8001a00:	4810      	ldr	r0, [pc, #64]	; (8001a44 <startUserButtonTask+0x9c>)
 8001a02:	f011 ff87 	bl	8013914 <puts>

				manager.waiting_for_race_director_executions = 0;
			}
		}

		manager.waiting_for_race_director_executions++;
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <startUserButtonTask+0x94>)
 8001a08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <startUserButtonTask+0x94>)
 8001a12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001a16:	2000      	movs	r0, #0
 8001a18:	f010 fa30 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001a1c:	6178      	str	r0, [r7, #20]

		//printf("user button task watermark %lu \r\n", uxHighWaterMark);

		osMutexRelease(managerMutexHandle);
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <startUserButtonTask+0x90>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00e fc94 	bl	8010350 <osMutexRelease>

		osDelayUntil(&last_tick_time, OS_DELAY_STANDARD / portTICK_PERIOD_MS);
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00e fd79 	bl	8010528 <osDelayUntil>
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001a36:	e7c9      	b.n	80019cc <startUserButtonTask+0x24>
 8001a38:	20004e0c 	.word	0x20004e0c
 8001a3c:	20004ce0 	.word	0x20004ce0
 8001a40:	cccccccd 	.word	0xcccccccd
 8001a44:	08015af8 	.word	0x08015af8

08001a48 <startProximitySensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startProximitySensorTask */
void startProximitySensorTask(void const * argument)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startProximitySensorTask */

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001a50:	2000      	movs	r0, #0
 8001a52:	f010 fa13 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001a56:	61f8      	str	r0, [r7, #28]

	TickType_t last_tick_time = 0, end_time = 0,diff = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
	last_tick_time = xTaskGetTickCount();
 8001a64:	f00f ff34 	bl	80118d0 <xTaskGetTickCount>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for(;;)
	{
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <startProximitySensorTask+0x70>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00e fc1d 	bl	80102b4 <osMutexWait>

		if (manager.status != WAITING_FOR_GREEN_LIGHT) {
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <startProximitySensorTask+0x74>)
 8001a7c:	7e9b      	ldrb	r3, [r3, #26]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <startProximitySensorTask+0x4e>

			uint8_t proximity_value = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	74fb      	strb	r3, [r7, #19]

			proximity_value = VL53L0X_PROXIMITY_GetDistance();
 8001a86:	f009 fc4b 	bl	800b320 <VL53L0X_PROXIMITY_GetDistance>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	74fb      	strb	r3, [r7, #19]

			manager.proximity = proximity_value;
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <startProximitySensorTask+0x74>)
 8001a94:	831a      	strh	r2, [r3, #24]
		}

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001a96:	2000      	movs	r0, #0
 8001a98:	f010 f9f0 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001a9c:	61f8      	str	r0, [r7, #28]

		//printf("proximity sensor task watermark %lu \r\n", uxHighWaterMark);

		osMutexRelease(managerMutexHandle);
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <startProximitySensorTask+0x70>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00e fc54 	bl	8010350 <osMutexRelease>

		osDelayUntil(&last_tick_time, OS_DELAY_STANDARD / portTICK_PERIOD_MS);
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00e fd39 	bl	8010528 <osDelayUntil>
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001ab6:	e7d9      	b.n	8001a6c <startProximitySensorTask+0x24>
 8001ab8:	20004e0c 	.word	0x20004e0c
 8001abc:	20004ce0 	.word	0x20004ce0

08001ac0 <startRaceDataPrintTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startRaceDataPrintTask */
void startRaceDataPrintTask(void const * argument)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRaceDataPrintTask */

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f010 f9d7 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001ace:	61b8      	str	r0, [r7, #24]

	TickType_t last_tick_time = 0, end_time = 0,diff = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
	last_tick_time = xTaskGetTickCount();
 8001adc:	f00f fef8 	bl	80118d0 <xTaskGetTickCount>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for(;;)
	{
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001ae4:	4b78      	ldr	r3, [pc, #480]	; (8001cc8 <startRaceDataPrintTask+0x208>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	4618      	mov	r0, r3
 8001aee:	f00e fbe1 	bl	80102b4 <osMutexWait>

		if (manager.status == RACING) {
 8001af2:	4b76      	ldr	r3, [pc, #472]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001af4:	7e9b      	ldrb	r3, [r3, #26]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	f040 80a4 	bne.w	8001c44 <startRaceDataPrintTask+0x184>

			printf("\033[2J"); //Clears the terminal
 8001afc:	4874      	ldr	r0, [pc, #464]	; (8001cd0 <startRaceDataPrintTask+0x210>)
 8001afe:	f011 fe83 	bl	8013808 <iprintf>

			if (manager.race_executions % 10 == 0 || manager.last_opponent_value != -1) {
 8001b02:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001b04:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001b08:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <startRaceDataPrintTask+0x214>)
 8001b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b0e:	08d9      	lsrs	r1, r3, #3
 8001b10:	460b      	mov	r3, r1
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <startRaceDataPrintTask+0x6a>
 8001b20:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d058      	beq.n	8001bdc <startRaceDataPrintTask+0x11c>

				if (manager.opponent_executions < 7) {
 8001b2a:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001b2c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001b30:	2b06      	cmp	r3, #6
 8001b32:	d83b      	bhi.n	8001bac <startRaceDataPrintTask+0xec>

					manager.last_opponent_value = manager.last_opponent_value != -1 ? manager.last_opponent_value : rand() % 16;
 8001b34:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d002      	beq.n	8001b44 <startRaceDataPrintTask+0x84>
 8001b3e:	4b63      	ldr	r3, [pc, #396]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	e009      	b.n	8001b58 <startRaceDataPrintTask+0x98>
 8001b44:	f011 feee 	bl	8013924 <rand>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	425a      	negs	r2, r3
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	f002 020f 	and.w	r2, r2, #15
 8001b54:	bf58      	it	pl
 8001b56:	4253      	negpl	r3, r2
 8001b58:	4a5c      	ldr	r2, [pc, #368]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001b5a:	6293      	str	r3, [r2, #40]	; 0x28

					manager.opponent_executions++;
 8001b5c:	4b5b      	ldr	r3, [pc, #364]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001b5e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001b62:	3301      	adds	r3, #1
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001b68:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

					for (uint8_t i = 0; i < 7; i++) {
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	77fb      	strb	r3, [r7, #31]
 8001b70:	e018      	b.n	8001ba4 <startRaceDataPrintTask+0xe4>

						if (i == manager.opponent_executions) {
 8001b72:	4b56      	ldr	r3, [pc, #344]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001b74:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001b78:	7ffa      	ldrb	r2, [r7, #31]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d109      	bne.n	8001b92 <startRaceDataPrintTask+0xd2>

							printf(computeTrackOpponent(manager.last_opponent_value));
 8001b7e:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fdf8 	bl	8002778 <computeTrackOpponent>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f011 fe3c 	bl	8013808 <iprintf>
 8001b90:	e005      	b.n	8001b9e <startRaceDataPrintTask+0xde>

						} else {

							printf(getClearTrackString());
 8001b92:	f000 fe21 	bl	80027d8 <getClearTrackString>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f011 fe35 	bl	8013808 <iprintf>
					for (uint8_t i = 0; i < 7; i++) {
 8001b9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	77fb      	strb	r3, [r7, #31]
 8001ba4:	7ffb      	ldrb	r3, [r7, #31]
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d9e3      	bls.n	8001b72 <startRaceDataPrintTask+0xb2>
				if (manager.opponent_executions < 7) {
 8001baa:	e02a      	b.n	8001c02 <startRaceDataPrintTask+0x142>
						}
					}

				} else {

					manager.last_opponent_value = -1;
 8001bac:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001bae:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
					manager.opponent_executions = 0;
 8001bb4:	4b45      	ldr	r3, [pc, #276]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

					for (uint8_t i = 0; i < 7; i++) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	77bb      	strb	r3, [r7, #30]
 8001bc0:	e008      	b.n	8001bd4 <startRaceDataPrintTask+0x114>

						printf(getClearTrackString());
 8001bc2:	f000 fe09 	bl	80027d8 <getClearTrackString>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f011 fe1d 	bl	8013808 <iprintf>
					for (uint8_t i = 0; i < 7; i++) {
 8001bce:	7fbb      	ldrb	r3, [r7, #30]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	77bb      	strb	r3, [r7, #30]
 8001bd4:	7fbb      	ldrb	r3, [r7, #30]
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d9f3      	bls.n	8001bc2 <startRaceDataPrintTask+0x102>
				if (manager.opponent_executions < 7) {
 8001bda:	e012      	b.n	8001c02 <startRaceDataPrintTask+0x142>
					}
				}

			} else {

				for (uint8_t i = 0; i < 7; i++) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	777b      	strb	r3, [r7, #29]
 8001be0:	e008      	b.n	8001bf4 <startRaceDataPrintTask+0x134>

					printf(getClearTrackString());
 8001be2:	f000 fdf9 	bl	80027d8 <getClearTrackString>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f011 fe0d 	bl	8013808 <iprintf>
				for (uint8_t i = 0; i < 7; i++) {
 8001bee:	7f7b      	ldrb	r3, [r7, #29]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	777b      	strb	r3, [r7, #29]
 8001bf4:	7f7b      	ldrb	r3, [r7, #29]
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d9f3      	bls.n	8001be2 <startRaceDataPrintTask+0x122>
				}

				manager.last_opponent_value = -1;
 8001bfa:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
			}

			printf(computeCurrentCarPosition(manager.accelerometer_value.x));
 8001c02:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fcee 	bl	80025e8 <computeCurrentCarPosition>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f011 fdfa 	bl	8013808 <iprintf>

			manager.race_executions++;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c16:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c20:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

			if (manager.race_executions == 150) {
 8001c24:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c26:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c2a:	2b96      	cmp	r3, #150	; 0x96
 8001c2c:	d13a      	bne.n	8001ca4 <startRaceDataPrintTask+0x1e4>

				printf("Chequered flag, good job!\r\n\n");
 8001c2e:	482a      	ldr	r0, [pc, #168]	; (8001cd8 <startRaceDataPrintTask+0x218>)
 8001c30:	f011 fe70 	bl	8013914 <puts>

				manager.race_executions = 0;
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

				manager.status = WAITING_FOR_GREEN_LIGHT;
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	769a      	strb	r2, [r3, #26]
 8001c42:	e02f      	b.n	8001ca4 <startRaceDataPrintTask+0x1e4>
			}

		} else if (manager.status == PIT_STOP) {
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c46:	7e9b      	ldrb	r3, [r3, #26]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d12b      	bne.n	8001ca4 <startRaceDataPrintTask+0x1e4>

			if (manager.proximity > 100 && manager.proximity < 200) {
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c4e:	8b1b      	ldrh	r3, [r3, #24]
 8001c50:	2b64      	cmp	r3, #100	; 0x64
 8001c52:	d915      	bls.n	8001c80 <startRaceDataPrintTask+0x1c0>
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c56:	8b1b      	ldrh	r3, [r3, #24]
 8001c58:	2bc7      	cmp	r3, #199	; 0xc7
 8001c5a:	d811      	bhi.n	8001c80 <startRaceDataPrintTask+0x1c0>

				printf("Hold steady...!\r\n\n");
 8001c5c:	481f      	ldr	r0, [pc, #124]	; (8001cdc <startRaceDataPrintTask+0x21c>)
 8001c5e:	f011 fe59 	bl	8013914 <puts>

				printf(performPitStop());
 8001c62:	f000 fd7f 	bl	8002764 <performPitStop>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f011 fdcd 	bl	8013808 <iprintf>

				manager.pit_stop_executions++;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c7e:	e002      	b.n	8001c86 <startRaceDataPrintTask+0x1c6>

			} else {

				printf("Keep your hands on the wheel!\r\n\n");
 8001c80:	4817      	ldr	r0, [pc, #92]	; (8001ce0 <startRaceDataPrintTask+0x220>)
 8001c82:	f011 fe47 	bl	8013914 <puts>
			}

			if (manager.pit_stop_executions == 20) {
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c8c:	2b14      	cmp	r3, #20
 8001c8e:	d109      	bne.n	8001ca4 <startRaceDataPrintTask+0x1e4>

				manager.pit_stop_executions = 0 ;
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

				manager.status = RACING;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <startRaceDataPrintTask+0x20c>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	769a      	strb	r2, [r3, #26]

				printf("GO GO GO!\r\n\n");
 8001c9e:	4811      	ldr	r0, [pc, #68]	; (8001ce4 <startRaceDataPrintTask+0x224>)
 8001ca0:	f011 fe38 	bl	8013914 <puts>
			}
		}

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f010 f8e9 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001caa:	61b8      	str	r0, [r7, #24]

		//printf("race data task watermark %lu \r\n", uxHighWaterMark);

		osMutexRelease(managerMutexHandle);
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <startRaceDataPrintTask+0x208>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00e fb4d 	bl	8010350 <osMutexRelease>

		osDelayUntil(&last_tick_time, OS_DELAY_STANDARD / portTICK_PERIOD_MS);
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f00e fc32 	bl	8010528 <osDelayUntil>
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001cc4:	e70e      	b.n	8001ae4 <startRaceDataPrintTask+0x24>
 8001cc6:	bf00      	nop
 8001cc8:	20004e0c 	.word	0x20004e0c
 8001ccc:	20004ce0 	.word	0x20004ce0
 8001cd0:	08015b2c 	.word	0x08015b2c
 8001cd4:	cccccccd 	.word	0xcccccccd
 8001cd8:	08015b34 	.word	0x08015b34
 8001cdc:	08015b50 	.word	0x08015b50
 8001ce0:	08015b64 	.word	0x08015b64
 8001ce4:	08015b84 	.word	0x08015b84

08001ce8 <startAccelerometerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startAccelerometerTask */
void startAccelerometerTask(void const * argument)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08c      	sub	sp, #48	; 0x30
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAccelerometerTask */

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f010 f8c3 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001cf6:	62f8      	str	r0, [r7, #44]	; 0x2c

	TickType_t last_tick_time = 0, end_time = 0,diff = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
	last_tick_time = xTaskGetTickCount();
 8001d04:	f00f fde4 	bl	80118d0 <xTaskGetTickCount>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	617b      	str	r3, [r7, #20]

	/* Infinite loop */
	for(;;)
	{
		TickType_t initial_time = 0, end_time = 0,diff = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
		initial_time = xTaskGetTickCount();
 8001d18:	f00f fdda 	bl	80118d0 <xTaskGetTickCount>
 8001d1c:	6238      	str	r0, [r7, #32]

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <startAccelerometerTask+0x98>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f04f 31ff 	mov.w	r1, #4294967295
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00e fac4 	bl	80102b4 <osMutexWait>

		if (manager.status == RACING) {
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <startAccelerometerTask+0x9c>)
 8001d2e:	7e9b      	ldrb	r3, [r3, #26]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d113      	bne.n	8001d5c <startAccelerometerTask+0x74>

			BSP_MOTION_SENSOR_Axes_t  acc_value = {0, 0, 0};
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]

			BSP_MOTION_SENSOR_GetAxes(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO, &acc_value);
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	461a      	mov	r2, r3
 8001d46:	2102      	movs	r1, #2
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f001 fd15 	bl	8003778 <BSP_MOTION_SENSOR_GetAxes>

			manager.accelerometer_value = acc_value;
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <startAccelerometerTask+0x9c>)
 8001d50:	330c      	adds	r3, #12
 8001d52:	f107 0208 	add.w	r2, r7, #8
 8001d56:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f010 f88d 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001d62:	62f8      	str	r0, [r7, #44]	; 0x2c

		//printf("accelerometer task watermark %lu \r\n", uxHighWaterMark);

		osMutexRelease(managerMutexHandle);
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <startAccelerometerTask+0x98>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f00e faf1 	bl	8010350 <osMutexRelease>

		osDelayUntil(&last_tick_time, OS_DELAY_STANDARD / portTICK_PERIOD_MS);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001d76:	4618      	mov	r0, r3
 8001d78:	f00e fbd6 	bl	8010528 <osDelayUntil>
	{
 8001d7c:	e7c6      	b.n	8001d0c <startAccelerometerTask+0x24>
 8001d7e:	bf00      	nop
 8001d80:	20004e0c 	.word	0x20004e0c
 8001d84:	20004ce0 	.word	0x20004ce0

08001d88 <startTemperatureSensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTemperatureSensorTask */
void startTemperatureSensorTask(void const * argument)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTemperatureSensorTask */

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001d90:	2000      	movs	r0, #0
 8001d92:	f010 f873 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001d96:	6178      	str	r0, [r7, #20]

	TickType_t last_tick_time = 0, end_time = 0,diff = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
	last_tick_time = xTaskGetTickCount();
 8001da4:	f00f fd94 	bl	80118d0 <xTaskGetTickCount>
 8001da8:	4603      	mov	r3, r0
 8001daa:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <startTemperatureSensorTask+0x68>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00e fa7d 	bl	80102b4 <osMutexWait>

		manager.temperature_value = BSP_TSENSOR_ReadTemp();
 8001dba:	f001 fe6d 	bl	8003a98 <BSP_TSENSOR_ReadTemp>
 8001dbe:	eef0 7a40 	vmov.f32	s15, s0
 8001dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc6:	ee17 2a90 	vmov	r2, s15
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <startTemperatureSensorTask+0x6c>)
 8001dcc:	601a      	str	r2, [r3, #0]

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f010 f854 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001dd4:	6178      	str	r0, [r7, #20]

		//printf("temperature task watermark %lu \r\n", uxHighWaterMark);

		osMutexRelease(managerMutexHandle);
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <startTemperatureSensorTask+0x68>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f00e fab8 	bl	8010350 <osMutexRelease>

		osDelayUntil(&last_tick_time, OS_DELAY_STANDARD / portTICK_PERIOD_MS);
 8001de0:	f107 0308 	add.w	r3, r7, #8
 8001de4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001de8:	4618      	mov	r0, r3
 8001dea:	f00e fb9d 	bl	8010528 <osDelayUntil>
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001dee:	e7dd      	b.n	8001dac <startTemperatureSensorTask+0x24>
 8001df0:	20004e0c 	.word	0x20004e0c
 8001df4:	20004ce0 	.word	0x20004ce0

08001df8 <startHumiditySensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startHumiditySensorTask */
void startHumiditySensorTask(void const * argument)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startHumiditySensorTask */

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001e00:	2000      	movs	r0, #0
 8001e02:	f010 f83b 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001e06:	6178      	str	r0, [r7, #20]

	TickType_t last_tick_time = 0, end_time = 0,diff = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
	last_tick_time = xTaskGetTickCount();
 8001e14:	f00f fd5c 	bl	80118d0 <xTaskGetTickCount>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <startHumiditySensorTask+0x6c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00e fa45 	bl	80102b4 <osMutexWait>

		manager.humidity_value = BSP_HSENSOR_ReadHumidity();
 8001e2a:	f001 fbe7 	bl	80035fc <BSP_HSENSOR_ReadHumidity>
 8001e2e:	eef0 7a40 	vmov.f32	s15, s0
 8001e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e36:	edc7 7a00 	vstr	s15, [r7]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <startHumiditySensorTask+0x70>)
 8001e40:	711a      	strb	r2, [r3, #4]

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001e42:	2000      	movs	r0, #0
 8001e44:	f010 f81a 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001e48:	6178      	str	r0, [r7, #20]

		//printf("humidity task watermark %lu \r\n", uxHighWaterMark);

		osMutexRelease(managerMutexHandle);
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <startHumiditySensorTask+0x6c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f00e fa7e 	bl	8010350 <osMutexRelease>

		osDelayUntil(&last_tick_time, OS_DELAY_STANDARD / portTICK_PERIOD_MS);
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00e fb63 	bl	8010528 <osDelayUntil>
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001e62:	e7db      	b.n	8001e1c <startHumiditySensorTask+0x24>
 8001e64:	20004e0c 	.word	0x20004e0c
 8001e68:	20004ce0 	.word	0x20004ce0

08001e6c <startPressureSensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startPressureSensorTask */
void startPressureSensorTask(void const * argument)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPressureSensorTask */

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001e74:	2000      	movs	r0, #0
 8001e76:	f010 f801 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001e7a:	6178      	str	r0, [r7, #20]

	TickType_t last_tick_time = 0, end_time = 0,diff = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
	last_tick_time = xTaskGetTickCount();
 8001e88:	f00f fd22 	bl	80118d0 <xTaskGetTickCount>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <startPressureSensorTask+0x68>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00e fa0b 	bl	80102b4 <osMutexWait>

		manager.pressure_value = BSP_PSENSOR_ReadPressure();
 8001e9e:	f001 fdd1 	bl	8003a44 <BSP_PSENSOR_ReadPressure>
 8001ea2:	eef0 7a40 	vmov.f32	s15, s0
 8001ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eaa:	ee17 2a90 	vmov	r2, s15
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <startPressureSensorTask+0x6c>)
 8001eb0:	609a      	str	r2, [r3, #8]

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f00f ffe2 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001eb8:	6178      	str	r0, [r7, #20]

		//printf("pressure task watermark %lu \r\n", uxHighWaterMark);

		osMutexRelease(managerMutexHandle);
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <startPressureSensorTask+0x68>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f00e fa46 	bl	8010350 <osMutexRelease>

		osDelayUntil(&last_tick_time, OS_DELAY_STANDARD / portTICK_PERIOD_MS);
 8001ec4:	f107 0308 	add.w	r3, r7, #8
 8001ec8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f00e fb2b 	bl	8010528 <osDelayUntil>
		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001ed2:	e7dd      	b.n	8001e90 <startPressureSensorTask+0x24>
 8001ed4:	20004e0c 	.word	0x20004e0c
 8001ed8:	20004ce0 	.word	0x20004ce0

08001edc <startButtonInterruptTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startButtonInterruptTask */
void startButtonInterruptTask(void const * argument)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startButtonInterruptTask */

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f00f ffc9 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001eea:	6178      	str	r0, [r7, #20]

	TickType_t last_tick_time = 0, end_time = 0,diff = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
	last_tick_time = xTaskGetTickCount();
 8001ef8:	f00f fcea 	bl	80118d0 <xTaskGetTickCount>
 8001efc:	4603      	mov	r3, r0
 8001efe:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		osSemaphoreWait(userButtonInterruptSemaphoreHandle, MUTEX_WAIT_TIMEOUT);
 8001f00:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <startButtonInterruptTask+0xa8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f00e fa89 	bl	8010420 <osSemaphoreWait>

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <startButtonInterruptTask+0xac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f04f 31ff 	mov.w	r1, #4294967295
 8001f16:	4618      	mov	r0, r3
 8001f18:	f00e f9cc 	bl	80102b4 <osMutexWait>

		if (manager.status == WAITING_FOR_GREEN_LIGHT) {
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <startButtonInterruptTask+0xb0>)
 8001f1e:	7e9b      	ldrb	r3, [r3, #26]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <startButtonInterruptTask+0x56>

			manager.status = RACING;
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <startButtonInterruptTask+0xb0>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	769a      	strb	r2, [r3, #26]

			printf("Green light!\r\n\n");
 8001f2a:	4819      	ldr	r0, [pc, #100]	; (8001f90 <startButtonInterruptTask+0xb4>)
 8001f2c:	f011 fcf2 	bl	8013914 <puts>
 8001f30:	e017      	b.n	8001f62 <startButtonInterruptTask+0x86>

		} else if (manager.status == RACING) {
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <startButtonInterruptTask+0xb0>)
 8001f34:	7e9b      	ldrb	r3, [r3, #26]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d106      	bne.n	8001f48 <startButtonInterruptTask+0x6c>

			manager.status = PIT_STOP;
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <startButtonInterruptTask+0xb0>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	769a      	strb	r2, [r3, #26]

			printf("------- PIT STOP -------\r\n\n");
 8001f40:	4814      	ldr	r0, [pc, #80]	; (8001f94 <startButtonInterruptTask+0xb8>)
 8001f42:	f011 fce7 	bl	8013914 <puts>
 8001f46:	e00c      	b.n	8001f62 <startButtonInterruptTask+0x86>

		} else {

			manager.status = WAITING_FOR_GREEN_LIGHT;
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <startButtonInterruptTask+0xb0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	769a      	strb	r2, [r3, #26]

			manager.waiting_for_race_director_executions = 0;
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <startButtonInterruptTask+0xb0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

			BSP_LED_Off(LED2);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 fc72 	bl	8002840 <BSP_LED_Off>

			printf("We need to retire the car! Sorry.\r\n\n");
 8001f5c:	480e      	ldr	r0, [pc, #56]	; (8001f98 <startButtonInterruptTask+0xbc>)
 8001f5e:	f011 fcd9 	bl	8013914 <puts>
		}

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8001f62:	2000      	movs	r0, #0
 8001f64:	f00f ff8a 	bl	8011e7c <uxTaskGetStackHighWaterMark>
 8001f68:	6178      	str	r0, [r7, #20]

		//printf("button interrupt task watermark %lu \r\n", uxHighWaterMark);

		osMutexRelease(managerMutexHandle);
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <startButtonInterruptTask+0xac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f00e f9ee 	bl	8010350 <osMutexRelease>

		osDelayUntil(&last_tick_time, OS_DELAY_STANDARD / portTICK_PERIOD_MS);
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00e fad3 	bl	8010528 <osDelayUntil>
		osSemaphoreWait(userButtonInterruptSemaphoreHandle, MUTEX_WAIT_TIMEOUT);
 8001f82:	e7bd      	b.n	8001f00 <startButtonInterruptTask+0x24>
 8001f84:	20004c08 	.word	0x20004c08
 8001f88:	20004e0c 	.word	0x20004e0c
 8001f8c:	20004ce0 	.word	0x20004ce0
 8001f90:	08015b90 	.word	0x08015b90
 8001f94:	08015ba0 	.word	0x08015ba0
 8001f98:	08015bbc 	.word	0x08015bbc

08001f9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fae:	f009 facf 	bl	800b550 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40001000 	.word	0x40001000

08001fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc4:	b672      	cpsid	i
}
 8001fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <Error_Handler+0x8>
	...

08001fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_MspInit+0x4c>)
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_MspInit+0x4c>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_MspInit+0x4c>)
 8001fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_MspInit+0x4c>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <HAL_MspInit+0x4c>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_MspInit+0x4c>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	210f      	movs	r1, #15
 8002006:	f06f 0001 	mvn.w	r0, #1
 800200a:	f009 fb9d 	bl	800b748 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0ac      	sub	sp, #176	; 0xb0
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2288      	movs	r2, #136	; 0x88
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f010 ff16 	bl	8012e6e <memset>
  if(hi2c->Instance==I2C2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a21      	ldr	r2, [pc, #132]	; (80020cc <HAL_I2C_MspInit+0xb0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d13b      	bne.n	80020c4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002050:	2300      	movs	r3, #0
 8002052:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4618      	mov	r0, r3
 800205a:	f00b fd29 	bl	800dab0 <HAL_RCCEx_PeriphCLKConfig>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002064:	f7ff ffac 	bl	8001fc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_I2C_MspInit+0xb4>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206c:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_I2C_MspInit+0xb4>)
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_I2C_MspInit+0xb4>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002080:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002088:	2312      	movs	r3, #18
 800208a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800208e:	2301      	movs	r3, #1
 8002090:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800209a:	2304      	movs	r3, #4
 800209c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020a4:	4619      	mov	r1, r3
 80020a6:	480b      	ldr	r0, [pc, #44]	; (80020d4 <HAL_I2C_MspInit+0xb8>)
 80020a8:	f009 fb78 	bl	800b79c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_I2C_MspInit+0xb4>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_I2C_MspInit+0xb4>)
 80020b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020b6:	6593      	str	r3, [r2, #88]	; 0x58
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_I2C_MspInit+0xb4>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020c4:	bf00      	nop
 80020c6:	37b0      	adds	r7, #176	; 0xb0
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40005800 	.word	0x40005800
 80020d0:	40021000 	.word	0x40021000
 80020d4:	48000400 	.word	0x48000400

080020d8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <HAL_I2C_MspDeInit+0x3c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10f      	bne.n	800210a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_I2C_MspDeInit+0x40>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <HAL_I2C_MspDeInit+0x40>)
 80020f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020f4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80020f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020fa:	4808      	ldr	r0, [pc, #32]	; (800211c <HAL_I2C_MspDeInit+0x44>)
 80020fc:	f009 fcf8 	bl	800baf0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002100:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002104:	4805      	ldr	r0, [pc, #20]	; (800211c <HAL_I2C_MspDeInit+0x44>)
 8002106:	f009 fcf3 	bl	800baf0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40005800 	.word	0x40005800
 8002118:	40021000 	.word	0x40021000
 800211c:	48000400 	.word	0x48000400

08002120 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a17      	ldr	r2, [pc, #92]	; (800219c <HAL_SPI_MspInit+0x7c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d128      	bne.n	8002194 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_SPI_MspInit+0x80>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <HAL_SPI_MspInit+0x80>)
 8002148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_SPI_MspInit+0x80>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_SPI_MspInit+0x80>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <HAL_SPI_MspInit+0x80>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_SPI_MspInit+0x80>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002172:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002184:	2306      	movs	r3, #6
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <HAL_SPI_MspInit+0x84>)
 8002190:	f009 fb04 	bl	800b79c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002194:	bf00      	nop
 8002196:	3728      	adds	r7, #40	; 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40003c00 	.word	0x40003c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	48000800 	.word	0x48000800

080021a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b0ae      	sub	sp, #184	; 0xb8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	2288      	movs	r2, #136	; 0x88
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f010 fe50 	bl	8012e6e <memset>
  if(huart->Instance==USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a42      	ldr	r2, [pc, #264]	; (80022dc <HAL_UART_MspInit+0x134>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d13b      	bne.n	8002250 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021d8:	2301      	movs	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021dc:	2300      	movs	r3, #0
 80021de:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4618      	mov	r0, r3
 80021e6:	f00b fc63 	bl	800dab0 <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021f0:	f7ff fee6 	bl	8001fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f4:	4b3a      	ldr	r3, [pc, #232]	; (80022e0 <HAL_UART_MspInit+0x138>)
 80021f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f8:	4a39      	ldr	r2, [pc, #228]	; (80022e0 <HAL_UART_MspInit+0x138>)
 80021fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002200:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <HAL_UART_MspInit+0x138>)
 8002202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_UART_MspInit+0x138>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002210:	4a33      	ldr	r2, [pc, #204]	; (80022e0 <HAL_UART_MspInit+0x138>)
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002218:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <HAL_UART_MspInit+0x138>)
 800221a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002224:	23c0      	movs	r3, #192	; 0xc0
 8002226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800223c:	2307      	movs	r3, #7
 800223e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002246:	4619      	mov	r1, r3
 8002248:	4826      	ldr	r0, [pc, #152]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 800224a:	f009 faa7 	bl	800b79c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800224e:	e040      	b.n	80022d2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <HAL_UART_MspInit+0x140>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d13b      	bne.n	80022d2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800225a:	2304      	movs	r3, #4
 800225c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800225e:	2300      	movs	r3, #0
 8002260:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	4618      	mov	r0, r3
 8002268:	f00b fc22 	bl	800dab0 <HAL_RCCEx_PeriphCLKConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002272:	f7ff fea5 	bl	8001fc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_UART_MspInit+0x138>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_UART_MspInit+0x138>)
 800227c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002280:	6593      	str	r3, [r2, #88]	; 0x58
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_UART_MspInit+0x138>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_UART_MspInit+0x138>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <HAL_UART_MspInit+0x138>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_UART_MspInit+0x138>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80022a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022c0:	2307      	movs	r3, #7
 80022c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022ca:	4619      	mov	r1, r3
 80022cc:	4807      	ldr	r0, [pc, #28]	; (80022ec <HAL_UART_MspInit+0x144>)
 80022ce:	f009 fa65 	bl	800b79c <HAL_GPIO_Init>
}
 80022d2:	bf00      	nop
 80022d4:	37b8      	adds	r7, #184	; 0xb8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40013800 	.word	0x40013800
 80022e0:	40021000 	.word	0x40021000
 80022e4:	48000400 	.word	0x48000400
 80022e8:	40004800 	.word	0x40004800
 80022ec:	48000c00 	.word	0x48000c00

080022f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	2036      	movs	r0, #54	; 0x36
 8002306:	f009 fa1f 	bl	800b748 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800230a:	2036      	movs	r0, #54	; 0x36
 800230c:	f009 fa38 	bl	800b780 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_InitTick+0x9c>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	4a1d      	ldr	r2, [pc, #116]	; (800238c <HAL_InitTick+0x9c>)
 8002316:	f043 0310 	orr.w	r3, r3, #16
 800231a:	6593      	str	r3, [r2, #88]	; 0x58
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_InitTick+0x9c>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002328:	f107 0210 	add.w	r2, r7, #16
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f00b fb2a 	bl	800d98c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002338:	f00b fafc 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800233c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	4a13      	ldr	r2, [pc, #76]	; (8002390 <HAL_InitTick+0xa0>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0c9b      	lsrs	r3, r3, #18
 8002348:	3b01      	subs	r3, #1
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_InitTick+0xa4>)
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_InitTick+0xa8>)
 8002350:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_InitTick+0xa4>)
 8002354:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002358:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_InitTick+0xa4>)
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_InitTick+0xa4>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_InitTick+0xa4>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800236c:	4809      	ldr	r0, [pc, #36]	; (8002394 <HAL_InitTick+0xa4>)
 800236e:	f00c ff68 	bl	800f242 <HAL_TIM_Base_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002378:	4806      	ldr	r0, [pc, #24]	; (8002394 <HAL_InitTick+0xa4>)
 800237a:	f00c ffc3 	bl	800f304 <HAL_TIM_Base_Start_IT>
 800237e:	4603      	mov	r3, r0
 8002380:	e000      	b.n	8002384 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	3730      	adds	r7, #48	; 0x30
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	431bde83 	.word	0x431bde83
 8002394:	20004e1c 	.word	0x20004e1c
 8002398:	40001000 	.word	0x40001000

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <NMI_Handler+0x4>

080023a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <HardFault_Handler+0x4>

080023a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <MemManage_Handler+0x4>

080023ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <BusFault_Handler+0x4>

080023b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <UsageFault_Handler+0x4>

080023ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80023cc:	2020      	movs	r0, #32
 80023ce:	f009 fcb5 	bl	800bd3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80023d2:	2040      	movs	r0, #64	; 0x40
 80023d4:	f009 fcb2 	bl	800bd3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D11_Pin);
 80023d8:	2080      	movs	r0, #128	; 0x80
 80023da:	f009 fcaf 	bl	800bd3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ISM43362_RST_Pin);
 80023de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023e2:	f009 fcab 	bl	800bd3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}

080023ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_CLK_Pin);
 80023ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023f2:	f009 fca3 	bl	800bd3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_NCS_Pin);
 80023f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80023fa:	f009 fc9f 	bl	800bd3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80023fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002402:	f009 fc9b 	bl	800bd3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO2_Pin);
 8002406:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800240a:	f009 fc97 	bl	800bd3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO3_Pin);
 800240e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002412:	f009 fc93 	bl	800bd3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <TIM6_DAC_IRQHandler+0x10>)
 8002422:	f00c ffdf 	bl	800f3e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20004e1c 	.word	0x20004e1c

08002430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
	return 1;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_kill>:

int _kill(int pid, int sig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800244a:	f010 fbdf 	bl	8012c0c <__errno>
 800244e:	4603      	mov	r3, r0
 8002450:	2216      	movs	r2, #22
 8002452:	601a      	str	r2, [r3, #0]
	return -1;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_exit>:

void _exit (int status)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ffe7 	bl	8002440 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002472:	e7fe      	b.n	8002472 <_exit+0x12>

08002474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e00a      	b.n	800249c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002486:	f3af 8000 	nop.w
 800248a:	4601      	mov	r1, r0
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	60ba      	str	r2, [r7, #8]
 8002492:	b2ca      	uxtb	r2, r1
 8002494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dbf0      	blt.n	8002486 <_read+0x12>
	}

return len;
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_close>:
	}
	return len;
}

int _close(int file)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
	return -1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d6:	605a      	str	r2, [r3, #4]
	return 0;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_isatty>:

int _isatty(int file)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	return 1;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
	return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002520:	4a14      	ldr	r2, [pc, #80]	; (8002574 <_sbrk+0x5c>)
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <_sbrk+0x60>)
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <_sbrk+0x64>)
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <_sbrk+0x68>)
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	429a      	cmp	r2, r3
 8002546:	d207      	bcs.n	8002558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002548:	f010 fb60 	bl	8012c0c <__errno>
 800254c:	4603      	mov	r3, r0
 800254e:	220c      	movs	r2, #12
 8002550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	e009      	b.n	800256c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <_sbrk+0x64>)
 8002568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20018000 	.word	0x20018000
 8002578:	00000400 	.word	0x00000400
 800257c:	200009c0 	.word	0x200009c0
 8002580:	20004f90 	.word	0x20004f90

08002584 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <SystemInit+0x5c>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <SystemInit+0x5c>)
 8002590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <SystemInit+0x60>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <SystemInit+0x60>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <SystemInit+0x60>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <SystemInit+0x60>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <SystemInit+0x60>)
 80025b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80025b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80025b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <SystemInit+0x60>)
 80025bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <SystemInit+0x60>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <SystemInit+0x60>)
 80025c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <SystemInit+0x60>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000ed00 	.word	0xe000ed00
 80025e4:	40021000 	.word	0x40021000

080025e8 <computeCurrentCarPosition>:
#include "track_utils.h"

char* computeCurrentCarPosition(int32_t x_axis) {
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

	//This method is called inside a mutex so there's no need to protect the sensors struct here

	int value = x_axis;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	60fb      	str	r3, [r7, #12]

	if (value < 0 && value > -100) {
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	da05      	bge.n	8002606 <computeCurrentCarPosition+0x1e>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002600:	db01      	blt.n	8002606 <computeCurrentCarPosition+0x1e>

		return "|        x       |\r\n";
 8002602:	4b49      	ldr	r3, [pc, #292]	; (8002728 <computeCurrentCarPosition+0x140>)
 8002604:	e089      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value < -100 && value > -200) {
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800260c:	da05      	bge.n	800261a <computeCurrentCarPosition+0x32>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8002614:	db01      	blt.n	800261a <computeCurrentCarPosition+0x32>

		return  "|      x         |\r\n";
 8002616:	4b45      	ldr	r3, [pc, #276]	; (800272c <computeCurrentCarPosition+0x144>)
 8002618:	e07f      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value < -200 && value > -300) {
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8002620:	da05      	bge.n	800262e <computeCurrentCarPosition+0x46>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8002628:	dd01      	ble.n	800262e <computeCurrentCarPosition+0x46>

		return  "|     x          |\r\n";
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <computeCurrentCarPosition+0x148>)
 800262c:	e075      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value < -300 && value > -400) {
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8002634:	da05      	bge.n	8002642 <computeCurrentCarPosition+0x5a>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 800263c:	dd01      	ble.n	8002642 <computeCurrentCarPosition+0x5a>

		return  "|    x           |\r\n";
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <computeCurrentCarPosition+0x14c>)
 8002640:	e06b      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value < -400 && value > -500) {
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8002648:	da05      	bge.n	8002656 <computeCurrentCarPosition+0x6e>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8002650:	dd01      	ble.n	8002656 <computeCurrentCarPosition+0x6e>

		return "|    x           |\r\n";
 8002652:	4b38      	ldr	r3, [pc, #224]	; (8002734 <computeCurrentCarPosition+0x14c>)
 8002654:	e061      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value < -500 && value > -600) {
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800265c:	da05      	bge.n	800266a <computeCurrentCarPosition+0x82>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8002664:	dd01      	ble.n	800266a <computeCurrentCarPosition+0x82>

		return "|  x             |\r\n";
 8002666:	4b34      	ldr	r3, [pc, #208]	; (8002738 <computeCurrentCarPosition+0x150>)
 8002668:	e057      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value < -600 && value > -700) {
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8002670:	da05      	bge.n	800267e <computeCurrentCarPosition+0x96>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 8002678:	dd01      	ble.n	800267e <computeCurrentCarPosition+0x96>

		return "| x              |\r\n";
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <computeCurrentCarPosition+0x154>)
 800267c:	e04d      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value < -700) {
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 8002684:	da01      	bge.n	800268a <computeCurrentCarPosition+0xa2>

		return "|x               |\r\n";
 8002686:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <computeCurrentCarPosition+0x158>)
 8002688:	e047      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value > 0 && value < 100) {
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	dd04      	ble.n	800269a <computeCurrentCarPosition+0xb2>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b63      	cmp	r3, #99	; 0x63
 8002694:	dc01      	bgt.n	800269a <computeCurrentCarPosition+0xb2>

		return"|        x       |\r\n";
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <computeCurrentCarPosition+0x140>)
 8002698:	e03f      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value > 100 && value < 200) {
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b64      	cmp	r3, #100	; 0x64
 800269e:	dd04      	ble.n	80026aa <computeCurrentCarPosition+0xc2>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2bc7      	cmp	r3, #199	; 0xc7
 80026a4:	dc01      	bgt.n	80026aa <computeCurrentCarPosition+0xc2>

		return "|         x      |\r\n";
 80026a6:	4b27      	ldr	r3, [pc, #156]	; (8002744 <computeCurrentCarPosition+0x15c>)
 80026a8:	e037      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value > 200 && value < 300) {
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2bc8      	cmp	r3, #200	; 0xc8
 80026ae:	dd05      	ble.n	80026bc <computeCurrentCarPosition+0xd4>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80026b6:	da01      	bge.n	80026bc <computeCurrentCarPosition+0xd4>

		return"|          x     |\r\n";
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <computeCurrentCarPosition+0x160>)
 80026ba:	e02e      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value > 300 && value < 400) {
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80026c2:	dd05      	ble.n	80026d0 <computeCurrentCarPosition+0xe8>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80026ca:	da01      	bge.n	80026d0 <computeCurrentCarPosition+0xe8>

		return"|           x    |\r\n";
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <computeCurrentCarPosition+0x164>)
 80026ce:	e024      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value > 400 && value < 500) {
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80026d6:	dd05      	ble.n	80026e4 <computeCurrentCarPosition+0xfc>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026de:	da01      	bge.n	80026e4 <computeCurrentCarPosition+0xfc>

		return"|            x   |\r\n";
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <computeCurrentCarPosition+0x168>)
 80026e2:	e01a      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value > 500 && value < 600) {
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026ea:	dd05      	ble.n	80026f8 <computeCurrentCarPosition+0x110>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80026f2:	da01      	bge.n	80026f8 <computeCurrentCarPosition+0x110>

		return"|             x  |\r\n";
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <computeCurrentCarPosition+0x16c>)
 80026f6:	e010      	b.n	800271a <computeCurrentCarPosition+0x132>

	} else if (value > 600 && value < 700) {
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80026fe:	dd05      	ble.n	800270c <computeCurrentCarPosition+0x124>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002706:	da01      	bge.n	800270c <computeCurrentCarPosition+0x124>

		return"|              x |\r\n";
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <computeCurrentCarPosition+0x170>)
 800270a:	e006      	b.n	800271a <computeCurrentCarPosition+0x132>


	} else if (value > 700) {
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002712:	dd01      	ble.n	8002718 <computeCurrentCarPosition+0x130>

		return"|               x|\r\n";
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <computeCurrentCarPosition+0x174>)
 8002716:	e000      	b.n	800271a <computeCurrentCarPosition+0x132>
	}

	else {

		return "";
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <computeCurrentCarPosition+0x178>)
	}
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	08015be0 	.word	0x08015be0
 800272c:	08015bf8 	.word	0x08015bf8
 8002730:	08015c10 	.word	0x08015c10
 8002734:	08015c28 	.word	0x08015c28
 8002738:	08015c40 	.word	0x08015c40
 800273c:	08015c58 	.word	0x08015c58
 8002740:	08015c70 	.word	0x08015c70
 8002744:	08015c88 	.word	0x08015c88
 8002748:	08015ca0 	.word	0x08015ca0
 800274c:	08015cb8 	.word	0x08015cb8
 8002750:	08015cd0 	.word	0x08015cd0
 8002754:	08015ce8 	.word	0x08015ce8
 8002758:	08015d00 	.word	0x08015d00
 800275c:	08015d18 	.word	0x08015d18
 8002760:	08015d30 	.word	0x08015d30

08002764 <performPitStop>:

char* performPitStop() {
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

	return PIT_LANE
 8002768:	4b02      	ldr	r3, [pc, #8]	; (8002774 <performPitStop+0x10>)
			"|                ||  x  |\r\n"
			PIT_LANE
			"\n";
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	08015d34 	.word	0x08015d34

08002778 <computeTrackOpponent>:

char* computeTrackOpponent(u_int8_t position) {
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]

	if (position <= 4) {
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	2b04      	cmp	r3, #4
 8002786:	d801      	bhi.n	800278c <computeTrackOpponent+0x14>

		return"|  *             |\r\n";
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <computeTrackOpponent+0x4c>)
 800278a:	e015      	b.n	80027b8 <computeTrackOpponent+0x40>

	} else if (position > 4 && position <= 8) {
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	2b04      	cmp	r3, #4
 8002790:	d904      	bls.n	800279c <computeTrackOpponent+0x24>
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d801      	bhi.n	800279c <computeTrackOpponent+0x24>

		return"|     *          |\r\n";
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <computeTrackOpponent+0x50>)
 800279a:	e00d      	b.n	80027b8 <computeTrackOpponent+0x40>

	} else if (position > 8 && position <= 12) {
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d904      	bls.n	80027ac <computeTrackOpponent+0x34>
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	d801      	bhi.n	80027ac <computeTrackOpponent+0x34>

		return"|          *     |\r\n";
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <computeTrackOpponent+0x54>)
 80027aa:	e005      	b.n	80027b8 <computeTrackOpponent+0x40>

	} else if (position > 12) {
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d901      	bls.n	80027b6 <computeTrackOpponent+0x3e>

		return"|             *  |\r\n";
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <computeTrackOpponent+0x58>)
 80027b4:	e000      	b.n	80027b8 <computeTrackOpponent+0x40>

	} else {

		return CLEAR_TRACK;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <computeTrackOpponent+0x5c>)
	}
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	08015d88 	.word	0x08015d88
 80027c8:	08015da0 	.word	0x08015da0
 80027cc:	08015db8 	.word	0x08015db8
 80027d0:	08015dd0 	.word	0x08015dd0
 80027d4:	08015de8 	.word	0x08015de8

080027d8 <getClearTrackString>:

char* getClearTrackString() {
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0

	return CLEAR_TRACK;
 80027dc:	4b02      	ldr	r3, [pc, #8]	; (80027e8 <getClearTrackString+0x10>)
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	08015de8 	.word	0x08015de8

080027ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027f0:	f7ff fec8 	bl	8002584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027f6:	e003      	b.n	8002800 <LoopCopyDataInit>

080027f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027fe:	3104      	adds	r1, #4

08002800 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002800:	480a      	ldr	r0, [pc, #40]	; (800282c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002804:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002806:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002808:	d3f6      	bcc.n	80027f8 <CopyDataInit>
	ldr	r2, =_sbss
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <LoopForever+0x12>)
	b	LoopFillZerobss
 800280c:	e002      	b.n	8002814 <LoopFillZerobss>

0800280e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800280e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002810:	f842 3b04 	str.w	r3, [r2], #4

08002814 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <LoopForever+0x16>)
	cmp	r2, r3
 8002816:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002818:	d3f9      	bcc.n	800280e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800281a:	f010 faf3 	bl	8012e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800281e:	f7fe fb6d 	bl	8000efc <main>

08002822 <LoopForever>:

LoopForever:
    b LoopForever
 8002822:	e7fe      	b.n	8002822 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002824:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002828:	08016978 	.word	0x08016978
	ldr	r0, =_sdata
 800282c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002830:	200006e0 	.word	0x200006e0
	ldr	r2, =_sbss
 8002834:	200006e0 	.word	0x200006e0
	ldr	r3, = _ebss
 8002838:	20004f8c 	.word	0x20004f8c

0800283c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC1_2_IRQHandler>
	...

08002840 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	4a06      	ldr	r2, [pc, #24]	; (8002868 <BSP_LED_Off+0x28>)
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002856:	b291      	uxth	r1, r2
 8002858:	2200      	movs	r2, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f009 fa3c 	bl	800bcd8 <HAL_GPIO_WritePin>
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000004 	.word	0x20000004

0800286c <BSP_LED_Toggle>:
  * @param  Led  LED to be toggled
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	4a06      	ldr	r2, [pc, #24]	; (8002894 <BSP_LED_Toggle+0x28>)
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002882:	b292      	uxth	r2, r2
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f009 fa3e 	bl	800bd08 <HAL_GPIO_TogglePin>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000004 	.word	0x20000004

08002898 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	460a      	mov	r2, r1
 80028a2:	71fb      	strb	r3, [r7, #7]
 80028a4:	4613      	mov	r3, r2
 80028a6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80028a8:	4b23      	ldr	r3, [pc, #140]	; (8002938 <BSP_PB_Init+0xa0>)
 80028aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ac:	4a22      	ldr	r2, [pc, #136]	; (8002938 <BSP_PB_Init+0xa0>)
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b4:	4b20      	ldr	r3, [pc, #128]	; (8002938 <BSP_PB_Init+0xa0>)
 80028b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80028c0:	79bb      	ldrb	r3, [r7, #6]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d112      	bne.n	80028ec <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80028c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ca:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80028d0:	2301      	movs	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80028d4:	2302      	movs	r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	4a18      	ldr	r2, [pc, #96]	; (800293c <BSP_PB_Init+0xa4>)
 80028dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e0:	f107 020c 	add.w	r2, r7, #12
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f008 ff58 	bl	800b79c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80028ec:	79bb      	ldrb	r3, [r7, #6]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d11e      	bne.n	8002930 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80028f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <BSP_PB_Init+0xa8>)
 8002902:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	4a0d      	ldr	r2, [pc, #52]	; (800293c <BSP_PB_Init+0xa4>)
 8002908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f008 ff42 	bl	800b79c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002918:	2328      	movs	r3, #40	; 0x28
 800291a:	b25b      	sxtb	r3, r3
 800291c:	2200      	movs	r2, #0
 800291e:	210f      	movs	r1, #15
 8002920:	4618      	mov	r0, r3
 8002922:	f008 ff11 	bl	800b748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002926:	2328      	movs	r3, #40	; 0x28
 8002928:	b25b      	sxtb	r3, r3
 800292a:	4618      	mov	r0, r3
 800292c:	f008 ff28 	bl	800b780 <HAL_NVIC_EnableIRQ>
  }
}
 8002930:	bf00      	nop
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	20000008 	.word	0x20000008
 8002940:	10110000 	.word	0x10110000

08002944 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <I2Cx_MspInit+0xa8>)
 800294e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <I2Cx_MspInit+0xa8>)
 8002952:	f043 0302 	orr.w	r3, r3, #2
 8002956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002958:	4b24      	ldr	r3, [pc, #144]	; (80029ec <I2Cx_MspInit+0xa8>)
 800295a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002964:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002968:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800296a:	2312      	movs	r3, #18
 800296c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800296e:	2301      	movs	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002976:	2304      	movs	r3, #4
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	481b      	ldr	r0, [pc, #108]	; (80029f0 <I2Cx_MspInit+0xac>)
 8002982:	f008 ff0b 	bl	800b79c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002986:	f107 0314 	add.w	r3, r7, #20
 800298a:	4619      	mov	r1, r3
 800298c:	4818      	ldr	r0, [pc, #96]	; (80029f0 <I2Cx_MspInit+0xac>)
 800298e:	f008 ff05 	bl	800b79c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <I2Cx_MspInit+0xa8>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	4a15      	ldr	r2, [pc, #84]	; (80029ec <I2Cx_MspInit+0xa8>)
 8002998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800299c:	6593      	str	r3, [r2, #88]	; 0x58
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <I2Cx_MspInit+0xa8>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <I2Cx_MspInit+0xa8>)
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <I2Cx_MspInit+0xa8>)
 80029b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029b4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <I2Cx_MspInit+0xa8>)
 80029b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ba:	4a0c      	ldr	r2, [pc, #48]	; (80029ec <I2Cx_MspInit+0xa8>)
 80029bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	210f      	movs	r1, #15
 80029c6:	2021      	movs	r0, #33	; 0x21
 80029c8:	f008 febe 	bl	800b748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80029cc:	2021      	movs	r0, #33	; 0x21
 80029ce:	f008 fed7 	bl	800b780 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	210f      	movs	r1, #15
 80029d6:	2022      	movs	r0, #34	; 0x22
 80029d8:	f008 feb6 	bl	800b748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80029dc:	2022      	movs	r0, #34	; 0x22
 80029de:	f008 fecf 	bl	800b780 <HAL_NVIC_EnableIRQ>
}
 80029e2:	bf00      	nop
 80029e4:	3728      	adds	r7, #40	; 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	48000400 	.word	0x48000400

080029f4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <I2Cx_Init+0x54>)
 8002a00:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <I2Cx_Init+0x58>)
 8002a06:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ff89 	bl	8002944 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f009 f99a 	bl	800bd6c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002a38:	2100      	movs	r1, #0
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f00a f90e 	bl	800cc5c <HAL_I2CEx_ConfigAnalogFilter>
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40005800 	.word	0x40005800
 8002a4c:	00702681 	.word	0x00702681

08002a50 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af04      	add	r7, sp, #16
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	72fb      	strb	r3, [r7, #11]
 8002a62:	460b      	mov	r3, r1
 8002a64:	813b      	strh	r3, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002a6e:	7afb      	ldrb	r3, [r7, #11]
 8002a70:	b299      	uxth	r1, r3
 8002a72:	88f8      	ldrh	r0, [r7, #6]
 8002a74:	893a      	ldrh	r2, [r7, #8]
 8002a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7a:	9302      	str	r3, [sp, #8]
 8002a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	4603      	mov	r3, r0
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f009 fd2c 	bl	800c4e4 <HAL_I2C_Mem_Read>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002a96:	7afb      	ldrb	r3, [r7, #11]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f832 	bl	8002b04 <I2Cx_Error>
  }
  return status;
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b08a      	sub	sp, #40	; 0x28
 8002aae:	af04      	add	r7, sp, #16
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	4608      	mov	r0, r1
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4603      	mov	r3, r0
 8002aba:	72fb      	strb	r3, [r7, #11]
 8002abc:	460b      	mov	r3, r1
 8002abe:	813b      	strh	r3, [r7, #8]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002ac8:	7afb      	ldrb	r3, [r7, #11]
 8002aca:	b299      	uxth	r1, r3
 8002acc:	88f8      	ldrh	r0, [r7, #6]
 8002ace:	893a      	ldrh	r2, [r7, #8]
 8002ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad4:	9302      	str	r3, [sp, #8]
 8002ad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4603      	mov	r3, r0
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f009 fbeb 	bl	800c2bc <HAL_I2C_Mem_Write>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002af0:	7afb      	ldrb	r3, [r7, #11]
 8002af2:	4619      	mov	r1, r3
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f805 	bl	8002b04 <I2Cx_Error>
  }
  return status;
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f009 f9ba 	bl	800be8a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ff6c 	bl	80029f4 <I2Cx_Init>
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <SENSOR_IO_Init+0x10>)
 8002b2a:	f7ff ff63 	bl	80029f4 <I2Cx_Init>
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20004eec 	.word	0x20004eec

08002b38 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
 8002b42:	460b      	mov	r3, r1
 8002b44:	71bb      	strb	r3, [r7, #6]
 8002b46:	4613      	mov	r3, r2
 8002b48:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002b4a:	79bb      	ldrb	r3, [r7, #6]
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	79f9      	ldrb	r1, [r7, #7]
 8002b50:	2301      	movs	r3, #1
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	1d7b      	adds	r3, r7, #5
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2301      	movs	r3, #1
 8002b5a:	4803      	ldr	r0, [pc, #12]	; (8002b68 <SENSOR_IO_Write+0x30>)
 8002b5c:	f7ff ffa5 	bl	8002aaa <I2Cx_WriteMultiple>
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20004eec 	.word	0x20004eec

08002b6c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	4603      	mov	r3, r0
 8002b74:	460a      	mov	r2, r1
 8002b76:	71fb      	strb	r3, [r7, #7]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002b80:	79bb      	ldrb	r3, [r7, #6]
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	79f9      	ldrb	r1, [r7, #7]
 8002b86:	2301      	movs	r3, #1
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	f107 030f 	add.w	r3, r7, #15
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2301      	movs	r3, #1
 8002b92:	4804      	ldr	r0, [pc, #16]	; (8002ba4 <SENSOR_IO_Read+0x38>)
 8002b94:	f7ff ff5c 	bl	8002a50 <I2Cx_ReadMultiple>

  return read_value;
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20004eec 	.word	0x20004eec

08002ba8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	603a      	str	r2, [r7, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	71bb      	strb	r3, [r7, #6]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002bbe:	79bb      	ldrb	r3, [r7, #6]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	79f9      	ldrb	r1, [r7, #7]
 8002bc4:	88bb      	ldrh	r3, [r7, #4]
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	4804      	ldr	r0, [pc, #16]	; (8002be0 <SENSOR_IO_ReadMultiple+0x38>)
 8002bd0:	f7ff ff3e 	bl	8002a50 <I2Cx_ReadMultiple>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	b29b      	uxth	r3, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20004eec 	.word	0x20004eec

08002be4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize BSP I2C2.
  * @retval BSP status.
  */
int32_t BSP_I2C2_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <BSP_I2C2_Init+0x70>)
 8002bf0:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <BSP_I2C2_Init+0x74>)
 8002bf2:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <BSP_I2C2_Init+0x78>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d11b      	bne.n	8002c34 <BSP_I2C2_Init+0x50>
  {
    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8002bfc:	4815      	ldr	r0, [pc, #84]	; (8002c54 <BSP_I2C2_Init+0x70>)
 8002bfe:	f009 fd8b 	bl	800c718 <HAL_I2C_GetState>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d115      	bne.n	8002c34 <BSP_I2C2_Init+0x50>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8002c08:	4812      	ldr	r0, [pc, #72]	; (8002c54 <BSP_I2C2_Init+0x70>)
 8002c0a:	f000 f8b3 	bl	8002d74 <I2C2_MspInit>

      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2C2), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8002c0e:	2080      	movs	r0, #128	; 0x80
 8002c10:	f00b fa38 	bl	800e084 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4912      	ldr	r1, [pc, #72]	; (8002c60 <BSP_I2C2_Init+0x7c>)
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f9c7 	bl	8002fac <I2C_GetTiming>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4619      	mov	r1, r3
 8002c22:	480c      	ldr	r0, [pc, #48]	; (8002c54 <BSP_I2C2_Init+0x70>)
 8002c24:	f000 f876 	bl	8002d14 <MX_I2C2_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <BSP_I2C2_Init+0x50>
      {
        status = BSP_ERROR_BUS_FAILURE;
 8002c2e:	f06f 0307 	mvn.w	r3, #7
 8002c32:	607b      	str	r3, [r7, #4]
        }
      }
#endif
    }
  }
  if (I2c2InitCounter < 0xFFFFFFFFU)
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <BSP_I2C2_Init+0x78>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d004      	beq.n	8002c48 <BSP_I2C2_Init+0x64>
  {
    I2c2InitCounter++;
 8002c3e:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <BSP_I2C2_Init+0x78>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <BSP_I2C2_Init+0x78>)
 8002c46:	6013      	str	r3, [r2, #0]
  }
  return status;
 8002c48:	687b      	ldr	r3, [r7, #4]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200009c8 	.word	0x200009c8
 8002c58:	40005800 	.word	0x40005800
 8002c5c:	200009c4 	.word	0x200009c4
 8002c60:	000186a0 	.word	0x000186a0

08002c64 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize BSP I2C2.
  * @retval BSP status.
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]

  if (I2c2InitCounter > 0U)
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <BSP_I2C2_DeInit+0x48>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d014      	beq.n	8002ca0 <BSP_I2C2_DeInit+0x3c>
  {
    I2c2InitCounter--;
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <BSP_I2C2_DeInit+0x48>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <BSP_I2C2_DeInit+0x48>)
 8002c7e:	6013      	str	r3, [r2, #0]
    if (I2c2InitCounter == 0U)
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <BSP_I2C2_DeInit+0x48>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <BSP_I2C2_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C2_MspDeInit(&hbus_i2c2);
 8002c88:	4809      	ldr	r0, [pc, #36]	; (8002cb0 <BSP_I2C2_DeInit+0x4c>)
 8002c8a:	f000 f8cb 	bl	8002e24 <I2C2_MspDeInit>
#endif

      /* De-Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8002c8e:	4808      	ldr	r0, [pc, #32]	; (8002cb0 <BSP_I2C2_DeInit+0x4c>)
 8002c90:	f009 f8fb 	bl	800be8a <HAL_I2C_DeInit>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <BSP_I2C2_DeInit+0x3c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8002c9a:	f06f 0303 	mvn.w	r3, #3
 8002c9e:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return status;
 8002ca0:	687b      	ldr	r3, [r7, #4]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200009c4 	.word	0x200009c4
 8002cb0:	200009c8 	.word	0x200009c8

08002cb4 <BSP_I2C2_WriteReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60ba      	str	r2, [r7, #8]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	81fb      	strh	r3, [r7, #14]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	81bb      	strh	r3, [r7, #12]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  return I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 8002cca:	89b9      	ldrh	r1, [r7, #12]
 8002ccc:	89f8      	ldrh	r0, [r7, #14]
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f000 f8c1 	bl	8002e5c <I2C2_WriteReg>
 8002cda:	4603      	mov	r3, r0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60ba      	str	r2, [r7, #8]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	81fb      	strh	r3, [r7, #14]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	81bb      	strh	r3, [r7, #12]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 8002cfa:	89b9      	ldrh	r1, [r7, #12]
 8002cfc:	89f8      	ldrh	r0, [r7, #14]
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f000 f8fd 	bl	8002f04 <I2C2_ReadReg>
 8002d0a:	4603      	mov	r3, r0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <MX_I2C2_Init>:
  * @param  hI2c I2C handle.
  * @param  timing I2C timing.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  hI2c->Init.Timing           = timing;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	621a      	str	r2, [r3, #32]

  return HAL_I2C_Init(hI2c);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f009 f80c 	bl	800bd6c <HAL_I2C_Init>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <BSP_GetTick>:
/**
  * @brief  Provide a tick value in millisecond.
  * @retval Tick value.
  */
int32_t BSP_GetTick(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
  uint32_t ret;
  ret = HAL_GetTick();
 8002d64:	f008 fc08 	bl	800b578 <HAL_GetTick>
 8002d68:	6078      	str	r0, [r7, #4]
  return (int32_t)ret;
 8002d6a:	687b      	ldr	r3, [r7, #4]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C2_MspInit>:
  * @brief  Initialize I2C2 MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d80:	4a26      	ldr	r2, [pc, #152]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8002d94:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002d9a:	f043 0302 	orr.w	r3, r3, #2
 8002d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002da0:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C2_SCL_GPIO_PIN;
 8002dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002db2:	2312      	movs	r3, #18
 8002db4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4815      	ldr	r0, [pc, #84]	; (8002e20 <I2C2_MspInit+0xac>)
 8002dca:	f008 fce7 	bl	800b79c <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C2_SDA_GPIO_PIN;
 8002dce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dd2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4810      	ldr	r0, [pc, #64]	; (8002e20 <I2C2_MspInit+0xac>)
 8002de0:	f008 fcdc 	bl	800b79c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	4a0c      	ldr	r2, [pc, #48]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002dea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dee:	6593      	str	r3, [r2, #88]	; 0x58
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 8002dfc:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002e02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e06:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	4a03      	ldr	r2, [pc, #12]	; (8002e1c <I2C2_MspInit+0xa8>)
 8002e0e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e12:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e14:	bf00      	nop
 8002e16:	3728      	adds	r7, #40	; 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	48000400 	.word	0x48000400

08002e24 <I2C2_MspDeInit>:
  * @brief  DeInitialize I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* De-initialiaze I2C SCL and SDA */
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e30:	4808      	ldr	r0, [pc, #32]	; (8002e54 <I2C2_MspDeInit+0x30>)
 8002e32:	f008 fe5d 	bl	800baf0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002e36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e3a:	4806      	ldr	r0, [pc, #24]	; (8002e54 <I2C2_MspDeInit+0x30>)
 8002e3c:	f008 fe58 	bl	800baf0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <I2C2_MspDeInit+0x34>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <I2C2_MspDeInit+0x34>)
 8002e46:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e4a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	48000400 	.word	0x48000400
 8002e58:	40021000 	.word	0x40021000

08002e5c <I2C2_WriteReg>:
  * @param  pData      The target register values to be written.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af04      	add	r7, sp, #16
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	4603      	mov	r3, r0
 8002e66:	81fb      	strh	r3, [r7, #14]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	81bb      	strh	r3, [r7, #12]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C2_TIMEOUT) != HAL_OK)
 8002e74:	8978      	ldrh	r0, [r7, #10]
 8002e76:	89ba      	ldrh	r2, [r7, #12]
 8002e78:	89f9      	ldrh	r1, [r7, #14]
 8002e7a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e7e:	9302      	str	r3, [sp, #8]
 8002e80:	8c3b      	ldrh	r3, [r7, #32]
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	4603      	mov	r3, r0
 8002e8a:	481d      	ldr	r0, [pc, #116]	; (8002f00 <I2C2_WriteReg+0xa4>)
 8002e8c:	f009 fa16 	bl	800c2bc <HAL_I2C_Mem_Write>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d02f      	beq.n	8002ef6 <I2C2_WriteReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c2);
 8002e96:	481a      	ldr	r0, [pc, #104]	; (8002f00 <I2C2_WriteReg+0xa4>)
 8002e98:	f009 fc4c 	bl	800c734 <HAL_I2C_GetError>
 8002e9c:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <I2C2_WriteReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 8002ea8:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e022      	b.n	8002ef6 <I2C2_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <I2C2_WriteReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 8002eba:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e019      	b.n	8002ef6 <I2C2_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <I2C2_WriteReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002ecc:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e010      	b.n	8002ef6 <I2C2_WriteReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <I2C2_WriteReg+0x8c>
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <I2C2_WriteReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 8002ee8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e002      	b.n	8002ef6 <I2C2_WriteReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8002ef0:	f06f 0303 	mvn.w	r3, #3
 8002ef4:	617b      	str	r3, [r7, #20]
    }    
  }

  return status;
 8002ef6:	697b      	ldr	r3, [r7, #20]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200009c8 	.word	0x200009c8

08002f04 <I2C2_ReadReg>:
  * @param  pData      The target register values to be read.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af04      	add	r7, sp, #16
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	81fb      	strh	r3, [r7, #14]
 8002f10:	460b      	mov	r3, r1
 8002f12:	81bb      	strh	r3, [r7, #12]
 8002f14:	4613      	mov	r3, r2
 8002f16:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C2_TIMEOUT) != HAL_OK)
 8002f1c:	8978      	ldrh	r0, [r7, #10]
 8002f1e:	89ba      	ldrh	r2, [r7, #12]
 8002f20:	89f9      	ldrh	r1, [r7, #14]
 8002f22:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f26:	9302      	str	r3, [sp, #8]
 8002f28:	8c3b      	ldrh	r3, [r7, #32]
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	4603      	mov	r3, r0
 8002f32:	481d      	ldr	r0, [pc, #116]	; (8002fa8 <I2C2_ReadReg+0xa4>)
 8002f34:	f009 fad6 	bl	800c4e4 <HAL_I2C_Mem_Read>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d02f      	beq.n	8002f9e <I2C2_ReadReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c2);
 8002f3e:	481a      	ldr	r0, [pc, #104]	; (8002fa8 <I2C2_ReadReg+0xa4>)
 8002f40:	f009 fbf8 	bl	800c734 <HAL_I2C_GetError>
 8002f44:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <I2C2_ReadReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 8002f50:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e022      	b.n	8002f9e <I2C2_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <I2C2_ReadReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 8002f62:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	e019      	b.n	8002f9e <I2C2_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <I2C2_ReadReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002f74:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e010      	b.n	8002f9e <I2C2_ReadReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d104      	bne.n	8002f90 <I2C2_ReadReg+0x8c>
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <I2C2_ReadReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 8002f90:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	e002      	b.n	8002f9e <I2C2_ReadReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8002f98:	f06f 0303 	mvn.w	r3, #3
 8002f9c:	617b      	str	r3, [r7, #20]
    }    
  }

  return status;
 8002f9e:	697b      	ldr	r3, [r7, #20]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200009c8 	.word	0x200009c8

08002fac <I2C_GetTiming>:
  * @param  clock_src_hz I2C clock source in Hz.
  * @param  i2cfreq_hz Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_hz, uint32_t i2cfreq_hz)
{
 8002fac:	b5b0      	push	{r4, r5, r7, lr}
 8002fae:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	6018      	str	r0, [r3, #0]
 8002fb8:	463b      	mov	r3, r7
 8002fba:	6019      	str	r1, [r3, #0]
  uint32_t ret = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  uint32_t speed;
  uint32_t is_valid_speed = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
  uint32_t p_prev = PRESC_MAX;
 8002fc8:	2310      	movs	r3, #16
 8002fca:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
  int32_t  sdadel_min, sdadel_max;
  int32_t  scldel_min;
  struct   i2c_timings_s *s;
  struct   i2c_timings_s valid_timing[VALID_PRESC_NBR];
  uint16_t p, l, a, h;
  uint32_t valid_timing_nbr = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec

  const struct i2c_specs_s i2c_specs[3] =
 8002fd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fd8:	4ad1      	ldr	r2, [pc, #836]	; (8003320 <I2C_GetTiming+0x374>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	4611      	mov	r1, r2
 8002fde:	2378      	movs	r3, #120	; 0x78
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f00f ff36 	bl	8012e52 <memcpy>
      .sudat_min = 50,
      .l_min = 500,
      .h_min = 260,
    }
  };
  const struct i2c_setup_s i2c_user_setup[3] =
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	4ace      	ldr	r2, [pc, #824]	; (8003324 <I2C_GetTiming+0x378>)
 8002fec:	461c      	mov	r4, r3
 8002fee:	4615      	mov	r5, r2
 8002ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ff8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      .dnf = 0,
      .analog_filter = 1
    }
  };

  for (speed = 0; speed <= (uint32_t) I2C_SPEED_FAST_PLUS; speed++)
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8003006:	e026      	b.n	8003056 <I2C_GetTiming+0xaa>
  {
    if ((i2cfreq_hz >= i2c_specs[speed].rate_min) && (i2cfreq_hz <= i2c_specs[speed].rate_max))
 8003008:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800300c:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	3304      	adds	r3, #4
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	463a      	mov	r2, r7
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d312      	bcc.n	800304c <I2C_GetTiming+0xa0>
 8003026:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800302a:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	440b      	add	r3, r1
 8003038:	3308      	adds	r3, #8
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	463a      	mov	r2, r7
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d803      	bhi.n	800304c <I2C_GetTiming+0xa0>
    {
      is_valid_speed = 1;
 8003044:	2301      	movs	r3, #1
 8003046:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
      break;
 800304a:	e008      	b.n	800305e <I2C_GetTiming+0xb2>
  for (speed = 0; speed <= (uint32_t) I2C_SPEED_FAST_PLUS; speed++)
 800304c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8003050:	3301      	adds	r3, #1
 8003052:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8003056:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800305a:	2b02      	cmp	r3, #2
 800305c:	d9d4      	bls.n	8003008 <I2C_GetTiming+0x5c>
    }
  }

  if ((is_valid_speed != 0U) && (speed  <= (uint32_t) I2C_SPEED_FAST_PLUS))
 800305e:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 82a1 	beq.w	80035aa <I2C_GetTiming+0x5fe>
 8003068:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800306c:	2b02      	cmp	r3, #2
 800306e:	f200 829c 	bhi.w	80035aa <I2C_GetTiming+0x5fe>
  {
    i2cclk = DIV_ROUND_CLOSEST(NSEC_PER_SEC, clock_src_hz);
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	085a      	lsrs	r2, r3, #1
 8003078:	4bab      	ldr	r3, [pc, #684]	; (8003328 <I2C_GetTiming+0x37c>)
 800307a:	4413      	add	r3, r2
 800307c:	1d3a      	adds	r2, r7, #4
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	fbb3 f3f2 	udiv	r3, r3, r2
 8003084:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    i2cspeed = DIV_ROUND_CLOSEST(NSEC_PER_SEC, i2cfreq_hz);
 8003088:	463b      	mov	r3, r7
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	085a      	lsrs	r2, r3, #1
 800308e:	4ba6      	ldr	r3, [pc, #664]	; (8003328 <I2C_GetTiming+0x37c>)
 8003090:	4413      	add	r3, r2
 8003092:	463a      	mov	r2, r7
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	fbb3 f3f2 	udiv	r3, r3, r2
 800309a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    clk_error_prev = i2cspeed;
 800309e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80030a2:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304

    /* Analog and Digital Filters */
    af_delay_min = (i2c_user_setup[speed].analog_filter == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 80030a6:	f107 020c 	add.w	r2, r7, #12
 80030aa:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	4413      	add	r3, r2
 80030b2:	330c      	adds	r3, #12
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <I2C_GetTiming+0x112>
 80030ba:	2332      	movs	r3, #50	; 0x32
 80030bc:	e000      	b.n	80030c0 <I2C_GetTiming+0x114>
 80030be:	2300      	movs	r3, #0
 80030c0:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
    af_delay_max = (i2c_user_setup[speed].analog_filter == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 80030c4:	f107 020c 	add.w	r2, r7, #12
 80030c8:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	4413      	add	r3, r2
 80030d0:	330c      	adds	r3, #12
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <I2C_GetTiming+0x132>
 80030d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80030dc:	e000      	b.n	80030e0 <I2C_GetTiming+0x134>
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
    dnf_delay    = i2c_user_setup[speed].dnf * i2cclk;
 80030e4:	f107 020c 	add.w	r2, r7, #12
 80030e8:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	4413      	add	r3, r2
 80030f0:	3308      	adds	r3, #8
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    sdadel_min   = (int32_t) i2c_user_setup[speed].fall_time - (int32_t) i2c_specs[speed].hddat_min - (int32_t) af_delay_min - (((int32_t) i2c_user_setup[speed].dnf + 3) * (int32_t) i2cclk);
 8003100:	f107 020c 	add.w	r2, r7, #12
 8003104:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	4413      	add	r3, r2
 800310c:	3304      	adds	r3, #4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003116:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	440b      	add	r3, r1
 8003124:	3314      	adds	r3, #20
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	1ac2      	subs	r2, r0, r3
 800312a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800312e:	1ad2      	subs	r2, r2, r3
 8003130:	f107 010c 	add.w	r1, r7, #12
 8003134:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	440b      	add	r3, r1
 800313c:	3308      	adds	r3, #8
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3303      	adds	r3, #3
 8003142:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    sdadel_max   = (int32_t) i2c_specs[speed].vddat_max - (int32_t) i2c_user_setup[speed].rise_time - (int32_t) af_delay_max - (((int32_t) i2c_user_setup[speed].dnf + 4) * (int32_t) i2cclk);
 8003150:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003154:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	440b      	add	r3, r1
 8003162:	3318      	adds	r3, #24
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4619      	mov	r1, r3
 8003168:	f107 020c 	add.w	r2, r7, #12
 800316c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	4413      	add	r3, r2
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	1aca      	subs	r2, r1, r3
 8003178:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800317c:	1ad2      	subs	r2, r2, r3
 800317e:	f107 010c 	add.w	r1, r7, #12
 8003182:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	440b      	add	r3, r1
 800318a:	3308      	adds	r3, #8
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3304      	adds	r3, #4
 8003190:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    scldel_min   = (int32_t) i2c_user_setup[speed].rise_time + (int32_t) i2c_specs[speed].sudat_min;
 800319e:	f107 020c 	add.w	r2, r7, #12
 80031a2:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	4413      	add	r3, r2
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80031b2:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	440b      	add	r3, r1
 80031c0:	331c      	adds	r3, #28
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4403      	add	r3, r0
 80031c6:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
    if (sdadel_min < 0)
 80031ca:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	da02      	bge.n	80031d8 <I2C_GetTiming+0x22c>
    {
      sdadel_min = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    }
    if (sdadel_max < 0)
 80031d8:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80031dc:	2b00      	cmp	r3, #0
 80031de:	da02      	bge.n	80031e6 <I2C_GetTiming+0x23a>
    {
      sdadel_max = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    }

    /* Compute possible values for PRESC, SCLDEL and SDADEL */
    for (p = 0; p < PRESC_MAX; p++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8a7 32f6 	strh.w	r3, [r7, #758]	; 0x2f6
 80031ec:	e08b      	b.n	8003306 <I2C_GetTiming+0x35a>
    {
      for (l = 0; l < SCLDEL_MAX; l++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 80031f4:	e07d      	b.n	80032f2 <I2C_GetTiming+0x346>
      {
        int32_t scldel = ((int32_t) l + 1) * ((int32_t) p + 1) * (int32_t) i2cclk;
 80031f6:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 80031fa:	3301      	adds	r3, #1
 80031fc:	f8b7 22f6 	ldrh.w	r2, [r7, #758]	; 0x2f6
 8003200:	3201      	adds	r2, #1
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
        if (scldel < scldel_min)
 8003212:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8003216:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800321a:	429a      	cmp	r2, r3
 800321c:	db63      	blt.n	80032e6 <I2C_GetTiming+0x33a>
        {
          continue;
        }
        for (a = 0; a < SDADEL_MAX; a++)
 800321e:	2300      	movs	r3, #0
 8003220:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
 8003224:	e05a      	b.n	80032dc <I2C_GetTiming+0x330>
        {
          int32_t sdadel = (((int32_t) a * ((int32_t) p + 1)) + 1) * (int32_t) i2cclk;
 8003226:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 800322a:	f8b7 22f6 	ldrh.w	r2, [r7, #758]	; 0x2f6
 800322e:	3201      	adds	r2, #1
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	3301      	adds	r3, #1
 8003236:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
          if (((sdadel >= sdadel_min) && (sdadel <= sdadel_max))&& (p != p_prev))
 8003242:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8003246:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800324a:	429a      	cmp	r2, r3
 800324c:	db41      	blt.n	80032d2 <I2C_GetTiming+0x326>
 800324e:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8003252:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8003256:	429a      	cmp	r2, r3
 8003258:	dc3b      	bgt.n	80032d2 <I2C_GetTiming+0x326>
 800325a:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 800325e:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8003262:	429a      	cmp	r2, r3
 8003264:	d035      	beq.n	80032d2 <I2C_GetTiming+0x326>
          {
            valid_timing[valid_timing_nbr].presc = (uint8_t) p;
 8003266:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 800326a:	b2d8      	uxtb	r0, r3
 800326c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8003270:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	440b      	add	r3, r1
 800327c:	4602      	mov	r2, r0
 800327e:	701a      	strb	r2, [r3, #0]
            valid_timing[valid_timing_nbr].scldel = (uint8_t) l;
 8003280:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8003284:	b2d8      	uxtb	r0, r3
 8003286:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800328a:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	440b      	add	r3, r1
 8003296:	3301      	adds	r3, #1
 8003298:	4602      	mov	r2, r0
 800329a:	701a      	strb	r2, [r3, #0]
            valid_timing[valid_timing_nbr].sdadel = (uint8_t) a;
 800329c:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 80032a0:	b2d8      	uxtb	r0, r3
 80032a2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80032a6:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	440b      	add	r3, r1
 80032b2:	3302      	adds	r3, #2
 80032b4:	4602      	mov	r2, r0
 80032b6:	701a      	strb	r2, [r3, #0]
            p_prev = p;
 80032b8:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 80032bc:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
            valid_timing_nbr ++;
 80032c0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80032c4:	3301      	adds	r3, #1
 80032c6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
            if(valid_timing_nbr >= VALID_PRESC_NBR)
 80032ca:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80032ce:	2b63      	cmp	r3, #99	; 0x63
 80032d0:	d824      	bhi.n	800331c <I2C_GetTiming+0x370>
        for (a = 0; a < SDADEL_MAX; a++)
 80032d2:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 80032d6:	3301      	adds	r3, #1
 80032d8:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
 80032dc:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 80032e0:	2b0f      	cmp	r3, #15
 80032e2:	d9a0      	bls.n	8003226 <I2C_GetTiming+0x27a>
 80032e4:	e000      	b.n	80032e8 <I2C_GetTiming+0x33c>
          continue;
 80032e6:	bf00      	nop
      for (l = 0; l < SCLDEL_MAX; l++)
 80032e8:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 80032ec:	3301      	adds	r3, #1
 80032ee:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 80032f2:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	f67f af7d 	bls.w	80031f6 <I2C_GetTiming+0x24a>
    for (p = 0; p < PRESC_MAX; p++)
 80032fc:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8003300:	3301      	adds	r3, #1
 8003302:	f8a7 32f6 	strh.w	r3, [r7, #758]	; 0x2f6
 8003306:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 800330a:	2b0f      	cmp	r3, #15
 800330c:	f67f af6f 	bls.w	80031ee <I2C_GetTiming+0x242>
          }
        }
      }
    }

    if (valid_timing_nbr == 0U)
 8003310:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <I2C_GetTiming+0x380>
    {
      return 0;
 8003318:	2300      	movs	r3, #0
 800331a:	e148      	b.n	80035ae <I2C_GetTiming+0x602>
              goto Compute_scll_sclh;
 800331c:	bf00      	nop
 800331e:	e006      	b.n	800332e <I2C_GetTiming+0x382>
 8003320:	08015e00 	.word	0x08015e00
 8003324:	08015e78 	.word	0x08015e78
 8003328:	3b9aca00 	.word	0x3b9aca00
    }

Compute_scll_sclh:
 800332c:	bf00      	nop
    tsync = af_delay_min + dnf_delay + (2U * i2cclk);
 800332e:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8003332:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8003336:	441a      	add	r2, r3
 8003338:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    s = NULL;
 8003344:	2300      	movs	r3, #0
 8003346:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
    clk_max = NSEC_PER_SEC / i2c_specs[speed].rate_min;
 800334a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800334e:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	440b      	add	r3, r1
 800335c:	3304      	adds	r3, #4
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a95      	ldr	r2, [pc, #596]	; (80035b8 <I2C_GetTiming+0x60c>)
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    clk_min = NSEC_PER_SEC / i2c_specs[speed].rate_max;
 800336a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800336e:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	3308      	adds	r3, #8
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a8d      	ldr	r2, [pc, #564]	; (80035b8 <I2C_GetTiming+0x60c>)
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
    *   (SCL Low Period - Analog/Digital filters) / 4.
    * - SCL High Period has to be lower than High Period of the SCL Clock
    *   defined by I2C Specification
    * - I2C Clock has to be lower than SCL High Period
    */
    for (uint32_t count = 0; count < valid_timing_nbr; count++)
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8003390:	e0e1      	b.n	8003556 <I2C_GetTiming+0x5aa>
    {
      uint32_t prescaler = ((uint32_t) valid_timing[count].presc + 1U) * i2cclk;
 8003392:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8003396:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
      for (l = 0; l < SCLL_MAX; l++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 80033b8:	e0c3      	b.n	8003542 <I2C_GetTiming+0x596>
      {
        uint32_t tscl_l = (((uint32_t) l + 1U) * prescaler) + tsync;
 80033ba:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 80033be:	3301      	adds	r3, #1
 80033c0:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 80033c4:	fb02 f303 	mul.w	r3, r2, r3
 80033c8:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80033cc:	4413      	add	r3, r2
 80033ce:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
        if ((tscl_l < i2c_specs[speed].l_min) || (i2cclk >= ((tscl_l - af_delay_min - dnf_delay) / 4U)))
 80033d2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80033d6:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	3320      	adds	r3, #32
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 80033ec:	429a      	cmp	r2, r3
 80033ee:	f0c0 80a2 	bcc.w	8003536 <I2C_GetTiming+0x58a>
 80033f2:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 80033f6:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80033fa:	1ad2      	subs	r2, r2, r3
 80033fc:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8003408:	429a      	cmp	r2, r3
 800340a:	f080 8094 	bcs.w	8003536 <I2C_GetTiming+0x58a>
        {
          continue;
        }
        for (h = 0; h < SCLH_MAX; h++)
 800340e:	2300      	movs	r3, #0
 8003410:	f8a7 32f0 	strh.w	r3, [r7, #752]	; 0x2f0
 8003414:	e089      	b.n	800352a <I2C_GetTiming+0x57e>
        {
          uint32_t tscl_h = (((uint32_t) h + 1U) * prescaler) + tsync;
 8003416:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 800341a:	3301      	adds	r3, #1
 800341c:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8003428:	4413      	add	r3, r2
 800342a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
          uint32_t tscl = tscl_l + tscl_h + i2c_user_setup[speed].rise_time + i2c_user_setup[speed].fall_time;
 800342e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8003432:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8003436:	441a      	add	r2, r3
 8003438:	f107 010c 	add.w	r1, r7, #12
 800343c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	440b      	add	r3, r1
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	441a      	add	r2, r3
 8003448:	f107 010c 	add.w	r1, r7, #12
 800344c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	440b      	add	r3, r1
 8003454:	3304      	adds	r3, #4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4413      	add	r3, r2
 800345a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= i2c_specs[speed].h_min) && (i2cclk < tscl_h))
 800345e:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8003462:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8003466:	429a      	cmp	r2, r3
 8003468:	d35a      	bcc.n	8003520 <I2C_GetTiming+0x574>
 800346a:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 800346e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8003472:	429a      	cmp	r2, r3
 8003474:	d854      	bhi.n	8003520 <I2C_GetTiming+0x574>
 8003476:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800347a:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	3324      	adds	r3, #36	; 0x24
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8003490:	429a      	cmp	r2, r3
 8003492:	d345      	bcc.n	8003520 <I2C_GetTiming+0x574>
 8003494:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8003498:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800349c:	429a      	cmp	r2, r3
 800349e:	d23f      	bcs.n	8003520 <I2C_GetTiming+0x574>
          {
            int32_t clk_error = (int32_t) tscl - (int32_t) i2cspeed;
 80034a0:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80034a4:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            if (clk_error < 0)
 80034ae:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da04      	bge.n	80034c0 <I2C_GetTiming+0x514>
            {
              clk_error = -clk_error;
 80034b6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80034ba:	425b      	negs	r3, r3
 80034bc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            }
            /* save the solution with the lowest clock error */
            if (clk_error < (int32_t) clk_error_prev)
 80034c0:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 80034c4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80034c8:	429a      	cmp	r2, r3
 80034ca:	da29      	bge.n	8003520 <I2C_GetTiming+0x574>
            {
              clk_error_prev = (uint32_t) clk_error;
 80034cc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80034d0:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
              valid_timing[count].scll = (uint8_t) l;
 80034d4:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 80034d8:	b2d8      	uxtb	r0, r3
 80034da:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80034de:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	440b      	add	r3, r1
 80034ea:	3304      	adds	r3, #4
 80034ec:	4602      	mov	r2, r0
 80034ee:	701a      	strb	r2, [r3, #0]
              valid_timing[count].sclh = (uint8_t) h;
 80034f0:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 80034f4:	b2d8      	uxtb	r0, r3
 80034f6:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80034fa:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	440b      	add	r3, r1
 8003506:	3303      	adds	r3, #3
 8003508:	4602      	mov	r2, r0
 800350a:	701a      	strb	r2, [r3, #0]
              s = &valid_timing[count];
 800350c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8003510:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	440b      	add	r3, r1
 800351c:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
        for (h = 0; h < SCLH_MAX; h++)
 8003520:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 8003524:	3301      	adds	r3, #1
 8003526:	f8a7 32f0 	strh.w	r3, [r7, #752]	; 0x2f0
 800352a:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 800352e:	2bff      	cmp	r3, #255	; 0xff
 8003530:	f67f af71 	bls.w	8003416 <I2C_GetTiming+0x46a>
 8003534:	e000      	b.n	8003538 <I2C_GetTiming+0x58c>
          continue;
 8003536:	bf00      	nop
      for (l = 0; l < SCLL_MAX; l++)
 8003538:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 800353c:	3301      	adds	r3, #1
 800353e:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 8003542:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8003546:	2bff      	cmp	r3, #255	; 0xff
 8003548:	f67f af37 	bls.w	80033ba <I2C_GetTiming+0x40e>
    for (uint32_t count = 0; count < valid_timing_nbr; count++)
 800354c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8003550:	3301      	adds	r3, #1
 8003552:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8003556:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800355a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800355e:	429a      	cmp	r2, r3
 8003560:	f4ff af17 	bcc.w	8003392 <I2C_GetTiming+0x3e6>
            }
          }
        }
      }
    }
    if (s == NULL)
 8003564:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <I2C_GetTiming+0x5c4>
    {
      return 0;
 800356c:	2300      	movs	r3, #0
 800356e:	e01e      	b.n	80035ae <I2C_GetTiming+0x602>
    }
    ret = (((uint32_t) s->presc & 0xFU) << 28) | (((uint32_t) s->scldel & 0xFU) << 20) | (((uint32_t) s->sdadel & 0xFU) << 16) | (((uint32_t) s->sclh & 0xFFU) << 8) | (((uint32_t) s->scll & 0xFFU) << 0);
 8003570:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	071a      	lsls	r2, r3, #28
 8003578:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800357c:	785b      	ldrb	r3, [r3, #1]
 800357e:	051b      	lsls	r3, r3, #20
 8003580:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003584:	431a      	orrs	r2, r3
 8003586:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800358a:	789b      	ldrb	r3, [r3, #2]
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003592:	431a      	orrs	r2, r3
 8003594:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8003598:	78db      	ldrb	r3, [r3, #3]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	4313      	orrs	r3, r2
 800359e:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 80035a2:	7912      	ldrb	r2, [r2, #4]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  }
  
  return ret;
 80035aa:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	f507 7746 	add.w	r7, r7, #792	; 0x318
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bdb0      	pop	{r4, r5, r7, pc}
 80035b8:	3b9aca00 	.word	0x3b9aca00

080035bc <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <BSP_HSENSOR_Init+0x38>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	20be      	movs	r0, #190	; 0xbe
 80035c8:	4798      	blx	r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	2bbc      	cmp	r3, #188	; 0xbc
 80035ce:	d002      	beq.n	80035d6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	e009      	b.n	80035ea <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <BSP_HSENSOR_Init+0x3c>)
 80035d8:	4a06      	ldr	r2, [pc, #24]	; (80035f4 <BSP_HSENSOR_Init+0x38>)
 80035da:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <BSP_HSENSOR_Init+0x3c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	20be      	movs	r0, #190	; 0xbe
 80035e4:	4798      	blx	r3
    ret = HSENSOR_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80035ea:	687b      	ldr	r3, [r7, #4]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	2000000c 	.word	0x2000000c
 80035f8:	20000a14 	.word	0x20000a14

080035fc <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <BSP_HSENSOR_ReadHumidity+0x18>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	20be      	movs	r0, #190	; 0xbe
 8003608:	4798      	blx	r3
 800360a:	eef0 7a40 	vmov.f32	s15, s0
}
 800360e:	eeb0 0a67 	vmov.f32	s0, s15
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000a14 	.word	0x20000a14

08003618 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d903      	bls.n	8003634 <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800362c:	f06f 0301 	mvn.w	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e03a      	b.n	80036aa <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <BSP_MOTION_SENSOR_Init+0x34>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <BSP_MOTION_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003644:	f06f 030a 	mvn.w	r3, #10
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e02e      	b.n	80036aa <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d108      	bne.n	8003664 <BSP_MOTION_SENSOR_Init+0x4c>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <BSP_MOTION_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800365c:	f06f 030a 	mvn.w	r3, #10
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e022      	b.n	80036aa <BSP_MOTION_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <BSP_MOTION_SENSOR_Init+0x66>
    {
      if (LSM6DSL_Probe(Functions) != BSP_ERROR_NONE)
 800366a:	6838      	ldr	r0, [r7, #0]
 800366c:	f000 f8e8 	bl	8003840 <LSM6DSL_Probe>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00c      	beq.n	8003690 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8003676:	f06f 0304 	mvn.w	r3, #4
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e008      	b.n	8003690 <BSP_MOTION_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      if (LIS3MDL_Probe(Functions) != BSP_ERROR_NONE)
 800367e:	6838      	ldr	r0, [r7, #0]
 8003680:	f000 f954 	bl	800392c <LIS3MDL_Probe>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 800368a:	f06f 0304 	mvn.w	r3, #4
 800368e:	60fb      	str	r3, [r7, #12]
      }
    }
    
    if (status == BSP_ERROR_NONE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <BSP_MOTION_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 8003696:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <BSP_MOTION_SENSOR_Init+0x9c>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	4904      	ldr	r1, [pc, #16]	; (80036b4 <BSP_MOTION_SENSOR_Init+0x9c>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000a18 	.word	0x20000a18

080036b8 <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d903      	bls.n	80036d4 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80036cc:	f06f 0301 	mvn.w	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e045      	b.n	8003760 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d108      	bne.n	80036ec <BSP_MOTION_SENSOR_Enable+0x34>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <BSP_MOTION_SENSOR_Enable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80036e4:	f06f 030a 	mvn.w	r3, #10
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e039      	b.n	8003760 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d108      	bne.n	8003704 <BSP_MOTION_SENSOR_Enable+0x4c>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <BSP_MOTION_SENSOR_Enable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80036fc:	f06f 030a 	mvn.w	r3, #10
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e02d      	b.n	8003760 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <BSP_MOTION_SENSOR_Enable+0xb4>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <BSP_MOTION_SENSOR_Enable+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8003714:	f04f 33ff 	mov.w	r3, #4294967295
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	e021      	b.n	8003760 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GyroIdx : ((Function == MOTION_ACCELERO) ? AcceleroIdx : MagnetoIdx);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d006      	beq.n	8003730 <BSP_MOTION_SENSOR_Enable+0x78>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d101      	bne.n	800372c <BSP_MOTION_SENSOR_Enable+0x74>
 8003728:	2301      	movs	r3, #1
 800372a:	e002      	b.n	8003732 <BSP_MOTION_SENSOR_Enable+0x7a>
 800372c:	2302      	movs	r3, #2
 800372e:	e000      	b.n	8003732 <BSP_MOTION_SENSOR_Enable+0x7a>
 8003730:	2300      	movs	r3, #0
 8003732:	72fb      	strb	r3, [r7, #11]
    if(Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 8003734:	7af9      	ldrb	r1, [r7, #11]
 8003736:	480e      	ldr	r0, [pc, #56]	; (8003770 <BSP_MOTION_SENSOR_Enable+0xb8>)
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4413      	add	r3, r2
 8003740:	440b      	add	r3, r1
 8003742:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	490a      	ldr	r1, [pc, #40]	; (8003774 <BSP_MOTION_SENSOR_Enable+0xbc>)
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003750:	4610      	mov	r0, r2
 8003752:	4798      	blx	r3
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	da02      	bge.n	8003760 <BSP_MOTION_SENSOR_Enable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800375a:	f06f 0304 	mvn.w	r3, #4
 800375e:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000a18 	.word	0x20000a18
 8003770:	20000a30 	.word	0x20000a30
 8003774:	20000a20 	.word	0x20000a20

08003778 <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d802      	bhi.n	8003794 <BSP_MOTION_SENSOR_GetAxes+0x1c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003794:	f06f 0301 	mvn.w	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e046      	b.n	800382a <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d108      	bne.n	80037b4 <BSP_MOTION_SENSOR_GetAxes+0x3c>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <BSP_MOTION_SENSOR_GetAxes+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80037ac:	f06f 030a 	mvn.w	r3, #10
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e03a      	b.n	800382a <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d108      	bne.n	80037cc <BSP_MOTION_SENSOR_GetAxes+0x54>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <BSP_MOTION_SENSOR_GetAxes+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80037c4:	f06f 030a 	mvn.w	r3, #10
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e02e      	b.n	800382a <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <BSP_MOTION_SENSOR_GetAxes+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e022      	b.n	800382a <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GyroIdx : ((Function == MOTION_ACCELERO) ? AcceleroIdx : MagnetoIdx);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d006      	beq.n	80037f8 <BSP_MOTION_SENSOR_GetAxes+0x80>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d101      	bne.n	80037f4 <BSP_MOTION_SENSOR_GetAxes+0x7c>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e002      	b.n	80037fa <BSP_MOTION_SENSOR_GetAxes+0x82>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e000      	b.n	80037fa <BSP_MOTION_SENSOR_GetAxes+0x82>
 80037f8:	2300      	movs	r3, #0
 80037fa:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 80037fc:	7cf9      	ldrb	r1, [r7, #19]
 80037fe:	480e      	ldr	r0, [pc, #56]	; (8003838 <BSP_MOTION_SENSOR_GetAxes+0xc0>)
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	440b      	add	r3, r1
 800380a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	490a      	ldr	r1, [pc, #40]	; (800383c <BSP_MOTION_SENSOR_GetAxes+0xc4>)
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4610      	mov	r0, r2
 800381c:	4798      	blx	r3
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	da02      	bge.n	800382a <BSP_MOTION_SENSOR_GetAxes+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003824:	f06f 0304 	mvn.w	r3, #4
 8003828:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800382a:	697b      	ldr	r3, [r7, #20]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000a18 	.word	0x20000a18
 8003838:	20000a30 	.word	0x20000a30
 800383c:	20000a20 	.word	0x20000a20

08003840 <LSM6DSL_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t LSM6DSL_Probe(uint32_t Functions)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08c      	sub	sp, #48	; 0x30
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8003848:	2300      	movs	r3, #0
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LSM6DSL_IO_t            IOCtx;
  uint8_t                 lsm6dsl_id;
  static LSM6DSL_Object_t LSM6DSL_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = LSM6DSL_I2C_BUS;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = LSM6DSL_I2C_ADD_L;
 8003850:	23d5      	movs	r3, #213	; 0xd5
 8003852:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8003854:	4b29      	ldr	r3, [pc, #164]	; (80038fc <LSM6DSL_Probe+0xbc>)
 8003856:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8003858:	4b29      	ldr	r3, [pc, #164]	; (8003900 <LSM6DSL_Probe+0xc0>)
 800385a:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 800385c:	4b29      	ldr	r3, [pc, #164]	; (8003904 <LSM6DSL_Probe+0xc4>)
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8003860:	4b29      	ldr	r3, [pc, #164]	; (8003908 <LSM6DSL_Probe+0xc8>)
 8003862:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8003864:	4b29      	ldr	r3, [pc, #164]	; (800390c <LSM6DSL_Probe+0xcc>)
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LSM6DSL_RegisterBusIO(&LSM6DSL_Obj, &IOCtx) != LSM6DSL_OK)
 8003868:	f107 0310 	add.w	r3, r7, #16
 800386c:	4619      	mov	r1, r3
 800386e:	4828      	ldr	r0, [pc, #160]	; (8003910 <LSM6DSL_Probe+0xd0>)
 8003870:	f001 fa3a 	bl	8004ce8 <LSM6DSL_RegisterBusIO>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <LSM6DSL_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 800387a:	f06f 0307 	mvn.w	r3, #7
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003880:	e037      	b.n	80038f2 <LSM6DSL_Probe+0xb2>
  }
  else if (LSM6DSL_ReadID(&LSM6DSL_Obj, &lsm6dsl_id) != LSM6DSL_OK)
 8003882:	f107 030f 	add.w	r3, r7, #15
 8003886:	4619      	mov	r1, r3
 8003888:	4821      	ldr	r0, [pc, #132]	; (8003910 <LSM6DSL_Probe+0xd0>)
 800388a:	f001 fb23 	bl	8004ed4 <LSM6DSL_ReadID>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <LSM6DSL_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8003894:	f06f 0304 	mvn.w	r3, #4
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800389a:	e02a      	b.n	80038f2 <LSM6DSL_Probe+0xb2>
  }
  else if (lsm6dsl_id != LSM6DSL_ID)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b6a      	cmp	r3, #106	; 0x6a
 80038a0:	d003      	beq.n	80038aa <LSM6DSL_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 80038a2:	f06f 0306 	mvn.w	r3, #6
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a8:	e023      	b.n	80038f2 <LSM6DSL_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &LSM6DSL_Obj;
 80038aa:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <LSM6DSL_Probe+0xd4>)
 80038ac:	4a18      	ldr	r2, [pc, #96]	; (8003910 <LSM6DSL_Probe+0xd0>)
 80038ae:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &LSM6DSL_COMMON_Driver;
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <LSM6DSL_Probe+0xd8>)
 80038b2:	4a1a      	ldr	r2, [pc, #104]	; (800391c <LSM6DSL_Probe+0xdc>)
 80038b4:	601a      	str	r2, [r3, #0]
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 80038b6:	4b18      	ldr	r3, [pc, #96]	; (8003918 <LSM6DSL_Probe+0xd8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a15      	ldr	r2, [pc, #84]	; (8003914 <LSM6DSL_Probe+0xd4>)
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	4610      	mov	r0, r2
 80038c2:	4798      	blx	r3
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da03      	bge.n	80038d2 <LSM6DSL_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80038ca:	f06f 0304 	mvn.w	r3, #4
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d0:	e00f      	b.n	80038f2 <LSM6DSL_Probe+0xb2>
    }
    else
    {
      if ((Functions & MOTION_GYRO) != 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <LSM6DSL_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GyroIdx] = (MOTION_SENSOR_FuncDrv_t *) &LSM6DSL_GYRO_Driver;
 80038dc:	4b10      	ldr	r3, [pc, #64]	; (8003920 <LSM6DSL_Probe+0xe0>)
 80038de:	4a11      	ldr	r2, [pc, #68]	; (8003924 <LSM6DSL_Probe+0xe4>)
 80038e0:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <LSM6DSL_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][AcceleroIdx] = (MOTION_SENSOR_FuncDrv_t *) &LSM6DSL_ACC_Driver;
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <LSM6DSL_Probe+0xe0>)
 80038ee:	4a0e      	ldr	r2, [pc, #56]	; (8003928 <LSM6DSL_Probe+0xe8>)
 80038f0:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3730      	adds	r7, #48	; 0x30
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	08002be5 	.word	0x08002be5
 8003900:	08002c65 	.word	0x08002c65
 8003904:	08002ce5 	.word	0x08002ce5
 8003908:	08002cb5 	.word	0x08002cb5
 800390c:	08002d5f 	.word	0x08002d5f
 8003910:	20000a48 	.word	0x20000a48
 8003914:	20000a20 	.word	0x20000a20
 8003918:	20000a28 	.word	0x20000a28
 800391c:	20000068 	.word	0x20000068
 8003920:	20000a30 	.word	0x20000a30
 8003924:	2000009c 	.word	0x2000009c
 8003928:	20000078 	.word	0x20000078

0800392c <LIS3MDL_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t LIS3MDL_Probe(uint32_t Functions)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	; 0x30
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8003934:	2300      	movs	r3, #0
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
  LIS3MDL_IO_t            IOCtx;
  uint8_t                 lis3mdl_id;
  static LIS3MDL_Object_t LIS3MDL_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = LIS3MDL_I2C_BUS;
 8003938:	2300      	movs	r3, #0
 800393a:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = LIS3MDL_I2C_ADD_H;
 800393c:	233d      	movs	r3, #61	; 0x3d
 800393e:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8003940:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <LIS3MDL_Probe+0xac>)
 8003942:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8003944:	4b25      	ldr	r3, [pc, #148]	; (80039dc <LIS3MDL_Probe+0xb0>)
 8003946:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <LIS3MDL_Probe+0xb4>)
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 800394c:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <LIS3MDL_Probe+0xb8>)
 800394e:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8003950:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <LIS3MDL_Probe+0xbc>)
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS3MDL_RegisterBusIO(&LIS3MDL_Obj, &IOCtx) != LIS3MDL_OK)
 8003954:	f107 0310 	add.w	r3, r7, #16
 8003958:	4619      	mov	r1, r3
 800395a:	4824      	ldr	r0, [pc, #144]	; (80039ec <LIS3MDL_Probe+0xc0>)
 800395c:	f000 fa3c 	bl	8003dd8 <LIS3MDL_RegisterBusIO>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <LIS3MDL_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8003966:	f06f 0307 	mvn.w	r3, #7
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396c:	e02f      	b.n	80039ce <LIS3MDL_Probe+0xa2>
  }
  else if (LIS3MDL_ReadID(&LIS3MDL_Obj, &lis3mdl_id) != LIS3MDL_OK)
 800396e:	f107 030f 	add.w	r3, r7, #15
 8003972:	4619      	mov	r1, r3
 8003974:	481d      	ldr	r0, [pc, #116]	; (80039ec <LIS3MDL_Probe+0xc0>)
 8003976:	f000 fae7 	bl	8003f48 <LIS3MDL_ReadID>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <LIS3MDL_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8003980:	f06f 0304 	mvn.w	r3, #4
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003986:	e022      	b.n	80039ce <LIS3MDL_Probe+0xa2>
  }
  else if (lis3mdl_id != LIS3MDL_ID)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b3d      	cmp	r3, #61	; 0x3d
 800398c:	d003      	beq.n	8003996 <LIS3MDL_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 800398e:	f06f 0306 	mvn.w	r3, #6
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003994:	e01b      	b.n	80039ce <LIS3MDL_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &LIS3MDL_Obj;
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <LIS3MDL_Probe+0xc4>)
 8003998:	4a14      	ldr	r2, [pc, #80]	; (80039ec <LIS3MDL_Probe+0xc0>)
 800399a:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &LIS3MDL_COMMON_Driver;
 800399c:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <LIS3MDL_Probe+0xc8>)
 800399e:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <LIS3MDL_Probe+0xcc>)
 80039a0:	605a      	str	r2, [r3, #4]
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <LIS3MDL_Probe+0xc8>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <LIS3MDL_Probe+0xc4>)
 80039aa:	6852      	ldr	r2, [r2, #4]
 80039ac:	4610      	mov	r0, r2
 80039ae:	4798      	blx	r3
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	da03      	bge.n	80039be <LIS3MDL_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80039b6:	f06f 0304 	mvn.w	r3, #4
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039bc:	e007      	b.n	80039ce <LIS3MDL_Probe+0xa2>
    }
    else
    {
      if ((Functions & MOTION_MAGNETO) != 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <LIS3MDL_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MagnetoIdx] = (MOTION_SENSOR_FuncDrv_t *) &LIS3MDL_MAG_Driver;
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <LIS3MDL_Probe+0xd0>)
 80039ca:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <LIS3MDL_Probe+0xd4>)
 80039cc:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3730      	adds	r7, #48	; 0x30
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	08002be5 	.word	0x08002be5
 80039dc:	08002c65 	.word	0x08002c65
 80039e0:	08002ce5 	.word	0x08002ce5
 80039e4:	08002cb5 	.word	0x08002cb5
 80039e8:	08002d5f 	.word	0x08002d5f
 80039ec:	20000a78 	.word	0x20000a78
 80039f0:	20000a20 	.word	0x20000a20
 80039f4:	20000a28 	.word	0x20000a28
 80039f8:	20000028 	.word	0x20000028
 80039fc:	20000a30 	.word	0x20000a30
 8003a00:	20000038 	.word	0x20000038

08003a04 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <BSP_PSENSOR_Init+0x38>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	20ba      	movs	r0, #186	; 0xba
 8003a10:	4798      	blx	r3
 8003a12:	4603      	mov	r3, r0
 8003a14:	2bb1      	cmp	r3, #177	; 0xb1
 8003a16:	d002      	beq.n	8003a1e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	607b      	str	r3, [r7, #4]
 8003a1c:	e009      	b.n	8003a32 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <BSP_PSENSOR_Init+0x3c>)
 8003a20:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <BSP_PSENSOR_Init+0x38>)
 8003a22:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <BSP_PSENSOR_Init+0x3c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	20ba      	movs	r0, #186	; 0xba
 8003a2c:	4798      	blx	r3
    ret = PSENSOR_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003a32:	687b      	ldr	r3, [r7, #4]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2000005c 	.word	0x2000005c
 8003a40:	20000aa4 	.word	0x20000aa4

08003a44 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <BSP_PSENSOR_ReadPressure+0x18>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	20ba      	movs	r0, #186	; 0xba
 8003a50:	4798      	blx	r3
 8003a52:	eef0 7a40 	vmov.f32	s15, s0
}
 8003a56:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000aa4 	.word	0x20000aa4

08003a60 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <BSP_TSENSOR_Init+0x30>)
 8003a6c:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <BSP_TSENSOR_Init+0x34>)
 8003a6e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003a70:	f7ff f858 	bl	8002b24 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <BSP_TSENSOR_Init+0x30>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	20be      	movs	r0, #190	; 0xbe
 8003a7e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003a84:	79fb      	ldrb	r3, [r7, #7]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000aa8 	.word	0x20000aa8
 8003a94:	20000018 	.word	0x20000018

08003a98 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <BSP_TSENSOR_ReadTemp+0x18>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	20be      	movs	r0, #190	; 0xbe
 8003aa4:	4798      	blx	r3
 8003aa6:	eef0 7a40 	vmov.f32	s15, s0
}
 8003aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000aa8 	.word	0x20000aa8

08003ab4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2120      	movs	r1, #32
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f851 	bl	8002b6c <SENSOR_IO_Read>
 8003aca:	4603      	mov	r3, r0
 8003acc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	f043 0304 	orr.w	r3, r3, #4
 8003adc:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	f023 0303 	bic.w	r3, r3, #3
 8003ae4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003af4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	2120      	movs	r1, #32
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff f81a 	bl	8002b38 <SENSOR_IO_Write>
}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8003b1a:	f7ff f803 	bl	8002b24 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	210f      	movs	r1, #15
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff f821 	bl	8002b6c <SENSOR_IO_Read>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	b2d8      	uxtb	r0, r3
 8003b46:	f107 020c 	add.w	r2, r7, #12
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	21b0      	movs	r1, #176	; 0xb0
 8003b4e:	f7ff f82b 	bl	8002ba8 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8003b52:	7b3b      	ldrb	r3, [r7, #12]
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8003b5a:	7b7b      	ldrb	r3, [r7, #13]
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	b2d8      	uxtb	r0, r3
 8003b66:	f107 020c 	add.w	r2, r7, #12
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	21b6      	movs	r1, #182	; 0xb6
 8003b6e:	f7ff f81b 	bl	8002ba8 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003b72:	7b7b      	ldrb	r3, [r7, #13]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	b21a      	sxth	r2, r3
 8003b78:	7b3b      	ldrb	r3, [r7, #12]
 8003b7a:	b21b      	sxth	r3, r3
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	b2d8      	uxtb	r0, r3
 8003b84:	f107 020c 	add.w	r2, r7, #12
 8003b88:	2302      	movs	r3, #2
 8003b8a:	21ba      	movs	r1, #186	; 0xba
 8003b8c:	f7ff f80c 	bl	8002ba8 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003b90:	7b7b      	ldrb	r3, [r7, #13]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	b21a      	sxth	r2, r3
 8003b96:	7b3b      	ldrb	r3, [r7, #12]
 8003b98:	b21b      	sxth	r3, r3
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	b2d8      	uxtb	r0, r3
 8003ba2:	f107 020c 	add.w	r2, r7, #12
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	21a8      	movs	r1, #168	; 0xa8
 8003baa:	f7fe fffd 	bl	8002ba8 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003bae:	7b7b      	ldrb	r3, [r7, #13]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	b21a      	sxth	r2, r3
 8003bb4:	7b3b      	ldrb	r3, [r7, #12]
 8003bb6:	b21b      	sxth	r3, r3
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003bbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003bc0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bce:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003bd2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003be4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003be8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c0a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8003c0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c1a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8003c1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c22:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003c68 <HTS221_H_ReadHumidity+0x130>
 8003c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2e:	dd01      	ble.n	8003c34 <HTS221_H_ReadHumidity+0xfc>
 8003c30:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <HTS221_H_ReadHumidity+0x134>)
 8003c32:	e00a      	b.n	8003c4a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8003c34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	d502      	bpl.n	8003c48 <HTS221_H_ReadHumidity+0x110>
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	e000      	b.n	8003c4a <HTS221_H_ReadHumidity+0x112>
 8003c48:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8003c4a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8003c4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c58:	eef0 7a66 	vmov.f32	s15, s13
}
 8003c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	447a0000 	.word	0x447a0000
 8003c6c:	447a0000 	.word	0x447a0000

08003c70 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	6039      	str	r1, [r7, #0]
 8003c7a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2120      	movs	r1, #32
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe ff72 	bl	8002b6c <SENSOR_IO_Read>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	f023 0304 	bic.w	r3, r3, #4
 8003c92:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	f043 0304 	orr.w	r3, r3, #4
 8003c9a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	7bfa      	ldrb	r2, [r7, #15]
 8003cba:	2120      	movs	r1, #32
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe ff3b 	bl	8002b38 <SENSOR_IO_Write>
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b088      	sub	sp, #32
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	b2d8      	uxtb	r0, r3
 8003cd8:	f107 0208 	add.w	r2, r7, #8
 8003cdc:	2302      	movs	r3, #2
 8003cde:	21b2      	movs	r1, #178	; 0xb2
 8003ce0:	f7fe ff62 	bl	8002ba8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2135      	movs	r1, #53	; 0x35
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe ff3e 	bl	8002b6c <SENSOR_IO_Read>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003cf4:	7ffb      	ldrb	r3, [r7, #31]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	b21b      	sxth	r3, r3
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	b21a      	sxth	r2, r3
 8003d00:	7a3b      	ldrb	r3, [r7, #8]
 8003d02:	b21b      	sxth	r3, r3
 8003d04:	4313      	orrs	r3, r2
 8003d06:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003d08:	7ffb      	ldrb	r3, [r7, #31]
 8003d0a:	019b      	lsls	r3, r3, #6
 8003d0c:	b21b      	sxth	r3, r3
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	b21a      	sxth	r2, r3
 8003d14:	7a7b      	ldrb	r3, [r7, #9]
 8003d16:	b21b      	sxth	r3, r3
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003d1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d20:	10db      	asrs	r3, r3, #3
 8003d22:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003d24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003d28:	10db      	asrs	r3, r3, #3
 8003d2a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	b2d8      	uxtb	r0, r3
 8003d30:	f107 0208 	add.w	r2, r7, #8
 8003d34:	2304      	movs	r3, #4
 8003d36:	21bc      	movs	r1, #188	; 0xbc
 8003d38:	f7fe ff36 	bl	8002ba8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003d3c:	7a7b      	ldrb	r3, [r7, #9]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	b21a      	sxth	r2, r3
 8003d42:	7a3b      	ldrb	r3, [r7, #8]
 8003d44:	b21b      	sxth	r3, r3
 8003d46:	4313      	orrs	r3, r2
 8003d48:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003d4a:	7afb      	ldrb	r3, [r7, #11]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	b21a      	sxth	r2, r3
 8003d50:	7abb      	ldrb	r3, [r7, #10]
 8003d52:	b21b      	sxth	r3, r3
 8003d54:	4313      	orrs	r3, r2
 8003d56:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	b2d8      	uxtb	r0, r3
 8003d5c:	f107 0208 	add.w	r2, r7, #8
 8003d60:	2302      	movs	r3, #2
 8003d62:	21aa      	movs	r1, #170	; 0xaa
 8003d64:	f7fe ff20 	bl	8002ba8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003d68:	7a7b      	ldrb	r3, [r7, #9]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	b21a      	sxth	r2, r3
 8003d6e:	7a3b      	ldrb	r3, [r7, #8]
 8003d70:	b21b      	sxth	r3, r3
 8003d72:	4313      	orrs	r3, r2
 8003d74:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8003d76:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003d7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003d8c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d9a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d9e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003da2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	ee07 3a90 	vmov	s15, r3
 8003dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	ee07 3a90 	vmov	s15, r3
}
 8003dce:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <LIS3MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_RegisterBusIO(LIS3MDL_Object_t *pObj, LIS3MDL_IO_t *pIO)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3MDL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d103      	bne.n	8003df4 <LIS3MDL_RegisterBusIO+0x1c>
  {
    ret = LIS3MDL_ERROR;
 8003dec:	f04f 33ff 	mov.w	r3, #4294967295
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e04d      	b.n	8003e90 <LIS3MDL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	7b1a      	ldrb	r2, [r3, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <LIS3MDL_RegisterBusIO+0xc4>)
 8003e30:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <LIS3MDL_RegisterBusIO+0xc8>)
 8003e36:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <LIS3MDL_RegisterBusIO+0x76>
    {
      ret = LIS3MDL_ERROR;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	e020      	b.n	8003e90 <LIS3MDL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS3MDL_OK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4798      	blx	r3
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <LIS3MDL_RegisterBusIO+0x8a>
    {
      ret = LIS3MDL_ERROR;
 8003e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e016      	b.n	8003e90 <LIS3MDL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS3MDL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d112      	bne.n	8003e90 <LIS3MDL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <LIS3MDL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x07;
 8003e74:	2307      	movs	r3, #7
 8003e76:	72fb      	strb	r3, [r7, #11]

          if (LIS3MDL_Write_Reg(pObj, LIS3MDL_CTRL_REG3, data) != LIS3MDL_OK)
 8003e78:	7afb      	ldrb	r3, [r7, #11]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	2122      	movs	r1, #34	; 0x22
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fb51 	bl	8004526 <LIS3MDL_Write_Reg>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <LIS3MDL_RegisterBusIO+0xb8>
          {
            ret = LIS3MDL_ERROR;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 8003e90:	68fb      	ldr	r3, [r7, #12]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	0800455d 	.word	0x0800455d
 8003ea0:	080045bf 	.word	0x080045bf

08003ea4 <LIS3MDL_Init>:
  * @brief  Component initialization
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_Init(LIS3MDL_Object_t *pObj)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Operating mode selection - power down */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_POWER_DOWN) != LIS3MDL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	331c      	adds	r3, #28
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fdac 	bl	8004a10 <lis3mdl_operating_mode_set>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <LIS3MDL_Init+0x20>
  {
    return LIS3MDL_ERROR;
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec2:	e025      	b.n	8003f10 <LIS3MDL_Init+0x6c>
  }

  /* Enable BDU */
  if (lis3mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS3MDL_OK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	331c      	adds	r3, #28
 8003ec8:	2101      	movs	r1, #1
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fdc6 	bl	8004a5c <lis3mdl_block_data_update_set>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <LIS3MDL_Init+0x38>
  {
    return LIS3MDL_ERROR;
 8003ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eda:	e019      	b.n	8003f10 <LIS3MDL_Init+0x6c>
  }

  /* Set Output data rate. */
  if (LIS3MDL_MAG_SetOutputDataRate(pObj, 80.0f) != LIS3MDL_OK)
 8003edc:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8003f18 <LIS3MDL_Init+0x74>
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f9db 	bl	800429c <LIS3MDL_MAG_SetOutputDataRate>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <LIS3MDL_Init+0x4e>
  {
    return LIS3MDL_ERROR;
 8003eec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef0:	e00e      	b.n	8003f10 <LIS3MDL_Init+0x6c>
  }

  /* Full scale selection. */
  if (LIS3MDL_MAG_SetFullScale(pObj, 4) != LIS3MDL_OK)
 8003ef2:	2104      	movs	r1, #4
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fa73 	bl	80043e0 <LIS3MDL_MAG_SetFullScale>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <LIS3MDL_Init+0x62>
  {
    return LIS3MDL_ERROR;
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
 8003f04:	e004      	b.n	8003f10 <LIS3MDL_Init+0x6c>
  }

  pObj->is_initialized = 1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS3MDL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	42a00000 	.word	0x42a00000

08003f1c <LIS3MDL_DeInit>:
 * @brief Deinitialize the LIS3MDL sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_DeInit(LIS3MDL_Object_t *pObj)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS3MDL_MAG_Disable(pObj) != LIS3MDL_OK)
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f873 	bl	8004010 <LIS3MDL_MAG_Disable>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <LIS3MDL_DeInit+0x1a>
  {
    return LIS3MDL_ERROR;
 8003f30:	f04f 33ff 	mov.w	r3, #4294967295
 8003f34:	e004      	b.n	8003f40 <LIS3MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS3MDL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <LIS3MDL_ReadID>:
  * @param  pObj pointer to Component object
  * @param  Id pointer to Component ID
  * @retval Component status
  */
int32_t LIS3MDL_ReadID(LIS3MDL_Object_t *pObj, uint8_t *Id)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  if (lis3mdl_device_id_get(&(pObj->Ctx), Id) != LIS3MDL_OK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	331c      	adds	r3, #28
 8003f56:	6839      	ldr	r1, [r7, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fdf0 	bl	8004b3e <lis3mdl_device_id_get>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <LIS3MDL_ReadID+0x22>
  {
    return LIS3MDL_ERROR;
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295
 8003f68:	e000      	b.n	8003f6c <LIS3MDL_ReadID+0x24>
  }

  return LIS3MDL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <LIS3MDL_GetCapabilities>:
  * @param  pObj pointer to Component object
  * @param  Capabilities pointer to LIS3MDL sensor capabilities
  * @retval Component status
  */
int32_t LIS3MDL_GetCapabilities(LIS3MDL_Object_t *pObj, LIS3MDL_Capabilities_t *Capabilities)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2200      	movs	r2, #0
 8003f88:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 16;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 80.0f;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <LIS3MDL_GetCapabilities+0x58>)
 8003fbc:	619a      	str	r2, [r3, #24]
  return LIS3MDL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	42a00000 	.word	0x42a00000

08003fd0 <LIS3MDL_MAG_Enable>:
 * @brief Enable the LIS3MDL accelerometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_Enable(LIS3MDL_Object_t *pObj)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <LIS3MDL_MAG_Enable+0x16>
  {
    return LIS3MDL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e010      	b.n	8004008 <LIS3MDL_MAG_Enable+0x38>
  }

  /* Operating mode selection - continuous */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_CONTINUOUS_MODE) != LIS3MDL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	331c      	adds	r3, #28
 8003fea:	2100      	movs	r1, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fd0f 	bl	8004a10 <lis3mdl_operating_mode_set>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <LIS3MDL_MAG_Enable+0x2e>
  {
    return LIS3MDL_ERROR;
 8003ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffc:	e004      	b.n	8004008 <LIS3MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3MDL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <LIS3MDL_MAG_Disable>:
 * @brief Disable the LIS3MDL accelerometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_Disable(LIS3MDL_Object_t *pObj)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <LIS3MDL_MAG_Disable+0x16>
  {
    return LIS3MDL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e010      	b.n	8004048 <LIS3MDL_MAG_Disable+0x38>
  }

  /* Operating mode selection - power down */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_POWER_DOWN) != LIS3MDL_OK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	331c      	adds	r3, #28
 800402a:	2102      	movs	r1, #2
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fcef 	bl	8004a10 <lis3mdl_operating_mode_set>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <LIS3MDL_MAG_Disable+0x2e>
  {
    return LIS3MDL_ERROR;
 8004038:	f04f 33ff 	mov.w	r3, #4294967295
 800403c:	e004      	b.n	8004048 <LIS3MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3MDL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <LIS3MDL_MAG_GetSensitivity>:
 * @param pObj the device pObj
 * @param Sensitivity pointer to Sensitivity value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetSensitivity(LIS3MDL_Object_t *pObj, float *Sensitivity)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lis3mdl_full_scale_get(&(pObj->Ctx), &full_scale) != LIS3MDL_OK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	331c      	adds	r3, #28
 800405e:	f107 020f 	add.w	r2, r7, #15
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fc9b 	bl	80049a0 <lis3mdl_full_scale_get>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <LIS3MDL_MAG_GetSensitivity+0x26>
  {
    return LIS3MDL_ERROR;
 8004070:	f04f 33ff 	mov.w	r3, #4294967295
 8004074:	e020      	b.n	80040b8 <LIS3MDL_MAG_GetSensitivity+0x68>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d81b      	bhi.n	80040b4 <LIS3MDL_MAG_GetSensitivity+0x64>
 800407c:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <LIS3MDL_MAG_GetSensitivity+0x34>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	08004095 	.word	0x08004095
 8004088:	0800409d 	.word	0x0800409d
 800408c:	080040a5 	.word	0x080040a5
 8004090:	080040ad 	.word	0x080040ad
  {
    case LIS3MDL_4_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_4GAUSS;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <LIS3MDL_MAG_GetSensitivity+0x70>)
 8004098:	601a      	str	r2, [r3, #0]
      break;
 800409a:	e00c      	b.n	80040b6 <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_8_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_8GAUSS;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <LIS3MDL_MAG_GetSensitivity+0x74>)
 80040a0:	601a      	str	r2, [r3, #0]
      break;
 80040a2:	e008      	b.n	80040b6 <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_12_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_12GAUSS;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <LIS3MDL_MAG_GetSensitivity+0x78>)
 80040a8:	601a      	str	r2, [r3, #0]
      break;
 80040aa:	e004      	b.n	80040b6 <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_16_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_16GAUSS;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4a07      	ldr	r2, [pc, #28]	; (80040cc <LIS3MDL_MAG_GetSensitivity+0x7c>)
 80040b0:	601a      	str	r2, [r3, #0]
      break;
 80040b2:	e000      	b.n	80040b6 <LIS3MDL_MAG_GetSensitivity+0x66>
    default:
      break;
 80040b4:	bf00      	nop
  }

  return LIS3MDL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	3e158106 	.word	0x3e158106
 80040c4:	3e958106 	.word	0x3e958106
 80040c8:	3ee04189 	.word	0x3ee04189
 80040cc:	3f158106 	.word	0x3f158106

080040d0 <LIS3MDL_MAG_GetOutputDataRate>:
 * @param pObj the device pObj
 * @param Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetOutputDataRate(LIS3MDL_Object_t *pObj, float *Odr)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  lis3mdl_om_t odr_low_level;

  /* Get current output data rate. */
  if (lis3mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS3MDL_OK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	331c      	adds	r3, #28
 80040de:	f107 020f 	add.w	r2, r7, #15
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fb11 	bl	800470c <lis3mdl_data_rate_get>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <LIS3MDL_MAG_GetOutputDataRate+0x26>
  {
    return LIS3MDL_ERROR;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	e0b6      	b.n	8004264 <LIS3MDL_MAG_GetOutputDataRate+0x194>
  }

  switch (odr_low_level)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2b3e      	cmp	r3, #62	; 0x3e
 80040fa:	f200 80b1 	bhi.w	8004260 <LIS3MDL_MAG_GetOutputDataRate+0x190>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <LIS3MDL_MAG_GetOutputDataRate+0x34>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004201 	.word	0x08004201
 8004108:	08004259 	.word	0x08004259
 800410c:	08004209 	.word	0x08004209
 8004110:	08004261 	.word	0x08004261
 8004114:	08004211 	.word	0x08004211
 8004118:	08004261 	.word	0x08004261
 800411c:	08004219 	.word	0x08004219
 8004120:	08004261 	.word	0x08004261
 8004124:	08004221 	.word	0x08004221
 8004128:	08004261 	.word	0x08004261
 800412c:	08004229 	.word	0x08004229
 8004130:	08004261 	.word	0x08004261
 8004134:	08004231 	.word	0x08004231
 8004138:	08004261 	.word	0x08004261
 800413c:	08004239 	.word	0x08004239
 8004140:	08004261 	.word	0x08004261
 8004144:	08004261 	.word	0x08004261
 8004148:	08004251 	.word	0x08004251
 800414c:	08004209 	.word	0x08004209
 8004150:	08004261 	.word	0x08004261
 8004154:	08004211 	.word	0x08004211
 8004158:	08004261 	.word	0x08004261
 800415c:	08004219 	.word	0x08004219
 8004160:	08004261 	.word	0x08004261
 8004164:	08004221 	.word	0x08004221
 8004168:	08004261 	.word	0x08004261
 800416c:	08004229 	.word	0x08004229
 8004170:	08004261 	.word	0x08004261
 8004174:	08004231 	.word	0x08004231
 8004178:	08004261 	.word	0x08004261
 800417c:	08004239 	.word	0x08004239
 8004180:	08004261 	.word	0x08004261
 8004184:	08004261 	.word	0x08004261
 8004188:	08004249 	.word	0x08004249
 800418c:	08004209 	.word	0x08004209
 8004190:	08004261 	.word	0x08004261
 8004194:	08004211 	.word	0x08004211
 8004198:	08004261 	.word	0x08004261
 800419c:	08004219 	.word	0x08004219
 80041a0:	08004261 	.word	0x08004261
 80041a4:	08004221 	.word	0x08004221
 80041a8:	08004261 	.word	0x08004261
 80041ac:	08004229 	.word	0x08004229
 80041b0:	08004261 	.word	0x08004261
 80041b4:	08004231 	.word	0x08004231
 80041b8:	08004261 	.word	0x08004261
 80041bc:	08004239 	.word	0x08004239
 80041c0:	08004261 	.word	0x08004261
 80041c4:	08004261 	.word	0x08004261
 80041c8:	08004241 	.word	0x08004241
 80041cc:	08004209 	.word	0x08004209
 80041d0:	08004261 	.word	0x08004261
 80041d4:	08004211 	.word	0x08004211
 80041d8:	08004261 	.word	0x08004261
 80041dc:	08004219 	.word	0x08004219
 80041e0:	08004261 	.word	0x08004261
 80041e4:	08004221 	.word	0x08004221
 80041e8:	08004261 	.word	0x08004261
 80041ec:	08004229 	.word	0x08004229
 80041f0:	08004261 	.word	0x08004261
 80041f4:	08004231 	.word	0x08004231
 80041f8:	08004261 	.word	0x08004261
 80041fc:	08004239 	.word	0x08004239
  {
    case LIS3MDL_LP_Hz625:
      *Odr = 0.625f;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	4a1a      	ldr	r2, [pc, #104]	; (800426c <LIS3MDL_MAG_GetOutputDataRate+0x19c>)
 8004204:	601a      	str	r2, [r3, #0]
      break;
 8004206:	e02c      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1Hz25:
    case LIS3MDL_MP_1Hz25:
    case LIS3MDL_HP_1Hz25:
    case LIS3MDL_UHP_1Hz25:
      *Odr = 1.250f;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4a19      	ldr	r2, [pc, #100]	; (8004270 <LIS3MDL_MAG_GetOutputDataRate+0x1a0>)
 800420c:	601a      	str	r2, [r3, #0]
      break;
 800420e:	e028      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_2Hz5:
    case LIS3MDL_MP_2Hz5:
    case LIS3MDL_HP_2Hz5:
    case LIS3MDL_UHP_2Hz5:
      *Odr = 2.500f;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	4a18      	ldr	r2, [pc, #96]	; (8004274 <LIS3MDL_MAG_GetOutputDataRate+0x1a4>)
 8004214:	601a      	str	r2, [r3, #0]
      break;
 8004216:	e024      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_5Hz:
    case LIS3MDL_MP_5Hz:
    case LIS3MDL_HP_5Hz:
    case LIS3MDL_UHP_5Hz:
      *Odr = 5.000f;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <LIS3MDL_MAG_GetOutputDataRate+0x1a8>)
 800421c:	601a      	str	r2, [r3, #0]
      break;
 800421e:	e020      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_10Hz:
    case LIS3MDL_MP_10Hz:
    case LIS3MDL_HP_10Hz:
    case LIS3MDL_UHP_10Hz:
      *Odr = 10.000f;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4a16      	ldr	r2, [pc, #88]	; (800427c <LIS3MDL_MAG_GetOutputDataRate+0x1ac>)
 8004224:	601a      	str	r2, [r3, #0]
      break;
 8004226:	e01c      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_20Hz:
    case LIS3MDL_MP_20Hz:
    case LIS3MDL_HP_20Hz:
    case LIS3MDL_UHP_20Hz:
      *Odr = 20.000f;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	4a15      	ldr	r2, [pc, #84]	; (8004280 <LIS3MDL_MAG_GetOutputDataRate+0x1b0>)
 800422c:	601a      	str	r2, [r3, #0]
      break;
 800422e:	e018      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_40Hz:
    case LIS3MDL_MP_40Hz:
    case LIS3MDL_HP_40Hz:
    case LIS3MDL_UHP_40Hz:
      *Odr = 40.000f;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	4a14      	ldr	r2, [pc, #80]	; (8004284 <LIS3MDL_MAG_GetOutputDataRate+0x1b4>)
 8004234:	601a      	str	r2, [r3, #0]
      break;
 8004236:	e014      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_80Hz:
    case LIS3MDL_MP_80Hz:
    case LIS3MDL_HP_80Hz:
    case LIS3MDL_UHP_80Hz:
      *Odr = 80.000f;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4a13      	ldr	r2, [pc, #76]	; (8004288 <LIS3MDL_MAG_GetOutputDataRate+0x1b8>)
 800423c:	601a      	str	r2, [r3, #0]
      break;
 800423e:	e010      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_UHP_155Hz:
      *Odr = 155.000f;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	4a12      	ldr	r2, [pc, #72]	; (800428c <LIS3MDL_MAG_GetOutputDataRate+0x1bc>)
 8004244:	601a      	str	r2, [r3, #0]
      break;
 8004246:	e00c      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_HP_300Hz:
      *Odr = 300.000f;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4a11      	ldr	r2, [pc, #68]	; (8004290 <LIS3MDL_MAG_GetOutputDataRate+0x1c0>)
 800424c:	601a      	str	r2, [r3, #0]
      break;
 800424e:	e008      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_MP_560Hz:
      *Odr = 560.000f;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	4a10      	ldr	r2, [pc, #64]	; (8004294 <LIS3MDL_MAG_GetOutputDataRate+0x1c4>)
 8004254:	601a      	str	r2, [r3, #0]
      break;
 8004256:	e004      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1kHz:
      *Odr = 1000.000f;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4a0f      	ldr	r2, [pc, #60]	; (8004298 <LIS3MDL_MAG_GetOutputDataRate+0x1c8>)
 800425c:	601a      	str	r2, [r3, #0]
      break;
 800425e:	e000      	b.n	8004262 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    default:
      break;
 8004260:	bf00      	nop
  }

  return LIS3MDL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	3f200000 	.word	0x3f200000
 8004270:	3fa00000 	.word	0x3fa00000
 8004274:	40200000 	.word	0x40200000
 8004278:	40a00000 	.word	0x40a00000
 800427c:	41200000 	.word	0x41200000
 8004280:	41a00000 	.word	0x41a00000
 8004284:	42200000 	.word	0x42200000
 8004288:	42a00000 	.word	0x42a00000
 800428c:	431b0000 	.word	0x431b0000
 8004290:	43960000 	.word	0x43960000
 8004294:	440c0000 	.word	0x440c0000
 8004298:	447a0000 	.word	0x447a0000

0800429c <LIS3MDL_MAG_SetOutputDataRate>:
 * @param pObj the device pObj
 * @param Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_SetOutputDataRate(LIS3MDL_Object_t *pObj, float Odr)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	ed87 0a00 	vstr	s0, [r7]
  lis3mdl_om_t new_odr;

  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
            : (Odr <=  1.250f) ? LIS3MDL_LP_1Hz25
 80042a8:	edd7 7a00 	vldr	s15, [r7]
 80042ac:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 80042b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	d801      	bhi.n	80042be <LIS3MDL_MAG_SetOutputDataRate+0x22>
 80042ba:	2300      	movs	r3, #0
 80042bc:	e042      	b.n	8004344 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 80042be:	edd7 7a00 	vldr	s15, [r7]
 80042c2:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 80042c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ce:	d801      	bhi.n	80042d4 <LIS3MDL_MAG_SetOutputDataRate+0x38>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e037      	b.n	8004344 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 80042d4:	edd7 7a00 	vldr	s15, [r7]
 80042d8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80042dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e4:	d801      	bhi.n	80042ea <LIS3MDL_MAG_SetOutputDataRate+0x4e>
 80042e6:	2304      	movs	r3, #4
 80042e8:	e02c      	b.n	8004344 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 80042ea:	edd7 7a00 	vldr	s15, [r7]
 80042ee:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80042f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fa:	d801      	bhi.n	8004300 <LIS3MDL_MAG_SetOutputDataRate+0x64>
 80042fc:	2306      	movs	r3, #6
 80042fe:	e021      	b.n	8004344 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8004300:	edd7 7a00 	vldr	s15, [r7]
 8004304:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800430c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004310:	d801      	bhi.n	8004316 <LIS3MDL_MAG_SetOutputDataRate+0x7a>
 8004312:	2308      	movs	r3, #8
 8004314:	e016      	b.n	8004344 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8004316:	edd7 7a00 	vldr	s15, [r7]
 800431a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800431e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004326:	d801      	bhi.n	800432c <LIS3MDL_MAG_SetOutputDataRate+0x90>
 8004328:	230a      	movs	r3, #10
 800432a:	e00b      	b.n	8004344 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 800432c:	edd7 7a00 	vldr	s15, [r7]
 8004330:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800436c <LIS3MDL_MAG_SetOutputDataRate+0xd0>
 8004334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433c:	d801      	bhi.n	8004342 <LIS3MDL_MAG_SetOutputDataRate+0xa6>
 800433e:	230c      	movs	r3, #12
 8004340:	e000      	b.n	8004344 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8004342:	230e      	movs	r3, #14
  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
 8004344:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 10.000f) ? LIS3MDL_LP_10Hz
            : (Odr <= 20.000f) ? LIS3MDL_LP_20Hz
            : (Odr <= 40.000f) ? LIS3MDL_LP_40Hz
            :                      LIS3MDL_LP_80Hz;

  if (lis3mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS3MDL_OK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	331c      	adds	r3, #28
 800434a:	7bfa      	ldrb	r2, [r7, #15]
 800434c:	4611      	mov	r1, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f996 	bl	8004680 <lis3mdl_data_rate_set>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <LIS3MDL_MAG_SetOutputDataRate+0xc4>
  {
    return LIS3MDL_ERROR;
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
 800435e:	e000      	b.n	8004362 <LIS3MDL_MAG_SetOutputDataRate+0xc6>
  }

  return LIS3MDL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	42200000 	.word	0x42200000

08004370 <LIS3MDL_MAG_GetFullScale>:
 * @param pObj the device pObj
 * @param FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetFullScale(LIS3MDL_Object_t *pObj, int32_t  *FullScale)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis3mdl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS3MDL_OK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	331c      	adds	r3, #28
 800437e:	f107 020f 	add.w	r2, r7, #15
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fb0b 	bl	80049a0 <lis3mdl_full_scale_get>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <LIS3MDL_MAG_GetFullScale+0x26>
  {
    return LIS3MDL_ERROR;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295
 8004394:	e020      	b.n	80043d8 <LIS3MDL_MAG_GetFullScale+0x68>
  }

  switch (fs_low_level)
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d81b      	bhi.n	80043d4 <LIS3MDL_MAG_GetFullScale+0x64>
 800439c:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <LIS3MDL_MAG_GetFullScale+0x34>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043b5 	.word	0x080043b5
 80043a8:	080043bd 	.word	0x080043bd
 80043ac:	080043c5 	.word	0x080043c5
 80043b0:	080043cd 	.word	0x080043cd
  {
    case LIS3MDL_4_GAUSS:
      *FullScale = 4;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2204      	movs	r2, #4
 80043b8:	601a      	str	r2, [r3, #0]
      break;
 80043ba:	e00c      	b.n	80043d6 <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_8_GAUSS:
      *FullScale = 8;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2208      	movs	r2, #8
 80043c0:	601a      	str	r2, [r3, #0]
      break;
 80043c2:	e008      	b.n	80043d6 <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_12_GAUSS:
      *FullScale = 12;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	220c      	movs	r2, #12
 80043c8:	601a      	str	r2, [r3, #0]
      break;
 80043ca:	e004      	b.n	80043d6 <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_16_GAUSS:
      *FullScale = 16;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2210      	movs	r2, #16
 80043d0:	601a      	str	r2, [r3, #0]
      break;
 80043d2:	e000      	b.n	80043d6 <LIS3MDL_MAG_GetFullScale+0x66>
    default:
      break;
 80043d4:	bf00      	nop
  }

  return LIS3MDL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <LIS3MDL_MAG_SetFullScale>:
 * @param pObj the device pObj
 * @param FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_SetFullScale(LIS3MDL_Object_t *pObj, int32_t FullScale)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t new_fs;

  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
           : (FullScale <= 8) ? LIS3MDL_8_GAUSS
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	dd0b      	ble.n	8004408 <LIS3MDL_MAG_SetFullScale+0x28>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	dd06      	ble.n	8004404 <LIS3MDL_MAG_SetFullScale+0x24>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	dc01      	bgt.n	8004400 <LIS3MDL_MAG_SetFullScale+0x20>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e004      	b.n	800440a <LIS3MDL_MAG_SetFullScale+0x2a>
 8004400:	2303      	movs	r3, #3
 8004402:	e002      	b.n	800440a <LIS3MDL_MAG_SetFullScale+0x2a>
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <LIS3MDL_MAG_SetFullScale+0x2a>
 8004408:	2300      	movs	r3, #0
  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
 800440a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 12) ? LIS3MDL_12_GAUSS
           :                       LIS3MDL_16_GAUSS;

  if (lis3mdl_full_scale_set(&(pObj->Ctx), new_fs) != LIS3MDL_OK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	331c      	adds	r3, #28
 8004410:	7bfa      	ldrb	r2, [r7, #15]
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fa9d 	bl	8004954 <lis3mdl_full_scale_set>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <LIS3MDL_MAG_SetFullScale+0x46>
  {
    return LIS3MDL_ERROR;
 8004420:	f04f 33ff 	mov.w	r3, #4294967295
 8004424:	e000      	b.n	8004428 <LIS3MDL_MAG_SetFullScale+0x48>
  }

  return LIS3MDL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <LIS3MDL_MAG_GetAxesRaw>:
 * @param pObj the device pObj
 * @param Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetAxesRaw(LIS3MDL_Object_t *pObj, LIS3MDL_AxesRaw_t *Value)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  lis3mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis3mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3MDL_OK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	331c      	adds	r3, #28
 800443e:	f107 0208 	add.w	r2, r7, #8
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fb2f 	bl	8004aa8 <lis3mdl_magnetic_raw_get>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <LIS3MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS3MDL_ERROR;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295
 8004454:	e00c      	b.n	8004470 <LIS3MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004456:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800445e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004466:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	809a      	strh	r2, [r3, #4]

  return LIS3MDL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <LIS3MDL_MAG_GetAxes>:
 * @param pObj the device pObj
 * @param MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetAxes(LIS3MDL_Object_t *pObj, LIS3MDL_Axes_t *MagneticField)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  lis3mdl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lis3mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3MDL_OK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	331c      	adds	r3, #28
 800448c:	f107 0210 	add.w	r2, r7, #16
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fb08 	bl	8004aa8 <lis3mdl_magnetic_raw_get>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <LIS3MDL_MAG_GetAxes+0x2c>
  {
    return LIS3MDL_ERROR;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295
 80044a2:	e03c      	b.n	800451e <LIS3MDL_MAG_GetAxes+0xa6>
  }

  /* Get LIS3MDL actual sensitivity. */
  if (LIS3MDL_MAG_GetSensitivity(pObj, &sensitivity) != LIS3MDL_OK)
 80044a4:	f107 030c 	add.w	r3, r7, #12
 80044a8:	4619      	mov	r1, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fdd0 	bl	8004050 <LIS3MDL_MAG_GetSensitivity>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <LIS3MDL_MAG_GetAxes+0x44>
  {
    return LIS3MDL_ERROR;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ba:	e030      	b.n	800451e <LIS3MDL_MAG_GetAxes+0xa6>
  }

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80044bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044c0:	ee07 3a90 	vmov	s15, r3
 80044c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80044cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044d4:	ee17 2a90 	vmov	r2, s15
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80044dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80044ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f4:	ee17 2a90 	vmov	r2, s15
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80044fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004500:	ee07 3a90 	vmov	s15, r3
 8004504:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004508:	edd7 7a03 	vldr	s15, [r7, #12]
 800450c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004514:	ee17 2a90 	vmov	r2, s15
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	609a      	str	r2, [r3, #8]

  return LIS3MDL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <LIS3MDL_Write_Reg>:
 * @param Reg address to be written
 * @param Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_Write_Reg(LIS3MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	70fb      	strb	r3, [r7, #3]
 8004532:	4613      	mov	r3, r2
 8004534:	70bb      	strb	r3, [r7, #2]
  if (lis3mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS3MDL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f103 001c 	add.w	r0, r3, #28
 800453c:	1cba      	adds	r2, r7, #2
 800453e:	78f9      	ldrb	r1, [r7, #3]
 8004540:	2301      	movs	r3, #1
 8004542:	f000 f885 	bl	8004650 <lis3mdl_write_reg>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <LIS3MDL_Write_Reg+0x2c>
  {
    return LIS3MDL_ERROR;
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
 8004550:	e000      	b.n	8004554 <LIS3MDL_Write_Reg+0x2e>
  }

  return LIS3MDL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <ReadRegWrap>:
  * @brief  Wrap Read register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	461a      	mov	r2, r3
 8004568:	460b      	mov	r3, r1
 800456a:	72fb      	strb	r3, [r7, #11]
 800456c:	4613      	mov	r3, r2
 800456e:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10e      	bne.n	800459a <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	695c      	ldr	r4, [r3, #20]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	7b1b      	ldrb	r3, [r3, #12]
 8004584:	b298      	uxth	r0, r3
 8004586:	7afb      	ldrb	r3, [r7, #11]
 8004588:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800458c:	b2db      	uxtb	r3, r3
 800458e:	b299      	uxth	r1, r3
 8004590:	893b      	ldrh	r3, [r7, #8]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	47a0      	blx	r4
 8004596:	4603      	mov	r3, r0
 8004598:	e00d      	b.n	80045b6 <ReadRegWrap+0x5a>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	695c      	ldr	r4, [r3, #20]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	7b1b      	ldrb	r3, [r3, #12]
 80045a2:	b298      	uxth	r0, r3
 80045a4:	7afb      	ldrb	r3, [r7, #11]
 80045a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	b299      	uxth	r1, r3
 80045ae:	893b      	ldrh	r3, [r7, #8]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	47a0      	blx	r4
 80045b4:	4603      	mov	r3, r0
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd90      	pop	{r4, r7, pc}

080045be <WriteRegWrap>:
  * @brief  Wrap Write register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80045be:	b590      	push	{r4, r7, lr}
 80045c0:	b087      	sub	sp, #28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	461a      	mov	r2, r3
 80045ca:	460b      	mov	r3, r1
 80045cc:	72fb      	strb	r3, [r7, #11]
 80045ce:	4613      	mov	r3, r2
 80045d0:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10e      	bne.n	80045fc <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	691c      	ldr	r4, [r3, #16]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	7b1b      	ldrb	r3, [r3, #12]
 80045e6:	b298      	uxth	r0, r3
 80045e8:	7afb      	ldrb	r3, [r7, #11]
 80045ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	b299      	uxth	r1, r3
 80045f2:	893b      	ldrh	r3, [r7, #8]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	47a0      	blx	r4
 80045f8:	4603      	mov	r3, r0
 80045fa:	e00d      	b.n	8004618 <WriteRegWrap+0x5a>
  }
  else   /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	691c      	ldr	r4, [r3, #16]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	7b1b      	ldrb	r3, [r3, #12]
 8004604:	b298      	uxth	r0, r3
 8004606:	7afb      	ldrb	r3, [r7, #11]
 8004608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800460c:	b2db      	uxtb	r3, r3
 800460e:	b299      	uxth	r1, r3
 8004610:	893b      	ldrh	r3, [r7, #8]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	47a0      	blx	r4
 8004616:	4603      	mov	r3, r0
  }
}
 8004618:	4618      	mov	r0, r3
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}

08004620 <lis3mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	461a      	mov	r2, r3
 800462c:	460b      	mov	r3, r1
 800462e:	72fb      	strb	r3, [r7, #11]
 8004630:	4613      	mov	r3, r2
 8004632:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685c      	ldr	r4, [r3, #4]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6898      	ldr	r0, [r3, #8]
 800463c:	893b      	ldrh	r3, [r7, #8]
 800463e:	7af9      	ldrb	r1, [r7, #11]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	47a0      	blx	r4
 8004644:	6178      	str	r0, [r7, #20]
  return ret;
 8004646:	697b      	ldr	r3, [r7, #20]
}
 8004648:	4618      	mov	r0, r3
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	bd90      	pop	{r4, r7, pc}

08004650 <lis3mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	461a      	mov	r2, r3
 800465c:	460b      	mov	r3, r1
 800465e:	72fb      	strb	r3, [r7, #11]
 8004660:	4613      	mov	r3, r2
 8004662:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681c      	ldr	r4, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6898      	ldr	r0, [r3, #8]
 800466c:	893b      	ldrh	r3, [r7, #8]
 800466e:	7af9      	ldrb	r1, [r7, #11]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	47a0      	blx	r4
 8004674:	6178      	str	r0, [r7, #20]
  return ret;
 8004676:	697b      	ldr	r3, [r7, #20]
}
 8004678:	4618      	mov	r0, r3
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	bd90      	pop	{r4, r7, pc}

08004680 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800468c:	f107 0210 	add.w	r2, r7, #16
 8004690:	2301      	movs	r3, #1
 8004692:	2120      	movs	r1, #32
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff ffc3 	bl	8004620 <lis3mdl_read_reg>
 800469a:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	7c3b      	ldrb	r3, [r7, #16]
 80046ac:	f362 0346 	bfi	r3, r2, #1, #6
 80046b0:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80046b2:	f107 0210 	add.w	r2, r7, #16
 80046b6:	2301      	movs	r3, #1
 80046b8:	2120      	movs	r1, #32
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ffc8 	bl	8004650 <lis3mdl_write_reg>
 80046c0:	6178      	str	r0, [r7, #20]
  }
  
  if (ret == 0)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d107      	bne.n	80046d8 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 80046c8:	f107 020c 	add.w	r2, r7, #12
 80046cc:	2301      	movs	r3, #1
 80046ce:	2123      	movs	r1, #35	; 0x23
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ffa5 	bl	8004620 <lis3mdl_read_reg>
 80046d6:	6178      	str	r0, [r7, #20]
  }
  
  if (ret == 0)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d111      	bne.n	8004702 <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	7b3b      	ldrb	r3, [r7, #12]
 80046ec:	f362 0383 	bfi	r3, r2, #2, #2
 80046f0:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 80046f2:	f107 020c 	add.w	r2, r7, #12
 80046f6:	2301      	movs	r3, #1
 80046f8:	2123      	movs	r1, #35	; 0x23
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff ffa8 	bl	8004650 <lis3mdl_write_reg>
 8004700:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg4, 1);
  }

  return ret;
 8004702:	697b      	ldr	r3, [r7, #20]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <lis3mdl_data_rate_get>:
  * @param  val      Get the values of om in reg CTRL_REG1(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_get(stmdev_ctx_t *ctx, lis3mdl_om_t *val)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  /* z axis, ctrl_reg4 -> omz is aligned with x/y axis ctrl_reg1 -> om*/
  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004716:	f107 0208 	add.w	r2, r7, #8
 800471a:	2301      	movs	r3, #1
 800471c:	2120      	movs	r1, #32
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ff7e 	bl	8004620 <lis3mdl_read_reg>
 8004724:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.om)
 8004726:	7a3b      	ldrb	r3, [r7, #8]
 8004728:	f3c3 0345 	ubfx	r3, r3, #1, #6
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b3e      	cmp	r3, #62	; 0x3e
 8004730:	f200 8106 	bhi.w	8004940 <lis3mdl_data_rate_get+0x234>
 8004734:	a201      	add	r2, pc, #4	; (adr r2, 800473c <lis3mdl_data_rate_get+0x30>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	08004839 	.word	0x08004839
 8004740:	08004841 	.word	0x08004841
 8004744:	08004861 	.word	0x08004861
 8004748:	08004941 	.word	0x08004941
 800474c:	08004869 	.word	0x08004869
 8004750:	08004941 	.word	0x08004941
 8004754:	08004871 	.word	0x08004871
 8004758:	08004941 	.word	0x08004941
 800475c:	08004879 	.word	0x08004879
 8004760:	08004941 	.word	0x08004941
 8004764:	08004881 	.word	0x08004881
 8004768:	08004941 	.word	0x08004941
 800476c:	08004889 	.word	0x08004889
 8004770:	08004941 	.word	0x08004941
 8004774:	08004891 	.word	0x08004891
 8004778:	08004941 	.word	0x08004941
 800477c:	08004941 	.word	0x08004941
 8004780:	08004849 	.word	0x08004849
 8004784:	08004899 	.word	0x08004899
 8004788:	08004941 	.word	0x08004941
 800478c:	080048a1 	.word	0x080048a1
 8004790:	08004941 	.word	0x08004941
 8004794:	080048a9 	.word	0x080048a9
 8004798:	08004941 	.word	0x08004941
 800479c:	080048b1 	.word	0x080048b1
 80047a0:	08004941 	.word	0x08004941
 80047a4:	080048b9 	.word	0x080048b9
 80047a8:	08004941 	.word	0x08004941
 80047ac:	080048c1 	.word	0x080048c1
 80047b0:	08004941 	.word	0x08004941
 80047b4:	080048c9 	.word	0x080048c9
 80047b8:	08004941 	.word	0x08004941
 80047bc:	08004941 	.word	0x08004941
 80047c0:	08004851 	.word	0x08004851
 80047c4:	080048d1 	.word	0x080048d1
 80047c8:	08004941 	.word	0x08004941
 80047cc:	080048d9 	.word	0x080048d9
 80047d0:	08004941 	.word	0x08004941
 80047d4:	080048e1 	.word	0x080048e1
 80047d8:	08004941 	.word	0x08004941
 80047dc:	080048e9 	.word	0x080048e9
 80047e0:	08004941 	.word	0x08004941
 80047e4:	080048f1 	.word	0x080048f1
 80047e8:	08004941 	.word	0x08004941
 80047ec:	080048f9 	.word	0x080048f9
 80047f0:	08004941 	.word	0x08004941
 80047f4:	08004901 	.word	0x08004901
 80047f8:	08004941 	.word	0x08004941
 80047fc:	08004941 	.word	0x08004941
 8004800:	08004859 	.word	0x08004859
 8004804:	08004909 	.word	0x08004909
 8004808:	08004941 	.word	0x08004941
 800480c:	08004911 	.word	0x08004911
 8004810:	08004941 	.word	0x08004941
 8004814:	08004919 	.word	0x08004919
 8004818:	08004941 	.word	0x08004941
 800481c:	08004921 	.word	0x08004921
 8004820:	08004941 	.word	0x08004941
 8004824:	08004929 	.word	0x08004929
 8004828:	08004941 	.word	0x08004941
 800482c:	08004931 	.word	0x08004931
 8004830:	08004941 	.word	0x08004941
 8004834:	08004939 	.word	0x08004939
  {
    case LIS3MDL_LP_Hz625:
      *val = LIS3MDL_LP_Hz625;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
      break;
 800483e:	e083      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_1kHz:
      *val = LIS3MDL_LP_1kHz;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2201      	movs	r2, #1
 8004844:	701a      	strb	r2, [r3, #0]
      break;
 8004846:	e07f      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_560Hz:
      *val = LIS3MDL_MP_560Hz;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2211      	movs	r2, #17
 800484c:	701a      	strb	r2, [r3, #0]
      break;
 800484e:	e07b      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_300Hz:
      *val = LIS3MDL_HP_300Hz;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2221      	movs	r2, #33	; 0x21
 8004854:	701a      	strb	r2, [r3, #0]
      break;
 8004856:	e077      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_155Hz:
      *val = LIS3MDL_UHP_155Hz;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2231      	movs	r2, #49	; 0x31
 800485c:	701a      	strb	r2, [r3, #0]
      break;
 800485e:	e073      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_1Hz25:
      *val = LIS3MDL_LP_1Hz25;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2202      	movs	r2, #2
 8004864:	701a      	strb	r2, [r3, #0]
      break;
 8004866:	e06f      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_2Hz5:
      *val = LIS3MDL_LP_2Hz5;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2204      	movs	r2, #4
 800486c:	701a      	strb	r2, [r3, #0]
      break;
 800486e:	e06b      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_5Hz:
      *val = LIS3MDL_LP_5Hz;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2206      	movs	r2, #6
 8004874:	701a      	strb	r2, [r3, #0]
      break;
 8004876:	e067      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_10Hz:
      *val = LIS3MDL_LP_10Hz;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2208      	movs	r2, #8
 800487c:	701a      	strb	r2, [r3, #0]
      break;
 800487e:	e063      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_20Hz:
      *val = LIS3MDL_LP_20Hz;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	220a      	movs	r2, #10
 8004884:	701a      	strb	r2, [r3, #0]
      break;
 8004886:	e05f      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_40Hz:
      *val = LIS3MDL_LP_40Hz;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	220c      	movs	r2, #12
 800488c:	701a      	strb	r2, [r3, #0]
      break;
 800488e:	e05b      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_80Hz:
      *val = LIS3MDL_LP_80Hz;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	220e      	movs	r2, #14
 8004894:	701a      	strb	r2, [r3, #0]
      break;
 8004896:	e057      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_1Hz25:
      *val = LIS3MDL_MP_1Hz25;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2212      	movs	r2, #18
 800489c:	701a      	strb	r2, [r3, #0]
      break;
 800489e:	e053      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_2Hz5:
      *val = LIS3MDL_MP_2Hz5;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2214      	movs	r2, #20
 80048a4:	701a      	strb	r2, [r3, #0]
      break;
 80048a6:	e04f      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_5Hz:
      *val = LIS3MDL_MP_5Hz;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2216      	movs	r2, #22
 80048ac:	701a      	strb	r2, [r3, #0]
      break;
 80048ae:	e04b      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_10Hz:
      *val = LIS3MDL_MP_10Hz;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2218      	movs	r2, #24
 80048b4:	701a      	strb	r2, [r3, #0]
      break;
 80048b6:	e047      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_20Hz:
      *val = LIS3MDL_MP_20Hz;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	221a      	movs	r2, #26
 80048bc:	701a      	strb	r2, [r3, #0]
      break;
 80048be:	e043      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_40Hz:
      *val = LIS3MDL_MP_40Hz;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	221c      	movs	r2, #28
 80048c4:	701a      	strb	r2, [r3, #0]
      break;
 80048c6:	e03f      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_80Hz:
      *val = LIS3MDL_MP_80Hz;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	221e      	movs	r2, #30
 80048cc:	701a      	strb	r2, [r3, #0]
      break;
 80048ce:	e03b      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_1Hz25:
      *val = LIS3MDL_HP_1Hz25;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2222      	movs	r2, #34	; 0x22
 80048d4:	701a      	strb	r2, [r3, #0]
      break;
 80048d6:	e037      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_2Hz5:
      *val = LIS3MDL_HP_2Hz5;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2224      	movs	r2, #36	; 0x24
 80048dc:	701a      	strb	r2, [r3, #0]
      break;
 80048de:	e033      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_5Hz:
      *val = LIS3MDL_HP_5Hz;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2226      	movs	r2, #38	; 0x26
 80048e4:	701a      	strb	r2, [r3, #0]
      break;
 80048e6:	e02f      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_10Hz:
      *val = LIS3MDL_HP_10Hz;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2228      	movs	r2, #40	; 0x28
 80048ec:	701a      	strb	r2, [r3, #0]
      break;
 80048ee:	e02b      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_20Hz:
      *val = LIS3MDL_HP_20Hz;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	222a      	movs	r2, #42	; 0x2a
 80048f4:	701a      	strb	r2, [r3, #0]
      break;
 80048f6:	e027      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_40Hz:
      *val = LIS3MDL_HP_40Hz;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	222c      	movs	r2, #44	; 0x2c
 80048fc:	701a      	strb	r2, [r3, #0]
      break;
 80048fe:	e023      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_80Hz:
      *val = LIS3MDL_HP_80Hz;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	222e      	movs	r2, #46	; 0x2e
 8004904:	701a      	strb	r2, [r3, #0]
      break;
 8004906:	e01f      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_1Hz25:
      *val = LIS3MDL_UHP_1Hz25;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2232      	movs	r2, #50	; 0x32
 800490c:	701a      	strb	r2, [r3, #0]
      break;
 800490e:	e01b      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_2Hz5:
      *val = LIS3MDL_UHP_2Hz5;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2234      	movs	r2, #52	; 0x34
 8004914:	701a      	strb	r2, [r3, #0]
      break;
 8004916:	e017      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_5Hz:
      *val = LIS3MDL_UHP_5Hz;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2236      	movs	r2, #54	; 0x36
 800491c:	701a      	strb	r2, [r3, #0]
      break;
 800491e:	e013      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_10Hz:
      *val = LIS3MDL_UHP_10Hz;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2238      	movs	r2, #56	; 0x38
 8004924:	701a      	strb	r2, [r3, #0]
      break;
 8004926:	e00f      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_20Hz:
      *val = LIS3MDL_UHP_20Hz;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	223a      	movs	r2, #58	; 0x3a
 800492c:	701a      	strb	r2, [r3, #0]
      break;
 800492e:	e00b      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_40Hz:
      *val = LIS3MDL_UHP_40Hz;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	223c      	movs	r2, #60	; 0x3c
 8004934:	701a      	strb	r2, [r3, #0]
      break;
 8004936:	e007      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_80Hz:
      *val = LIS3MDL_UHP_80Hz;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	223e      	movs	r2, #62	; 0x3e
 800493c:	701a      	strb	r2, [r3, #0]
      break;
 800493e:	e003      	b.n	8004948 <lis3mdl_data_rate_get+0x23c>
    default:
      *val = LIS3MDL_UHP_80Hz;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	223e      	movs	r2, #62	; 0x3e
 8004944:	701a      	strb	r2, [r3, #0]
      break;
 8004946:	bf00      	nop
  }

  return ret;
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop

08004954 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004960:	f107 0208 	add.w	r2, r7, #8
 8004964:	2301      	movs	r3, #1
 8004966:	2121      	movs	r1, #33	; 0x21
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff fe59 	bl	8004620 <lis3mdl_read_reg>
 800496e:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10f      	bne.n	8004996 <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	b2da      	uxtb	r2, r3
 800497e:	7a3b      	ldrb	r3, [r7, #8]
 8004980:	f362 1346 	bfi	r3, r2, #5, #2
 8004984:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004986:	f107 0208 	add.w	r2, r7, #8
 800498a:	2301      	movs	r3, #1
 800498c:	2121      	movs	r1, #33	; 0x21
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fe5e 	bl	8004650 <lis3mdl_write_reg>
 8004994:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004996:	68fb      	ldr	r3, [r7, #12]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <lis3mdl_full_scale_get>:
  * @param  val      get the values of fs in reg CTRL_REG2(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_get(stmdev_ctx_t *ctx, lis3mdl_fs_t *val)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80049aa:	f107 0208 	add.w	r2, r7, #8
 80049ae:	2301      	movs	r3, #1
 80049b0:	2121      	movs	r1, #33	; 0x21
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fe34 	bl	8004620 <lis3mdl_read_reg>
 80049b8:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg2.fs)
 80049ba:	7a3b      	ldrb	r3, [r7, #8]
 80049bc:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d81a      	bhi.n	80049fc <lis3mdl_full_scale_get+0x5c>
 80049c6:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <lis3mdl_full_scale_get+0x2c>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	080049dd 	.word	0x080049dd
 80049d0:	080049e5 	.word	0x080049e5
 80049d4:	080049ed 	.word	0x080049ed
 80049d8:	080049f5 	.word	0x080049f5
  {
    case LIS3MDL_4_GAUSS:
      *val = LIS3MDL_4_GAUSS;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
      break;
 80049e2:	e00f      	b.n	8004a04 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_8_GAUSS:
      *val = LIS3MDL_8_GAUSS;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2201      	movs	r2, #1
 80049e8:	701a      	strb	r2, [r3, #0]
      break;
 80049ea:	e00b      	b.n	8004a04 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_12_GAUSS:
      *val = LIS3MDL_12_GAUSS;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2202      	movs	r2, #2
 80049f0:	701a      	strb	r2, [r3, #0]
      break;
 80049f2:	e007      	b.n	8004a04 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_16_GAUSS:
      *val = LIS3MDL_16_GAUSS;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2203      	movs	r2, #3
 80049f8:	701a      	strb	r2, [r3, #0]
      break;
 80049fa:	e003      	b.n	8004a04 <lis3mdl_full_scale_get+0x64>
    default:
      *val = LIS3MDL_4_GAUSS;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
      break;
 8004a02:	bf00      	nop
  }

  return ret;
 8004a04:	68fb      	ldr	r3, [r7, #12]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop

08004a10 <lis3mdl_operating_mode_set>:
  * @param  val      change the values of md in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx, lis3mdl_md_t val)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 8004a1c:	f107 0208 	add.w	r2, r7, #8
 8004a20:	2301      	movs	r3, #1
 8004a22:	2122      	movs	r1, #34	; 0x22
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fdfb 	bl	8004620 <lis3mdl_read_reg>
 8004a2a:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10f      	bne.n	8004a52 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	7a3b      	ldrb	r3, [r7, #8]
 8004a3c:	f362 0301 	bfi	r3, r2, #0, #2
 8004a40:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 8004a42:	f107 0208 	add.w	r2, r7, #8
 8004a46:	2301      	movs	r3, #1
 8004a48:	2122      	movs	r1, #34	; 0x22
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff fe00 	bl	8004650 <lis3mdl_write_reg>
 8004a50:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a52:	68fb      	ldr	r3, [r7, #12]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 8004a68:	f107 0208 	add.w	r2, r7, #8
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	2124      	movs	r1, #36	; 0x24
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fdd5 	bl	8004620 <lis3mdl_read_reg>
 8004a76:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10f      	bne.n	8004a9e <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	7a3b      	ldrb	r3, [r7, #8]
 8004a88:	f362 1386 	bfi	r3, r2, #6, #1
 8004a8c:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 8004a8e:	f107 0208 	add.w	r2, r7, #8
 8004a92:	2301      	movs	r3, #1
 8004a94:	2124      	movs	r1, #36	; 0x24
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff fdda 	bl	8004650 <lis3mdl_write_reg>
 8004a9c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t*) buff, 6);
 8004ab2:	f107 020c 	add.w	r2, r7, #12
 8004ab6:	2306      	movs	r3, #6
 8004ab8:	2128      	movs	r1, #40	; 0x28
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fdb0 	bl	8004620 <lis3mdl_read_reg>
 8004ac0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004ac2:	7b7b      	ldrb	r3, [r7, #13]
 8004ac4:	b21a      	sxth	r2, r3
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	7b3b      	ldrb	r3, [r7, #12]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	4413      	add	r3, r2
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	b21a      	sxth	r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004ae4:	7bfa      	ldrb	r2, [r7, #15]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	3302      	adds	r3, #2
 8004aea:	b212      	sxth	r2, r2
 8004aec:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	3302      	adds	r3, #2
 8004af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	7bbb      	ldrb	r3, [r7, #14]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	3302      	adds	r3, #2
 8004b08:	b212      	sxth	r2, r2
 8004b0a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004b0c:	7c7a      	ldrb	r2, [r7, #17]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	3304      	adds	r3, #4
 8004b12:	b212      	sxth	r2, r2
 8004b14:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	7c3b      	ldrb	r3, [r7, #16]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	b212      	sxth	r2, r2
 8004b32:	801a      	strh	r2, [r3, #0]

  return ret;
 8004b34:	697b      	ldr	r3, [r7, #20]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  int32_t ret;  
  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t*) buff, 1);
 8004b48:	2301      	movs	r3, #1
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	210f      	movs	r1, #15
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff fd66 	bl	8004620 <lis3mdl_read_reg>
 8004b54:	60f8      	str	r0, [r7, #12]
  return ret;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 f87b 	bl	8004c68 <LPS22HB_Init>
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	4603      	mov	r3, r0
 8004b82:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004b84:	2300      	movs	r3, #0
 8004b86:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004b88:	f7fd ffcc 	bl	8002b24 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	210f      	movs	r1, #15
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fd ffea 	bl	8002b6c <SENSOR_IO_Read>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8004ba8:	b590      	push	{r4, r7, lr}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	74fb      	strb	r3, [r7, #19]
 8004bba:	e013      	b.n	8004be4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8004bbc:	88fb      	ldrh	r3, [r7, #6]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	3328      	adds	r3, #40	; 0x28
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	7cfc      	ldrb	r4, [r7, #19]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	f7fd ffce 	bl	8002b6c <SENSOR_IO_Read>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f107 0318 	add.w	r3, r7, #24
 8004bd8:	4423      	add	r3, r4
 8004bda:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8004bde:	7cfb      	ldrb	r3, [r7, #19]
 8004be0:	3301      	adds	r3, #1
 8004be2:	74fb      	strb	r3, [r7, #19]
 8004be4:	7cfb      	ldrb	r3, [r7, #19]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d9e8      	bls.n	8004bbc <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8004bea:	2300      	movs	r3, #0
 8004bec:	74fb      	strb	r3, [r7, #19]
 8004bee:	e010      	b.n	8004c12 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	f107 0218 	add.w	r2, r7, #24
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	74fb      	strb	r3, [r7, #19]
 8004c12:	7cfb      	ldrb	r3, [r7, #19]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d9eb      	bls.n	8004bf0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c28:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2264      	movs	r2, #100	; 0x64
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	da01      	bge.n	8004c3e <LPS22HB_P_ReadPressure+0x96>
 8004c3a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004c3e:	131b      	asrs	r3, r3, #12
 8004c40:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	ee07 3a90 	vmov	s15, r3
 8004c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c4c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004c64 <LPS22HB_P_ReadPressure+0xbc>
 8004c50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c54:	eef0 7a66 	vmov.f32	s15, s13
}
 8004c58:	eeb0 0a67 	vmov.f32	s0, s15
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd90      	pop	{r4, r7, pc}
 8004c62:	bf00      	nop
 8004c64:	42c80000 	.word	0x42c80000

08004c68 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	211a      	movs	r1, #26
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fd ff77 	bl	8002b6c <SENSOR_IO_Read>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	7bfa      	ldrb	r2, [r7, #15]
 8004c98:	211a      	movs	r1, #26
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fd ff4c 	bl	8002b38 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8004ca0:	88fb      	ldrh	r3, [r7, #6]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2110      	movs	r1, #16
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd ff60 	bl	8002b6c <SENSOR_IO_Read>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004cbe:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	f023 0302 	bic.w	r3, r3, #2
 8004cc6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	f043 0302 	orr.w	r3, r3, #2
 8004cce:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	7bfa      	ldrb	r2, [r7, #15]
 8004cd6:	2110      	movs	r1, #16
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fd ff2d 	bl	8002b38 <SENSOR_IO_Write>
}  
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d103      	bne.n	8004d04 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	e04d      	b.n	8004da0 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	7b1a      	ldrb	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	699a      	ldr	r2, [r3, #24]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <LSM6DSL_RegisterBusIO+0xc4>)
 8004d40:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <LSM6DSL_RegisterBusIO+0xc8>)
 8004d46:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8004d56:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e020      	b.n	8004da0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4798      	blx	r3
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e016      	b.n	8004da0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d112      	bne.n	8004da0 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10d      	bne.n	8004da0 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004d84:	230c      	movs	r3, #12
 8004d86:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8004d88:	7afb      	ldrb	r3, [r7, #11]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2112      	movs	r1, #18
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fd2d 	bl	80057ee <LSM6DSL_Write_Reg>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8004d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004da0:	68fb      	ldr	r3, [r7, #12]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	08005c5d 	.word	0x08005c5d
 8004db0:	08005c93 	.word	0x08005c93

08004db4 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	331c      	adds	r3, #28
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 f9e5 	bl	8006192 <lsm6dsl_auto_increment_set>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	e054      	b.n	8004e7e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	331c      	adds	r3, #28
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 f980 	bl	80060e0 <lsm6dsl_block_data_update_set>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8004de6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dea:	e048      	b.n	8004e7e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	331c      	adds	r3, #28
 8004df0:	2100      	movs	r1, #0
 8004df2:	4618      	mov	r0, r3
 8004df4:	f001 f9f3 	bl	80061de <lsm6dsl_fifo_mode_set>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004e02:	e03c      	b.n	8004e7e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2204      	movs	r2, #4
 8004e08:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	331c      	adds	r3, #28
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 ffe6 	bl	8005de4 <lsm6dsl_xl_data_rate_set>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e22:	e02c      	b.n	8004e7e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	331c      	adds	r3, #28
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 ff7c 	bl	8005d28 <lsm6dsl_xl_full_scale_set>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8004e36:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3a:	e020      	b.n	8004e7e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	331c      	adds	r3, #28
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f001 f8c0 	bl	8005fd0 <lsm6dsl_gy_data_rate_set>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8004e56:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5a:	e010      	b.n	8004e7e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	331c      	adds	r3, #28
 8004e60:	2106      	movs	r1, #6
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 f84c 	bl	8005f00 <lsm6dsl_gy_full_scale_set>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e72:	e004      	b.n	8004e7e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f888 	bl	8004fa4 <LSM6DSL_ACC_Disable>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9e:	e015      	b.n	8004ecc <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fa9a 	bl	80053da <LSM6DSL_GYRO_Disable>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb0:	e00c      	b.n	8004ecc <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	331c      	adds	r3, #28
 8004ee2:	6839      	ldr	r1, [r7, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f001 f943 	bl	8006170 <lsm6dsl_device_id_get>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef4:	e000      	b.n	8004ef8 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2201      	movs	r2, #1
 8004f14:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004f28:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2200      	movs	r2, #0
 8004f34:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	4a07      	ldr	r2, [pc, #28]	; (8004f58 <LSM6DSL_GetCapabilities+0x58>)
 8004f3a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	4a06      	ldr	r2, [pc, #24]	; (8004f58 <LSM6DSL_GetCapabilities+0x58>)
 8004f40:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	45d02000 	.word	0x45d02000

08004f5c <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e014      	b.n	8004f9c <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f103 021c 	add.w	r2, r3, #28
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f000 ff2f 	bl	8005de4 <lsm6dsl_xl_data_rate_set>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f90:	e004      	b.n	8004f9c <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e01f      	b.n	8004ffa <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f103 021c 	add.w	r2, r3, #28
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	332b      	adds	r3, #43	; 0x2b
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f000 ff32 	bl	8005e30 <lsm6dsl_xl_data_rate_get>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd6:	e010      	b.n	8004ffa <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	331c      	adds	r3, #28
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 ff00 	bl	8005de4 <lsm6dsl_xl_data_rate_set>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295
 8004fee:	e004      	b.n	8004ffa <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	331c      	adds	r3, #28
 8005016:	f107 020b 	add.w	r2, r7, #11
 800501a:	4611      	mov	r1, r2
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fea9 	bl	8005d74 <lsm6dsl_xl_full_scale_get>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8005028:	f04f 33ff 	mov.w	r3, #4294967295
 800502c:	e023      	b.n	8005076 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	2b03      	cmp	r3, #3
 8005032:	d81b      	bhi.n	800506c <LSM6DSL_ACC_GetSensitivity+0x68>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	0800504d 	.word	0x0800504d
 8005040:	08005065 	.word	0x08005065
 8005044:	08005055 	.word	0x08005055
 8005048:	0800505d 	.word	0x0800505d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	4a0c      	ldr	r2, [pc, #48]	; (8005080 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8005050:	601a      	str	r2, [r3, #0]
      break;
 8005052:	e00f      	b.n	8005074 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	4a0b      	ldr	r2, [pc, #44]	; (8005084 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8005058:	601a      	str	r2, [r3, #0]
      break;
 800505a:	e00b      	b.n	8005074 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8005060:	601a      	str	r2, [r3, #0]
      break;
 8005062:	e007      	b.n	8005074 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	4a09      	ldr	r2, [pc, #36]	; (800508c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8005068:	601a      	str	r2, [r3, #0]
      break;
 800506a:	e003      	b.n	8005074 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800506c:	f04f 33ff 	mov.w	r3, #4294967295
 8005070:	60fb      	str	r3, [r7, #12]
      break;
 8005072:	bf00      	nop
  }

  return ret;
 8005074:	68fb      	ldr	r3, [r7, #12]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	3d79db23 	.word	0x3d79db23
 8005084:	3df9db23 	.word	0x3df9db23
 8005088:	3e79db23 	.word	0x3e79db23
 800508c:	3ef9db23 	.word	0x3ef9db23

08005090 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	331c      	adds	r3, #28
 80050a2:	f107 020b 	add.w	r2, r7, #11
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fec1 	bl	8005e30 <lsm6dsl_xl_data_rate_get>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80050b4:	f04f 33ff 	mov.w	r3, #4294967295
 80050b8:	e054      	b.n	8005164 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80050ba:	7afb      	ldrb	r3, [r7, #11]
 80050bc:	2b0b      	cmp	r3, #11
 80050be:	d84c      	bhi.n	800515a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80050c0:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050f9 	.word	0x080050f9
 80050cc:	0800510b 	.word	0x0800510b
 80050d0:	08005113 	.word	0x08005113
 80050d4:	0800511b 	.word	0x0800511b
 80050d8:	08005123 	.word	0x08005123
 80050dc:	0800512b 	.word	0x0800512b
 80050e0:	08005133 	.word	0x08005133
 80050e4:	0800513b 	.word	0x0800513b
 80050e8:	08005143 	.word	0x08005143
 80050ec:	0800514b 	.word	0x0800514b
 80050f0:	08005153 	.word	0x08005153
 80050f4:	08005103 	.word	0x08005103
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
      break;
 8005100:	e02f      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	4a19      	ldr	r2, [pc, #100]	; (800516c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8005106:	601a      	str	r2, [r3, #0]
      break;
 8005108:	e02b      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	4a18      	ldr	r2, [pc, #96]	; (8005170 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 800510e:	601a      	str	r2, [r3, #0]
      break;
 8005110:	e027      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	4a17      	ldr	r2, [pc, #92]	; (8005174 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8005116:	601a      	str	r2, [r3, #0]
      break;
 8005118:	e023      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	4a16      	ldr	r2, [pc, #88]	; (8005178 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800511e:	601a      	str	r2, [r3, #0]
      break;
 8005120:	e01f      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	4a15      	ldr	r2, [pc, #84]	; (800517c <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8005126:	601a      	str	r2, [r3, #0]
      break;
 8005128:	e01b      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800512e:	601a      	str	r2, [r3, #0]
      break;
 8005130:	e017      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	4a13      	ldr	r2, [pc, #76]	; (8005184 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8005136:	601a      	str	r2, [r3, #0]
      break;
 8005138:	e013      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	4a12      	ldr	r2, [pc, #72]	; (8005188 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800513e:	601a      	str	r2, [r3, #0]
      break;
 8005140:	e00f      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	4a11      	ldr	r2, [pc, #68]	; (800518c <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8005146:	601a      	str	r2, [r3, #0]
      break;
 8005148:	e00b      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	4a10      	ldr	r2, [pc, #64]	; (8005190 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800514e:	601a      	str	r2, [r3, #0]
      break;
 8005150:	e007      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	4a0f      	ldr	r2, [pc, #60]	; (8005194 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8005156:	601a      	str	r2, [r3, #0]
      break;
 8005158:	e003      	b.n	8005162 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800515a:	f04f 33ff 	mov.w	r3, #4294967295
 800515e:	60fb      	str	r3, [r7, #12]
      break;
 8005160:	bf00      	nop
  }

  return ret;
 8005162:	68fb      	ldr	r3, [r7, #12]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	3fcccccd 	.word	0x3fcccccd
 8005170:	41480000 	.word	0x41480000
 8005174:	41d00000 	.word	0x41d00000
 8005178:	42500000 	.word	0x42500000
 800517c:	42d00000 	.word	0x42d00000
 8005180:	43500000 	.word	0x43500000
 8005184:	43d00000 	.word	0x43d00000
 8005188:	44504000 	.word	0x44504000
 800518c:	44cf8000 	.word	0x44cf8000
 8005190:	45502000 	.word	0x45502000
 8005194:	45d02000 	.word	0x45d02000

08005198 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d106      	bne.n	80051bc <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80051ae:	ed97 0a00 	vldr	s0, [r7]
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fb36 	bl	8005824 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80051b8:	4603      	mov	r3, r0
 80051ba:	e005      	b.n	80051c8 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80051bc:	ed97 0a00 	vldr	s0, [r7]
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fbbb 	bl	800593c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80051c6:	4603      	mov	r3, r0
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	331c      	adds	r3, #28
 80051e2:	f107 020b 	add.w	r2, r7, #11
 80051e6:	4611      	mov	r1, r2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fdc3 	bl	8005d74 <lsm6dsl_xl_full_scale_get>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80051f4:	f04f 33ff 	mov.w	r3, #4294967295
 80051f8:	e023      	b.n	8005242 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80051fa:	7afb      	ldrb	r3, [r7, #11]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d81b      	bhi.n	8005238 <LSM6DSL_ACC_GetFullScale+0x68>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <LSM6DSL_ACC_GetFullScale+0x38>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	08005219 	.word	0x08005219
 800520c:	08005231 	.word	0x08005231
 8005210:	08005221 	.word	0x08005221
 8005214:	08005229 	.word	0x08005229
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2202      	movs	r2, #2
 800521c:	601a      	str	r2, [r3, #0]
      break;
 800521e:	e00f      	b.n	8005240 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2204      	movs	r2, #4
 8005224:	601a      	str	r2, [r3, #0]
      break;
 8005226:	e00b      	b.n	8005240 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2208      	movs	r2, #8
 800522c:	601a      	str	r2, [r3, #0]
      break;
 800522e:	e007      	b.n	8005240 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2210      	movs	r2, #16
 8005234:	601a      	str	r2, [r3, #0]
      break;
 8005236:	e003      	b.n	8005240 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8005238:	f04f 33ff 	mov.w	r3, #4294967295
 800523c:	60fb      	str	r3, [r7, #12]
      break;
 800523e:	bf00      	nop
  }

  return ret;
 8005240:	68fb      	ldr	r3, [r7, #12]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop

0800524c <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b02      	cmp	r3, #2
 800525a:	dd0b      	ble.n	8005274 <LSM6DSL_ACC_SetFullScale+0x28>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b04      	cmp	r3, #4
 8005260:	dd06      	ble.n	8005270 <LSM6DSL_ACC_SetFullScale+0x24>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b08      	cmp	r3, #8
 8005266:	dc01      	bgt.n	800526c <LSM6DSL_ACC_SetFullScale+0x20>
 8005268:	2303      	movs	r3, #3
 800526a:	e004      	b.n	8005276 <LSM6DSL_ACC_SetFullScale+0x2a>
 800526c:	2301      	movs	r3, #1
 800526e:	e002      	b.n	8005276 <LSM6DSL_ACC_SetFullScale+0x2a>
 8005270:	2302      	movs	r3, #2
 8005272:	e000      	b.n	8005276 <LSM6DSL_ACC_SetFullScale+0x2a>
 8005274:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8005276:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	331c      	adds	r3, #28
 800527c:	7bfa      	ldrb	r2, [r7, #15]
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fd51 	bl	8005d28 <lsm6dsl_xl_full_scale_set>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 800528c:	f04f 33ff 	mov.w	r3, #4294967295
 8005290:	e000      	b.n	8005294 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	331c      	adds	r3, #28
 80052aa:	f107 0208 	add.w	r2, r7, #8
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 ff4c 	bl	800614e <lsm6dsl_acceleration_raw_get>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80052bc:	f04f 33ff 	mov.w	r3, #4294967295
 80052c0:	e00c      	b.n	80052dc <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80052c2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80052ca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80052d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	331c      	adds	r3, #28
 80052f8:	f107 0210 	add.w	r2, r7, #16
 80052fc:	4611      	mov	r1, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 ff25 	bl	800614e <lsm6dsl_acceleration_raw_get>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800530a:	f04f 33ff 	mov.w	r3, #4294967295
 800530e:	e03c      	b.n	800538a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8005310:	f107 030c 	add.w	r3, r7, #12
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff fe74 	bl	8005004 <LSM6DSL_ACC_GetSensitivity>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8005322:	f04f 33ff 	mov.w	r3, #4294967295
 8005326:	e030      	b.n	800538a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005328:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800532c:	ee07 3a90 	vmov	s15, r3
 8005330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005334:	edd7 7a03 	vldr	s15, [r7, #12]
 8005338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005340:	ee17 2a90 	vmov	r2, s15
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005348:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005354:	edd7 7a03 	vldr	s15, [r7, #12]
 8005358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005360:	ee17 2a90 	vmov	r2, s15
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005368:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005374:	edd7 7a03 	vldr	s15, [r7, #12]
 8005378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005380:	ee17 2a90 	vmov	r2, s15
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e014      	b.n	80053d2 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f103 021c 	add.w	r2, r3, #28
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f000 fe0a 	bl	8005fd0 <lsm6dsl_gy_data_rate_set>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80053c2:	f04f 33ff 	mov.w	r3, #4294967295
 80053c6:	e004      	b.n	80053d2 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e01f      	b.n	8005430 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f103 021c 	add.w	r2, r3, #28
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	332c      	adds	r3, #44	; 0x2c
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f000 fe0d 	bl	800601c <lsm6dsl_gy_data_rate_get>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8005408:	f04f 33ff 	mov.w	r3, #4294967295
 800540c:	e010      	b.n	8005430 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	331c      	adds	r3, #28
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fddb 	bl	8005fd0 <lsm6dsl_gy_data_rate_set>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8005420:	f04f 33ff 	mov.w	r3, #4294967295
 8005424:	e004      	b.n	8005430 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	331c      	adds	r3, #28
 800544a:	f107 020b 	add.w	r2, r7, #11
 800544e:	4611      	mov	r1, r2
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fd7b 	bl	8005f4c <lsm6dsl_gy_full_scale_get>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800545c:	f04f 33ff 	mov.w	r3, #4294967295
 8005460:	e02d      	b.n	80054be <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005462:	7afb      	ldrb	r3, [r7, #11]
 8005464:	2b06      	cmp	r3, #6
 8005466:	d825      	bhi.n	80054b4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8005468:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	08005495 	.word	0x08005495
 8005474:	0800548d 	.word	0x0800548d
 8005478:	0800549d 	.word	0x0800549d
 800547c:	080054b5 	.word	0x080054b5
 8005480:	080054a5 	.word	0x080054a5
 8005484:	080054b5 	.word	0x080054b5
 8005488:	080054ad 	.word	0x080054ad
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4a0e      	ldr	r2, [pc, #56]	; (80054c8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8005490:	601a      	str	r2, [r3, #0]
      break;
 8005492:	e013      	b.n	80054bc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4a0d      	ldr	r2, [pc, #52]	; (80054cc <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8005498:	601a      	str	r2, [r3, #0]
      break;
 800549a:	e00f      	b.n	80054bc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	4a0c      	ldr	r2, [pc, #48]	; (80054d0 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80054a0:	601a      	str	r2, [r3, #0]
      break;
 80054a2:	e00b      	b.n	80054bc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	4a0b      	ldr	r2, [pc, #44]	; (80054d4 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80054a8:	601a      	str	r2, [r3, #0]
      break;
 80054aa:	e007      	b.n	80054bc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80054b0:	601a      	str	r2, [r3, #0]
      break;
 80054b2:	e003      	b.n	80054bc <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80054b4:	f04f 33ff 	mov.w	r3, #4294967295
 80054b8:	60fb      	str	r3, [r7, #12]
      break;
 80054ba:	bf00      	nop
  }

  return ret;
 80054bc:	68fb      	ldr	r3, [r7, #12]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	408c0000 	.word	0x408c0000
 80054cc:	410c0000 	.word	0x410c0000
 80054d0:	418c0000 	.word	0x418c0000
 80054d4:	420c0000 	.word	0x420c0000
 80054d8:	428c0000 	.word	0x428c0000

080054dc <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	331c      	adds	r3, #28
 80054ee:	f107 020b 	add.w	r2, r7, #11
 80054f2:	4611      	mov	r1, r2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fd91 	bl	800601c <lsm6dsl_gy_data_rate_get>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8005500:	f04f 33ff 	mov.w	r3, #4294967295
 8005504:	e04e      	b.n	80055a4 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8005506:	7afb      	ldrb	r3, [r7, #11]
 8005508:	2b0a      	cmp	r3, #10
 800550a:	d846      	bhi.n	800559a <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800550c:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005512:	bf00      	nop
 8005514:	08005541 	.word	0x08005541
 8005518:	0800554b 	.word	0x0800554b
 800551c:	08005553 	.word	0x08005553
 8005520:	0800555b 	.word	0x0800555b
 8005524:	08005563 	.word	0x08005563
 8005528:	0800556b 	.word	0x0800556b
 800552c:	08005573 	.word	0x08005573
 8005530:	0800557b 	.word	0x0800557b
 8005534:	08005583 	.word	0x08005583
 8005538:	0800558b 	.word	0x0800558b
 800553c:	08005593 	.word	0x08005593
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
      break;
 8005548:	e02b      	b.n	80055a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	4a17      	ldr	r2, [pc, #92]	; (80055ac <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800554e:	601a      	str	r2, [r3, #0]
      break;
 8005550:	e027      	b.n	80055a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	4a16      	ldr	r2, [pc, #88]	; (80055b0 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8005556:	601a      	str	r2, [r3, #0]
      break;
 8005558:	e023      	b.n	80055a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	4a15      	ldr	r2, [pc, #84]	; (80055b4 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800555e:	601a      	str	r2, [r3, #0]
      break;
 8005560:	e01f      	b.n	80055a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	4a14      	ldr	r2, [pc, #80]	; (80055b8 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8005566:	601a      	str	r2, [r3, #0]
      break;
 8005568:	e01b      	b.n	80055a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	4a13      	ldr	r2, [pc, #76]	; (80055bc <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800556e:	601a      	str	r2, [r3, #0]
      break;
 8005570:	e017      	b.n	80055a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	4a12      	ldr	r2, [pc, #72]	; (80055c0 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8005576:	601a      	str	r2, [r3, #0]
      break;
 8005578:	e013      	b.n	80055a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	4a11      	ldr	r2, [pc, #68]	; (80055c4 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 800557e:	601a      	str	r2, [r3, #0]
      break;
 8005580:	e00f      	b.n	80055a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8005586:	601a      	str	r2, [r3, #0]
      break;
 8005588:	e00b      	b.n	80055a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	4a0f      	ldr	r2, [pc, #60]	; (80055cc <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800558e:	601a      	str	r2, [r3, #0]
      break;
 8005590:	e007      	b.n	80055a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	4a0e      	ldr	r2, [pc, #56]	; (80055d0 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8005596:	601a      	str	r2, [r3, #0]
      break;
 8005598:	e003      	b.n	80055a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	60fb      	str	r3, [r7, #12]
      break;
 80055a0:	bf00      	nop
  }

  return ret;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	41480000 	.word	0x41480000
 80055b0:	41d00000 	.word	0x41d00000
 80055b4:	42500000 	.word	0x42500000
 80055b8:	42d00000 	.word	0x42d00000
 80055bc:	43500000 	.word	0x43500000
 80055c0:	43d00000 	.word	0x43d00000
 80055c4:	44504000 	.word	0x44504000
 80055c8:	44cf8000 	.word	0x44cf8000
 80055cc:	45502000 	.word	0x45502000
 80055d0:	45d02000 	.word	0x45d02000

080055d4 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d106      	bne.n	80055f8 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80055ea:	ed97 0a00 	vldr	s0, [r7]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa26 	bl	8005a40 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 80055f4:	4603      	mov	r3, r0
 80055f6:	e005      	b.n	8005604 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80055f8:	ed97 0a00 	vldr	s0, [r7]
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 faab 	bl	8005b58 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8005602:	4603      	mov	r3, r0
  }
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	331c      	adds	r3, #28
 800561e:	f107 020b 	add.w	r2, r7, #11
 8005622:	4611      	mov	r1, r2
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fc91 	bl	8005f4c <lsm6dsl_gy_full_scale_get>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8005630:	f04f 33ff 	mov.w	r3, #4294967295
 8005634:	e030      	b.n	8005698 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8005636:	7afb      	ldrb	r3, [r7, #11]
 8005638:	2b06      	cmp	r3, #6
 800563a:	d828      	bhi.n	800568e <LSM6DSL_GYRO_GetFullScale+0x82>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005669 	.word	0x08005669
 8005648:	08005661 	.word	0x08005661
 800564c:	08005671 	.word	0x08005671
 8005650:	0800568f 	.word	0x0800568f
 8005654:	0800567b 	.word	0x0800567b
 8005658:	0800568f 	.word	0x0800568f
 800565c:	08005685 	.word	0x08005685
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	227d      	movs	r2, #125	; 0x7d
 8005664:	601a      	str	r2, [r3, #0]
      break;
 8005666:	e016      	b.n	8005696 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	22fa      	movs	r2, #250	; 0xfa
 800566c:	601a      	str	r2, [r3, #0]
      break;
 800566e:	e012      	b.n	8005696 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005676:	601a      	str	r2, [r3, #0]
      break;
 8005678:	e00d      	b.n	8005696 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005680:	601a      	str	r2, [r3, #0]
      break;
 8005682:	e008      	b.n	8005696 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800568a:	601a      	str	r2, [r3, #0]
      break;
 800568c:	e003      	b.n	8005696 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800568e:	f04f 33ff 	mov.w	r3, #4294967295
 8005692:	60fb      	str	r3, [r7, #12]
      break;
 8005694:	bf00      	nop
  }

  return ret;
 8005696:	68fb      	ldr	r3, [r7, #12]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b7d      	cmp	r3, #125	; 0x7d
 80056ae:	dd12      	ble.n	80056d6 <LSM6DSL_GYRO_SetFullScale+0x36>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2bfa      	cmp	r3, #250	; 0xfa
 80056b4:	dd0d      	ble.n	80056d2 <LSM6DSL_GYRO_SetFullScale+0x32>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80056bc:	dd07      	ble.n	80056ce <LSM6DSL_GYRO_SetFullScale+0x2e>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056c4:	dc01      	bgt.n	80056ca <LSM6DSL_GYRO_SetFullScale+0x2a>
 80056c6:	2304      	movs	r3, #4
 80056c8:	e006      	b.n	80056d8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80056ca:	2306      	movs	r3, #6
 80056cc:	e004      	b.n	80056d8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e002      	b.n	80056d8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80056d2:	2300      	movs	r3, #0
 80056d4:	e000      	b.n	80056d8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80056d6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80056d8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	331c      	adds	r3, #28
 80056de:	7bfa      	ldrb	r2, [r7, #15]
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fc0c 	bl	8005f00 <lsm6dsl_gy_full_scale_set>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80056ee:	f04f 33ff 	mov.w	r3, #4294967295
 80056f2:	e000      	b.n	80056f6 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	331c      	adds	r3, #28
 800570c:	f107 0208 	add.w	r2, r7, #8
 8005710:	4611      	mov	r1, r2
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fd0a 	bl	800612c <lsm6dsl_angular_rate_raw_get>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800571e:	f04f 33ff 	mov.w	r3, #4294967295
 8005722:	e00c      	b.n	800573e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005724:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800572c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005734:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	331c      	adds	r3, #28
 8005754:	f107 0210 	add.w	r2, r7, #16
 8005758:	4611      	mov	r1, r2
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fce6 	bl	800612c <lsm6dsl_angular_rate_raw_get>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8005766:	f04f 33ff 	mov.w	r3, #4294967295
 800576a:	e03c      	b.n	80057e6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800576c:	f107 030c 	add.w	r3, r7, #12
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff fe60 	bl	8005438 <LSM6DSL_GYRO_GetSensitivity>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 800577e:	f04f 33ff 	mov.w	r3, #4294967295
 8005782:	e030      	b.n	80057e6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005784:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005790:	edd7 7a03 	vldr	s15, [r7, #12]
 8005794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800579c:	ee17 2a90 	vmov	r2, s15
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80057a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057a8:	ee07 3a90 	vmov	s15, r3
 80057ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80057b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057bc:	ee17 2a90 	vmov	r2, s15
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80057c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80057d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057dc:	ee17 2a90 	vmov	r2, s15
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	460b      	mov	r3, r1
 80057f8:	70fb      	strb	r3, [r7, #3]
 80057fa:	4613      	mov	r3, r2
 80057fc:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f103 001c 	add.w	r0, r3, #28
 8005804:	1cba      	adds	r2, r7, #2
 8005806:	78f9      	ldrb	r1, [r7, #3]
 8005808:	2301      	movs	r3, #1
 800580a:	f000 fa75 	bl	8005cf8 <lsm6dsl_write_reg>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8005814:	f04f 33ff 	mov.w	r3, #4294967295
 8005818:	e000      	b.n	800581c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005830:	edd7 7a00 	vldr	s15, [r7]
 8005834:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800583c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005840:	d801      	bhi.n	8005846 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005842:	2301      	movs	r3, #1
 8005844:	e058      	b.n	80058f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005846:	edd7 7a00 	vldr	s15, [r7]
 800584a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800584e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005856:	d801      	bhi.n	800585c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005858:	2302      	movs	r3, #2
 800585a:	e04d      	b.n	80058f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800585c:	edd7 7a00 	vldr	s15, [r7]
 8005860:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005920 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8005864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586c:	d801      	bhi.n	8005872 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800586e:	2303      	movs	r3, #3
 8005870:	e042      	b.n	80058f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005872:	edd7 7a00 	vldr	s15, [r7]
 8005876:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005924 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800587a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800587e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005882:	d801      	bhi.n	8005888 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005884:	2304      	movs	r3, #4
 8005886:	e037      	b.n	80058f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005888:	edd7 7a00 	vldr	s15, [r7]
 800588c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005928 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005898:	d801      	bhi.n	800589e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800589a:	2305      	movs	r3, #5
 800589c:	e02c      	b.n	80058f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800589e:	edd7 7a00 	vldr	s15, [r7]
 80058a2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800592c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80058a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ae:	d801      	bhi.n	80058b4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80058b0:	2306      	movs	r3, #6
 80058b2:	e021      	b.n	80058f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80058b4:	edd7 7a00 	vldr	s15, [r7]
 80058b8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005930 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80058bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c4:	d801      	bhi.n	80058ca <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80058c6:	2307      	movs	r3, #7
 80058c8:	e016      	b.n	80058f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80058ca:	edd7 7a00 	vldr	s15, [r7]
 80058ce:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005934 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80058d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058da:	d801      	bhi.n	80058e0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80058dc:	2308      	movs	r3, #8
 80058de:	e00b      	b.n	80058f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80058e0:	edd7 7a00 	vldr	s15, [r7]
 80058e4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005938 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80058e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f0:	d801      	bhi.n	80058f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80058f2:	2309      	movs	r3, #9
 80058f4:	e000      	b.n	80058f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80058f6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80058f8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	331c      	adds	r3, #28
 80058fe:	7bfa      	ldrb	r2, [r7, #15]
 8005900:	4611      	mov	r1, r2
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fa6e 	bl	8005de4 <lsm6dsl_xl_data_rate_set>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800590e:	f04f 33ff 	mov.w	r3, #4294967295
 8005912:	e000      	b.n	8005916 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	42500000 	.word	0x42500000
 8005924:	42d00000 	.word	0x42d00000
 8005928:	43500000 	.word	0x43500000
 800592c:	43d00000 	.word	0x43d00000
 8005930:	44504000 	.word	0x44504000
 8005934:	44cf8000 	.word	0x44cf8000
 8005938:	45502000 	.word	0x45502000

0800593c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005948:	edd7 7a00 	vldr	s15, [r7]
 800594c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005958:	d801      	bhi.n	800595e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800595a:	2301      	movs	r3, #1
 800595c:	e058      	b.n	8005a10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800595e:	edd7 7a00 	vldr	s15, [r7]
 8005962:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800596a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800596e:	d801      	bhi.n	8005974 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005970:	2302      	movs	r3, #2
 8005972:	e04d      	b.n	8005a10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005974:	edd7 7a00 	vldr	s15, [r7]
 8005978:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005a24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800597c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005984:	d801      	bhi.n	800598a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005986:	2303      	movs	r3, #3
 8005988:	e042      	b.n	8005a10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800598a:	edd7 7a00 	vldr	s15, [r7]
 800598e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005a28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599a:	d801      	bhi.n	80059a0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800599c:	2304      	movs	r3, #4
 800599e:	e037      	b.n	8005a10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80059a0:	edd7 7a00 	vldr	s15, [r7]
 80059a4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005a2c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80059a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b0:	d801      	bhi.n	80059b6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80059b2:	2305      	movs	r3, #5
 80059b4:	e02c      	b.n	8005a10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80059b6:	edd7 7a00 	vldr	s15, [r7]
 80059ba:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005a30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80059be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c6:	d801      	bhi.n	80059cc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80059c8:	2306      	movs	r3, #6
 80059ca:	e021      	b.n	8005a10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80059cc:	edd7 7a00 	vldr	s15, [r7]
 80059d0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005a34 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80059d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059dc:	d801      	bhi.n	80059e2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80059de:	2307      	movs	r3, #7
 80059e0:	e016      	b.n	8005a10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80059e2:	edd7 7a00 	vldr	s15, [r7]
 80059e6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005a38 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80059ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f2:	d801      	bhi.n	80059f8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80059f4:	2308      	movs	r3, #8
 80059f6:	e00b      	b.n	8005a10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80059f8:	edd7 7a00 	vldr	s15, [r7]
 80059fc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005a3c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a08:	d801      	bhi.n	8005a0e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005a0a:	2309      	movs	r3, #9
 8005a0c:	e000      	b.n	8005a10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005a0e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	42500000 	.word	0x42500000
 8005a28:	42d00000 	.word	0x42d00000
 8005a2c:	43500000 	.word	0x43500000
 8005a30:	43d00000 	.word	0x43d00000
 8005a34:	44504000 	.word	0x44504000
 8005a38:	44cf8000 	.word	0x44cf8000
 8005a3c:	45502000 	.word	0x45502000

08005a40 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005a4c:	edd7 7a00 	vldr	s15, [r7]
 8005a50:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5c:	d801      	bhi.n	8005a62 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e058      	b.n	8005b14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005a62:	edd7 7a00 	vldr	s15, [r7]
 8005a66:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a72:	d801      	bhi.n	8005a78 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e04d      	b.n	8005b14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005a78:	edd7 7a00 	vldr	s15, [r7]
 8005a7c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005b3c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a88:	d801      	bhi.n	8005a8e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e042      	b.n	8005b14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005a8e:	edd7 7a00 	vldr	s15, [r7]
 8005a92:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005b40 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9e:	d801      	bhi.n	8005aa4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	e037      	b.n	8005b14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005aa4:	edd7 7a00 	vldr	s15, [r7]
 8005aa8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005b44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab4:	d801      	bhi.n	8005aba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005ab6:	2305      	movs	r3, #5
 8005ab8:	e02c      	b.n	8005b14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005aba:	edd7 7a00 	vldr	s15, [r7]
 8005abe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005b48 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aca:	d801      	bhi.n	8005ad0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005acc:	2306      	movs	r3, #6
 8005ace:	e021      	b.n	8005b14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005ad0:	edd7 7a00 	vldr	s15, [r7]
 8005ad4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005b4c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae0:	d801      	bhi.n	8005ae6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005ae2:	2307      	movs	r3, #7
 8005ae4:	e016      	b.n	8005b14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005ae6:	edd7 7a00 	vldr	s15, [r7]
 8005aea:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005b50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af6:	d801      	bhi.n	8005afc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005af8:	2308      	movs	r3, #8
 8005afa:	e00b      	b.n	8005b14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005afc:	edd7 7a00 	vldr	s15, [r7]
 8005b00:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005b54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0c:	d801      	bhi.n	8005b12 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005b0e:	2309      	movs	r3, #9
 8005b10:	e000      	b.n	8005b14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005b12:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005b14:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	331c      	adds	r3, #28
 8005b1a:	7bfa      	ldrb	r2, [r7, #15]
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fa56 	bl	8005fd0 <lsm6dsl_gy_data_rate_set>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8005b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2e:	e000      	b.n	8005b32 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	42500000 	.word	0x42500000
 8005b40:	42d00000 	.word	0x42d00000
 8005b44:	43500000 	.word	0x43500000
 8005b48:	43d00000 	.word	0x43d00000
 8005b4c:	44504000 	.word	0x44504000
 8005b50:	44cf8000 	.word	0x44cf8000
 8005b54:	45502000 	.word	0x45502000

08005b58 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005b64:	edd7 7a00 	vldr	s15, [r7]
 8005b68:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b74:	d801      	bhi.n	8005b7a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e058      	b.n	8005c2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005b7a:	edd7 7a00 	vldr	s15, [r7]
 8005b7e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8a:	d801      	bhi.n	8005b90 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e04d      	b.n	8005c2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005b90:	edd7 7a00 	vldr	s15, [r7]
 8005b94:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005c40 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba0:	d801      	bhi.n	8005ba6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e042      	b.n	8005c2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005ba6:	edd7 7a00 	vldr	s15, [r7]
 8005baa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005c44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb6:	d801      	bhi.n	8005bbc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	e037      	b.n	8005c2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005bbc:	edd7 7a00 	vldr	s15, [r7]
 8005bc0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005c48 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bcc:	d801      	bhi.n	8005bd2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005bce:	2305      	movs	r3, #5
 8005bd0:	e02c      	b.n	8005c2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005bd2:	edd7 7a00 	vldr	s15, [r7]
 8005bd6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005c4c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be2:	d801      	bhi.n	8005be8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005be4:	2306      	movs	r3, #6
 8005be6:	e021      	b.n	8005c2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005be8:	edd7 7a00 	vldr	s15, [r7]
 8005bec:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005c50 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf8:	d801      	bhi.n	8005bfe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005bfa:	2307      	movs	r3, #7
 8005bfc:	e016      	b.n	8005c2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005bfe:	edd7 7a00 	vldr	s15, [r7]
 8005c02:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005c54 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0e:	d801      	bhi.n	8005c14 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005c10:	2308      	movs	r3, #8
 8005c12:	e00b      	b.n	8005c2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005c14:	edd7 7a00 	vldr	s15, [r7]
 8005c18:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005c58 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c24:	d801      	bhi.n	8005c2a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005c26:	2309      	movs	r3, #9
 8005c28:	e000      	b.n	8005c2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005c2a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	42500000 	.word	0x42500000
 8005c44:	42d00000 	.word	0x42d00000
 8005c48:	43500000 	.word	0x43500000
 8005c4c:	43d00000 	.word	0x43d00000
 8005c50:	44504000 	.word	0x44504000
 8005c54:	44cf8000 	.word	0x44cf8000
 8005c58:	45502000 	.word	0x45502000

08005c5c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	607a      	str	r2, [r7, #4]
 8005c66:	461a      	mov	r2, r3
 8005c68:	460b      	mov	r3, r1
 8005c6a:	72fb      	strb	r3, [r7, #11]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	695c      	ldr	r4, [r3, #20]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	7b1b      	ldrb	r3, [r3, #12]
 8005c7c:	b298      	uxth	r0, r3
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	b299      	uxth	r1, r3
 8005c82:	893b      	ldrh	r3, [r7, #8]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	47a0      	blx	r4
 8005c88:	4603      	mov	r3, r0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd90      	pop	{r4, r7, pc}

08005c92 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005c92:	b590      	push	{r4, r7, lr}
 8005c94:	b087      	sub	sp, #28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	72fb      	strb	r3, [r7, #11]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	691c      	ldr	r4, [r3, #16]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	7b1b      	ldrb	r3, [r3, #12]
 8005cb2:	b298      	uxth	r0, r3
 8005cb4:	7afb      	ldrb	r3, [r7, #11]
 8005cb6:	b299      	uxth	r1, r3
 8005cb8:	893b      	ldrh	r3, [r7, #8]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	47a0      	blx	r4
 8005cbe:	4603      	mov	r3, r0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd90      	pop	{r4, r7, pc}

08005cc8 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	607a      	str	r2, [r7, #4]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	72fb      	strb	r3, [r7, #11]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685c      	ldr	r4, [r3, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6898      	ldr	r0, [r3, #8]
 8005ce4:	893b      	ldrh	r3, [r7, #8]
 8005ce6:	7af9      	ldrb	r1, [r7, #11]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	47a0      	blx	r4
 8005cec:	6178      	str	r0, [r7, #20]
  return ret;
 8005cee:	697b      	ldr	r3, [r7, #20]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd90      	pop	{r4, r7, pc}

08005cf8 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8005cf8:	b590      	push	{r4, r7, lr}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	461a      	mov	r2, r3
 8005d04:	460b      	mov	r3, r1
 8005d06:	72fb      	strb	r3, [r7, #11]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681c      	ldr	r4, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6898      	ldr	r0, [r3, #8]
 8005d14:	893b      	ldrh	r3, [r7, #8]
 8005d16:	7af9      	ldrb	r1, [r7, #11]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	47a0      	blx	r4
 8005d1c:	6178      	str	r0, [r7, #20]
  return ret;
 8005d1e:	697b      	ldr	r3, [r7, #20]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd90      	pop	{r4, r7, pc}

08005d28 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005d34:	f107 0208 	add.w	r2, r7, #8
 8005d38:	2301      	movs	r3, #1
 8005d3a:	2110      	movs	r1, #16
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff ffc3 	bl	8005cc8 <lsm6dsl_read_reg>
 8005d42:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10f      	bne.n	8005d6a <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	7a3b      	ldrb	r3, [r7, #8]
 8005d54:	f362 0383 	bfi	r3, r2, #2, #2
 8005d58:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005d5a:	f107 0208 	add.w	r2, r7, #8
 8005d5e:	2301      	movs	r3, #1
 8005d60:	2110      	movs	r1, #16
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff ffc8 	bl	8005cf8 <lsm6dsl_write_reg>
 8005d68:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005d7e:	f107 0208 	add.w	r2, r7, #8
 8005d82:	2301      	movs	r3, #1
 8005d84:	2110      	movs	r1, #16
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff ff9e 	bl	8005cc8 <lsm6dsl_read_reg>
 8005d8c:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8005d8e:	7a3b      	ldrb	r3, [r7, #8]
 8005d90:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d81a      	bhi.n	8005dd0 <lsm6dsl_xl_full_scale_get+0x5c>
 8005d9a:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <lsm6dsl_xl_full_scale_get+0x2c>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005db9 	.word	0x08005db9
 8005da8:	08005dc1 	.word	0x08005dc1
 8005dac:	08005dc9 	.word	0x08005dc9
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2200      	movs	r2, #0
 8005db4:	701a      	strb	r2, [r3, #0]
      break;
 8005db6:	e00f      	b.n	8005dd8 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	701a      	strb	r2, [r3, #0]
      break;
 8005dbe:	e00b      	b.n	8005dd8 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	701a      	strb	r2, [r3, #0]
      break;
 8005dc6:	e007      	b.n	8005dd8 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2203      	movs	r2, #3
 8005dcc:	701a      	strb	r2, [r3, #0]
      break;
 8005dce:	e003      	b.n	8005dd8 <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2204      	movs	r2, #4
 8005dd4:	701a      	strb	r2, [r3, #0]
      break;
 8005dd6:	bf00      	nop
  }

  return ret;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop

08005de4 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005df0:	f107 0208 	add.w	r2, r7, #8
 8005df4:	2301      	movs	r3, #1
 8005df6:	2110      	movs	r1, #16
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff ff65 	bl	8005cc8 <lsm6dsl_read_reg>
 8005dfe:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10f      	bne.n	8005e26 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	7a3b      	ldrb	r3, [r7, #8]
 8005e10:	f362 1307 	bfi	r3, r2, #4, #4
 8005e14:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005e16:	f107 0208 	add.w	r2, r7, #8
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	2110      	movs	r1, #16
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ff6a 	bl	8005cf8 <lsm6dsl_write_reg>
 8005e24:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005e26:	68fb      	ldr	r3, [r7, #12]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005e3a:	f107 0208 	add.w	r2, r7, #8
 8005e3e:	2301      	movs	r3, #1
 8005e40:	2110      	movs	r1, #16
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff ff40 	bl	8005cc8 <lsm6dsl_read_reg>
 8005e48:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 8005e4a:	7a3b      	ldrb	r3, [r7, #8]
 8005e4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b0b      	cmp	r3, #11
 8005e54:	d84a      	bhi.n	8005eec <lsm6dsl_xl_data_rate_get+0xbc>
 8005e56:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <lsm6dsl_xl_data_rate_get+0x2c>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005e8d 	.word	0x08005e8d
 8005e60:	08005e95 	.word	0x08005e95
 8005e64:	08005e9d 	.word	0x08005e9d
 8005e68:	08005ea5 	.word	0x08005ea5
 8005e6c:	08005ead 	.word	0x08005ead
 8005e70:	08005eb5 	.word	0x08005eb5
 8005e74:	08005ebd 	.word	0x08005ebd
 8005e78:	08005ec5 	.word	0x08005ec5
 8005e7c:	08005ecd 	.word	0x08005ecd
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005edd 	.word	0x08005edd
 8005e88:	08005ee5 	.word	0x08005ee5
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	701a      	strb	r2, [r3, #0]
      break;
 8005e92:	e02f      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2201      	movs	r2, #1
 8005e98:	701a      	strb	r2, [r3, #0]
      break;
 8005e9a:	e02b      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	701a      	strb	r2, [r3, #0]
      break;
 8005ea2:	e027      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	701a      	strb	r2, [r3, #0]
      break;
 8005eaa:	e023      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2204      	movs	r2, #4
 8005eb0:	701a      	strb	r2, [r3, #0]
      break;
 8005eb2:	e01f      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2205      	movs	r2, #5
 8005eb8:	701a      	strb	r2, [r3, #0]
      break;
 8005eba:	e01b      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2206      	movs	r2, #6
 8005ec0:	701a      	strb	r2, [r3, #0]
      break;
 8005ec2:	e017      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2207      	movs	r2, #7
 8005ec8:	701a      	strb	r2, [r3, #0]
      break;
 8005eca:	e013      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2208      	movs	r2, #8
 8005ed0:	701a      	strb	r2, [r3, #0]
      break;
 8005ed2:	e00f      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2209      	movs	r2, #9
 8005ed8:	701a      	strb	r2, [r3, #0]
      break;
 8005eda:	e00b      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	220a      	movs	r2, #10
 8005ee0:	701a      	strb	r2, [r3, #0]
      break;
 8005ee2:	e007      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	220b      	movs	r2, #11
 8005ee8:	701a      	strb	r2, [r3, #0]
      break;
 8005eea:	e003      	b.n	8005ef4 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	220c      	movs	r2, #12
 8005ef0:	701a      	strb	r2, [r3, #0]
      break;
 8005ef2:	bf00      	nop
  }

  return ret;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop

08005f00 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005f0c:	f107 0208 	add.w	r2, r7, #8
 8005f10:	2301      	movs	r3, #1
 8005f12:	2111      	movs	r1, #17
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff fed7 	bl	8005cc8 <lsm6dsl_read_reg>
 8005f1a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10f      	bne.n	8005f42 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	7a3b      	ldrb	r3, [r7, #8]
 8005f2c:	f362 0343 	bfi	r3, r2, #1, #3
 8005f30:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005f32:	f107 0208 	add.w	r2, r7, #8
 8005f36:	2301      	movs	r3, #1
 8005f38:	2111      	movs	r1, #17
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff fedc 	bl	8005cf8 <lsm6dsl_write_reg>
 8005f40:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005f42:	68fb      	ldr	r3, [r7, #12]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005f56:	f107 0208 	add.w	r2, r7, #8
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	2111      	movs	r1, #17
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff feb2 	bl	8005cc8 <lsm6dsl_read_reg>
 8005f64:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8005f66:	7a3b      	ldrb	r3, [r7, #8]
 8005f68:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b06      	cmp	r3, #6
 8005f70:	d824      	bhi.n	8005fbc <lsm6dsl_gy_full_scale_get+0x70>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <lsm6dsl_gy_full_scale_get+0x2c>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f95 	.word	0x08005f95
 8005f7c:	08005f9d 	.word	0x08005f9d
 8005f80:	08005fa5 	.word	0x08005fa5
 8005f84:	08005fbd 	.word	0x08005fbd
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fbd 	.word	0x08005fbd
 8005f90:	08005fb5 	.word	0x08005fb5
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
      break;
 8005f9a:	e013      	b.n	8005fc4 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	701a      	strb	r2, [r3, #0]
      break;
 8005fa2:	e00f      	b.n	8005fc4 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	701a      	strb	r2, [r3, #0]
      break;
 8005faa:	e00b      	b.n	8005fc4 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2204      	movs	r2, #4
 8005fb0:	701a      	strb	r2, [r3, #0]
      break;
 8005fb2:	e007      	b.n	8005fc4 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2206      	movs	r2, #6
 8005fb8:	701a      	strb	r2, [r3, #0]
      break;
 8005fba:	e003      	b.n	8005fc4 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2207      	movs	r2, #7
 8005fc0:	701a      	strb	r2, [r3, #0]
      break;
 8005fc2:	bf00      	nop
  }

  return ret;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop

08005fd0 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005fdc:	f107 0208 	add.w	r2, r7, #8
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	2111      	movs	r1, #17
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff fe6f 	bl	8005cc8 <lsm6dsl_read_reg>
 8005fea:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10f      	bne.n	8006012 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	7a3b      	ldrb	r3, [r7, #8]
 8005ffc:	f362 1307 	bfi	r3, r2, #4, #4
 8006000:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8006002:	f107 0208 	add.w	r2, r7, #8
 8006006:	2301      	movs	r3, #1
 8006008:	2111      	movs	r1, #17
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fe74 	bl	8005cf8 <lsm6dsl_write_reg>
 8006010:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006012:	68fb      	ldr	r3, [r7, #12]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8006026:	f107 0208 	add.w	r2, r7, #8
 800602a:	2301      	movs	r3, #1
 800602c:	2111      	movs	r1, #17
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fe4a 	bl	8005cc8 <lsm6dsl_read_reg>
 8006034:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8006036:	7a3b      	ldrb	r3, [r7, #8]
 8006038:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b0a      	cmp	r3, #10
 8006040:	d844      	bhi.n	80060cc <lsm6dsl_gy_data_rate_get+0xb0>
 8006042:	a201      	add	r2, pc, #4	; (adr r2, 8006048 <lsm6dsl_gy_data_rate_get+0x2c>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	08006075 	.word	0x08006075
 800604c:	0800607d 	.word	0x0800607d
 8006050:	08006085 	.word	0x08006085
 8006054:	0800608d 	.word	0x0800608d
 8006058:	08006095 	.word	0x08006095
 800605c:	0800609d 	.word	0x0800609d
 8006060:	080060a5 	.word	0x080060a5
 8006064:	080060ad 	.word	0x080060ad
 8006068:	080060b5 	.word	0x080060b5
 800606c:	080060bd 	.word	0x080060bd
 8006070:	080060c5 	.word	0x080060c5
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]
      break;
 800607a:	e02b      	b.n	80060d4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2201      	movs	r2, #1
 8006080:	701a      	strb	r2, [r3, #0]
      break;
 8006082:	e027      	b.n	80060d4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2202      	movs	r2, #2
 8006088:	701a      	strb	r2, [r3, #0]
      break;
 800608a:	e023      	b.n	80060d4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2203      	movs	r2, #3
 8006090:	701a      	strb	r2, [r3, #0]
      break;
 8006092:	e01f      	b.n	80060d4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2204      	movs	r2, #4
 8006098:	701a      	strb	r2, [r3, #0]
      break;
 800609a:	e01b      	b.n	80060d4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2205      	movs	r2, #5
 80060a0:	701a      	strb	r2, [r3, #0]
      break;
 80060a2:	e017      	b.n	80060d4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2206      	movs	r2, #6
 80060a8:	701a      	strb	r2, [r3, #0]
      break;
 80060aa:	e013      	b.n	80060d4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2207      	movs	r2, #7
 80060b0:	701a      	strb	r2, [r3, #0]
      break;
 80060b2:	e00f      	b.n	80060d4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2208      	movs	r2, #8
 80060b8:	701a      	strb	r2, [r3, #0]
      break;
 80060ba:	e00b      	b.n	80060d4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2209      	movs	r2, #9
 80060c0:	701a      	strb	r2, [r3, #0]
      break;
 80060c2:	e007      	b.n	80060d4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	220a      	movs	r2, #10
 80060c8:	701a      	strb	r2, [r3, #0]
      break;
 80060ca:	e003      	b.n	80060d4 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	220b      	movs	r2, #11
 80060d0:	701a      	strb	r2, [r3, #0]
      break;
 80060d2:	bf00      	nop
  }

  return ret;
 80060d4:	68fb      	ldr	r3, [r7, #12]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop

080060e0 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80060ec:	f107 0208 	add.w	r2, r7, #8
 80060f0:	2301      	movs	r3, #1
 80060f2:	2112      	movs	r1, #18
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff fde7 	bl	8005cc8 <lsm6dsl_read_reg>
 80060fa:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10f      	bne.n	8006122 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	b2da      	uxtb	r2, r3
 800610a:	7a3b      	ldrb	r3, [r7, #8]
 800610c:	f362 1386 	bfi	r3, r2, #6, #1
 8006110:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8006112:	f107 0208 	add.w	r2, r7, #8
 8006116:	2301      	movs	r3, #1
 8006118:	2112      	movs	r1, #18
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fdec 	bl	8005cf8 <lsm6dsl_write_reg>
 8006120:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006122:	68fb      	ldr	r3, [r7, #12]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8006136:	2306      	movs	r3, #6
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	2122      	movs	r1, #34	; 0x22
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff fdc3 	bl	8005cc8 <lsm6dsl_read_reg>
 8006142:	60f8      	str	r0, [r7, #12]
  return ret;
 8006144:	68fb      	ldr	r3, [r7, #12]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8006158:	2306      	movs	r3, #6
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	2128      	movs	r1, #40	; 0x28
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff fdb2 	bl	8005cc8 <lsm6dsl_read_reg>
 8006164:	60f8      	str	r0, [r7, #12]
  return ret;
 8006166:	68fb      	ldr	r3, [r7, #12]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800617a:	2301      	movs	r3, #1
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	210f      	movs	r1, #15
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fda1 	bl	8005cc8 <lsm6dsl_read_reg>
 8006186:	60f8      	str	r0, [r7, #12]
  return ret;
 8006188:	68fb      	ldr	r3, [r7, #12]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	460b      	mov	r3, r1
 800619c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800619e:	f107 0208 	add.w	r2, r7, #8
 80061a2:	2301      	movs	r3, #1
 80061a4:	2112      	movs	r1, #18
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff fd8e 	bl	8005cc8 <lsm6dsl_read_reg>
 80061ac:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10f      	bne.n	80061d4 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	7a3b      	ldrb	r3, [r7, #8]
 80061be:	f362 0382 	bfi	r3, r2, #2, #1
 80061c2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80061c4:	f107 0208 	add.w	r2, r7, #8
 80061c8:	2301      	movs	r3, #1
 80061ca:	2112      	movs	r1, #18
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff fd93 	bl	8005cf8 <lsm6dsl_write_reg>
 80061d2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80061d4:	68fb      	ldr	r3, [r7, #12]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 80061ea:	f107 0208 	add.w	r2, r7, #8
 80061ee:	2301      	movs	r3, #1
 80061f0:	210a      	movs	r1, #10
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff fd68 	bl	8005cc8 <lsm6dsl_read_reg>
 80061f8:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10f      	bne.n	8006220 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	b2da      	uxtb	r2, r3
 8006208:	7a3b      	ldrb	r3, [r7, #8]
 800620a:	f362 0302 	bfi	r3, r2, #0, #3
 800620e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8006210:	f107 0208 	add.w	r2, r7, #8
 8006214:	2301      	movs	r3, #1
 8006216:	210a      	movs	r1, #10
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff fd6d 	bl	8005cf8 <lsm6dsl_write_reg>
 800621e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006220:	68fb      	ldr	r3, [r7, #12]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f004 fdd6 	bl	800adec <VL53L0X_get_device_info>
 8006240:	4603      	mov	r3, r0
 8006242:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006244:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 fc54 	bl	8007b0e <VL53L0X_get_offset_calibration_data_micro_meter>
 8006266:	4603      	mov	r3, r0
 8006268:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800626a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006278:	b5b0      	push	{r4, r5, r7, lr}
 800627a:	b094      	sub	sp, #80	; 0x50
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006280:	2300      	movs	r3, #0
 8006282:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006286:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800628a:	2b00      	cmp	r3, #0
 800628c:	d107      	bne.n	800629e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800628e:	2200      	movs	r2, #0
 8006290:	2188      	movs	r1, #136	; 0x88
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f004 ff6a 	bl	800b16c <VL53L0X_WrByte>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062ac:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80062b6:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a71      	ldr	r2, [pc, #452]	; (8006484 <VL53L0X_DataInit+0x20c>)
 80062be:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a70      	ldr	r2, [pc, #448]	; (8006488 <VL53L0X_DataInit+0x210>)
 80062c6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80062d0:	f107 0308 	add.w	r3, r7, #8
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa5a 	bl	8006790 <VL53L0X_GetDeviceParameters>
 80062dc:	4603      	mov	r3, r0
 80062de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 80062e2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d112      	bne.n	8006310 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80062ea:	2300      	movs	r3, #0
 80062ec:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80062ee:	2300      	movs	r3, #0
 80062f0:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f103 0410 	add.w	r4, r3, #16
 80062f8:	f107 0508 	add.w	r5, r7, #8
 80062fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006308:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800630c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2264      	movs	r2, #100	; 0x64
 8006314:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800631e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006328:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006332:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800633e:	2300      	movs	r3, #0
 8006340:	64bb      	str	r3, [r7, #72]	; 0x48
 8006342:	e014      	b.n	800636e <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8006344:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006348:	2b00      	cmp	r3, #0
 800634a:	d114      	bne.n	8006376 <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800634c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800634e:	b29b      	uxth	r3, r3
 8006350:	2201      	movs	r2, #1
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fd67 	bl	8006e28 <VL53L0X_SetLimitCheckEnable>
 800635a:	4603      	mov	r3, r0
 800635c:	461a      	mov	r2, r3
 800635e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006362:	4313      	orrs	r3, r2
 8006364:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636a:	3301      	adds	r3, #1
 800636c:	64bb      	str	r3, [r7, #72]	; 0x48
 800636e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006370:	2b05      	cmp	r3, #5
 8006372:	dde7      	ble.n	8006344 <VL53L0X_DataInit+0xcc>
 8006374:	e000      	b.n	8006378 <VL53L0X_DataInit+0x100>
		else
			break;
 8006376:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006378:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800637c:	2b00      	cmp	r3, #0
 800637e:	d107      	bne.n	8006390 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006380:	2200      	movs	r2, #0
 8006382:	2102      	movs	r1, #2
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fd4f 	bl	8006e28 <VL53L0X_SetLimitCheckEnable>
 800638a:	4603      	mov	r3, r0
 800638c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006390:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006394:	2b00      	cmp	r3, #0
 8006396:	d107      	bne.n	80063a8 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006398:	2200      	movs	r2, #0
 800639a:	2103      	movs	r1, #3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fd43 	bl	8006e28 <VL53L0X_SetLimitCheckEnable>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80063a8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d107      	bne.n	80063c0 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80063b0:	2200      	movs	r2, #0
 80063b2:	2104      	movs	r1, #4
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fd37 	bl	8006e28 <VL53L0X_SetLimitCheckEnable>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80063c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d107      	bne.n	80063d8 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80063c8:	2200      	movs	r2, #0
 80063ca:	2105      	movs	r1, #5
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fd2b 	bl	8006e28 <VL53L0X_SetLimitCheckEnable>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80063d8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d108      	bne.n	80063f2 <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80063e0:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80063e4:	2100      	movs	r1, #0
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fdce 	bl	8006f88 <VL53L0X_SetLimitCheckValue>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80063f2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d108      	bne.n	800640c <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80063fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063fe:	2101      	movs	r1, #1
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fdc1 	bl	8006f88 <VL53L0X_SetLimitCheckValue>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800640c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006410:	2b00      	cmp	r3, #0
 8006412:	d108      	bne.n	8006426 <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006414:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006418:	2102      	movs	r1, #2
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fdb4 	bl	8006f88 <VL53L0X_SetLimitCheckValue>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006426:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800642a:	2b00      	cmp	r3, #0
 800642c:	d107      	bne.n	800643e <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800642e:	2200      	movs	r2, #0
 8006430:	2103      	movs	r1, #3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fda8 	bl	8006f88 <VL53L0X_SetLimitCheckValue>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800643e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10f      	bne.n	8006466 <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	22ff      	movs	r2, #255	; 0xff
 800644a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800644e:	22ff      	movs	r2, #255	; 0xff
 8006450:	2101      	movs	r1, #1
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f004 fe8a 	bl	800b16c <VL53L0X_WrByte>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006466:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800646a:	2b00      	cmp	r3, #0
 800646c:	d103      	bne.n	8006476 <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006476:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800647a:	4618      	mov	r0, r3
 800647c:	3750      	adds	r7, #80	; 0x50
 800647e:	46bd      	mov	sp, r7
 8006480:	bdb0      	pop	{r4, r5, r7, pc}
 8006482:	bf00      	nop
 8006484:	00016b85 	.word	0x00016b85
 8006488:	000970a4 	.word	0x000970a4

0800648c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800648c:	b5b0      	push	{r4, r5, r7, lr}
 800648e:	b09e      	sub	sp, #120	; 0x78
 8006490:	af02      	add	r7, sp, #8
 8006492:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006494:	2300      	movs	r3, #0
 8006496:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800649a:	f107 031c 	add.w	r3, r7, #28
 800649e:	2240      	movs	r2, #64	; 0x40
 80064a0:	2100      	movs	r1, #0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f00c fce3 	bl	8012e6e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80064c8:	2101      	movs	r1, #1
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f002 fa72 	bl	80089b4 <VL53L0X_get_info_from_device>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80064dc:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80064e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80064e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d80d      	bhi.n	800650c <VL53L0X_StaticInit+0x80>
 80064f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d102      	bne.n	80064fe <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80064f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d806      	bhi.n	800650c <VL53L0X_StaticInit+0x80>
 80064fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10e      	bne.n	8006524 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006508:	2b0c      	cmp	r3, #12
 800650a:	d90b      	bls.n	8006524 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800650c:	f107 0218 	add.w	r2, r7, #24
 8006510:	f107 0314 	add.w	r3, r7, #20
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 fcf4 	bl	8007f04 <VL53L0X_perform_ref_spad_management>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006522:	e009      	b.n	8006538 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006524:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006528:	461a      	mov	r2, r3
 800652a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fef5 	bl	800831c <VL53L0X_set_reference_spads>
 8006532:	4603      	mov	r3, r0
 8006534:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006538:	4b94      	ldr	r3, [pc, #592]	; (800678c <VL53L0X_StaticInit+0x300>)
 800653a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800653c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10f      	bne.n	8006564 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800654a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800654e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006552:	2b00      	cmp	r3, #0
 8006554:	d104      	bne.n	8006560 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800655c:	66bb      	str	r3, [r7, #104]	; 0x68
 800655e:	e001      	b.n	8006564 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006560:	4b8a      	ldr	r3, [pc, #552]	; (800678c <VL53L0X_StaticInit+0x300>)
 8006562:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006564:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006568:	2b00      	cmp	r3, #0
 800656a:	d106      	bne.n	800657a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800656c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f003 fdca 	bl	800a108 <VL53L0X_load_tuning_settings>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800657a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006582:	2300      	movs	r3, #0
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	2304      	movs	r3, #4
 8006588:	2200      	movs	r2, #0
 800658a:	2100      	movs	r1, #0
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 f8ed 	bl	800776c <VL53L0X_SetGpioConfig>
 8006592:	4603      	mov	r3, r0
 8006594:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006598:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800659c:	2b00      	cmp	r3, #0
 800659e:	d121      	bne.n	80065e4 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065a0:	2201      	movs	r2, #1
 80065a2:	21ff      	movs	r1, #255	; 0xff
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f004 fde1 	bl	800b16c <VL53L0X_WrByte>
 80065aa:	4603      	mov	r3, r0
 80065ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80065b0:	f107 031a 	add.w	r3, r7, #26
 80065b4:	461a      	mov	r2, r3
 80065b6:	2184      	movs	r1, #132	; 0x84
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f004 fd63 	bl	800b084 <VL53L0X_RdWord>
 80065be:	4603      	mov	r3, r0
 80065c0:	461a      	mov	r2, r3
 80065c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80065cc:	2200      	movs	r2, #0
 80065ce:	21ff      	movs	r1, #255	; 0xff
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f004 fdcb 	bl	800b16c <VL53L0X_WrByte>
 80065d6:	4603      	mov	r3, r0
 80065d8:	461a      	mov	r2, r3
 80065da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80065de:	4313      	orrs	r3, r2
 80065e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80065e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80065ec:	8b7b      	ldrh	r3, [r7, #26]
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80065f8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d108      	bne.n	8006612 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006600:	f107 031c 	add.w	r3, r7, #28
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f8c2 	bl	8006790 <VL53L0X_GetDeviceParameters>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006612:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006616:	2b00      	cmp	r3, #0
 8006618:	d110      	bne.n	800663c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800661a:	f107 0319 	add.w	r3, r7, #25
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f984 	bl	800692e <VL53L0X_GetFractionEnable>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800662c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006634:	7e7a      	ldrb	r2, [r7, #25]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800663c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10e      	bne.n	8006662 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f103 0410 	add.w	r4, r3, #16
 800664a:	f107 051c 	add.w	r5, r7, #28
 800664e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800665a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800665e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006662:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006666:	2b00      	cmp	r3, #0
 8006668:	d111      	bne.n	800668e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800666a:	f107 0319 	add.w	r3, r7, #25
 800666e:	461a      	mov	r2, r3
 8006670:	2101      	movs	r1, #1
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f004 fc7f 	bl	800af76 <VL53L0X_RdByte>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800667e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006682:	2b00      	cmp	r3, #0
 8006684:	d103      	bne.n	800668e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006686:	7e7a      	ldrb	r2, [r7, #25]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800668e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006692:	2b00      	cmp	r3, #0
 8006694:	d107      	bne.n	80066a6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006696:	2200      	movs	r2, #0
 8006698:	2100      	movs	r1, #0
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f9bc 	bl	8006a18 <VL53L0X_SetSequenceStepEnable>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80066a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d107      	bne.n	80066be <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80066ae:	2200      	movs	r2, #0
 80066b0:	2102      	movs	r1, #2
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f9b0 	bl	8006a18 <VL53L0X_SetSequenceStepEnable>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80066be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d103      	bne.n	80066ce <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2203      	movs	r2, #3
 80066ca:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80066ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80066d6:	f107 0313 	add.w	r3, r7, #19
 80066da:	461a      	mov	r2, r3
 80066dc:	2100      	movs	r1, #0
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f982 	bl	80069e8 <VL53L0X_GetVcselPulsePeriod>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80066ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d103      	bne.n	80066fa <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80066f2:	7cfa      	ldrb	r2, [r7, #19]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80066fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006702:	f107 0313 	add.w	r3, r7, #19
 8006706:	461a      	mov	r2, r3
 8006708:	2101      	movs	r1, #1
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f96c 	bl	80069e8 <VL53L0X_GetVcselPulsePeriod>
 8006710:	4603      	mov	r3, r0
 8006712:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006716:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800671a:	2b00      	cmp	r3, #0
 800671c:	d103      	bne.n	8006726 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800671e:	7cfa      	ldrb	r2, [r7, #19]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006726:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 800672e:	f107 030c 	add.w	r3, r7, #12
 8006732:	461a      	mov	r2, r3
 8006734:	2103      	movs	r1, #3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 faba 	bl	8006cb0 <VL53L0X_GetSequenceStepTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006742:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006746:	2b00      	cmp	r3, #0
 8006748:	d103      	bne.n	8006752 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006752:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 800675a:	f107 030c 	add.w	r3, r7, #12
 800675e:	461a      	mov	r2, r3
 8006760:	2104      	movs	r1, #4
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 faa4 	bl	8006cb0 <VL53L0X_GetSequenceStepTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800676e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800677e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006782:	4618      	mov	r0, r3
 8006784:	3770      	adds	r7, #112	; 0x70
 8006786:	46bd      	mov	sp, r7
 8006788:	bdb0      	pop	{r4, r5, r7, pc}
 800678a:	bf00      	nop
 800678c:	200000c0 	.word	0x200000c0

08006790 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800679a:	2300      	movs	r3, #0
 800679c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f8b0 	bl	8006908 <VL53L0X_GetDeviceMode>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80067ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d107      	bne.n	80067c4 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	3308      	adds	r3, #8
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fab8 	bl	8006d30 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80067c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d102      	bne.n	80067d2 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2200      	movs	r2, #0
 80067d0:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80067d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d107      	bne.n	80067ea <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	3310      	adds	r3, #16
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 faee 	bl	8006dc2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80067e6:	4603      	mov	r3, r0
 80067e8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80067ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d107      	bne.n	8006802 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	3314      	adds	r3, #20
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff fd29 	bl	8006250 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80067fe:	4603      	mov	r3, r0
 8006800:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d134      	bne.n	8006874 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	e02a      	b.n	8006866 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d12a      	bne.n	800686e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	b299      	uxth	r1, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	3308      	adds	r3, #8
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4413      	add	r3, r2
 8006826:	3304      	adds	r3, #4
 8006828:	461a      	mov	r2, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fc0e 	bl	800704c <VL53L0X_GetLimitCheckValue>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	4313      	orrs	r3, r2
 8006838:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800683a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d117      	bne.n	8006872 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	b299      	uxth	r1, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	3318      	adds	r3, #24
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	4413      	add	r3, r2
 800684e:	461a      	mov	r2, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fb75 	bl	8006f40 <VL53L0X_GetLimitCheckEnable>
 8006856:	4603      	mov	r3, r0
 8006858:	461a      	mov	r2, r3
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	4313      	orrs	r3, r2
 800685e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	3301      	adds	r3, #1
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b05      	cmp	r3, #5
 800686a:	ddd1      	ble.n	8006810 <VL53L0X_GetDeviceParameters+0x80>
 800686c:	e002      	b.n	8006874 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800686e:	bf00      	nop
 8006870:	e000      	b.n	8006874 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006872:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d107      	bne.n	800688c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	333c      	adds	r3, #60	; 0x3c
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fc70 	bl	8007168 <VL53L0X_GetWrapAroundCheckEnable>
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800688c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d107      	bne.n	80068a4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	3304      	adds	r3, #4
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f879 	bl	8006992 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068bc:	2300      	movs	r3, #0
 80068be:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	2b15      	cmp	r3, #21
 80068c4:	bf8c      	ite	hi
 80068c6:	2201      	movhi	r2, #1
 80068c8:	2200      	movls	r2, #0
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	2a00      	cmp	r2, #0
 80068ce:	d10e      	bne.n	80068ee <VL53L0X_SetDeviceMode+0x3e>
 80068d0:	2201      	movs	r2, #1
 80068d2:	409a      	lsls	r2, r3
 80068d4:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <VL53L0X_SetDeviceMode+0x54>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf14      	ite	ne
 80068dc:	2301      	movne	r3, #1
 80068de:	2300      	moveq	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	78fa      	ldrb	r2, [r7, #3]
 80068ea:	741a      	strb	r2, [r3, #16]
		break;
 80068ec:	e001      	b.n	80068f2 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80068ee:	23f8      	movs	r3, #248	; 0xf8
 80068f0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	0030000b 	.word	0x0030000b

08006908 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	7c1a      	ldrb	r2, [r3, #16]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800691e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006938:	2300      	movs	r3, #0
 800693a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	2109      	movs	r1, #9
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f004 fb18 	bl	800af76 <VL53L0X_RdByte>
 8006946:	4603      	mov	r3, r0
 8006948:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800694a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d106      	bne.n	8006960 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	b2da      	uxtb	r2, r3
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006960:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f003 fa32 	bl	8009de6 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006982:	4603      	mov	r3, r0
 8006984:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800699c:	2300      	movs	r3, #0
 800699e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f003 faff 	bl	8009fa6 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80069a8:	4603      	mov	r3, r0
 80069aa:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80069ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
 80069c4:	4613      	mov	r3, r2
 80069c6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069c8:	2300      	movs	r3, #0
 80069ca:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80069cc:	78ba      	ldrb	r2, [r7, #2]
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f002 ff47 	bl	8009866 <VL53L0X_set_vcsel_pulse_period>
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80069dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	460b      	mov	r3, r1
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069f6:	2300      	movs	r3, #0
 80069f8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80069fa:	7afb      	ldrb	r3, [r7, #11]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	4619      	mov	r1, r3
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f003 f9b9 	bl	8009d78 <VL53L0X_get_vcsel_pulse_period>
 8006a06:	4603      	mov	r3, r0
 8006a08:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
 8006a24:	4613      	mov	r3, r2
 8006a26:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006a34:	f107 030f 	add.w	r3, r7, #15
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f004 fa9a 	bl	800af76 <VL53L0X_RdByte>
 8006a42:	4603      	mov	r3, r0
 8006a44:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d15a      	bne.n	8006b08 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006a52:	78bb      	ldrb	r3, [r7, #2]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d12b      	bne.n	8006ab0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006a58:	78fb      	ldrb	r3, [r7, #3]
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d825      	bhi.n	8006aaa <VL53L0X_SetSequenceStepEnable+0x92>
 8006a5e:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006a79 	.word	0x08006a79
 8006a68:	08006a83 	.word	0x08006a83
 8006a6c:	08006a8d 	.word	0x08006a8d
 8006a70:	08006a97 	.word	0x08006a97
 8006a74:	08006aa1 	.word	0x08006aa1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006a78:	7dbb      	ldrb	r3, [r7, #22]
 8006a7a:	f043 0310 	orr.w	r3, r3, #16
 8006a7e:	75bb      	strb	r3, [r7, #22]
				break;
 8006a80:	e043      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006a82:	7dbb      	ldrb	r3, [r7, #22]
 8006a84:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006a88:	75bb      	strb	r3, [r7, #22]
				break;
 8006a8a:	e03e      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006a8c:	7dbb      	ldrb	r3, [r7, #22]
 8006a8e:	f043 0304 	orr.w	r3, r3, #4
 8006a92:	75bb      	strb	r3, [r7, #22]
				break;
 8006a94:	e039      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006a96:	7dbb      	ldrb	r3, [r7, #22]
 8006a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a9c:	75bb      	strb	r3, [r7, #22]
				break;
 8006a9e:	e034      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006aa0:	7dbb      	ldrb	r3, [r7, #22]
 8006aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aa6:	75bb      	strb	r3, [r7, #22]
				break;
 8006aa8:	e02f      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006aaa:	23fc      	movs	r3, #252	; 0xfc
 8006aac:	75fb      	strb	r3, [r7, #23]
 8006aae:	e02c      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d825      	bhi.n	8006b02 <VL53L0X_SetSequenceStepEnable+0xea>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006ad1 	.word	0x08006ad1
 8006ac0:	08006adb 	.word	0x08006adb
 8006ac4:	08006ae5 	.word	0x08006ae5
 8006ac8:	08006aef 	.word	0x08006aef
 8006acc:	08006af9 	.word	0x08006af9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006ad0:	7dbb      	ldrb	r3, [r7, #22]
 8006ad2:	f023 0310 	bic.w	r3, r3, #16
 8006ad6:	75bb      	strb	r3, [r7, #22]
				break;
 8006ad8:	e017      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006ada:	7dbb      	ldrb	r3, [r7, #22]
 8006adc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006ae0:	75bb      	strb	r3, [r7, #22]
				break;
 8006ae2:	e012      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006ae4:	7dbb      	ldrb	r3, [r7, #22]
 8006ae6:	f023 0304 	bic.w	r3, r3, #4
 8006aea:	75bb      	strb	r3, [r7, #22]
				break;
 8006aec:	e00d      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006aee:	7dbb      	ldrb	r3, [r7, #22]
 8006af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af4:	75bb      	strb	r3, [r7, #22]
				break;
 8006af6:	e008      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006af8:	7dbb      	ldrb	r3, [r7, #22]
 8006afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006afe:	75bb      	strb	r3, [r7, #22]
				break;
 8006b00:	e003      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b02:	23fc      	movs	r3, #252	; 0xfc
 8006b04:	75fb      	strb	r3, [r7, #23]
 8006b06:	e000      	b.n	8006b0a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006b08:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
 8006b0c:	7dba      	ldrb	r2, [r7, #22]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d01e      	beq.n	8006b50 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006b12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d107      	bne.n	8006b2a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006b1a:	7dbb      	ldrb	r3, [r7, #22]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	2101      	movs	r1, #1
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f004 fb23 	bl	800b16c <VL53L0X_WrByte>
 8006b26:	4603      	mov	r3, r0
 8006b28:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d103      	bne.n	8006b3a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	7dba      	ldrb	r2, [r7, #22]
 8006b36:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006b48:	6939      	ldr	r1, [r7, #16]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff ff0e 	bl	800696c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	607b      	str	r3, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	72fb      	strb	r3, [r7, #11]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006b78:	7afb      	ldrb	r3, [r7, #11]
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d836      	bhi.n	8006bec <sequence_step_enabled+0x90>
 8006b7e:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <sequence_step_enabled+0x28>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006b99 	.word	0x08006b99
 8006b88:	08006bab 	.word	0x08006bab
 8006b8c:	08006bbd 	.word	0x08006bbd
 8006b90:	08006bcf 	.word	0x08006bcf
 8006b94:	08006be1 	.word	0x08006be1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006b98:	7abb      	ldrb	r3, [r7, #10]
 8006b9a:	111b      	asrs	r3, r3, #4
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	701a      	strb	r2, [r3, #0]
		break;
 8006ba8:	e022      	b.n	8006bf0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006baa:	7abb      	ldrb	r3, [r7, #10]
 8006bac:	10db      	asrs	r3, r3, #3
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	701a      	strb	r2, [r3, #0]
		break;
 8006bba:	e019      	b.n	8006bf0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006bbc:	7abb      	ldrb	r3, [r7, #10]
 8006bbe:	109b      	asrs	r3, r3, #2
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	701a      	strb	r2, [r3, #0]
		break;
 8006bcc:	e010      	b.n	8006bf0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006bce:	7abb      	ldrb	r3, [r7, #10]
 8006bd0:	119b      	asrs	r3, r3, #6
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	701a      	strb	r2, [r3, #0]
		break;
 8006bde:	e007      	b.n	8006bf0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006be0:	7abb      	ldrb	r3, [r7, #10]
 8006be2:	09db      	lsrs	r3, r3, #7
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	701a      	strb	r2, [r3, #0]
		break;
 8006bea:	e001      	b.n	8006bf0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006bec:	23fc      	movs	r3, #252	; 0xfc
 8006bee:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006c12:	f107 030e 	add.w	r3, r7, #14
 8006c16:	461a      	mov	r2, r3
 8006c18:	2101      	movs	r1, #1
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f004 f9ab 	bl	800af76 <VL53L0X_RdByte>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d107      	bne.n	8006c3c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006c2c:	7bba      	ldrb	r2, [r7, #14]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2100      	movs	r1, #0
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff ff92 	bl	8006b5c <sequence_step_enabled>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d108      	bne.n	8006c56 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006c44:	7bba      	ldrb	r2, [r7, #14]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	3302      	adds	r3, #2
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff ff85 	bl	8006b5c <sequence_step_enabled>
 8006c52:	4603      	mov	r3, r0
 8006c54:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d108      	bne.n	8006c70 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006c5e:	7bba      	ldrb	r2, [r7, #14]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	3301      	adds	r3, #1
 8006c64:	2102      	movs	r1, #2
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7ff ff78 	bl	8006b5c <sequence_step_enabled>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d108      	bne.n	8006c8a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006c78:	7bba      	ldrb	r2, [r7, #14]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	3303      	adds	r3, #3
 8006c7e:	2103      	movs	r1, #3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff ff6b 	bl	8006b5c <sequence_step_enabled>
 8006c86:	4603      	mov	r3, r0
 8006c88:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d108      	bne.n	8006ca4 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006c92:	7bba      	ldrb	r2, [r7, #14]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	2104      	movs	r1, #4
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff ff5e 	bl	8006b5c <sequence_step_enabled>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8006cca:	f107 0210 	add.w	r2, r7, #16
 8006cce:	7afb      	ldrb	r3, [r7, #11]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f002 fbf2 	bl	80094bc <get_sequence_step_timeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8006cdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11c      	bne.n	8006d1e <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	4a11      	ldr	r2, [pc, #68]	; (8006d2c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8006ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cec:	099b      	lsrs	r3, r3, #6
 8006cee:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006cf8:	fb01 f303 	mul.w	r3, r1, r3
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4613      	mov	r3, r2
 8006d08:	041b      	lsls	r3, r3, #16
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006d10:	4a06      	ldr	r2, [pc, #24]	; (8006d2c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	10624dd3 	.word	0x10624dd3

08006d30 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006d3e:	f107 030c 	add.w	r3, r7, #12
 8006d42:	461a      	mov	r2, r3
 8006d44:	21f8      	movs	r1, #248	; 0xf8
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f004 f99c 	bl	800b084 <VL53L0X_RdWord>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d108      	bne.n	8006d6a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006d58:	f107 0308 	add.w	r3, r7, #8
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2104      	movs	r1, #4
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f004 f9c7 	bl	800b0f4 <VL53L0X_RdDWord>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10c      	bne.n	8006d8c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8006d72:	89bb      	ldrh	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	89ba      	ldrh	r2, [r7, #12]
 8006d7c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7f1b      	ldrb	r3, [r3, #28]
 8006daa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	7bba      	ldrb	r2, [r7, #14]
 8006db0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b086      	sub	sp, #24
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006dd0:	f107 030e 	add.w	r3, r7, #14
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	2120      	movs	r1, #32
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f004 f953 	bl	800b084 <VL53L0X_RdWord>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006de2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d118      	bne.n	8006e1c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006dea:	89fb      	ldrh	r3, [r7, #14]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d109      	bne.n	8006e04 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	771a      	strb	r2, [r3, #28]
 8006e02:	e00b      	b.n	8006e1c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006e04:	89fb      	ldrh	r3, [r7, #14]
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	807b      	strh	r3, [r7, #2]
 8006e34:	4613      	mov	r3, r2
 8006e36:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006e48:	887b      	ldrh	r3, [r7, #2]
 8006e4a:	2b05      	cmp	r3, #5
 8006e4c:	d902      	bls.n	8006e54 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e4e:	23fc      	movs	r3, #252	; 0xfc
 8006e50:	75fb      	strb	r3, [r7, #23]
 8006e52:	e05b      	b.n	8006f0c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006e54:	787b      	ldrb	r3, [r7, #1]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006e62:	2301      	movs	r3, #1
 8006e64:	73bb      	strb	r3, [r7, #14]
 8006e66:	e00a      	b.n	8006e7e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006e68:	887b      	ldrh	r3, [r7, #2]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	330c      	adds	r3, #12
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8006e7e:	887b      	ldrh	r3, [r7, #2]
 8006e80:	2b05      	cmp	r3, #5
 8006e82:	d841      	bhi.n	8006f08 <VL53L0X_SetLimitCheckEnable+0xe0>
 8006e84:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <VL53L0X_SetLimitCheckEnable+0x64>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006ea5 	.word	0x08006ea5
 8006e90:	08006eaf 	.word	0x08006eaf
 8006e94:	08006ec5 	.word	0x08006ec5
 8006e98:	08006ecf 	.word	0x08006ecf
 8006e9c:	08006ed9 	.word	0x08006ed9
 8006ea0:	08006ef1 	.word	0x08006ef1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	7bfa      	ldrb	r2, [r7, #15]
 8006ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006eac:	e02e      	b.n	8006f0c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	2144      	movs	r1, #68	; 0x44
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f004 f97b 	bl	800b1b4 <VL53L0X_WrWord>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75fb      	strb	r3, [r7, #23]

			break;
 8006ec2:	e023      	b.n	8006f0c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7bfa      	ldrb	r2, [r7, #15]
 8006ec8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006ecc:	e01e      	b.n	8006f0c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	7bfa      	ldrb	r2, [r7, #15]
 8006ed2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006ed6:	e019      	b.n	8006f0c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006ede:	7b7b      	ldrb	r3, [r7, #13]
 8006ee0:	22fe      	movs	r2, #254	; 0xfe
 8006ee2:	2160      	movs	r1, #96	; 0x60
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f004 f98f 	bl	800b208 <VL53L0X_UpdateByte>
 8006eea:	4603      	mov	r3, r0
 8006eec:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006eee:	e00d      	b.n	8006f0c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006ef0:	7bbb      	ldrb	r3, [r7, #14]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006ef6:	7b7b      	ldrb	r3, [r7, #13]
 8006ef8:	22ef      	movs	r2, #239	; 0xef
 8006efa:	2160      	movs	r1, #96	; 0x60
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f004 f983 	bl	800b208 <VL53L0X_UpdateByte>
 8006f02:	4603      	mov	r3, r0
 8006f04:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006f06:	e001      	b.n	8006f0c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f08:	23fc      	movs	r3, #252	; 0xfc
 8006f0a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006f0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10f      	bne.n	8006f34 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006f14:	787b      	ldrb	r3, [r7, #1]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f1a:	887b      	ldrh	r3, [r7, #2]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	4413      	add	r3, r2
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006f26:	e005      	b.n	8006f34 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f28:	887b      	ldrh	r3, [r7, #2]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006f52:	897b      	ldrh	r3, [r7, #10]
 8006f54:	2b05      	cmp	r3, #5
 8006f56:	d905      	bls.n	8006f64 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f58:	23fc      	movs	r3, #252	; 0xfc
 8006f5a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	e008      	b.n	8006f76 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f64:	897b      	ldrh	r3, [r7, #10]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f6e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	7dba      	ldrb	r2, [r7, #22]
 8006f74:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	460b      	mov	r3, r1
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006f9a:	897b      	ldrh	r3, [r7, #10]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fa4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8006fa6:	7dbb      	ldrb	r3, [r7, #22]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d107      	bne.n	8006fbc <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006fac:	897b      	ldrh	r3, [r7, #10]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	605a      	str	r2, [r3, #4]
 8006fba:	e040      	b.n	800703e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006fbc:	897b      	ldrh	r3, [r7, #10]
 8006fbe:	2b05      	cmp	r3, #5
 8006fc0:	d830      	bhi.n	8007024 <VL53L0X_SetLimitCheckValue+0x9c>
 8006fc2:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <VL53L0X_SetLimitCheckValue+0x40>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006fe1 	.word	0x08006fe1
 8006fcc:	08006fe9 	.word	0x08006fe9
 8006fd0:	08006fff 	.word	0x08006fff
 8006fd4:	08007007 	.word	0x08007007
 8006fd8:	0800700f 	.word	0x0800700f
 8006fdc:	0800700f 	.word	0x0800700f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006fe6:	e01f      	b.n	8007028 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	2144      	movs	r1, #68	; 0x44
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f004 f8de 	bl	800b1b4 <VL53L0X_WrWord>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006ffc:	e014      	b.n	8007028 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007004:	e010      	b.n	8007028 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800700c:	e00c      	b.n	8007028 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007012:	b29b      	uxth	r3, r3
 8007014:	461a      	mov	r2, r3
 8007016:	2164      	movs	r1, #100	; 0x64
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f004 f8cb 	bl	800b1b4 <VL53L0X_WrWord>
 800701e:	4603      	mov	r3, r0
 8007020:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007022:	e001      	b.n	8007028 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007024:	23fc      	movs	r3, #252	; 0xfc
 8007026:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007030:	897b      	ldrh	r3, [r7, #10]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	330c      	adds	r3, #12
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800703e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop

0800704c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	460b      	mov	r3, r1
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800705a:	2300      	movs	r3, #0
 800705c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8007062:	897b      	ldrh	r3, [r7, #10]
 8007064:	2b05      	cmp	r3, #5
 8007066:	d847      	bhi.n	80070f8 <VL53L0X_GetLimitCheckValue+0xac>
 8007068:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <VL53L0X_GetLimitCheckValue+0x24>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	08007089 	.word	0x08007089
 8007074:	08007095 	.word	0x08007095
 8007078:	080070bb 	.word	0x080070bb
 800707c:	080070c7 	.word	0x080070c7
 8007080:	080070d3 	.word	0x080070d3
 8007084:	080070d3 	.word	0x080070d3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	77bb      	strb	r3, [r7, #30]
		break;
 8007092:	e033      	b.n	80070fc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007094:	f107 0316 	add.w	r3, r7, #22
 8007098:	461a      	mov	r2, r3
 800709a:	2144      	movs	r1, #68	; 0x44
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f003 fff1 	bl	800b084 <VL53L0X_RdWord>
 80070a2:	4603      	mov	r3, r0
 80070a4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80070a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80070ae:	8afb      	ldrh	r3, [r7, #22]
 80070b0:	025b      	lsls	r3, r3, #9
 80070b2:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80070b4:	2301      	movs	r3, #1
 80070b6:	77bb      	strb	r3, [r7, #30]
		break;
 80070b8:	e020      	b.n	80070fc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	77bb      	strb	r3, [r7, #30]
		break;
 80070c4:	e01a      	b.n	80070fc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	77bb      	strb	r3, [r7, #30]
		break;
 80070d0:	e014      	b.n	80070fc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80070d2:	f107 0316 	add.w	r3, r7, #22
 80070d6:	461a      	mov	r2, r3
 80070d8:	2164      	movs	r1, #100	; 0x64
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f003 ffd2 	bl	800b084 <VL53L0X_RdWord>
 80070e0:	4603      	mov	r3, r0
 80070e2:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80070e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80070ec:	8afb      	ldrh	r3, [r7, #22]
 80070ee:	025b      	lsls	r3, r3, #9
 80070f0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	77bb      	strb	r3, [r7, #30]
		break;
 80070f6:	e001      	b.n	80070fc <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80070f8:	23fc      	movs	r3, #252	; 0xfc
 80070fa:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d12a      	bne.n	800715a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007104:	7fbb      	ldrb	r3, [r7, #30]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d124      	bne.n	8007154 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d110      	bne.n	8007132 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007110:	897b      	ldrh	r3, [r7, #10]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	330c      	adds	r3, #12
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007124:	897b      	ldrh	r3, [r7, #10]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4413      	add	r3, r2
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007130:	e013      	b.n	800715a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007138:	897b      	ldrh	r3, [r7, #10]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	330c      	adds	r3, #12
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007146:	897b      	ldrh	r3, [r7, #10]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007152:	e002      	b.n	800715a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800715a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800715e:	4618      	mov	r0, r3
 8007160:	3720      	adds	r7, #32
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop

08007168 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007176:	f107 030e 	add.w	r3, r7, #14
 800717a:	461a      	mov	r2, r3
 800717c:	2101      	movs	r1, #1
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f003 fef9 	bl	800af76 <VL53L0X_RdByte>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10e      	bne.n	80071ae <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007190:	7bba      	ldrb	r2, [r7, #14]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	b25b      	sxtb	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	da03      	bge.n	80071a8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2201      	movs	r2, #1
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	e002      	b.n	80071ae <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80071ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781a      	ldrb	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071d4:	2300      	movs	r3, #0
 80071d6:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80071d8:	f107 030e 	add.w	r3, r7, #14
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff fb92 	bl	8006908 <VL53L0X_GetDeviceMode>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80071e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d107      	bne.n	8007200 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d104      	bne.n	8007200 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f898 	bl	800732c <VL53L0X_StartMeasurement>
 80071fc:	4603      	mov	r3, r0
 80071fe:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d104      	bne.n	8007212 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 fb09 	bl	8008820 <VL53L0X_measurement_poll_for_completion>
 800720e:	4603      	mov	r3, r0
 8007210:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d106      	bne.n	8007228 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2203      	movs	r2, #3
 8007224:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007228:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007240:	2300      	movs	r3, #0
 8007242:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007244:	2301      	movs	r3, #1
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f001 faab 	bl	80087a6 <VL53L0X_perform_ref_calibration>
 8007250:	4603      	mov	r3, r0
 8007252:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007254:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800726c:	2300      	movs	r3, #0
 800726e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007276:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007278:	7dbb      	ldrb	r3, [r7, #22]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d005      	beq.n	800728a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800727e:	7dbb      	ldrb	r3, [r7, #22]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d002      	beq.n	800728a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007284:	7dbb      	ldrb	r3, [r7, #22]
 8007286:	2b03      	cmp	r3, #3
 8007288:	d147      	bne.n	800731a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800728a:	f107 030c 	add.w	r3, r7, #12
 800728e:	f107 0210 	add.w	r2, r7, #16
 8007292:	2101      	movs	r1, #1
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fb8d 	bl	80079b4 <VL53L0X_GetInterruptThresholds>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80072a4:	d803      	bhi.n	80072ae <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80072a6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80072a8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80072ac:	d935      	bls.n	800731a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80072ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d131      	bne.n	800731a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d006      	beq.n	80072ca <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80072bc:	491a      	ldr	r1, [pc, #104]	; (8007328 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f002 ff22 	bl	800a108 <VL53L0X_load_tuning_settings>
 80072c4:	4603      	mov	r3, r0
 80072c6:	75fb      	strb	r3, [r7, #23]
 80072c8:	e027      	b.n	800731a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80072ca:	2204      	movs	r2, #4
 80072cc:	21ff      	movs	r1, #255	; 0xff
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f003 ff4c 	bl	800b16c <VL53L0X_WrByte>
 80072d4:	4603      	mov	r3, r0
 80072d6:	461a      	mov	r2, r3
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	4313      	orrs	r3, r2
 80072dc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80072de:	2200      	movs	r2, #0
 80072e0:	2170      	movs	r1, #112	; 0x70
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f003 ff42 	bl	800b16c <VL53L0X_WrByte>
 80072e8:	4603      	mov	r3, r0
 80072ea:	461a      	mov	r2, r3
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80072f2:	2200      	movs	r2, #0
 80072f4:	21ff      	movs	r1, #255	; 0xff
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f003 ff38 	bl	800b16c <VL53L0X_WrByte>
 80072fc:	4603      	mov	r3, r0
 80072fe:	461a      	mov	r2, r3
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	4313      	orrs	r3, r2
 8007304:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007306:	2200      	movs	r2, #0
 8007308:	2180      	movs	r1, #128	; 0x80
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f003 ff2e 	bl	800b16c <VL53L0X_WrByte>
 8007310:	4603      	mov	r3, r0
 8007312:	461a      	mov	r2, r3
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	4313      	orrs	r3, r2
 8007318:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800731a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	200001b4 	.word	0x200001b4

0800732c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007334:	2300      	movs	r3, #0
 8007336:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007338:	2301      	movs	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800733c:	f107 030e 	add.w	r3, r7, #14
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff fae0 	bl	8006908 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	2b03      	cmp	r3, #3
 800734c:	d052      	beq.n	80073f4 <VL53L0X_StartMeasurement+0xc8>
 800734e:	2b03      	cmp	r3, #3
 8007350:	dc6a      	bgt.n	8007428 <VL53L0X_StartMeasurement+0xfc>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <VL53L0X_StartMeasurement+0x30>
 8007356:	2b01      	cmp	r3, #1
 8007358:	d032      	beq.n	80073c0 <VL53L0X_StartMeasurement+0x94>
 800735a:	e065      	b.n	8007428 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800735c:	2201      	movs	r2, #1
 800735e:	2100      	movs	r1, #0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f003 ff03 	bl	800b16c <VL53L0X_WrByte>
 8007366:	4603      	mov	r3, r0
 8007368:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800736e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d15b      	bne.n	800742e <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d008      	beq.n	8007392 <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 8007380:	f107 030d 	add.w	r3, r7, #13
 8007384:	461a      	mov	r2, r3
 8007386:	2100      	movs	r1, #0
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f003 fdf4 	bl	800af76 <VL53L0X_RdByte>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3301      	adds	r3, #1
 8007396:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007398:	7b7a      	ldrb	r2, [r7, #13]
 800739a:	7bfb      	ldrb	r3, [r7, #15]
 800739c:	4013      	ands	r3, r2
 800739e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80073a0:	7bfa      	ldrb	r2, [r7, #15]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d106      	bne.n	80073b4 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 80073a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d102      	bne.n	80073b4 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	2bc7      	cmp	r3, #199	; 0xc7
 80073b2:	d9e2      	bls.n	800737a <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	2bc7      	cmp	r3, #199	; 0xc7
 80073b8:	d939      	bls.n	800742e <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 80073ba:	23f9      	movs	r3, #249	; 0xf9
 80073bc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80073be:	e036      	b.n	800742e <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80073c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d105      	bne.n	80073d4 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80073c8:	2101      	movs	r1, #1
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff ff48 	bl	8007260 <VL53L0X_CheckAndLoadInterruptSettings>
 80073d0:	4603      	mov	r3, r0
 80073d2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80073d4:	2202      	movs	r2, #2
 80073d6:	2100      	movs	r1, #0
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f003 fec7 	bl	800b16c <VL53L0X_WrByte>
 80073de:	4603      	mov	r3, r0
 80073e0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80073e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d123      	bne.n	8007432 <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2204      	movs	r2, #4
 80073ee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80073f2:	e01e      	b.n	8007432 <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80073f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80073fc:	2101      	movs	r1, #1
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff ff2e 	bl	8007260 <VL53L0X_CheckAndLoadInterruptSettings>
 8007404:	4603      	mov	r3, r0
 8007406:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007408:	2204      	movs	r2, #4
 800740a:	2100      	movs	r1, #0
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f003 fead 	bl	800b16c <VL53L0X_WrByte>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007416:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10b      	bne.n	8007436 <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2204      	movs	r2, #4
 8007422:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007426:	e006      	b.n	8007436 <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007428:	23f8      	movs	r3, #248	; 0xf8
 800742a:	75fb      	strb	r3, [r7, #23]
 800742c:	e004      	b.n	8007438 <VL53L0X_StartMeasurement+0x10c>
		break;
 800742e:	bf00      	nop
 8007430:	e002      	b.n	8007438 <VL53L0X_StartMeasurement+0x10c>
		break;
 8007432:	bf00      	nop
 8007434:	e000      	b.n	8007438 <VL53L0X_StartMeasurement+0x10c>
		break;
 8007436:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007438:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007458:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	2b04      	cmp	r3, #4
 800745e:	d112      	bne.n	8007486 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007460:	f107 0308 	add.w	r3, r7, #8
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fb1a 	bl	8007aa0 <VL53L0X_GetInterruptMaskStatus>
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b04      	cmp	r3, #4
 8007474:	d103      	bne.n	800747e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2201      	movs	r2, #1
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	e01c      	b.n	80074b8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	e018      	b.n	80074b8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007486:	f107 030d 	add.w	r3, r7, #13
 800748a:	461a      	mov	r2, r3
 800748c:	2114      	movs	r1, #20
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f003 fd71 	bl	800af76 <VL53L0X_RdByte>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10b      	bne.n	80074b8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80074a0:	7b7b      	ldrb	r3, [r7, #13]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2201      	movs	r2, #1
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	e002      	b.n	80074b8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2200      	movs	r2, #0
 80074b6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80074b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80074c4:	b5b0      	push	{r4, r5, r7, lr}
 80074c6:	b096      	sub	sp, #88	; 0x58
 80074c8:	af02      	add	r7, sp, #8
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80074d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80074d8:	230c      	movs	r3, #12
 80074da:	2114      	movs	r1, #20
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f003 fda5 	bl	800b02c <VL53L0X_ReadMulti>
 80074e2:	4603      	mov	r3, r0
 80074e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80074e8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f040 80d1 	bne.w	8007694 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2200      	movs	r2, #0
 80074f6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80074fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007502:	b29b      	uxth	r3, r3
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	b29a      	uxth	r2, r3
 8007508:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800750c:	b29b      	uxth	r3, r3
 800750e:	4413      	add	r3, r2
 8007510:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2200      	movs	r2, #0
 8007518:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800751a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800751e:	b29b      	uxth	r3, r3
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	b29a      	uxth	r2, r3
 8007524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007528:	b29b      	uxth	r3, r3
 800752a:	4413      	add	r3, r2
 800752c:	b29b      	uxth	r3, r3
 800752e:	025b      	lsls	r3, r3, #9
 8007530:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007536:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007538:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800753c:	b29b      	uxth	r3, r3
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	b29a      	uxth	r2, r3
 8007542:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007546:	b29b      	uxth	r3, r3
 8007548:	4413      	add	r3, r2
 800754a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800754e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007552:	025b      	lsls	r3, r3, #9
 8007554:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800755a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800755e:	b29b      	uxth	r3, r3
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	b29a      	uxth	r2, r3
 8007564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007568:	b29b      	uxth	r3, r3
 800756a:	4413      	add	r3, r2
 800756c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007576:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007578:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800757c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8007586:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800758e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007592:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007598:	d046      	beq.n	8007628 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800759a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800759c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80075a0:	fb02 f303 	mul.w	r3, r2, r3
 80075a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80075a8:	4a57      	ldr	r2, [pc, #348]	; (8007708 <VL53L0X_GetRangingMeasurementData+0x244>)
 80075aa:	fb82 1203 	smull	r1, r2, r2, r3
 80075ae:	1192      	asrs	r2, r2, #6
 80075b0:	17db      	asrs	r3, r3, #31
 80075b2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80075b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	7f1b      	ldrb	r3, [r3, #28]
 80075c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80075c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d02c      	beq.n	8007628 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80075ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80075d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80075d4:	fb02 f303 	mul.w	r3, r2, r3
 80075d8:	121a      	asrs	r2, r3, #8
					<= 0) {
 80075da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80075dc:	429a      	cmp	r2, r3
 80075de:	d10d      	bne.n	80075fc <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80075e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d004      	beq.n	80075f2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80075e8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80075ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80075f0:	e016      	b.n	8007620 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80075f2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80075f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80075fa:	e011      	b.n	8007620 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80075fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007602:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007606:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007608:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800760c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007610:	121b      	asrs	r3, r3, #8
 8007612:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007616:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800761c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007620:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007624:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007628:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00d      	beq.n	800764c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007630:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007634:	089b      	lsrs	r3, r3, #2
 8007636:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800763c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007640:	b2db      	uxtb	r3, r3
 8007642:	019b      	lsls	r3, r3, #6
 8007644:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	75da      	strb	r2, [r3, #23]
 800764a:	e006      	b.n	800765a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007652:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2200      	movs	r2, #0
 8007658:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800765a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800765e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007662:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	4613      	mov	r3, r2
 800766e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f003 f9ab 	bl	800a9cc <VL53L0X_get_pal_range_status>
 8007676:	4603      	mov	r3, r0
 8007678:	461a      	mov	r2, r3
 800767a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800767e:	4313      	orrs	r3, r2
 8007680:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007684:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007688:	2b00      	cmp	r3, #0
 800768a:	d103      	bne.n	8007694 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800768c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007694:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007698:	2b00      	cmp	r3, #0
 800769a:	d12f      	bne.n	80076fc <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f107 040c 	add.w	r4, r7, #12
 80076a2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80076a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80076ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80076b6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80076bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80076c4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80076ca:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80076d0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80076d6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80076dc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80076e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80076ec:	f107 050c 	add.w	r5, r7, #12
 80076f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80076f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80076fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007700:	4618      	mov	r0, r3
 8007702:	3750      	adds	r7, #80	; 0x50
 8007704:	46bd      	mov	sp, r7
 8007706:	bdb0      	pop	{r4, r5, r7, pc}
 8007708:	10624dd3 	.word	0x10624dd3

0800770c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800771a:	2100      	movs	r1, #0
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff f8c7 	bl	80068b0 <VL53L0X_SetDeviceMode>
 8007722:	4603      	mov	r3, r0
 8007724:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d104      	bne.n	8007738 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7ff fd4c 	bl	80071cc <VL53L0X_PerformSingleMeasurement>
 8007734:	4603      	mov	r3, r0
 8007736:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d105      	bne.n	800774c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff febe 	bl	80074c4 <VL53L0X_GetRangingMeasurementData>
 8007748:	4603      	mov	r3, r0
 800774a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800774c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d105      	bne.n	8007760 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007754:	2100      	movs	r1, #0
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f962 	bl	8007a20 <VL53L0X_ClearInterruptMask>
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	4608      	mov	r0, r1
 8007776:	4611      	mov	r1, r2
 8007778:	461a      	mov	r2, r3
 800777a:	4603      	mov	r3, r0
 800777c:	70fb      	strb	r3, [r7, #3]
 800777e:	460b      	mov	r3, r1
 8007780:	70bb      	strb	r3, [r7, #2]
 8007782:	4613      	mov	r3, r2
 8007784:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007790:	23f6      	movs	r3, #246	; 0xf6
 8007792:	73fb      	strb	r3, [r7, #15]
 8007794:	e107      	b.n	80079a6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8007796:	78bb      	ldrb	r3, [r7, #2]
 8007798:	2b14      	cmp	r3, #20
 800779a:	d110      	bne.n	80077be <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800779c:	7e3b      	ldrb	r3, [r7, #24]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80077a2:	2310      	movs	r3, #16
 80077a4:	73bb      	strb	r3, [r7, #14]
 80077a6:	e001      	b.n	80077ac <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80077a8:	2301      	movs	r3, #1
 80077aa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	461a      	mov	r2, r3
 80077b0:	2184      	movs	r1, #132	; 0x84
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f003 fcda 	bl	800b16c <VL53L0X_WrByte>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
 80077bc:	e0f3      	b.n	80079a6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80077be:	78bb      	ldrb	r3, [r7, #2]
 80077c0:	2b15      	cmp	r3, #21
 80077c2:	f040 8097 	bne.w	80078f4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80077c6:	2201      	movs	r2, #1
 80077c8:	21ff      	movs	r1, #255	; 0xff
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f003 fcce 	bl	800b16c <VL53L0X_WrByte>
 80077d0:	4603      	mov	r3, r0
 80077d2:	461a      	mov	r2, r3
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80077da:	2200      	movs	r2, #0
 80077dc:	2100      	movs	r1, #0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f003 fcc4 	bl	800b16c <VL53L0X_WrByte>
 80077e4:	4603      	mov	r3, r0
 80077e6:	461a      	mov	r2, r3
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80077ee:	2200      	movs	r2, #0
 80077f0:	21ff      	movs	r1, #255	; 0xff
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f003 fcba 	bl	800b16c <VL53L0X_WrByte>
 80077f8:	4603      	mov	r3, r0
 80077fa:	461a      	mov	r2, r3
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	4313      	orrs	r3, r2
 8007800:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007802:	2201      	movs	r2, #1
 8007804:	2180      	movs	r1, #128	; 0x80
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f003 fcb0 	bl	800b16c <VL53L0X_WrByte>
 800780c:	4603      	mov	r3, r0
 800780e:	461a      	mov	r2, r3
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	4313      	orrs	r3, r2
 8007814:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8007816:	2202      	movs	r2, #2
 8007818:	2185      	movs	r1, #133	; 0x85
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f003 fca6 	bl	800b16c <VL53L0X_WrByte>
 8007820:	4603      	mov	r3, r0
 8007822:	461a      	mov	r2, r3
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	4313      	orrs	r3, r2
 8007828:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800782a:	2204      	movs	r2, #4
 800782c:	21ff      	movs	r1, #255	; 0xff
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f003 fc9c 	bl	800b16c <VL53L0X_WrByte>
 8007834:	4603      	mov	r3, r0
 8007836:	461a      	mov	r2, r3
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	4313      	orrs	r3, r2
 800783c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800783e:	2200      	movs	r2, #0
 8007840:	21cd      	movs	r1, #205	; 0xcd
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f003 fc92 	bl	800b16c <VL53L0X_WrByte>
 8007848:	4603      	mov	r3, r0
 800784a:	461a      	mov	r2, r3
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	4313      	orrs	r3, r2
 8007850:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007852:	2211      	movs	r2, #17
 8007854:	21cc      	movs	r1, #204	; 0xcc
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f003 fc88 	bl	800b16c <VL53L0X_WrByte>
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	4313      	orrs	r3, r2
 8007864:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8007866:	2207      	movs	r2, #7
 8007868:	21ff      	movs	r1, #255	; 0xff
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f003 fc7e 	bl	800b16c <VL53L0X_WrByte>
 8007870:	4603      	mov	r3, r0
 8007872:	461a      	mov	r2, r3
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	4313      	orrs	r3, r2
 8007878:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800787a:	2200      	movs	r2, #0
 800787c:	21be      	movs	r1, #190	; 0xbe
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f003 fc74 	bl	800b16c <VL53L0X_WrByte>
 8007884:	4603      	mov	r3, r0
 8007886:	461a      	mov	r2, r3
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	4313      	orrs	r3, r2
 800788c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800788e:	2206      	movs	r2, #6
 8007890:	21ff      	movs	r1, #255	; 0xff
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f003 fc6a 	bl	800b16c <VL53L0X_WrByte>
 8007898:	4603      	mov	r3, r0
 800789a:	461a      	mov	r2, r3
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	4313      	orrs	r3, r2
 80078a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80078a2:	2209      	movs	r2, #9
 80078a4:	21cc      	movs	r1, #204	; 0xcc
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f003 fc60 	bl	800b16c <VL53L0X_WrByte>
 80078ac:	4603      	mov	r3, r0
 80078ae:	461a      	mov	r2, r3
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80078b6:	2200      	movs	r2, #0
 80078b8:	21ff      	movs	r1, #255	; 0xff
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f003 fc56 	bl	800b16c <VL53L0X_WrByte>
 80078c0:	4603      	mov	r3, r0
 80078c2:	461a      	mov	r2, r3
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80078ca:	2201      	movs	r2, #1
 80078cc:	21ff      	movs	r1, #255	; 0xff
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f003 fc4c 	bl	800b16c <VL53L0X_WrByte>
 80078d4:	4603      	mov	r3, r0
 80078d6:	461a      	mov	r2, r3
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	4313      	orrs	r3, r2
 80078dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80078de:	2200      	movs	r2, #0
 80078e0:	2100      	movs	r1, #0
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f003 fc42 	bl	800b16c <VL53L0X_WrByte>
 80078e8:	4603      	mov	r3, r0
 80078ea:	461a      	mov	r2, r3
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	73fb      	strb	r3, [r7, #15]
 80078f2:	e058      	b.n	80079a6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80078f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d121      	bne.n	8007940 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80078fc:	787b      	ldrb	r3, [r7, #1]
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d81b      	bhi.n	800793a <VL53L0X_SetGpioConfig+0x1ce>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <VL53L0X_SetGpioConfig+0x19c>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	0800791d 	.word	0x0800791d
 800790c:	08007923 	.word	0x08007923
 8007910:	08007929 	.word	0x08007929
 8007914:	0800792f 	.word	0x0800792f
 8007918:	08007935 	.word	0x08007935
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800791c:	2300      	movs	r3, #0
 800791e:	73bb      	strb	r3, [r7, #14]
				break;
 8007920:	e00f      	b.n	8007942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8007922:	2301      	movs	r3, #1
 8007924:	73bb      	strb	r3, [r7, #14]
				break;
 8007926:	e00c      	b.n	8007942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007928:	2302      	movs	r3, #2
 800792a:	73bb      	strb	r3, [r7, #14]
				break;
 800792c:	e009      	b.n	8007942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800792e:	2303      	movs	r3, #3
 8007930:	73bb      	strb	r3, [r7, #14]
				break;
 8007932:	e006      	b.n	8007942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8007934:	2304      	movs	r3, #4
 8007936:	73bb      	strb	r3, [r7, #14]
				break;
 8007938:	e003      	b.n	8007942 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800793a:	23f5      	movs	r3, #245	; 0xf5
 800793c:	73fb      	strb	r3, [r7, #15]
 800793e:	e000      	b.n	8007942 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007940:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8007942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d107      	bne.n	800795a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	461a      	mov	r2, r3
 800794e:	210a      	movs	r1, #10
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f003 fc0b 	bl	800b16c <VL53L0X_WrByte>
 8007956:	4603      	mov	r3, r0
 8007958:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800795a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10f      	bne.n	8007982 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007962:	7e3b      	ldrb	r3, [r7, #24]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d102      	bne.n	800796e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	73bb      	strb	r3, [r7, #14]
 800796c:	e001      	b.n	8007972 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800796e:	2310      	movs	r3, #16
 8007970:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	22ef      	movs	r2, #239	; 0xef
 8007976:	2184      	movs	r1, #132	; 0x84
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f003 fc45 	bl	800b208 <VL53L0X_UpdateByte>
 800797e:	4603      	mov	r3, r0
 8007980:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	787a      	ldrb	r2, [r7, #1]
 800798e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d105      	bne.n	80079a6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800799a:	2100      	movs	r1, #0
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f83f 	bl	8007a20 <VL53L0X_ClearInterruptMask>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop

080079b4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	607a      	str	r2, [r7, #4]
 80079be:	603b      	str	r3, [r7, #0]
 80079c0:	460b      	mov	r3, r1
 80079c2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80079c8:	f107 0314 	add.w	r3, r7, #20
 80079cc:	461a      	mov	r2, r3
 80079ce:	210e      	movs	r1, #14
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f003 fb57 	bl	800b084 <VL53L0X_RdWord>
 80079d6:	4603      	mov	r3, r0
 80079d8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80079da:	8abb      	ldrh	r3, [r7, #20]
 80079dc:	045b      	lsls	r3, r3, #17
 80079de:	461a      	mov	r2, r3
 80079e0:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <VL53L0X_GetInterruptThresholds+0x68>)
 80079e2:	4013      	ands	r3, r2
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80079e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10f      	bne.n	8007a10 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80079f0:	f107 0314 	add.w	r3, r7, #20
 80079f4:	461a      	mov	r2, r3
 80079f6:	210c      	movs	r1, #12
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f003 fb43 	bl	800b084 <VL53L0X_RdWord>
 80079fe:	4603      	mov	r3, r0
 8007a00:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007a02:	8abb      	ldrh	r3, [r7, #20]
 8007a04:	045b      	lsls	r3, r3, #17
 8007a06:	461a      	mov	r2, r3
 8007a08:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <VL53L0X_GetInterruptThresholds+0x68>)
 8007a0a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	1ffe0000 	.word	0x1ffe0000

08007a20 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007a32:	2201      	movs	r2, #1
 8007a34:	210b      	movs	r1, #11
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f003 fb98 	bl	800b16c <VL53L0X_WrByte>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007a40:	2200      	movs	r2, #0
 8007a42:	210b      	movs	r1, #11
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f003 fb91 	bl	800b16c <VL53L0X_WrByte>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007a54:	f107 030d 	add.w	r3, r7, #13
 8007a58:	461a      	mov	r2, r3
 8007a5a:	2113      	movs	r1, #19
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f003 fa8a 	bl	800af76 <VL53L0X_RdByte>
 8007a62:	4603      	mov	r3, r0
 8007a64:	461a      	mov	r2, r3
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007a72:	7b7b      	ldrb	r3, [r7, #13]
 8007a74:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d006      	beq.n	8007a8a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d803      	bhi.n	8007a8a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0d3      	beq.n	8007a32 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d901      	bls.n	8007a94 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007a90:	23f4      	movs	r3, #244	; 0xf4
 8007a92:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007aae:	f107 030e 	add.w	r3, r7, #14
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	2113      	movs	r1, #19
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f003 fa5d 	bl	800af76 <VL53L0X_RdByte>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	f003 0207 	and.w	r2, r3, #7
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	f003 0318 	and.w	r3, r3, #24
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007ad4:	23fa      	movs	r3, #250	; 0xfa
 8007ad6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007af0:	2300      	movs	r3, #0
 8007af2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 fa03 	bl	8007f04 <VL53L0X_perform_ref_spad_management>
 8007afe:	4603      	mov	r3, r0
 8007b00:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007b1c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007b20:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b26:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007b28:	f107 0308 	add.w	r3, r7, #8
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2128      	movs	r1, #40	; 0x28
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f003 faa7 	bl	800b084 <VL53L0X_RdWord>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d11e      	bne.n	8007b80 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007b42:	893b      	ldrh	r3, [r7, #8]
 8007b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007b4c:	893b      	ldrh	r3, [r7, #8]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	dd0b      	ble.n	8007b70 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007b58:	893a      	ldrh	r2, [r7, #8]
 8007b5a:	897b      	ldrh	r3, [r7, #10]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	b21b      	sxth	r3, r3
 8007b62:	461a      	mov	r2, r3
					* 250;
 8007b64:	23fa      	movs	r3, #250	; 0xfa
 8007b66:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e007      	b.n	8007b80 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007b70:	893b      	ldrh	r3, [r7, #8]
 8007b72:	b21b      	sxth	r3, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	23fa      	movs	r3, #250	; 0xfa
 8007b78:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b08b      	sub	sp, #44	; 0x2c
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bbc:	69b9      	ldr	r1, [r7, #24]
 8007bbe:	fb01 f202 	mul.w	r2, r1, r2
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bca:	e030      	b.n	8007c2e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	4413      	add	r3, r2
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d11e      	bne.n	8007c20 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007be2:	7ffa      	ldrb	r2, [r7, #31]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	fa42 f303 	asr.w	r3, r2, r3
 8007bea:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007bf0:	e016      	b.n	8007c20 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007bf2:	7ffb      	ldrb	r3, [r7, #31]
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <get_next_good_spad+0x88>
				success = 1;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	fb02 f203 	mul.w	r2, r2, r3
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	601a      	str	r2, [r3, #0]
				break;
 8007c12:	e009      	b.n	8007c28 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007c14:	7ffb      	ldrb	r3, [r7, #31]
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007c20:	6a3a      	ldr	r2, [r7, #32]
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d3e4      	bcc.n	8007bf2 <get_next_good_spad+0x66>
				coarseIndex++) {
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d202      	bcs.n	8007c3c <get_next_good_spad+0xb0>
 8007c36:	7fbb      	ldrb	r3, [r7, #30]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0c7      	beq.n	8007bcc <get_next_good_spad+0x40>
		}
	}
}
 8007c3c:	bf00      	nop
 8007c3e:	372c      	adds	r7, #44	; 0x2c
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	099b      	lsrs	r3, r3, #6
 8007c58:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007c5a:	4a07      	ldr	r2, [pc, #28]	; (8007c78 <is_aperture+0x30>)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <is_aperture+0x22>
		isAperture = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	2000036c 	.word	0x2000036c

08007c7c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b089      	sub	sp, #36	; 0x24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c98:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ca2:	69b9      	ldr	r1, [r7, #24]
 8007ca4:	fb01 f202 	mul.w	r2, r1, r2
 8007ca8:	1a9b      	subs	r3, r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d302      	bcc.n	8007cba <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007cb4:	23ce      	movs	r3, #206	; 0xce
 8007cb6:	77fb      	strb	r3, [r7, #31]
 8007cb8:	e010      	b.n	8007cdc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b25a      	sxtb	r2, r3
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ccc:	b25b      	sxtb	r3, r3
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	b259      	sxtb	r1, r3
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	b2ca      	uxtb	r2, r1
 8007cda:	701a      	strb	r2, [r3, #0]

	return status;
 8007cdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3724      	adds	r7, #36	; 0x24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007cf6:	2306      	movs	r3, #6
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	21b0      	movs	r1, #176	; 0xb0
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f003 f965 	bl	800afcc <VL53L0X_WriteMulti>
 8007d02:	4603      	mov	r3, r0
 8007d04:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007d1c:	2306      	movs	r3, #6
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	21b0      	movs	r1, #176	; 0xb0
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f003 f982 	bl	800b02c <VL53L0X_ReadMulti>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8007d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08c      	sub	sp, #48	; 0x30
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	460b      	mov	r3, r1
 8007d46:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d50:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d54:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007d56:	2300      	movs	r3, #0
 8007d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d5a:	e02b      	b.n	8007db4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007d5c:	f107 031c 	add.w	r3, r7, #28
 8007d60:	6a3a      	ldr	r2, [r7, #32]
 8007d62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff ff11 	bl	8007b8c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d70:	d103      	bne.n	8007d7a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007d72:	23ce      	movs	r3, #206	; 0xce
 8007d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007d78:	e020      	b.n	8007dbc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d80:	4413      	add	r3, r2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff ff60 	bl	8007c48 <is_aperture>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d003      	beq.n	8007d9a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007d92:	23ce      	movs	r3, #206	; 0xce
 8007d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007d98:	e010      	b.n	8007dbc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007d9e:	6a3a      	ldr	r2, [r7, #32]
 8007da0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007da2:	6838      	ldr	r0, [r7, #0]
 8007da4:	f7ff ff6a 	bl	8007c7c <enable_spad_bit>
		currentSpad++;
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	3301      	adds	r3, #1
 8007dac:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	3301      	adds	r3, #1
 8007db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d3cf      	bcc.n	8007d5c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dbe:	6a3a      	ldr	r2, [r7, #32]
 8007dc0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007dc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7ff ff8d 	bl	8007cec <set_ref_spad_map>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007dd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d121      	bne.n	8007e24 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	4619      	mov	r1, r3
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff ff93 	bl	8007d12 <get_ref_spad_map>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007df6:	e011      	b.n	8007e1c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	4413      	add	r3, r2
 8007dfe:	781a      	ldrb	r2, [r3, #0]
 8007e00:	f107 0114 	add.w	r1, r7, #20
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	440b      	add	r3, r1
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d003      	beq.n	8007e16 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007e0e:	23ce      	movs	r3, #206	; 0xce
 8007e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007e14:	e006      	b.n	8007e24 <enable_ref_spads+0xec>
			}
			i++;
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	3301      	adds	r3, #1
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d3e9      	bcc.n	8007df8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007e24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3730      	adds	r7, #48	; 0x30
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	; 0x28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007e4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007e50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d107      	bne.n	8007e68 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007e58:	22c0      	movs	r2, #192	; 0xc0
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f003 f985 	bl	800b16c <VL53L0X_WrByte>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007e68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d108      	bne.n	8007e82 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007e70:	f107 0308 	add.w	r3, r7, #8
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7ff fc48 	bl	800770c <VL53L0X_PerformSingleRangingMeasurement>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007e82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d107      	bne.n	8007e9a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	21ff      	movs	r1, #255	; 0xff
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f003 f96c 	bl	800b16c <VL53L0X_WrByte>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007e9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d107      	bne.n	8007eb2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	21b6      	movs	r1, #182	; 0xb6
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f003 f8ec 	bl	800b084 <VL53L0X_RdWord>
 8007eac:	4603      	mov	r3, r0
 8007eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007eb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d107      	bne.n	8007eca <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007eba:	2200      	movs	r2, #0
 8007ebc:	21ff      	movs	r1, #255	; 0xff
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f003 f954 	bl	800b16c <VL53L0X_WrByte>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007eca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d112      	bne.n	8007ef8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	2101      	movs	r1, #1
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f003 f946 	bl	800b16c <VL53L0X_WrByte>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007ee6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ef4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3728      	adds	r7, #40	; 0x28
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007f04:	b590      	push	{r4, r7, lr}
 8007f06:	b09d      	sub	sp, #116	; 0x74
 8007f08:	af06      	add	r7, sp, #24
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f10:	2300      	movs	r3, #0
 8007f12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007f16:	23b4      	movs	r3, #180	; 0xb4
 8007f18:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007f20:	232c      	movs	r3, #44	; 0x2c
 8007f22:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007f30:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007f34:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007f3e:	2306      	movs	r3, #6
 8007f40:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 8007f68:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f6e:	e009      	b.n	8007f84 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f80:	3301      	adds	r3, #1
 8007f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d3f1      	bcc.n	8007f70 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	21ff      	movs	r1, #255	; 0xff
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f003 f8eb 	bl	800b16c <VL53L0X_WrByte>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007f9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d107      	bne.n	8007fb4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	214f      	movs	r1, #79	; 0x4f
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f003 f8df 	bl	800b16c <VL53L0X_WrByte>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007fb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d107      	bne.n	8007fcc <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007fbc:	222c      	movs	r2, #44	; 0x2c
 8007fbe:	214e      	movs	r1, #78	; 0x4e
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f003 f8d3 	bl	800b16c <VL53L0X_WrByte>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007fcc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d107      	bne.n	8007fe4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	21ff      	movs	r1, #255	; 0xff
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f003 f8c7 	bl	800b16c <VL53L0X_WrByte>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007fe4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d109      	bne.n	8008000 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007fec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	21b6      	movs	r1, #182	; 0xb6
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f003 f8b9 	bl	800b16c <VL53L0X_WrByte>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008000:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008004:	2b00      	cmp	r3, #0
 8008006:	d107      	bne.n	8008018 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008008:	2200      	movs	r2, #0
 800800a:	2180      	movs	r1, #128	; 0x80
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f003 f8ad 	bl	800b16c <VL53L0X_WrByte>
 8008012:	4603      	mov	r3, r0
 8008014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008018:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008020:	f107 0210 	add.w	r2, r7, #16
 8008024:	f107 0111 	add.w	r1, r7, #17
 8008028:	2300      	movs	r3, #0
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 fbbb 	bl	80087a6 <VL53L0X_perform_ref_calibration>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008036:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800803a:	2b00      	cmp	r3, #0
 800803c:	d121      	bne.n	8008082 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008044:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800804a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800805a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800805e:	f107 0218 	add.w	r2, r7, #24
 8008062:	9204      	str	r2, [sp, #16]
 8008064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008066:	9203      	str	r2, [sp, #12]
 8008068:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800806a:	9202      	str	r2, [sp, #8]
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4623      	mov	r3, r4
 8008074:	4602      	mov	r2, r0
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fe5e 	bl	8007d38 <enable_ref_spads>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008082:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008086:	2b00      	cmp	r3, #0
 8008088:	d174      	bne.n	8008174 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800808e:	f107 0312 	add.w	r3, r7, #18
 8008092:	4619      	mov	r1, r3
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7ff fecb 	bl	8007e30 <perform_ref_signal_measurement>
 800809a:	4603      	mov	r3, r0
 800809c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80080a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d161      	bne.n	800816c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80080a8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80080aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d25d      	bcs.n	800816c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80080b0:	2300      	movs	r3, #0
 80080b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80080b4:	e009      	b.n	80080ca <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80080c0:	2200      	movs	r2, #0
 80080c2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80080c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080c6:	3301      	adds	r3, #1
 80080c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80080ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d3f1      	bcc.n	80080b6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80080d2:	e002      	b.n	80080da <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80080d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d6:	3301      	adds	r3, #1
 80080d8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80080da:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80080de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e0:	4413      	add	r3, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff fdb0 	bl	8007c48 <is_aperture>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d103      	bne.n	80080f6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80080ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d3ee      	bcc.n	80080d4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80080f6:	2301      	movs	r3, #1
 80080f8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80080fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800810a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800810e:	f107 0218 	add.w	r2, r7, #24
 8008112:	9204      	str	r2, [sp, #16]
 8008114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008116:	9203      	str	r2, [sp, #12]
 8008118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800811a:	9202      	str	r2, [sp, #8]
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	4623      	mov	r3, r4
 8008124:	4602      	mov	r2, r0
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f7ff fe06 	bl	8007d38 <enable_ref_spads>
 800812c:	4603      	mov	r3, r0
 800812e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008132:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008136:	2b00      	cmp	r3, #0
 8008138:	d11b      	bne.n	8008172 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800813e:	f107 0312 	add.w	r3, r7, #18
 8008142:	4619      	mov	r1, r3
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f7ff fe73 	bl	8007e30 <perform_ref_signal_measurement>
 800814a:	4603      	mov	r3, r0
 800814c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008150:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10c      	bne.n	8008172 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008158:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800815a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800815c:	429a      	cmp	r2, r3
 800815e:	d208      	bcs.n	8008172 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008160:	2301      	movs	r3, #1
 8008162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8008166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008168:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800816a:	e002      	b.n	8008172 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800816c:	2300      	movs	r3, #0
 800816e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008170:	e000      	b.n	8008174 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008172:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008174:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008178:	2b00      	cmp	r3, #0
 800817a:	f040 80af 	bne.w	80082dc <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800817e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008180:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008182:	429a      	cmp	r2, r3
 8008184:	f240 80aa 	bls.w	80082dc <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800818a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008198:	f107 031c 	add.w	r3, r7, #28
 800819c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800819e:	4618      	mov	r0, r3
 80081a0:	f00a fe57 	bl	8012e52 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80081a4:	8a7b      	ldrh	r3, [r7, #18]
 80081a6:	461a      	mov	r2, r3
 80081a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	bfb8      	it	lt
 80081b0:	425b      	neglt	r3, r3
 80081b2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80081ba:	e086      	b.n	80082ca <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80081c2:	f107 0314 	add.w	r3, r7, #20
 80081c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081ca:	f7ff fcdf 	bl	8007b8c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d4:	d103      	bne.n	80081de <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80081d6:	23ce      	movs	r3, #206	; 0xce
 80081d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80081dc:	e07e      	b.n	80082dc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80081de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e0:	3301      	adds	r3, #1
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80081e4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	4413      	add	r3, r2
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff fd2b 	bl	8007c48 <is_aperture>
 80081f2:	4603      	mov	r3, r0
 80081f4:	461a      	mov	r2, r3
 80081f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d003      	beq.n	8008204 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80081fc:	23ce      	movs	r3, #206	; 0xce
 80081fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008202:	e06b      	b.n	80082dc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800820e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fd32 	bl	8007c7c <enable_spad_bit>
 8008218:	4603      	mov	r3, r0
 800821a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800821e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10c      	bne.n	8008240 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008228:	3301      	adds	r3, #1
 800822a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008232:	4619      	mov	r1, r3
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7ff fd59 	bl	8007cec <set_ref_spad_map>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008240:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008244:	2b00      	cmp	r3, #0
 8008246:	d146      	bne.n	80082d6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008248:	f107 0312 	add.w	r3, r7, #18
 800824c:	4619      	mov	r1, r3
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff fdee 	bl	8007e30 <perform_ref_signal_measurement>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800825a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800825e:	2b00      	cmp	r3, #0
 8008260:	d13b      	bne.n	80082da <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008262:	8a7b      	ldrh	r3, [r7, #18]
 8008264:	461a      	mov	r2, r3
 8008266:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	bfb8      	it	lt
 800826e:	425b      	neglt	r3, r3
 8008270:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008272:	8a7b      	ldrh	r3, [r7, #18]
 8008274:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008276:	429a      	cmp	r2, r3
 8008278:	d21c      	bcs.n	80082b4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800827a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800827e:	429a      	cmp	r2, r3
 8008280:	d914      	bls.n	80082ac <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008282:	f107 031c 	add.w	r3, r7, #28
 8008286:	4619      	mov	r1, r3
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7ff fd2f 	bl	8007cec <set_ref_spad_map>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800829a:	f107 011c 	add.w	r1, r7, #28
 800829e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082a0:	4618      	mov	r0, r3
 80082a2:	f00a fdd6 	bl	8012e52 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80082a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a8:	3b01      	subs	r3, #1
 80082aa:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80082ac:	2301      	movs	r3, #1
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b2:	e00a      	b.n	80082ca <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80082be:	f107 031c 	add.w	r3, r7, #28
 80082c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082c4:	4618      	mov	r0, r3
 80082c6:	f00a fdc4 	bl	8012e52 <memcpy>
		while (!complete) {
 80082ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f43f af74 	beq.w	80081bc <VL53L0X_perform_ref_spad_management+0x2b8>
 80082d4:	e002      	b.n	80082dc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80082d6:	bf00      	nop
 80082d8:	e000      	b.n	80082dc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80082da:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d115      	bne.n	8008310 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082e8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80082f0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	781a      	ldrb	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008310:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008314:	4618      	mov	r0, r3
 8008316:	375c      	adds	r7, #92	; 0x5c
 8008318:	46bd      	mov	sp, r7
 800831a:	bd90      	pop	{r4, r7, pc}

0800831c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800831c:	b590      	push	{r4, r7, lr}
 800831e:	b093      	sub	sp, #76	; 0x4c
 8008320:	af06      	add	r7, sp, #24
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	4613      	mov	r3, r2
 8008328:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800832a:	2300      	movs	r3, #0
 800832c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008334:	23b4      	movs	r3, #180	; 0xb4
 8008336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800833a:	2306      	movs	r3, #6
 800833c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800833e:	232c      	movs	r3, #44	; 0x2c
 8008340:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008342:	2201      	movs	r2, #1
 8008344:	21ff      	movs	r1, #255	; 0xff
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f002 ff10 	bl	800b16c <VL53L0X_WrByte>
 800834c:	4603      	mov	r3, r0
 800834e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008352:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008356:	2b00      	cmp	r3, #0
 8008358:	d107      	bne.n	800836a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800835a:	2200      	movs	r2, #0
 800835c:	214f      	movs	r1, #79	; 0x4f
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f002 ff04 	bl	800b16c <VL53L0X_WrByte>
 8008364:	4603      	mov	r3, r0
 8008366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800836a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800836e:	2b00      	cmp	r3, #0
 8008370:	d107      	bne.n	8008382 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008372:	222c      	movs	r2, #44	; 0x2c
 8008374:	214e      	movs	r1, #78	; 0x4e
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f002 fef8 	bl	800b16c <VL53L0X_WrByte>
 800837c:	4603      	mov	r3, r0
 800837e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008382:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008386:	2b00      	cmp	r3, #0
 8008388:	d107      	bne.n	800839a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800838a:	2200      	movs	r2, #0
 800838c:	21ff      	movs	r1, #255	; 0xff
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f002 feec 	bl	800b16c <VL53L0X_WrByte>
 8008394:	4603      	mov	r3, r0
 8008396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800839a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d109      	bne.n	80083b6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80083a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a6:	461a      	mov	r2, r3
 80083a8:	21b6      	movs	r1, #182	; 0xb6
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f002 fede 	bl	800b16c <VL53L0X_WrByte>
 80083b0:	4603      	mov	r3, r0
 80083b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80083b6:	2300      	movs	r3, #0
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
 80083ba:	e009      	b.n	80083d0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80083c6:	2200      	movs	r2, #0
 80083c8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	3301      	adds	r3, #1
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24
 80083d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d3f1      	bcc.n	80083bc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d011      	beq.n	8008402 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80083de:	e002      	b.n	80083e6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	3301      	adds	r3, #1
 80083e4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80083e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	4413      	add	r3, r2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7ff fc2a 	bl	8007c48 <is_aperture>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <VL53L0X_set_reference_spads+0xe6>
 80083fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d3ee      	bcc.n	80083e0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800840e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008412:	79f9      	ldrb	r1, [r7, #7]
 8008414:	f107 0214 	add.w	r2, r7, #20
 8008418:	9204      	str	r2, [sp, #16]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	9203      	str	r2, [sp, #12]
 800841e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008420:	9202      	str	r2, [sp, #8]
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	4623      	mov	r3, r4
 800842a:	4602      	mov	r2, r0
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f7ff fc83 	bl	8007d38 <enable_ref_spads>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008438:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10c      	bne.n	800845a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	b2da      	uxtb	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	79fa      	ldrb	r2, [r7, #7]
 8008456:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800845a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800845e:	4618      	mov	r0, r3
 8008460:	3734      	adds	r7, #52	; 0x34
 8008462:	46bd      	mov	sp, r7
 8008464:	bd90      	pop	{r4, r7, pc}

08008466 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	460b      	mov	r3, r1
 8008470:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008472:	2300      	movs	r3, #0
 8008474:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10a      	bne.n	8008494 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	f043 0301 	orr.w	r3, r3, #1
 8008484:	b2db      	uxtb	r3, r3
 8008486:	461a      	mov	r2, r3
 8008488:	2100      	movs	r1, #0
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f002 fe6e 	bl	800b16c <VL53L0X_WrByte>
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d104      	bne.n	80084a6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f9bf 	bl	8008820 <VL53L0X_measurement_poll_for_completion>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80084a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d105      	bne.n	80084ba <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80084ae:	2100      	movs	r1, #0
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fab5 	bl	8007a20 <VL53L0X_ClearInterruptMask>
 80084b6:	4603      	mov	r3, r0
 80084b8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80084ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d106      	bne.n	80084d0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80084c2:	2200      	movs	r2, #0
 80084c4:	2100      	movs	r1, #0
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f002 fe50 	bl	800b16c <VL53L0X_WrByte>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73fb      	strb	r3, [r7, #15]

	return Status;
 80084d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	4608      	mov	r0, r1
 80084e6:	4611      	mov	r1, r2
 80084e8:	461a      	mov	r2, r3
 80084ea:	4603      	mov	r3, r0
 80084ec:	70fb      	strb	r3, [r7, #3]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70bb      	strb	r3, [r7, #2]
 80084f2:	4613      	mov	r3, r2
 80084f4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80084fe:	2201      	movs	r2, #1
 8008500:	21ff      	movs	r1, #255	; 0xff
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f002 fe32 	bl	800b16c <VL53L0X_WrByte>
 8008508:	4603      	mov	r3, r0
 800850a:	461a      	mov	r2, r3
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	4313      	orrs	r3, r2
 8008510:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008512:	2200      	movs	r2, #0
 8008514:	2100      	movs	r1, #0
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f002 fe28 	bl	800b16c <VL53L0X_WrByte>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	4313      	orrs	r3, r2
 8008524:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008526:	2200      	movs	r2, #0
 8008528:	21ff      	movs	r1, #255	; 0xff
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f002 fe1e 	bl	800b16c <VL53L0X_WrByte>
 8008530:	4603      	mov	r3, r0
 8008532:	461a      	mov	r2, r3
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	4313      	orrs	r3, r2
 8008538:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01e      	beq.n	800857e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008540:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d009      	beq.n	800855c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	21cb      	movs	r1, #203	; 0xcb
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f002 fd12 	bl	800af76 <VL53L0X_RdByte>
 8008552:	4603      	mov	r3, r0
 8008554:	461a      	mov	r2, r3
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	4313      	orrs	r3, r2
 800855a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800855c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008560:	2b00      	cmp	r3, #0
 8008562:	d02a      	beq.n	80085ba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008564:	f107 030e 	add.w	r3, r7, #14
 8008568:	461a      	mov	r2, r3
 800856a:	21ee      	movs	r1, #238	; 0xee
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f002 fd02 	bl	800af76 <VL53L0X_RdByte>
 8008572:	4603      	mov	r3, r0
 8008574:	461a      	mov	r2, r3
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	4313      	orrs	r3, r2
 800857a:	73fb      	strb	r3, [r7, #15]
 800857c:	e01d      	b.n	80085ba <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800857e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008586:	78bb      	ldrb	r3, [r7, #2]
 8008588:	461a      	mov	r2, r3
 800858a:	21cb      	movs	r1, #203	; 0xcb
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f002 fded 	bl	800b16c <VL53L0X_WrByte>
 8008592:	4603      	mov	r3, r0
 8008594:	461a      	mov	r2, r3
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	4313      	orrs	r3, r2
 800859a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800859c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80085a4:	787b      	ldrb	r3, [r7, #1]
 80085a6:	2280      	movs	r2, #128	; 0x80
 80085a8:	21ee      	movs	r1, #238	; 0xee
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f002 fe2c 	bl	800b208 <VL53L0X_UpdateByte>
 80085b0:	4603      	mov	r3, r0
 80085b2:	461a      	mov	r2, r3
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80085ba:	2201      	movs	r2, #1
 80085bc:	21ff      	movs	r1, #255	; 0xff
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f002 fdd4 	bl	800b16c <VL53L0X_WrByte>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80085ce:	2201      	movs	r2, #1
 80085d0:	2100      	movs	r1, #0
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f002 fdca 	bl	800b16c <VL53L0X_WrByte>
 80085d8:	4603      	mov	r3, r0
 80085da:	461a      	mov	r2, r3
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	4313      	orrs	r3, r2
 80085e0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80085e2:	2200      	movs	r2, #0
 80085e4:	21ff      	movs	r1, #255	; 0xff
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f002 fdc0 	bl	800b16c <VL53L0X_WrByte>
 80085ec:	4603      	mov	r3, r0
 80085ee:	461a      	mov	r2, r3
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	f023 0310 	bic.w	r3, r3, #16
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	701a      	strb	r2, [r3, #0]

	return Status;
 8008602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b08a      	sub	sp, #40	; 0x28
 8008612:	af04      	add	r7, sp, #16
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	4611      	mov	r1, r2
 800861a:	461a      	mov	r2, r3
 800861c:	460b      	mov	r3, r1
 800861e:	71fb      	strb	r3, [r7, #7]
 8008620:	4613      	mov	r3, r2
 8008622:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008624:	2300      	movs	r3, #0
 8008626:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008628:	2300      	movs	r3, #0
 800862a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008638:	79bb      	ldrb	r3, [r7, #6]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008644:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8008646:	2201      	movs	r2, #1
 8008648:	2101      	movs	r1, #1
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f002 fd8e 	bl	800b16c <VL53L0X_WrByte>
 8008650:	4603      	mov	r3, r0
 8008652:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d105      	bne.n	8008668 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800865c:	2140      	movs	r1, #64	; 0x40
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff ff01 	bl	8008466 <VL53L0X_perform_single_ref_calibration>
 8008664:	4603      	mov	r3, r0
 8008666:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008668:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d115      	bne.n	800869c <VL53L0X_perform_vhv_calibration+0x8e>
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d112      	bne.n	800869c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008676:	7d39      	ldrb	r1, [r7, #20]
 8008678:	7d7a      	ldrb	r2, [r7, #21]
 800867a:	2300      	movs	r3, #0
 800867c:	9303      	str	r3, [sp, #12]
 800867e:	2301      	movs	r3, #1
 8008680:	9302      	str	r3, [sp, #8]
 8008682:	f107 0313 	add.w	r3, r7, #19
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	460b      	mov	r3, r1
 800868e:	2101      	movs	r1, #1
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f7ff ff23 	bl	80084dc <VL53L0X_ref_calibration_io>
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]
 800869a:	e002      	b.n	80086a2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80086a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d112      	bne.n	80086d0 <VL53L0X_perform_vhv_calibration+0xc2>
 80086aa:	79bb      	ldrb	r3, [r7, #6]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00f      	beq.n	80086d0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80086b0:	7dbb      	ldrb	r3, [r7, #22]
 80086b2:	461a      	mov	r2, r3
 80086b4:	2101      	movs	r1, #1
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f002 fd58 	bl	800b16c <VL53L0X_WrByte>
 80086bc:	4603      	mov	r3, r0
 80086be:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80086c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d103      	bne.n	80086d0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	7dba      	ldrb	r2, [r7, #22]
 80086cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80086d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08a      	sub	sp, #40	; 0x28
 80086e0:	af04      	add	r7, sp, #16
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4611      	mov	r1, r2
 80086e8:	461a      	mov	r2, r3
 80086ea:	460b      	mov	r3, r1
 80086ec:	71fb      	strb	r3, [r7, #7]
 80086ee:	4613      	mov	r3, r2
 80086f0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086f2:	2300      	movs	r3, #0
 80086f4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008702:	79bb      	ldrb	r3, [r7, #6]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800870e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008710:	2202      	movs	r2, #2
 8008712:	2101      	movs	r1, #1
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f002 fd29 	bl	800b16c <VL53L0X_WrByte>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800871e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d105      	bne.n	8008732 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008726:	2100      	movs	r1, #0
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f7ff fe9c 	bl	8008466 <VL53L0X_perform_single_ref_calibration>
 800872e:	4603      	mov	r3, r0
 8008730:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d115      	bne.n	8008766 <VL53L0X_perform_phase_calibration+0x8a>
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d112      	bne.n	8008766 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008740:	7d39      	ldrb	r1, [r7, #20]
 8008742:	7d7a      	ldrb	r2, [r7, #21]
 8008744:	2301      	movs	r3, #1
 8008746:	9303      	str	r3, [sp, #12]
 8008748:	2300      	movs	r3, #0
 800874a:	9302      	str	r3, [sp, #8]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	f107 0313 	add.w	r3, r7, #19
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	460b      	mov	r3, r1
 8008758:	2101      	movs	r1, #1
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f7ff febe 	bl	80084dc <VL53L0X_ref_calibration_io>
 8008760:	4603      	mov	r3, r0
 8008762:	75fb      	strb	r3, [r7, #23]
 8008764:	e002      	b.n	800876c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2200      	movs	r2, #0
 800876a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800876c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d112      	bne.n	800879a <VL53L0X_perform_phase_calibration+0xbe>
 8008774:	79bb      	ldrb	r3, [r7, #6]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00f      	beq.n	800879a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800877a:	7dbb      	ldrb	r3, [r7, #22]
 800877c:	461a      	mov	r2, r3
 800877e:	2101      	movs	r1, #1
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f002 fcf3 	bl	800b16c <VL53L0X_WrByte>
 8008786:	4603      	mov	r3, r0
 8008788:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800878a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d103      	bne.n	800879a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	7dba      	ldrb	r2, [r7, #22]
 8008796:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800879a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b086      	sub	sp, #24
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
 80087b2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087b4:	2300      	movs	r3, #0
 80087b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80087b8:	2300      	movs	r3, #0
 80087ba:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80087c2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80087c4:	78fa      	ldrb	r2, [r7, #3]
 80087c6:	2300      	movs	r3, #0
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f7ff ff1f 	bl	800860e <VL53L0X_perform_vhv_calibration>
 80087d0:	4603      	mov	r3, r0
 80087d2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80087d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d107      	bne.n	80087ec <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80087dc:	78fa      	ldrb	r2, [r7, #3]
 80087de:	2300      	movs	r3, #0
 80087e0:	6879      	ldr	r1, [r7, #4]
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7ff ff7a 	bl	80086dc <VL53L0X_perform_phase_calibration>
 80087e8:	4603      	mov	r3, r0
 80087ea:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80087ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10f      	bne.n	8008814 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80087f4:	7dbb      	ldrb	r3, [r7, #22]
 80087f6:	461a      	mov	r2, r3
 80087f8:	2101      	movs	r1, #1
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f002 fcb6 	bl	800b16c <VL53L0X_WrByte>
 8008800:	4603      	mov	r3, r0
 8008802:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d103      	bne.n	8008814 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	7dba      	ldrb	r2, [r7, #22]
 8008810:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008814:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008828:	2300      	movs	r3, #0
 800882a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008834:	f107 030f 	add.w	r3, r7, #15
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7fe fe02 	bl	8007444 <VL53L0X_GetMeasurementDataReady>
 8008840:	4603      	mov	r3, r0
 8008842:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008844:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10f      	bne.n	800886c <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d00e      	beq.n	8008870 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	3301      	adds	r3, #1
 8008856:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2bc7      	cmp	r3, #199	; 0xc7
 800885c:	d902      	bls.n	8008864 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 800885e:	23f9      	movs	r3, #249	; 0xf9
 8008860:	75fb      	strb	r3, [r7, #23]
			break;
 8008862:	e006      	b.n	8008872 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f002 fd03 	bl	800b270 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800886a:	e7e3      	b.n	8008834 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800886c:	bf00      	nop
 800886e:	e000      	b.n	8008872 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8008870:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800887e:	b480      	push	{r7}
 8008880:	b085      	sub	sp, #20
 8008882:	af00      	add	r7, sp, #0
 8008884:	4603      	mov	r3, r0
 8008886:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800888c:	79fb      	ldrb	r3, [r7, #7]
 800888e:	3301      	adds	r3, #1
 8008890:	b2db      	uxtb	r3, r3
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008896:	7bfb      	ldrb	r3, [r7, #15]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	085b      	lsrs	r3, r3, #1
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	3b01      	subs	r3, #1
 80088ba:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b085      	sub	sp, #20
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80088d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088da:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80088dc:	e002      	b.n	80088e4 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	089b      	lsrs	r3, r3, #2
 80088e2:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d8f8      	bhi.n	80088de <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80088ec:	e017      	b.n	800891e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	4413      	add	r3, r2
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d30b      	bcc.n	8008912 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4413      	add	r3, r2
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	4413      	add	r3, r2
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	e002      	b.n	8008918 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	089b      	lsrs	r3, r3, #2
 800891c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e4      	bne.n	80088ee <VL53L0X_isqrt+0x24>
	}

	return res;
 8008924:	68fb      	ldr	r3, [r7, #12]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b086      	sub	sp, #24
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800893a:	2300      	movs	r3, #0
 800893c:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800893e:	2200      	movs	r2, #0
 8008940:	2183      	movs	r1, #131	; 0x83
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f002 fc12 	bl	800b16c <VL53L0X_WrByte>
 8008948:	4603      	mov	r3, r0
 800894a:	461a      	mov	r2, r3
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	4313      	orrs	r3, r2
 8008950:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008952:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d11c      	bne.n	8008994 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800895e:	f107 030f 	add.w	r3, r7, #15
 8008962:	461a      	mov	r2, r3
 8008964:	2183      	movs	r1, #131	; 0x83
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f002 fb05 	bl	800af76 <VL53L0X_RdByte>
 800896c:	4603      	mov	r3, r0
 800896e:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <VL53L0X_device_read_strobe+0x58>
 8008976:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d105      	bne.n	800898a <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	3301      	adds	r3, #1
 8008982:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	2bc7      	cmp	r3, #199	; 0xc7
 8008988:	d9e9      	bls.n	800895e <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2bc7      	cmp	r3, #199	; 0xc7
 800898e:	d901      	bls.n	8008994 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008990:	23f9      	movs	r3, #249	; 0xf9
 8008992:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008994:	2201      	movs	r2, #1
 8008996:	2183      	movs	r1, #131	; 0x83
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f002 fbe7 	bl	800b16c <VL53L0X_WrByte>
 800899e:	4603      	mov	r3, r0
 80089a0:	461a      	mov	r2, r3
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80089a8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b098      	sub	sp, #96	; 0x60
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089c0:	2300      	movs	r3, #0
 80089c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80089e4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80089e8:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80089fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008a00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a04:	2b07      	cmp	r3, #7
 8008a06:	f000 8408 	beq.w	800921a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	2180      	movs	r1, #128	; 0x80
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f002 fbac 	bl	800b16c <VL53L0X_WrByte>
 8008a14:	4603      	mov	r3, r0
 8008a16:	461a      	mov	r2, r3
 8008a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008a22:	2201      	movs	r2, #1
 8008a24:	21ff      	movs	r1, #255	; 0xff
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f002 fba0 	bl	800b16c <VL53L0X_WrByte>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f002 fb94 	bl	800b16c <VL53L0X_WrByte>
 8008a44:	4603      	mov	r3, r0
 8008a46:	461a      	mov	r2, r3
 8008a48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008a52:	2206      	movs	r2, #6
 8008a54:	21ff      	movs	r1, #255	; 0xff
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f002 fb88 	bl	800b16c <VL53L0X_WrByte>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a64:	4313      	orrs	r3, r2
 8008a66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008a6a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008a6e:	461a      	mov	r2, r3
 8008a70:	2183      	movs	r1, #131	; 0x83
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f002 fa7f 	bl	800af76 <VL53L0X_RdByte>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a80:	4313      	orrs	r3, r2
 8008a82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008a86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a8a:	f043 0304 	orr.w	r3, r3, #4
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	2183      	movs	r1, #131	; 0x83
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f002 fb69 	bl	800b16c <VL53L0X_WrByte>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008aa8:	2207      	movs	r2, #7
 8008aaa:	21ff      	movs	r1, #255	; 0xff
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f002 fb5d 	bl	800b16c <VL53L0X_WrByte>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aba:	4313      	orrs	r3, r2
 8008abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	2181      	movs	r1, #129	; 0x81
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f002 fb51 	bl	800b16c <VL53L0X_WrByte>
 8008aca:	4603      	mov	r3, r0
 8008acc:	461a      	mov	r2, r3
 8008ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f002 fbc9 	bl	800b270 <VL53L0X_PollingDelay>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008aec:	2201      	movs	r2, #1
 8008aee:	2180      	movs	r1, #128	; 0x80
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f002 fb3b 	bl	800b16c <VL53L0X_WrByte>
 8008af6:	4603      	mov	r3, r0
 8008af8:	461a      	mov	r2, r3
 8008afa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008afe:	4313      	orrs	r3, r2
 8008b00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 8098 	beq.w	8008c40 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008b10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b14:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f040 8091 	bne.w	8008c40 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008b1e:	226b      	movs	r2, #107	; 0x6b
 8008b20:	2194      	movs	r1, #148	; 0x94
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f002 fb22 	bl	800b16c <VL53L0X_WrByte>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b30:	4313      	orrs	r3, r2
 8008b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff fefb 	bl	8008932 <VL53L0X_device_read_strobe>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b44:	4313      	orrs	r3, r2
 8008b46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008b4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b4e:	461a      	mov	r2, r3
 8008b50:	2190      	movs	r1, #144	; 0x90
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f002 face 	bl	800b0f4 <VL53L0X_RdDWord>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b60:	4313      	orrs	r3, r2
 8008b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	0a1b      	lsrs	r3, r3, #8
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b70:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	0bdb      	lsrs	r3, r3, #15
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008b82:	2224      	movs	r2, #36	; 0x24
 8008b84:	2194      	movs	r1, #148	; 0x94
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f002 faf0 	bl	800b16c <VL53L0X_WrByte>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b94:	4313      	orrs	r3, r2
 8008b96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff fec9 	bl	8008932 <VL53L0X_device_read_strobe>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008bae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	2190      	movs	r1, #144	; 0x90
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f002 fa9c 	bl	800b0f4 <VL53L0X_RdDWord>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	0e1b      	lsrs	r3, r3, #24
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	0c1b      	lsrs	r3, r3, #16
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bdc:	0a1b      	lsrs	r3, r3, #8
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008be8:	2225      	movs	r2, #37	; 0x25
 8008bea:	2194      	movs	r1, #148	; 0x94
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f002 fabd 	bl	800b16c <VL53L0X_WrByte>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff fe96 	bl	8008932 <VL53L0X_device_read_strobe>
 8008c06:	4603      	mov	r3, r0
 8008c08:	461a      	mov	r2, r3
 8008c0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c18:	461a      	mov	r2, r3
 8008c1a:	2190      	movs	r1, #144	; 0x90
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f002 fa69 	bl	800b0f4 <VL53L0X_RdDWord>
 8008c22:	4603      	mov	r3, r0
 8008c24:	461a      	mov	r2, r3
 8008c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	0e1b      	lsrs	r3, r3, #24
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	0c1b      	lsrs	r3, r3, #16
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 8189 	beq.w	8008f5e <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008c4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c50:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f040 8182 	bne.w	8008f5e <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	2194      	movs	r1, #148	; 0x94
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f002 fa84 	bl	800b16c <VL53L0X_WrByte>
 8008c64:	4603      	mov	r3, r0
 8008c66:	461a      	mov	r2, r3
 8008c68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff fe5d 	bl	8008932 <VL53L0X_device_read_strobe>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c80:	4313      	orrs	r3, r2
 8008c82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008c86:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	2190      	movs	r1, #144	; 0x90
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f002 f971 	bl	800af76 <VL53L0X_RdByte>
 8008c94:	4603      	mov	r3, r0
 8008c96:	461a      	mov	r2, r3
 8008c98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008ca2:	227b      	movs	r2, #123	; 0x7b
 8008ca4:	2194      	movs	r1, #148	; 0x94
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f002 fa60 	bl	800b16c <VL53L0X_WrByte>
 8008cac:	4603      	mov	r3, r0
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff fe39 	bl	8008932 <VL53L0X_device_read_strobe>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008cce:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	2190      	movs	r1, #144	; 0x90
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f002 f94d 	bl	800af76 <VL53L0X_RdByte>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008cea:	2277      	movs	r2, #119	; 0x77
 8008cec:	2194      	movs	r1, #148	; 0x94
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f002 fa3c 	bl	800b16c <VL53L0X_WrByte>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff fe15 	bl	8008932 <VL53L0X_device_read_strobe>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d10:	4313      	orrs	r3, r2
 8008d12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008d16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	2190      	movs	r1, #144	; 0x90
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f002 f9e8 	bl	800b0f4 <VL53L0X_RdDWord>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	0e5b      	lsrs	r3, r3, #25
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d42:	0c9b      	lsrs	r3, r3, #18
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	0adb      	lsrs	r3, r3, #11
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5e:	091b      	lsrs	r3, r3, #4
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008d7c:	2278      	movs	r2, #120	; 0x78
 8008d7e:	2194      	movs	r1, #148	; 0x94
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f002 f9f3 	bl	800b16c <VL53L0X_WrByte>
 8008d86:	4603      	mov	r3, r0
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff fdcc 	bl	8008932 <VL53L0X_device_read_strobe>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008da2:	4313      	orrs	r3, r2
 8008da4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008da8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dac:	461a      	mov	r2, r3
 8008dae:	2190      	movs	r1, #144	; 0x90
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f002 f99f 	bl	800b0f4 <VL53L0X_RdDWord>
 8008db6:	4603      	mov	r3, r0
 8008db8:	461a      	mov	r2, r3
 8008dba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc6:	0f5b      	lsrs	r3, r3, #29
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dce:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008dd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dd4:	4413      	add	r3, r2
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	0d9b      	lsrs	r3, r3, #22
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dea:	0bdb      	lsrs	r3, r3, #15
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	0a1b      	lsrs	r3, r3, #8
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	085b      	lsrs	r3, r3, #1
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	019b      	lsls	r3, r3, #6
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008e24:	2279      	movs	r2, #121	; 0x79
 8008e26:	2194      	movs	r1, #148	; 0x94
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f002 f99f 	bl	800b16c <VL53L0X_WrByte>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	461a      	mov	r2, r3
 8008e32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e36:	4313      	orrs	r3, r2
 8008e38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff fd78 	bl	8008932 <VL53L0X_device_read_strobe>
 8008e42:	4603      	mov	r3, r0
 8008e44:	461a      	mov	r2, r3
 8008e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008e50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e54:	461a      	mov	r2, r3
 8008e56:	2190      	movs	r1, #144	; 0x90
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f002 f94b 	bl	800b0f4 <VL53L0X_RdDWord>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	461a      	mov	r2, r3
 8008e62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e66:	4313      	orrs	r3, r2
 8008e68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6e:	0e9b      	lsrs	r3, r3, #26
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e76:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e7c:	4413      	add	r3, r2
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	0cdb      	lsrs	r3, r3, #19
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	0b1b      	lsrs	r3, r3, #12
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	095b      	lsrs	r3, r3, #5
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008ebe:	227a      	movs	r2, #122	; 0x7a
 8008ec0:	2194      	movs	r1, #148	; 0x94
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f002 f952 	bl	800b16c <VL53L0X_WrByte>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7ff fd2b 	bl	8008932 <VL53L0X_device_read_strobe>
 8008edc:	4603      	mov	r3, r0
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008eea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008eee:	461a      	mov	r2, r3
 8008ef0:	2190      	movs	r1, #144	; 0x90
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f002 f8fe 	bl	800b0f4 <VL53L0X_RdDWord>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	461a      	mov	r2, r3
 8008efc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f00:	4313      	orrs	r3, r2
 8008f02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	0f9b      	lsrs	r3, r3, #30
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f10:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008f12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f16:	4413      	add	r3, r2
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	0ddb      	lsrs	r3, r3, #23
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	0c1b      	lsrs	r3, r3, #16
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	0a5b      	lsrs	r3, r3, #9
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	089b      	lsrs	r3, r3, #2
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 80f1 	beq.w	800914c <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008f6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f6e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f040 80ea 	bne.w	800914c <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008f78:	227b      	movs	r2, #123	; 0x7b
 8008f7a:	2194      	movs	r1, #148	; 0x94
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f002 f8f5 	bl	800b16c <VL53L0X_WrByte>
 8008f82:	4603      	mov	r3, r0
 8008f84:	461a      	mov	r2, r3
 8008f86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff fcce 	bl	8008932 <VL53L0X_device_read_strobe>
 8008f96:	4603      	mov	r3, r0
 8008f98:	461a      	mov	r2, r3
 8008f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008fa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fa8:	461a      	mov	r2, r3
 8008faa:	2190      	movs	r1, #144	; 0x90
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f002 f8a1 	bl	800b0f4 <VL53L0X_RdDWord>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008fc0:	227c      	movs	r2, #124	; 0x7c
 8008fc2:	2194      	movs	r1, #148	; 0x94
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f002 f8d1 	bl	800b16c <VL53L0X_WrByte>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	461a      	mov	r2, r3
 8008fce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff fcaa 	bl	8008932 <VL53L0X_device_read_strobe>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8008fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	2190      	movs	r1, #144	; 0x90
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f002 f87d 	bl	800b0f4 <VL53L0X_RdDWord>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009002:	4313      	orrs	r3, r2
 8009004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009008:	2273      	movs	r2, #115	; 0x73
 800900a:	2194      	movs	r1, #148	; 0x94
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f002 f8ad 	bl	800b16c <VL53L0X_WrByte>
 8009012:	4603      	mov	r3, r0
 8009014:	461a      	mov	r2, r3
 8009016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800901a:	4313      	orrs	r3, r2
 800901c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7ff fc86 	bl	8008932 <VL53L0X_device_read_strobe>
 8009026:	4603      	mov	r3, r0
 8009028:	461a      	mov	r2, r3
 800902a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800902e:	4313      	orrs	r3, r2
 8009030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009038:	461a      	mov	r2, r3
 800903a:	2190      	movs	r1, #144	; 0x90
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f002 f859 	bl	800b0f4 <VL53L0X_RdDWord>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800904a:	4313      	orrs	r3, r2
 800904c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009054:	b29b      	uxth	r3, r3
 8009056:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009058:	2274      	movs	r2, #116	; 0x74
 800905a:	2194      	movs	r1, #148	; 0x94
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f002 f885 	bl	800b16c <VL53L0X_WrByte>
 8009062:	4603      	mov	r3, r0
 8009064:	461a      	mov	r2, r3
 8009066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800906a:	4313      	orrs	r3, r2
 800906c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff fc5e 	bl	8008932 <VL53L0X_device_read_strobe>
 8009076:	4603      	mov	r3, r0
 8009078:	461a      	mov	r2, r3
 800907a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800907e:	4313      	orrs	r3, r2
 8009080:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009088:	461a      	mov	r2, r3
 800908a:	2190      	movs	r1, #144	; 0x90
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f002 f831 	bl	800b0f4 <VL53L0X_RdDWord>
 8009092:	4603      	mov	r3, r0
 8009094:	461a      	mov	r2, r3
 8009096:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800909a:	4313      	orrs	r3, r2
 800909c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80090a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090a6:	4313      	orrs	r3, r2
 80090a8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80090aa:	2275      	movs	r2, #117	; 0x75
 80090ac:	2194      	movs	r1, #148	; 0x94
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f002 f85c 	bl	800b16c <VL53L0X_WrByte>
 80090b4:	4603      	mov	r3, r0
 80090b6:	461a      	mov	r2, r3
 80090b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090bc:	4313      	orrs	r3, r2
 80090be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff fc35 	bl	8008932 <VL53L0X_device_read_strobe>
 80090c8:	4603      	mov	r3, r0
 80090ca:	461a      	mov	r2, r3
 80090cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090d0:	4313      	orrs	r3, r2
 80090d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80090d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090da:	461a      	mov	r2, r3
 80090dc:	2190      	movs	r1, #144	; 0x90
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f002 f808 	bl	800b0f4 <VL53L0X_RdDWord>
 80090e4:	4603      	mov	r3, r0
 80090e6:	461a      	mov	r2, r3
 80090e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090ec:	4313      	orrs	r3, r2
 80090ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80090fa:	2276      	movs	r2, #118	; 0x76
 80090fc:	2194      	movs	r1, #148	; 0x94
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f002 f834 	bl	800b16c <VL53L0X_WrByte>
 8009104:	4603      	mov	r3, r0
 8009106:	461a      	mov	r2, r3
 8009108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800910c:	4313      	orrs	r3, r2
 800910e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7ff fc0d 	bl	8008932 <VL53L0X_device_read_strobe>
 8009118:	4603      	mov	r3, r0
 800911a:	461a      	mov	r2, r3
 800911c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009120:	4313      	orrs	r3, r2
 8009122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800912a:	461a      	mov	r2, r3
 800912c:	2190      	movs	r1, #144	; 0x90
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 ffe0 	bl	800b0f4 <VL53L0X_RdDWord>
 8009134:	4603      	mov	r3, r0
 8009136:	461a      	mov	r2, r3
 8009138:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800913c:	4313      	orrs	r3, r2
 800913e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009144:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009146:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009148:	4313      	orrs	r3, r2
 800914a:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800914c:	2200      	movs	r2, #0
 800914e:	2181      	movs	r1, #129	; 0x81
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f002 f80b 	bl	800b16c <VL53L0X_WrByte>
 8009156:	4603      	mov	r3, r0
 8009158:	461a      	mov	r2, r3
 800915a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800915e:	4313      	orrs	r3, r2
 8009160:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009164:	2206      	movs	r2, #6
 8009166:	21ff      	movs	r1, #255	; 0xff
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 ffff 	bl	800b16c <VL53L0X_WrByte>
 800916e:	4603      	mov	r3, r0
 8009170:	461a      	mov	r2, r3
 8009172:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009176:	4313      	orrs	r3, r2
 8009178:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800917c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009180:	461a      	mov	r2, r3
 8009182:	2183      	movs	r1, #131	; 0x83
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 fef6 	bl	800af76 <VL53L0X_RdByte>
 800918a:	4603      	mov	r3, r0
 800918c:	461a      	mov	r2, r3
 800918e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009192:	4313      	orrs	r3, r2
 8009194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800919c:	f023 0304 	bic.w	r3, r3, #4
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	2183      	movs	r1, #131	; 0x83
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f001 ffe0 	bl	800b16c <VL53L0X_WrByte>
 80091ac:	4603      	mov	r3, r0
 80091ae:	461a      	mov	r2, r3
 80091b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091b4:	4313      	orrs	r3, r2
 80091b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80091ba:	2201      	movs	r2, #1
 80091bc:	21ff      	movs	r1, #255	; 0xff
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 ffd4 	bl	800b16c <VL53L0X_WrByte>
 80091c4:	4603      	mov	r3, r0
 80091c6:	461a      	mov	r2, r3
 80091c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091cc:	4313      	orrs	r3, r2
 80091ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80091d2:	2201      	movs	r2, #1
 80091d4:	2100      	movs	r1, #0
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 ffc8 	bl	800b16c <VL53L0X_WrByte>
 80091dc:	4603      	mov	r3, r0
 80091de:	461a      	mov	r2, r3
 80091e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091e4:	4313      	orrs	r3, r2
 80091e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80091ea:	2200      	movs	r2, #0
 80091ec:	21ff      	movs	r1, #255	; 0xff
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 ffbc 	bl	800b16c <VL53L0X_WrByte>
 80091f4:	4603      	mov	r3, r0
 80091f6:	461a      	mov	r2, r3
 80091f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091fc:	4313      	orrs	r3, r2
 80091fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009202:	2200      	movs	r2, #0
 8009204:	2180      	movs	r1, #128	; 0x80
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 ffb0 	bl	800b16c <VL53L0X_WrByte>
 800920c:	4603      	mov	r3, r0
 800920e:	461a      	mov	r2, r3
 8009210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009214:	4313      	orrs	r3, r2
 8009216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800921a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800921e:	2b00      	cmp	r3, #0
 8009220:	f040 808f 	bne.w	8009342 <VL53L0X_get_info_from_device+0x98e>
 8009224:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009228:	2b07      	cmp	r3, #7
 800922a:	f000 808a 	beq.w	8009342 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800922e:	78fb      	ldrb	r3, [r7, #3]
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d024      	beq.n	8009282 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009238:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800923c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009240:	2b00      	cmp	r3, #0
 8009242:	d11e      	bne.n	8009282 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800924a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009254:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009258:	2300      	movs	r3, #0
 800925a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800925c:	e00e      	b.n	800927c <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800925e:	f107 0208 	add.w	r2, r7, #8
 8009262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009264:	4413      	add	r3, r2
 8009266:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800926c:	4413      	add	r3, r2
 800926e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009272:	460a      	mov	r2, r1
 8009274:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009278:	3301      	adds	r3, #1
 800927a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800927c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800927e:	2b05      	cmp	r3, #5
 8009280:	dded      	ble.n	800925e <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009282:	78fb      	ldrb	r3, [r7, #3]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d018      	beq.n	80092be <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800928c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009290:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009294:	2b00      	cmp	r3, #0
 8009296:	d112      	bne.n	80092be <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009298:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092a2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	33f3      	adds	r3, #243	; 0xf3
 80092b0:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80092b2:	f107 0310 	add.w	r3, r7, #16
 80092b6:	4619      	mov	r1, r3
 80092b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092ba:	f00a fc30 	bl	8013b1e <strcpy>

		}

		if (((option & 4) == 4) &&
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	f003 0304 	and.w	r3, r3, #4
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d030      	beq.n	800932a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80092c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092cc:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d12a      	bne.n	800932a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80092e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092e6:	025b      	lsls	r3, r3, #9
 80092e8:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092ee:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80092f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d011      	beq.n	8009322 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80092fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8009306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800930c:	fb02 f303 	mul.w	r3, r2, r3
 8009310:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009312:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8009316:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800931a:	425b      	negs	r3, r3
 800931c:	b29b      	uxth	r3, r3
 800931e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009322:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800932a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800932e:	78fb      	ldrb	r3, [r7, #3]
 8009330:	4313      	orrs	r3, r2
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009338:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009342:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009346:	4618      	mov	r0, r3
 8009348:	3760      	adds	r7, #96	; 0x60
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800934e:	b480      	push	{r7}
 8009350:	b087      	sub	sp, #28
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800935a:	f240 6277 	movw	r2, #1655	; 0x677
 800935e:	f04f 0300 	mov.w	r3, #0
 8009362:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009366:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800936a:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	fb02 f303 	mul.w	r3, r2, r3
 800937a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800937c:	68bb      	ldr	r3, [r7, #8]
}
 800937e:	4618      	mov	r0, r3
 8009380:	371c      	adds	r7, #28
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800938a:	b480      	push	{r7}
 800938c:	b087      	sub	sp, #28
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d017      	beq.n	80093d4 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80093aa:	e005      	b.n	80093b8 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	085b      	lsrs	r3, r3, #1
 80093b0:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80093b2:	89fb      	ldrh	r3, [r7, #14]
 80093b4:	3301      	adds	r3, #1
 80093b6:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1f4      	bne.n	80093ac <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80093c2:	89fb      	ldrh	r3, [r7, #14]
 80093c4:	021b      	lsls	r3, r3, #8
 80093c6:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80093d0:	4413      	add	r3, r2
 80093d2:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80093d4:	8afb      	ldrh	r3, [r7, #22]

}
 80093d6:	4618      	mov	r0, r3
 80093d8:	371c      	adds	r7, #28
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	4603      	mov	r3, r0
 80093ea:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80093f0:	88fb      	ldrh	r3, [r7, #6]
 80093f2:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80093f4:	88fa      	ldrh	r2, [r7, #6]
 80093f6:	0a12      	lsrs	r2, r2, #8
 80093f8:	b292      	uxth	r2, r2
 80093fa:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80093fc:	3301      	adds	r3, #1
 80093fe:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009400:	68fb      	ldr	r3, [r7, #12]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
	...

08009410 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	4613      	mov	r3, r2
 800941c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	4619      	mov	r1, r3
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7ff ff91 	bl	800934e <VL53L0X_calc_macro_period_ps>
 800942c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009434:	4a0a      	ldr	r2, [pc, #40]	; (8009460 <VL53L0X_calc_timeout_mclks+0x50>)
 8009436:	fba2 2303 	umull	r2, r3, r2, r3
 800943a:	099b      	lsrs	r3, r3, #6
 800943c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009444:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	441a      	add	r2, r3
	timeout_period_mclks =
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	fbb2 f3f3 	udiv	r3, r2, r3
 8009454:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8009456:	69fb      	ldr	r3, [r7, #28]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3720      	adds	r7, #32
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	10624dd3 	.word	0x10624dd3

08009464 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	807b      	strh	r3, [r7, #2]
 8009470:	4613      	mov	r3, r2
 8009472:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009478:	787b      	ldrb	r3, [r7, #1]
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff ff66 	bl	800934e <VL53L0X_calc_macro_period_ps>
 8009482:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800948a:	4a0b      	ldr	r2, [pc, #44]	; (80094b8 <VL53L0X_calc_timeout_us+0x54>)
 800948c:	fba2 2303 	umull	r2, r3, r2, r3
 8009490:	099b      	lsrs	r3, r3, #6
 8009492:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 8009494:	887b      	ldrh	r3, [r7, #2]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	085b      	lsrs	r3, r3, #1
 80094a0:	4413      	add	r3, r2
	actual_timeout_period_us =
 80094a2:	4a05      	ldr	r2, [pc, #20]	; (80094b8 <VL53L0X_calc_timeout_us+0x54>)
 80094a4:	fba2 2303 	umull	r2, r3, r2, r3
 80094a8:	099b      	lsrs	r3, r3, #6
 80094aa:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80094ac:	697b      	ldr	r3, [r7, #20]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	10624dd3 	.word	0x10624dd3

080094bc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08c      	sub	sp, #48	; 0x30
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	460b      	mov	r3, r1
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80094e2:	7afb      	ldrb	r3, [r7, #11]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d005      	beq.n	80094f4 <get_sequence_step_timeout+0x38>
 80094e8:	7afb      	ldrb	r3, [r7, #11]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d002      	beq.n	80094f4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80094ee:	7afb      	ldrb	r3, [r7, #11]
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d128      	bne.n	8009546 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80094f4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80094f8:	461a      	mov	r2, r3
 80094fa:	2100      	movs	r1, #0
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f7fd fa73 	bl	80069e8 <VL53L0X_GetVcselPulsePeriod>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009508:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800950c:	2b00      	cmp	r3, #0
 800950e:	d109      	bne.n	8009524 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009510:	f107 0320 	add.w	r3, r7, #32
 8009514:	461a      	mov	r2, r3
 8009516:	2146      	movs	r1, #70	; 0x46
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f001 fd2c 	bl	800af76 <VL53L0X_RdByte>
 800951e:	4603      	mov	r3, r0
 8009520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009524:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009528:	b29b      	uxth	r3, r3
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff ff59 	bl	80093e2 <VL53L0X_decode_timeout>
 8009530:	4603      	mov	r3, r0
 8009532:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009534:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800953a:	4619      	mov	r1, r3
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7ff ff91 	bl	8009464 <VL53L0X_calc_timeout_us>
 8009542:	62b8      	str	r0, [r7, #40]	; 0x28
 8009544:	e092      	b.n	800966c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	2b03      	cmp	r3, #3
 800954a:	d135      	bne.n	80095b8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800954c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009550:	461a      	mov	r2, r3
 8009552:	2100      	movs	r1, #0
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f7fd fa47 	bl	80069e8 <VL53L0X_GetVcselPulsePeriod>
 800955a:	4603      	mov	r3, r0
 800955c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009560:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009564:	2b00      	cmp	r3, #0
 8009566:	f040 8081 	bne.w	800966c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800956a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800956e:	461a      	mov	r2, r3
 8009570:	2100      	movs	r1, #0
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f7fd fa38 	bl	80069e8 <VL53L0X_GetVcselPulsePeriod>
 8009578:	4603      	mov	r3, r0
 800957a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800957e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009582:	2b00      	cmp	r3, #0
 8009584:	d109      	bne.n	800959a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8009586:	f107 031e 	add.w	r3, r7, #30
 800958a:	461a      	mov	r2, r3
 800958c:	2151      	movs	r1, #81	; 0x51
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f001 fd78 	bl	800b084 <VL53L0X_RdWord>
 8009594:	4603      	mov	r3, r0
 8009596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800959a:	8bfb      	ldrh	r3, [r7, #30]
 800959c:	4618      	mov	r0, r3
 800959e:	f7ff ff20 	bl	80093e2 <VL53L0X_decode_timeout>
 80095a2:	4603      	mov	r3, r0
 80095a4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80095a6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80095aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095ac:	4619      	mov	r1, r3
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f7ff ff58 	bl	8009464 <VL53L0X_calc_timeout_us>
 80095b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80095b6:	e059      	b.n	800966c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80095b8:	7afb      	ldrb	r3, [r7, #11]
 80095ba:	2b04      	cmp	r3, #4
 80095bc:	d156      	bne.n	800966c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80095be:	f107 0314 	add.w	r3, r7, #20
 80095c2:	4619      	mov	r1, r3
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f7fd fb1b 	bl	8006c00 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01d      	beq.n	8009610 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80095d4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80095d8:	461a      	mov	r2, r3
 80095da:	2100      	movs	r1, #0
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f7fd fa03 	bl	80069e8 <VL53L0X_GetVcselPulsePeriod>
 80095e2:	4603      	mov	r3, r0
 80095e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80095e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10f      	bne.n	8009610 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80095f0:	f107 031e 	add.w	r3, r7, #30
 80095f4:	461a      	mov	r2, r3
 80095f6:	2151      	movs	r1, #81	; 0x51
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f001 fd43 	bl	800b084 <VL53L0X_RdWord>
 80095fe:	4603      	mov	r3, r0
 8009600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009604:	8bfb      	ldrh	r3, [r7, #30]
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff feeb 	bl	80093e2 <VL53L0X_decode_timeout>
 800960c:	4603      	mov	r3, r0
 800960e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009610:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009614:	2b00      	cmp	r3, #0
 8009616:	d109      	bne.n	800962c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009618:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800961c:	461a      	mov	r2, r3
 800961e:	2101      	movs	r1, #1
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7fd f9e1 	bl	80069e8 <VL53L0X_GetVcselPulsePeriod>
 8009626:	4603      	mov	r3, r0
 8009628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800962c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10f      	bne.n	8009654 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009634:	f107 031c 	add.w	r3, r7, #28
 8009638:	461a      	mov	r2, r3
 800963a:	2171      	movs	r1, #113	; 0x71
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f001 fd21 	bl	800b084 <VL53L0X_RdWord>
 8009642:	4603      	mov	r3, r0
 8009644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009648:	8bbb      	ldrh	r3, [r7, #28]
 800964a:	4618      	mov	r0, r3
 800964c:	f7ff fec9 	bl	80093e2 <VL53L0X_decode_timeout>
 8009650:	4603      	mov	r3, r0
 8009652:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009654:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009656:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800965c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009662:	4619      	mov	r1, r3
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7ff fefd 	bl	8009464 <VL53L0X_calc_timeout_us>
 800966a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009670:	601a      	str	r2, [r3, #0]

	return Status;
 8009672:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009676:	4618      	mov	r0, r3
 8009678:	3730      	adds	r7, #48	; 0x30
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b08a      	sub	sp, #40	; 0x28
 8009682:	af00      	add	r7, sp, #0
 8009684:	60f8      	str	r0, [r7, #12]
 8009686:	460b      	mov	r3, r1
 8009688:	607a      	str	r2, [r7, #4]
 800968a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800968c:	2300      	movs	r3, #0
 800968e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009692:	7afb      	ldrb	r3, [r7, #11]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d005      	beq.n	80096a4 <set_sequence_step_timeout+0x26>
 8009698:	7afb      	ldrb	r3, [r7, #11]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d002      	beq.n	80096a4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d138      	bne.n	8009716 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80096a4:	f107 031d 	add.w	r3, r7, #29
 80096a8:	461a      	mov	r2, r3
 80096aa:	2100      	movs	r1, #0
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f7fd f99b 	bl	80069e8 <VL53L0X_GetVcselPulsePeriod>
 80096b2:	4603      	mov	r3, r0
 80096b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80096b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d11a      	bne.n	80096f6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80096c0:	7f7b      	ldrb	r3, [r7, #29]
 80096c2:	461a      	mov	r2, r3
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f7ff fea2 	bl	8009410 <VL53L0X_calc_timeout_mclks>
 80096cc:	4603      	mov	r3, r0
 80096ce:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80096d0:	8bfb      	ldrh	r3, [r7, #30]
 80096d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096d6:	d903      	bls.n	80096e0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80096d8:	23ff      	movs	r3, #255	; 0xff
 80096da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80096de:	e004      	b.n	80096ea <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80096e0:	8bfb      	ldrh	r3, [r7, #30]
 80096e2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80096e4:	3b01      	subs	r3, #1
 80096e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80096ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80096f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f040 80ad 	bne.w	800985a <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 8009700:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009704:	461a      	mov	r2, r3
 8009706:	2146      	movs	r1, #70	; 0x46
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f001 fd2f 	bl	800b16c <VL53L0X_WrByte>
 800970e:	4603      	mov	r3, r0
 8009710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009714:	e0a1      	b.n	800985a <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009716:	7afb      	ldrb	r3, [r7, #11]
 8009718:	2b03      	cmp	r3, #3
 800971a:	d135      	bne.n	8009788 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800971c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009720:	2b00      	cmp	r3, #0
 8009722:	d11b      	bne.n	800975c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009724:	f107 031d 	add.w	r3, r7, #29
 8009728:	461a      	mov	r2, r3
 800972a:	2100      	movs	r1, #0
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f7fd f95b 	bl	80069e8 <VL53L0X_GetVcselPulsePeriod>
 8009732:	4603      	mov	r3, r0
 8009734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009738:	7f7b      	ldrb	r3, [r7, #29]
 800973a:	461a      	mov	r2, r3
 800973c:	6879      	ldr	r1, [r7, #4]
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f7ff fe66 	bl	8009410 <VL53L0X_calc_timeout_mclks>
 8009744:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8009746:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800974a:	4618      	mov	r0, r3
 800974c:	f7ff fe1d 	bl	800938a <VL53L0X_encode_timeout>
 8009750:	4603      	mov	r3, r0
 8009752:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009754:	8b7a      	ldrh	r2, [r7, #26]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800975c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009760:	2b00      	cmp	r3, #0
 8009762:	d108      	bne.n	8009776 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009764:	8b7b      	ldrh	r3, [r7, #26]
 8009766:	461a      	mov	r2, r3
 8009768:	2151      	movs	r1, #81	; 0x51
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f001 fd22 	bl	800b1b4 <VL53L0X_WrWord>
 8009770:	4603      	mov	r3, r0
 8009772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009776:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800977a:	2b00      	cmp	r3, #0
 800977c:	d16d      	bne.n	800985a <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8009786:	e068      	b.n	800985a <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009788:	7afb      	ldrb	r3, [r7, #11]
 800978a:	2b04      	cmp	r3, #4
 800978c:	d162      	bne.n	8009854 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800978e:	f107 0314 	add.w	r3, r7, #20
 8009792:	4619      	mov	r1, r3
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f7fd fa33 	bl	8006c00 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800979a:	2300      	movs	r3, #0
 800979c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d01d      	beq.n	80097e0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80097a4:	f107 031d 	add.w	r3, r7, #29
 80097a8:	461a      	mov	r2, r3
 80097aa:	2100      	movs	r1, #0
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7fd f91b 	bl	80069e8 <VL53L0X_GetVcselPulsePeriod>
 80097b2:	4603      	mov	r3, r0
 80097b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80097b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10f      	bne.n	80097e0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80097c0:	f107 031a 	add.w	r3, r7, #26
 80097c4:	461a      	mov	r2, r3
 80097c6:	2151      	movs	r1, #81	; 0x51
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f001 fc5b 	bl	800b084 <VL53L0X_RdWord>
 80097ce:	4603      	mov	r3, r0
 80097d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80097d4:	8b7b      	ldrh	r3, [r7, #26]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7ff fe03 	bl	80093e2 <VL53L0X_decode_timeout>
 80097dc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80097de:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80097e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d109      	bne.n	80097fc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80097e8:	f107 031d 	add.w	r3, r7, #29
 80097ec:	461a      	mov	r2, r3
 80097ee:	2101      	movs	r1, #1
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f7fd f8f9 	bl	80069e8 <VL53L0X_GetVcselPulsePeriod>
 80097f6:	4603      	mov	r3, r0
 80097f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80097fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009800:	2b00      	cmp	r3, #0
 8009802:	d12a      	bne.n	800985a <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009804:	7f7b      	ldrb	r3, [r7, #29]
 8009806:	461a      	mov	r2, r3
 8009808:	6879      	ldr	r1, [r7, #4]
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f7ff fe00 	bl	8009410 <VL53L0X_calc_timeout_mclks>
 8009810:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8009812:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009814:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009818:	4413      	add	r3, r2
 800981a:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800981c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fdb3 	bl	800938a <VL53L0X_encode_timeout>
 8009824:	4603      	mov	r3, r0
 8009826:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 8009828:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800982c:	2b00      	cmp	r3, #0
 800982e:	d108      	bne.n	8009842 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009830:	8c3b      	ldrh	r3, [r7, #32]
 8009832:	461a      	mov	r2, r3
 8009834:	2171      	movs	r1, #113	; 0x71
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f001 fcbc 	bl	800b1b4 <VL53L0X_WrWord>
 800983c:	4603      	mov	r3, r0
 800983e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009842:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009846:	2b00      	cmp	r3, #0
 8009848:	d107      	bne.n	800985a <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009852:	e002      	b.n	800985a <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009854:	23fc      	movs	r3, #252	; 0xfc
 8009856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800985a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800985e:	4618      	mov	r0, r3
 8009860:	3728      	adds	r7, #40	; 0x28
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b08a      	sub	sp, #40	; 0x28
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	460b      	mov	r3, r1
 8009870:	70fb      	strb	r3, [r7, #3]
 8009872:	4613      	mov	r3, r2
 8009874:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009876:	2300      	movs	r3, #0
 8009878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800987c:	230c      	movs	r3, #12
 800987e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009882:	2312      	movs	r3, #18
 8009884:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009888:	2308      	movs	r3, #8
 800988a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800988e:	230e      	movs	r3, #14
 8009890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009898:	78bb      	ldrb	r3, [r7, #2]
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d003      	beq.n	80098ac <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80098a4:	23fc      	movs	r3, #252	; 0xfc
 80098a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098aa:	e020      	b.n	80098ee <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10d      	bne.n	80098ce <VL53L0X_set_vcsel_pulse_period+0x68>
 80098b2:	78ba      	ldrb	r2, [r7, #2]
 80098b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d304      	bcc.n	80098c6 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80098bc:	78ba      	ldrb	r2, [r7, #2]
 80098be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d903      	bls.n	80098ce <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80098c6:	23fc      	movs	r3, #252	; 0xfc
 80098c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098cc:	e00f      	b.n	80098ee <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d10c      	bne.n	80098ee <VL53L0X_set_vcsel_pulse_period+0x88>
 80098d4:	78ba      	ldrb	r2, [r7, #2]
 80098d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80098da:	429a      	cmp	r2, r3
 80098dc:	d304      	bcc.n	80098e8 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80098de:	78ba      	ldrb	r2, [r7, #2]
 80098e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d902      	bls.n	80098ee <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80098e8:	23fc      	movs	r3, #252	; 0xfc
 80098ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80098ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80098f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098fa:	e239      	b.n	8009d70 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d150      	bne.n	80099a4 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009902:	78bb      	ldrb	r3, [r7, #2]
 8009904:	2b0c      	cmp	r3, #12
 8009906:	d110      	bne.n	800992a <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8009908:	2218      	movs	r2, #24
 800990a:	2157      	movs	r1, #87	; 0x57
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f001 fc2d 	bl	800b16c <VL53L0X_WrByte>
 8009912:	4603      	mov	r3, r0
 8009914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8009918:	2208      	movs	r2, #8
 800991a:	2156      	movs	r1, #86	; 0x56
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 fc25 	bl	800b16c <VL53L0X_WrByte>
 8009922:	4603      	mov	r3, r0
 8009924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009928:	e17f      	b.n	8009c2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800992a:	78bb      	ldrb	r3, [r7, #2]
 800992c:	2b0e      	cmp	r3, #14
 800992e:	d110      	bne.n	8009952 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009930:	2230      	movs	r2, #48	; 0x30
 8009932:	2157      	movs	r1, #87	; 0x57
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f001 fc19 	bl	800b16c <VL53L0X_WrByte>
 800993a:	4603      	mov	r3, r0
 800993c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8009940:	2208      	movs	r2, #8
 8009942:	2156      	movs	r1, #86	; 0x56
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f001 fc11 	bl	800b16c <VL53L0X_WrByte>
 800994a:	4603      	mov	r3, r0
 800994c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009950:	e16b      	b.n	8009c2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009952:	78bb      	ldrb	r3, [r7, #2]
 8009954:	2b10      	cmp	r3, #16
 8009956:	d110      	bne.n	800997a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009958:	2240      	movs	r2, #64	; 0x40
 800995a:	2157      	movs	r1, #87	; 0x57
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 fc05 	bl	800b16c <VL53L0X_WrByte>
 8009962:	4603      	mov	r3, r0
 8009964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009968:	2208      	movs	r2, #8
 800996a:	2156      	movs	r1, #86	; 0x56
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 fbfd 	bl	800b16c <VL53L0X_WrByte>
 8009972:	4603      	mov	r3, r0
 8009974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009978:	e157      	b.n	8009c2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800997a:	78bb      	ldrb	r3, [r7, #2]
 800997c:	2b12      	cmp	r3, #18
 800997e:	f040 8154 	bne.w	8009c2a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009982:	2250      	movs	r2, #80	; 0x50
 8009984:	2157      	movs	r1, #87	; 0x57
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f001 fbf0 	bl	800b16c <VL53L0X_WrByte>
 800998c:	4603      	mov	r3, r0
 800998e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009992:	2208      	movs	r2, #8
 8009994:	2156      	movs	r1, #86	; 0x56
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 fbe8 	bl	800b16c <VL53L0X_WrByte>
 800999c:	4603      	mov	r3, r0
 800999e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099a2:	e142      	b.n	8009c2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	f040 813f 	bne.w	8009c2a <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80099ac:	78bb      	ldrb	r3, [r7, #2]
 80099ae:	2b08      	cmp	r3, #8
 80099b0:	d14c      	bne.n	8009a4c <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80099b2:	2210      	movs	r2, #16
 80099b4:	2148      	movs	r1, #72	; 0x48
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 fbd8 	bl	800b16c <VL53L0X_WrByte>
 80099bc:	4603      	mov	r3, r0
 80099be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80099c2:	2208      	movs	r2, #8
 80099c4:	2147      	movs	r1, #71	; 0x47
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f001 fbd0 	bl	800b16c <VL53L0X_WrByte>
 80099cc:	4603      	mov	r3, r0
 80099ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80099d2:	2202      	movs	r2, #2
 80099d4:	2132      	movs	r1, #50	; 0x32
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f001 fbc8 	bl	800b16c <VL53L0X_WrByte>
 80099dc:	4603      	mov	r3, r0
 80099de:	461a      	mov	r2, r3
 80099e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e4:	4313      	orrs	r3, r2
 80099e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80099ea:	220c      	movs	r2, #12
 80099ec:	2130      	movs	r1, #48	; 0x30
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 fbbc 	bl	800b16c <VL53L0X_WrByte>
 80099f4:	4603      	mov	r3, r0
 80099f6:	461a      	mov	r2, r3
 80099f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099fc:	4313      	orrs	r3, r2
 80099fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009a02:	2201      	movs	r2, #1
 8009a04:	21ff      	movs	r1, #255	; 0xff
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f001 fbb0 	bl	800b16c <VL53L0X_WrByte>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a14:	4313      	orrs	r3, r2
 8009a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009a1a:	2230      	movs	r2, #48	; 0x30
 8009a1c:	2130      	movs	r1, #48	; 0x30
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f001 fba4 	bl	800b16c <VL53L0X_WrByte>
 8009a24:	4603      	mov	r3, r0
 8009a26:	461a      	mov	r2, r3
 8009a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009a32:	2200      	movs	r2, #0
 8009a34:	21ff      	movs	r1, #255	; 0xff
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 fb98 	bl	800b16c <VL53L0X_WrByte>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a44:	4313      	orrs	r3, r2
 8009a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a4a:	e0ee      	b.n	8009c2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009a4c:	78bb      	ldrb	r3, [r7, #2]
 8009a4e:	2b0a      	cmp	r3, #10
 8009a50:	d14c      	bne.n	8009aec <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009a52:	2228      	movs	r2, #40	; 0x28
 8009a54:	2148      	movs	r1, #72	; 0x48
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f001 fb88 	bl	800b16c <VL53L0X_WrByte>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009a62:	2208      	movs	r2, #8
 8009a64:	2147      	movs	r1, #71	; 0x47
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 fb80 	bl	800b16c <VL53L0X_WrByte>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009a72:	2203      	movs	r2, #3
 8009a74:	2132      	movs	r1, #50	; 0x32
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f001 fb78 	bl	800b16c <VL53L0X_WrByte>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a84:	4313      	orrs	r3, r2
 8009a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009a8a:	2209      	movs	r2, #9
 8009a8c:	2130      	movs	r1, #48	; 0x30
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 fb6c 	bl	800b16c <VL53L0X_WrByte>
 8009a94:	4603      	mov	r3, r0
 8009a96:	461a      	mov	r2, r3
 8009a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	21ff      	movs	r1, #255	; 0xff
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f001 fb60 	bl	800b16c <VL53L0X_WrByte>
 8009aac:	4603      	mov	r3, r0
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009aba:	2220      	movs	r2, #32
 8009abc:	2130      	movs	r1, #48	; 0x30
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f001 fb54 	bl	800b16c <VL53L0X_WrByte>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009acc:	4313      	orrs	r3, r2
 8009ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	21ff      	movs	r1, #255	; 0xff
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f001 fb48 	bl	800b16c <VL53L0X_WrByte>
 8009adc:	4603      	mov	r3, r0
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009aea:	e09e      	b.n	8009c2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009aec:	78bb      	ldrb	r3, [r7, #2]
 8009aee:	2b0c      	cmp	r3, #12
 8009af0:	d14c      	bne.n	8009b8c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009af2:	2238      	movs	r2, #56	; 0x38
 8009af4:	2148      	movs	r1, #72	; 0x48
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 fb38 	bl	800b16c <VL53L0X_WrByte>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009b02:	2208      	movs	r2, #8
 8009b04:	2147      	movs	r1, #71	; 0x47
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f001 fb30 	bl	800b16c <VL53L0X_WrByte>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009b12:	2203      	movs	r2, #3
 8009b14:	2132      	movs	r1, #50	; 0x32
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 fb28 	bl	800b16c <VL53L0X_WrByte>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b24:	4313      	orrs	r3, r2
 8009b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009b2a:	2208      	movs	r2, #8
 8009b2c:	2130      	movs	r1, #48	; 0x30
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f001 fb1c 	bl	800b16c <VL53L0X_WrByte>
 8009b34:	4603      	mov	r3, r0
 8009b36:	461a      	mov	r2, r3
 8009b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009b42:	2201      	movs	r2, #1
 8009b44:	21ff      	movs	r1, #255	; 0xff
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f001 fb10 	bl	800b16c <VL53L0X_WrByte>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b54:	4313      	orrs	r3, r2
 8009b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	2130      	movs	r1, #48	; 0x30
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 fb04 	bl	800b16c <VL53L0X_WrByte>
 8009b64:	4603      	mov	r3, r0
 8009b66:	461a      	mov	r2, r3
 8009b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009b72:	2200      	movs	r2, #0
 8009b74:	21ff      	movs	r1, #255	; 0xff
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 faf8 	bl	800b16c <VL53L0X_WrByte>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b84:	4313      	orrs	r3, r2
 8009b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b8a:	e04e      	b.n	8009c2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009b8c:	78bb      	ldrb	r3, [r7, #2]
 8009b8e:	2b0e      	cmp	r3, #14
 8009b90:	d14b      	bne.n	8009c2a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009b92:	2248      	movs	r2, #72	; 0x48
 8009b94:	2148      	movs	r1, #72	; 0x48
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f001 fae8 	bl	800b16c <VL53L0X_WrByte>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009ba2:	2208      	movs	r2, #8
 8009ba4:	2147      	movs	r1, #71	; 0x47
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f001 fae0 	bl	800b16c <VL53L0X_WrByte>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009bb2:	2203      	movs	r2, #3
 8009bb4:	2132      	movs	r1, #50	; 0x32
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 fad8 	bl	800b16c <VL53L0X_WrByte>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009bca:	2207      	movs	r2, #7
 8009bcc:	2130      	movs	r1, #48	; 0x30
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f001 facc 	bl	800b16c <VL53L0X_WrByte>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009be2:	2201      	movs	r2, #1
 8009be4:	21ff      	movs	r1, #255	; 0xff
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f001 fac0 	bl	800b16c <VL53L0X_WrByte>
 8009bec:	4603      	mov	r3, r0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	2130      	movs	r1, #48	; 0x30
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f001 fab4 	bl	800b16c <VL53L0X_WrByte>
 8009c04:	4603      	mov	r3, r0
 8009c06:	461a      	mov	r2, r3
 8009c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009c12:	2200      	movs	r2, #0
 8009c14:	21ff      	movs	r1, #255	; 0xff
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 faa8 	bl	800b16c <VL53L0X_WrByte>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c24:	4313      	orrs	r3, r2
 8009c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8009c2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d17f      	bne.n	8009d32 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8009c32:	78bb      	ldrb	r3, [r7, #2]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fe fe35 	bl	80088a4 <VL53L0X_encode_vcsel_period>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8009c40:	78fb      	ldrb	r3, [r7, #3]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d045      	beq.n	8009cd6 <VL53L0X_set_vcsel_pulse_period+0x470>
 8009c4a:	e06e      	b.n	8009d2a <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009c4c:	f107 0314 	add.w	r3, r7, #20
 8009c50:	461a      	mov	r2, r3
 8009c52:	2103      	movs	r1, #3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7ff fc31 	bl	80094bc <get_sequence_step_timeout>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009c60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d109      	bne.n	8009c7c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8009c68:	f107 0310 	add.w	r3, r7, #16
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	2102      	movs	r1, #2
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff fc23 	bl	80094bc <get_sequence_step_timeout>
 8009c76:	4603      	mov	r3, r0
 8009c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009c7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d109      	bne.n	8009c98 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009c84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009c88:	461a      	mov	r2, r3
 8009c8a:	2150      	movs	r1, #80	; 0x50
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 fa6d 	bl	800b16c <VL53L0X_WrByte>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009c98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d108      	bne.n	8009cb2 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	2103      	movs	r1, #3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff fce9 	bl	800967e <set_sequence_step_timeout>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009cb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d108      	bne.n	8009ccc <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	2102      	movs	r1, #2
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7ff fcdc 	bl	800967e <set_sequence_step_timeout>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	78ba      	ldrb	r2, [r7, #2]
 8009cd0:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009cd4:	e02e      	b.n	8009d34 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009cd6:	f107 0318 	add.w	r3, r7, #24
 8009cda:	461a      	mov	r2, r3
 8009cdc:	2104      	movs	r1, #4
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff fbec 	bl	80094bc <get_sequence_step_timeout>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009cea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d109      	bne.n	8009d06 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009cf2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	2170      	movs	r1, #112	; 0x70
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f001 fa36 	bl	800b16c <VL53L0X_WrByte>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009d06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d108      	bne.n	8009d20 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	461a      	mov	r2, r3
 8009d12:	2104      	movs	r1, #4
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7ff fcb2 	bl	800967e <set_sequence_step_timeout>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	78ba      	ldrb	r2, [r7, #2]
 8009d24:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009d28:	e004      	b.n	8009d34 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d2a:	23fc      	movs	r3, #252	; 0xfc
 8009d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d30:	e000      	b.n	8009d34 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8009d32:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8009d34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d109      	bne.n	8009d50 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009d42:	69f9      	ldr	r1, [r7, #28]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7fc fe11 	bl	800696c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8009d50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d109      	bne.n	8009d6c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8009d58:	f107 010f 	add.w	r1, r7, #15
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	2200      	movs	r2, #0
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7fe fcbb 	bl	80086dc <VL53L0X_perform_phase_calibration>
 8009d66:	4603      	mov	r3, r0
 8009d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009d6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3728      	adds	r7, #40	; 0x28
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	460b      	mov	r3, r1
 8009d82:	607a      	str	r2, [r7, #4]
 8009d84:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d86:	2300      	movs	r3, #0
 8009d88:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009d8a:	7afb      	ldrb	r3, [r7, #11]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d00a      	beq.n	8009daa <VL53L0X_get_vcsel_pulse_period+0x32>
 8009d94:	e013      	b.n	8009dbe <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009d96:	f107 0316 	add.w	r3, r7, #22
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	2150      	movs	r1, #80	; 0x50
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f001 f8e9 	bl	800af76 <VL53L0X_RdByte>
 8009da4:	4603      	mov	r3, r0
 8009da6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009da8:	e00b      	b.n	8009dc2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009daa:	f107 0316 	add.w	r3, r7, #22
 8009dae:	461a      	mov	r2, r3
 8009db0:	2170      	movs	r1, #112	; 0x70
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f001 f8df 	bl	800af76 <VL53L0X_RdByte>
 8009db8:	4603      	mov	r3, r0
 8009dba:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009dbc:	e001      	b.n	8009dc2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009dbe:	23fc      	movs	r3, #252	; 0xfc
 8009dc0:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d107      	bne.n	8009dda <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009dca:	7dbb      	ldrb	r3, [r7, #22]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fe fd56 	bl	800887e <VL53L0X_decode_vcsel_period>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	701a      	strb	r2, [r3, #0]

	return Status;
 8009dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b092      	sub	sp, #72	; 0x48
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009df0:	2300      	movs	r3, #0
 8009df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009df6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009dfa:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 8009dfc:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8009e00:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009e02:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009e06:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009e08:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009e0c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8009e0e:	f240 234e 	movw	r3, #590	; 0x24e
 8009e12:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009e14:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009e18:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009e1a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009e1e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009e20:	f240 2326 	movw	r3, #550	; 0x226
 8009e24:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009e2a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009e2e:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d205      	bcs.n	8009e48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e3c:	23fc      	movs	r3, #252	; 0xfc
 8009e3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009e42:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009e46:	e0aa      	b.n	8009f9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009e48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4c:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009e54:	f107 0314 	add.w	r3, r7, #20
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7fc fed0 	bl	8006c00 <VL53L0X_GetSequenceStepEnables>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009e66:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d15b      	bne.n	8009f26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009e6e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d105      	bne.n	8009e80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009e74:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d102      	bne.n	8009e80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8009e7a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d052      	beq.n	8009f26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009e80:	f107 0310 	add.w	r3, r7, #16
 8009e84:	461a      	mov	r2, r3
 8009e86:	2102      	movs	r1, #2
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff fb17 	bl	80094bc <get_sequence_step_timeout>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009e94:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009e9c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009ea0:	e07d      	b.n	8009f9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009ea2:	7d3b      	ldrb	r3, [r7, #20]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00f      	beq.n	8009ec8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009ea8:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eac:	4413      	add	r3, r2
 8009eae:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009eb0:	69fa      	ldr	r2, [r7, #28]
 8009eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d204      	bcs.n	8009ec2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009eb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8009ec0:	e002      	b.n	8009ec8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ec2:	23fc      	movs	r3, #252	; 0xfc
 8009ec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009ec8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009ed0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009ed4:	e063      	b.n	8009f9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009ed6:	7dbb      	ldrb	r3, [r7, #22]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d011      	beq.n	8009f00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee0:	4413      	add	r3, r2
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009ee6:	69fa      	ldr	r2, [r7, #28]
 8009ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d204      	bcs.n	8009ef8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009eee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8009ef6:	e016      	b.n	8009f26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ef8:	23fc      	movs	r3, #252	; 0xfc
 8009efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009efe:	e012      	b.n	8009f26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009f00:	7d7b      	ldrb	r3, [r7, #21]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00f      	beq.n	8009f26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f0a:	4413      	add	r3, r2
 8009f0c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009f0e:	69fa      	ldr	r2, [r7, #28]
 8009f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d204      	bcs.n	8009f20 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009f16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8009f1e:	e002      	b.n	8009f26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f20:	23fc      	movs	r3, #252	; 0xfc
 8009f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009f26:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d002      	beq.n	8009f34 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009f2e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f32:	e034      	b.n	8009f9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009f34:	7dfb      	ldrb	r3, [r7, #23]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d019      	beq.n	8009f6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009f3a:	f107 030c 	add.w	r3, r7, #12
 8009f3e:	461a      	mov	r2, r3
 8009f40:	2103      	movs	r1, #3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7ff faba 	bl	80094bc <get_sequence_step_timeout>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f52:	4413      	add	r3, r2
 8009f54:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009f56:	69fa      	ldr	r2, [r7, #28]
 8009f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d204      	bcs.n	8009f68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	643b      	str	r3, [r7, #64]	; 0x40
 8009f66:	e002      	b.n	8009f6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f68:	23fc      	movs	r3, #252	; 0xfc
 8009f6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009f6e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d111      	bne.n	8009f9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009f76:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00e      	beq.n	8009f9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 8009f84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f86:	2104      	movs	r1, #4
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff fb78 	bl	800967e <set_sequence_step_timeout>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009f9a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3748      	adds	r7, #72	; 0x48
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b090      	sub	sp, #64	; 0x40
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009fb6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009fba:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009fbc:	f240 7376 	movw	r3, #1910	; 0x776
 8009fc0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009fc2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009fc6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009fc8:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009fcc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009fce:	f240 234e 	movw	r3, #590	; 0x24e
 8009fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009fd4:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009fd8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009fda:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009fde:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009fe0:	f240 2326 	movw	r3, #550	; 0x226
 8009fe4:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8009fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fee:	441a      	add	r2, r3
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009ff4:	f107 0318 	add.w	r3, r7, #24
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7fc fe00 	bl	8006c00 <VL53L0X_GetSequenceStepEnables>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a006:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a00e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a012:	e075      	b.n	800a100 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a014:	7e3b      	ldrb	r3, [r7, #24]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d105      	bne.n	800a026 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a01a:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d102      	bne.n	800a026 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a020:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a022:	2b00      	cmp	r3, #0
 800a024:	d030      	beq.n	800a088 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a026:	f107 0310 	add.w	r3, r7, #16
 800a02a:	461a      	mov	r2, r3
 800a02c:	2102      	movs	r1, #2
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7ff fa44 	bl	80094bc <get_sequence_step_timeout>
 800a034:	4603      	mov	r3, r0
 800a036:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a03a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d122      	bne.n	800a088 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a042:	7e3b      	ldrb	r3, [r7, #24]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d007      	beq.n	800a058 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a04c:	6939      	ldr	r1, [r7, #16]
 800a04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a050:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a052:	441a      	add	r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a058:	7ebb      	ldrb	r3, [r7, #26]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d009      	beq.n	800a072 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a062:	6939      	ldr	r1, [r7, #16]
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	440b      	add	r3, r1
 800a068:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a06a:	441a      	add	r2, r3
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	e00a      	b.n	800a088 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a072:	7e7b      	ldrb	r3, [r7, #25]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d007      	beq.n	800a088 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a07c:	6939      	ldr	r1, [r7, #16]
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a082:	441a      	add	r2, r3
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a088:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d114      	bne.n	800a0ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a090:	7efb      	ldrb	r3, [r7, #27]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d011      	beq.n	800a0ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a096:	f107 030c 	add.w	r3, r7, #12
 800a09a:	461a      	mov	r2, r3
 800a09c:	2103      	movs	r1, #3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7ff fa0c 	bl	80094bc <get_sequence_step_timeout>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a0ae:	68f9      	ldr	r1, [r7, #12]
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a0b4:	441a      	add	r2, r3
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a0ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d114      	bne.n	800a0ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a0c2:	7f3b      	ldrb	r3, [r7, #28]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d011      	beq.n	800a0ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a0c8:	f107 0314 	add.w	r3, r7, #20
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	2104      	movs	r1, #4
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7ff f9f3 	bl	80094bc <get_sequence_step_timeout>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a0e0:	6979      	ldr	r1, [r7, #20]
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a0e6:	441a      	add	r2, r3
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a0ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d103      	bne.n	800a0fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a0fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a100:	4618      	mov	r0, r3
 800a102:	3740      	adds	r7, #64	; 0x40
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b088      	sub	sp, #32
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a112:	2300      	movs	r3, #0
 800a114:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a11a:	e0c6      	b.n	800a2aa <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	4413      	add	r3, r2
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	3301      	adds	r3, #1
 800a12a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a12c:	7cfb      	ldrb	r3, [r7, #19]
 800a12e:	2bff      	cmp	r3, #255	; 0xff
 800a130:	f040 808d 	bne.w	800a24e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	4413      	add	r3, r2
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	747b      	strb	r3, [r7, #17]
			Index++;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	3301      	adds	r3, #1
 800a142:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a144:	7c7b      	ldrb	r3, [r7, #17]
 800a146:	2b03      	cmp	r3, #3
 800a148:	d87e      	bhi.n	800a248 <VL53L0X_load_tuning_settings+0x140>
 800a14a:	a201      	add	r2, pc, #4	; (adr r2, 800a150 <VL53L0X_load_tuning_settings+0x48>)
 800a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a150:	0800a161 	.word	0x0800a161
 800a154:	0800a19b 	.word	0x0800a19b
 800a158:	0800a1d5 	.word	0x0800a1d5
 800a15c:	0800a20f 	.word	0x0800a20f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	4413      	add	r3, r2
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	743b      	strb	r3, [r7, #16]
				Index++;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	3301      	adds	r3, #1
 800a16e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	4413      	add	r3, r2
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	3301      	adds	r3, #1
 800a17e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a180:	7c3b      	ldrb	r3, [r7, #16]
 800a182:	b29b      	uxth	r3, r3
 800a184:	021b      	lsls	r3, r3, #8
 800a186:	b29a      	uxth	r2, r3
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	4413      	add	r3, r2
 800a18e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	89ba      	ldrh	r2, [r7, #12]
 800a194:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a198:	e087      	b.n	800a2aa <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	4413      	add	r3, r2
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	743b      	strb	r3, [r7, #16]
				Index++;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	683a      	ldr	r2, [r7, #0]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a1ba:	7c3b      	ldrb	r3, [r7, #16]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	021b      	lsls	r3, r3, #8
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	4413      	add	r3, r2
 800a1c8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	89ba      	ldrh	r2, [r7, #12]
 800a1ce:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a1d2:	e06a      	b.n	800a2aa <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	4413      	add	r3, r2
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	743b      	strb	r3, [r7, #16]
				Index++;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a1f4:	7c3b      	ldrb	r3, [r7, #16]
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	021b      	lsls	r3, r3, #8
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	4413      	add	r3, r2
 800a202:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	89ba      	ldrh	r2, [r7, #12]
 800a208:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a20c:	e04d      	b.n	800a2aa <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	4413      	add	r3, r2
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	743b      	strb	r3, [r7, #16]
				Index++;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	3301      	adds	r3, #1
 800a21c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	683a      	ldr	r2, [r7, #0]
 800a222:	4413      	add	r3, r2
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	3301      	adds	r3, #1
 800a22c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a22e:	7c3b      	ldrb	r3, [r7, #16]
 800a230:	b29b      	uxth	r3, r3
 800a232:	021b      	lsls	r3, r3, #8
 800a234:	b29a      	uxth	r2, r3
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	4413      	add	r3, r2
 800a23c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	89ba      	ldrh	r2, [r7, #12]
 800a242:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 800a246:	e030      	b.n	800a2aa <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a248:	23fc      	movs	r3, #252	; 0xfc
 800a24a:	77fb      	strb	r3, [r7, #31]
 800a24c:	e02d      	b.n	800a2aa <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a24e:	7cfb      	ldrb	r3, [r7, #19]
 800a250:	2b04      	cmp	r3, #4
 800a252:	d828      	bhi.n	800a2a6 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	4413      	add	r3, r2
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	3301      	adds	r3, #1
 800a262:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a264:	2300      	movs	r3, #0
 800a266:	61bb      	str	r3, [r7, #24]
 800a268:	e00f      	b.n	800a28a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	4413      	add	r3, r2
 800a270:	7819      	ldrb	r1, [r3, #0]
 800a272:	f107 0208 	add.w	r2, r7, #8
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	4413      	add	r3, r2
 800a27a:	460a      	mov	r2, r1
 800a27c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	3301      	adds	r3, #1
 800a282:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	3301      	adds	r3, #1
 800a288:	61bb      	str	r3, [r7, #24]
 800a28a:	7cfb      	ldrb	r3, [r7, #19]
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	429a      	cmp	r2, r3
 800a290:	dbeb      	blt.n	800a26a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a292:	7cfb      	ldrb	r3, [r7, #19]
 800a294:	f107 0208 	add.w	r2, r7, #8
 800a298:	7cb9      	ldrb	r1, [r7, #18]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fe96 	bl	800afcc <VL53L0X_WriteMulti>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	77fb      	strb	r3, [r7, #31]
 800a2a4:	e001      	b.n	800a2aa <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2a6:	23fc      	movs	r3, #252	; 0xfc
 800a2a8:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d004      	beq.n	800a2c0 <VL53L0X_load_tuning_settings+0x1b8>
 800a2b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f43f af2e 	beq.w	800a11c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a2c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3720      	adds	r7, #32
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a2e2:	f107 0313 	add.w	r3, r7, #19
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f7fc fd55 	bl	8006d98 <VL53L0X_GetXTalkCompensationEnable>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a2f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d111      	bne.n	800a31e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a2fa:	7cfb      	ldrb	r3, [r7, #19]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00e      	beq.n	800a31e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6a1b      	ldr	r3, [r3, #32]
 800a304:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	8a9b      	ldrh	r3, [r3, #20]
 800a30a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	fb02 f303 	mul.w	r3, r2, r3
 800a312:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	3380      	adds	r3, #128	; 0x80
 800a318:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a31e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3720      	adds	r7, #32
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b086      	sub	sp, #24
 800a32e:	af00      	add	r7, sp, #0
 800a330:	60f8      	str	r0, [r7, #12]
 800a332:	60b9      	str	r1, [r7, #8]
 800a334:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a336:	2300      	movs	r3, #0
 800a338:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a342:	f107 0310 	add.w	r3, r7, #16
 800a346:	461a      	mov	r2, r3
 800a348:	68b9      	ldr	r1, [r7, #8]
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f7ff ffbe 	bl	800a2cc <VL53L0X_get_total_xtalk_rate>
 800a350:	4603      	mov	r3, r0
 800a352:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a354:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d105      	bne.n	800a368 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	441a      	add	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	601a      	str	r2, [r3, #0]

	return Status;
 800a368:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b09a      	sub	sp, #104	; 0x68
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a382:	2312      	movs	r3, #18
 800a384:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a386:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a38a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a38c:	2342      	movs	r3, #66	; 0x42
 800a38e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a390:	2306      	movs	r3, #6
 800a392:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a394:	2307      	movs	r3, #7
 800a396:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a398:	2300      	movs	r3, #0
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 800a3a4:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a3ac:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3b2:	fb02 f303 	mul.w	r3, r2, r3
 800a3b6:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ba:	3380      	adds	r3, #128	; 0x80
 800a3bc:	0a1b      	lsrs	r3, r3, #8
 800a3be:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3c4:	fb02 f303 	mul.w	r3, r2, r3
 800a3c8:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d01a      	beq.n	800a40a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	029b      	lsls	r3, r3, #10
 800a3d8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a3de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e0:	4413      	add	r3, r2
 800a3e2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a3e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ec:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a3ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	4413      	add	r3, r2
 800a3f6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a3f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3fa:	fb03 f303 	mul.w	r3, r3, r3
 800a3fe:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a402:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a406:	0c1b      	lsrs	r3, r3, #16
 800a408:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a40e:	fb02 f303 	mul.w	r3, r2, r3
 800a412:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a416:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a41a:	0c1b      	lsrs	r3, r3, #16
 800a41c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a420:	fb03 f303 	mul.w	r3, r3, r3
 800a424:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a428:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a42c:	0c1b      	lsrs	r3, r3, #16
 800a42e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a432:	085a      	lsrs	r2, r3, #1
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	441a      	add	r2, r3
 800a438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a444:	fb02 f303 	mul.w	r3, r2, r3
 800a448:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a450:	d302      	bcc.n	800a458 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800a452:	4b54      	ldr	r3, [pc, #336]	; (800a5a4 <VL53L0X_calc_dmax+0x230>)
 800a454:	663b      	str	r3, [r7, #96]	; 0x60
 800a456:	e015      	b.n	800a484 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a45a:	085a      	lsrs	r2, r3, #1
 800a45c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a45e:	441a      	add	r2, r3
 800a460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a462:	fbb2 f3f3 	udiv	r3, r2, r3
 800a466:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a46a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a46c:	fb02 f303 	mul.w	r3, r2, r3
 800a470:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a474:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a478:	0c1b      	lsrs	r3, r3, #16
 800a47a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a47c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a47e:	fb03 f303 	mul.w	r3, r3, r3
 800a482:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a486:	039b      	lsls	r3, r3, #14
 800a488:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a48c:	4a46      	ldr	r2, [pc, #280]	; (800a5a8 <VL53L0X_calc_dmax+0x234>)
 800a48e:	fba2 2303 	umull	r2, r3, r2, r3
 800a492:	099b      	lsrs	r3, r3, #6
 800a494:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	fb03 f303 	mul.w	r3, r3, r3
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a0:	fb03 f303 	mul.w	r3, r3, r3
 800a4a4:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	091b      	lsrs	r3, r3, #4
 800a4ac:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a4ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	4413      	add	r3, r2
 800a4be:	011b      	lsls	r3, r3, #4
 800a4c0:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a4c8:	0b9b      	lsrs	r3, r3, #14
 800a4ca:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a4cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4d0:	4413      	add	r3, r2
 800a4d2:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a4d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4d6:	085b      	lsrs	r3, r3, #1
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	4413      	add	r3, r2
 800a4dc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a4de:	69ba      	ldr	r2, [r7, #24]
 800a4e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4e6:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	039b      	lsls	r3, r3, #14
 800a4ec:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	085b      	lsrs	r3, r3, #1
 800a4f2:	69ba      	ldr	r2, [r7, #24]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a500:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a506:	fb02 f303 	mul.w	r3, r2, r3
 800a50a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a512:	4a25      	ldr	r2, [pc, #148]	; (800a5a8 <VL53L0X_calc_dmax+0x234>)
 800a514:	fba2 2303 	umull	r2, r3, r2, r3
 800a518:	099b      	lsrs	r3, r3, #6
 800a51a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	011b      	lsls	r3, r3, #4
 800a520:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a528:	4a1f      	ldr	r2, [pc, #124]	; (800a5a8 <VL53L0X_calc_dmax+0x234>)
 800a52a:	fba2 2303 	umull	r2, r3, r2, r3
 800a52e:	099b      	lsrs	r3, r3, #6
 800a530:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a534:	3380      	adds	r3, #128	; 0x80
 800a536:	0a1b      	lsrs	r3, r3, #8
 800a538:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d008      	beq.n	800a552 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	085a      	lsrs	r2, r3, #1
 800a544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a546:	441a      	add	r2, r3
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a54e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a550:	e001      	b.n	800a556 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a556:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a558:	f7fe f9b7 	bl	80088ca <VL53L0X_isqrt>
 800a55c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d008      	beq.n	800a576 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	085a      	lsrs	r2, r3, #1
 800a568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56a:	441a      	add	r2, r3
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a572:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a574:	e001      	b.n	800a57a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a576:	2300      	movs	r3, #0
 800a578:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a57a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a57c:	f7fe f9a5 	bl	80088ca <VL53L0X_isqrt>
 800a580:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d902      	bls.n	800a596 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800a590:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a592:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a594:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a596:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3768      	adds	r7, #104	; 0x68
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	fff00000 	.word	0xfff00000
 800a5a8:	10624dd3 	.word	0x10624dd3

0800a5ac <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b0b2      	sub	sp, #200	; 0xc8
 800a5b0:	af04      	add	r7, sp, #16
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a5ba:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a5be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a5c2:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a5c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a5ca:	2342      	movs	r3, #66	; 0x42
 800a5cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a5d0:	f241 235c 	movw	r3, #4700	; 0x125c
 800a5d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a5d8:	4b6b      	ldr	r3, [pc, #428]	; (800a788 <VL53L0X_calc_sigma_estimate+0x1dc>)
 800a5da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a5de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a5e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a5e6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a5ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f2:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a5f4:	4b65      	ldr	r3, [pc, #404]	; (800a78c <VL53L0X_calc_sigma_estimate+0x1e0>)
 800a5f6:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a5f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5fc:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a5fe:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a602:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 800a604:	f240 6377 	movw	r3, #1655	; 0x677
 800a608:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a60a:	2300      	movs	r3, #0
 800a60c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6a1b      	ldr	r3, [r3, #32]
 800a614:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a61e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a622:	0c1b      	lsrs	r3, r3, #16
 800a624:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a62c:	f107 0310 	add.w	r3, r7, #16
 800a630:	461a      	mov	r2, r3
 800a632:	68b9      	ldr	r1, [r7, #8]
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f7ff fe78 	bl	800a32a <VL53L0X_get_total_signal_rate>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a640:	f107 0314 	add.w	r3, r7, #20
 800a644:	461a      	mov	r2, r3
 800a646:	68b9      	ldr	r1, [r7, #8]
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f7ff fe3f 	bl	800a2cc <VL53L0X_get_total_xtalk_rate>
 800a64e:	4603      	mov	r3, r0
 800a650:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a65a:	fb02 f303 	mul.w	r3, r2, r3
 800a65e:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a660:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a662:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a666:	0c1b      	lsrs	r3, r3, #16
 800a668:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a670:	fb02 f303 	mul.w	r3, r2, r3
 800a674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a678:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a67c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a67e:	429a      	cmp	r2, r3
 800a680:	d902      	bls.n	800a688 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a684:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 800a688:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d164      	bne.n	800a75a <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a696:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a69e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a6a2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f7fe feb0 	bl	8009410 <VL53L0X_calc_timeout_mclks>
 800a6b0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a6b8:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a6c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a6c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f7fe fe9f 	bl	8009410 <VL53L0X_calc_timeout_mclks>
 800a6d2:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800a6da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a6de:	2b08      	cmp	r3, #8
 800a6e0:	d102      	bne.n	800a6e8 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a6e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ec:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a6ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a6f2:	fb02 f303 	mul.w	r3, r2, r3
 800a6f6:	02db      	lsls	r3, r3, #11
 800a6f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a6fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a700:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a704:	4a22      	ldr	r2, [pc, #136]	; (800a790 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800a706:	fba2 2303 	umull	r2, r3, r2, r3
 800a70a:	099b      	lsrs	r3, r3, #6
 800a70c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 800a710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a716:	fb02 f303 	mul.w	r3, r2, r3
 800a71a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a71e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a722:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a726:	4a1a      	ldr	r2, [pc, #104]	; (800a790 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800a728:	fba2 2303 	umull	r2, r3, r2, r3
 800a72c:	099b      	lsrs	r3, r3, #6
 800a72e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	3380      	adds	r3, #128	; 0x80
 800a736:	0a1b      	lsrs	r3, r3, #8
 800a738:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a73a:	693a      	ldr	r2, [r7, #16]
 800a73c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a740:	fb02 f303 	mul.w	r3, r2, r3
 800a744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a748:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a74c:	3380      	adds	r3, #128	; 0x80
 800a74e:	0a1b      	lsrs	r3, r3, #8
 800a750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	021b      	lsls	r3, r3, #8
 800a758:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a75a:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d002      	beq.n	800a768 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 800a762:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800a766:	e127      	b.n	800a9b8 <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 800a768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d112      	bne.n	800a794 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a774:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a77c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2200      	movs	r2, #0
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	e115      	b.n	800a9b4 <VL53L0X_calc_sigma_estimate+0x408>
 800a788:	028f87ae 	.word	0x028f87ae
 800a78c:	0006999a 	.word	0x0006999a
 800a790:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 800a794:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 800a79c:	2301      	movs	r3, #1
 800a79e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a7a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7a6:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a7a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7aa:	041a      	lsls	r2, r3, #16
 800a7ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a7b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a7ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d902      	bls.n	800a7c6 <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a7c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a7c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a7ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a7ce:	fb02 f303 	mul.w	r3, r2, r3
 800a7d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a7d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a7da:	4613      	mov	r3, r2
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	4413      	add	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe f871 	bl	80088ca <VL53L0X_isqrt>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	005b      	lsls	r3, r3, #1
 800a7ec:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	891b      	ldrh	r3, [r3, #8]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7f6:	fb02 f303 	mul.w	r3, r2, r3
 800a7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a7fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7fe:	041a      	lsls	r2, r3, #16
 800a800:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a804:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 800a806:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a80a:	4a6d      	ldr	r2, [pc, #436]	; (800a9c0 <VL53L0X_calc_sigma_estimate+0x414>)
 800a80c:	fba2 2303 	umull	r2, r3, r2, r3
 800a810:	099b      	lsrs	r3, r3, #6
 800a812:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800a814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a816:	041a      	lsls	r2, r3, #16
 800a818:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a81c:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 800a81e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800a822:	4a67      	ldr	r2, [pc, #412]	; (800a9c0 <VL53L0X_calc_sigma_estimate+0x414>)
 800a824:	fba2 2303 	umull	r2, r3, r2, r3
 800a828:	099b      	lsrs	r3, r3, #6
 800a82a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	021b      	lsls	r3, r3, #8
 800a830:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a836:	fbb2 f3f3 	udiv	r3, r2, r3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bfb8      	it	lt
 800a83e:	425b      	neglt	r3, r3
 800a840:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	021b      	lsls	r3, r3, #8
 800a846:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a84a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a84e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a852:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 800a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a856:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85c:	fb02 f303 	mul.w	r3, r2, r3
 800a860:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a866:	4413      	add	r3, r2
 800a868:	0c1b      	lsrs	r3, r3, #16
 800a86a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a872:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	085b      	lsrs	r3, r3, #1
 800a878:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 800a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87c:	fb03 f303 	mul.w	r3, r3, r3
 800a880:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 800a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a884:	0b9b      	lsrs	r3, r3, #14
 800a886:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a88c:	fb02 f303 	mul.w	r3, r2, r3
 800a890:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a894:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a898:	0c1b      	lsrs	r3, r3, #16
 800a89a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	fb03 f303 	mul.w	r3, r3, r3
 800a8a2:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 800a8a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a8a8:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a8b0:	0c1b      	lsrs	r3, r3, #16
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b6:	fb03 f303 	mul.w	r3, r3, r3
 800a8ba:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a8bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c0:	4413      	add	r3, r2
 800a8c2:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a8c4:	6a38      	ldr	r0, [r7, #32]
 800a8c6:	f7fe f800 	bl	80088ca <VL53L0X_isqrt>
 800a8ca:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	041b      	lsls	r3, r3, #16
 800a8d0:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	3332      	adds	r3, #50	; 0x32
 800a8d6:	4a3b      	ldr	r2, [pc, #236]	; (800a9c4 <VL53L0X_calc_sigma_estimate+0x418>)
 800a8d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8dc:	095a      	lsrs	r2, r3, #5
 800a8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a8e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8ec:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a8f0:	fb02 f303 	mul.w	r3, r2, r3
 800a8f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a8f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8fc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a900:	3308      	adds	r3, #8
 800a902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 800a906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a90a:	4a2f      	ldr	r2, [pc, #188]	; (800a9c8 <VL53L0X_calc_sigma_estimate+0x41c>)
 800a90c:	fba2 2303 	umull	r2, r3, r2, r3
 800a910:	0b5b      	lsrs	r3, r3, #13
 800a912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a916:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a91a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a91e:	429a      	cmp	r2, r3
 800a920:	d903      	bls.n	800a92a <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a92a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a92e:	fb03 f303 	mul.w	r3, r3, r3
 800a932:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 800a934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a938:	fb03 f303 	mul.w	r3, r3, r3
 800a93c:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a93e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	4413      	add	r3, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f7fd ffc0 	bl	80088ca <VL53L0X_isqrt>
 800a94a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a952:	fb02 f303 	mul.w	r3, r2, r3
 800a956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a95a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d009      	beq.n	800a974 <VL53L0X_calc_sigma_estimate+0x3c8>
 800a960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a964:	2b00      	cmp	r3, #0
 800a966:	d005      	beq.n	800a974 <VL53L0X_calc_sigma_estimate+0x3c8>
 800a968:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a96c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a970:	429a      	cmp	r2, r3
 800a972:	d903      	bls.n	800a97c <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a982:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 800a98e:	6939      	ldr	r1, [r7, #16]
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	9303      	str	r3, [sp, #12]
 800a994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a998:	9302      	str	r3, [sp, #8]
 800a99a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f7ff fce3 	bl	800a374 <VL53L0X_calc_dmax>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a9b4:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	37b8      	adds	r7, #184	; 0xb8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	10624dd3 	.word	0x10624dd3
 800a9c4:	51eb851f 	.word	0x51eb851f
 800a9c8:	d1b71759 	.word	0xd1b71759

0800a9cc <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b090      	sub	sp, #64	; 0x40
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	607a      	str	r2, [r7, #4]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	460b      	mov	r3, r1
 800a9da:	72fb      	strb	r3, [r7, #11]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800aa1e:	7afb      	ldrb	r3, [r7, #11]
 800aa20:	10db      	asrs	r3, r3, #3
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f003 030f 	and.w	r3, r3, #15
 800aa28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800aa2c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d017      	beq.n	800aa64 <VL53L0X_get_pal_range_status+0x98>
 800aa34:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa38:	2b05      	cmp	r3, #5
 800aa3a:	d013      	beq.n	800aa64 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800aa3c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa40:	2b07      	cmp	r3, #7
 800aa42:	d00f      	beq.n	800aa64 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800aa44:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa48:	2b0c      	cmp	r3, #12
 800aa4a:	d00b      	beq.n	800aa64 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800aa4c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa50:	2b0d      	cmp	r3, #13
 800aa52:	d007      	beq.n	800aa64 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800aa54:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa58:	2b0e      	cmp	r3, #14
 800aa5a:	d003      	beq.n	800aa64 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800aa5c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa60:	2b0f      	cmp	r3, #15
 800aa62:	d103      	bne.n	800aa6c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800aa6a:	e002      	b.n	800aa72 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 800aa72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d107      	bne.n	800aa8a <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	21ff      	movs	r1, #255	; 0xff
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f000 fb74 	bl	800b16c <VL53L0X_WrByte>
 800aa84:	4603      	mov	r3, r0
 800aa86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 800aa8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d109      	bne.n	800aaa6 <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 800aa92:	f107 0316 	add.w	r3, r7, #22
 800aa96:	461a      	mov	r2, r3
 800aa98:	21b6      	movs	r1, #182	; 0xb6
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 faf2 	bl	800b084 <VL53L0X_RdWord>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800aaa6:	8afb      	ldrh	r3, [r7, #22]
 800aaa8:	025b      	lsls	r3, r3, #9
 800aaaa:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 800aaac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d107      	bne.n	800aac4 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aab4:	2200      	movs	r2, #0
 800aab6:	21ff      	movs	r1, #255	; 0xff
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 fb57 	bl	800b16c <VL53L0X_WrByte>
 800aabe:	4603      	mov	r3, r0
 800aac0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aac8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800aacc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d109      	bne.n	800aae8 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800aad4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800aad8:	461a      	mov	r2, r3
 800aada:	2100      	movs	r1, #0
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f7fc fa2f 	bl	8006f40 <VL53L0X_GetLimitCheckEnable>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800aae8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d02e      	beq.n	800ab4e <VL53L0X_get_pal_range_status+0x182>
 800aaf0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d12a      	bne.n	800ab4e <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800aaf8:	f107 0310 	add.w	r3, r7, #16
 800aafc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ab00:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f7ff fd52 	bl	800a5ac <VL53L0X_calc_sigma_estimate>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800ab0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d103      	bne.n	800ab1e <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab1c:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800ab1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d113      	bne.n	800ab4e <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800ab26:	f107 0320 	add.w	r3, r7, #32
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f7fc fa8c 	bl	800704c <VL53L0X_GetLimitCheckValue>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d006      	beq.n	800ab4e <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 800ab40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab42:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d902      	bls.n	800ab4e <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ab4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d109      	bne.n	800ab6a <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ab56:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	2102      	movs	r1, #2
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f7fc f9ee 	bl	8006f40 <VL53L0X_GetLimitCheckEnable>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800ab6a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d017      	beq.n	800aba2 <VL53L0X_get_pal_range_status+0x1d6>
 800ab72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d113      	bne.n	800aba2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ab7a:	f107 031c 	add.w	r3, r7, #28
 800ab7e:	461a      	mov	r2, r3
 800ab80:	2102      	movs	r1, #2
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7fc fa62 	bl	800704c <VL53L0X_GetLimitCheckValue>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d006      	beq.n	800aba2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800ab94:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800ab96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d902      	bls.n	800aba2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800aba2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d109      	bne.n	800abbe <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800abaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800abae:	461a      	mov	r2, r3
 800abb0:	2103      	movs	r1, #3
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7fc f9c4 	bl	8006f40 <VL53L0X_GetLimitCheckEnable>
 800abb8:	4603      	mov	r3, r0
 800abba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800abbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d023      	beq.n	800ac0e <VL53L0X_get_pal_range_status+0x242>
 800abc6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d11f      	bne.n	800ac0e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800abce:	893b      	ldrh	r3, [r7, #8]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d102      	bne.n	800abda <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	637b      	str	r3, [r7, #52]	; 0x34
 800abd8:	e005      	b.n	800abe6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	021a      	lsls	r2, r3, #8
 800abde:	893b      	ldrh	r3, [r7, #8]
 800abe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800abe6:	f107 0318 	add.w	r3, r7, #24
 800abea:	461a      	mov	r2, r3
 800abec:	2103      	movs	r1, #3
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7fc fa2c 	bl	800704c <VL53L0X_GetLimitCheckValue>
 800abf4:	4603      	mov	r3, r0
 800abf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d006      	beq.n	800ac0e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ac00:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ac02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d202      	bcs.n	800ac0e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ac0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d14a      	bne.n	800acac <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ac16:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d103      	bne.n	800ac26 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ac1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac20:	22ff      	movs	r2, #255	; 0xff
 800ac22:	701a      	strb	r2, [r3, #0]
 800ac24:	e042      	b.n	800acac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ac26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d007      	beq.n	800ac3e <VL53L0X_get_pal_range_status+0x272>
 800ac2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d003      	beq.n	800ac3e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800ac36:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d103      	bne.n	800ac46 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ac3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac40:	2205      	movs	r2, #5
 800ac42:	701a      	strb	r2, [r3, #0]
 800ac44:	e032      	b.n	800acac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ac46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac4a:	2b06      	cmp	r3, #6
 800ac4c:	d003      	beq.n	800ac56 <VL53L0X_get_pal_range_status+0x28a>
 800ac4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac52:	2b09      	cmp	r3, #9
 800ac54:	d103      	bne.n	800ac5e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800ac56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac58:	2204      	movs	r2, #4
 800ac5a:	701a      	strb	r2, [r3, #0]
 800ac5c:	e026      	b.n	800acac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ac5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac62:	2b08      	cmp	r3, #8
 800ac64:	d007      	beq.n	800ac76 <VL53L0X_get_pal_range_status+0x2aa>
 800ac66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac6a:	2b0a      	cmp	r3, #10
 800ac6c:	d003      	beq.n	800ac76 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800ac6e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d103      	bne.n	800ac7e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800ac76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac78:	2203      	movs	r2, #3
 800ac7a:	701a      	strb	r2, [r3, #0]
 800ac7c:	e016      	b.n	800acac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ac7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	d003      	beq.n	800ac8e <VL53L0X_get_pal_range_status+0x2c2>
 800ac86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d103      	bne.n	800ac96 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ac8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac90:	2202      	movs	r2, #2
 800ac92:	701a      	strb	r2, [r3, #0]
 800ac94:	e00a      	b.n	800acac <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800ac96:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d103      	bne.n	800aca6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800ac9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aca0:	2201      	movs	r2, #1
 800aca2:	701a      	strb	r2, [r3, #0]
 800aca4:	e002      	b.n	800acac <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800aca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aca8:	2200      	movs	r2, #0
 800acaa:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800acac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d102      	bne.n	800acba <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800acb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acb6:	2200      	movs	r2, #0
 800acb8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800acba:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800acbe:	461a      	mov	r2, r3
 800acc0:	2101      	movs	r1, #1
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7fc f93c 	bl	8006f40 <VL53L0X_GetLimitCheckEnable>
 800acc8:	4603      	mov	r3, r0
 800acca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800acce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d14f      	bne.n	800ad76 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800acd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <VL53L0X_get_pal_range_status+0x31a>
 800acde:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d103      	bne.n	800acee <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800ace6:	2301      	movs	r3, #1
 800ace8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acec:	e002      	b.n	800acf4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800acfa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800acfe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad02:	2b04      	cmp	r3, #4
 800ad04:	d003      	beq.n	800ad0e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800ad06:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d103      	bne.n	800ad16 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad14:	e002      	b.n	800ad1c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ad22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800ad26:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d003      	beq.n	800ad36 <VL53L0X_get_pal_range_status+0x36a>
 800ad2e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d103      	bne.n	800ad3e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800ad36:	2301      	movs	r3, #1
 800ad38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad3c:	e002      	b.n	800ad44 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ad4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800ad4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <VL53L0X_get_pal_range_status+0x392>
 800ad56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d103      	bne.n	800ad66 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad64:	e002      	b.n	800ad6c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ad72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3740      	adds	r7, #64	; 0x40
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <VL53L0X_check_part_used>:
/* Functions Definition ------------------------------------------------------*/

VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b086      	sub	sp, #24
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60f8      	str	r0, [r7, #12]
 800ad8a:	60b9      	str	r1, [r7, #8]
 800ad8c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800ad92:	2102      	movs	r1, #2
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f7fd fe0d 	bl	80089b4 <VL53L0X_get_info_from_device>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800ad9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d11c      	bne.n	800ade0 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800adac:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800adae:	7dbb      	ldrb	r3, [r7, #22]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d107      	bne.n	800adc4 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	2200      	movs	r2, #0
 800adb8:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3340      	adds	r3, #64	; 0x40
 800adbe:	2200      	movs	r2, #0
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	e00d      	b.n	800ade0 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	33f3      	adds	r3, #243	; 0xf3
 800add2:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3340      	adds	r3, #64	; 0x40
 800add8:	6939      	ldr	r1, [r7, #16]
 800adda:	4618      	mov	r0, r3
 800addc:	f008 fe9f 	bl	8013b1e <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ade0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800adec:	b5b0      	push	{r4, r5, r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800adfa:	f107 030d 	add.w	r3, r7, #13
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff ffbd 	bl	800ad82 <VL53L0X_check_part_used>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800ae0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d13b      	bne.n	800ae8c <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800ae14:	7b7b      	ldrb	r3, [r7, #13]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d108      	bne.n	800ae2c <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	4a30      	ldr	r2, [pc, #192]	; (800aee0 <VL53L0X_get_device_info+0xf4>)
 800ae1e:	461c      	mov	r4, r3
 800ae20:	4613      	mov	r3, r2
 800ae22:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae24:	6020      	str	r0, [r4, #0]
 800ae26:	6061      	str	r1, [r4, #4]
 800ae28:	60a2      	str	r2, [r4, #8]
 800ae2a:	e027      	b.n	800ae7c <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800ae2c:	7b7b      	ldrb	r3, [r7, #13]
 800ae2e:	2b22      	cmp	r3, #34	; 0x22
 800ae30:	d80b      	bhi.n	800ae4a <VL53L0X_get_device_info+0x5e>
 800ae32:	7b7b      	ldrb	r3, [r7, #13]
 800ae34:	2b20      	cmp	r3, #32
 800ae36:	d008      	beq.n	800ae4a <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	4a2a      	ldr	r2, [pc, #168]	; (800aee4 <VL53L0X_get_device_info+0xf8>)
 800ae3c:	461c      	mov	r4, r3
 800ae3e:	4613      	mov	r3, r2
 800ae40:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae42:	6020      	str	r0, [r4, #0]
 800ae44:	6061      	str	r1, [r4, #4]
 800ae46:	60a2      	str	r2, [r4, #8]
 800ae48:	e018      	b.n	800ae7c <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800ae4a:	7b7b      	ldrb	r3, [r7, #13]
 800ae4c:	2b26      	cmp	r3, #38	; 0x26
 800ae4e:	d808      	bhi.n	800ae62 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	4a25      	ldr	r2, [pc, #148]	; (800aee8 <VL53L0X_get_device_info+0xfc>)
 800ae54:	461c      	mov	r4, r3
 800ae56:	4613      	mov	r3, r2
 800ae58:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae5a:	6020      	str	r0, [r4, #0]
 800ae5c:	6061      	str	r1, [r4, #4]
 800ae5e:	60a2      	str	r2, [r4, #8]
 800ae60:	e00c      	b.n	800ae7c <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	4a21      	ldr	r2, [pc, #132]	; (800aeec <VL53L0X_get_device_info+0x100>)
 800ae66:	461d      	mov	r5, r3
 800ae68:	4614      	mov	r4, r2
 800ae6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae6c:	6028      	str	r0, [r5, #0]
 800ae6e:	6069      	str	r1, [r5, #4]
 800ae70:	60aa      	str	r2, [r5, #8]
 800ae72:	60eb      	str	r3, [r5, #12]
 800ae74:	6820      	ldr	r0, [r4, #0]
 800ae76:	6128      	str	r0, [r5, #16]
 800ae78:	7923      	ldrb	r3, [r4, #4]
 800ae7a:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	3320      	adds	r3, #32
 800ae80:	491b      	ldr	r1, [pc, #108]	; (800aef0 <VL53L0X_get_device_info+0x104>)
 800ae82:	461a      	mov	r2, r3
 800ae84:	460b      	mov	r3, r1
 800ae86:	cb03      	ldmia	r3!, {r0, r1}
 800ae88:	6010      	str	r0, [r2, #0]
 800ae8a:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d108      	bne.n	800aea6 <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	3360      	adds	r3, #96	; 0x60
 800ae98:	461a      	mov	r2, r3
 800ae9a:	21c0      	movs	r1, #192	; 0xc0
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f86a 	bl	800af76 <VL53L0X_RdByte>
 800aea2:	4603      	mov	r3, r0
 800aea4:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d112      	bne.n	800aed4 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800aeae:	f107 030e 	add.w	r3, r7, #14
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	21c2      	movs	r1, #194	; 0xc2
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f85d 	bl	800af76 <VL53L0X_RdByte>
 800aebc:	4603      	mov	r3, r0
 800aebe:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800aec8:	7bbb      	ldrb	r3, [r7, #14]
 800aeca:	091b      	lsrs	r3, r3, #4
 800aecc:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800aed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bdb0      	pop	{r4, r5, r7, pc}
 800aee0:	08015ea8 	.word	0x08015ea8
 800aee4:	08015eb4 	.word	0x08015eb4
 800aee8:	08015ec0 	.word	0x08015ec0
 800aeec:	08015ecc 	.word	0x08015ecc
 800aef0:	08015ee4 	.word	0x08015ee4

0800aef4 <_I2CWrite>:
int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count);

/* Exported functions --------------------------------------------------------*/

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b088      	sub	sp, #32
 800aef8:	af02      	add	r7, sp, #8
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	330a      	adds	r3, #10
 800af04:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800af12:	b299      	uxth	r1, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	b29a      	uxth	r2, r3
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	4613      	mov	r3, r2
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	f000 ffe2 	bl	800bee8 <HAL_I2C_Master_Transmit>
 800af24:	4603      	mov	r3, r0
 800af26:	613b      	str	r3, [r7, #16]

    return status;
 800af28:	693b      	ldr	r3, [r7, #16]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b088      	sub	sp, #32
 800af36:	af02      	add	r7, sp, #8
 800af38:	60f8      	str	r0, [r7, #12]
 800af3a:	60b9      	str	r1, [r7, #8]
 800af3c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	330a      	adds	r3, #10
 800af42:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800af50:	f043 0301 	orr.w	r3, r3, #1
 800af54:	b2db      	uxtb	r3, r3
 800af56:	b299      	uxth	r1, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	4613      	mov	r3, r2
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	f001 f8b4 	bl	800c0d0 <HAL_I2C_Master_Receive>
 800af68:	4603      	mov	r3, r0
 800af6a:	613b      	str	r3, [r7, #16]

    return status;
 800af6c:	693b      	ldr	r3, [r7, #16]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b086      	sub	sp, #24
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	460b      	mov	r3, r1
 800af80:	607a      	str	r2, [r7, #4]
 800af82:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af84:	2300      	movs	r3, #0
 800af86:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800af88:	f107 030b 	add.w	r3, r7, #11
 800af8c:	2201      	movs	r2, #1
 800af8e:	4619      	mov	r1, r3
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f7ff ffaf 	bl	800aef4 <_I2CWrite>
 800af96:	6138      	str	r0, [r7, #16]

    if (status_int)
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d002      	beq.n	800afa4 <VL53L0X_RdByte+0x2e>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af9e:	23ec      	movs	r3, #236	; 0xec
 800afa0:	75fb      	strb	r3, [r7, #23]
        goto done;
 800afa2:	e00c      	b.n	800afbe <VL53L0X_RdByte+0x48>
    }

    status_int = _I2CRead(Dev, data, 1);
 800afa4:	2201      	movs	r2, #1
 800afa6:	6879      	ldr	r1, [r7, #4]
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f7ff ffc2 	bl	800af32 <_I2CRead>
 800afae:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d002      	beq.n	800afbc <VL53L0X_RdByte+0x46>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800afb6:	23ec      	movs	r3, #236	; 0xec
 800afb8:	75fb      	strb	r3, [r7, #23]
 800afba:	e000      	b.n	800afbe <VL53L0X_RdByte+0x48>
    }
done:
 800afbc:	bf00      	nop
    return Status;
 800afbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3718      	adds	r7, #24
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
	...

0800afcc <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	607a      	str	r2, [r7, #4]
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	460b      	mov	r3, r1
 800afda:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afdc:	2300      	movs	r3, #0
 800afde:	75fb      	strb	r3, [r7, #23]

    if (count > sizeof(_I2CBuffer) - 1) {
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	2b3f      	cmp	r3, #63	; 0x3f
 800afe4:	d902      	bls.n	800afec <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800afe6:	f06f 0303 	mvn.w	r3, #3
 800afea:	e016      	b.n	800b01a <VL53L0X_WriteMulti+0x4e>
    }

    _I2CBuffer[0] = index;
 800afec:	4a0d      	ldr	r2, [pc, #52]	; (800b024 <VL53L0X_WriteMulti+0x58>)
 800afee:	7afb      	ldrb	r3, [r7, #11]
 800aff0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	6879      	ldr	r1, [r7, #4]
 800aff6:	480c      	ldr	r0, [pc, #48]	; (800b028 <VL53L0X_WriteMulti+0x5c>)
 800aff8:	f007 ff2b 	bl	8012e52 <memcpy>

    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	3301      	adds	r3, #1
 800b000:	461a      	mov	r2, r3
 800b002:	4908      	ldr	r1, [pc, #32]	; (800b024 <VL53L0X_WriteMulti+0x58>)
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f7ff ff75 	bl	800aef4 <_I2CWrite>
 800b00a:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b012:	23ec      	movs	r3, #236	; 0xec
 800b014:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 800b016:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3718      	adds	r7, #24
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	20004f38 	.word	0x20004f38
 800b028:	20004f39 	.word	0x20004f39

0800b02c <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	607a      	str	r2, [r7, #4]
 800b036:	603b      	str	r3, [r7, #0]
 800b038:	460b      	mov	r3, r1
 800b03a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b03c:	2300      	movs	r3, #0
 800b03e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800b040:	f107 030b 	add.w	r3, r7, #11
 800b044:	2201      	movs	r2, #1
 800b046:	4619      	mov	r1, r3
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f7ff ff53 	bl	800aef4 <_I2CWrite>
 800b04e:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d002      	beq.n	800b05c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b056:	23ec      	movs	r3, #236	; 0xec
 800b058:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b05a:	e00c      	b.n	800b076 <VL53L0X_ReadMulti+0x4a>
    }

    status_int = _I2CRead(Dev, pdata, count);
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f7ff ff66 	bl	800af32 <_I2CRead>
 800b066:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b06e:	23ec      	movs	r3, #236	; 0xec
 800b070:	75fb      	strb	r3, [r7, #23]
 800b072:	e000      	b.n	800b076 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b074:	bf00      	nop
    return Status;
 800b076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
	...

0800b084 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	460b      	mov	r3, r1
 800b08e:	607a      	str	r2, [r7, #4]
 800b090:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b092:	2300      	movs	r3, #0
 800b094:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800b096:	f107 030b 	add.w	r3, r7, #11
 800b09a:	2201      	movs	r2, #1
 800b09c:	4619      	mov	r1, r3
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f7ff ff28 	bl	800aef4 <_I2CWrite>
 800b0a4:	6138      	str	r0, [r7, #16]

    if (status_int)
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <VL53L0X_RdWord+0x2e>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b0ac:	23ec      	movs	r3, #236	; 0xec
 800b0ae:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b0b0:	e017      	b.n	800b0e2 <VL53L0X_RdWord+0x5e>
    }

    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	490e      	ldr	r1, [pc, #56]	; (800b0f0 <VL53L0X_RdWord+0x6c>)
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f7ff ff3b 	bl	800af32 <_I2CRead>
 800b0bc:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <VL53L0X_RdWord+0x46>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b0c4:	23ec      	movs	r3, #236	; 0xec
 800b0c6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b0c8:	e00b      	b.n	800b0e2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b0ca:	4b09      	ldr	r3, [pc, #36]	; (800b0f0 <VL53L0X_RdWord+0x6c>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	021b      	lsls	r3, r3, #8
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <VL53L0X_RdWord+0x6c>)
 800b0d6:	785b      	ldrb	r3, [r3, #1]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	4413      	add	r3, r2
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800b0e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3718      	adds	r7, #24
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20004f38 	.word	0x20004f38

0800b0f4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b102:	2300      	movs	r3, #0
 800b104:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800b106:	f107 030b 	add.w	r3, r7, #11
 800b10a:	2201      	movs	r2, #1
 800b10c:	4619      	mov	r1, r3
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f7ff fef0 	bl	800aef4 <_I2CWrite>
 800b114:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b11c:	23ec      	movs	r3, #236	; 0xec
 800b11e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b120:	e01b      	b.n	800b15a <VL53L0X_RdDWord+0x66>
    }

    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b122:	2204      	movs	r2, #4
 800b124:	4910      	ldr	r1, [pc, #64]	; (800b168 <VL53L0X_RdDWord+0x74>)
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f7ff ff03 	bl	800af32 <_I2CRead>
 800b12c:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b134:	23ec      	movs	r3, #236	; 0xec
 800b136:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b138:	e00f      	b.n	800b15a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b13a:	4b0b      	ldr	r3, [pc, #44]	; (800b168 <VL53L0X_RdDWord+0x74>)
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	061a      	lsls	r2, r3, #24
 800b140:	4b09      	ldr	r3, [pc, #36]	; (800b168 <VL53L0X_RdDWord+0x74>)
 800b142:	785b      	ldrb	r3, [r3, #1]
 800b144:	041b      	lsls	r3, r3, #16
 800b146:	441a      	add	r2, r3
 800b148:	4b07      	ldr	r3, [pc, #28]	; (800b168 <VL53L0X_RdDWord+0x74>)
 800b14a:	789b      	ldrb	r3, [r3, #2]
 800b14c:	021b      	lsls	r3, r3, #8
 800b14e:	4413      	add	r3, r2
 800b150:	4a05      	ldr	r2, [pc, #20]	; (800b168 <VL53L0X_RdDWord+0x74>)
 800b152:	78d2      	ldrb	r2, [r2, #3]
 800b154:	441a      	add	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800b15a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	20004f38 	.word	0x20004f38

0800b16c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	70fb      	strb	r3, [r7, #3]
 800b178:	4613      	mov	r3, r2
 800b17a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b17c:	2300      	movs	r3, #0
 800b17e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b180:	4a0b      	ldr	r2, [pc, #44]	; (800b1b0 <VL53L0X_WrByte+0x44>)
 800b182:	78fb      	ldrb	r3, [r7, #3]
 800b184:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b186:	4a0a      	ldr	r2, [pc, #40]	; (800b1b0 <VL53L0X_WrByte+0x44>)
 800b188:	78bb      	ldrb	r3, [r7, #2]
 800b18a:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b18c:	2202      	movs	r2, #2
 800b18e:	4908      	ldr	r1, [pc, #32]	; (800b1b0 <VL53L0X_WrByte+0x44>)
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7ff feaf 	bl	800aef4 <_I2CWrite>
 800b196:	60b8      	str	r0, [r7, #8]

    if (status_int != 0) {
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b19e:	23ec      	movs	r3, #236	; 0xec
 800b1a0:	73fb      	strb	r3, [r7, #15]
    }

    return Status;
 800b1a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20004f38 	.word	0x20004f38

0800b1b4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70fb      	strb	r3, [r7, #3]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b1c8:	4a0e      	ldr	r2, [pc, #56]	; (800b204 <VL53L0X_WrWord+0x50>)
 800b1ca:	78fb      	ldrb	r3, [r7, #3]
 800b1cc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b1ce:	883b      	ldrh	r3, [r7, #0]
 800b1d0:	0a1b      	lsrs	r3, r3, #8
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	b2da      	uxtb	r2, r3
 800b1d6:	4b0b      	ldr	r3, [pc, #44]	; (800b204 <VL53L0X_WrWord+0x50>)
 800b1d8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b1da:	883b      	ldrh	r3, [r7, #0]
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	4b09      	ldr	r3, [pc, #36]	; (800b204 <VL53L0X_WrWord+0x50>)
 800b1e0:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b1e2:	2203      	movs	r2, #3
 800b1e4:	4907      	ldr	r1, [pc, #28]	; (800b204 <VL53L0X_WrWord+0x50>)
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff fe84 	bl	800aef4 <_I2CWrite>
 800b1ec:	60b8      	str	r0, [r7, #8]

    if (status_int != 0) {
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b1f4:	23ec      	movs	r3, #236	; 0xec
 800b1f6:	73fb      	strb	r3, [r7, #15]
    }

    return Status;
 800b1f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	20004f38 	.word	0x20004f38

0800b208 <VL53L0X_UpdateByte>:

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	4608      	mov	r0, r1
 800b212:	4611      	mov	r1, r2
 800b214:	461a      	mov	r2, r3
 800b216:	4603      	mov	r3, r0
 800b218:	70fb      	strb	r3, [r7, #3]
 800b21a:	460b      	mov	r3, r1
 800b21c:	70bb      	strb	r3, [r7, #2]
 800b21e:	4613      	mov	r3, r2
 800b220:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b222:	2300      	movs	r3, #0
 800b224:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b226:	f107 020e 	add.w	r2, r7, #14
 800b22a:	78fb      	ldrb	r3, [r7, #3]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7ff fea1 	bl	800af76 <VL53L0X_RdByte>
 800b234:	4603      	mov	r3, r0
 800b236:	73fb      	strb	r3, [r7, #15]

    if (Status) {
 800b238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d110      	bne.n	800b262 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }

    data = (data & AndData) | OrData;
 800b240:	7bba      	ldrb	r2, [r7, #14]
 800b242:	78bb      	ldrb	r3, [r7, #2]
 800b244:	4013      	ands	r3, r2
 800b246:	b2da      	uxtb	r2, r3
 800b248:	787b      	ldrb	r3, [r7, #1]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b250:	7bba      	ldrb	r2, [r7, #14]
 800b252:	78fb      	ldrb	r3, [r7, #3]
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff ff88 	bl	800b16c <VL53L0X_WrByte>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
 800b260:	e000      	b.n	800b264 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b262:	bf00      	nop
done:
    return Status;
 800b264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b278:	2300      	movs	r3, #0
 800b27a:	73fb      	strb	r3, [r7, #15]

    /* do nothing */
    VL53L0X_OsDelay();
 800b27c:	2002      	movs	r0, #2
 800b27e:	f000 f987 	bl	800b590 <HAL_Delay>
    return status;
 800b282:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
	...

0800b290 <VL53L0X_PROXIMITY_Init>:

/**
  * @brief  VL53L0X proximity sensor Initialization.
  */
void VL53L0X_PROXIMITY_Init(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b09a      	sub	sp, #104	; 0x68
 800b294:	af00      	add	r7, sp, #0
  uint16_t vl53l0x_id = 0; 
 800b296:	2300      	movs	r3, #0
 800b298:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;
  
  /* Initialize IO interface */
  BSP_I2C2_Init();
 800b29c:	f7f7 fca2 	bl	8002be4 <BSP_I2C2_Init>
  VL53L0X_PROXIMITY_MspInit();
 800b2a0:	f000 f84e 	bl	800b340 <VL53L0X_PROXIMITY_MspInit>
  
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 800b2a4:	463b      	mov	r3, r7
 800b2a6:	2263      	movs	r2, #99	; 0x63
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f007 fddf 	bl	8012e6e <memset>
  
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 800b2b0:	463b      	mov	r3, r7
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4817      	ldr	r0, [pc, #92]	; (800b314 <VL53L0X_PROXIMITY_Init+0x84>)
 800b2b6:	f7fa ffb8 	bl	800622a <VL53L0X_GetDeviceInfo>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d121      	bne.n	800b304 <VL53L0X_PROXIMITY_Init+0x74>
  {  
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 800b2c0:	f107 0366 	add.w	r3, r7, #102	; 0x66
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	21c0      	movs	r1, #192	; 0xc0
 800b2c8:	4812      	ldr	r0, [pc, #72]	; (800b314 <VL53L0X_PROXIMITY_Init+0x84>)
 800b2ca:	f7ff fedb 	bl	800b084 <VL53L0X_RdWord>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d113      	bne.n	800b2fc <VL53L0X_PROXIMITY_Init+0x6c>
    {
      if (vl53l0x_id == VL53L0X_ID)
 800b2d4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b2d8:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d114      	bne.n	800b30a <VL53L0X_PROXIMITY_Init+0x7a>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 800b2e0:	480c      	ldr	r0, [pc, #48]	; (800b314 <VL53L0X_PROXIMITY_Init+0x84>)
 800b2e2:	f7fa ffc9 	bl	8006278 <VL53L0X_DataInit>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10e      	bne.n	800b30a <VL53L0X_PROXIMITY_Init+0x7a>
        {
          Dev.Present = 1;
 800b2ec:	4b09      	ldr	r3, [pc, #36]	; (800b314 <VL53L0X_PROXIMITY_Init+0x84>)
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
          SetupSingleShot(&Dev);
 800b2f4:	4807      	ldr	r0, [pc, #28]	; (800b314 <VL53L0X_PROXIMITY_Init+0x84>)
 800b2f6:	f000 f843 	bl	800b380 <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }  
}
 800b2fa:	e006      	b.n	800b30a <VL53L0X_PROXIMITY_Init+0x7a>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 800b2fc:	4806      	ldr	r0, [pc, #24]	; (800b318 <VL53L0X_PROXIMITY_Init+0x88>)
 800b2fe:	f008 fb09 	bl	8013914 <puts>
}
 800b302:	e002      	b.n	800b30a <VL53L0X_PROXIMITY_Init+0x7a>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 800b304:	4805      	ldr	r0, [pc, #20]	; (800b31c <VL53L0X_PROXIMITY_Init+0x8c>)
 800b306:	f008 fb05 	bl	8013914 <puts>
}
 800b30a:	bf00      	nop
 800b30c:	3768      	adds	r7, #104	; 0x68
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	2000037c 	.word	0x2000037c
 800b318:	0801634c 	.word	0x0801634c
 800b31c:	0801637c 	.word	0x0801637c

0800b320 <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b088      	sub	sp, #32
 800b324:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;
  
  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 800b326:	1d3b      	adds	r3, r7, #4
 800b328:	4619      	mov	r1, r3
 800b32a:	4804      	ldr	r0, [pc, #16]	; (800b33c <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 800b32c:	f7fc f9ee 	bl	800770c <VL53L0X_PerformSingleRangingMeasurement>
  
  return RangingMeasurementData.RangeMilliMeter;  
 800b330:	89bb      	ldrh	r3, [r7, #12]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3720      	adds	r7, #32
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	2000037c 	.word	0x2000037c

0800b340 <VL53L0X_PROXIMITY_MspInit>:

/**
  * @brief  VL53L0X proximity sensor Msp Initialization.
  */
void VL53L0X_PROXIMITY_MspInit(void)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 800b346:	2340      	movs	r3, #64	; 0x40
 800b348:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b34a:	2301      	movs	r3, #1
 800b34c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b34e:	2301      	movs	r3, #1
 800b350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b352:	2302      	movs	r3, #2
 800b354:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800b356:	1d3b      	adds	r3, r7, #4
 800b358:	4619      	mov	r1, r3
 800b35a:	4808      	ldr	r0, [pc, #32]	; (800b37c <VL53L0X_PROXIMITY_MspInit+0x3c>)
 800b35c:	f000 fa1e 	bl	800b79c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 800b360:	2201      	movs	r2, #1
 800b362:	2140      	movs	r1, #64	; 0x40
 800b364:	4805      	ldr	r0, [pc, #20]	; (800b37c <VL53L0X_PROXIMITY_MspInit+0x3c>)
 800b366:	f000 fcb7 	bl	800bcd8 <HAL_GPIO_WritePin>
  
  HAL_Delay(1000);  
 800b36a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b36e:	f000 f90f 	bl	800b590 <HAL_Delay>
}
 800b372:	bf00      	nop
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	48000800 	.word	0x48000800

0800b380 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t* pDev)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b08a      	sub	sp, #40	; 0x28
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
  uint8_t isApertureSpads;
  FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800b388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b38c:	627b      	str	r3, [r7, #36]	; 0x24
  FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800b38e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800b392:	623b      	str	r3, [r7, #32]
  uint32_t timingBudget = 33000;
 800b394:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800b398:	61fb      	str	r3, [r7, #28]
  uint8_t preRangeVcselPeriod = 14;
 800b39a:	230e      	movs	r3, #14
 800b39c:	76fb      	strb	r3, [r7, #27]
  uint8_t finalRangeVcselPeriod = 10;
 800b39e:	230a      	movs	r3, #10
 800b3a0:	76bb      	strb	r3, [r7, #26]
                          
  if (pDev->Present)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f000 80a4 	beq.w	800b4f6 <SetupSingleShot+0x176>
  {
    status = VL53L0X_StaticInit(pDev);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7fb f86c 	bl	800648c <VL53L0X_StaticInit>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	617b      	str	r3, [r7, #20]
    if (status)
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d002      	beq.n	800b3c4 <SetupSingleShot+0x44>
    {
      printf("VL53L0X_StaticInit failed\n");
 800b3be:	4850      	ldr	r0, [pc, #320]	; (800b500 <SetupSingleShot+0x180>)
 800b3c0:	f008 faa8 	bl	8013914 <puts>
    }
    
    status = VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 800b3c4:	f107 0212 	add.w	r2, r7, #18
 800b3c8:	f107 0313 	add.w	r3, r7, #19
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7fb ff30 	bl	8007234 <VL53L0X_PerformRefCalibration>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	617b      	str	r3, [r7, #20]
    if (status)
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d002      	beq.n	800b3e4 <SetupSingleShot+0x64>
    {
      printf("VL53L0X_PerformRefCalibration failed\n");
 800b3de:	4849      	ldr	r0, [pc, #292]	; (800b504 <SetupSingleShot+0x184>)
 800b3e0:	f008 fa98 	bl	8013914 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 800b3e4:	f107 020b 	add.w	r2, r7, #11
 800b3e8:	f107 030c 	add.w	r3, r7, #12
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7fc fb78 	bl	8007ae4 <VL53L0X_PerformRefSpadManagement>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	617b      	str	r3, [r7, #20]
    if (status)
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d002      	beq.n	800b404 <SetupSingleShot+0x84>
    {
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 800b3fe:	4842      	ldr	r0, [pc, #264]	; (800b508 <SetupSingleShot+0x188>)
 800b400:	f008 fa88 	bl	8013914 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_SINGLE_RANGING); /* Setup in single ranging mode */
 800b404:	2100      	movs	r1, #0
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7fb fa52 	bl	80068b0 <VL53L0X_SetDeviceMode>
 800b40c:	4603      	mov	r3, r0
 800b40e:	617b      	str	r3, [r7, #20]
    if (status)
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <SetupSingleShot+0x9c>
    {
      printf("VL53L0X_SetDeviceMode failed\n");
 800b416:	483d      	ldr	r0, [pc, #244]	; (800b50c <SetupSingleShot+0x18c>)
 800b418:	f008 fa7c 	bl	8013914 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); /* Enable Sigma limit */
 800b41c:	2201      	movs	r2, #1
 800b41e:	2100      	movs	r1, #0
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7fb fd01 	bl	8006e28 <VL53L0X_SetLimitCheckEnable>
 800b426:	4603      	mov	r3, r0
 800b428:	617b      	str	r3, [r7, #20]
    if (status)
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <SetupSingleShot+0xb6>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800b430:	4837      	ldr	r0, [pc, #220]	; (800b510 <SetupSingleShot+0x190>)
 800b432:	f008 fa6f 	bl	8013914 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); /* Enable Signa limit */
 800b436:	2201      	movs	r2, #1
 800b438:	2101      	movs	r1, #1
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7fb fcf4 	bl	8006e28 <VL53L0X_SetLimitCheckEnable>
 800b440:	4603      	mov	r3, r0
 800b442:	617b      	str	r3, [r7, #20]
    if (status)
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d002      	beq.n	800b450 <SetupSingleShot+0xd0>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800b44a:	4831      	ldr	r0, [pc, #196]	; (800b510 <SetupSingleShot+0x190>)
 800b44c:	f008 fa62 	bl	8013914 <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 800b450:	f641 1399 	movw	r3, #6553	; 0x1999
 800b454:	627b      	str	r3, [r7, #36]	; 0x24
    sigmaLimit = (FixPoint1616_t)(60*65536);
 800b456:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800b45a:	623b      	str	r3, [r7, #32]
    timingBudget = 33000;
 800b45c:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800b460:	61fb      	str	r3, [r7, #28]
    preRangeVcselPeriod = 18;
 800b462:	2312      	movs	r3, #18
 800b464:	76fb      	strb	r3, [r7, #27]
    finalRangeVcselPeriod = 14;
 800b466:	230e      	movs	r3, #14
 800b468:	76bb      	strb	r3, [r7, #26]
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 800b46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46c:	2101      	movs	r1, #1
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7fb fd8a 	bl	8006f88 <VL53L0X_SetLimitCheckValue>
 800b474:	4603      	mov	r3, r0
 800b476:	617b      	str	r3, [r7, #20]
    
    if (status)
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <SetupSingleShot+0x104>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800b47e:	4825      	ldr	r0, [pc, #148]	; (800b514 <SetupSingleShot+0x194>)
 800b480:	f008 fa48 	bl	8013914 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800b484:	6a3a      	ldr	r2, [r7, #32]
 800b486:	2100      	movs	r1, #0
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7fb fd7d 	bl	8006f88 <VL53L0X_SetLimitCheckValue>
 800b48e:	4603      	mov	r3, r0
 800b490:	617b      	str	r3, [r7, #20]
    if (status)
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <SetupSingleShot+0x11e>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800b498:	481e      	ldr	r0, [pc, #120]	; (800b514 <SetupSingleShot+0x194>)
 800b49a:	f008 fa3b 	bl	8013914 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pDev,  timingBudget);
 800b49e:	69f9      	ldr	r1, [r7, #28]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7fb fa63 	bl	800696c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	617b      	str	r3, [r7, #20]
    if (status)
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <SetupSingleShot+0x136>
    {
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 800b4b0:	4819      	ldr	r0, [pc, #100]	; (800b518 <SetupSingleShot+0x198>)
 800b4b2:	f008 fa2f 	bl	8013914 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800b4b6:	7efb      	ldrb	r3, [r7, #27]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7fb fa7b 	bl	80069b8 <VL53L0X_SetVcselPulsePeriod>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	617b      	str	r3, [r7, #20]
    if (status)
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d002      	beq.n	800b4d2 <SetupSingleShot+0x152>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800b4cc:	4813      	ldr	r0, [pc, #76]	; (800b51c <SetupSingleShot+0x19c>)
 800b4ce:	f008 fa21 	bl	8013914 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800b4d2:	7ebb      	ldrb	r3, [r7, #26]
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	2101      	movs	r1, #1
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f7fb fa6d 	bl	80069b8 <VL53L0X_SetVcselPulsePeriod>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	617b      	str	r3, [r7, #20]
    if (status)
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <SetupSingleShot+0x16e>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800b4e8:	480c      	ldr	r0, [pc, #48]	; (800b51c <SetupSingleShot+0x19c>)
 800b4ea:	f008 fa13 	bl	8013914 <puts>
    }
    
    pDev->LeakyFirst = 1;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  }
}
 800b4f6:	bf00      	nop
 800b4f8:	3728      	adds	r7, #40	; 0x28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	080163a8 	.word	0x080163a8
 800b504:	080163c4 	.word	0x080163c4
 800b508:	080163ec 	.word	0x080163ec
 800b50c:	08016414 	.word	0x08016414
 800b510:	08016434 	.word	0x08016434
 800b514:	08016458 	.word	0x08016458
 800b518:	0801647c 	.word	0x0801647c
 800b51c:	080164b4 	.word	0x080164b4

0800b520 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b52a:	2003      	movs	r0, #3
 800b52c:	f000 f901 	bl	800b732 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b530:	200f      	movs	r0, #15
 800b532:	f7f6 fedd 	bl	80022f0 <HAL_InitTick>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	71fb      	strb	r3, [r7, #7]
 800b540:	e001      	b.n	800b546 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b542:	f7f6 fd43 	bl	8001fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b546:	79fb      	ldrb	r3, [r7, #7]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b550:	b480      	push	{r7}
 800b552:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b554:	4b06      	ldr	r3, [pc, #24]	; (800b570 <HAL_IncTick+0x20>)
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	461a      	mov	r2, r3
 800b55a:	4b06      	ldr	r3, [pc, #24]	; (800b574 <HAL_IncTick+0x24>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4413      	add	r3, r2
 800b560:	4a04      	ldr	r2, [pc, #16]	; (800b574 <HAL_IncTick+0x24>)
 800b562:	6013      	str	r3, [r2, #0]
}
 800b564:	bf00      	nop
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	20000508 	.word	0x20000508
 800b574:	20004f78 	.word	0x20004f78

0800b578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b578:	b480      	push	{r7}
 800b57a:	af00      	add	r7, sp, #0
  return uwTick;
 800b57c:	4b03      	ldr	r3, [pc, #12]	; (800b58c <HAL_GetTick+0x14>)
 800b57e:	681b      	ldr	r3, [r3, #0]
}
 800b580:	4618      	mov	r0, r3
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	20004f78 	.word	0x20004f78

0800b590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b598:	f7ff ffee 	bl	800b578 <HAL_GetTick>
 800b59c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a8:	d005      	beq.n	800b5b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b5aa:	4b0a      	ldr	r3, [pc, #40]	; (800b5d4 <HAL_Delay+0x44>)
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b5b6:	bf00      	nop
 800b5b8:	f7ff ffde 	bl	800b578 <HAL_GetTick>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d8f7      	bhi.n	800b5b8 <HAL_Delay+0x28>
  {
  }
}
 800b5c8:	bf00      	nop
 800b5ca:	bf00      	nop
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	20000508 	.word	0x20000508

0800b5d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f003 0307 	and.w	r3, r3, #7
 800b5e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b5e8:	4b0c      	ldr	r3, [pc, #48]	; (800b61c <__NVIC_SetPriorityGrouping+0x44>)
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b60a:	4a04      	ldr	r2, [pc, #16]	; (800b61c <__NVIC_SetPriorityGrouping+0x44>)
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	60d3      	str	r3, [r2, #12]
}
 800b610:	bf00      	nop
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	e000ed00 	.word	0xe000ed00

0800b620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b624:	4b04      	ldr	r3, [pc, #16]	; (800b638 <__NVIC_GetPriorityGrouping+0x18>)
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	0a1b      	lsrs	r3, r3, #8
 800b62a:	f003 0307 	and.w	r3, r3, #7
}
 800b62e:	4618      	mov	r0, r3
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	e000ed00 	.word	0xe000ed00

0800b63c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	4603      	mov	r3, r0
 800b644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	db0b      	blt.n	800b666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b64e:	79fb      	ldrb	r3, [r7, #7]
 800b650:	f003 021f 	and.w	r2, r3, #31
 800b654:	4907      	ldr	r1, [pc, #28]	; (800b674 <__NVIC_EnableIRQ+0x38>)
 800b656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b65a:	095b      	lsrs	r3, r3, #5
 800b65c:	2001      	movs	r0, #1
 800b65e:	fa00 f202 	lsl.w	r2, r0, r2
 800b662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	e000e100 	.word	0xe000e100

0800b678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	6039      	str	r1, [r7, #0]
 800b682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	db0a      	blt.n	800b6a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	490c      	ldr	r1, [pc, #48]	; (800b6c4 <__NVIC_SetPriority+0x4c>)
 800b692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b696:	0112      	lsls	r2, r2, #4
 800b698:	b2d2      	uxtb	r2, r2
 800b69a:	440b      	add	r3, r1
 800b69c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b6a0:	e00a      	b.n	800b6b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	4908      	ldr	r1, [pc, #32]	; (800b6c8 <__NVIC_SetPriority+0x50>)
 800b6a8:	79fb      	ldrb	r3, [r7, #7]
 800b6aa:	f003 030f 	and.w	r3, r3, #15
 800b6ae:	3b04      	subs	r3, #4
 800b6b0:	0112      	lsls	r2, r2, #4
 800b6b2:	b2d2      	uxtb	r2, r2
 800b6b4:	440b      	add	r3, r1
 800b6b6:	761a      	strb	r2, [r3, #24]
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr
 800b6c4:	e000e100 	.word	0xe000e100
 800b6c8:	e000ed00 	.word	0xe000ed00

0800b6cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b089      	sub	sp, #36	; 0x24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f003 0307 	and.w	r3, r3, #7
 800b6de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	f1c3 0307 	rsb	r3, r3, #7
 800b6e6:	2b04      	cmp	r3, #4
 800b6e8:	bf28      	it	cs
 800b6ea:	2304      	movcs	r3, #4
 800b6ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	3304      	adds	r3, #4
 800b6f2:	2b06      	cmp	r3, #6
 800b6f4:	d902      	bls.n	800b6fc <NVIC_EncodePriority+0x30>
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	3b03      	subs	r3, #3
 800b6fa:	e000      	b.n	800b6fe <NVIC_EncodePriority+0x32>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b700:	f04f 32ff 	mov.w	r2, #4294967295
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	fa02 f303 	lsl.w	r3, r2, r3
 800b70a:	43da      	mvns	r2, r3
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	401a      	ands	r2, r3
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b714:	f04f 31ff 	mov.w	r1, #4294967295
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	fa01 f303 	lsl.w	r3, r1, r3
 800b71e:	43d9      	mvns	r1, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b724:	4313      	orrs	r3, r2
         );
}
 800b726:	4618      	mov	r0, r3
 800b728:	3724      	adds	r7, #36	; 0x24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b082      	sub	sp, #8
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7ff ff4c 	bl	800b5d8 <__NVIC_SetPriorityGrouping>
}
 800b740:	bf00      	nop
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	4603      	mov	r3, r0
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
 800b754:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b756:	2300      	movs	r3, #0
 800b758:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b75a:	f7ff ff61 	bl	800b620 <__NVIC_GetPriorityGrouping>
 800b75e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	68b9      	ldr	r1, [r7, #8]
 800b764:	6978      	ldr	r0, [r7, #20]
 800b766:	f7ff ffb1 	bl	800b6cc <NVIC_EncodePriority>
 800b76a:	4602      	mov	r2, r0
 800b76c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b770:	4611      	mov	r1, r2
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff ff80 	bl	800b678 <__NVIC_SetPriority>
}
 800b778:	bf00      	nop
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b78a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff ff54 	bl	800b63c <__NVIC_EnableIRQ>
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b087      	sub	sp, #28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b7aa:	e17f      	b.n	800baac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f000 8171 	beq.w	800baa6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d00b      	beq.n	800b7e4 <HAL_GPIO_Init+0x48>
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d007      	beq.n	800b7e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b7d8:	2b11      	cmp	r3, #17
 800b7da:	d003      	beq.n	800b7e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	2b12      	cmp	r3, #18
 800b7e2:	d130      	bne.n	800b846 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	005b      	lsls	r3, r3, #1
 800b7ee:	2203      	movs	r2, #3
 800b7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f4:	43db      	mvns	r3, r3
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	68da      	ldr	r2, [r3, #12]
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	005b      	lsls	r3, r3, #1
 800b804:	fa02 f303 	lsl.w	r3, r2, r3
 800b808:	693a      	ldr	r2, [r7, #16]
 800b80a:	4313      	orrs	r3, r2
 800b80c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b81a:	2201      	movs	r2, #1
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	fa02 f303 	lsl.w	r3, r2, r3
 800b822:	43db      	mvns	r3, r3
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	4013      	ands	r3, r2
 800b828:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	091b      	lsrs	r3, r3, #4
 800b830:	f003 0201 	and.w	r2, r3, #1
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	fa02 f303 	lsl.w	r3, r2, r3
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	f003 0303 	and.w	r3, r3, #3
 800b84e:	2b03      	cmp	r3, #3
 800b850:	d118      	bne.n	800b884 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b856:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800b858:	2201      	movs	r2, #1
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	fa02 f303 	lsl.w	r3, r2, r3
 800b860:	43db      	mvns	r3, r3
 800b862:	693a      	ldr	r2, [r7, #16]
 800b864:	4013      	ands	r3, r2
 800b866:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	08db      	lsrs	r3, r3, #3
 800b86e:	f003 0201 	and.w	r2, r3, #1
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	fa02 f303 	lsl.w	r3, r2, r3
 800b878:	693a      	ldr	r2, [r7, #16]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	2203      	movs	r2, #3
 800b890:	fa02 f303 	lsl.w	r3, r2, r3
 800b894:	43db      	mvns	r3, r3
 800b896:	693a      	ldr	r2, [r7, #16]
 800b898:	4013      	ands	r3, r2
 800b89a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	689a      	ldr	r2, [r3, #8]
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d003      	beq.n	800b8c4 <HAL_GPIO_Init+0x128>
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	2b12      	cmp	r3, #18
 800b8c2:	d123      	bne.n	800b90c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	08da      	lsrs	r2, r3, #3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3208      	adds	r2, #8
 800b8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	f003 0307 	and.w	r3, r3, #7
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	220f      	movs	r2, #15
 800b8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e0:	43db      	mvns	r3, r3
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	691a      	ldr	r2, [r3, #16]
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f003 0307 	and.w	r3, r3, #7
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	08da      	lsrs	r2, r3, #3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3208      	adds	r2, #8
 800b906:	6939      	ldr	r1, [r7, #16]
 800b908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	005b      	lsls	r3, r3, #1
 800b916:	2203      	movs	r2, #3
 800b918:	fa02 f303 	lsl.w	r3, r2, r3
 800b91c:	43db      	mvns	r3, r3
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	4013      	ands	r3, r2
 800b922:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	f003 0203 	and.w	r2, r3, #3
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	005b      	lsls	r3, r3, #1
 800b930:	fa02 f303 	lsl.w	r3, r2, r3
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	4313      	orrs	r3, r2
 800b938:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	693a      	ldr	r2, [r7, #16]
 800b93e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 80ac 	beq.w	800baa6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b94e:	4b5f      	ldr	r3, [pc, #380]	; (800bacc <HAL_GPIO_Init+0x330>)
 800b950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b952:	4a5e      	ldr	r2, [pc, #376]	; (800bacc <HAL_GPIO_Init+0x330>)
 800b954:	f043 0301 	orr.w	r3, r3, #1
 800b958:	6613      	str	r3, [r2, #96]	; 0x60
 800b95a:	4b5c      	ldr	r3, [pc, #368]	; (800bacc <HAL_GPIO_Init+0x330>)
 800b95c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b95e:	f003 0301 	and.w	r3, r3, #1
 800b962:	60bb      	str	r3, [r7, #8]
 800b964:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b966:	4a5a      	ldr	r2, [pc, #360]	; (800bad0 <HAL_GPIO_Init+0x334>)
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	089b      	lsrs	r3, r3, #2
 800b96c:	3302      	adds	r3, #2
 800b96e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b972:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	f003 0303 	and.w	r3, r3, #3
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	220f      	movs	r2, #15
 800b97e:	fa02 f303 	lsl.w	r3, r2, r3
 800b982:	43db      	mvns	r3, r3
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	4013      	ands	r3, r2
 800b988:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b990:	d025      	beq.n	800b9de <HAL_GPIO_Init+0x242>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a4f      	ldr	r2, [pc, #316]	; (800bad4 <HAL_GPIO_Init+0x338>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d01f      	beq.n	800b9da <HAL_GPIO_Init+0x23e>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a4e      	ldr	r2, [pc, #312]	; (800bad8 <HAL_GPIO_Init+0x33c>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d019      	beq.n	800b9d6 <HAL_GPIO_Init+0x23a>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a4d      	ldr	r2, [pc, #308]	; (800badc <HAL_GPIO_Init+0x340>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d013      	beq.n	800b9d2 <HAL_GPIO_Init+0x236>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a4c      	ldr	r2, [pc, #304]	; (800bae0 <HAL_GPIO_Init+0x344>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d00d      	beq.n	800b9ce <HAL_GPIO_Init+0x232>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a4b      	ldr	r2, [pc, #300]	; (800bae4 <HAL_GPIO_Init+0x348>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d007      	beq.n	800b9ca <HAL_GPIO_Init+0x22e>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a4a      	ldr	r2, [pc, #296]	; (800bae8 <HAL_GPIO_Init+0x34c>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d101      	bne.n	800b9c6 <HAL_GPIO_Init+0x22a>
 800b9c2:	2306      	movs	r3, #6
 800b9c4:	e00c      	b.n	800b9e0 <HAL_GPIO_Init+0x244>
 800b9c6:	2307      	movs	r3, #7
 800b9c8:	e00a      	b.n	800b9e0 <HAL_GPIO_Init+0x244>
 800b9ca:	2305      	movs	r3, #5
 800b9cc:	e008      	b.n	800b9e0 <HAL_GPIO_Init+0x244>
 800b9ce:	2304      	movs	r3, #4
 800b9d0:	e006      	b.n	800b9e0 <HAL_GPIO_Init+0x244>
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	e004      	b.n	800b9e0 <HAL_GPIO_Init+0x244>
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	e002      	b.n	800b9e0 <HAL_GPIO_Init+0x244>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e000      	b.n	800b9e0 <HAL_GPIO_Init+0x244>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	697a      	ldr	r2, [r7, #20]
 800b9e2:	f002 0203 	and.w	r2, r2, #3
 800b9e6:	0092      	lsls	r2, r2, #2
 800b9e8:	4093      	lsls	r3, r2
 800b9ea:	693a      	ldr	r2, [r7, #16]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b9f0:	4937      	ldr	r1, [pc, #220]	; (800bad0 <HAL_GPIO_Init+0x334>)
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	089b      	lsrs	r3, r3, #2
 800b9f6:	3302      	adds	r3, #2
 800b9f8:	693a      	ldr	r2, [r7, #16]
 800b9fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b9fe:	4b3b      	ldr	r3, [pc, #236]	; (800baec <HAL_GPIO_Init+0x350>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	43db      	mvns	r3, r3
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d003      	beq.n	800ba22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ba22:	4a32      	ldr	r2, [pc, #200]	; (800baec <HAL_GPIO_Init+0x350>)
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800ba28:	4b30      	ldr	r3, [pc, #192]	; (800baec <HAL_GPIO_Init+0x350>)
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	43db      	mvns	r3, r3
 800ba32:	693a      	ldr	r2, [r7, #16]
 800ba34:	4013      	ands	r3, r2
 800ba36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d003      	beq.n	800ba4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ba4c:	4a27      	ldr	r2, [pc, #156]	; (800baec <HAL_GPIO_Init+0x350>)
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ba52:	4b26      	ldr	r3, [pc, #152]	; (800baec <HAL_GPIO_Init+0x350>)
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	43db      	mvns	r3, r3
 800ba5c:	693a      	ldr	r2, [r7, #16]
 800ba5e:	4013      	ands	r3, r2
 800ba60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d003      	beq.n	800ba76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800ba6e:	693a      	ldr	r2, [r7, #16]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ba76:	4a1d      	ldr	r2, [pc, #116]	; (800baec <HAL_GPIO_Init+0x350>)
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ba7c:	4b1b      	ldr	r3, [pc, #108]	; (800baec <HAL_GPIO_Init+0x350>)
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	43db      	mvns	r3, r3
 800ba86:	693a      	ldr	r2, [r7, #16]
 800ba88:	4013      	ands	r3, r2
 800ba8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d003      	beq.n	800baa0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800ba98:	693a      	ldr	r2, [r7, #16]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800baa0:	4a12      	ldr	r2, [pc, #72]	; (800baec <HAL_GPIO_Init+0x350>)
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	3301      	adds	r3, #1
 800baaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	fa22 f303 	lsr.w	r3, r2, r3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f47f ae78 	bne.w	800b7ac <HAL_GPIO_Init+0x10>
  }
}
 800babc:	bf00      	nop
 800babe:	bf00      	nop
 800bac0:	371c      	adds	r7, #28
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	40021000 	.word	0x40021000
 800bad0:	40010000 	.word	0x40010000
 800bad4:	48000400 	.word	0x48000400
 800bad8:	48000800 	.word	0x48000800
 800badc:	48000c00 	.word	0x48000c00
 800bae0:	48001000 	.word	0x48001000
 800bae4:	48001400 	.word	0x48001400
 800bae8:	48001800 	.word	0x48001800
 800baec:	40010400 	.word	0x40010400

0800baf0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b087      	sub	sp, #28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bafa:	2300      	movs	r3, #0
 800bafc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800bafe:	e0cd      	b.n	800bc9c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800bb00:	2201      	movs	r2, #1
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	fa02 f303 	lsl.w	r3, r2, r3
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 80c0 	beq.w	800bc96 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800bb16:	4a68      	ldr	r2, [pc, #416]	; (800bcb8 <HAL_GPIO_DeInit+0x1c8>)
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	089b      	lsrs	r3, r3, #2
 800bb1c:	3302      	adds	r3, #2
 800bb1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb22:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	f003 0303 	and.w	r3, r3, #3
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	220f      	movs	r2, #15
 800bb2e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb32:	68fa      	ldr	r2, [r7, #12]
 800bb34:	4013      	ands	r3, r2
 800bb36:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bb3e:	d025      	beq.n	800bb8c <HAL_GPIO_DeInit+0x9c>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a5e      	ldr	r2, [pc, #376]	; (800bcbc <HAL_GPIO_DeInit+0x1cc>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d01f      	beq.n	800bb88 <HAL_GPIO_DeInit+0x98>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a5d      	ldr	r2, [pc, #372]	; (800bcc0 <HAL_GPIO_DeInit+0x1d0>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d019      	beq.n	800bb84 <HAL_GPIO_DeInit+0x94>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a5c      	ldr	r2, [pc, #368]	; (800bcc4 <HAL_GPIO_DeInit+0x1d4>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d013      	beq.n	800bb80 <HAL_GPIO_DeInit+0x90>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a5b      	ldr	r2, [pc, #364]	; (800bcc8 <HAL_GPIO_DeInit+0x1d8>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d00d      	beq.n	800bb7c <HAL_GPIO_DeInit+0x8c>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a5a      	ldr	r2, [pc, #360]	; (800bccc <HAL_GPIO_DeInit+0x1dc>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d007      	beq.n	800bb78 <HAL_GPIO_DeInit+0x88>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a59      	ldr	r2, [pc, #356]	; (800bcd0 <HAL_GPIO_DeInit+0x1e0>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d101      	bne.n	800bb74 <HAL_GPIO_DeInit+0x84>
 800bb70:	2306      	movs	r3, #6
 800bb72:	e00c      	b.n	800bb8e <HAL_GPIO_DeInit+0x9e>
 800bb74:	2307      	movs	r3, #7
 800bb76:	e00a      	b.n	800bb8e <HAL_GPIO_DeInit+0x9e>
 800bb78:	2305      	movs	r3, #5
 800bb7a:	e008      	b.n	800bb8e <HAL_GPIO_DeInit+0x9e>
 800bb7c:	2304      	movs	r3, #4
 800bb7e:	e006      	b.n	800bb8e <HAL_GPIO_DeInit+0x9e>
 800bb80:	2303      	movs	r3, #3
 800bb82:	e004      	b.n	800bb8e <HAL_GPIO_DeInit+0x9e>
 800bb84:	2302      	movs	r3, #2
 800bb86:	e002      	b.n	800bb8e <HAL_GPIO_DeInit+0x9e>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e000      	b.n	800bb8e <HAL_GPIO_DeInit+0x9e>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	f002 0203 	and.w	r2, r2, #3
 800bb94:	0092      	lsls	r2, r2, #2
 800bb96:	4093      	lsls	r3, r2
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d132      	bne.n	800bc04 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800bb9e:	4b4d      	ldr	r3, [pc, #308]	; (800bcd4 <HAL_GPIO_DeInit+0x1e4>)
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	43db      	mvns	r3, r3
 800bba6:	494b      	ldr	r1, [pc, #300]	; (800bcd4 <HAL_GPIO_DeInit+0x1e4>)
 800bba8:	4013      	ands	r3, r2
 800bbaa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800bbac:	4b49      	ldr	r3, [pc, #292]	; (800bcd4 <HAL_GPIO_DeInit+0x1e4>)
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	43db      	mvns	r3, r3
 800bbb4:	4947      	ldr	r1, [pc, #284]	; (800bcd4 <HAL_GPIO_DeInit+0x1e4>)
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800bbba:	4b46      	ldr	r3, [pc, #280]	; (800bcd4 <HAL_GPIO_DeInit+0x1e4>)
 800bbbc:	689a      	ldr	r2, [r3, #8]
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	43db      	mvns	r3, r3
 800bbc2:	4944      	ldr	r1, [pc, #272]	; (800bcd4 <HAL_GPIO_DeInit+0x1e4>)
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800bbc8:	4b42      	ldr	r3, [pc, #264]	; (800bcd4 <HAL_GPIO_DeInit+0x1e4>)
 800bbca:	68da      	ldr	r2, [r3, #12]
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	43db      	mvns	r3, r3
 800bbd0:	4940      	ldr	r1, [pc, #256]	; (800bcd4 <HAL_GPIO_DeInit+0x1e4>)
 800bbd2:	4013      	ands	r3, r2
 800bbd4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f003 0303 	and.w	r3, r3, #3
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	220f      	movs	r2, #15
 800bbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800bbe6:	4a34      	ldr	r2, [pc, #208]	; (800bcb8 <HAL_GPIO_DeInit+0x1c8>)
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	089b      	lsrs	r3, r3, #2
 800bbec:	3302      	adds	r3, #2
 800bbee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	43da      	mvns	r2, r3
 800bbf6:	4830      	ldr	r0, [pc, #192]	; (800bcb8 <HAL_GPIO_DeInit+0x1c8>)
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	089b      	lsrs	r3, r3, #2
 800bbfc:	400a      	ands	r2, r1
 800bbfe:	3302      	adds	r3, #2
 800bc00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	2103      	movs	r1, #3
 800bc0e:	fa01 f303 	lsl.w	r3, r1, r3
 800bc12:	431a      	orrs	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	08da      	lsrs	r2, r3, #3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	3208      	adds	r2, #8
 800bc20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	f003 0307 	and.w	r3, r3, #7
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	220f      	movs	r2, #15
 800bc2e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc32:	43db      	mvns	r3, r3
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	08d2      	lsrs	r2, r2, #3
 800bc38:	4019      	ands	r1, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	3208      	adds	r2, #8
 800bc3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	689a      	ldr	r2, [r3, #8]
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	2103      	movs	r1, #3
 800bc4c:	fa01 f303 	lsl.w	r3, r1, r3
 800bc50:	43db      	mvns	r3, r3
 800bc52:	401a      	ands	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	2101      	movs	r1, #1
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	fa01 f303 	lsl.w	r3, r1, r3
 800bc64:	43db      	mvns	r3, r3
 800bc66:	401a      	ands	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68da      	ldr	r2, [r3, #12]
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	005b      	lsls	r3, r3, #1
 800bc74:	2103      	movs	r1, #3
 800bc76:	fa01 f303 	lsl.w	r3, r1, r3
 800bc7a:	43db      	mvns	r3, r3
 800bc7c:	401a      	ands	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc86:	2101      	movs	r1, #1
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc8e:	43db      	mvns	r3, r3
 800bc90:	401a      	ands	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800bc9c:	683a      	ldr	r2, [r7, #0]
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	fa22 f303 	lsr.w	r3, r2, r3
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f47f af2b 	bne.w	800bb00 <HAL_GPIO_DeInit+0x10>
  }
}
 800bcaa:	bf00      	nop
 800bcac:	bf00      	nop
 800bcae:	371c      	adds	r7, #28
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	40010000 	.word	0x40010000
 800bcbc:	48000400 	.word	0x48000400
 800bcc0:	48000800 	.word	0x48000800
 800bcc4:	48000c00 	.word	0x48000c00
 800bcc8:	48001000 	.word	0x48001000
 800bccc:	48001400 	.word	0x48001400
 800bcd0:	48001800 	.word	0x48001800
 800bcd4:	40010400 	.word	0x40010400

0800bcd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	807b      	strh	r3, [r7, #2]
 800bce4:	4613      	mov	r3, r2
 800bce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bce8:	787b      	ldrb	r3, [r7, #1]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d003      	beq.n	800bcf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bcee:	887a      	ldrh	r2, [r7, #2]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bcf4:	e002      	b.n	800bcfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bcf6:	887a      	ldrh	r2, [r7, #2]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	695b      	ldr	r3, [r3, #20]
 800bd18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bd1a:	887a      	ldrh	r2, [r7, #2]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4013      	ands	r3, r2
 800bd20:	041a      	lsls	r2, r3, #16
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	43d9      	mvns	r1, r3
 800bd26:	887b      	ldrh	r3, [r7, #2]
 800bd28:	400b      	ands	r3, r1
 800bd2a:	431a      	orrs	r2, r3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	619a      	str	r2, [r3, #24]
}
 800bd30:	bf00      	nop
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800bd46:	4b08      	ldr	r3, [pc, #32]	; (800bd68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bd48:	695a      	ldr	r2, [r3, #20]
 800bd4a:	88fb      	ldrh	r3, [r7, #6]
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d006      	beq.n	800bd60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bd52:	4a05      	ldr	r2, [pc, #20]	; (800bd68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bd54:	88fb      	ldrh	r3, [r7, #6]
 800bd56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bd58:	88fb      	ldrh	r3, [r7, #6]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7f5 fd60 	bl	8001820 <HAL_GPIO_EXTI_Callback>
  }
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	40010400 	.word	0x40010400

0800bd6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e081      	b.n	800be82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d106      	bne.n	800bd98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f7f6 f942 	bl	800201c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2224      	movs	r2, #36	; 0x24
 800bd9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f022 0201 	bic.w	r2, r2, #1
 800bdae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685a      	ldr	r2, [r3, #4]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bdbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	689a      	ldr	r2, [r3, #8]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bdcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d107      	bne.n	800bde6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bde2:	609a      	str	r2, [r3, #8]
 800bde4:	e006      	b.n	800bdf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	689a      	ldr	r2, [r3, #8]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bdf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d104      	bne.n	800be06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	6812      	ldr	r2, [r2, #0]
 800be10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800be14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68da      	ldr	r2, [r3, #12]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	691a      	ldr	r2, [r3, #16]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	ea42 0103 	orr.w	r1, r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	021a      	lsls	r2, r3, #8
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	430a      	orrs	r2, r1
 800be42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	69d9      	ldr	r1, [r3, #28]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a1a      	ldr	r2, [r3, #32]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	430a      	orrs	r2, r1
 800be52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f042 0201 	orr.w	r2, r2, #1
 800be62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2220      	movs	r2, #32
 800be6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3708      	adds	r7, #8
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b082      	sub	sp, #8
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d101      	bne.n	800be9c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	e021      	b.n	800bee0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2224      	movs	r2, #36	; 0x24
 800bea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f022 0201 	bic.w	r2, r2, #1
 800beb2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7f6 f90f 	bl	80020d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af02      	add	r7, sp, #8
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	607a      	str	r2, [r7, #4]
 800bef2:	461a      	mov	r2, r3
 800bef4:	460b      	mov	r3, r1
 800bef6:	817b      	strh	r3, [r7, #10]
 800bef8:	4613      	mov	r3, r2
 800befa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	2b20      	cmp	r3, #32
 800bf06:	f040 80da 	bne.w	800c0be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d101      	bne.n	800bf18 <HAL_I2C_Master_Transmit+0x30>
 800bf14:	2302      	movs	r3, #2
 800bf16:	e0d3      	b.n	800c0c0 <HAL_I2C_Master_Transmit+0x1d8>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bf20:	f7ff fb2a 	bl	800b578 <HAL_GetTick>
 800bf24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	2319      	movs	r3, #25
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 fcd6 	bl	800c8e4 <I2C_WaitOnFlagUntilTimeout>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d001      	beq.n	800bf42 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e0be      	b.n	800c0c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2221      	movs	r2, #33	; 0x21
 800bf46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2210      	movs	r2, #16
 800bf4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	893a      	ldrh	r2, [r7, #8]
 800bf62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	2bff      	cmp	r3, #255	; 0xff
 800bf72:	d90e      	bls.n	800bf92 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	22ff      	movs	r2, #255	; 0xff
 800bf78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	8979      	ldrh	r1, [r7, #10]
 800bf82:	4b51      	ldr	r3, [pc, #324]	; (800c0c8 <HAL_I2C_Master_Transmit+0x1e0>)
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f000 fe38 	bl	800cc00 <I2C_TransferConfig>
 800bf90:	e06c      	b.n	800c06c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	8979      	ldrh	r1, [r7, #10]
 800bfa4:	4b48      	ldr	r3, [pc, #288]	; (800c0c8 <HAL_I2C_Master_Transmit+0x1e0>)
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f000 fe27 	bl	800cc00 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800bfb2:	e05b      	b.n	800c06c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfb4:	697a      	ldr	r2, [r7, #20]
 800bfb6:	6a39      	ldr	r1, [r7, #32]
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f000 fcd3 	bl	800c964 <I2C_WaitOnTXISFlagUntilTimeout>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e07b      	b.n	800c0c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfcc:	781a      	ldrb	r2, [r3, #0]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd8:	1c5a      	adds	r2, r3, #1
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bff0:	3b01      	subs	r3, #1
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d034      	beq.n	800c06c <HAL_I2C_Master_Transmit+0x184>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c006:	2b00      	cmp	r3, #0
 800c008:	d130      	bne.n	800c06c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	6a3b      	ldr	r3, [r7, #32]
 800c010:	2200      	movs	r2, #0
 800c012:	2180      	movs	r1, #128	; 0x80
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f000 fc65 	bl	800c8e4 <I2C_WaitOnFlagUntilTimeout>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d001      	beq.n	800c024 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e04d      	b.n	800c0c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c028:	b29b      	uxth	r3, r3
 800c02a:	2bff      	cmp	r3, #255	; 0xff
 800c02c:	d90e      	bls.n	800c04c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	22ff      	movs	r2, #255	; 0xff
 800c032:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	8979      	ldrh	r1, [r7, #10]
 800c03c:	2300      	movs	r3, #0
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f000 fddb 	bl	800cc00 <I2C_TransferConfig>
 800c04a:	e00f      	b.n	800c06c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c050:	b29a      	uxth	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	8979      	ldrh	r1, [r7, #10]
 800c05e:	2300      	movs	r3, #0
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f000 fdca 	bl	800cc00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c070:	b29b      	uxth	r3, r3
 800c072:	2b00      	cmp	r3, #0
 800c074:	d19e      	bne.n	800bfb4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c076:	697a      	ldr	r2, [r7, #20]
 800c078:	6a39      	ldr	r1, [r7, #32]
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f000 fcb2 	bl	800c9e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e01a      	b.n	800c0c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2220      	movs	r2, #32
 800c090:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6859      	ldr	r1, [r3, #4]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	4b0b      	ldr	r3, [pc, #44]	; (800c0cc <HAL_I2C_Master_Transmit+0x1e4>)
 800c09e:	400b      	ands	r3, r1
 800c0a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	e000      	b.n	800c0c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800c0be:	2302      	movs	r3, #2
  }
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3718      	adds	r7, #24
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	80002000 	.word	0x80002000
 800c0cc:	fe00e800 	.word	0xfe00e800

0800c0d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af02      	add	r7, sp, #8
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	607a      	str	r2, [r7, #4]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	460b      	mov	r3, r1
 800c0de:	817b      	strh	r3, [r7, #10]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	2b20      	cmp	r3, #32
 800c0ee:	f040 80db 	bne.w	800c2a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d101      	bne.n	800c100 <HAL_I2C_Master_Receive+0x30>
 800c0fc:	2302      	movs	r3, #2
 800c0fe:	e0d4      	b.n	800c2aa <HAL_I2C_Master_Receive+0x1da>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c108:	f7ff fa36 	bl	800b578 <HAL_GetTick>
 800c10c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	9300      	str	r3, [sp, #0]
 800c112:	2319      	movs	r3, #25
 800c114:	2201      	movs	r2, #1
 800c116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f000 fbe2 	bl	800c8e4 <I2C_WaitOnFlagUntilTimeout>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	e0bf      	b.n	800c2aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2222      	movs	r2, #34	; 0x22
 800c12e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2210      	movs	r2, #16
 800c136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	893a      	ldrh	r2, [r7, #8]
 800c14a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2200      	movs	r2, #0
 800c150:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c156:	b29b      	uxth	r3, r3
 800c158:	2bff      	cmp	r3, #255	; 0xff
 800c15a:	d90e      	bls.n	800c17a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	22ff      	movs	r2, #255	; 0xff
 800c160:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c166:	b2da      	uxtb	r2, r3
 800c168:	8979      	ldrh	r1, [r7, #10]
 800c16a:	4b52      	ldr	r3, [pc, #328]	; (800c2b4 <HAL_I2C_Master_Receive+0x1e4>)
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 fd44 	bl	800cc00 <I2C_TransferConfig>
 800c178:	e06d      	b.n	800c256 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c17e:	b29a      	uxth	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	8979      	ldrh	r1, [r7, #10]
 800c18c:	4b49      	ldr	r3, [pc, #292]	; (800c2b4 <HAL_I2C_Master_Receive+0x1e4>)
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f000 fd33 	bl	800cc00 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800c19a:	e05c      	b.n	800c256 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c19c:	697a      	ldr	r2, [r7, #20]
 800c19e:	6a39      	ldr	r1, [r7, #32]
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f000 fc5b 	bl	800ca5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d001      	beq.n	800c1b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e07c      	b.n	800c2aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ba:	b2d2      	uxtb	r2, r2
 800c1bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d034      	beq.n	800c256 <HAL_I2C_Master_Receive+0x186>
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d130      	bne.n	800c256 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	6a3b      	ldr	r3, [r7, #32]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2180      	movs	r1, #128	; 0x80
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f000 fb70 	bl	800c8e4 <I2C_WaitOnFlagUntilTimeout>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d001      	beq.n	800c20e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e04d      	b.n	800c2aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c212:	b29b      	uxth	r3, r3
 800c214:	2bff      	cmp	r3, #255	; 0xff
 800c216:	d90e      	bls.n	800c236 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	22ff      	movs	r2, #255	; 0xff
 800c21c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c222:	b2da      	uxtb	r2, r3
 800c224:	8979      	ldrh	r1, [r7, #10]
 800c226:	2300      	movs	r3, #0
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f000 fce6 	bl	800cc00 <I2C_TransferConfig>
 800c234:	e00f      	b.n	800c256 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c244:	b2da      	uxtb	r2, r3
 800c246:	8979      	ldrh	r1, [r7, #10]
 800c248:	2300      	movs	r3, #0
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f000 fcd5 	bl	800cc00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d19d      	bne.n	800c19c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c260:	697a      	ldr	r2, [r7, #20]
 800c262:	6a39      	ldr	r1, [r7, #32]
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	f000 fbbd 	bl	800c9e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	e01a      	b.n	800c2aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2220      	movs	r2, #32
 800c27a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6859      	ldr	r1, [r3, #4]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	4b0c      	ldr	r3, [pc, #48]	; (800c2b8 <HAL_I2C_Master_Receive+0x1e8>)
 800c288:	400b      	ands	r3, r1
 800c28a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2220      	movs	r2, #32
 800c290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	e000      	b.n	800c2aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800c2a8:	2302      	movs	r3, #2
  }
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3718      	adds	r7, #24
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	80002400 	.word	0x80002400
 800c2b8:	fe00e800 	.word	0xfe00e800

0800c2bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b088      	sub	sp, #32
 800c2c0:	af02      	add	r7, sp, #8
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	4608      	mov	r0, r1
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	817b      	strh	r3, [r7, #10]
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	813b      	strh	r3, [r7, #8]
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	2b20      	cmp	r3, #32
 800c2e0:	f040 80f9 	bne.w	800c4d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2e4:	6a3b      	ldr	r3, [r7, #32]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d002      	beq.n	800c2f0 <HAL_I2C_Mem_Write+0x34>
 800c2ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d105      	bne.n	800c2fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e0ed      	b.n	800c4d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c302:	2b01      	cmp	r3, #1
 800c304:	d101      	bne.n	800c30a <HAL_I2C_Mem_Write+0x4e>
 800c306:	2302      	movs	r3, #2
 800c308:	e0e6      	b.n	800c4d8 <HAL_I2C_Mem_Write+0x21c>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c312:	f7ff f931 	bl	800b578 <HAL_GetTick>
 800c316:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	2319      	movs	r3, #25
 800c31e:	2201      	movs	r2, #1
 800c320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f000 fadd 	bl	800c8e4 <I2C_WaitOnFlagUntilTimeout>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d001      	beq.n	800c334 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	e0d1      	b.n	800c4d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2221      	movs	r2, #33	; 0x21
 800c338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2240      	movs	r2, #64	; 0x40
 800c340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6a3a      	ldr	r2, [r7, #32]
 800c34e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c35c:	88f8      	ldrh	r0, [r7, #6]
 800c35e:	893a      	ldrh	r2, [r7, #8]
 800c360:	8979      	ldrh	r1, [r7, #10]
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	9301      	str	r3, [sp, #4]
 800c366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	4603      	mov	r3, r0
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f000 f9ed 	bl	800c74c <I2C_RequestMemoryWrite>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d005      	beq.n	800c384 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	e0a9      	b.n	800c4d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c388:	b29b      	uxth	r3, r3
 800c38a:	2bff      	cmp	r3, #255	; 0xff
 800c38c:	d90e      	bls.n	800c3ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	22ff      	movs	r2, #255	; 0xff
 800c392:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c398:	b2da      	uxtb	r2, r3
 800c39a:	8979      	ldrh	r1, [r7, #10]
 800c39c:	2300      	movs	r3, #0
 800c39e:	9300      	str	r3, [sp, #0]
 800c3a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f000 fc2b 	bl	800cc00 <I2C_TransferConfig>
 800c3aa:	e00f      	b.n	800c3cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	8979      	ldrh	r1, [r7, #10]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f000 fc1a 	bl	800cc00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c3cc:	697a      	ldr	r2, [r7, #20]
 800c3ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f000 fac7 	bl	800c964 <I2C_WaitOnTXISFlagUntilTimeout>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e07b      	b.n	800c4d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e4:	781a      	ldrb	r2, [r3, #0]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f0:	1c5a      	adds	r2, r3, #1
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c408:	3b01      	subs	r3, #1
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c414:	b29b      	uxth	r3, r3
 800c416:	2b00      	cmp	r3, #0
 800c418:	d034      	beq.n	800c484 <HAL_I2C_Mem_Write+0x1c8>
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d130      	bne.n	800c484 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c428:	2200      	movs	r2, #0
 800c42a:	2180      	movs	r1, #128	; 0x80
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f000 fa59 	bl	800c8e4 <I2C_WaitOnFlagUntilTimeout>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	e04d      	b.n	800c4d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c440:	b29b      	uxth	r3, r3
 800c442:	2bff      	cmp	r3, #255	; 0xff
 800c444:	d90e      	bls.n	800c464 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	22ff      	movs	r2, #255	; 0xff
 800c44a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c450:	b2da      	uxtb	r2, r3
 800c452:	8979      	ldrh	r1, [r7, #10]
 800c454:	2300      	movs	r3, #0
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f000 fbcf 	bl	800cc00 <I2C_TransferConfig>
 800c462:	e00f      	b.n	800c484 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c468:	b29a      	uxth	r2, r3
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c472:	b2da      	uxtb	r2, r3
 800c474:	8979      	ldrh	r1, [r7, #10]
 800c476:	2300      	movs	r3, #0
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 fbbe 	bl	800cc00 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c488:	b29b      	uxth	r3, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d19e      	bne.n	800c3cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c48e:	697a      	ldr	r2, [r7, #20]
 800c490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f000 faa6 	bl	800c9e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d001      	beq.n	800c4a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e01a      	b.n	800c4d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2220      	movs	r2, #32
 800c4a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	6859      	ldr	r1, [r3, #4]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	4b0a      	ldr	r3, [pc, #40]	; (800c4e0 <HAL_I2C_Mem_Write+0x224>)
 800c4b6:	400b      	ands	r3, r1
 800c4b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2220      	movs	r2, #32
 800c4be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	e000      	b.n	800c4d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c4d6:	2302      	movs	r3, #2
  }
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3718      	adds	r7, #24
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	fe00e800 	.word	0xfe00e800

0800c4e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b088      	sub	sp, #32
 800c4e8:	af02      	add	r7, sp, #8
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	4608      	mov	r0, r1
 800c4ee:	4611      	mov	r1, r2
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	817b      	strh	r3, [r7, #10]
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	813b      	strh	r3, [r7, #8]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b20      	cmp	r3, #32
 800c508:	f040 80fd 	bne.w	800c706 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c50c:	6a3b      	ldr	r3, [r7, #32]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d002      	beq.n	800c518 <HAL_I2C_Mem_Read+0x34>
 800c512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c514:	2b00      	cmp	r3, #0
 800c516:	d105      	bne.n	800c524 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c51e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	e0f1      	b.n	800c708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d101      	bne.n	800c532 <HAL_I2C_Mem_Read+0x4e>
 800c52e:	2302      	movs	r3, #2
 800c530:	e0ea      	b.n	800c708 <HAL_I2C_Mem_Read+0x224>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c53a:	f7ff f81d 	bl	800b578 <HAL_GetTick>
 800c53e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	2319      	movs	r3, #25
 800c546:	2201      	movs	r2, #1
 800c548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f000 f9c9 	bl	800c8e4 <I2C_WaitOnFlagUntilTimeout>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d001      	beq.n	800c55c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	e0d5      	b.n	800c708 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2222      	movs	r2, #34	; 0x22
 800c560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2240      	movs	r2, #64	; 0x40
 800c568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6a3a      	ldr	r2, [r7, #32]
 800c576:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c57c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2200      	movs	r2, #0
 800c582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c584:	88f8      	ldrh	r0, [r7, #6]
 800c586:	893a      	ldrh	r2, [r7, #8]
 800c588:	8979      	ldrh	r1, [r7, #10]
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	9301      	str	r3, [sp, #4]
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	4603      	mov	r3, r0
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f000 f92d 	bl	800c7f4 <I2C_RequestMemoryRead>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d005      	beq.n	800c5ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e0ad      	b.n	800c708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	2bff      	cmp	r3, #255	; 0xff
 800c5b4:	d90e      	bls.n	800c5d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	22ff      	movs	r2, #255	; 0xff
 800c5ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5c0:	b2da      	uxtb	r2, r3
 800c5c2:	8979      	ldrh	r1, [r7, #10]
 800c5c4:	4b52      	ldr	r3, [pc, #328]	; (800c710 <HAL_I2C_Mem_Read+0x22c>)
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f000 fb17 	bl	800cc00 <I2C_TransferConfig>
 800c5d2:	e00f      	b.n	800c5f4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	8979      	ldrh	r1, [r7, #10]
 800c5e6:	4b4a      	ldr	r3, [pc, #296]	; (800c710 <HAL_I2C_Mem_Read+0x22c>)
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	f000 fb06 	bl	800cc00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	2104      	movs	r1, #4
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f000 f970 	bl	800c8e4 <I2C_WaitOnFlagUntilTimeout>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e07c      	b.n	800c708 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c618:	b2d2      	uxtb	r2, r2
 800c61a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c620:	1c5a      	adds	r2, r3, #1
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c62a:	3b01      	subs	r3, #1
 800c62c:	b29a      	uxth	r2, r3
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c636:	b29b      	uxth	r3, r3
 800c638:	3b01      	subs	r3, #1
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c644:	b29b      	uxth	r3, r3
 800c646:	2b00      	cmp	r3, #0
 800c648:	d034      	beq.n	800c6b4 <HAL_I2C_Mem_Read+0x1d0>
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d130      	bne.n	800c6b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c658:	2200      	movs	r2, #0
 800c65a:	2180      	movs	r1, #128	; 0x80
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f000 f941 	bl	800c8e4 <I2C_WaitOnFlagUntilTimeout>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d001      	beq.n	800c66c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c668:	2301      	movs	r3, #1
 800c66a:	e04d      	b.n	800c708 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c670:	b29b      	uxth	r3, r3
 800c672:	2bff      	cmp	r3, #255	; 0xff
 800c674:	d90e      	bls.n	800c694 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	22ff      	movs	r2, #255	; 0xff
 800c67a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c680:	b2da      	uxtb	r2, r3
 800c682:	8979      	ldrh	r1, [r7, #10]
 800c684:	2300      	movs	r3, #0
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f000 fab7 	bl	800cc00 <I2C_TransferConfig>
 800c692:	e00f      	b.n	800c6b4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c698:	b29a      	uxth	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	8979      	ldrh	r1, [r7, #10]
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f000 faa6 	bl	800cc00 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d19a      	bne.n	800c5f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f000 f98e 	bl	800c9e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e01a      	b.n	800c708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2220      	movs	r2, #32
 800c6d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	6859      	ldr	r1, [r3, #4]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	4b0b      	ldr	r3, [pc, #44]	; (800c714 <HAL_I2C_Mem_Read+0x230>)
 800c6e6:	400b      	ands	r3, r1
 800c6e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2220      	movs	r2, #32
 800c6ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c702:	2300      	movs	r3, #0
 800c704:	e000      	b.n	800c708 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c706:	2302      	movs	r3, #2
  }
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3718      	adds	r7, #24
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	80002400 	.word	0x80002400
 800c714:	fe00e800 	.word	0xfe00e800

0800c718 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c726:	b2db      	uxtb	r3, r3
}
 800c728:	4618      	mov	r0, r3
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800c740:	4618      	mov	r0, r3
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af02      	add	r7, sp, #8
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	4608      	mov	r0, r1
 800c756:	4611      	mov	r1, r2
 800c758:	461a      	mov	r2, r3
 800c75a:	4603      	mov	r3, r0
 800c75c:	817b      	strh	r3, [r7, #10]
 800c75e:	460b      	mov	r3, r1
 800c760:	813b      	strh	r3, [r7, #8]
 800c762:	4613      	mov	r3, r2
 800c764:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c766:	88fb      	ldrh	r3, [r7, #6]
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	8979      	ldrh	r1, [r7, #10]
 800c76c:	4b20      	ldr	r3, [pc, #128]	; (800c7f0 <I2C_RequestMemoryWrite+0xa4>)
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c774:	68f8      	ldr	r0, [r7, #12]
 800c776:	f000 fa43 	bl	800cc00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c77a:	69fa      	ldr	r2, [r7, #28]
 800c77c:	69b9      	ldr	r1, [r7, #24]
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f000 f8f0 	bl	800c964 <I2C_WaitOnTXISFlagUntilTimeout>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	e02c      	b.n	800c7e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c78e:	88fb      	ldrh	r3, [r7, #6]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d105      	bne.n	800c7a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c794:	893b      	ldrh	r3, [r7, #8]
 800c796:	b2da      	uxtb	r2, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	629a      	str	r2, [r3, #40]	; 0x28
 800c79e:	e015      	b.n	800c7cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c7a0:	893b      	ldrh	r3, [r7, #8]
 800c7a2:	0a1b      	lsrs	r3, r3, #8
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c7ae:	69fa      	ldr	r2, [r7, #28]
 800c7b0:	69b9      	ldr	r1, [r7, #24]
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f000 f8d6 	bl	800c964 <I2C_WaitOnTXISFlagUntilTimeout>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e012      	b.n	800c7e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c7c2:	893b      	ldrh	r3, [r7, #8]
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	9300      	str	r3, [sp, #0]
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	2180      	movs	r1, #128	; 0x80
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f000 f884 	bl	800c8e4 <I2C_WaitOnFlagUntilTimeout>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d001      	beq.n	800c7e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e000      	b.n	800c7e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	80002000 	.word	0x80002000

0800c7f4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af02      	add	r7, sp, #8
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	4611      	mov	r1, r2
 800c800:	461a      	mov	r2, r3
 800c802:	4603      	mov	r3, r0
 800c804:	817b      	strh	r3, [r7, #10]
 800c806:	460b      	mov	r3, r1
 800c808:	813b      	strh	r3, [r7, #8]
 800c80a:	4613      	mov	r3, r2
 800c80c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c80e:	88fb      	ldrh	r3, [r7, #6]
 800c810:	b2da      	uxtb	r2, r3
 800c812:	8979      	ldrh	r1, [r7, #10]
 800c814:	4b20      	ldr	r3, [pc, #128]	; (800c898 <I2C_RequestMemoryRead+0xa4>)
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	2300      	movs	r3, #0
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 f9f0 	bl	800cc00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c820:	69fa      	ldr	r2, [r7, #28]
 800c822:	69b9      	ldr	r1, [r7, #24]
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f000 f89d 	bl	800c964 <I2C_WaitOnTXISFlagUntilTimeout>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d001      	beq.n	800c834 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c830:	2301      	movs	r3, #1
 800c832:	e02c      	b.n	800c88e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c834:	88fb      	ldrh	r3, [r7, #6]
 800c836:	2b01      	cmp	r3, #1
 800c838:	d105      	bne.n	800c846 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c83a:	893b      	ldrh	r3, [r7, #8]
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	629a      	str	r2, [r3, #40]	; 0x28
 800c844:	e015      	b.n	800c872 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c846:	893b      	ldrh	r3, [r7, #8]
 800c848:	0a1b      	lsrs	r3, r3, #8
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c854:	69fa      	ldr	r2, [r7, #28]
 800c856:	69b9      	ldr	r1, [r7, #24]
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f000 f883 	bl	800c964 <I2C_WaitOnTXISFlagUntilTimeout>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	e012      	b.n	800c88e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c868:	893b      	ldrh	r3, [r7, #8]
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	2200      	movs	r2, #0
 800c87a:	2140      	movs	r1, #64	; 0x40
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f000 f831 	bl	800c8e4 <I2C_WaitOnFlagUntilTimeout>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c888:	2301      	movs	r3, #1
 800c88a:	e000      	b.n	800c88e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	80002000 	.word	0x80002000

0800c89c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	699b      	ldr	r3, [r3, #24]
 800c8aa:	f003 0302 	and.w	r3, r3, #2
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d103      	bne.n	800c8ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	f003 0301 	and.w	r3, r3, #1
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d007      	beq.n	800c8d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	699a      	ldr	r2, [r3, #24]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f042 0201 	orr.w	r2, r2, #1
 800c8d6:	619a      	str	r2, [r3, #24]
  }
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	603b      	str	r3, [r7, #0]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c8f4:	e022      	b.n	800c93c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fc:	d01e      	beq.n	800c93c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8fe:	f7fe fe3b 	bl	800b578 <HAL_GetTick>
 800c902:	4602      	mov	r2, r0
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d302      	bcc.n	800c914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d113      	bne.n	800c93c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c918:	f043 0220 	orr.w	r2, r3, #32
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2220      	movs	r2, #32
 800c924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c938:	2301      	movs	r3, #1
 800c93a:	e00f      	b.n	800c95c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	699a      	ldr	r2, [r3, #24]
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	4013      	ands	r3, r2
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	429a      	cmp	r2, r3
 800c94a:	bf0c      	ite	eq
 800c94c:	2301      	moveq	r3, #1
 800c94e:	2300      	movne	r3, #0
 800c950:	b2db      	uxtb	r3, r3
 800c952:	461a      	mov	r2, r3
 800c954:	79fb      	ldrb	r3, [r7, #7]
 800c956:	429a      	cmp	r2, r3
 800c958:	d0cd      	beq.n	800c8f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c970:	e02c      	b.n	800c9cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	68b9      	ldr	r1, [r7, #8]
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f000 f8dc 	bl	800cb34 <I2C_IsAcknowledgeFailed>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d001      	beq.n	800c986 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	e02a      	b.n	800c9dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98c:	d01e      	beq.n	800c9cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c98e:	f7fe fdf3 	bl	800b578 <HAL_GetTick>
 800c992:	4602      	mov	r2, r0
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	68ba      	ldr	r2, [r7, #8]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d302      	bcc.n	800c9a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d113      	bne.n	800c9cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9a8:	f043 0220 	orr.w	r2, r3, #32
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2220      	movs	r2, #32
 800c9b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e007      	b.n	800c9dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	f003 0302 	and.w	r3, r3, #2
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	d1cb      	bne.n	800c972 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c9f0:	e028      	b.n	800ca44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	68b9      	ldr	r1, [r7, #8]
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	f000 f89c 	bl	800cb34 <I2C_IsAcknowledgeFailed>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	e026      	b.n	800ca54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca06:	f7fe fdb7 	bl	800b578 <HAL_GetTick>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	68ba      	ldr	r2, [r7, #8]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d302      	bcc.n	800ca1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d113      	bne.n	800ca44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca20:	f043 0220 	orr.w	r2, r3, #32
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2220      	movs	r2, #32
 800ca2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	e007      	b.n	800ca54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	699b      	ldr	r3, [r3, #24]
 800ca4a:	f003 0320 	and.w	r3, r3, #32
 800ca4e:	2b20      	cmp	r3, #32
 800ca50:	d1cf      	bne.n	800c9f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ca68:	e055      	b.n	800cb16 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	68b9      	ldr	r1, [r7, #8]
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f000 f860 	bl	800cb34 <I2C_IsAcknowledgeFailed>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d001      	beq.n	800ca7e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e053      	b.n	800cb26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	f003 0320 	and.w	r3, r3, #32
 800ca88:	2b20      	cmp	r3, #32
 800ca8a:	d129      	bne.n	800cae0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	699b      	ldr	r3, [r3, #24]
 800ca92:	f003 0304 	and.w	r3, r3, #4
 800ca96:	2b04      	cmp	r3, #4
 800ca98:	d105      	bne.n	800caa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d001      	beq.n	800caa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	e03f      	b.n	800cb26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2220      	movs	r2, #32
 800caac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	6859      	ldr	r1, [r3, #4]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	4b1d      	ldr	r3, [pc, #116]	; (800cb30 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800caba:	400b      	ands	r3, r1
 800cabc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2200      	movs	r2, #0
 800cac2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2220      	movs	r2, #32
 800cac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2200      	movs	r2, #0
 800cad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cadc:	2301      	movs	r3, #1
 800cade:	e022      	b.n	800cb26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cae0:	f7fe fd4a 	bl	800b578 <HAL_GetTick>
 800cae4:	4602      	mov	r2, r0
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	429a      	cmp	r2, r3
 800caee:	d302      	bcc.n	800caf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10f      	bne.n	800cb16 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cafa:	f043 0220 	orr.w	r2, r3, #32
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2220      	movs	r2, #32
 800cb06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e007      	b.n	800cb26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	f003 0304 	and.w	r3, r3, #4
 800cb20:	2b04      	cmp	r3, #4
 800cb22:	d1a2      	bne.n	800ca6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	fe00e800 	.word	0xfe00e800

0800cb34 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	f003 0310 	and.w	r3, r3, #16
 800cb4a:	2b10      	cmp	r3, #16
 800cb4c:	d151      	bne.n	800cbf2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cb4e:	e022      	b.n	800cb96 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb56:	d01e      	beq.n	800cb96 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb58:	f7fe fd0e 	bl	800b578 <HAL_GetTick>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	68ba      	ldr	r2, [r7, #8]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d302      	bcc.n	800cb6e <I2C_IsAcknowledgeFailed+0x3a>
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d113      	bne.n	800cb96 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb72:	f043 0220 	orr.w	r2, r3, #32
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2220      	movs	r2, #32
 800cb7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e02e      	b.n	800cbf4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	699b      	ldr	r3, [r3, #24]
 800cb9c:	f003 0320 	and.w	r3, r3, #32
 800cba0:	2b20      	cmp	r3, #32
 800cba2:	d1d5      	bne.n	800cb50 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2210      	movs	r2, #16
 800cbaa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2220      	movs	r2, #32
 800cbb2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f7ff fe71 	bl	800c89c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	6859      	ldr	r1, [r3, #4]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	4b0d      	ldr	r3, [pc, #52]	; (800cbfc <I2C_IsAcknowledgeFailed+0xc8>)
 800cbc6:	400b      	ands	r3, r1
 800cbc8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbce:	f043 0204 	orr.w	r2, r3, #4
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2220      	movs	r2, #32
 800cbda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e000      	b.n	800cbf4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	fe00e800 	.word	0xfe00e800

0800cc00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	607b      	str	r3, [r7, #4]
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	817b      	strh	r3, [r7, #10]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	0d5b      	lsrs	r3, r3, #21
 800cc1c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800cc20:	4b0d      	ldr	r3, [pc, #52]	; (800cc58 <I2C_TransferConfig+0x58>)
 800cc22:	430b      	orrs	r3, r1
 800cc24:	43db      	mvns	r3, r3
 800cc26:	ea02 0103 	and.w	r1, r2, r3
 800cc2a:	897b      	ldrh	r3, [r7, #10]
 800cc2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800cc30:	7a7b      	ldrb	r3, [r7, #9]
 800cc32:	041b      	lsls	r3, r3, #16
 800cc34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cc38:	431a      	orrs	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	431a      	orrs	r2, r3
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	431a      	orrs	r2, r3
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800cc4a:	bf00      	nop
 800cc4c:	3714      	adds	r7, #20
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	03ff63ff 	.word	0x03ff63ff

0800cc5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	2b20      	cmp	r3, #32
 800cc70:	d138      	bne.n	800cce4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d101      	bne.n	800cc80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	e032      	b.n	800cce6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2201      	movs	r2, #1
 800cc84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2224      	movs	r2, #36	; 0x24
 800cc8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f022 0201 	bic.w	r2, r2, #1
 800cc9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ccae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	6819      	ldr	r1, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	683a      	ldr	r2, [r7, #0]
 800ccbc:	430a      	orrs	r2, r1
 800ccbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f042 0201 	orr.w	r2, r2, #1
 800ccce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2220      	movs	r2, #32
 800ccd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	e000      	b.n	800cce6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cce4:	2302      	movs	r3, #2
  }
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	370c      	adds	r7, #12
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	b085      	sub	sp, #20
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	2b20      	cmp	r3, #32
 800cd06:	d139      	bne.n	800cd7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d101      	bne.n	800cd16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cd12:	2302      	movs	r3, #2
 800cd14:	e033      	b.n	800cd7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2224      	movs	r2, #36	; 0x24
 800cd22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f022 0201 	bic.w	r2, r2, #1
 800cd34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cd44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	021b      	lsls	r3, r3, #8
 800cd4a:	68fa      	ldr	r2, [r7, #12]
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f042 0201 	orr.w	r2, r2, #1
 800cd66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	e000      	b.n	800cd7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cd7c:	2302      	movs	r3, #2
  }
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3714      	adds	r7, #20
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
	...

0800cd8c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd90:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a04      	ldr	r2, [pc, #16]	; (800cda8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800cd96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd9a:	6013      	str	r3, [r2, #0]
}
 800cd9c:	bf00      	nop
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr
 800cda6:	bf00      	nop
 800cda8:	40007000 	.word	0x40007000

0800cdac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800cdac:	b480      	push	{r7}
 800cdae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800cdb0:	4b04      	ldr	r3, [pc, #16]	; (800cdc4 <HAL_PWREx_GetVoltageRange+0x18>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	40007000 	.word	0x40007000

0800cdc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdd6:	d130      	bne.n	800ce3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800cdd8:	4b23      	ldr	r3, [pc, #140]	; (800ce68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cde0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cde4:	d038      	beq.n	800ce58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cde6:	4b20      	ldr	r3, [pc, #128]	; (800ce68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cdee:	4a1e      	ldr	r2, [pc, #120]	; (800ce68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cdf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cdf4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cdf6:	4b1d      	ldr	r3, [pc, #116]	; (800ce6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2232      	movs	r2, #50	; 0x32
 800cdfc:	fb02 f303 	mul.w	r3, r2, r3
 800ce00:	4a1b      	ldr	r2, [pc, #108]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ce02:	fba2 2303 	umull	r2, r3, r2, r3
 800ce06:	0c9b      	lsrs	r3, r3, #18
 800ce08:	3301      	adds	r3, #1
 800ce0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ce0c:	e002      	b.n	800ce14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	3b01      	subs	r3, #1
 800ce12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ce14:	4b14      	ldr	r3, [pc, #80]	; (800ce68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ce16:	695b      	ldr	r3, [r3, #20]
 800ce18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce20:	d102      	bne.n	800ce28 <HAL_PWREx_ControlVoltageScaling+0x60>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1f2      	bne.n	800ce0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ce28:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ce2a:	695b      	ldr	r3, [r3, #20]
 800ce2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce34:	d110      	bne.n	800ce58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e00f      	b.n	800ce5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ce3a:	4b0b      	ldr	r3, [pc, #44]	; (800ce68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ce42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce46:	d007      	beq.n	800ce58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ce48:	4b07      	ldr	r3, [pc, #28]	; (800ce68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ce50:	4a05      	ldr	r2, [pc, #20]	; (800ce68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ce52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ce56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3714      	adds	r7, #20
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce64:	4770      	bx	lr
 800ce66:	bf00      	nop
 800ce68:	40007000 	.word	0x40007000
 800ce6c:	20000000 	.word	0x20000000
 800ce70:	431bde83 	.word	0x431bde83

0800ce74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b088      	sub	sp, #32
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d101      	bne.n	800ce86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ce82:	2301      	movs	r3, #1
 800ce84:	e3d4      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce86:	4ba1      	ldr	r3, [pc, #644]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	f003 030c 	and.w	r3, r3, #12
 800ce8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ce90:	4b9e      	ldr	r3, [pc, #632]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	f003 0303 	and.w	r3, r3, #3
 800ce98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f003 0310 	and.w	r3, r3, #16
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 80e4 	beq.w	800d070 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d007      	beq.n	800cebe <HAL_RCC_OscConfig+0x4a>
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	2b0c      	cmp	r3, #12
 800ceb2:	f040 808b 	bne.w	800cfcc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	f040 8087 	bne.w	800cfcc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800cebe:	4b93      	ldr	r3, [pc, #588]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f003 0302 	and.w	r3, r3, #2
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d005      	beq.n	800ced6 <HAL_RCC_OscConfig+0x62>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	e3ac      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6a1a      	ldr	r2, [r3, #32]
 800ceda:	4b8c      	ldr	r3, [pc, #560]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0308 	and.w	r3, r3, #8
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d004      	beq.n	800cef0 <HAL_RCC_OscConfig+0x7c>
 800cee6:	4b89      	ldr	r3, [pc, #548]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ceee:	e005      	b.n	800cefc <HAL_RCC_OscConfig+0x88>
 800cef0:	4b86      	ldr	r3, [pc, #536]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cef6:	091b      	lsrs	r3, r3, #4
 800cef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d223      	bcs.n	800cf48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a1b      	ldr	r3, [r3, #32]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f000 fd73 	bl	800d9f0 <RCC_SetFlashLatencyFromMSIRange>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d001      	beq.n	800cf14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e38d      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cf14:	4b7d      	ldr	r3, [pc, #500]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a7c      	ldr	r2, [pc, #496]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf1a:	f043 0308 	orr.w	r3, r3, #8
 800cf1e:	6013      	str	r3, [r2, #0]
 800cf20:	4b7a      	ldr	r3, [pc, #488]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6a1b      	ldr	r3, [r3, #32]
 800cf2c:	4977      	ldr	r1, [pc, #476]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cf32:	4b76      	ldr	r3, [pc, #472]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	69db      	ldr	r3, [r3, #28]
 800cf3e:	021b      	lsls	r3, r3, #8
 800cf40:	4972      	ldr	r1, [pc, #456]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf42:	4313      	orrs	r3, r2
 800cf44:	604b      	str	r3, [r1, #4]
 800cf46:	e025      	b.n	800cf94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cf48:	4b70      	ldr	r3, [pc, #448]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a6f      	ldr	r2, [pc, #444]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf4e:	f043 0308 	orr.w	r3, r3, #8
 800cf52:	6013      	str	r3, [r2, #0]
 800cf54:	4b6d      	ldr	r3, [pc, #436]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a1b      	ldr	r3, [r3, #32]
 800cf60:	496a      	ldr	r1, [pc, #424]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf62:	4313      	orrs	r3, r2
 800cf64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cf66:	4b69      	ldr	r3, [pc, #420]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	69db      	ldr	r3, [r3, #28]
 800cf72:	021b      	lsls	r3, r3, #8
 800cf74:	4965      	ldr	r1, [pc, #404]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf76:	4313      	orrs	r3, r2
 800cf78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d109      	bne.n	800cf94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6a1b      	ldr	r3, [r3, #32]
 800cf84:	4618      	mov	r0, r3
 800cf86:	f000 fd33 	bl	800d9f0 <RCC_SetFlashLatencyFromMSIRange>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	e34d      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cf94:	f000 fc36 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	4b5c      	ldr	r3, [pc, #368]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	091b      	lsrs	r3, r3, #4
 800cfa0:	f003 030f 	and.w	r3, r3, #15
 800cfa4:	495a      	ldr	r1, [pc, #360]	; (800d110 <HAL_RCC_OscConfig+0x29c>)
 800cfa6:	5ccb      	ldrb	r3, [r1, r3]
 800cfa8:	f003 031f 	and.w	r3, r3, #31
 800cfac:	fa22 f303 	lsr.w	r3, r2, r3
 800cfb0:	4a58      	ldr	r2, [pc, #352]	; (800d114 <HAL_RCC_OscConfig+0x2a0>)
 800cfb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800cfb4:	4b58      	ldr	r3, [pc, #352]	; (800d118 <HAL_RCC_OscConfig+0x2a4>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7f5 f999 	bl	80022f0 <HAL_InitTick>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d052      	beq.n	800d06e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
 800cfca:	e331      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	699b      	ldr	r3, [r3, #24]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d032      	beq.n	800d03a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800cfd4:	4b4d      	ldr	r3, [pc, #308]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a4c      	ldr	r2, [pc, #304]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cfda:	f043 0301 	orr.w	r3, r3, #1
 800cfde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800cfe0:	f7fe faca 	bl	800b578 <HAL_GetTick>
 800cfe4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cfe6:	e008      	b.n	800cffa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cfe8:	f7fe fac6 	bl	800b578 <HAL_GetTick>
 800cfec:	4602      	mov	r2, r0
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	2b02      	cmp	r3, #2
 800cff4:	d901      	bls.n	800cffa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800cff6:	2303      	movs	r3, #3
 800cff8:	e31a      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cffa:	4b44      	ldr	r3, [pc, #272]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f003 0302 	and.w	r3, r3, #2
 800d002:	2b00      	cmp	r3, #0
 800d004:	d0f0      	beq.n	800cfe8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d006:	4b41      	ldr	r3, [pc, #260]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a40      	ldr	r2, [pc, #256]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d00c:	f043 0308 	orr.w	r3, r3, #8
 800d010:	6013      	str	r3, [r2, #0]
 800d012:	4b3e      	ldr	r3, [pc, #248]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a1b      	ldr	r3, [r3, #32]
 800d01e:	493b      	ldr	r1, [pc, #236]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d020:	4313      	orrs	r3, r2
 800d022:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d024:	4b39      	ldr	r3, [pc, #228]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	69db      	ldr	r3, [r3, #28]
 800d030:	021b      	lsls	r3, r3, #8
 800d032:	4936      	ldr	r1, [pc, #216]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d034:	4313      	orrs	r3, r2
 800d036:	604b      	str	r3, [r1, #4]
 800d038:	e01a      	b.n	800d070 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d03a:	4b34      	ldr	r3, [pc, #208]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a33      	ldr	r2, [pc, #204]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d040:	f023 0301 	bic.w	r3, r3, #1
 800d044:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d046:	f7fe fa97 	bl	800b578 <HAL_GetTick>
 800d04a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d04c:	e008      	b.n	800d060 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d04e:	f7fe fa93 	bl	800b578 <HAL_GetTick>
 800d052:	4602      	mov	r2, r0
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	1ad3      	subs	r3, r2, r3
 800d058:	2b02      	cmp	r3, #2
 800d05a:	d901      	bls.n	800d060 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800d05c:	2303      	movs	r3, #3
 800d05e:	e2e7      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d060:	4b2a      	ldr	r3, [pc, #168]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f003 0302 	and.w	r3, r3, #2
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1f0      	bne.n	800d04e <HAL_RCC_OscConfig+0x1da>
 800d06c:	e000      	b.n	800d070 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d06e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f003 0301 	and.w	r3, r3, #1
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d074      	beq.n	800d166 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	2b08      	cmp	r3, #8
 800d080:	d005      	beq.n	800d08e <HAL_RCC_OscConfig+0x21a>
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	2b0c      	cmp	r3, #12
 800d086:	d10e      	bne.n	800d0a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d10b      	bne.n	800d0a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d08e:	4b1f      	ldr	r3, [pc, #124]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d096:	2b00      	cmp	r3, #0
 800d098:	d064      	beq.n	800d164 <HAL_RCC_OscConfig+0x2f0>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d160      	bne.n	800d164 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e2c4      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0ae:	d106      	bne.n	800d0be <HAL_RCC_OscConfig+0x24a>
 800d0b0:	4b16      	ldr	r3, [pc, #88]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a15      	ldr	r2, [pc, #84]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d0b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d0ba:	6013      	str	r3, [r2, #0]
 800d0bc:	e01d      	b.n	800d0fa <HAL_RCC_OscConfig+0x286>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d0c6:	d10c      	bne.n	800d0e2 <HAL_RCC_OscConfig+0x26e>
 800d0c8:	4b10      	ldr	r3, [pc, #64]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a0f      	ldr	r2, [pc, #60]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d0ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d0d2:	6013      	str	r3, [r2, #0]
 800d0d4:	4b0d      	ldr	r3, [pc, #52]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a0c      	ldr	r2, [pc, #48]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d0da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	e00b      	b.n	800d0fa <HAL_RCC_OscConfig+0x286>
 800d0e2:	4b0a      	ldr	r3, [pc, #40]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a09      	ldr	r2, [pc, #36]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d0e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	4b07      	ldr	r3, [pc, #28]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a06      	ldr	r2, [pc, #24]	; (800d10c <HAL_RCC_OscConfig+0x298>)
 800d0f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d0f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d01c      	beq.n	800d13c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d102:	f7fe fa39 	bl	800b578 <HAL_GetTick>
 800d106:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d108:	e011      	b.n	800d12e <HAL_RCC_OscConfig+0x2ba>
 800d10a:	bf00      	nop
 800d10c:	40021000 	.word	0x40021000
 800d110:	080164e0 	.word	0x080164e0
 800d114:	20000000 	.word	0x20000000
 800d118:	20000504 	.word	0x20000504
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d11c:	f7fe fa2c 	bl	800b578 <HAL_GetTick>
 800d120:	4602      	mov	r2, r0
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	2b64      	cmp	r3, #100	; 0x64
 800d128:	d901      	bls.n	800d12e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800d12a:	2303      	movs	r3, #3
 800d12c:	e280      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d12e:	4baf      	ldr	r3, [pc, #700]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d136:	2b00      	cmp	r3, #0
 800d138:	d0f0      	beq.n	800d11c <HAL_RCC_OscConfig+0x2a8>
 800d13a:	e014      	b.n	800d166 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d13c:	f7fe fa1c 	bl	800b578 <HAL_GetTick>
 800d140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d142:	e008      	b.n	800d156 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d144:	f7fe fa18 	bl	800b578 <HAL_GetTick>
 800d148:	4602      	mov	r2, r0
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	1ad3      	subs	r3, r2, r3
 800d14e:	2b64      	cmp	r3, #100	; 0x64
 800d150:	d901      	bls.n	800d156 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d152:	2303      	movs	r3, #3
 800d154:	e26c      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d156:	4ba5      	ldr	r3, [pc, #660]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1f0      	bne.n	800d144 <HAL_RCC_OscConfig+0x2d0>
 800d162:	e000      	b.n	800d166 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f003 0302 	and.w	r3, r3, #2
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d060      	beq.n	800d234 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	2b04      	cmp	r3, #4
 800d176:	d005      	beq.n	800d184 <HAL_RCC_OscConfig+0x310>
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	2b0c      	cmp	r3, #12
 800d17c:	d119      	bne.n	800d1b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	2b02      	cmp	r3, #2
 800d182:	d116      	bne.n	800d1b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d184:	4b99      	ldr	r3, [pc, #612]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d005      	beq.n	800d19c <HAL_RCC_OscConfig+0x328>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	e249      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d19c:	4b93      	ldr	r3, [pc, #588]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	061b      	lsls	r3, r3, #24
 800d1aa:	4990      	ldr	r1, [pc, #576]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d1b0:	e040      	b.n	800d234 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d023      	beq.n	800d202 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d1ba:	4b8c      	ldr	r3, [pc, #560]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a8b      	ldr	r2, [pc, #556]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d1c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1c6:	f7fe f9d7 	bl	800b578 <HAL_GetTick>
 800d1ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d1cc:	e008      	b.n	800d1e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d1ce:	f7fe f9d3 	bl	800b578 <HAL_GetTick>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	2b02      	cmp	r3, #2
 800d1da:	d901      	bls.n	800d1e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	e227      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d1e0:	4b82      	ldr	r3, [pc, #520]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d0f0      	beq.n	800d1ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1ec:	4b7f      	ldr	r3, [pc, #508]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	061b      	lsls	r3, r3, #24
 800d1fa:	497c      	ldr	r1, [pc, #496]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	604b      	str	r3, [r1, #4]
 800d200:	e018      	b.n	800d234 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d202:	4b7a      	ldr	r3, [pc, #488]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4a79      	ldr	r2, [pc, #484]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d20c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d20e:	f7fe f9b3 	bl	800b578 <HAL_GetTick>
 800d212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d214:	e008      	b.n	800d228 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d216:	f7fe f9af 	bl	800b578 <HAL_GetTick>
 800d21a:	4602      	mov	r2, r0
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	2b02      	cmp	r3, #2
 800d222:	d901      	bls.n	800d228 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800d224:	2303      	movs	r3, #3
 800d226:	e203      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d228:	4b70      	ldr	r3, [pc, #448]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1f0      	bne.n	800d216 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 0308 	and.w	r3, r3, #8
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d03c      	beq.n	800d2ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	695b      	ldr	r3, [r3, #20]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d01c      	beq.n	800d282 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d248:	4b68      	ldr	r3, [pc, #416]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d24a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d24e:	4a67      	ldr	r2, [pc, #412]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d250:	f043 0301 	orr.w	r3, r3, #1
 800d254:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d258:	f7fe f98e 	bl	800b578 <HAL_GetTick>
 800d25c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d25e:	e008      	b.n	800d272 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d260:	f7fe f98a 	bl	800b578 <HAL_GetTick>
 800d264:	4602      	mov	r2, r0
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	2b02      	cmp	r3, #2
 800d26c:	d901      	bls.n	800d272 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800d26e:	2303      	movs	r3, #3
 800d270:	e1de      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d272:	4b5e      	ldr	r3, [pc, #376]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d278:	f003 0302 	and.w	r3, r3, #2
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d0ef      	beq.n	800d260 <HAL_RCC_OscConfig+0x3ec>
 800d280:	e01b      	b.n	800d2ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d282:	4b5a      	ldr	r3, [pc, #360]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d288:	4a58      	ldr	r2, [pc, #352]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d28a:	f023 0301 	bic.w	r3, r3, #1
 800d28e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d292:	f7fe f971 	bl	800b578 <HAL_GetTick>
 800d296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d298:	e008      	b.n	800d2ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d29a:	f7fe f96d 	bl	800b578 <HAL_GetTick>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	2b02      	cmp	r3, #2
 800d2a6:	d901      	bls.n	800d2ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800d2a8:	2303      	movs	r3, #3
 800d2aa:	e1c1      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d2ac:	4b4f      	ldr	r3, [pc, #316]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d2ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d2b2:	f003 0302 	and.w	r3, r3, #2
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1ef      	bne.n	800d29a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f003 0304 	and.w	r3, r3, #4
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f000 80a6 	beq.w	800d414 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800d2cc:	4b47      	ldr	r3, [pc, #284]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d2ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10d      	bne.n	800d2f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d2d8:	4b44      	ldr	r3, [pc, #272]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d2da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2dc:	4a43      	ldr	r2, [pc, #268]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d2de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2e2:	6593      	str	r3, [r2, #88]	; 0x58
 800d2e4:	4b41      	ldr	r3, [pc, #260]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d2e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2ec:	60bb      	str	r3, [r7, #8]
 800d2ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d2f4:	4b3e      	ldr	r3, [pc, #248]	; (800d3f0 <HAL_RCC_OscConfig+0x57c>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d118      	bne.n	800d332 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d300:	4b3b      	ldr	r3, [pc, #236]	; (800d3f0 <HAL_RCC_OscConfig+0x57c>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a3a      	ldr	r2, [pc, #232]	; (800d3f0 <HAL_RCC_OscConfig+0x57c>)
 800d306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d30a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d30c:	f7fe f934 	bl	800b578 <HAL_GetTick>
 800d310:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d312:	e008      	b.n	800d326 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d314:	f7fe f930 	bl	800b578 <HAL_GetTick>
 800d318:	4602      	mov	r2, r0
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	2b02      	cmp	r3, #2
 800d320:	d901      	bls.n	800d326 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800d322:	2303      	movs	r3, #3
 800d324:	e184      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d326:	4b32      	ldr	r3, [pc, #200]	; (800d3f0 <HAL_RCC_OscConfig+0x57c>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d0f0      	beq.n	800d314 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	2b01      	cmp	r3, #1
 800d338:	d108      	bne.n	800d34c <HAL_RCC_OscConfig+0x4d8>
 800d33a:	4b2c      	ldr	r3, [pc, #176]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d340:	4a2a      	ldr	r2, [pc, #168]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d342:	f043 0301 	orr.w	r3, r3, #1
 800d346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d34a:	e024      	b.n	800d396 <HAL_RCC_OscConfig+0x522>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	2b05      	cmp	r3, #5
 800d352:	d110      	bne.n	800d376 <HAL_RCC_OscConfig+0x502>
 800d354:	4b25      	ldr	r3, [pc, #148]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d35a:	4a24      	ldr	r2, [pc, #144]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d35c:	f043 0304 	orr.w	r3, r3, #4
 800d360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d364:	4b21      	ldr	r3, [pc, #132]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d36a:	4a20      	ldr	r2, [pc, #128]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d36c:	f043 0301 	orr.w	r3, r3, #1
 800d370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d374:	e00f      	b.n	800d396 <HAL_RCC_OscConfig+0x522>
 800d376:	4b1d      	ldr	r3, [pc, #116]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d37c:	4a1b      	ldr	r2, [pc, #108]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d37e:	f023 0301 	bic.w	r3, r3, #1
 800d382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d386:	4b19      	ldr	r3, [pc, #100]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d38c:	4a17      	ldr	r2, [pc, #92]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d38e:	f023 0304 	bic.w	r3, r3, #4
 800d392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d016      	beq.n	800d3cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d39e:	f7fe f8eb 	bl	800b578 <HAL_GetTick>
 800d3a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d3a4:	e00a      	b.n	800d3bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3a6:	f7fe f8e7 	bl	800b578 <HAL_GetTick>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d901      	bls.n	800d3bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800d3b8:	2303      	movs	r3, #3
 800d3ba:	e139      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d3bc:	4b0b      	ldr	r3, [pc, #44]	; (800d3ec <HAL_RCC_OscConfig+0x578>)
 800d3be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3c2:	f003 0302 	and.w	r3, r3, #2
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d0ed      	beq.n	800d3a6 <HAL_RCC_OscConfig+0x532>
 800d3ca:	e01a      	b.n	800d402 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3cc:	f7fe f8d4 	bl	800b578 <HAL_GetTick>
 800d3d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d3d2:	e00f      	b.n	800d3f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3d4:	f7fe f8d0 	bl	800b578 <HAL_GetTick>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d906      	bls.n	800d3f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	e122      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
 800d3ea:	bf00      	nop
 800d3ec:	40021000 	.word	0x40021000
 800d3f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d3f4:	4b90      	ldr	r3, [pc, #576]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3fa:	f003 0302 	and.w	r3, r3, #2
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1e8      	bne.n	800d3d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d402:	7ffb      	ldrb	r3, [r7, #31]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d105      	bne.n	800d414 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d408:	4b8b      	ldr	r3, [pc, #556]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d40a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d40c:	4a8a      	ldr	r2, [pc, #552]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d40e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d412:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f000 8108 	beq.w	800d62e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d422:	2b02      	cmp	r3, #2
 800d424:	f040 80d0 	bne.w	800d5c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800d428:	4b83      	ldr	r3, [pc, #524]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	f003 0203 	and.w	r2, r3, #3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d438:	429a      	cmp	r2, r3
 800d43a:	d130      	bne.n	800d49e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d446:	3b01      	subs	r3, #1
 800d448:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d127      	bne.n	800d49e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d458:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d11f      	bne.n	800d49e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d468:	2a07      	cmp	r2, #7
 800d46a:	bf14      	ite	ne
 800d46c:	2201      	movne	r2, #1
 800d46e:	2200      	moveq	r2, #0
 800d470:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d472:	4293      	cmp	r3, r2
 800d474:	d113      	bne.n	800d49e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d480:	085b      	lsrs	r3, r3, #1
 800d482:	3b01      	subs	r3, #1
 800d484:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d486:	429a      	cmp	r2, r3
 800d488:	d109      	bne.n	800d49e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d494:	085b      	lsrs	r3, r3, #1
 800d496:	3b01      	subs	r3, #1
 800d498:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d06e      	beq.n	800d57c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	2b0c      	cmp	r3, #12
 800d4a2:	d069      	beq.n	800d578 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d4a4:	4b64      	ldr	r3, [pc, #400]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d105      	bne.n	800d4bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800d4b0:	4b61      	ldr	r3, [pc, #388]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e0b7      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d4c0:	4b5d      	ldr	r3, [pc, #372]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a5c      	ldr	r2, [pc, #368]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d4c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d4ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d4cc:	f7fe f854 	bl	800b578 <HAL_GetTick>
 800d4d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d4d2:	e008      	b.n	800d4e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d4d4:	f7fe f850 	bl	800b578 <HAL_GetTick>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	1ad3      	subs	r3, r2, r3
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	d901      	bls.n	800d4e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800d4e2:	2303      	movs	r3, #3
 800d4e4:	e0a4      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d4e6:	4b54      	ldr	r3, [pc, #336]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1f0      	bne.n	800d4d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d4f2:	4b51      	ldr	r3, [pc, #324]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d4f4:	68da      	ldr	r2, [r3, #12]
 800d4f6:	4b51      	ldr	r3, [pc, #324]	; (800d63c <HAL_RCC_OscConfig+0x7c8>)
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d502:	3a01      	subs	r2, #1
 800d504:	0112      	lsls	r2, r2, #4
 800d506:	4311      	orrs	r1, r2
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d50c:	0212      	lsls	r2, r2, #8
 800d50e:	4311      	orrs	r1, r2
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d514:	0852      	lsrs	r2, r2, #1
 800d516:	3a01      	subs	r2, #1
 800d518:	0552      	lsls	r2, r2, #21
 800d51a:	4311      	orrs	r1, r2
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d520:	0852      	lsrs	r2, r2, #1
 800d522:	3a01      	subs	r2, #1
 800d524:	0652      	lsls	r2, r2, #25
 800d526:	4311      	orrs	r1, r2
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d52c:	0912      	lsrs	r2, r2, #4
 800d52e:	0452      	lsls	r2, r2, #17
 800d530:	430a      	orrs	r2, r1
 800d532:	4941      	ldr	r1, [pc, #260]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d534:	4313      	orrs	r3, r2
 800d536:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d538:	4b3f      	ldr	r3, [pc, #252]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a3e      	ldr	r2, [pc, #248]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d53e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d542:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d544:	4b3c      	ldr	r3, [pc, #240]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	4a3b      	ldr	r2, [pc, #236]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d54a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d54e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d550:	f7fe f812 	bl	800b578 <HAL_GetTick>
 800d554:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d556:	e008      	b.n	800d56a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d558:	f7fe f80e 	bl	800b578 <HAL_GetTick>
 800d55c:	4602      	mov	r2, r0
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	2b02      	cmp	r3, #2
 800d564:	d901      	bls.n	800d56a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800d566:	2303      	movs	r3, #3
 800d568:	e062      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d56a:	4b33      	ldr	r3, [pc, #204]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d572:	2b00      	cmp	r3, #0
 800d574:	d0f0      	beq.n	800d558 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d576:	e05a      	b.n	800d62e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d578:	2301      	movs	r3, #1
 800d57a:	e059      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d57c:	4b2e      	ldr	r3, [pc, #184]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d152      	bne.n	800d62e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d588:	4b2b      	ldr	r3, [pc, #172]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a2a      	ldr	r2, [pc, #168]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d58e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d592:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d594:	4b28      	ldr	r3, [pc, #160]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	4a27      	ldr	r2, [pc, #156]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d59a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d59e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d5a0:	f7fd ffea 	bl	800b578 <HAL_GetTick>
 800d5a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d5a6:	e008      	b.n	800d5ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5a8:	f7fd ffe6 	bl	800b578 <HAL_GetTick>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d901      	bls.n	800d5ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	e03a      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d5ba:	4b1f      	ldr	r3, [pc, #124]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d0f0      	beq.n	800d5a8 <HAL_RCC_OscConfig+0x734>
 800d5c6:	e032      	b.n	800d62e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	2b0c      	cmp	r3, #12
 800d5cc:	d02d      	beq.n	800d62a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5ce:	4b1a      	ldr	r3, [pc, #104]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a19      	ldr	r2, [pc, #100]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d5d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d5d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800d5da:	4b17      	ldr	r3, [pc, #92]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d105      	bne.n	800d5f2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d5e6:	4b14      	ldr	r3, [pc, #80]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	4a13      	ldr	r2, [pc, #76]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d5ec:	f023 0303 	bic.w	r3, r3, #3
 800d5f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800d5f2:	4b11      	ldr	r3, [pc, #68]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	4a10      	ldr	r2, [pc, #64]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d5f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d5fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d600:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d602:	f7fd ffb9 	bl	800b578 <HAL_GetTick>
 800d606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d608:	e008      	b.n	800d61c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d60a:	f7fd ffb5 	bl	800b578 <HAL_GetTick>
 800d60e:	4602      	mov	r2, r0
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	2b02      	cmp	r3, #2
 800d616:	d901      	bls.n	800d61c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800d618:	2303      	movs	r3, #3
 800d61a:	e009      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d61c:	4b06      	ldr	r3, [pc, #24]	; (800d638 <HAL_RCC_OscConfig+0x7c4>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1f0      	bne.n	800d60a <HAL_RCC_OscConfig+0x796>
 800d628:	e001      	b.n	800d62e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	e000      	b.n	800d630 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	3720      	adds	r7, #32
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	40021000 	.word	0x40021000
 800d63c:	f99d808c 	.word	0xf99d808c

0800d640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d101      	bne.n	800d654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e0c8      	b.n	800d7e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d654:	4b66      	ldr	r3, [pc, #408]	; (800d7f0 <HAL_RCC_ClockConfig+0x1b0>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f003 0307 	and.w	r3, r3, #7
 800d65c:	683a      	ldr	r2, [r7, #0]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d910      	bls.n	800d684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d662:	4b63      	ldr	r3, [pc, #396]	; (800d7f0 <HAL_RCC_ClockConfig+0x1b0>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f023 0207 	bic.w	r2, r3, #7
 800d66a:	4961      	ldr	r1, [pc, #388]	; (800d7f0 <HAL_RCC_ClockConfig+0x1b0>)
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	4313      	orrs	r3, r2
 800d670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d672:	4b5f      	ldr	r3, [pc, #380]	; (800d7f0 <HAL_RCC_ClockConfig+0x1b0>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f003 0307 	and.w	r3, r3, #7
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d001      	beq.n	800d684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	e0b0      	b.n	800d7e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d04c      	beq.n	800d72a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	2b03      	cmp	r3, #3
 800d696:	d107      	bne.n	800d6a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d698:	4b56      	ldr	r3, [pc, #344]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d121      	bne.n	800d6e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e09e      	b.n	800d7e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d107      	bne.n	800d6c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d6b0:	4b50      	ldr	r3, [pc, #320]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d115      	bne.n	800d6e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e092      	b.n	800d7e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d107      	bne.n	800d6d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d6c8:	4b4a      	ldr	r3, [pc, #296]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f003 0302 	and.w	r3, r3, #2
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d109      	bne.n	800d6e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e086      	b.n	800d7e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d6d8:	4b46      	ldr	r3, [pc, #280]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d101      	bne.n	800d6e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e07e      	b.n	800d7e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d6e8:	4b42      	ldr	r3, [pc, #264]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	f023 0203 	bic.w	r2, r3, #3
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	493f      	ldr	r1, [pc, #252]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6fa:	f7fd ff3d 	bl	800b578 <HAL_GetTick>
 800d6fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d700:	e00a      	b.n	800d718 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d702:	f7fd ff39 	bl	800b578 <HAL_GetTick>
 800d706:	4602      	mov	r2, r0
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d710:	4293      	cmp	r3, r2
 800d712:	d901      	bls.n	800d718 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800d714:	2303      	movs	r3, #3
 800d716:	e066      	b.n	800d7e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d718:	4b36      	ldr	r3, [pc, #216]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	f003 020c 	and.w	r2, r3, #12
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	429a      	cmp	r2, r3
 800d728:	d1eb      	bne.n	800d702 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f003 0302 	and.w	r3, r3, #2
 800d732:	2b00      	cmp	r3, #0
 800d734:	d008      	beq.n	800d748 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d736:	4b2f      	ldr	r3, [pc, #188]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	492c      	ldr	r1, [pc, #176]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d744:	4313      	orrs	r3, r2
 800d746:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d748:	4b29      	ldr	r3, [pc, #164]	; (800d7f0 <HAL_RCC_ClockConfig+0x1b0>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f003 0307 	and.w	r3, r3, #7
 800d750:	683a      	ldr	r2, [r7, #0]
 800d752:	429a      	cmp	r2, r3
 800d754:	d210      	bcs.n	800d778 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d756:	4b26      	ldr	r3, [pc, #152]	; (800d7f0 <HAL_RCC_ClockConfig+0x1b0>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f023 0207 	bic.w	r2, r3, #7
 800d75e:	4924      	ldr	r1, [pc, #144]	; (800d7f0 <HAL_RCC_ClockConfig+0x1b0>)
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	4313      	orrs	r3, r2
 800d764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d766:	4b22      	ldr	r3, [pc, #136]	; (800d7f0 <HAL_RCC_ClockConfig+0x1b0>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f003 0307 	and.w	r3, r3, #7
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	429a      	cmp	r2, r3
 800d772:	d001      	beq.n	800d778 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800d774:	2301      	movs	r3, #1
 800d776:	e036      	b.n	800d7e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f003 0304 	and.w	r3, r3, #4
 800d780:	2b00      	cmp	r3, #0
 800d782:	d008      	beq.n	800d796 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d784:	4b1b      	ldr	r3, [pc, #108]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	4918      	ldr	r1, [pc, #96]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d792:	4313      	orrs	r3, r2
 800d794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f003 0308 	and.w	r3, r3, #8
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d009      	beq.n	800d7b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d7a2:	4b14      	ldr	r3, [pc, #80]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	691b      	ldr	r3, [r3, #16]
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	4910      	ldr	r1, [pc, #64]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d7b6:	f000 f825 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	; (800d7f4 <HAL_RCC_ClockConfig+0x1b4>)
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	091b      	lsrs	r3, r3, #4
 800d7c2:	f003 030f 	and.w	r3, r3, #15
 800d7c6:	490c      	ldr	r1, [pc, #48]	; (800d7f8 <HAL_RCC_ClockConfig+0x1b8>)
 800d7c8:	5ccb      	ldrb	r3, [r1, r3]
 800d7ca:	f003 031f 	and.w	r3, r3, #31
 800d7ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d7d2:	4a0a      	ldr	r2, [pc, #40]	; (800d7fc <HAL_RCC_ClockConfig+0x1bc>)
 800d7d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d7d6:	4b0a      	ldr	r3, [pc, #40]	; (800d800 <HAL_RCC_ClockConfig+0x1c0>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7f4 fd88 	bl	80022f0 <HAL_InitTick>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	72fb      	strb	r3, [r7, #11]

  return status;
 800d7e4:	7afb      	ldrb	r3, [r7, #11]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	40022000 	.word	0x40022000
 800d7f4:	40021000 	.word	0x40021000
 800d7f8:	080164e0 	.word	0x080164e0
 800d7fc:	20000000 	.word	0x20000000
 800d800:	20000504 	.word	0x20000504

0800d804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d804:	b480      	push	{r7}
 800d806:	b089      	sub	sp, #36	; 0x24
 800d808:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d80a:	2300      	movs	r3, #0
 800d80c:	61fb      	str	r3, [r7, #28]
 800d80e:	2300      	movs	r3, #0
 800d810:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d812:	4b3e      	ldr	r3, [pc, #248]	; (800d90c <HAL_RCC_GetSysClockFreq+0x108>)
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	f003 030c 	and.w	r3, r3, #12
 800d81a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d81c:	4b3b      	ldr	r3, [pc, #236]	; (800d90c <HAL_RCC_GetSysClockFreq+0x108>)
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	f003 0303 	and.w	r3, r3, #3
 800d824:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d005      	beq.n	800d838 <HAL_RCC_GetSysClockFreq+0x34>
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	2b0c      	cmp	r3, #12
 800d830:	d121      	bne.n	800d876 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d11e      	bne.n	800d876 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d838:	4b34      	ldr	r3, [pc, #208]	; (800d90c <HAL_RCC_GetSysClockFreq+0x108>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f003 0308 	and.w	r3, r3, #8
 800d840:	2b00      	cmp	r3, #0
 800d842:	d107      	bne.n	800d854 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d844:	4b31      	ldr	r3, [pc, #196]	; (800d90c <HAL_RCC_GetSysClockFreq+0x108>)
 800d846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d84a:	0a1b      	lsrs	r3, r3, #8
 800d84c:	f003 030f 	and.w	r3, r3, #15
 800d850:	61fb      	str	r3, [r7, #28]
 800d852:	e005      	b.n	800d860 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d854:	4b2d      	ldr	r3, [pc, #180]	; (800d90c <HAL_RCC_GetSysClockFreq+0x108>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	091b      	lsrs	r3, r3, #4
 800d85a:	f003 030f 	and.w	r3, r3, #15
 800d85e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d860:	4a2b      	ldr	r2, [pc, #172]	; (800d910 <HAL_RCC_GetSysClockFreq+0x10c>)
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d868:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d10d      	bne.n	800d88c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d874:	e00a      	b.n	800d88c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	2b04      	cmp	r3, #4
 800d87a:	d102      	bne.n	800d882 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d87c:	4b25      	ldr	r3, [pc, #148]	; (800d914 <HAL_RCC_GetSysClockFreq+0x110>)
 800d87e:	61bb      	str	r3, [r7, #24]
 800d880:	e004      	b.n	800d88c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	2b08      	cmp	r3, #8
 800d886:	d101      	bne.n	800d88c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d888:	4b23      	ldr	r3, [pc, #140]	; (800d918 <HAL_RCC_GetSysClockFreq+0x114>)
 800d88a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	2b0c      	cmp	r3, #12
 800d890:	d134      	bne.n	800d8fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d892:	4b1e      	ldr	r3, [pc, #120]	; (800d90c <HAL_RCC_GetSysClockFreq+0x108>)
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	f003 0303 	and.w	r3, r3, #3
 800d89a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d003      	beq.n	800d8aa <HAL_RCC_GetSysClockFreq+0xa6>
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	2b03      	cmp	r3, #3
 800d8a6:	d003      	beq.n	800d8b0 <HAL_RCC_GetSysClockFreq+0xac>
 800d8a8:	e005      	b.n	800d8b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d8aa:	4b1a      	ldr	r3, [pc, #104]	; (800d914 <HAL_RCC_GetSysClockFreq+0x110>)
 800d8ac:	617b      	str	r3, [r7, #20]
      break;
 800d8ae:	e005      	b.n	800d8bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d8b0:	4b19      	ldr	r3, [pc, #100]	; (800d918 <HAL_RCC_GetSysClockFreq+0x114>)
 800d8b2:	617b      	str	r3, [r7, #20]
      break;
 800d8b4:	e002      	b.n	800d8bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	617b      	str	r3, [r7, #20]
      break;
 800d8ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d8bc:	4b13      	ldr	r3, [pc, #76]	; (800d90c <HAL_RCC_GetSysClockFreq+0x108>)
 800d8be:	68db      	ldr	r3, [r3, #12]
 800d8c0:	091b      	lsrs	r3, r3, #4
 800d8c2:	f003 0307 	and.w	r3, r3, #7
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d8ca:	4b10      	ldr	r3, [pc, #64]	; (800d90c <HAL_RCC_GetSysClockFreq+0x108>)
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	0a1b      	lsrs	r3, r3, #8
 800d8d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8d4:	697a      	ldr	r2, [r7, #20]
 800d8d6:	fb02 f203 	mul.w	r2, r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d8e2:	4b0a      	ldr	r3, [pc, #40]	; (800d90c <HAL_RCC_GetSysClockFreq+0x108>)
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	0e5b      	lsrs	r3, r3, #25
 800d8e8:	f003 0303 	and.w	r3, r3, #3
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	005b      	lsls	r3, r3, #1
 800d8f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d8f2:	697a      	ldr	r2, [r7, #20]
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d8fc:	69bb      	ldr	r3, [r7, #24]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3724      	adds	r7, #36	; 0x24
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	40021000 	.word	0x40021000
 800d910:	080164f8 	.word	0x080164f8
 800d914:	00f42400 	.word	0x00f42400
 800d918:	007a1200 	.word	0x007a1200

0800d91c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d91c:	b480      	push	{r7}
 800d91e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d920:	4b03      	ldr	r3, [pc, #12]	; (800d930 <HAL_RCC_GetHCLKFreq+0x14>)
 800d922:	681b      	ldr	r3, [r3, #0]
}
 800d924:	4618      	mov	r0, r3
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	20000000 	.word	0x20000000

0800d934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d938:	f7ff fff0 	bl	800d91c <HAL_RCC_GetHCLKFreq>
 800d93c:	4602      	mov	r2, r0
 800d93e:	4b06      	ldr	r3, [pc, #24]	; (800d958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	0a1b      	lsrs	r3, r3, #8
 800d944:	f003 0307 	and.w	r3, r3, #7
 800d948:	4904      	ldr	r1, [pc, #16]	; (800d95c <HAL_RCC_GetPCLK1Freq+0x28>)
 800d94a:	5ccb      	ldrb	r3, [r1, r3]
 800d94c:	f003 031f 	and.w	r3, r3, #31
 800d950:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d954:	4618      	mov	r0, r3
 800d956:	bd80      	pop	{r7, pc}
 800d958:	40021000 	.word	0x40021000
 800d95c:	080164f0 	.word	0x080164f0

0800d960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d964:	f7ff ffda 	bl	800d91c <HAL_RCC_GetHCLKFreq>
 800d968:	4602      	mov	r2, r0
 800d96a:	4b06      	ldr	r3, [pc, #24]	; (800d984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	0adb      	lsrs	r3, r3, #11
 800d970:	f003 0307 	and.w	r3, r3, #7
 800d974:	4904      	ldr	r1, [pc, #16]	; (800d988 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d976:	5ccb      	ldrb	r3, [r1, r3]
 800d978:	f003 031f 	and.w	r3, r3, #31
 800d97c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d980:	4618      	mov	r0, r3
 800d982:	bd80      	pop	{r7, pc}
 800d984:	40021000 	.word	0x40021000
 800d988:	080164f0 	.word	0x080164f0

0800d98c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	220f      	movs	r2, #15
 800d99a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800d99c:	4b12      	ldr	r3, [pc, #72]	; (800d9e8 <HAL_RCC_GetClockConfig+0x5c>)
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	f003 0203 	and.w	r2, r3, #3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800d9a8:	4b0f      	ldr	r3, [pc, #60]	; (800d9e8 <HAL_RCC_GetClockConfig+0x5c>)
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800d9b4:	4b0c      	ldr	r3, [pc, #48]	; (800d9e8 <HAL_RCC_GetClockConfig+0x5c>)
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800d9c0:	4b09      	ldr	r3, [pc, #36]	; (800d9e8 <HAL_RCC_GetClockConfig+0x5c>)
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	08db      	lsrs	r3, r3, #3
 800d9c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d9ce:	4b07      	ldr	r3, [pc, #28]	; (800d9ec <HAL_RCC_GetClockConfig+0x60>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f003 0207 	and.w	r2, r3, #7
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	601a      	str	r2, [r3, #0]
}
 800d9da:	bf00      	nop
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	40021000 	.word	0x40021000
 800d9ec:	40022000 	.word	0x40022000

0800d9f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b086      	sub	sp, #24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d9fc:	4b2a      	ldr	r3, [pc, #168]	; (800daa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d9fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da04:	2b00      	cmp	r3, #0
 800da06:	d003      	beq.n	800da10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800da08:	f7ff f9d0 	bl	800cdac <HAL_PWREx_GetVoltageRange>
 800da0c:	6178      	str	r0, [r7, #20]
 800da0e:	e014      	b.n	800da3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800da10:	4b25      	ldr	r3, [pc, #148]	; (800daa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800da12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da14:	4a24      	ldr	r2, [pc, #144]	; (800daa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800da16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da1a:	6593      	str	r3, [r2, #88]	; 0x58
 800da1c:	4b22      	ldr	r3, [pc, #136]	; (800daa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800da1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da24:	60fb      	str	r3, [r7, #12]
 800da26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800da28:	f7ff f9c0 	bl	800cdac <HAL_PWREx_GetVoltageRange>
 800da2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800da2e:	4b1e      	ldr	r3, [pc, #120]	; (800daa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800da30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da32:	4a1d      	ldr	r2, [pc, #116]	; (800daa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800da34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da40:	d10b      	bne.n	800da5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2b80      	cmp	r3, #128	; 0x80
 800da46:	d919      	bls.n	800da7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2ba0      	cmp	r3, #160	; 0xa0
 800da4c:	d902      	bls.n	800da54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800da4e:	2302      	movs	r3, #2
 800da50:	613b      	str	r3, [r7, #16]
 800da52:	e013      	b.n	800da7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800da54:	2301      	movs	r3, #1
 800da56:	613b      	str	r3, [r7, #16]
 800da58:	e010      	b.n	800da7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2b80      	cmp	r3, #128	; 0x80
 800da5e:	d902      	bls.n	800da66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800da60:	2303      	movs	r3, #3
 800da62:	613b      	str	r3, [r7, #16]
 800da64:	e00a      	b.n	800da7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2b80      	cmp	r3, #128	; 0x80
 800da6a:	d102      	bne.n	800da72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800da6c:	2302      	movs	r3, #2
 800da6e:	613b      	str	r3, [r7, #16]
 800da70:	e004      	b.n	800da7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2b70      	cmp	r3, #112	; 0x70
 800da76:	d101      	bne.n	800da7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800da78:	2301      	movs	r3, #1
 800da7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800da7c:	4b0b      	ldr	r3, [pc, #44]	; (800daac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f023 0207 	bic.w	r2, r3, #7
 800da84:	4909      	ldr	r1, [pc, #36]	; (800daac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	4313      	orrs	r3, r2
 800da8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800da8c:	4b07      	ldr	r3, [pc, #28]	; (800daac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f003 0307 	and.w	r3, r3, #7
 800da94:	693a      	ldr	r2, [r7, #16]
 800da96:	429a      	cmp	r2, r3
 800da98:	d001      	beq.n	800da9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	e000      	b.n	800daa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3718      	adds	r7, #24
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	40021000 	.word	0x40021000
 800daac:	40022000 	.word	0x40022000

0800dab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dab8:	2300      	movs	r3, #0
 800daba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dabc:	2300      	movs	r3, #0
 800dabe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d041      	beq.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dad0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800dad4:	d02a      	beq.n	800db2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800dad6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800dada:	d824      	bhi.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800dadc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dae0:	d008      	beq.n	800daf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800dae2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dae6:	d81e      	bhi.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d00a      	beq.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800daec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800daf0:	d010      	beq.n	800db14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800daf2:	e018      	b.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800daf4:	4b86      	ldr	r3, [pc, #536]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	4a85      	ldr	r2, [pc, #532]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dafa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dafe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800db00:	e015      	b.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	3304      	adds	r3, #4
 800db06:	2100      	movs	r1, #0
 800db08:	4618      	mov	r0, r3
 800db0a:	f001 f835 	bl	800eb78 <RCCEx_PLLSAI1_Config>
 800db0e:	4603      	mov	r3, r0
 800db10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800db12:	e00c      	b.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	3320      	adds	r3, #32
 800db18:	2100      	movs	r1, #0
 800db1a:	4618      	mov	r0, r3
 800db1c:	f001 f920 	bl	800ed60 <RCCEx_PLLSAI2_Config>
 800db20:	4603      	mov	r3, r0
 800db22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800db24:	e003      	b.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	74fb      	strb	r3, [r7, #19]
      break;
 800db2a:	e000      	b.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800db2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800db2e:	7cfb      	ldrb	r3, [r7, #19]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d10b      	bne.n	800db4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800db34:	4b76      	ldr	r3, [pc, #472]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800db36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db42:	4973      	ldr	r1, [pc, #460]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800db44:	4313      	orrs	r3, r2
 800db46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800db4a:	e001      	b.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db4c:	7cfb      	ldrb	r3, [r7, #19]
 800db4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d041      	beq.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800db64:	d02a      	beq.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800db66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800db6a:	d824      	bhi.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800db6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db70:	d008      	beq.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800db72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db76:	d81e      	bhi.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00a      	beq.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800db7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800db80:	d010      	beq.n	800dba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800db82:	e018      	b.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800db84:	4b62      	ldr	r3, [pc, #392]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	4a61      	ldr	r2, [pc, #388]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800db8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800db90:	e015      	b.n	800dbbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	3304      	adds	r3, #4
 800db96:	2100      	movs	r1, #0
 800db98:	4618      	mov	r0, r3
 800db9a:	f000 ffed 	bl	800eb78 <RCCEx_PLLSAI1_Config>
 800db9e:	4603      	mov	r3, r0
 800dba0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800dba2:	e00c      	b.n	800dbbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	3320      	adds	r3, #32
 800dba8:	2100      	movs	r1, #0
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f001 f8d8 	bl	800ed60 <RCCEx_PLLSAI2_Config>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800dbb4:	e003      	b.n	800dbbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	74fb      	strb	r3, [r7, #19]
      break;
 800dbba:	e000      	b.n	800dbbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800dbbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dbbe:	7cfb      	ldrb	r3, [r7, #19]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d10b      	bne.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800dbc4:	4b52      	ldr	r3, [pc, #328]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dbc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbd2:	494f      	ldr	r1, [pc, #316]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800dbda:	e001      	b.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbdc:	7cfb      	ldrb	r3, [r7, #19]
 800dbde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f000 80a0 	beq.w	800dd2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800dbf2:	4b47      	ldr	r3, [pc, #284]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dbf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d101      	bne.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e000      	b.n	800dc04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800dc02:	2300      	movs	r3, #0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d00d      	beq.n	800dc24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dc08:	4b41      	ldr	r3, [pc, #260]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc0c:	4a40      	ldr	r2, [pc, #256]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc12:	6593      	str	r3, [r2, #88]	; 0x58
 800dc14:	4b3e      	ldr	r3, [pc, #248]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc1c:	60bb      	str	r3, [r7, #8]
 800dc1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dc20:	2301      	movs	r3, #1
 800dc22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dc24:	4b3b      	ldr	r3, [pc, #236]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a3a      	ldr	r2, [pc, #232]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800dc2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dc30:	f7fd fca2 	bl	800b578 <HAL_GetTick>
 800dc34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800dc36:	e009      	b.n	800dc4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dc38:	f7fd fc9e 	bl	800b578 <HAL_GetTick>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	d902      	bls.n	800dc4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800dc46:	2303      	movs	r3, #3
 800dc48:	74fb      	strb	r3, [r7, #19]
        break;
 800dc4a:	e005      	b.n	800dc58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800dc4c:	4b31      	ldr	r3, [pc, #196]	; (800dd14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d0ef      	beq.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800dc58:	7cfb      	ldrb	r3, [r7, #19]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d15c      	bne.n	800dd18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800dc5e:	4b2c      	ldr	r3, [pc, #176]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d01f      	beq.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d019      	beq.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800dc7c:	4b24      	ldr	r3, [pc, #144]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dc88:	4b21      	ldr	r3, [pc, #132]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc8e:	4a20      	ldr	r2, [pc, #128]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dc98:	4b1d      	ldr	r3, [pc, #116]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc9e:	4a1c      	ldr	r2, [pc, #112]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800dca8:	4a19      	ldr	r2, [pc, #100]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	f003 0301 	and.w	r3, r3, #1
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d016      	beq.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcba:	f7fd fc5d 	bl	800b578 <HAL_GetTick>
 800dcbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dcc0:	e00b      	b.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dcc2:	f7fd fc59 	bl	800b578 <HAL_GetTick>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	1ad3      	subs	r3, r2, r3
 800dccc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d902      	bls.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800dcd4:	2303      	movs	r3, #3
 800dcd6:	74fb      	strb	r3, [r7, #19]
            break;
 800dcd8:	e006      	b.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dcda:	4b0d      	ldr	r3, [pc, #52]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dcdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dce0:	f003 0302 	and.w	r3, r3, #2
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d0ec      	beq.n	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800dce8:	7cfb      	ldrb	r3, [r7, #19]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d10c      	bne.n	800dd08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dcee:	4b08      	ldr	r3, [pc, #32]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dcf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcfe:	4904      	ldr	r1, [pc, #16]	; (800dd10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dd00:	4313      	orrs	r3, r2
 800dd02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800dd06:	e009      	b.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dd08:	7cfb      	ldrb	r3, [r7, #19]
 800dd0a:	74bb      	strb	r3, [r7, #18]
 800dd0c:	e006      	b.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800dd0e:	bf00      	nop
 800dd10:	40021000 	.word	0x40021000
 800dd14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd18:	7cfb      	ldrb	r3, [r7, #19]
 800dd1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dd1c:	7c7b      	ldrb	r3, [r7, #17]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d105      	bne.n	800dd2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dd22:	4b9e      	ldr	r3, [pc, #632]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd26:	4a9d      	ldr	r2, [pc, #628]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d00a      	beq.n	800dd50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dd3a:	4b98      	ldr	r3, [pc, #608]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd40:	f023 0203 	bic.w	r2, r3, #3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd48:	4994      	ldr	r1, [pc, #592]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f003 0302 	and.w	r3, r3, #2
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00a      	beq.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dd5c:	4b8f      	ldr	r3, [pc, #572]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd62:	f023 020c 	bic.w	r2, r3, #12
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd6a:	498c      	ldr	r1, [pc, #560]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f003 0304 	and.w	r3, r3, #4
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00a      	beq.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dd7e:	4b87      	ldr	r3, [pc, #540]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd8c:	4983      	ldr	r1, [pc, #524]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f003 0308 	and.w	r3, r3, #8
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00a      	beq.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dda0:	4b7e      	ldr	r3, [pc, #504]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dda2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dda6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddae:	497b      	ldr	r1, [pc, #492]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f003 0310 	and.w	r3, r3, #16
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00a      	beq.n	800ddd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ddc2:	4b76      	ldr	r3, [pc, #472]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ddc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddd0:	4972      	ldr	r1, [pc, #456]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f003 0320 	and.w	r3, r3, #32
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00a      	beq.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dde4:	4b6d      	ldr	r3, [pc, #436]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dde6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddf2:	496a      	ldr	r1, [pc, #424]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00a      	beq.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800de06:	4b65      	ldr	r3, [pc, #404]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de14:	4961      	ldr	r1, [pc, #388]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de16:	4313      	orrs	r3, r2
 800de18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00a      	beq.n	800de3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800de28:	4b5c      	ldr	r3, [pc, #368]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de36:	4959      	ldr	r1, [pc, #356]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de38:	4313      	orrs	r3, r2
 800de3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00a      	beq.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800de4a:	4b54      	ldr	r3, [pc, #336]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de58:	4950      	ldr	r1, [pc, #320]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de5a:	4313      	orrs	r3, r2
 800de5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00a      	beq.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800de6c:	4b4b      	ldr	r3, [pc, #300]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de7a:	4948      	ldr	r1, [pc, #288]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de7c:	4313      	orrs	r3, r2
 800de7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00a      	beq.n	800dea4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800de8e:	4b43      	ldr	r3, [pc, #268]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de9c:	493f      	ldr	r1, [pc, #252]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de9e:	4313      	orrs	r3, r2
 800dea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800deac:	2b00      	cmp	r3, #0
 800deae:	d028      	beq.n	800df02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800deb0:	4b3a      	ldr	r3, [pc, #232]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800deb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800deb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800debe:	4937      	ldr	r1, [pc, #220]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dec0:	4313      	orrs	r3, r2
 800dec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dece:	d106      	bne.n	800dede <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ded0:	4b32      	ldr	r3, [pc, #200]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	4a31      	ldr	r2, [pc, #196]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ded6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800deda:	60d3      	str	r3, [r2, #12]
 800dedc:	e011      	b.n	800df02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dee6:	d10c      	bne.n	800df02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	3304      	adds	r3, #4
 800deec:	2101      	movs	r1, #1
 800deee:	4618      	mov	r0, r3
 800def0:	f000 fe42 	bl	800eb78 <RCCEx_PLLSAI1_Config>
 800def4:	4603      	mov	r3, r0
 800def6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800def8:	7cfb      	ldrb	r3, [r7, #19]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800defe:	7cfb      	ldrb	r3, [r7, #19]
 800df00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d028      	beq.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800df0e:	4b23      	ldr	r3, [pc, #140]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df1c:	491f      	ldr	r1, [pc, #124]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df1e:	4313      	orrs	r3, r2
 800df20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df2c:	d106      	bne.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800df2e:	4b1b      	ldr	r3, [pc, #108]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	4a1a      	ldr	r2, [pc, #104]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df38:	60d3      	str	r3, [r2, #12]
 800df3a:	e011      	b.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df44:	d10c      	bne.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	3304      	adds	r3, #4
 800df4a:	2101      	movs	r1, #1
 800df4c:	4618      	mov	r0, r3
 800df4e:	f000 fe13 	bl	800eb78 <RCCEx_PLLSAI1_Config>
 800df52:	4603      	mov	r3, r0
 800df54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800df56:	7cfb      	ldrb	r3, [r7, #19]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d001      	beq.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800df5c:	7cfb      	ldrb	r3, [r7, #19]
 800df5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d02b      	beq.n	800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800df6c:	4b0b      	ldr	r3, [pc, #44]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df7a:	4908      	ldr	r1, [pc, #32]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df7c:	4313      	orrs	r3, r2
 800df7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df8a:	d109      	bne.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800df8c:	4b03      	ldr	r3, [pc, #12]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	4a02      	ldr	r2, [pc, #8]	; (800df9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df96:	60d3      	str	r3, [r2, #12]
 800df98:	e014      	b.n	800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800df9a:	bf00      	nop
 800df9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dfa8:	d10c      	bne.n	800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	3304      	adds	r3, #4
 800dfae:	2101      	movs	r1, #1
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f000 fde1 	bl	800eb78 <RCCEx_PLLSAI1_Config>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800dfba:	7cfb      	ldrb	r3, [r7, #19]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800dfc0:	7cfb      	ldrb	r3, [r7, #19]
 800dfc2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d02f      	beq.n	800e030 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800dfd0:	4b2b      	ldr	r3, [pc, #172]	; (800e080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dfd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfde:	4928      	ldr	r1, [pc, #160]	; (800e080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dfee:	d10d      	bne.n	800e00c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	3304      	adds	r3, #4
 800dff4:	2102      	movs	r1, #2
 800dff6:	4618      	mov	r0, r3
 800dff8:	f000 fdbe 	bl	800eb78 <RCCEx_PLLSAI1_Config>
 800dffc:	4603      	mov	r3, r0
 800dffe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e000:	7cfb      	ldrb	r3, [r7, #19]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d014      	beq.n	800e030 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800e006:	7cfb      	ldrb	r3, [r7, #19]
 800e008:	74bb      	strb	r3, [r7, #18]
 800e00a:	e011      	b.n	800e030 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e014:	d10c      	bne.n	800e030 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	3320      	adds	r3, #32
 800e01a:	2102      	movs	r1, #2
 800e01c:	4618      	mov	r0, r3
 800e01e:	f000 fe9f 	bl	800ed60 <RCCEx_PLLSAI2_Config>
 800e022:	4603      	mov	r3, r0
 800e024:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e026:	7cfb      	ldrb	r3, [r7, #19]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d001      	beq.n	800e030 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800e02c:	7cfb      	ldrb	r3, [r7, #19]
 800e02e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d00a      	beq.n	800e052 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e03c:	4b10      	ldr	r3, [pc, #64]	; (800e080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e042:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e04a:	490d      	ldr	r1, [pc, #52]	; (800e080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e04c:	4313      	orrs	r3, r2
 800e04e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00b      	beq.n	800e076 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e05e:	4b08      	ldr	r3, [pc, #32]	; (800e080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e064:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e06e:	4904      	ldr	r1, [pc, #16]	; (800e080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e070:	4313      	orrs	r3, r2
 800e072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800e076:	7cbb      	ldrb	r3, [r7, #18]
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3718      	adds	r7, #24
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	40021000 	.word	0x40021000

0800e084 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800e08c:	2300      	movs	r3, #0
 800e08e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e096:	d13e      	bne.n	800e116 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800e098:	4bbe      	ldr	r3, [pc, #760]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e09e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0a2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e0aa:	d028      	beq.n	800e0fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e0b2:	f200 853e 	bhi.w	800eb32 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0bc:	d005      	beq.n	800e0ca <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0c4:	d00e      	beq.n	800e0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800e0c6:	f000 bd34 	b.w	800eb32 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e0ca:	4bb2      	ldr	r3, [pc, #712]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0d0:	f003 0302 	and.w	r3, r3, #2
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	f040 852e 	bne.w	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 800e0da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0de:	61fb      	str	r3, [r7, #28]
      break;
 800e0e0:	f000 bd29 	b.w	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800e0e4:	4bab      	ldr	r3, [pc, #684]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e0e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e0ea:	f003 0302 	and.w	r3, r3, #2
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	f040 8523 	bne.w	800eb3a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 800e0f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e0f8:	61fb      	str	r3, [r7, #28]
      break;
 800e0fa:	f000 bd1e 	b.w	800eb3a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e0fe:	4ba5      	ldr	r3, [pc, #660]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e106:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e10a:	f040 8518 	bne.w	800eb3e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 800e10e:	4ba2      	ldr	r3, [pc, #648]	; (800e398 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 800e110:	61fb      	str	r3, [r7, #28]
      break;
 800e112:	f000 bd14 	b.w	800eb3e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e116:	4b9f      	ldr	r3, [pc, #636]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	f003 0303 	and.w	r3, r3, #3
 800e11e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	2b03      	cmp	r3, #3
 800e124:	d036      	beq.n	800e194 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d840      	bhi.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d003      	beq.n	800e13a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	2b02      	cmp	r3, #2
 800e136:	d020      	beq.n	800e17a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800e138:	e039      	b.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800e13a:	4b96      	ldr	r3, [pc, #600]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f003 0302 	and.w	r3, r3, #2
 800e142:	2b02      	cmp	r3, #2
 800e144:	d116      	bne.n	800e174 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800e146:	4b93      	ldr	r3, [pc, #588]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f003 0308 	and.w	r3, r3, #8
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d005      	beq.n	800e15e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800e152:	4b90      	ldr	r3, [pc, #576]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	091b      	lsrs	r3, r3, #4
 800e158:	f003 030f 	and.w	r3, r3, #15
 800e15c:	e005      	b.n	800e16a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800e15e:	4b8d      	ldr	r3, [pc, #564]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e164:	0a1b      	lsrs	r3, r3, #8
 800e166:	f003 030f 	and.w	r3, r3, #15
 800e16a:	4a8c      	ldr	r2, [pc, #560]	; (800e39c <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 800e16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e170:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800e172:	e01f      	b.n	800e1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800e174:	2300      	movs	r3, #0
 800e176:	61bb      	str	r3, [r7, #24]
      break;
 800e178:	e01c      	b.n	800e1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e17a:	4b86      	ldr	r3, [pc, #536]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e186:	d102      	bne.n	800e18e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800e188:	4b85      	ldr	r3, [pc, #532]	; (800e3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 800e18a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800e18c:	e012      	b.n	800e1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800e18e:	2300      	movs	r3, #0
 800e190:	61bb      	str	r3, [r7, #24]
      break;
 800e192:	e00f      	b.n	800e1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e194:	4b7f      	ldr	r3, [pc, #508]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e19c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e1a0:	d102      	bne.n	800e1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800e1a2:	4b80      	ldr	r3, [pc, #512]	; (800e3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 800e1a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800e1a6:	e005      	b.n	800e1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	61bb      	str	r3, [r7, #24]
      break;
 800e1ac:	e002      	b.n	800e1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	61bb      	str	r3, [r7, #24]
      break;
 800e1b2:	bf00      	nop
    }

    switch(PeriphClk)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e1ba:	f000 80d2 	beq.w	800e362 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e1c4:	f200 84bd 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e1ce:	f000 80c8 	beq.w	800e362 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e1d8:	f200 84b3 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1e2:	f000 835b 	beq.w	800e89c <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1ec:	f200 84a9 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1f6:	f000 847f 	beq.w	800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e200:	f200 849f 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e20a:	f000 82ce 	beq.w	800e7aa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e214:	f200 8495 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e21e:	f000 80a0 	beq.w	800e362 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e228:	f200 848b 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e232:	f000 808f 	beq.w	800e354 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e23c:	f200 8481 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e246:	d07e      	beq.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e24e:	f200 8478 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e258:	f000 8404 	beq.w	800ea64 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e262:	f200 846e 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e26c:	f000 83b0 	beq.w	800e9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e276:	f200 8464 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e280:	f000 837a 	beq.w	800e978 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e28a:	f200 845a 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b80      	cmp	r3, #128	; 0x80
 800e292:	f000 8345 	beq.w	800e920 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b80      	cmp	r3, #128	; 0x80
 800e29a:	f200 8452 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2b20      	cmp	r3, #32
 800e2a2:	d84b      	bhi.n	800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f000 844b 	beq.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	2b1f      	cmp	r3, #31
 800e2b2:	f200 8446 	bhi.w	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e2b6:	a201      	add	r2, pc, #4	; (adr r2, 800e2bc <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 800e2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2bc:	0800e4a7 	.word	0x0800e4a7
 800e2c0:	0800e517 	.word	0x0800e517
 800e2c4:	0800eb43 	.word	0x0800eb43
 800e2c8:	0800e5ab 	.word	0x0800e5ab
 800e2cc:	0800eb43 	.word	0x0800eb43
 800e2d0:	0800eb43 	.word	0x0800eb43
 800e2d4:	0800eb43 	.word	0x0800eb43
 800e2d8:	0800e623 	.word	0x0800e623
 800e2dc:	0800eb43 	.word	0x0800eb43
 800e2e0:	0800eb43 	.word	0x0800eb43
 800e2e4:	0800eb43 	.word	0x0800eb43
 800e2e8:	0800eb43 	.word	0x0800eb43
 800e2ec:	0800eb43 	.word	0x0800eb43
 800e2f0:	0800eb43 	.word	0x0800eb43
 800e2f4:	0800eb43 	.word	0x0800eb43
 800e2f8:	0800e6a7 	.word	0x0800e6a7
 800e2fc:	0800eb43 	.word	0x0800eb43
 800e300:	0800eb43 	.word	0x0800eb43
 800e304:	0800eb43 	.word	0x0800eb43
 800e308:	0800eb43 	.word	0x0800eb43
 800e30c:	0800eb43 	.word	0x0800eb43
 800e310:	0800eb43 	.word	0x0800eb43
 800e314:	0800eb43 	.word	0x0800eb43
 800e318:	0800eb43 	.word	0x0800eb43
 800e31c:	0800eb43 	.word	0x0800eb43
 800e320:	0800eb43 	.word	0x0800eb43
 800e324:	0800eb43 	.word	0x0800eb43
 800e328:	0800eb43 	.word	0x0800eb43
 800e32c:	0800eb43 	.word	0x0800eb43
 800e330:	0800eb43 	.word	0x0800eb43
 800e334:	0800eb43 	.word	0x0800eb43
 800e338:	0800e729 	.word	0x0800e729
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b40      	cmp	r3, #64	; 0x40
 800e340:	f000 82bd 	beq.w	800e8be <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800e344:	e3fd      	b.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800e346:	69b9      	ldr	r1, [r7, #24]
 800e348:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e34c:	f000 fde6 	bl	800ef1c <RCCEx_GetSAIxPeriphCLKFreq>
 800e350:	61f8      	str	r0, [r7, #28]
      break;
 800e352:	e3f7      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800e354:	69b9      	ldr	r1, [r7, #24]
 800e356:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e35a:	f000 fddf 	bl	800ef1c <RCCEx_GetSAIxPeriphCLKFreq>
 800e35e:	61f8      	str	r0, [r7, #28]
      break;
 800e360:	e3f0      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800e362:	4b0c      	ldr	r3, [pc, #48]	; (800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e368:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800e36c:	613b      	str	r3, [r7, #16]
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e374:	d018      	beq.n	800e3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e37c:	f200 808b 	bhi.w	800e496 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e386:	d059      	beq.n	800e43c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e38e:	d028      	beq.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 800e390:	e081      	b.n	800e496 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800e392:	bf00      	nop
 800e394:	40021000 	.word	0x40021000
 800e398:	0003d090 	.word	0x0003d090
 800e39c:	080164f8 	.word	0x080164f8
 800e3a0:	00f42400 	.word	0x00f42400
 800e3a4:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800e3a8:	4bae      	ldr	r3, [pc, #696]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f003 0302 	and.w	r3, r3, #2
 800e3b0:	2b02      	cmp	r3, #2
 800e3b2:	d172      	bne.n	800e49a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800e3b4:	4bab      	ldr	r3, [pc, #684]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f003 0308 	and.w	r3, r3, #8
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d005      	beq.n	800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 800e3c0:	4ba8      	ldr	r3, [pc, #672]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	091b      	lsrs	r3, r3, #4
 800e3c6:	f003 030f 	and.w	r3, r3, #15
 800e3ca:	e005      	b.n	800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800e3cc:	4ba5      	ldr	r3, [pc, #660]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e3ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e3d2:	0a1b      	lsrs	r3, r3, #8
 800e3d4:	f003 030f 	and.w	r3, r3, #15
 800e3d8:	4aa3      	ldr	r2, [pc, #652]	; (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800e3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3de:	61fb      	str	r3, [r7, #28]
          break;
 800e3e0:	e05b      	b.n	800e49a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800e3e2:	4ba0      	ldr	r3, [pc, #640]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3ee:	d156      	bne.n	800e49e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800e3f0:	4b9c      	ldr	r3, [pc, #624]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e3f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3fc:	d14f      	bne.n	800e49e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e3fe:	4b99      	ldr	r3, [pc, #612]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	0a1b      	lsrs	r3, r3, #8
 800e404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e408:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e40a:	69bb      	ldr	r3, [r7, #24]
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	fb02 f203 	mul.w	r2, r2, r3
 800e412:	4b94      	ldr	r3, [pc, #592]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	091b      	lsrs	r3, r3, #4
 800e418:	f003 0307 	and.w	r3, r3, #7
 800e41c:	3301      	adds	r3, #1
 800e41e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e422:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800e424:	4b8f      	ldr	r3, [pc, #572]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	0d5b      	lsrs	r3, r3, #21
 800e42a:	f003 0303 	and.w	r3, r3, #3
 800e42e:	3301      	adds	r3, #1
 800e430:	005b      	lsls	r3, r3, #1
 800e432:	69ba      	ldr	r2, [r7, #24]
 800e434:	fbb2 f3f3 	udiv	r3, r2, r3
 800e438:	61fb      	str	r3, [r7, #28]
          break;
 800e43a:	e030      	b.n	800e49e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800e43c:	4b89      	ldr	r3, [pc, #548]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e448:	d12b      	bne.n	800e4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800e44a:	4b86      	ldr	r3, [pc, #536]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e44c:	691b      	ldr	r3, [r3, #16]
 800e44e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e456:	d124      	bne.n	800e4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800e458:	4b82      	ldr	r3, [pc, #520]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	0a1b      	lsrs	r3, r3, #8
 800e45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e462:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	68fa      	ldr	r2, [r7, #12]
 800e468:	fb02 f203 	mul.w	r2, r2, r3
 800e46c:	4b7d      	ldr	r3, [pc, #500]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	091b      	lsrs	r3, r3, #4
 800e472:	f003 0307 	and.w	r3, r3, #7
 800e476:	3301      	adds	r3, #1
 800e478:	fbb2 f3f3 	udiv	r3, r2, r3
 800e47c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800e47e:	4b79      	ldr	r3, [pc, #484]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	0d5b      	lsrs	r3, r3, #21
 800e484:	f003 0303 	and.w	r3, r3, #3
 800e488:	3301      	adds	r3, #1
 800e48a:	005b      	lsls	r3, r3, #1
 800e48c:	69ba      	ldr	r2, [r7, #24]
 800e48e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e492:	61fb      	str	r3, [r7, #28]
          break;
 800e494:	e005      	b.n	800e4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 800e496:	bf00      	nop
 800e498:	e354      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e49a:	bf00      	nop
 800e49c:	e352      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e49e:	bf00      	nop
 800e4a0:	e350      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e4a2:	bf00      	nop
        break;
 800e4a4:	e34e      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800e4a6:	4b6f      	ldr	r3, [pc, #444]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e4a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ac:	f003 0303 	and.w	r3, r3, #3
 800e4b0:	613b      	str	r3, [r7, #16]
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	2b03      	cmp	r3, #3
 800e4b6:	d828      	bhi.n	800e50a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800e4b8:	a201      	add	r2, pc, #4	; (adr r2, 800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800e4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4be:	bf00      	nop
 800e4c0:	0800e4d1 	.word	0x0800e4d1
 800e4c4:	0800e4d9 	.word	0x0800e4d9
 800e4c8:	0800e4e1 	.word	0x0800e4e1
 800e4cc:	0800e4f5 	.word	0x0800e4f5
          frequency = HAL_RCC_GetPCLK2Freq();
 800e4d0:	f7ff fa46 	bl	800d960 <HAL_RCC_GetPCLK2Freq>
 800e4d4:	61f8      	str	r0, [r7, #28]
          break;
 800e4d6:	e01d      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 800e4d8:	f7ff f994 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800e4dc:	61f8      	str	r0, [r7, #28]
          break;
 800e4de:	e019      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e4e0:	4b60      	ldr	r3, [pc, #384]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e4e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4ec:	d10f      	bne.n	800e50e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 800e4ee:	4b5f      	ldr	r3, [pc, #380]	; (800e66c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800e4f0:	61fb      	str	r3, [r7, #28]
          break;
 800e4f2:	e00c      	b.n	800e50e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e4f4:	4b5b      	ldr	r3, [pc, #364]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4fa:	f003 0302 	and.w	r3, r3, #2
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d107      	bne.n	800e512 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 800e502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e506:	61fb      	str	r3, [r7, #28]
          break;
 800e508:	e003      	b.n	800e512 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 800e50a:	bf00      	nop
 800e50c:	e31a      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e50e:	bf00      	nop
 800e510:	e318      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e512:	bf00      	nop
        break;
 800e514:	e316      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800e516:	4b53      	ldr	r3, [pc, #332]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e51c:	f003 030c 	and.w	r3, r3, #12
 800e520:	613b      	str	r3, [r7, #16]
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	2b0c      	cmp	r3, #12
 800e526:	d83a      	bhi.n	800e59e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 800e528:	a201      	add	r2, pc, #4	; (adr r2, 800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800e52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e52e:	bf00      	nop
 800e530:	0800e565 	.word	0x0800e565
 800e534:	0800e59f 	.word	0x0800e59f
 800e538:	0800e59f 	.word	0x0800e59f
 800e53c:	0800e59f 	.word	0x0800e59f
 800e540:	0800e56d 	.word	0x0800e56d
 800e544:	0800e59f 	.word	0x0800e59f
 800e548:	0800e59f 	.word	0x0800e59f
 800e54c:	0800e59f 	.word	0x0800e59f
 800e550:	0800e575 	.word	0x0800e575
 800e554:	0800e59f 	.word	0x0800e59f
 800e558:	0800e59f 	.word	0x0800e59f
 800e55c:	0800e59f 	.word	0x0800e59f
 800e560:	0800e589 	.word	0x0800e589
          frequency = HAL_RCC_GetPCLK1Freq();
 800e564:	f7ff f9e6 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800e568:	61f8      	str	r0, [r7, #28]
          break;
 800e56a:	e01d      	b.n	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 800e56c:	f7ff f94a 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800e570:	61f8      	str	r0, [r7, #28]
          break;
 800e572:	e019      	b.n	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e574:	4b3b      	ldr	r3, [pc, #236]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e57c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e580:	d10f      	bne.n	800e5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 800e582:	4b3a      	ldr	r3, [pc, #232]	; (800e66c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800e584:	61fb      	str	r3, [r7, #28]
          break;
 800e586:	e00c      	b.n	800e5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e588:	4b36      	ldr	r3, [pc, #216]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e58e:	f003 0302 	and.w	r3, r3, #2
 800e592:	2b02      	cmp	r3, #2
 800e594:	d107      	bne.n	800e5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 800e596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e59a:	61fb      	str	r3, [r7, #28]
          break;
 800e59c:	e003      	b.n	800e5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 800e59e:	bf00      	nop
 800e5a0:	e2d0      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e5a2:	bf00      	nop
 800e5a4:	e2ce      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e5a6:	bf00      	nop
        break;
 800e5a8:	e2cc      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800e5aa:	4b2e      	ldr	r3, [pc, #184]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e5b4:	613b      	str	r3, [r7, #16]
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	2b30      	cmp	r3, #48	; 0x30
 800e5ba:	d021      	beq.n	800e600 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	2b30      	cmp	r3, #48	; 0x30
 800e5c0:	d829      	bhi.n	800e616 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	2b20      	cmp	r3, #32
 800e5c6:	d011      	beq.n	800e5ec <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	2b20      	cmp	r3, #32
 800e5cc:	d823      	bhi.n	800e616 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d003      	beq.n	800e5dc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	2b10      	cmp	r3, #16
 800e5d8:	d004      	beq.n	800e5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 800e5da:	e01c      	b.n	800e616 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e5dc:	f7ff f9aa 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800e5e0:	61f8      	str	r0, [r7, #28]
          break;
 800e5e2:	e01d      	b.n	800e620 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 800e5e4:	f7ff f90e 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800e5e8:	61f8      	str	r0, [r7, #28]
          break;
 800e5ea:	e019      	b.n	800e620 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e5ec:	4b1d      	ldr	r3, [pc, #116]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5f8:	d10f      	bne.n	800e61a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 800e5fa:	4b1c      	ldr	r3, [pc, #112]	; (800e66c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800e5fc:	61fb      	str	r3, [r7, #28]
          break;
 800e5fe:	e00c      	b.n	800e61a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e600:	4b18      	ldr	r3, [pc, #96]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e606:	f003 0302 	and.w	r3, r3, #2
 800e60a:	2b02      	cmp	r3, #2
 800e60c:	d107      	bne.n	800e61e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 800e60e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e612:	61fb      	str	r3, [r7, #28]
          break;
 800e614:	e003      	b.n	800e61e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 800e616:	bf00      	nop
 800e618:	e294      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e61a:	bf00      	nop
 800e61c:	e292      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e61e:	bf00      	nop
        break;
 800e620:	e290      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800e622:	4b10      	ldr	r3, [pc, #64]	; (800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e628:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e62c:	613b      	str	r3, [r7, #16]
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	2bc0      	cmp	r3, #192	; 0xc0
 800e632:	d027      	beq.n	800e684 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	2bc0      	cmp	r3, #192	; 0xc0
 800e638:	d82f      	bhi.n	800e69a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	2b80      	cmp	r3, #128	; 0x80
 800e63e:	d017      	beq.n	800e670 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	2b80      	cmp	r3, #128	; 0x80
 800e644:	d829      	bhi.n	800e69a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d003      	beq.n	800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	2b40      	cmp	r3, #64	; 0x40
 800e650:	d004      	beq.n	800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 800e652:	e022      	b.n	800e69a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e654:	f7ff f96e 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800e658:	61f8      	str	r0, [r7, #28]
          break;
 800e65a:	e023      	b.n	800e6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 800e65c:	f7ff f8d2 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800e660:	61f8      	str	r0, [r7, #28]
          break;
 800e662:	e01f      	b.n	800e6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 800e664:	40021000 	.word	0x40021000
 800e668:	080164f8 	.word	0x080164f8
 800e66c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e670:	4ba9      	ldr	r3, [pc, #676]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e67c:	d10f      	bne.n	800e69e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 800e67e:	4ba7      	ldr	r3, [pc, #668]	; (800e91c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800e680:	61fb      	str	r3, [r7, #28]
          break;
 800e682:	e00c      	b.n	800e69e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e684:	4ba4      	ldr	r3, [pc, #656]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e68a:	f003 0302 	and.w	r3, r3, #2
 800e68e:	2b02      	cmp	r3, #2
 800e690:	d107      	bne.n	800e6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 800e692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e696:	61fb      	str	r3, [r7, #28]
          break;
 800e698:	e003      	b.n	800e6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 800e69a:	bf00      	nop
 800e69c:	e252      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e69e:	bf00      	nop
 800e6a0:	e250      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e6a2:	bf00      	nop
        break;
 800e6a4:	e24e      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800e6a6:	4b9c      	ldr	r3, [pc, #624]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6b0:	613b      	str	r3, [r7, #16]
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e6b8:	d025      	beq.n	800e706 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e6c0:	d82c      	bhi.n	800e71c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6c8:	d013      	beq.n	800e6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6d0:	d824      	bhi.n	800e71c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d004      	beq.n	800e6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6de:	d004      	beq.n	800e6ea <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 800e6e0:	e01c      	b.n	800e71c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e6e2:	f7ff f927 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800e6e6:	61f8      	str	r0, [r7, #28]
          break;
 800e6e8:	e01d      	b.n	800e726 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 800e6ea:	f7ff f88b 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800e6ee:	61f8      	str	r0, [r7, #28]
          break;
 800e6f0:	e019      	b.n	800e726 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e6f2:	4b89      	ldr	r3, [pc, #548]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6fe:	d10f      	bne.n	800e720 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 800e700:	4b86      	ldr	r3, [pc, #536]	; (800e91c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800e702:	61fb      	str	r3, [r7, #28]
          break;
 800e704:	e00c      	b.n	800e720 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e706:	4b84      	ldr	r3, [pc, #528]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e70c:	f003 0302 	and.w	r3, r3, #2
 800e710:	2b02      	cmp	r3, #2
 800e712:	d107      	bne.n	800e724 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 800e714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e718:	61fb      	str	r3, [r7, #28]
          break;
 800e71a:	e003      	b.n	800e724 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 800e71c:	bf00      	nop
 800e71e:	e211      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e720:	bf00      	nop
 800e722:	e20f      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e724:	bf00      	nop
        break;
 800e726:	e20d      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800e728:	4b7b      	ldr	r3, [pc, #492]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e72e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e732:	613b      	str	r3, [r7, #16]
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e73a:	d025      	beq.n	800e788 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e742:	d82c      	bhi.n	800e79e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e74a:	d013      	beq.n	800e774 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e752:	d824      	bhi.n	800e79e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d004      	beq.n	800e764 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e760:	d004      	beq.n	800e76c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 800e762:	e01c      	b.n	800e79e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e764:	f7ff f8e6 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800e768:	61f8      	str	r0, [r7, #28]
          break;
 800e76a:	e01d      	b.n	800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 800e76c:	f7ff f84a 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800e770:	61f8      	str	r0, [r7, #28]
          break;
 800e772:	e019      	b.n	800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e774:	4b68      	ldr	r3, [pc, #416]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e77c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e780:	d10f      	bne.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 800e782:	4b66      	ldr	r3, [pc, #408]	; (800e91c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800e784:	61fb      	str	r3, [r7, #28]
          break;
 800e786:	e00c      	b.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e788:	4b63      	ldr	r3, [pc, #396]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e78e:	f003 0302 	and.w	r3, r3, #2
 800e792:	2b02      	cmp	r3, #2
 800e794:	d107      	bne.n	800e7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 800e796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e79a:	61fb      	str	r3, [r7, #28]
          break;
 800e79c:	e003      	b.n	800e7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 800e79e:	bf00      	nop
 800e7a0:	e1d0      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e7a2:	bf00      	nop
 800e7a4:	e1ce      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e7a6:	bf00      	nop
        break;
 800e7a8:	e1cc      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e7aa:	4b5b      	ldr	r3, [pc, #364]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e7ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e7b4:	613b      	str	r3, [r7, #16]
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e7bc:	d00c      	beq.n	800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e7c4:	d864      	bhi.n	800e890 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e7cc:	d008      	beq.n	800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e7d4:	d030      	beq.n	800e838 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800e7d6:	e05b      	b.n	800e890 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 800e7d8:	f7ff f814 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800e7dc:	61f8      	str	r0, [r7, #28]
          break;
 800e7de:	e05c      	b.n	800e89a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800e7e0:	4b4d      	ldr	r3, [pc, #308]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e7e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e7ec:	d152      	bne.n	800e894 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 800e7ee:	4b4a      	ldr	r3, [pc, #296]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e7f0:	691b      	ldr	r3, [r3, #16]
 800e7f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d04c      	beq.n	800e894 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800e7fa:	4b47      	ldr	r3, [pc, #284]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	0a1b      	lsrs	r3, r3, #8
 800e800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e804:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	fb02 f203 	mul.w	r2, r2, r3
 800e80e:	4b42      	ldr	r3, [pc, #264]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	091b      	lsrs	r3, r3, #4
 800e814:	f003 0307 	and.w	r3, r3, #7
 800e818:	3301      	adds	r3, #1
 800e81a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e81e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800e820:	4b3d      	ldr	r3, [pc, #244]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e822:	691b      	ldr	r3, [r3, #16]
 800e824:	0e5b      	lsrs	r3, r3, #25
 800e826:	f003 0303 	and.w	r3, r3, #3
 800e82a:	3301      	adds	r3, #1
 800e82c:	005b      	lsls	r3, r3, #1
 800e82e:	69ba      	ldr	r2, [r7, #24]
 800e830:	fbb2 f3f3 	udiv	r3, r2, r3
 800e834:	61fb      	str	r3, [r7, #28]
          break;
 800e836:	e02d      	b.n	800e894 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800e838:	4b37      	ldr	r3, [pc, #220]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e844:	d128      	bne.n	800e898 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800e846:	4b34      	ldr	r3, [pc, #208]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e848:	695b      	ldr	r3, [r3, #20]
 800e84a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d022      	beq.n	800e898 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800e852:	4b31      	ldr	r3, [pc, #196]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e854:	695b      	ldr	r3, [r3, #20]
 800e856:	0a1b      	lsrs	r3, r3, #8
 800e858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e85c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	fb02 f203 	mul.w	r2, r2, r3
 800e866:	4b2c      	ldr	r3, [pc, #176]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	091b      	lsrs	r3, r3, #4
 800e86c:	f003 0307 	and.w	r3, r3, #7
 800e870:	3301      	adds	r3, #1
 800e872:	fbb2 f3f3 	udiv	r3, r2, r3
 800e876:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800e878:	4b27      	ldr	r3, [pc, #156]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e87a:	695b      	ldr	r3, [r3, #20]
 800e87c:	0e5b      	lsrs	r3, r3, #25
 800e87e:	f003 0303 	and.w	r3, r3, #3
 800e882:	3301      	adds	r3, #1
 800e884:	005b      	lsls	r3, r3, #1
 800e886:	69ba      	ldr	r2, [r7, #24]
 800e888:	fbb2 f3f3 	udiv	r3, r2, r3
 800e88c:	61fb      	str	r3, [r7, #28]
          break;
 800e88e:	e003      	b.n	800e898 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 800e890:	bf00      	nop
 800e892:	e157      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e894:	bf00      	nop
 800e896:	e155      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e898:	bf00      	nop
        break;
 800e89a:	e153      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800e89c:	4b1e      	ldr	r3, [pc, #120]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e89e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8a6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d103      	bne.n	800e8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 800e8ae:	f7ff f857 	bl	800d960 <HAL_RCC_GetPCLK2Freq>
 800e8b2:	61f8      	str	r0, [r7, #28]
        break;
 800e8b4:	e146      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 800e8b6:	f7fe ffa5 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800e8ba:	61f8      	str	r0, [r7, #28]
        break;
 800e8bc:	e142      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800e8be:	4b16      	ldr	r3, [pc, #88]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e8c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e8c8:	613b      	str	r3, [r7, #16]
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8d0:	d013      	beq.n	800e8fa <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8d8:	d819      	bhi.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d004      	beq.n	800e8ea <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8e6:	d004      	beq.n	800e8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800e8e8:	e011      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e8ea:	f7ff f823 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800e8ee:	61f8      	str	r0, [r7, #28]
          break;
 800e8f0:	e010      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 800e8f2:	f7fe ff87 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800e8f6:	61f8      	str	r0, [r7, #28]
          break;
 800e8f8:	e00c      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e8fa:	4b07      	ldr	r3, [pc, #28]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e906:	d104      	bne.n	800e912 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 800e908:	4b04      	ldr	r3, [pc, #16]	; (800e91c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800e90a:	61fb      	str	r3, [r7, #28]
          break;
 800e90c:	e001      	b.n	800e912 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 800e90e:	bf00      	nop
 800e910:	e118      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e912:	bf00      	nop
        break;
 800e914:	e116      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e916:	bf00      	nop
 800e918:	40021000 	.word	0x40021000
 800e91c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800e920:	4b8b      	ldr	r3, [pc, #556]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e926:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e92a:	613b      	str	r3, [r7, #16]
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e932:	d013      	beq.n	800e95c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e93a:	d819      	bhi.n	800e970 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d004      	beq.n	800e94c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e948:	d004      	beq.n	800e954 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 800e94a:	e011      	b.n	800e970 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e94c:	f7fe fff2 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800e950:	61f8      	str	r0, [r7, #28]
          break;
 800e952:	e010      	b.n	800e976 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800e954:	f7fe ff56 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800e958:	61f8      	str	r0, [r7, #28]
          break;
 800e95a:	e00c      	b.n	800e976 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e95c:	4b7c      	ldr	r3, [pc, #496]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e968:	d104      	bne.n	800e974 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800e96a:	4b7a      	ldr	r3, [pc, #488]	; (800eb54 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800e96c:	61fb      	str	r3, [r7, #28]
          break;
 800e96e:	e001      	b.n	800e974 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 800e970:	bf00      	nop
 800e972:	e0e7      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e974:	bf00      	nop
        break;
 800e976:	e0e5      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800e978:	4b75      	ldr	r3, [pc, #468]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e97e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e982:	613b      	str	r3, [r7, #16]
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e98a:	d013      	beq.n	800e9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e992:	d819      	bhi.n	800e9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d004      	beq.n	800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9a0:	d004      	beq.n	800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 800e9a2:	e011      	b.n	800e9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e9a4:	f7fe ffc6 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800e9a8:	61f8      	str	r0, [r7, #28]
          break;
 800e9aa:	e010      	b.n	800e9ce <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 800e9ac:	f7fe ff2a 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800e9b0:	61f8      	str	r0, [r7, #28]
          break;
 800e9b2:	e00c      	b.n	800e9ce <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e9b4:	4b66      	ldr	r3, [pc, #408]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e9bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9c0:	d104      	bne.n	800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 800e9c2:	4b64      	ldr	r3, [pc, #400]	; (800eb54 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800e9c4:	61fb      	str	r3, [r7, #28]
          break;
 800e9c6:	e001      	b.n	800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 800e9c8:	bf00      	nop
 800e9ca:	e0bb      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e9cc:	bf00      	nop
        break;
 800e9ce:	e0b9      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e9d0:	4b5f      	ldr	r3, [pc, #380]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e9d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9d6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800e9da:	613b      	str	r3, [r7, #16]
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e9e2:	d02c      	beq.n	800ea3e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e9ea:	d833      	bhi.n	800ea54 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e9f2:	d01a      	beq.n	800ea2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e9fa:	d82b      	bhi.n	800ea54 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d004      	beq.n	800ea0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ea08:	d004      	beq.n	800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 800ea0a:	e023      	b.n	800ea54 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ea0c:	f7fe ff92 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800ea10:	61f8      	str	r0, [r7, #28]
          break;
 800ea12:	e026      	b.n	800ea62 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ea14:	4b4e      	ldr	r3, [pc, #312]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ea16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea1a:	f003 0302 	and.w	r3, r3, #2
 800ea1e:	2b02      	cmp	r3, #2
 800ea20:	d11a      	bne.n	800ea58 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 800ea22:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ea26:	61fb      	str	r3, [r7, #28]
          break;
 800ea28:	e016      	b.n	800ea58 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ea2a:	4b49      	ldr	r3, [pc, #292]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ea32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea36:	d111      	bne.n	800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 800ea38:	4b46      	ldr	r3, [pc, #280]	; (800eb54 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800ea3a:	61fb      	str	r3, [r7, #28]
          break;
 800ea3c:	e00e      	b.n	800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ea3e:	4b44      	ldr	r3, [pc, #272]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ea40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea44:	f003 0302 	and.w	r3, r3, #2
 800ea48:	2b02      	cmp	r3, #2
 800ea4a:	d109      	bne.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 800ea4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea50:	61fb      	str	r3, [r7, #28]
          break;
 800ea52:	e005      	b.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800ea54:	bf00      	nop
 800ea56:	e075      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ea58:	bf00      	nop
 800ea5a:	e073      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ea5c:	bf00      	nop
 800ea5e:	e071      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ea60:	bf00      	nop
        break;
 800ea62:	e06f      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ea64:	4b3a      	ldr	r3, [pc, #232]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ea66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ea6e:	613b      	str	r3, [r7, #16]
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ea76:	d02c      	beq.n	800ead2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ea7e:	d833      	bhi.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ea86:	d01a      	beq.n	800eabe <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ea8e:	d82b      	bhi.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d004      	beq.n	800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea9c:	d004      	beq.n	800eaa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800ea9e:	e023      	b.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800eaa0:	f7fe ff48 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800eaa4:	61f8      	str	r0, [r7, #28]
          break;
 800eaa6:	e026      	b.n	800eaf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800eaa8:	4b29      	ldr	r3, [pc, #164]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800eaaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eaae:	f003 0302 	and.w	r3, r3, #2
 800eab2:	2b02      	cmp	r3, #2
 800eab4:	d11a      	bne.n	800eaec <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800eab6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800eaba:	61fb      	str	r3, [r7, #28]
          break;
 800eabc:	e016      	b.n	800eaec <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eabe:	4b24      	ldr	r3, [pc, #144]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaca:	d111      	bne.n	800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800eacc:	4b21      	ldr	r3, [pc, #132]	; (800eb54 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800eace:	61fb      	str	r3, [r7, #28]
          break;
 800ead0:	e00e      	b.n	800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ead2:	4b1f      	ldr	r3, [pc, #124]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ead4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ead8:	f003 0302 	and.w	r3, r3, #2
 800eadc:	2b02      	cmp	r3, #2
 800eade:	d109      	bne.n	800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800eae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eae4:	61fb      	str	r3, [r7, #28]
          break;
 800eae6:	e005      	b.n	800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800eae8:	bf00      	nop
 800eaea:	e02b      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800eaec:	bf00      	nop
 800eaee:	e029      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800eaf0:	bf00      	nop
 800eaf2:	e027      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800eaf4:	bf00      	nop
        break;
 800eaf6:	e025      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800eaf8:	4b15      	ldr	r3, [pc, #84]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800eafa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eafe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eb02:	613b      	str	r3, [r7, #16]
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d004      	beq.n	800eb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb10:	d004      	beq.n	800eb1c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 800eb12:	e00d      	b.n	800eb30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800eb14:	f7fe ff0e 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800eb18:	61f8      	str	r0, [r7, #28]
          break;
 800eb1a:	e009      	b.n	800eb30 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eb1c:	4b0c      	ldr	r3, [pc, #48]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb28:	d101      	bne.n	800eb2e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800eb2a:	4b0a      	ldr	r3, [pc, #40]	; (800eb54 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800eb2c:	61fb      	str	r3, [r7, #28]
          break;
 800eb2e:	bf00      	nop
        break;
 800eb30:	e008      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800eb32:	bf00      	nop
 800eb34:	e006      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800eb36:	bf00      	nop
 800eb38:	e004      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800eb3a:	bf00      	nop
 800eb3c:	e002      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800eb3e:	bf00      	nop
 800eb40:	e000      	b.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800eb42:	bf00      	nop
    }
  }

  return(frequency);
 800eb44:	69fb      	ldr	r3, [r7, #28]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3720      	adds	r7, #32
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	40021000 	.word	0x40021000
 800eb54:	00f42400 	.word	0x00f42400

0800eb58 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800eb5c:	4b05      	ldr	r3, [pc, #20]	; (800eb74 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a04      	ldr	r2, [pc, #16]	; (800eb74 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800eb62:	f043 0304 	orr.w	r3, r3, #4
 800eb66:	6013      	str	r3, [r2, #0]
}
 800eb68:	bf00      	nop
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	40021000 	.word	0x40021000

0800eb78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eb82:	2300      	movs	r3, #0
 800eb84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800eb86:	4b75      	ldr	r3, [pc, #468]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	f003 0303 	and.w	r3, r3, #3
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d018      	beq.n	800ebc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800eb92:	4b72      	ldr	r3, [pc, #456]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	f003 0203 	and.w	r2, r3, #3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d10d      	bne.n	800ebbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
       ||
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d009      	beq.n	800ebbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ebaa:	4b6c      	ldr	r3, [pc, #432]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ebac:	68db      	ldr	r3, [r3, #12]
 800ebae:	091b      	lsrs	r3, r3, #4
 800ebb0:	f003 0307 	and.w	r3, r3, #7
 800ebb4:	1c5a      	adds	r2, r3, #1
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	685b      	ldr	r3, [r3, #4]
       ||
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d047      	beq.n	800ec4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	73fb      	strb	r3, [r7, #15]
 800ebc2:	e044      	b.n	800ec4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	2b03      	cmp	r3, #3
 800ebca:	d018      	beq.n	800ebfe <RCCEx_PLLSAI1_Config+0x86>
 800ebcc:	2b03      	cmp	r3, #3
 800ebce:	d825      	bhi.n	800ec1c <RCCEx_PLLSAI1_Config+0xa4>
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d002      	beq.n	800ebda <RCCEx_PLLSAI1_Config+0x62>
 800ebd4:	2b02      	cmp	r3, #2
 800ebd6:	d009      	beq.n	800ebec <RCCEx_PLLSAI1_Config+0x74>
 800ebd8:	e020      	b.n	800ec1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ebda:	4b60      	ldr	r3, [pc, #384]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f003 0302 	and.w	r3, r3, #2
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d11d      	bne.n	800ec22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ebea:	e01a      	b.n	800ec22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ebec:	4b5b      	ldr	r3, [pc, #364]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d116      	bne.n	800ec26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ebfc:	e013      	b.n	800ec26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ebfe:	4b57      	ldr	r3, [pc, #348]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d10f      	bne.n	800ec2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ec0a:	4b54      	ldr	r3, [pc, #336]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d109      	bne.n	800ec2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ec16:	2301      	movs	r3, #1
 800ec18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ec1a:	e006      	b.n	800ec2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ec20:	e004      	b.n	800ec2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ec22:	bf00      	nop
 800ec24:	e002      	b.n	800ec2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ec26:	bf00      	nop
 800ec28:	e000      	b.n	800ec2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ec2a:	bf00      	nop
    }

    if(status == HAL_OK)
 800ec2c:	7bfb      	ldrb	r3, [r7, #15]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10d      	bne.n	800ec4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ec32:	4b4a      	ldr	r3, [pc, #296]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6819      	ldr	r1, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	3b01      	subs	r3, #1
 800ec44:	011b      	lsls	r3, r3, #4
 800ec46:	430b      	orrs	r3, r1
 800ec48:	4944      	ldr	r1, [pc, #272]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ec4e:	7bfb      	ldrb	r3, [r7, #15]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d17d      	bne.n	800ed50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ec54:	4b41      	ldr	r3, [pc, #260]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4a40      	ldr	r2, [pc, #256]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ec5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec60:	f7fc fc8a 	bl	800b578 <HAL_GetTick>
 800ec64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ec66:	e009      	b.n	800ec7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ec68:	f7fc fc86 	bl	800b578 <HAL_GetTick>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d902      	bls.n	800ec7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ec76:	2303      	movs	r3, #3
 800ec78:	73fb      	strb	r3, [r7, #15]
        break;
 800ec7a:	e005      	b.n	800ec88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ec7c:	4b37      	ldr	r3, [pc, #220]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d1ef      	bne.n	800ec68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d160      	bne.n	800ed50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d111      	bne.n	800ecb8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ec94:	4b31      	ldr	r3, [pc, #196]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec96:	691b      	ldr	r3, [r3, #16]
 800ec98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800ec9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	6892      	ldr	r2, [r2, #8]
 800eca4:	0211      	lsls	r1, r2, #8
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	68d2      	ldr	r2, [r2, #12]
 800ecaa:	0912      	lsrs	r2, r2, #4
 800ecac:	0452      	lsls	r2, r2, #17
 800ecae:	430a      	orrs	r2, r1
 800ecb0:	492a      	ldr	r1, [pc, #168]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	610b      	str	r3, [r1, #16]
 800ecb6:	e027      	b.n	800ed08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d112      	bne.n	800ece4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ecbe:	4b27      	ldr	r3, [pc, #156]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ecc0:	691b      	ldr	r3, [r3, #16]
 800ecc2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ecc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	6892      	ldr	r2, [r2, #8]
 800ecce:	0211      	lsls	r1, r2, #8
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	6912      	ldr	r2, [r2, #16]
 800ecd4:	0852      	lsrs	r2, r2, #1
 800ecd6:	3a01      	subs	r2, #1
 800ecd8:	0552      	lsls	r2, r2, #21
 800ecda:	430a      	orrs	r2, r1
 800ecdc:	491f      	ldr	r1, [pc, #124]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ecde:	4313      	orrs	r3, r2
 800ece0:	610b      	str	r3, [r1, #16]
 800ece2:	e011      	b.n	800ed08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ece4:	4b1d      	ldr	r3, [pc, #116]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ece6:	691b      	ldr	r3, [r3, #16]
 800ece8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ecec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	6892      	ldr	r2, [r2, #8]
 800ecf4:	0211      	lsls	r1, r2, #8
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	6952      	ldr	r2, [r2, #20]
 800ecfa:	0852      	lsrs	r2, r2, #1
 800ecfc:	3a01      	subs	r2, #1
 800ecfe:	0652      	lsls	r2, r2, #25
 800ed00:	430a      	orrs	r2, r1
 800ed02:	4916      	ldr	r1, [pc, #88]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed04:	4313      	orrs	r3, r2
 800ed06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ed08:	4b14      	ldr	r3, [pc, #80]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	4a13      	ldr	r2, [pc, #76]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ed12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed14:	f7fc fc30 	bl	800b578 <HAL_GetTick>
 800ed18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ed1a:	e009      	b.n	800ed30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ed1c:	f7fc fc2c 	bl	800b578 <HAL_GetTick>
 800ed20:	4602      	mov	r2, r0
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	1ad3      	subs	r3, r2, r3
 800ed26:	2b02      	cmp	r3, #2
 800ed28:	d902      	bls.n	800ed30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	73fb      	strb	r3, [r7, #15]
          break;
 800ed2e:	e005      	b.n	800ed3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ed30:	4b0a      	ldr	r3, [pc, #40]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d0ef      	beq.n	800ed1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800ed3c:	7bfb      	ldrb	r3, [r7, #15]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d106      	bne.n	800ed50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ed42:	4b06      	ldr	r3, [pc, #24]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed44:	691a      	ldr	r2, [r3, #16]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	699b      	ldr	r3, [r3, #24]
 800ed4a:	4904      	ldr	r1, [pc, #16]	; (800ed5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ed50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	40021000 	.word	0x40021000

0800ed60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ed6e:	4b6a      	ldr	r3, [pc, #424]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	f003 0303 	and.w	r3, r3, #3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d018      	beq.n	800edac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ed7a:	4b67      	ldr	r3, [pc, #412]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	f003 0203 	and.w	r2, r3, #3
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d10d      	bne.n	800eda6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
       ||
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d009      	beq.n	800eda6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800ed92:	4b61      	ldr	r3, [pc, #388]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	091b      	lsrs	r3, r3, #4
 800ed98:	f003 0307 	and.w	r3, r3, #7
 800ed9c:	1c5a      	adds	r2, r3, #1
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	685b      	ldr	r3, [r3, #4]
       ||
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d047      	beq.n	800ee36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800eda6:	2301      	movs	r3, #1
 800eda8:	73fb      	strb	r3, [r7, #15]
 800edaa:	e044      	b.n	800ee36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2b03      	cmp	r3, #3
 800edb2:	d018      	beq.n	800ede6 <RCCEx_PLLSAI2_Config+0x86>
 800edb4:	2b03      	cmp	r3, #3
 800edb6:	d825      	bhi.n	800ee04 <RCCEx_PLLSAI2_Config+0xa4>
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d002      	beq.n	800edc2 <RCCEx_PLLSAI2_Config+0x62>
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d009      	beq.n	800edd4 <RCCEx_PLLSAI2_Config+0x74>
 800edc0:	e020      	b.n	800ee04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800edc2:	4b55      	ldr	r3, [pc, #340]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f003 0302 	and.w	r3, r3, #2
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d11d      	bne.n	800ee0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800edce:	2301      	movs	r3, #1
 800edd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800edd2:	e01a      	b.n	800ee0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800edd4:	4b50      	ldr	r3, [pc, #320]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d116      	bne.n	800ee0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800ede0:	2301      	movs	r3, #1
 800ede2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ede4:	e013      	b.n	800ee0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ede6:	4b4c      	ldr	r3, [pc, #304]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d10f      	bne.n	800ee12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800edf2:	4b49      	ldr	r3, [pc, #292]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d109      	bne.n	800ee12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800edfe:	2301      	movs	r3, #1
 800ee00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ee02:	e006      	b.n	800ee12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ee04:	2301      	movs	r3, #1
 800ee06:	73fb      	strb	r3, [r7, #15]
      break;
 800ee08:	e004      	b.n	800ee14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ee0a:	bf00      	nop
 800ee0c:	e002      	b.n	800ee14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ee0e:	bf00      	nop
 800ee10:	e000      	b.n	800ee14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ee12:	bf00      	nop
    }

    if(status == HAL_OK)
 800ee14:	7bfb      	ldrb	r3, [r7, #15]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d10d      	bne.n	800ee36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ee1a:	4b3f      	ldr	r3, [pc, #252]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6819      	ldr	r1, [r3, #0]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	685b      	ldr	r3, [r3, #4]
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	011b      	lsls	r3, r3, #4
 800ee2e:	430b      	orrs	r3, r1
 800ee30:	4939      	ldr	r1, [pc, #228]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee32:	4313      	orrs	r3, r2
 800ee34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ee36:	7bfb      	ldrb	r3, [r7, #15]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d167      	bne.n	800ef0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ee3c:	4b36      	ldr	r3, [pc, #216]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a35      	ldr	r2, [pc, #212]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee48:	f7fc fb96 	bl	800b578 <HAL_GetTick>
 800ee4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ee4e:	e009      	b.n	800ee64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ee50:	f7fc fb92 	bl	800b578 <HAL_GetTick>
 800ee54:	4602      	mov	r2, r0
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d902      	bls.n	800ee64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ee5e:	2303      	movs	r3, #3
 800ee60:	73fb      	strb	r3, [r7, #15]
        break;
 800ee62:	e005      	b.n	800ee70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ee64:	4b2c      	ldr	r3, [pc, #176]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1ef      	bne.n	800ee50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d14a      	bne.n	800ef0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d111      	bne.n	800eea0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ee7c:	4b26      	ldr	r3, [pc, #152]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee7e:	695b      	ldr	r3, [r3, #20]
 800ee80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800ee84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	6892      	ldr	r2, [r2, #8]
 800ee8c:	0211      	lsls	r1, r2, #8
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	68d2      	ldr	r2, [r2, #12]
 800ee92:	0912      	lsrs	r2, r2, #4
 800ee94:	0452      	lsls	r2, r2, #17
 800ee96:	430a      	orrs	r2, r1
 800ee98:	491f      	ldr	r1, [pc, #124]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	614b      	str	r3, [r1, #20]
 800ee9e:	e011      	b.n	800eec4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800eea0:	4b1d      	ldr	r3, [pc, #116]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800eea2:	695b      	ldr	r3, [r3, #20]
 800eea4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800eea8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	6892      	ldr	r2, [r2, #8]
 800eeb0:	0211      	lsls	r1, r2, #8
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	6912      	ldr	r2, [r2, #16]
 800eeb6:	0852      	lsrs	r2, r2, #1
 800eeb8:	3a01      	subs	r2, #1
 800eeba:	0652      	lsls	r2, r2, #25
 800eebc:	430a      	orrs	r2, r1
 800eebe:	4916      	ldr	r1, [pc, #88]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800eec0:	4313      	orrs	r3, r2
 800eec2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800eec4:	4b14      	ldr	r3, [pc, #80]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a13      	ldr	r2, [pc, #76]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800eeca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eece:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eed0:	f7fc fb52 	bl	800b578 <HAL_GetTick>
 800eed4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800eed6:	e009      	b.n	800eeec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800eed8:	f7fc fb4e 	bl	800b578 <HAL_GetTick>
 800eedc:	4602      	mov	r2, r0
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	2b02      	cmp	r3, #2
 800eee4:	d902      	bls.n	800eeec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800eee6:	2303      	movs	r3, #3
 800eee8:	73fb      	strb	r3, [r7, #15]
          break;
 800eeea:	e005      	b.n	800eef8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800eeec:	4b0a      	ldr	r3, [pc, #40]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d0ef      	beq.n	800eed8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800eef8:	7bfb      	ldrb	r3, [r7, #15]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d106      	bne.n	800ef0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800eefe:	4b06      	ldr	r3, [pc, #24]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef00:	695a      	ldr	r2, [r3, #20]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	695b      	ldr	r3, [r3, #20]
 800ef06:	4904      	ldr	r1, [pc, #16]	; (800ef18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ef0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	40021000 	.word	0x40021000

0800ef1c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b089      	sub	sp, #36	; 0x24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800ef26:	2300      	movs	r3, #0
 800ef28:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef38:	d10c      	bne.n	800ef54 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ef3a:	4b6e      	ldr	r3, [pc, #440]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ef3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ef44:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ef4c:	d112      	bne.n	800ef74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ef4e:	4b6a      	ldr	r3, [pc, #424]	; (800f0f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800ef50:	61fb      	str	r3, [r7, #28]
 800ef52:	e00f      	b.n	800ef74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef5a:	d10b      	bne.n	800ef74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ef5c:	4b65      	ldr	r3, [pc, #404]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ef5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef62:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800ef66:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ef6e:	d101      	bne.n	800ef74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800ef70:	4b61      	ldr	r3, [pc, #388]	; (800f0f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800ef72:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	f040 80b4 	bne.w	800f0e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef86:	d003      	beq.n	800ef90 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef8e:	d135      	bne.n	800effc <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ef90:	4b58      	ldr	r3, [pc, #352]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef9c:	f040 80a1 	bne.w	800f0e2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800efa0:	4b54      	ldr	r3, [pc, #336]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f000 809a 	beq.w	800f0e2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800efae:	4b51      	ldr	r3, [pc, #324]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	091b      	lsrs	r3, r3, #4
 800efb4:	f003 0307 	and.w	r3, r3, #7
 800efb8:	3301      	adds	r3, #1
 800efba:	693a      	ldr	r2, [r7, #16]
 800efbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800efc0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800efc2:	4b4c      	ldr	r3, [pc, #304]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800efc4:	68db      	ldr	r3, [r3, #12]
 800efc6:	0a1b      	lsrs	r3, r3, #8
 800efc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efcc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d10a      	bne.n	800efea <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800efd4:	4b47      	ldr	r3, [pc, #284]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d002      	beq.n	800efe6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800efe0:	2311      	movs	r3, #17
 800efe2:	617b      	str	r3, [r7, #20]
 800efe4:	e001      	b.n	800efea <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800efe6:	2307      	movs	r3, #7
 800efe8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	68fa      	ldr	r2, [r7, #12]
 800efee:	fb02 f203 	mul.w	r2, r2, r3
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eff8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800effa:	e072      	b.n	800f0e2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d133      	bne.n	800f06a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800f002:	4b3c      	ldr	r3, [pc, #240]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f00a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f00e:	d169      	bne.n	800f0e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800f010:	4b38      	ldr	r3, [pc, #224]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f012:	691b      	ldr	r3, [r3, #16]
 800f014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d063      	beq.n	800f0e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800f01c:	4b35      	ldr	r3, [pc, #212]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	091b      	lsrs	r3, r3, #4
 800f022:	f003 0307 	and.w	r3, r3, #7
 800f026:	3301      	adds	r3, #1
 800f028:	693a      	ldr	r2, [r7, #16]
 800f02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f02e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800f030:	4b30      	ldr	r3, [pc, #192]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f032:	691b      	ldr	r3, [r3, #16]
 800f034:	0a1b      	lsrs	r3, r3, #8
 800f036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f03a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10a      	bne.n	800f058 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800f042:	4b2c      	ldr	r3, [pc, #176]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f044:	691b      	ldr	r3, [r3, #16]
 800f046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d002      	beq.n	800f054 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800f04e:	2311      	movs	r3, #17
 800f050:	617b      	str	r3, [r7, #20]
 800f052:	e001      	b.n	800f058 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800f054:	2307      	movs	r3, #7
 800f056:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	68fa      	ldr	r2, [r7, #12]
 800f05c:	fb02 f203 	mul.w	r2, r2, r3
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	fbb2 f3f3 	udiv	r3, r2, r3
 800f066:	61fb      	str	r3, [r7, #28]
 800f068:	e03c      	b.n	800f0e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f070:	d003      	beq.n	800f07a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f078:	d134      	bne.n	800f0e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800f07a:	4b1e      	ldr	r3, [pc, #120]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f086:	d12d      	bne.n	800f0e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800f088:	4b1a      	ldr	r3, [pc, #104]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f08a:	695b      	ldr	r3, [r3, #20]
 800f08c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f090:	2b00      	cmp	r3, #0
 800f092:	d027      	beq.n	800f0e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800f094:	4b17      	ldr	r3, [pc, #92]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	091b      	lsrs	r3, r3, #4
 800f09a:	f003 0307 	and.w	r3, r3, #7
 800f09e:	3301      	adds	r3, #1
 800f0a0:	693a      	ldr	r2, [r7, #16]
 800f0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0a6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800f0a8:	4b12      	ldr	r3, [pc, #72]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f0aa:	695b      	ldr	r3, [r3, #20]
 800f0ac:	0a1b      	lsrs	r3, r3, #8
 800f0ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0b2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d10a      	bne.n	800f0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800f0ba:	4b0e      	ldr	r3, [pc, #56]	; (800f0f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f0bc:	695b      	ldr	r3, [r3, #20]
 800f0be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d002      	beq.n	800f0cc <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800f0c6:	2311      	movs	r3, #17
 800f0c8:	617b      	str	r3, [r7, #20]
 800f0ca:	e001      	b.n	800f0d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800f0cc:	2307      	movs	r3, #7
 800f0ce:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	68fa      	ldr	r2, [r7, #12]
 800f0d4:	fb02 f203 	mul.w	r2, r2, r3
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0de:	61fb      	str	r3, [r7, #28]
 800f0e0:	e000      	b.n	800f0e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800f0e2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800f0e4:	69fb      	ldr	r3, [r7, #28]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3724      	adds	r7, #36	; 0x24
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop
 800f0f4:	40021000 	.word	0x40021000
 800f0f8:	001fff68 	.word	0x001fff68

0800f0fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d101      	bne.n	800f10e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f10a:	2301      	movs	r3, #1
 800f10c:	e095      	b.n	800f23a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f112:	2b00      	cmp	r3, #0
 800f114:	d108      	bne.n	800f128 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f11e:	d009      	beq.n	800f134 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	61da      	str	r2, [r3, #28]
 800f126:	e005      	b.n	800f134 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	d106      	bne.n	800f154 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2200      	movs	r2, #0
 800f14a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f7f2 ffe6 	bl	8002120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2202      	movs	r2, #2
 800f158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f16a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f174:	d902      	bls.n	800f17c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f176:	2300      	movs	r3, #0
 800f178:	60fb      	str	r3, [r7, #12]
 800f17a:	e002      	b.n	800f182 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f17c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f180:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	68db      	ldr	r3, [r3, #12]
 800f186:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800f18a:	d007      	beq.n	800f19c <HAL_SPI_Init+0xa0>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f194:	d002      	beq.n	800f19c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f1ac:	431a      	orrs	r2, r3
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	f003 0302 	and.w	r3, r3, #2
 800f1b6:	431a      	orrs	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	f003 0301 	and.w	r3, r3, #1
 800f1c0:	431a      	orrs	r2, r3
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	699b      	ldr	r3, [r3, #24]
 800f1c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f1ca:	431a      	orrs	r2, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	69db      	ldr	r3, [r3, #28]
 800f1d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f1d4:	431a      	orrs	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6a1b      	ldr	r3, [r3, #32]
 800f1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1de:	ea42 0103 	orr.w	r1, r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	430a      	orrs	r2, r1
 800f1f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	699b      	ldr	r3, [r3, #24]
 800f1f6:	0c1b      	lsrs	r3, r3, #16
 800f1f8:	f003 0204 	and.w	r2, r3, #4
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f200:	f003 0310 	and.w	r3, r3, #16
 800f204:	431a      	orrs	r2, r3
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f20a:	f003 0308 	and.w	r3, r3, #8
 800f20e:	431a      	orrs	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f218:	ea42 0103 	orr.w	r1, r2, r3
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	430a      	orrs	r2, r1
 800f228:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2200      	movs	r2, #0
 800f22e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2201      	movs	r2, #1
 800f234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}

0800f242 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f242:	b580      	push	{r7, lr}
 800f244:	b082      	sub	sp, #8
 800f246:	af00      	add	r7, sp, #0
 800f248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d101      	bne.n	800f254 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f250:	2301      	movs	r3, #1
 800f252:	e049      	b.n	800f2e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d106      	bne.n	800f26e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2200      	movs	r2, #0
 800f264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 f841 	bl	800f2f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2202      	movs	r2, #2
 800f272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681a      	ldr	r2, [r3, #0]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	3304      	adds	r3, #4
 800f27e:	4619      	mov	r1, r3
 800f280:	4610      	mov	r0, r2
 800f282:	f000 f9f7 	bl	800f674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2201      	movs	r2, #1
 800f28a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2201      	movs	r2, #1
 800f292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2201      	movs	r2, #1
 800f29a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2201      	movs	r2, #1
 800f2da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f2e6:	2300      	movs	r3, #0
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3708      	adds	r7, #8
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f2f8:	bf00      	nop
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f312:	b2db      	uxtb	r3, r3
 800f314:	2b01      	cmp	r3, #1
 800f316:	d001      	beq.n	800f31c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f318:	2301      	movs	r3, #1
 800f31a:	e04f      	b.n	800f3bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2202      	movs	r2, #2
 800f320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	68da      	ldr	r2, [r3, #12]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f042 0201 	orr.w	r2, r2, #1
 800f332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4a23      	ldr	r2, [pc, #140]	; (800f3c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d01d      	beq.n	800f37a <HAL_TIM_Base_Start_IT+0x76>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f346:	d018      	beq.n	800f37a <HAL_TIM_Base_Start_IT+0x76>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4a1f      	ldr	r2, [pc, #124]	; (800f3cc <HAL_TIM_Base_Start_IT+0xc8>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d013      	beq.n	800f37a <HAL_TIM_Base_Start_IT+0x76>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4a1e      	ldr	r2, [pc, #120]	; (800f3d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d00e      	beq.n	800f37a <HAL_TIM_Base_Start_IT+0x76>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4a1c      	ldr	r2, [pc, #112]	; (800f3d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d009      	beq.n	800f37a <HAL_TIM_Base_Start_IT+0x76>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a1b      	ldr	r2, [pc, #108]	; (800f3d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d004      	beq.n	800f37a <HAL_TIM_Base_Start_IT+0x76>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a19      	ldr	r2, [pc, #100]	; (800f3dc <HAL_TIM_Base_Start_IT+0xd8>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d115      	bne.n	800f3a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	689a      	ldr	r2, [r3, #8]
 800f380:	4b17      	ldr	r3, [pc, #92]	; (800f3e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800f382:	4013      	ands	r3, r2
 800f384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2b06      	cmp	r3, #6
 800f38a:	d015      	beq.n	800f3b8 <HAL_TIM_Base_Start_IT+0xb4>
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f392:	d011      	beq.n	800f3b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f042 0201 	orr.w	r2, r2, #1
 800f3a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3a4:	e008      	b.n	800f3b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f042 0201 	orr.w	r2, r2, #1
 800f3b4:	601a      	str	r2, [r3, #0]
 800f3b6:	e000      	b.n	800f3ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f3ba:	2300      	movs	r3, #0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3714      	adds	r7, #20
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	40012c00 	.word	0x40012c00
 800f3cc:	40000400 	.word	0x40000400
 800f3d0:	40000800 	.word	0x40000800
 800f3d4:	40000c00 	.word	0x40000c00
 800f3d8:	40013400 	.word	0x40013400
 800f3dc:	40014000 	.word	0x40014000
 800f3e0:	00010007 	.word	0x00010007

0800f3e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	691b      	ldr	r3, [r3, #16]
 800f3f2:	f003 0302 	and.w	r3, r3, #2
 800f3f6:	2b02      	cmp	r3, #2
 800f3f8:	d122      	bne.n	800f440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	f003 0302 	and.w	r3, r3, #2
 800f404:	2b02      	cmp	r3, #2
 800f406:	d11b      	bne.n	800f440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f06f 0202 	mvn.w	r2, #2
 800f410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2201      	movs	r2, #1
 800f416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	699b      	ldr	r3, [r3, #24]
 800f41e:	f003 0303 	and.w	r3, r3, #3
 800f422:	2b00      	cmp	r3, #0
 800f424:	d003      	beq.n	800f42e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f000 f905 	bl	800f636 <HAL_TIM_IC_CaptureCallback>
 800f42c:	e005      	b.n	800f43a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 f8f7 	bl	800f622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 f908 	bl	800f64a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2200      	movs	r2, #0
 800f43e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	f003 0304 	and.w	r3, r3, #4
 800f44a:	2b04      	cmp	r3, #4
 800f44c:	d122      	bne.n	800f494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	f003 0304 	and.w	r3, r3, #4
 800f458:	2b04      	cmp	r3, #4
 800f45a:	d11b      	bne.n	800f494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f06f 0204 	mvn.w	r2, #4
 800f464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2202      	movs	r2, #2
 800f46a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	699b      	ldr	r3, [r3, #24]
 800f472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f476:	2b00      	cmp	r3, #0
 800f478:	d003      	beq.n	800f482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 f8db 	bl	800f636 <HAL_TIM_IC_CaptureCallback>
 800f480:	e005      	b.n	800f48e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 f8cd 	bl	800f622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 f8de 	bl	800f64a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2200      	movs	r2, #0
 800f492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	f003 0308 	and.w	r3, r3, #8
 800f49e:	2b08      	cmp	r3, #8
 800f4a0:	d122      	bne.n	800f4e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	68db      	ldr	r3, [r3, #12]
 800f4a8:	f003 0308 	and.w	r3, r3, #8
 800f4ac:	2b08      	cmp	r3, #8
 800f4ae:	d11b      	bne.n	800f4e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f06f 0208 	mvn.w	r2, #8
 800f4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2204      	movs	r2, #4
 800f4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	69db      	ldr	r3, [r3, #28]
 800f4c6:	f003 0303 	and.w	r3, r3, #3
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d003      	beq.n	800f4d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 f8b1 	bl	800f636 <HAL_TIM_IC_CaptureCallback>
 800f4d4:	e005      	b.n	800f4e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 f8a3 	bl	800f622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f000 f8b4 	bl	800f64a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	691b      	ldr	r3, [r3, #16]
 800f4ee:	f003 0310 	and.w	r3, r3, #16
 800f4f2:	2b10      	cmp	r3, #16
 800f4f4:	d122      	bne.n	800f53c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	f003 0310 	and.w	r3, r3, #16
 800f500:	2b10      	cmp	r3, #16
 800f502:	d11b      	bne.n	800f53c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f06f 0210 	mvn.w	r2, #16
 800f50c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2208      	movs	r2, #8
 800f512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	69db      	ldr	r3, [r3, #28]
 800f51a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d003      	beq.n	800f52a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f000 f887 	bl	800f636 <HAL_TIM_IC_CaptureCallback>
 800f528:	e005      	b.n	800f536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 f879 	bl	800f622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 f88a 	bl	800f64a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2200      	movs	r2, #0
 800f53a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	691b      	ldr	r3, [r3, #16]
 800f542:	f003 0301 	and.w	r3, r3, #1
 800f546:	2b01      	cmp	r3, #1
 800f548:	d10e      	bne.n	800f568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	f003 0301 	and.w	r3, r3, #1
 800f554:	2b01      	cmp	r3, #1
 800f556:	d107      	bne.n	800f568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f06f 0201 	mvn.w	r2, #1
 800f560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7f2 fd1a 	bl	8001f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	691b      	ldr	r3, [r3, #16]
 800f56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f572:	2b80      	cmp	r3, #128	; 0x80
 800f574:	d10e      	bne.n	800f594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f580:	2b80      	cmp	r3, #128	; 0x80
 800f582:	d107      	bne.n	800f594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f58c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 f914 	bl	800f7bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	691b      	ldr	r3, [r3, #16]
 800f59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5a2:	d10e      	bne.n	800f5c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5ae:	2b80      	cmp	r3, #128	; 0x80
 800f5b0:	d107      	bne.n	800f5c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f5ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 f907 	bl	800f7d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	691b      	ldr	r3, [r3, #16]
 800f5c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5cc:	2b40      	cmp	r3, #64	; 0x40
 800f5ce:	d10e      	bne.n	800f5ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5da:	2b40      	cmp	r3, #64	; 0x40
 800f5dc:	d107      	bne.n	800f5ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f5e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f838 	bl	800f65e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	691b      	ldr	r3, [r3, #16]
 800f5f4:	f003 0320 	and.w	r3, r3, #32
 800f5f8:	2b20      	cmp	r3, #32
 800f5fa:	d10e      	bne.n	800f61a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	f003 0320 	and.w	r3, r3, #32
 800f606:	2b20      	cmp	r3, #32
 800f608:	d107      	bne.n	800f61a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f06f 0220 	mvn.w	r2, #32
 800f612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 f8c7 	bl	800f7a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f61a:	bf00      	nop
 800f61c:	3708      	adds	r7, #8
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f622:	b480      	push	{r7}
 800f624:	b083      	sub	sp, #12
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f62a:	bf00      	nop
 800f62c:	370c      	adds	r7, #12
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr

0800f636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f636:	b480      	push	{r7}
 800f638:	b083      	sub	sp, #12
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f63e:	bf00      	nop
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f64a:	b480      	push	{r7}
 800f64c:	b083      	sub	sp, #12
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f652:	bf00      	nop
 800f654:	370c      	adds	r7, #12
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr

0800f65e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f65e:	b480      	push	{r7}
 800f660:	b083      	sub	sp, #12
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f666:	bf00      	nop
 800f668:	370c      	adds	r7, #12
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
	...

0800f674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f674:	b480      	push	{r7}
 800f676:	b085      	sub	sp, #20
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4a40      	ldr	r2, [pc, #256]	; (800f788 <TIM_Base_SetConfig+0x114>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d013      	beq.n	800f6b4 <TIM_Base_SetConfig+0x40>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f692:	d00f      	beq.n	800f6b4 <TIM_Base_SetConfig+0x40>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	4a3d      	ldr	r2, [pc, #244]	; (800f78c <TIM_Base_SetConfig+0x118>)
 800f698:	4293      	cmp	r3, r2
 800f69a:	d00b      	beq.n	800f6b4 <TIM_Base_SetConfig+0x40>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4a3c      	ldr	r2, [pc, #240]	; (800f790 <TIM_Base_SetConfig+0x11c>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d007      	beq.n	800f6b4 <TIM_Base_SetConfig+0x40>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	4a3b      	ldr	r2, [pc, #236]	; (800f794 <TIM_Base_SetConfig+0x120>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d003      	beq.n	800f6b4 <TIM_Base_SetConfig+0x40>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	4a3a      	ldr	r2, [pc, #232]	; (800f798 <TIM_Base_SetConfig+0x124>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d108      	bne.n	800f6c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4a2f      	ldr	r2, [pc, #188]	; (800f788 <TIM_Base_SetConfig+0x114>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d01f      	beq.n	800f70e <TIM_Base_SetConfig+0x9a>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6d4:	d01b      	beq.n	800f70e <TIM_Base_SetConfig+0x9a>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4a2c      	ldr	r2, [pc, #176]	; (800f78c <TIM_Base_SetConfig+0x118>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d017      	beq.n	800f70e <TIM_Base_SetConfig+0x9a>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4a2b      	ldr	r2, [pc, #172]	; (800f790 <TIM_Base_SetConfig+0x11c>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d013      	beq.n	800f70e <TIM_Base_SetConfig+0x9a>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4a2a      	ldr	r2, [pc, #168]	; (800f794 <TIM_Base_SetConfig+0x120>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d00f      	beq.n	800f70e <TIM_Base_SetConfig+0x9a>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4a29      	ldr	r2, [pc, #164]	; (800f798 <TIM_Base_SetConfig+0x124>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d00b      	beq.n	800f70e <TIM_Base_SetConfig+0x9a>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4a28      	ldr	r2, [pc, #160]	; (800f79c <TIM_Base_SetConfig+0x128>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d007      	beq.n	800f70e <TIM_Base_SetConfig+0x9a>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4a27      	ldr	r2, [pc, #156]	; (800f7a0 <TIM_Base_SetConfig+0x12c>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d003      	beq.n	800f70e <TIM_Base_SetConfig+0x9a>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	4a26      	ldr	r2, [pc, #152]	; (800f7a4 <TIM_Base_SetConfig+0x130>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d108      	bne.n	800f720 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	4313      	orrs	r3, r2
 800f71e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	695b      	ldr	r3, [r3, #20]
 800f72a:	4313      	orrs	r3, r2
 800f72c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	689a      	ldr	r2, [r3, #8]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	4a10      	ldr	r2, [pc, #64]	; (800f788 <TIM_Base_SetConfig+0x114>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d00f      	beq.n	800f76c <TIM_Base_SetConfig+0xf8>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	4a12      	ldr	r2, [pc, #72]	; (800f798 <TIM_Base_SetConfig+0x124>)
 800f750:	4293      	cmp	r3, r2
 800f752:	d00b      	beq.n	800f76c <TIM_Base_SetConfig+0xf8>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4a11      	ldr	r2, [pc, #68]	; (800f79c <TIM_Base_SetConfig+0x128>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d007      	beq.n	800f76c <TIM_Base_SetConfig+0xf8>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4a10      	ldr	r2, [pc, #64]	; (800f7a0 <TIM_Base_SetConfig+0x12c>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d003      	beq.n	800f76c <TIM_Base_SetConfig+0xf8>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	4a0f      	ldr	r2, [pc, #60]	; (800f7a4 <TIM_Base_SetConfig+0x130>)
 800f768:	4293      	cmp	r3, r2
 800f76a:	d103      	bne.n	800f774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	691a      	ldr	r2, [r3, #16]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2201      	movs	r2, #1
 800f778:	615a      	str	r2, [r3, #20]
}
 800f77a:	bf00      	nop
 800f77c:	3714      	adds	r7, #20
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop
 800f788:	40012c00 	.word	0x40012c00
 800f78c:	40000400 	.word	0x40000400
 800f790:	40000800 	.word	0x40000800
 800f794:	40000c00 	.word	0x40000c00
 800f798:	40013400 	.word	0x40013400
 800f79c:	40014000 	.word	0x40014000
 800f7a0:	40014400 	.word	0x40014400
 800f7a4:	40014800 	.word	0x40014800

0800f7a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f7b0:	bf00      	nop
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b083      	sub	sp, #12
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f7c4:	bf00      	nop
 800f7c6:	370c      	adds	r7, #12
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f7d8:	bf00      	nop
 800f7da:	370c      	adds	r7, #12
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr

0800f7e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d101      	bne.n	800f7f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e040      	b.n	800f878 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d106      	bne.n	800f80c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2200      	movs	r2, #0
 800f802:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f7f2 fcce 	bl	80021a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2224      	movs	r2, #36	; 0x24
 800f810:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f022 0201 	bic.w	r2, r2, #1
 800f820:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 f8c0 	bl	800f9a8 <UART_SetConfig>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d101      	bne.n	800f832 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f82e:	2301      	movs	r3, #1
 800f830:	e022      	b.n	800f878 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f836:	2b00      	cmp	r3, #0
 800f838:	d002      	beq.n	800f840 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 fb3e 	bl	800febc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	685a      	ldr	r2, [r3, #4]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f84e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	689a      	ldr	r2, [r3, #8]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f85e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f042 0201 	orr.w	r2, r2, #1
 800f86e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fbc5 	bl	8010000 <UART_CheckIdleState>
 800f876:	4603      	mov	r3, r0
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b08a      	sub	sp, #40	; 0x28
 800f884:	af02      	add	r7, sp, #8
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	603b      	str	r3, [r7, #0]
 800f88c:	4613      	mov	r3, r2
 800f88e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f894:	2b20      	cmp	r3, #32
 800f896:	f040 8082 	bne.w	800f99e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <HAL_UART_Transmit+0x26>
 800f8a0:	88fb      	ldrh	r3, [r7, #6]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d101      	bne.n	800f8aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e07a      	b.n	800f9a0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d101      	bne.n	800f8b8 <HAL_UART_Transmit+0x38>
 800f8b4:	2302      	movs	r3, #2
 800f8b6:	e073      	b.n	800f9a0 <HAL_UART_Transmit+0x120>
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2221      	movs	r2, #33	; 0x21
 800f8cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f8ce:	f7fb fe53 	bl	800b578 <HAL_GetTick>
 800f8d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	88fa      	ldrh	r2, [r7, #6]
 800f8d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	88fa      	ldrh	r2, [r7, #6]
 800f8e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8ec:	d108      	bne.n	800f900 <HAL_UART_Transmit+0x80>
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	691b      	ldr	r3, [r3, #16]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d104      	bne.n	800f900 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	61bb      	str	r3, [r7, #24]
 800f8fe:	e003      	b.n	800f908 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f904:	2300      	movs	r3, #0
 800f906:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2200      	movs	r2, #0
 800f90c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800f910:	e02d      	b.n	800f96e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	9300      	str	r3, [sp, #0]
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	2200      	movs	r2, #0
 800f91a:	2180      	movs	r1, #128	; 0x80
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f000 fbb8 	bl	8010092 <UART_WaitOnFlagUntilTimeout>
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d001      	beq.n	800f92c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800f928:	2303      	movs	r3, #3
 800f92a:	e039      	b.n	800f9a0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d10b      	bne.n	800f94a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f932:	69bb      	ldr	r3, [r7, #24]
 800f934:	881a      	ldrh	r2, [r3, #0]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f93e:	b292      	uxth	r2, r2
 800f940:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	3302      	adds	r3, #2
 800f946:	61bb      	str	r3, [r7, #24]
 800f948:	e008      	b.n	800f95c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	781a      	ldrb	r2, [r3, #0]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	b292      	uxth	r2, r2
 800f954:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f956:	69fb      	ldr	r3, [r7, #28]
 800f958:	3301      	adds	r3, #1
 800f95a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f962:	b29b      	uxth	r3, r3
 800f964:	3b01      	subs	r3, #1
 800f966:	b29a      	uxth	r2, r3
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f974:	b29b      	uxth	r3, r3
 800f976:	2b00      	cmp	r3, #0
 800f978:	d1cb      	bne.n	800f912 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	9300      	str	r3, [sp, #0]
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	2200      	movs	r2, #0
 800f982:	2140      	movs	r1, #64	; 0x40
 800f984:	68f8      	ldr	r0, [r7, #12]
 800f986:	f000 fb84 	bl	8010092 <UART_WaitOnFlagUntilTimeout>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d001      	beq.n	800f994 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800f990:	2303      	movs	r3, #3
 800f992:	e005      	b.n	800f9a0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2220      	movs	r2, #32
 800f998:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800f99a:	2300      	movs	r3, #0
 800f99c:	e000      	b.n	800f9a0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800f99e:	2302      	movs	r3, #2
  }
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3720      	adds	r7, #32
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f9a8:	b5b0      	push	{r4, r5, r7, lr}
 800f9aa:	b088      	sub	sp, #32
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	689a      	ldr	r2, [r3, #8]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	691b      	ldr	r3, [r3, #16]
 800f9bc:	431a      	orrs	r2, r3
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	695b      	ldr	r3, [r3, #20]
 800f9c2:	431a      	orrs	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	69db      	ldr	r3, [r3, #28]
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	4bad      	ldr	r3, [pc, #692]	; (800fc88 <UART_SetConfig+0x2e0>)
 800f9d4:	4013      	ands	r3, r2
 800f9d6:	687a      	ldr	r2, [r7, #4]
 800f9d8:	6812      	ldr	r2, [r2, #0]
 800f9da:	69f9      	ldr	r1, [r7, #28]
 800f9dc:	430b      	orrs	r3, r1
 800f9de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	68da      	ldr	r2, [r3, #12]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	430a      	orrs	r2, r1
 800f9f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	699b      	ldr	r3, [r3, #24]
 800f9fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4aa2      	ldr	r2, [pc, #648]	; (800fc8c <UART_SetConfig+0x2e4>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d004      	beq.n	800fa10 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	69fa      	ldr	r2, [r7, #28]
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	689b      	ldr	r3, [r3, #8]
 800fa16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	69fa      	ldr	r2, [r7, #28]
 800fa20:	430a      	orrs	r2, r1
 800fa22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	4a99      	ldr	r2, [pc, #612]	; (800fc90 <UART_SetConfig+0x2e8>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d121      	bne.n	800fa72 <UART_SetConfig+0xca>
 800fa2e:	4b99      	ldr	r3, [pc, #612]	; (800fc94 <UART_SetConfig+0x2ec>)
 800fa30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa34:	f003 0303 	and.w	r3, r3, #3
 800fa38:	2b03      	cmp	r3, #3
 800fa3a:	d817      	bhi.n	800fa6c <UART_SetConfig+0xc4>
 800fa3c:	a201      	add	r2, pc, #4	; (adr r2, 800fa44 <UART_SetConfig+0x9c>)
 800fa3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa42:	bf00      	nop
 800fa44:	0800fa55 	.word	0x0800fa55
 800fa48:	0800fa61 	.word	0x0800fa61
 800fa4c:	0800fa5b 	.word	0x0800fa5b
 800fa50:	0800fa67 	.word	0x0800fa67
 800fa54:	2301      	movs	r3, #1
 800fa56:	76fb      	strb	r3, [r7, #27]
 800fa58:	e0e7      	b.n	800fc2a <UART_SetConfig+0x282>
 800fa5a:	2302      	movs	r3, #2
 800fa5c:	76fb      	strb	r3, [r7, #27]
 800fa5e:	e0e4      	b.n	800fc2a <UART_SetConfig+0x282>
 800fa60:	2304      	movs	r3, #4
 800fa62:	76fb      	strb	r3, [r7, #27]
 800fa64:	e0e1      	b.n	800fc2a <UART_SetConfig+0x282>
 800fa66:	2308      	movs	r3, #8
 800fa68:	76fb      	strb	r3, [r7, #27]
 800fa6a:	e0de      	b.n	800fc2a <UART_SetConfig+0x282>
 800fa6c:	2310      	movs	r3, #16
 800fa6e:	76fb      	strb	r3, [r7, #27]
 800fa70:	e0db      	b.n	800fc2a <UART_SetConfig+0x282>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4a88      	ldr	r2, [pc, #544]	; (800fc98 <UART_SetConfig+0x2f0>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d132      	bne.n	800fae2 <UART_SetConfig+0x13a>
 800fa7c:	4b85      	ldr	r3, [pc, #532]	; (800fc94 <UART_SetConfig+0x2ec>)
 800fa7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa82:	f003 030c 	and.w	r3, r3, #12
 800fa86:	2b0c      	cmp	r3, #12
 800fa88:	d828      	bhi.n	800fadc <UART_SetConfig+0x134>
 800fa8a:	a201      	add	r2, pc, #4	; (adr r2, 800fa90 <UART_SetConfig+0xe8>)
 800fa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa90:	0800fac5 	.word	0x0800fac5
 800fa94:	0800fadd 	.word	0x0800fadd
 800fa98:	0800fadd 	.word	0x0800fadd
 800fa9c:	0800fadd 	.word	0x0800fadd
 800faa0:	0800fad1 	.word	0x0800fad1
 800faa4:	0800fadd 	.word	0x0800fadd
 800faa8:	0800fadd 	.word	0x0800fadd
 800faac:	0800fadd 	.word	0x0800fadd
 800fab0:	0800facb 	.word	0x0800facb
 800fab4:	0800fadd 	.word	0x0800fadd
 800fab8:	0800fadd 	.word	0x0800fadd
 800fabc:	0800fadd 	.word	0x0800fadd
 800fac0:	0800fad7 	.word	0x0800fad7
 800fac4:	2300      	movs	r3, #0
 800fac6:	76fb      	strb	r3, [r7, #27]
 800fac8:	e0af      	b.n	800fc2a <UART_SetConfig+0x282>
 800faca:	2302      	movs	r3, #2
 800facc:	76fb      	strb	r3, [r7, #27]
 800face:	e0ac      	b.n	800fc2a <UART_SetConfig+0x282>
 800fad0:	2304      	movs	r3, #4
 800fad2:	76fb      	strb	r3, [r7, #27]
 800fad4:	e0a9      	b.n	800fc2a <UART_SetConfig+0x282>
 800fad6:	2308      	movs	r3, #8
 800fad8:	76fb      	strb	r3, [r7, #27]
 800fada:	e0a6      	b.n	800fc2a <UART_SetConfig+0x282>
 800fadc:	2310      	movs	r3, #16
 800fade:	76fb      	strb	r3, [r7, #27]
 800fae0:	e0a3      	b.n	800fc2a <UART_SetConfig+0x282>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	4a6d      	ldr	r2, [pc, #436]	; (800fc9c <UART_SetConfig+0x2f4>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d120      	bne.n	800fb2e <UART_SetConfig+0x186>
 800faec:	4b69      	ldr	r3, [pc, #420]	; (800fc94 <UART_SetConfig+0x2ec>)
 800faee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800faf2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800faf6:	2b30      	cmp	r3, #48	; 0x30
 800faf8:	d013      	beq.n	800fb22 <UART_SetConfig+0x17a>
 800fafa:	2b30      	cmp	r3, #48	; 0x30
 800fafc:	d814      	bhi.n	800fb28 <UART_SetConfig+0x180>
 800fafe:	2b20      	cmp	r3, #32
 800fb00:	d009      	beq.n	800fb16 <UART_SetConfig+0x16e>
 800fb02:	2b20      	cmp	r3, #32
 800fb04:	d810      	bhi.n	800fb28 <UART_SetConfig+0x180>
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d002      	beq.n	800fb10 <UART_SetConfig+0x168>
 800fb0a:	2b10      	cmp	r3, #16
 800fb0c:	d006      	beq.n	800fb1c <UART_SetConfig+0x174>
 800fb0e:	e00b      	b.n	800fb28 <UART_SetConfig+0x180>
 800fb10:	2300      	movs	r3, #0
 800fb12:	76fb      	strb	r3, [r7, #27]
 800fb14:	e089      	b.n	800fc2a <UART_SetConfig+0x282>
 800fb16:	2302      	movs	r3, #2
 800fb18:	76fb      	strb	r3, [r7, #27]
 800fb1a:	e086      	b.n	800fc2a <UART_SetConfig+0x282>
 800fb1c:	2304      	movs	r3, #4
 800fb1e:	76fb      	strb	r3, [r7, #27]
 800fb20:	e083      	b.n	800fc2a <UART_SetConfig+0x282>
 800fb22:	2308      	movs	r3, #8
 800fb24:	76fb      	strb	r3, [r7, #27]
 800fb26:	e080      	b.n	800fc2a <UART_SetConfig+0x282>
 800fb28:	2310      	movs	r3, #16
 800fb2a:	76fb      	strb	r3, [r7, #27]
 800fb2c:	e07d      	b.n	800fc2a <UART_SetConfig+0x282>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	4a5b      	ldr	r2, [pc, #364]	; (800fca0 <UART_SetConfig+0x2f8>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d120      	bne.n	800fb7a <UART_SetConfig+0x1d2>
 800fb38:	4b56      	ldr	r3, [pc, #344]	; (800fc94 <UART_SetConfig+0x2ec>)
 800fb3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fb42:	2bc0      	cmp	r3, #192	; 0xc0
 800fb44:	d013      	beq.n	800fb6e <UART_SetConfig+0x1c6>
 800fb46:	2bc0      	cmp	r3, #192	; 0xc0
 800fb48:	d814      	bhi.n	800fb74 <UART_SetConfig+0x1cc>
 800fb4a:	2b80      	cmp	r3, #128	; 0x80
 800fb4c:	d009      	beq.n	800fb62 <UART_SetConfig+0x1ba>
 800fb4e:	2b80      	cmp	r3, #128	; 0x80
 800fb50:	d810      	bhi.n	800fb74 <UART_SetConfig+0x1cc>
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d002      	beq.n	800fb5c <UART_SetConfig+0x1b4>
 800fb56:	2b40      	cmp	r3, #64	; 0x40
 800fb58:	d006      	beq.n	800fb68 <UART_SetConfig+0x1c0>
 800fb5a:	e00b      	b.n	800fb74 <UART_SetConfig+0x1cc>
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	76fb      	strb	r3, [r7, #27]
 800fb60:	e063      	b.n	800fc2a <UART_SetConfig+0x282>
 800fb62:	2302      	movs	r3, #2
 800fb64:	76fb      	strb	r3, [r7, #27]
 800fb66:	e060      	b.n	800fc2a <UART_SetConfig+0x282>
 800fb68:	2304      	movs	r3, #4
 800fb6a:	76fb      	strb	r3, [r7, #27]
 800fb6c:	e05d      	b.n	800fc2a <UART_SetConfig+0x282>
 800fb6e:	2308      	movs	r3, #8
 800fb70:	76fb      	strb	r3, [r7, #27]
 800fb72:	e05a      	b.n	800fc2a <UART_SetConfig+0x282>
 800fb74:	2310      	movs	r3, #16
 800fb76:	76fb      	strb	r3, [r7, #27]
 800fb78:	e057      	b.n	800fc2a <UART_SetConfig+0x282>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a49      	ldr	r2, [pc, #292]	; (800fca4 <UART_SetConfig+0x2fc>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d125      	bne.n	800fbd0 <UART_SetConfig+0x228>
 800fb84:	4b43      	ldr	r3, [pc, #268]	; (800fc94 <UART_SetConfig+0x2ec>)
 800fb86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb92:	d017      	beq.n	800fbc4 <UART_SetConfig+0x21c>
 800fb94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb98:	d817      	bhi.n	800fbca <UART_SetConfig+0x222>
 800fb9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb9e:	d00b      	beq.n	800fbb8 <UART_SetConfig+0x210>
 800fba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fba4:	d811      	bhi.n	800fbca <UART_SetConfig+0x222>
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d003      	beq.n	800fbb2 <UART_SetConfig+0x20a>
 800fbaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbae:	d006      	beq.n	800fbbe <UART_SetConfig+0x216>
 800fbb0:	e00b      	b.n	800fbca <UART_SetConfig+0x222>
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	76fb      	strb	r3, [r7, #27]
 800fbb6:	e038      	b.n	800fc2a <UART_SetConfig+0x282>
 800fbb8:	2302      	movs	r3, #2
 800fbba:	76fb      	strb	r3, [r7, #27]
 800fbbc:	e035      	b.n	800fc2a <UART_SetConfig+0x282>
 800fbbe:	2304      	movs	r3, #4
 800fbc0:	76fb      	strb	r3, [r7, #27]
 800fbc2:	e032      	b.n	800fc2a <UART_SetConfig+0x282>
 800fbc4:	2308      	movs	r3, #8
 800fbc6:	76fb      	strb	r3, [r7, #27]
 800fbc8:	e02f      	b.n	800fc2a <UART_SetConfig+0x282>
 800fbca:	2310      	movs	r3, #16
 800fbcc:	76fb      	strb	r3, [r7, #27]
 800fbce:	e02c      	b.n	800fc2a <UART_SetConfig+0x282>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4a2d      	ldr	r2, [pc, #180]	; (800fc8c <UART_SetConfig+0x2e4>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d125      	bne.n	800fc26 <UART_SetConfig+0x27e>
 800fbda:	4b2e      	ldr	r3, [pc, #184]	; (800fc94 <UART_SetConfig+0x2ec>)
 800fbdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbe0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fbe4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fbe8:	d017      	beq.n	800fc1a <UART_SetConfig+0x272>
 800fbea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fbee:	d817      	bhi.n	800fc20 <UART_SetConfig+0x278>
 800fbf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fbf4:	d00b      	beq.n	800fc0e <UART_SetConfig+0x266>
 800fbf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fbfa:	d811      	bhi.n	800fc20 <UART_SetConfig+0x278>
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d003      	beq.n	800fc08 <UART_SetConfig+0x260>
 800fc00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc04:	d006      	beq.n	800fc14 <UART_SetConfig+0x26c>
 800fc06:	e00b      	b.n	800fc20 <UART_SetConfig+0x278>
 800fc08:	2300      	movs	r3, #0
 800fc0a:	76fb      	strb	r3, [r7, #27]
 800fc0c:	e00d      	b.n	800fc2a <UART_SetConfig+0x282>
 800fc0e:	2302      	movs	r3, #2
 800fc10:	76fb      	strb	r3, [r7, #27]
 800fc12:	e00a      	b.n	800fc2a <UART_SetConfig+0x282>
 800fc14:	2304      	movs	r3, #4
 800fc16:	76fb      	strb	r3, [r7, #27]
 800fc18:	e007      	b.n	800fc2a <UART_SetConfig+0x282>
 800fc1a:	2308      	movs	r3, #8
 800fc1c:	76fb      	strb	r3, [r7, #27]
 800fc1e:	e004      	b.n	800fc2a <UART_SetConfig+0x282>
 800fc20:	2310      	movs	r3, #16
 800fc22:	76fb      	strb	r3, [r7, #27]
 800fc24:	e001      	b.n	800fc2a <UART_SetConfig+0x282>
 800fc26:	2310      	movs	r3, #16
 800fc28:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	4a17      	ldr	r2, [pc, #92]	; (800fc8c <UART_SetConfig+0x2e4>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	f040 8087 	bne.w	800fd44 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fc36:	7efb      	ldrb	r3, [r7, #27]
 800fc38:	2b08      	cmp	r3, #8
 800fc3a:	d837      	bhi.n	800fcac <UART_SetConfig+0x304>
 800fc3c:	a201      	add	r2, pc, #4	; (adr r2, 800fc44 <UART_SetConfig+0x29c>)
 800fc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc42:	bf00      	nop
 800fc44:	0800fc69 	.word	0x0800fc69
 800fc48:	0800fcad 	.word	0x0800fcad
 800fc4c:	0800fc71 	.word	0x0800fc71
 800fc50:	0800fcad 	.word	0x0800fcad
 800fc54:	0800fc77 	.word	0x0800fc77
 800fc58:	0800fcad 	.word	0x0800fcad
 800fc5c:	0800fcad 	.word	0x0800fcad
 800fc60:	0800fcad 	.word	0x0800fcad
 800fc64:	0800fc7f 	.word	0x0800fc7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc68:	f7fd fe64 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800fc6c:	6178      	str	r0, [r7, #20]
        break;
 800fc6e:	e022      	b.n	800fcb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fc70:	4b0d      	ldr	r3, [pc, #52]	; (800fca8 <UART_SetConfig+0x300>)
 800fc72:	617b      	str	r3, [r7, #20]
        break;
 800fc74:	e01f      	b.n	800fcb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fc76:	f7fd fdc5 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800fc7a:	6178      	str	r0, [r7, #20]
        break;
 800fc7c:	e01b      	b.n	800fcb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc82:	617b      	str	r3, [r7, #20]
        break;
 800fc84:	e017      	b.n	800fcb6 <UART_SetConfig+0x30e>
 800fc86:	bf00      	nop
 800fc88:	efff69f3 	.word	0xefff69f3
 800fc8c:	40008000 	.word	0x40008000
 800fc90:	40013800 	.word	0x40013800
 800fc94:	40021000 	.word	0x40021000
 800fc98:	40004400 	.word	0x40004400
 800fc9c:	40004800 	.word	0x40004800
 800fca0:	40004c00 	.word	0x40004c00
 800fca4:	40005000 	.word	0x40005000
 800fca8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800fcac:	2300      	movs	r3, #0
 800fcae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	76bb      	strb	r3, [r7, #26]
        break;
 800fcb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 80f1 	beq.w	800fea0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	685a      	ldr	r2, [r3, #4]
 800fcc2:	4613      	mov	r3, r2
 800fcc4:	005b      	lsls	r3, r3, #1
 800fcc6:	4413      	add	r3, r2
 800fcc8:	697a      	ldr	r2, [r7, #20]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d305      	bcc.n	800fcda <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800fcd4:	697a      	ldr	r2, [r7, #20]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d902      	bls.n	800fce0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800fcda:	2301      	movs	r3, #1
 800fcdc:	76bb      	strb	r3, [r7, #26]
 800fcde:	e0df      	b.n	800fea0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	4618      	mov	r0, r3
 800fce4:	f04f 0100 	mov.w	r1, #0
 800fce8:	f04f 0200 	mov.w	r2, #0
 800fcec:	f04f 0300 	mov.w	r3, #0
 800fcf0:	020b      	lsls	r3, r1, #8
 800fcf2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fcf6:	0202      	lsls	r2, r0, #8
 800fcf8:	6879      	ldr	r1, [r7, #4]
 800fcfa:	6849      	ldr	r1, [r1, #4]
 800fcfc:	0849      	lsrs	r1, r1, #1
 800fcfe:	4608      	mov	r0, r1
 800fd00:	f04f 0100 	mov.w	r1, #0
 800fd04:	1814      	adds	r4, r2, r0
 800fd06:	eb43 0501 	adc.w	r5, r3, r1
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	461a      	mov	r2, r3
 800fd10:	f04f 0300 	mov.w	r3, #0
 800fd14:	4620      	mov	r0, r4
 800fd16:	4629      	mov	r1, r5
 800fd18:	f7f0 ff46 	bl	8000ba8 <__aeabi_uldivmod>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	460b      	mov	r3, r1
 800fd20:	4613      	mov	r3, r2
 800fd22:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd2a:	d308      	bcc.n	800fd3e <UART_SetConfig+0x396>
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd32:	d204      	bcs.n	800fd3e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	693a      	ldr	r2, [r7, #16]
 800fd3a:	60da      	str	r2, [r3, #12]
 800fd3c:	e0b0      	b.n	800fea0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	76bb      	strb	r3, [r7, #26]
 800fd42:	e0ad      	b.n	800fea0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	69db      	ldr	r3, [r3, #28]
 800fd48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd4c:	d15c      	bne.n	800fe08 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800fd4e:	7efb      	ldrb	r3, [r7, #27]
 800fd50:	2b08      	cmp	r3, #8
 800fd52:	d828      	bhi.n	800fda6 <UART_SetConfig+0x3fe>
 800fd54:	a201      	add	r2, pc, #4	; (adr r2, 800fd5c <UART_SetConfig+0x3b4>)
 800fd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd5a:	bf00      	nop
 800fd5c:	0800fd81 	.word	0x0800fd81
 800fd60:	0800fd89 	.word	0x0800fd89
 800fd64:	0800fd91 	.word	0x0800fd91
 800fd68:	0800fda7 	.word	0x0800fda7
 800fd6c:	0800fd97 	.word	0x0800fd97
 800fd70:	0800fda7 	.word	0x0800fda7
 800fd74:	0800fda7 	.word	0x0800fda7
 800fd78:	0800fda7 	.word	0x0800fda7
 800fd7c:	0800fd9f 	.word	0x0800fd9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd80:	f7fd fdd8 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800fd84:	6178      	str	r0, [r7, #20]
        break;
 800fd86:	e013      	b.n	800fdb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd88:	f7fd fdea 	bl	800d960 <HAL_RCC_GetPCLK2Freq>
 800fd8c:	6178      	str	r0, [r7, #20]
        break;
 800fd8e:	e00f      	b.n	800fdb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fd90:	4b49      	ldr	r3, [pc, #292]	; (800feb8 <UART_SetConfig+0x510>)
 800fd92:	617b      	str	r3, [r7, #20]
        break;
 800fd94:	e00c      	b.n	800fdb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fd96:	f7fd fd35 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800fd9a:	6178      	str	r0, [r7, #20]
        break;
 800fd9c:	e008      	b.n	800fdb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fda2:	617b      	str	r3, [r7, #20]
        break;
 800fda4:	e004      	b.n	800fdb0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800fda6:	2300      	movs	r3, #0
 800fda8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	76bb      	strb	r3, [r7, #26]
        break;
 800fdae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d074      	beq.n	800fea0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	005a      	lsls	r2, r3, #1
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	085b      	lsrs	r3, r3, #1
 800fdc0:	441a      	add	r2, r3
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	2b0f      	cmp	r3, #15
 800fdd2:	d916      	bls.n	800fe02 <UART_SetConfig+0x45a>
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdda:	d212      	bcs.n	800fe02 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	f023 030f 	bic.w	r3, r3, #15
 800fde4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	085b      	lsrs	r3, r3, #1
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	f003 0307 	and.w	r3, r3, #7
 800fdf0:	b29a      	uxth	r2, r3
 800fdf2:	89fb      	ldrh	r3, [r7, #14]
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	89fa      	ldrh	r2, [r7, #14]
 800fdfe:	60da      	str	r2, [r3, #12]
 800fe00:	e04e      	b.n	800fea0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800fe02:	2301      	movs	r3, #1
 800fe04:	76bb      	strb	r3, [r7, #26]
 800fe06:	e04b      	b.n	800fea0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fe08:	7efb      	ldrb	r3, [r7, #27]
 800fe0a:	2b08      	cmp	r3, #8
 800fe0c:	d827      	bhi.n	800fe5e <UART_SetConfig+0x4b6>
 800fe0e:	a201      	add	r2, pc, #4	; (adr r2, 800fe14 <UART_SetConfig+0x46c>)
 800fe10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe14:	0800fe39 	.word	0x0800fe39
 800fe18:	0800fe41 	.word	0x0800fe41
 800fe1c:	0800fe49 	.word	0x0800fe49
 800fe20:	0800fe5f 	.word	0x0800fe5f
 800fe24:	0800fe4f 	.word	0x0800fe4f
 800fe28:	0800fe5f 	.word	0x0800fe5f
 800fe2c:	0800fe5f 	.word	0x0800fe5f
 800fe30:	0800fe5f 	.word	0x0800fe5f
 800fe34:	0800fe57 	.word	0x0800fe57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe38:	f7fd fd7c 	bl	800d934 <HAL_RCC_GetPCLK1Freq>
 800fe3c:	6178      	str	r0, [r7, #20]
        break;
 800fe3e:	e013      	b.n	800fe68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe40:	f7fd fd8e 	bl	800d960 <HAL_RCC_GetPCLK2Freq>
 800fe44:	6178      	str	r0, [r7, #20]
        break;
 800fe46:	e00f      	b.n	800fe68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fe48:	4b1b      	ldr	r3, [pc, #108]	; (800feb8 <UART_SetConfig+0x510>)
 800fe4a:	617b      	str	r3, [r7, #20]
        break;
 800fe4c:	e00c      	b.n	800fe68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fe4e:	f7fd fcd9 	bl	800d804 <HAL_RCC_GetSysClockFreq>
 800fe52:	6178      	str	r0, [r7, #20]
        break;
 800fe54:	e008      	b.n	800fe68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe5a:	617b      	str	r3, [r7, #20]
        break;
 800fe5c:	e004      	b.n	800fe68 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800fe62:	2301      	movs	r3, #1
 800fe64:	76bb      	strb	r3, [r7, #26]
        break;
 800fe66:	bf00      	nop
    }

    if (pclk != 0U)
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d018      	beq.n	800fea0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	085a      	lsrs	r2, r3, #1
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	441a      	add	r2, r3
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	2b0f      	cmp	r3, #15
 800fe88:	d908      	bls.n	800fe9c <UART_SetConfig+0x4f4>
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe90:	d204      	bcs.n	800fe9c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	693a      	ldr	r2, [r7, #16]
 800fe98:	60da      	str	r2, [r3, #12]
 800fe9a:	e001      	b.n	800fea0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2200      	movs	r2, #0
 800fea4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2200      	movs	r2, #0
 800feaa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800feac:	7ebb      	ldrb	r3, [r7, #26]
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3720      	adds	r7, #32
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bdb0      	pop	{r4, r5, r7, pc}
 800feb6:	bf00      	nop
 800feb8:	00f42400 	.word	0x00f42400

0800febc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec8:	f003 0301 	and.w	r3, r3, #1
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00a      	beq.n	800fee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	430a      	orrs	r2, r1
 800fee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feea:	f003 0302 	and.w	r3, r3, #2
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00a      	beq.n	800ff08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	430a      	orrs	r2, r1
 800ff06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0c:	f003 0304 	and.w	r3, r3, #4
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d00a      	beq.n	800ff2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	430a      	orrs	r2, r1
 800ff28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff2e:	f003 0308 	and.w	r3, r3, #8
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00a      	beq.n	800ff4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	430a      	orrs	r2, r1
 800ff4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff50:	f003 0310 	and.w	r3, r3, #16
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00a      	beq.n	800ff6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	689b      	ldr	r3, [r3, #8]
 800ff5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	430a      	orrs	r2, r1
 800ff6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff72:	f003 0320 	and.w	r3, r3, #32
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d00a      	beq.n	800ff90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	689b      	ldr	r3, [r3, #8]
 800ff80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	430a      	orrs	r2, r1
 800ff8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d01a      	beq.n	800ffd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	430a      	orrs	r2, r1
 800ffb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffba:	d10a      	bne.n	800ffd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	430a      	orrs	r2, r1
 800ffd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d00a      	beq.n	800fff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	430a      	orrs	r2, r1
 800fff2:	605a      	str	r2, [r3, #4]
  }
}
 800fff4:	bf00      	nop
 800fff6:	370c      	adds	r7, #12
 800fff8:	46bd      	mov	sp, r7
 800fffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffe:	4770      	bx	lr

08010000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b086      	sub	sp, #24
 8010004:	af02      	add	r7, sp, #8
 8010006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010010:	f7fb fab2 	bl	800b578 <HAL_GetTick>
 8010014:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	f003 0308 	and.w	r3, r3, #8
 8010020:	2b08      	cmp	r3, #8
 8010022:	d10e      	bne.n	8010042 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010028:	9300      	str	r3, [sp, #0]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2200      	movs	r2, #0
 801002e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f000 f82d 	bl	8010092 <UART_WaitOnFlagUntilTimeout>
 8010038:	4603      	mov	r3, r0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d001      	beq.n	8010042 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801003e:	2303      	movs	r3, #3
 8010040:	e023      	b.n	801008a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f003 0304 	and.w	r3, r3, #4
 801004c:	2b04      	cmp	r3, #4
 801004e:	d10e      	bne.n	801006e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010050:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010054:	9300      	str	r3, [sp, #0]
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2200      	movs	r2, #0
 801005a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 f817 	bl	8010092 <UART_WaitOnFlagUntilTimeout>
 8010064:	4603      	mov	r3, r0
 8010066:	2b00      	cmp	r3, #0
 8010068:	d001      	beq.n	801006e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801006a:	2303      	movs	r3, #3
 801006c:	e00d      	b.n	801008a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2220      	movs	r2, #32
 8010072:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2220      	movs	r2, #32
 8010078:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2200      	movs	r2, #0
 801007e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2200      	movs	r2, #0
 8010084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010088:	2300      	movs	r3, #0
}
 801008a:	4618      	mov	r0, r3
 801008c:	3710      	adds	r7, #16
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b084      	sub	sp, #16
 8010096:	af00      	add	r7, sp, #0
 8010098:	60f8      	str	r0, [r7, #12]
 801009a:	60b9      	str	r1, [r7, #8]
 801009c:	603b      	str	r3, [r7, #0]
 801009e:	4613      	mov	r3, r2
 80100a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100a2:	e05e      	b.n	8010162 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100aa:	d05a      	beq.n	8010162 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100ac:	f7fb fa64 	bl	800b578 <HAL_GetTick>
 80100b0:	4602      	mov	r2, r0
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	69ba      	ldr	r2, [r7, #24]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d302      	bcc.n	80100c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80100bc:	69bb      	ldr	r3, [r7, #24]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d11b      	bne.n	80100fa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80100d0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	689a      	ldr	r2, [r3, #8]
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f022 0201 	bic.w	r2, r2, #1
 80100e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2220      	movs	r2, #32
 80100e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2220      	movs	r2, #32
 80100ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2200      	movs	r2, #0
 80100f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80100f6:	2303      	movs	r3, #3
 80100f8:	e043      	b.n	8010182 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f003 0304 	and.w	r3, r3, #4
 8010104:	2b00      	cmp	r3, #0
 8010106:	d02c      	beq.n	8010162 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	69db      	ldr	r3, [r3, #28]
 801010e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010116:	d124      	bne.n	8010162 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010120:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010130:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	689a      	ldr	r2, [r3, #8]
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f022 0201 	bic.w	r2, r2, #1
 8010140:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2220      	movs	r2, #32
 8010146:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2220      	movs	r2, #32
 801014c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2220      	movs	r2, #32
 8010152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2200      	movs	r2, #0
 801015a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801015e:	2303      	movs	r3, #3
 8010160:	e00f      	b.n	8010182 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	69da      	ldr	r2, [r3, #28]
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	4013      	ands	r3, r2
 801016c:	68ba      	ldr	r2, [r7, #8]
 801016e:	429a      	cmp	r2, r3
 8010170:	bf0c      	ite	eq
 8010172:	2301      	moveq	r3, #1
 8010174:	2300      	movne	r3, #0
 8010176:	b2db      	uxtb	r3, r3
 8010178:	461a      	mov	r2, r3
 801017a:	79fb      	ldrb	r3, [r7, #7]
 801017c:	429a      	cmp	r2, r3
 801017e:	d091      	beq.n	80100a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010180:	2300      	movs	r3, #0
}
 8010182:	4618      	mov	r0, r3
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801018a:	b480      	push	{r7}
 801018c:	b085      	sub	sp, #20
 801018e:	af00      	add	r7, sp, #0
 8010190:	4603      	mov	r3, r0
 8010192:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010194:	2300      	movs	r3, #0
 8010196:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801019c:	2b84      	cmp	r3, #132	; 0x84
 801019e:	d005      	beq.n	80101ac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80101a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	4413      	add	r3, r2
 80101a8:	3303      	adds	r3, #3
 80101aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80101ac:	68fb      	ldr	r3, [r7, #12]
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3714      	adds	r7, #20
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80101ba:	b480      	push	{r7}
 80101bc:	b083      	sub	sp, #12
 80101be:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101c0:	f3ef 8305 	mrs	r3, IPSR
 80101c4:	607b      	str	r3, [r7, #4]
  return(result);
 80101c6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	bf14      	ite	ne
 80101cc:	2301      	movne	r3, #1
 80101ce:	2300      	moveq	r3, #0
 80101d0:	b2db      	uxtb	r3, r3
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	370c      	adds	r7, #12
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr

080101de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80101de:	b580      	push	{r7, lr}
 80101e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80101e2:	f001 fa61 	bl	80116a8 <vTaskStartScheduler>
  
  return osOK;
 80101e6:	2300      	movs	r3, #0
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	bd80      	pop	{r7, pc}

080101ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80101ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ee:	b089      	sub	sp, #36	; 0x24
 80101f0:	af04      	add	r7, sp, #16
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	695b      	ldr	r3, [r3, #20]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d020      	beq.n	8010240 <osThreadCreate+0x54>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	699b      	ldr	r3, [r3, #24]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d01c      	beq.n	8010240 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	685c      	ldr	r4, [r3, #4]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681d      	ldr	r5, [r3, #0]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	691e      	ldr	r6, [r3, #16]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010218:	4618      	mov	r0, r3
 801021a:	f7ff ffb6 	bl	801018a <makeFreeRtosPriority>
 801021e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	695b      	ldr	r3, [r3, #20]
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010228:	9202      	str	r2, [sp, #8]
 801022a:	9301      	str	r3, [sp, #4]
 801022c:	9100      	str	r1, [sp, #0]
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	4632      	mov	r2, r6
 8010232:	4629      	mov	r1, r5
 8010234:	4620      	mov	r0, r4
 8010236:	f001 f807 	bl	8011248 <xTaskCreateStatic>
 801023a:	4603      	mov	r3, r0
 801023c:	60fb      	str	r3, [r7, #12]
 801023e:	e01c      	b.n	801027a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	685c      	ldr	r4, [r3, #4]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801024c:	b29e      	uxth	r6, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010254:	4618      	mov	r0, r3
 8010256:	f7ff ff98 	bl	801018a <makeFreeRtosPriority>
 801025a:	4602      	mov	r2, r0
 801025c:	f107 030c 	add.w	r3, r7, #12
 8010260:	9301      	str	r3, [sp, #4]
 8010262:	9200      	str	r2, [sp, #0]
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	4632      	mov	r2, r6
 8010268:	4629      	mov	r1, r5
 801026a:	4620      	mov	r0, r4
 801026c:	f001 f849 	bl	8011302 <xTaskCreate>
 8010270:	4603      	mov	r3, r0
 8010272:	2b01      	cmp	r3, #1
 8010274:	d001      	beq.n	801027a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010276:	2300      	movs	r3, #0
 8010278:	e000      	b.n	801027c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801027a:	68fb      	ldr	r3, [r7, #12]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3714      	adds	r7, #20
 8010280:	46bd      	mov	sp, r7
 8010282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010284 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d007      	beq.n	80102a4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	4619      	mov	r1, r3
 801029a:	2001      	movs	r0, #1
 801029c:	f000 fb79 	bl	8010992 <xQueueCreateMutexStatic>
 80102a0:	4603      	mov	r3, r0
 80102a2:	e003      	b.n	80102ac <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80102a4:	2001      	movs	r0, #1
 80102a6:	f000 fb5c 	bl	8010962 <xQueueCreateMutex>
 80102aa:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3708      	adds	r7, #8
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b084      	sub	sp, #16
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80102be:	2300      	movs	r3, #0
 80102c0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d101      	bne.n	80102cc <osMutexWait+0x18>
    return osErrorParameter;
 80102c8:	2380      	movs	r3, #128	; 0x80
 80102ca:	e03a      	b.n	8010342 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80102cc:	2300      	movs	r3, #0
 80102ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d6:	d103      	bne.n	80102e0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80102d8:	f04f 33ff 	mov.w	r3, #4294967295
 80102dc:	60fb      	str	r3, [r7, #12]
 80102de:	e009      	b.n	80102f4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d006      	beq.n	80102f4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d101      	bne.n	80102f4 <osMutexWait+0x40>
      ticks = 1;
 80102f0:	2301      	movs	r3, #1
 80102f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80102f4:	f7ff ff61 	bl	80101ba <inHandlerMode>
 80102f8:	4603      	mov	r3, r0
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d017      	beq.n	801032e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80102fe:	f107 0308 	add.w	r3, r7, #8
 8010302:	461a      	mov	r2, r3
 8010304:	2100      	movs	r1, #0
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f000 fdf6 	bl	8010ef8 <xQueueReceiveFromISR>
 801030c:	4603      	mov	r3, r0
 801030e:	2b01      	cmp	r3, #1
 8010310:	d001      	beq.n	8010316 <osMutexWait+0x62>
      return osErrorOS;
 8010312:	23ff      	movs	r3, #255	; 0xff
 8010314:	e015      	b.n	8010342 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d011      	beq.n	8010340 <osMutexWait+0x8c>
 801031c:	4b0b      	ldr	r3, [pc, #44]	; (801034c <osMutexWait+0x98>)
 801031e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010322:	601a      	str	r2, [r3, #0]
 8010324:	f3bf 8f4f 	dsb	sy
 8010328:	f3bf 8f6f 	isb	sy
 801032c:	e008      	b.n	8010340 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801032e:	68f9      	ldr	r1, [r7, #12]
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 fcd5 	bl	8010ce0 <xQueueSemaphoreTake>
 8010336:	4603      	mov	r3, r0
 8010338:	2b01      	cmp	r3, #1
 801033a:	d001      	beq.n	8010340 <osMutexWait+0x8c>
    return osErrorOS;
 801033c:	23ff      	movs	r3, #255	; 0xff
 801033e:	e000      	b.n	8010342 <osMutexWait+0x8e>
  }
  
  return osOK;
 8010340:	2300      	movs	r3, #0
}
 8010342:	4618      	mov	r0, r3
 8010344:	3710      	adds	r7, #16
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	e000ed04 	.word	0xe000ed04

08010350 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010358:	2300      	movs	r3, #0
 801035a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801035c:	2300      	movs	r3, #0
 801035e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8010360:	f7ff ff2b 	bl	80101ba <inHandlerMode>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d016      	beq.n	8010398 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801036a:	f107 0308 	add.w	r3, r7, #8
 801036e:	4619      	mov	r1, r3
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f000 fc27 	bl	8010bc4 <xQueueGiveFromISR>
 8010376:	4603      	mov	r3, r0
 8010378:	2b01      	cmp	r3, #1
 801037a:	d001      	beq.n	8010380 <osMutexRelease+0x30>
      return osErrorOS;
 801037c:	23ff      	movs	r3, #255	; 0xff
 801037e:	e017      	b.n	80103b0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d013      	beq.n	80103ae <osMutexRelease+0x5e>
 8010386:	4b0c      	ldr	r3, [pc, #48]	; (80103b8 <osMutexRelease+0x68>)
 8010388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801038c:	601a      	str	r2, [r3, #0]
 801038e:	f3bf 8f4f 	dsb	sy
 8010392:	f3bf 8f6f 	isb	sy
 8010396:	e00a      	b.n	80103ae <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8010398:	2300      	movs	r3, #0
 801039a:	2200      	movs	r2, #0
 801039c:	2100      	movs	r1, #0
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 fb12 	bl	80109c8 <xQueueGenericSend>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d001      	beq.n	80103ae <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80103aa:	23ff      	movs	r3, #255	; 0xff
 80103ac:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80103ae:	68fb      	ldr	r3, [r7, #12]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	e000ed04 	.word	0xe000ed04

080103bc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80103bc:	b580      	push	{r7, lr}
 80103be:	b086      	sub	sp, #24
 80103c0:	af02      	add	r7, sp, #8
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00f      	beq.n	80103ee <osSemaphoreCreate+0x32>
    if (count == 1) {
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	d10a      	bne.n	80103ea <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	2203      	movs	r2, #3
 80103da:	9200      	str	r2, [sp, #0]
 80103dc:	2200      	movs	r2, #0
 80103de:	2100      	movs	r1, #0
 80103e0:	2001      	movs	r0, #1
 80103e2:	f000 f9d3 	bl	801078c <xQueueGenericCreateStatic>
 80103e6:	4603      	mov	r3, r0
 80103e8:	e016      	b.n	8010418 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80103ea:	2300      	movs	r3, #0
 80103ec:	e014      	b.n	8010418 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	2b01      	cmp	r3, #1
 80103f2:	d110      	bne.n	8010416 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80103f4:	2203      	movs	r2, #3
 80103f6:	2100      	movs	r1, #0
 80103f8:	2001      	movs	r0, #1
 80103fa:	f000 fa3f 	bl	801087c <xQueueGenericCreate>
 80103fe:	60f8      	str	r0, [r7, #12]
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d005      	beq.n	8010412 <osSemaphoreCreate+0x56>
 8010406:	2300      	movs	r3, #0
 8010408:	2200      	movs	r2, #0
 801040a:	2100      	movs	r1, #0
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	f000 fadb 	bl	80109c8 <xQueueGenericSend>
      return sema;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	e000      	b.n	8010418 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8010416:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8010418:	4618      	mov	r0, r3
 801041a:	3710      	adds	r7, #16
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b084      	sub	sp, #16
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801042a:	2300      	movs	r3, #0
 801042c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d101      	bne.n	8010438 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010434:	2380      	movs	r3, #128	; 0x80
 8010436:	e03a      	b.n	80104ae <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010442:	d103      	bne.n	801044c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010444:	f04f 33ff 	mov.w	r3, #4294967295
 8010448:	60fb      	str	r3, [r7, #12]
 801044a:	e009      	b.n	8010460 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d006      	beq.n	8010460 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d101      	bne.n	8010460 <osSemaphoreWait+0x40>
      ticks = 1;
 801045c:	2301      	movs	r3, #1
 801045e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010460:	f7ff feab 	bl	80101ba <inHandlerMode>
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	d017      	beq.n	801049a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801046a:	f107 0308 	add.w	r3, r7, #8
 801046e:	461a      	mov	r2, r3
 8010470:	2100      	movs	r1, #0
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f000 fd40 	bl	8010ef8 <xQueueReceiveFromISR>
 8010478:	4603      	mov	r3, r0
 801047a:	2b01      	cmp	r3, #1
 801047c:	d001      	beq.n	8010482 <osSemaphoreWait+0x62>
      return osErrorOS;
 801047e:	23ff      	movs	r3, #255	; 0xff
 8010480:	e015      	b.n	80104ae <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d011      	beq.n	80104ac <osSemaphoreWait+0x8c>
 8010488:	4b0b      	ldr	r3, [pc, #44]	; (80104b8 <osSemaphoreWait+0x98>)
 801048a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801048e:	601a      	str	r2, [r3, #0]
 8010490:	f3bf 8f4f 	dsb	sy
 8010494:	f3bf 8f6f 	isb	sy
 8010498:	e008      	b.n	80104ac <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801049a:	68f9      	ldr	r1, [r7, #12]
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 fc1f 	bl	8010ce0 <xQueueSemaphoreTake>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d001      	beq.n	80104ac <osSemaphoreWait+0x8c>
    return osErrorOS;
 80104a8:	23ff      	movs	r3, #255	; 0xff
 80104aa:	e000      	b.n	80104ae <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80104ac:	2300      	movs	r3, #0
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3710      	adds	r7, #16
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	e000ed04 	.word	0xe000ed04

080104bc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b084      	sub	sp, #16
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80104c4:	2300      	movs	r3, #0
 80104c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80104c8:	2300      	movs	r3, #0
 80104ca:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80104cc:	f7ff fe75 	bl	80101ba <inHandlerMode>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d016      	beq.n	8010504 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80104d6:	f107 0308 	add.w	r3, r7, #8
 80104da:	4619      	mov	r1, r3
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f000 fb71 	bl	8010bc4 <xQueueGiveFromISR>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	d001      	beq.n	80104ec <osSemaphoreRelease+0x30>
      return osErrorOS;
 80104e8:	23ff      	movs	r3, #255	; 0xff
 80104ea:	e017      	b.n	801051c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d013      	beq.n	801051a <osSemaphoreRelease+0x5e>
 80104f2:	4b0c      	ldr	r3, [pc, #48]	; (8010524 <osSemaphoreRelease+0x68>)
 80104f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104f8:	601a      	str	r2, [r3, #0]
 80104fa:	f3bf 8f4f 	dsb	sy
 80104fe:	f3bf 8f6f 	isb	sy
 8010502:	e00a      	b.n	801051a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010504:	2300      	movs	r3, #0
 8010506:	2200      	movs	r2, #0
 8010508:	2100      	movs	r1, #0
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f000 fa5c 	bl	80109c8 <xQueueGenericSend>
 8010510:	4603      	mov	r3, r0
 8010512:	2b01      	cmp	r3, #1
 8010514:	d001      	beq.n	801051a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8010516:	23ff      	movs	r3, #255	; 0xff
 8010518:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801051a:	68fb      	ldr	r3, [r7, #12]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3710      	adds	r7, #16
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	e000ed04 	.word	0xe000ed04

08010528 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d001      	beq.n	8010540 <osDelayUntil+0x18>
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	e000      	b.n	8010542 <osDelayUntil+0x1a>
 8010540:	2301      	movs	r3, #1
 8010542:	4619      	mov	r1, r3
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f001 f831 	bl	80115ac <vTaskDelayUntil>
  
  return osOK;
 801054a:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 801054c:	4618      	mov	r0, r3
 801054e:	3710      	adds	r7, #16
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f103 0208 	add.w	r2, r3, #8
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f04f 32ff 	mov.w	r2, #4294967295
 801056c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f103 0208 	add.w	r2, r3, #8
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f103 0208 	add.w	r2, r3, #8
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2200      	movs	r2, #0
 8010586:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010588:	bf00      	nop
 801058a:	370c      	adds	r7, #12
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr

08010594 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2200      	movs	r2, #0
 80105a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80105a2:	bf00      	nop
 80105a4:	370c      	adds	r7, #12
 80105a6:	46bd      	mov	sp, r7
 80105a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ac:	4770      	bx	lr

080105ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80105ae:	b480      	push	{r7}
 80105b0:	b085      	sub	sp, #20
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
 80105b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	68fa      	ldr	r2, [r7, #12]
 80105c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	689a      	ldr	r2, [r3, #8]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	689b      	ldr	r3, [r3, #8]
 80105d0:	683a      	ldr	r2, [r7, #0]
 80105d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	1c5a      	adds	r2, r3, #1
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	601a      	str	r2, [r3, #0]
}
 80105ea:	bf00      	nop
 80105ec:	3714      	adds	r7, #20
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr

080105f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80105f6:	b480      	push	{r7}
 80105f8:	b085      	sub	sp, #20
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
 80105fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060c:	d103      	bne.n	8010616 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	691b      	ldr	r3, [r3, #16]
 8010612:	60fb      	str	r3, [r7, #12]
 8010614:	e00c      	b.n	8010630 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	3308      	adds	r3, #8
 801061a:	60fb      	str	r3, [r7, #12]
 801061c:	e002      	b.n	8010624 <vListInsert+0x2e>
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	60fb      	str	r3, [r7, #12]
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	68ba      	ldr	r2, [r7, #8]
 801062c:	429a      	cmp	r2, r3
 801062e:	d2f6      	bcs.n	801061e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	685a      	ldr	r2, [r3, #4]
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	683a      	ldr	r2, [r7, #0]
 801063e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	683a      	ldr	r2, [r7, #0]
 801064a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	1c5a      	adds	r2, r3, #1
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	601a      	str	r2, [r3, #0]
}
 801065c:	bf00      	nop
 801065e:	3714      	adds	r7, #20
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr

08010668 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010668:	b480      	push	{r7}
 801066a:	b085      	sub	sp, #20
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	691b      	ldr	r3, [r3, #16]
 8010674:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	6892      	ldr	r2, [r2, #8]
 801067e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	689b      	ldr	r3, [r3, #8]
 8010684:	687a      	ldr	r2, [r7, #4]
 8010686:	6852      	ldr	r2, [r2, #4]
 8010688:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	429a      	cmp	r2, r3
 8010692:	d103      	bne.n	801069c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	689a      	ldr	r2, [r3, #8]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	1e5a      	subs	r2, r3, #1
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	681b      	ldr	r3, [r3, #0]
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3714      	adds	r7, #20
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d10a      	bne.n	80106e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80106d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d4:	f383 8811 	msr	BASEPRI, r3
 80106d8:	f3bf 8f6f 	isb	sy
 80106dc:	f3bf 8f4f 	dsb	sy
 80106e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80106e2:	bf00      	nop
 80106e4:	e7fe      	b.n	80106e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80106e6:	f001 ff85 	bl	80125f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106f2:	68f9      	ldr	r1, [r7, #12]
 80106f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80106f6:	fb01 f303 	mul.w	r3, r1, r3
 80106fa:	441a      	add	r2, r3
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2200      	movs	r2, #0
 8010704:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681a      	ldr	r2, [r3, #0]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010716:	3b01      	subs	r3, #1
 8010718:	68f9      	ldr	r1, [r7, #12]
 801071a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801071c:	fb01 f303 	mul.w	r3, r1, r3
 8010720:	441a      	add	r2, r3
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	22ff      	movs	r2, #255	; 0xff
 801072a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	22ff      	movs	r2, #255	; 0xff
 8010732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d114      	bne.n	8010766 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	691b      	ldr	r3, [r3, #16]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d01a      	beq.n	801077a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	3310      	adds	r3, #16
 8010748:	4618      	mov	r0, r3
 801074a:	f001 fa0f 	bl	8011b6c <xTaskRemoveFromEventList>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d012      	beq.n	801077a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010754:	4b0c      	ldr	r3, [pc, #48]	; (8010788 <xQueueGenericReset+0xcc>)
 8010756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801075a:	601a      	str	r2, [r3, #0]
 801075c:	f3bf 8f4f 	dsb	sy
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	e009      	b.n	801077a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	3310      	adds	r3, #16
 801076a:	4618      	mov	r0, r3
 801076c:	f7ff fef2 	bl	8010554 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	3324      	adds	r3, #36	; 0x24
 8010774:	4618      	mov	r0, r3
 8010776:	f7ff feed 	bl	8010554 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801077a:	f001 ff6b 	bl	8012654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801077e:	2301      	movs	r3, #1
}
 8010780:	4618      	mov	r0, r3
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}
 8010788:	e000ed04 	.word	0xe000ed04

0801078c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801078c:	b580      	push	{r7, lr}
 801078e:	b08e      	sub	sp, #56	; 0x38
 8010790:	af02      	add	r7, sp, #8
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	607a      	str	r2, [r7, #4]
 8010798:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d10a      	bne.n	80107b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80107b2:	bf00      	nop
 80107b4:	e7fe      	b.n	80107b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d10a      	bne.n	80107d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80107bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c0:	f383 8811 	msr	BASEPRI, r3
 80107c4:	f3bf 8f6f 	isb	sy
 80107c8:	f3bf 8f4f 	dsb	sy
 80107cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80107ce:	bf00      	nop
 80107d0:	e7fe      	b.n	80107d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d002      	beq.n	80107de <xQueueGenericCreateStatic+0x52>
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <xQueueGenericCreateStatic+0x56>
 80107de:	2301      	movs	r3, #1
 80107e0:	e000      	b.n	80107e4 <xQueueGenericCreateStatic+0x58>
 80107e2:	2300      	movs	r3, #0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d10a      	bne.n	80107fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80107e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ec:	f383 8811 	msr	BASEPRI, r3
 80107f0:	f3bf 8f6f 	isb	sy
 80107f4:	f3bf 8f4f 	dsb	sy
 80107f8:	623b      	str	r3, [r7, #32]
}
 80107fa:	bf00      	nop
 80107fc:	e7fe      	b.n	80107fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d102      	bne.n	801080a <xQueueGenericCreateStatic+0x7e>
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d101      	bne.n	801080e <xQueueGenericCreateStatic+0x82>
 801080a:	2301      	movs	r3, #1
 801080c:	e000      	b.n	8010810 <xQueueGenericCreateStatic+0x84>
 801080e:	2300      	movs	r3, #0
 8010810:	2b00      	cmp	r3, #0
 8010812:	d10a      	bne.n	801082a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010818:	f383 8811 	msr	BASEPRI, r3
 801081c:	f3bf 8f6f 	isb	sy
 8010820:	f3bf 8f4f 	dsb	sy
 8010824:	61fb      	str	r3, [r7, #28]
}
 8010826:	bf00      	nop
 8010828:	e7fe      	b.n	8010828 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801082a:	2348      	movs	r3, #72	; 0x48
 801082c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	2b48      	cmp	r3, #72	; 0x48
 8010832:	d00a      	beq.n	801084a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010838:	f383 8811 	msr	BASEPRI, r3
 801083c:	f3bf 8f6f 	isb	sy
 8010840:	f3bf 8f4f 	dsb	sy
 8010844:	61bb      	str	r3, [r7, #24]
}
 8010846:	bf00      	nop
 8010848:	e7fe      	b.n	8010848 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801084a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00d      	beq.n	8010872 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010858:	2201      	movs	r2, #1
 801085a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801085e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	4613      	mov	r3, r2
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	68b9      	ldr	r1, [r7, #8]
 801086c:	68f8      	ldr	r0, [r7, #12]
 801086e:	f000 f83f 	bl	80108f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010874:	4618      	mov	r0, r3
 8010876:	3730      	adds	r7, #48	; 0x30
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801087c:	b580      	push	{r7, lr}
 801087e:	b08a      	sub	sp, #40	; 0x28
 8010880:	af02      	add	r7, sp, #8
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	60b9      	str	r1, [r7, #8]
 8010886:	4613      	mov	r3, r2
 8010888:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d10a      	bne.n	80108a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010894:	f383 8811 	msr	BASEPRI, r3
 8010898:	f3bf 8f6f 	isb	sy
 801089c:	f3bf 8f4f 	dsb	sy
 80108a0:	613b      	str	r3, [r7, #16]
}
 80108a2:	bf00      	nop
 80108a4:	e7fe      	b.n	80108a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	68ba      	ldr	r2, [r7, #8]
 80108aa:	fb02 f303 	mul.w	r3, r2, r3
 80108ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	3348      	adds	r3, #72	; 0x48
 80108b4:	4618      	mov	r0, r3
 80108b6:	f001 ffbf 	bl	8012838 <pvPortMalloc>
 80108ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80108bc:	69bb      	ldr	r3, [r7, #24]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d011      	beq.n	80108e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	3348      	adds	r3, #72	; 0x48
 80108ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80108cc:	69bb      	ldr	r3, [r7, #24]
 80108ce:	2200      	movs	r2, #0
 80108d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80108d4:	79fa      	ldrb	r2, [r7, #7]
 80108d6:	69bb      	ldr	r3, [r7, #24]
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	4613      	mov	r3, r2
 80108dc:	697a      	ldr	r2, [r7, #20]
 80108de:	68b9      	ldr	r1, [r7, #8]
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f000 f805 	bl	80108f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80108e6:	69bb      	ldr	r3, [r7, #24]
	}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3720      	adds	r7, #32
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}

080108f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b084      	sub	sp, #16
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	607a      	str	r2, [r7, #4]
 80108fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d103      	bne.n	801090c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010904:	69bb      	ldr	r3, [r7, #24]
 8010906:	69ba      	ldr	r2, [r7, #24]
 8010908:	601a      	str	r2, [r3, #0]
 801090a:	e002      	b.n	8010912 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801090c:	69bb      	ldr	r3, [r7, #24]
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	68fa      	ldr	r2, [r7, #12]
 8010916:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010918:	69bb      	ldr	r3, [r7, #24]
 801091a:	68ba      	ldr	r2, [r7, #8]
 801091c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801091e:	2101      	movs	r1, #1
 8010920:	69b8      	ldr	r0, [r7, #24]
 8010922:	f7ff fecb 	bl	80106bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010926:	bf00      	nop
 8010928:	3710      	adds	r7, #16
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801092e:	b580      	push	{r7, lr}
 8010930:	b082      	sub	sp, #8
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d00e      	beq.n	801095a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2200      	movs	r2, #0
 8010940:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2200      	movs	r2, #0
 8010946:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801094e:	2300      	movs	r3, #0
 8010950:	2200      	movs	r2, #0
 8010952:	2100      	movs	r1, #0
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 f837 	bl	80109c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801095a:	bf00      	nop
 801095c:	3708      	adds	r7, #8
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010962:	b580      	push	{r7, lr}
 8010964:	b086      	sub	sp, #24
 8010966:	af00      	add	r7, sp, #0
 8010968:	4603      	mov	r3, r0
 801096a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801096c:	2301      	movs	r3, #1
 801096e:	617b      	str	r3, [r7, #20]
 8010970:	2300      	movs	r3, #0
 8010972:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010974:	79fb      	ldrb	r3, [r7, #7]
 8010976:	461a      	mov	r2, r3
 8010978:	6939      	ldr	r1, [r7, #16]
 801097a:	6978      	ldr	r0, [r7, #20]
 801097c:	f7ff ff7e 	bl	801087c <xQueueGenericCreate>
 8010980:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010982:	68f8      	ldr	r0, [r7, #12]
 8010984:	f7ff ffd3 	bl	801092e <prvInitialiseMutex>

		return xNewQueue;
 8010988:	68fb      	ldr	r3, [r7, #12]
	}
 801098a:	4618      	mov	r0, r3
 801098c:	3718      	adds	r7, #24
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}

08010992 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010992:	b580      	push	{r7, lr}
 8010994:	b088      	sub	sp, #32
 8010996:	af02      	add	r7, sp, #8
 8010998:	4603      	mov	r3, r0
 801099a:	6039      	str	r1, [r7, #0]
 801099c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801099e:	2301      	movs	r3, #1
 80109a0:	617b      	str	r3, [r7, #20]
 80109a2:	2300      	movs	r3, #0
 80109a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80109a6:	79fb      	ldrb	r3, [r7, #7]
 80109a8:	9300      	str	r3, [sp, #0]
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	2200      	movs	r2, #0
 80109ae:	6939      	ldr	r1, [r7, #16]
 80109b0:	6978      	ldr	r0, [r7, #20]
 80109b2:	f7ff feeb 	bl	801078c <xQueueGenericCreateStatic>
 80109b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80109b8:	68f8      	ldr	r0, [r7, #12]
 80109ba:	f7ff ffb8 	bl	801092e <prvInitialiseMutex>

		return xNewQueue;
 80109be:	68fb      	ldr	r3, [r7, #12]
	}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3718      	adds	r7, #24
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b08e      	sub	sp, #56	; 0x38
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	607a      	str	r2, [r7, #4]
 80109d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80109d6:	2300      	movs	r3, #0
 80109d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80109de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d10a      	bne.n	80109fa <xQueueGenericSend+0x32>
	__asm volatile
 80109e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e8:	f383 8811 	msr	BASEPRI, r3
 80109ec:	f3bf 8f6f 	isb	sy
 80109f0:	f3bf 8f4f 	dsb	sy
 80109f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80109f6:	bf00      	nop
 80109f8:	e7fe      	b.n	80109f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d103      	bne.n	8010a08 <xQueueGenericSend+0x40>
 8010a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d101      	bne.n	8010a0c <xQueueGenericSend+0x44>
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e000      	b.n	8010a0e <xQueueGenericSend+0x46>
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d10a      	bne.n	8010a28 <xQueueGenericSend+0x60>
	__asm volatile
 8010a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a16:	f383 8811 	msr	BASEPRI, r3
 8010a1a:	f3bf 8f6f 	isb	sy
 8010a1e:	f3bf 8f4f 	dsb	sy
 8010a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010a24:	bf00      	nop
 8010a26:	e7fe      	b.n	8010a26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	2b02      	cmp	r3, #2
 8010a2c:	d103      	bne.n	8010a36 <xQueueGenericSend+0x6e>
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a32:	2b01      	cmp	r3, #1
 8010a34:	d101      	bne.n	8010a3a <xQueueGenericSend+0x72>
 8010a36:	2301      	movs	r3, #1
 8010a38:	e000      	b.n	8010a3c <xQueueGenericSend+0x74>
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d10a      	bne.n	8010a56 <xQueueGenericSend+0x8e>
	__asm volatile
 8010a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a44:	f383 8811 	msr	BASEPRI, r3
 8010a48:	f3bf 8f6f 	isb	sy
 8010a4c:	f3bf 8f4f 	dsb	sy
 8010a50:	623b      	str	r3, [r7, #32]
}
 8010a52:	bf00      	nop
 8010a54:	e7fe      	b.n	8010a54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a56:	f001 fa81 	bl	8011f5c <xTaskGetSchedulerState>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d102      	bne.n	8010a66 <xQueueGenericSend+0x9e>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d101      	bne.n	8010a6a <xQueueGenericSend+0xa2>
 8010a66:	2301      	movs	r3, #1
 8010a68:	e000      	b.n	8010a6c <xQueueGenericSend+0xa4>
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d10a      	bne.n	8010a86 <xQueueGenericSend+0xbe>
	__asm volatile
 8010a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a74:	f383 8811 	msr	BASEPRI, r3
 8010a78:	f3bf 8f6f 	isb	sy
 8010a7c:	f3bf 8f4f 	dsb	sy
 8010a80:	61fb      	str	r3, [r7, #28]
}
 8010a82:	bf00      	nop
 8010a84:	e7fe      	b.n	8010a84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a86:	f001 fdb5 	bl	80125f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d302      	bcc.n	8010a9c <xQueueGenericSend+0xd4>
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	2b02      	cmp	r3, #2
 8010a9a:	d129      	bne.n	8010af0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a9c:	683a      	ldr	r2, [r7, #0]
 8010a9e:	68b9      	ldr	r1, [r7, #8]
 8010aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010aa2:	f000 fac1 	bl	8011028 <prvCopyDataToQueue>
 8010aa6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d010      	beq.n	8010ad2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab2:	3324      	adds	r3, #36	; 0x24
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f001 f859 	bl	8011b6c <xTaskRemoveFromEventList>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d013      	beq.n	8010ae8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010ac0:	4b3f      	ldr	r3, [pc, #252]	; (8010bc0 <xQueueGenericSend+0x1f8>)
 8010ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ac6:	601a      	str	r2, [r3, #0]
 8010ac8:	f3bf 8f4f 	dsb	sy
 8010acc:	f3bf 8f6f 	isb	sy
 8010ad0:	e00a      	b.n	8010ae8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d007      	beq.n	8010ae8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010ad8:	4b39      	ldr	r3, [pc, #228]	; (8010bc0 <xQueueGenericSend+0x1f8>)
 8010ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ade:	601a      	str	r2, [r3, #0]
 8010ae0:	f3bf 8f4f 	dsb	sy
 8010ae4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010ae8:	f001 fdb4 	bl	8012654 <vPortExitCritical>
				return pdPASS;
 8010aec:	2301      	movs	r3, #1
 8010aee:	e063      	b.n	8010bb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d103      	bne.n	8010afe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010af6:	f001 fdad 	bl	8012654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010afa:	2300      	movs	r3, #0
 8010afc:	e05c      	b.n	8010bb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d106      	bne.n	8010b12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b04:	f107 0314 	add.w	r3, r7, #20
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f001 f891 	bl	8011c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b0e:	2301      	movs	r3, #1
 8010b10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b12:	f001 fd9f 	bl	8012654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b16:	f000 fe31 	bl	801177c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b1a:	f001 fd6b 	bl	80125f4 <vPortEnterCritical>
 8010b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b24:	b25b      	sxtb	r3, r3
 8010b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b2a:	d103      	bne.n	8010b34 <xQueueGenericSend+0x16c>
 8010b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2e:	2200      	movs	r2, #0
 8010b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b3a:	b25b      	sxtb	r3, r3
 8010b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b40:	d103      	bne.n	8010b4a <xQueueGenericSend+0x182>
 8010b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b44:	2200      	movs	r2, #0
 8010b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b4a:	f001 fd83 	bl	8012654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b4e:	1d3a      	adds	r2, r7, #4
 8010b50:	f107 0314 	add.w	r3, r7, #20
 8010b54:	4611      	mov	r1, r2
 8010b56:	4618      	mov	r0, r3
 8010b58:	f001 f880 	bl	8011c5c <xTaskCheckForTimeOut>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d124      	bne.n	8010bac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b64:	f000 fb58 	bl	8011218 <prvIsQueueFull>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d018      	beq.n	8010ba0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b70:	3310      	adds	r3, #16
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	4611      	mov	r1, r2
 8010b76:	4618      	mov	r0, r3
 8010b78:	f000 ffd4 	bl	8011b24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b7e:	f000 fae3 	bl	8011148 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010b82:	f000 fe09 	bl	8011798 <xTaskResumeAll>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f47f af7c 	bne.w	8010a86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010b8e:	4b0c      	ldr	r3, [pc, #48]	; (8010bc0 <xQueueGenericSend+0x1f8>)
 8010b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b94:	601a      	str	r2, [r3, #0]
 8010b96:	f3bf 8f4f 	dsb	sy
 8010b9a:	f3bf 8f6f 	isb	sy
 8010b9e:	e772      	b.n	8010a86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ba2:	f000 fad1 	bl	8011148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ba6:	f000 fdf7 	bl	8011798 <xTaskResumeAll>
 8010baa:	e76c      	b.n	8010a86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bae:	f000 facb 	bl	8011148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010bb2:	f000 fdf1 	bl	8011798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010bb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3738      	adds	r7, #56	; 0x38
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}
 8010bc0:	e000ed04 	.word	0xe000ed04

08010bc4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b08e      	sub	sp, #56	; 0x38
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d10a      	bne.n	8010bee <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bdc:	f383 8811 	msr	BASEPRI, r3
 8010be0:	f3bf 8f6f 	isb	sy
 8010be4:	f3bf 8f4f 	dsb	sy
 8010be8:	623b      	str	r3, [r7, #32]
}
 8010bea:	bf00      	nop
 8010bec:	e7fe      	b.n	8010bec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d00a      	beq.n	8010c0c <xQueueGiveFromISR+0x48>
	__asm volatile
 8010bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfa:	f383 8811 	msr	BASEPRI, r3
 8010bfe:	f3bf 8f6f 	isb	sy
 8010c02:	f3bf 8f4f 	dsb	sy
 8010c06:	61fb      	str	r3, [r7, #28]
}
 8010c08:	bf00      	nop
 8010c0a:	e7fe      	b.n	8010c0a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d103      	bne.n	8010c1c <xQueueGiveFromISR+0x58>
 8010c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c16:	689b      	ldr	r3, [r3, #8]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d101      	bne.n	8010c20 <xQueueGiveFromISR+0x5c>
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	e000      	b.n	8010c22 <xQueueGiveFromISR+0x5e>
 8010c20:	2300      	movs	r3, #0
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d10a      	bne.n	8010c3c <xQueueGiveFromISR+0x78>
	__asm volatile
 8010c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2a:	f383 8811 	msr	BASEPRI, r3
 8010c2e:	f3bf 8f6f 	isb	sy
 8010c32:	f3bf 8f4f 	dsb	sy
 8010c36:	61bb      	str	r3, [r7, #24]
}
 8010c38:	bf00      	nop
 8010c3a:	e7fe      	b.n	8010c3a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c3c:	f001 fdbc 	bl	80127b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010c40:	f3ef 8211 	mrs	r2, BASEPRI
 8010c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c48:	f383 8811 	msr	BASEPRI, r3
 8010c4c:	f3bf 8f6f 	isb	sy
 8010c50:	f3bf 8f4f 	dsb	sy
 8010c54:	617a      	str	r2, [r7, #20]
 8010c56:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010c58:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c60:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d22b      	bcs.n	8010cc4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c78:	1c5a      	adds	r2, r3, #1
 8010c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010c7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c86:	d112      	bne.n	8010cae <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d016      	beq.n	8010cbe <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c92:	3324      	adds	r3, #36	; 0x24
 8010c94:	4618      	mov	r0, r3
 8010c96:	f000 ff69 	bl	8011b6c <xTaskRemoveFromEventList>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d00e      	beq.n	8010cbe <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d00b      	beq.n	8010cbe <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	2201      	movs	r2, #1
 8010caa:	601a      	str	r2, [r3, #0]
 8010cac:	e007      	b.n	8010cbe <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010cae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	b2db      	uxtb	r3, r3
 8010cb6:	b25a      	sxtb	r2, r3
 8010cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8010cc2:	e001      	b.n	8010cc8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8010cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cca:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010cd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3738      	adds	r7, #56	; 0x38
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
	...

08010ce0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b08e      	sub	sp, #56	; 0x38
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010cea:	2300      	movs	r3, #0
 8010cec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d10a      	bne.n	8010d12 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	623b      	str	r3, [r7, #32]
}
 8010d0e:	bf00      	nop
 8010d10:	e7fe      	b.n	8010d10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d00a      	beq.n	8010d30 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d1e:	f383 8811 	msr	BASEPRI, r3
 8010d22:	f3bf 8f6f 	isb	sy
 8010d26:	f3bf 8f4f 	dsb	sy
 8010d2a:	61fb      	str	r3, [r7, #28]
}
 8010d2c:	bf00      	nop
 8010d2e:	e7fe      	b.n	8010d2e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d30:	f001 f914 	bl	8011f5c <xTaskGetSchedulerState>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d102      	bne.n	8010d40 <xQueueSemaphoreTake+0x60>
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d101      	bne.n	8010d44 <xQueueSemaphoreTake+0x64>
 8010d40:	2301      	movs	r3, #1
 8010d42:	e000      	b.n	8010d46 <xQueueSemaphoreTake+0x66>
 8010d44:	2300      	movs	r3, #0
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10a      	bne.n	8010d60 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d4e:	f383 8811 	msr	BASEPRI, r3
 8010d52:	f3bf 8f6f 	isb	sy
 8010d56:	f3bf 8f4f 	dsb	sy
 8010d5a:	61bb      	str	r3, [r7, #24]
}
 8010d5c:	bf00      	nop
 8010d5e:	e7fe      	b.n	8010d5e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d60:	f001 fc48 	bl	80125f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d68:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d024      	beq.n	8010dba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d72:	1e5a      	subs	r2, r3, #1
 8010d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d104      	bne.n	8010d8a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010d80:	f001 fa94 	bl	80122ac <pvTaskIncrementMutexHeldCount>
 8010d84:	4602      	mov	r2, r0
 8010d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d88:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d8c:	691b      	ldr	r3, [r3, #16]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d00f      	beq.n	8010db2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d94:	3310      	adds	r3, #16
 8010d96:	4618      	mov	r0, r3
 8010d98:	f000 fee8 	bl	8011b6c <xTaskRemoveFromEventList>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d007      	beq.n	8010db2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010da2:	4b54      	ldr	r3, [pc, #336]	; (8010ef4 <xQueueSemaphoreTake+0x214>)
 8010da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010da8:	601a      	str	r2, [r3, #0]
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010db2:	f001 fc4f 	bl	8012654 <vPortExitCritical>
				return pdPASS;
 8010db6:	2301      	movs	r3, #1
 8010db8:	e097      	b.n	8010eea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d111      	bne.n	8010de4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d00a      	beq.n	8010ddc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dca:	f383 8811 	msr	BASEPRI, r3
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	f3bf 8f4f 	dsb	sy
 8010dd6:	617b      	str	r3, [r7, #20]
}
 8010dd8:	bf00      	nop
 8010dda:	e7fe      	b.n	8010dda <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010ddc:	f001 fc3a 	bl	8012654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010de0:	2300      	movs	r3, #0
 8010de2:	e082      	b.n	8010eea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d106      	bne.n	8010df8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010dea:	f107 030c 	add.w	r3, r7, #12
 8010dee:	4618      	mov	r0, r3
 8010df0:	f000 ff1e 	bl	8011c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010df4:	2301      	movs	r3, #1
 8010df6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010df8:	f001 fc2c 	bl	8012654 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010dfc:	f000 fcbe 	bl	801177c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e00:	f001 fbf8 	bl	80125f4 <vPortEnterCritical>
 8010e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e0a:	b25b      	sxtb	r3, r3
 8010e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e10:	d103      	bne.n	8010e1a <xQueueSemaphoreTake+0x13a>
 8010e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e14:	2200      	movs	r2, #0
 8010e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e20:	b25b      	sxtb	r3, r3
 8010e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e26:	d103      	bne.n	8010e30 <xQueueSemaphoreTake+0x150>
 8010e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e30:	f001 fc10 	bl	8012654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e34:	463a      	mov	r2, r7
 8010e36:	f107 030c 	add.w	r3, r7, #12
 8010e3a:	4611      	mov	r1, r2
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f000 ff0d 	bl	8011c5c <xTaskCheckForTimeOut>
 8010e42:	4603      	mov	r3, r0
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d132      	bne.n	8010eae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e4a:	f000 f9cf 	bl	80111ec <prvIsQueueEmpty>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d026      	beq.n	8010ea2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d109      	bne.n	8010e70 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010e5c:	f001 fbca 	bl	80125f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e62:	689b      	ldr	r3, [r3, #8]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f001 f897 	bl	8011f98 <xTaskPriorityInherit>
 8010e6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010e6c:	f001 fbf2 	bl	8012654 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e72:	3324      	adds	r3, #36	; 0x24
 8010e74:	683a      	ldr	r2, [r7, #0]
 8010e76:	4611      	mov	r1, r2
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f000 fe53 	bl	8011b24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e80:	f000 f962 	bl	8011148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e84:	f000 fc88 	bl	8011798 <xTaskResumeAll>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f47f af68 	bne.w	8010d60 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010e90:	4b18      	ldr	r3, [pc, #96]	; (8010ef4 <xQueueSemaphoreTake+0x214>)
 8010e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e96:	601a      	str	r2, [r3, #0]
 8010e98:	f3bf 8f4f 	dsb	sy
 8010e9c:	f3bf 8f6f 	isb	sy
 8010ea0:	e75e      	b.n	8010d60 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010ea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ea4:	f000 f950 	bl	8011148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ea8:	f000 fc76 	bl	8011798 <xTaskResumeAll>
 8010eac:	e758      	b.n	8010d60 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010eae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010eb0:	f000 f94a 	bl	8011148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010eb4:	f000 fc70 	bl	8011798 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010eb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010eba:	f000 f997 	bl	80111ec <prvIsQueueEmpty>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f43f af4d 	beq.w	8010d60 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d00d      	beq.n	8010ee8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010ecc:	f001 fb92 	bl	80125f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ed2:	f000 f891 	bl	8010ff8 <prvGetDisinheritPriorityAfterTimeout>
 8010ed6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eda:	689b      	ldr	r3, [r3, #8]
 8010edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f001 f956 	bl	8012190 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010ee4:	f001 fbb6 	bl	8012654 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010ee8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3738      	adds	r7, #56	; 0x38
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	e000ed04 	.word	0xe000ed04

08010ef8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b08e      	sub	sp, #56	; 0x38
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d10a      	bne.n	8010f24 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f12:	f383 8811 	msr	BASEPRI, r3
 8010f16:	f3bf 8f6f 	isb	sy
 8010f1a:	f3bf 8f4f 	dsb	sy
 8010f1e:	623b      	str	r3, [r7, #32]
}
 8010f20:	bf00      	nop
 8010f22:	e7fe      	b.n	8010f22 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d103      	bne.n	8010f32 <xQueueReceiveFromISR+0x3a>
 8010f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d101      	bne.n	8010f36 <xQueueReceiveFromISR+0x3e>
 8010f32:	2301      	movs	r3, #1
 8010f34:	e000      	b.n	8010f38 <xQueueReceiveFromISR+0x40>
 8010f36:	2300      	movs	r3, #0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d10a      	bne.n	8010f52 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f40:	f383 8811 	msr	BASEPRI, r3
 8010f44:	f3bf 8f6f 	isb	sy
 8010f48:	f3bf 8f4f 	dsb	sy
 8010f4c:	61fb      	str	r3, [r7, #28]
}
 8010f4e:	bf00      	nop
 8010f50:	e7fe      	b.n	8010f50 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f52:	f001 fc31 	bl	80127b8 <vPortValidateInterruptPriority>
	__asm volatile
 8010f56:	f3ef 8211 	mrs	r2, BASEPRI
 8010f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5e:	f383 8811 	msr	BASEPRI, r3
 8010f62:	f3bf 8f6f 	isb	sy
 8010f66:	f3bf 8f4f 	dsb	sy
 8010f6a:	61ba      	str	r2, [r7, #24]
 8010f6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010f6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d02f      	beq.n	8010fde <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f88:	68b9      	ldr	r1, [r7, #8]
 8010f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f8c:	f000 f8b6 	bl	80110fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f92:	1e5a      	subs	r2, r3, #1
 8010f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fa0:	d112      	bne.n	8010fc8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa4:	691b      	ldr	r3, [r3, #16]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d016      	beq.n	8010fd8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fac:	3310      	adds	r3, #16
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f000 fddc 	bl	8011b6c <xTaskRemoveFromEventList>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00e      	beq.n	8010fd8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d00b      	beq.n	8010fd8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	601a      	str	r2, [r3, #0]
 8010fc6:	e007      	b.n	8010fd8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fcc:	3301      	adds	r3, #1
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	b25a      	sxtb	r2, r3
 8010fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010fd8:	2301      	movs	r3, #1
 8010fda:	637b      	str	r3, [r7, #52]	; 0x34
 8010fdc:	e001      	b.n	8010fe2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8010fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	f383 8811 	msr	BASEPRI, r3
}
 8010fec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3738      	adds	r7, #56	; 0x38
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b085      	sub	sp, #20
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011004:	2b00      	cmp	r3, #0
 8011006:	d006      	beq.n	8011016 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f1c3 0307 	rsb	r3, r3, #7
 8011012:	60fb      	str	r3, [r7, #12]
 8011014:	e001      	b.n	801101a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011016:	2300      	movs	r3, #0
 8011018:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801101a:	68fb      	ldr	r3, [r7, #12]
	}
 801101c:	4618      	mov	r0, r3
 801101e:	3714      	adds	r7, #20
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr

08011028 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b086      	sub	sp, #24
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011034:	2300      	movs	r3, #0
 8011036:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801103c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011042:	2b00      	cmp	r3, #0
 8011044:	d10d      	bne.n	8011062 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d14d      	bne.n	80110ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	689b      	ldr	r3, [r3, #8]
 8011052:	4618      	mov	r0, r3
 8011054:	f001 f816 	bl	8012084 <xTaskPriorityDisinherit>
 8011058:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	2200      	movs	r2, #0
 801105e:	609a      	str	r2, [r3, #8]
 8011060:	e043      	b.n	80110ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d119      	bne.n	801109c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	6858      	ldr	r0, [r3, #4]
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011070:	461a      	mov	r2, r3
 8011072:	68b9      	ldr	r1, [r7, #8]
 8011074:	f001 feed 	bl	8012e52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	685a      	ldr	r2, [r3, #4]
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011080:	441a      	add	r2, r3
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	685a      	ldr	r2, [r3, #4]
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	689b      	ldr	r3, [r3, #8]
 801108e:	429a      	cmp	r2, r3
 8011090:	d32b      	bcc.n	80110ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	605a      	str	r2, [r3, #4]
 801109a:	e026      	b.n	80110ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	68d8      	ldr	r0, [r3, #12]
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110a4:	461a      	mov	r2, r3
 80110a6:	68b9      	ldr	r1, [r7, #8]
 80110a8:	f001 fed3 	bl	8012e52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	68da      	ldr	r2, [r3, #12]
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110b4:	425b      	negs	r3, r3
 80110b6:	441a      	add	r2, r3
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	68da      	ldr	r2, [r3, #12]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d207      	bcs.n	80110d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	689a      	ldr	r2, [r3, #8]
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110d0:	425b      	negs	r3, r3
 80110d2:	441a      	add	r2, r3
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2b02      	cmp	r3, #2
 80110dc:	d105      	bne.n	80110ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d002      	beq.n	80110ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	3b01      	subs	r3, #1
 80110e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	1c5a      	adds	r2, r3, #1
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80110f2:	697b      	ldr	r3, [r7, #20]
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3718      	adds	r7, #24
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801110a:	2b00      	cmp	r3, #0
 801110c:	d018      	beq.n	8011140 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	68da      	ldr	r2, [r3, #12]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011116:	441a      	add	r2, r3
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	68da      	ldr	r2, [r3, #12]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	689b      	ldr	r3, [r3, #8]
 8011124:	429a      	cmp	r2, r3
 8011126:	d303      	bcc.n	8011130 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681a      	ldr	r2, [r3, #0]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	68d9      	ldr	r1, [r3, #12]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011138:	461a      	mov	r2, r3
 801113a:	6838      	ldr	r0, [r7, #0]
 801113c:	f001 fe89 	bl	8012e52 <memcpy>
	}
}
 8011140:	bf00      	nop
 8011142:	3708      	adds	r7, #8
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}

08011148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b084      	sub	sp, #16
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011150:	f001 fa50 	bl	80125f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801115a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801115c:	e011      	b.n	8011182 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011162:	2b00      	cmp	r3, #0
 8011164:	d012      	beq.n	801118c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	3324      	adds	r3, #36	; 0x24
 801116a:	4618      	mov	r0, r3
 801116c:	f000 fcfe 	bl	8011b6c <xTaskRemoveFromEventList>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d001      	beq.n	801117a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011176:	f000 fdd3 	bl	8011d20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801117a:	7bfb      	ldrb	r3, [r7, #15]
 801117c:	3b01      	subs	r3, #1
 801117e:	b2db      	uxtb	r3, r3
 8011180:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011186:	2b00      	cmp	r3, #0
 8011188:	dce9      	bgt.n	801115e <prvUnlockQueue+0x16>
 801118a:	e000      	b.n	801118e <prvUnlockQueue+0x46>
					break;
 801118c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	22ff      	movs	r2, #255	; 0xff
 8011192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011196:	f001 fa5d 	bl	8012654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801119a:	f001 fa2b 	bl	80125f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111a6:	e011      	b.n	80111cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	691b      	ldr	r3, [r3, #16]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d012      	beq.n	80111d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	3310      	adds	r3, #16
 80111b4:	4618      	mov	r0, r3
 80111b6:	f000 fcd9 	bl	8011b6c <xTaskRemoveFromEventList>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d001      	beq.n	80111c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80111c0:	f000 fdae 	bl	8011d20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80111c4:	7bbb      	ldrb	r3, [r7, #14]
 80111c6:	3b01      	subs	r3, #1
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	dce9      	bgt.n	80111a8 <prvUnlockQueue+0x60>
 80111d4:	e000      	b.n	80111d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80111d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	22ff      	movs	r2, #255	; 0xff
 80111dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80111e0:	f001 fa38 	bl	8012654 <vPortExitCritical>
}
 80111e4:	bf00      	nop
 80111e6:	3710      	adds	r7, #16
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b084      	sub	sp, #16
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111f4:	f001 f9fe 	bl	80125f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d102      	bne.n	8011206 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011200:	2301      	movs	r3, #1
 8011202:	60fb      	str	r3, [r7, #12]
 8011204:	e001      	b.n	801120a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011206:	2300      	movs	r3, #0
 8011208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801120a:	f001 fa23 	bl	8012654 <vPortExitCritical>

	return xReturn;
 801120e:	68fb      	ldr	r3, [r7, #12]
}
 8011210:	4618      	mov	r0, r3
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011220:	f001 f9e8 	bl	80125f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801122c:	429a      	cmp	r2, r3
 801122e:	d102      	bne.n	8011236 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011230:	2301      	movs	r3, #1
 8011232:	60fb      	str	r3, [r7, #12]
 8011234:	e001      	b.n	801123a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011236:	2300      	movs	r3, #0
 8011238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801123a:	f001 fa0b 	bl	8012654 <vPortExitCritical>

	return xReturn;
 801123e:	68fb      	ldr	r3, [r7, #12]
}
 8011240:	4618      	mov	r0, r3
 8011242:	3710      	adds	r7, #16
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}

08011248 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011248:	b580      	push	{r7, lr}
 801124a:	b08e      	sub	sp, #56	; 0x38
 801124c:	af04      	add	r7, sp, #16
 801124e:	60f8      	str	r0, [r7, #12]
 8011250:	60b9      	str	r1, [r7, #8]
 8011252:	607a      	str	r2, [r7, #4]
 8011254:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011258:	2b00      	cmp	r3, #0
 801125a:	d10a      	bne.n	8011272 <xTaskCreateStatic+0x2a>
	__asm volatile
 801125c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011260:	f383 8811 	msr	BASEPRI, r3
 8011264:	f3bf 8f6f 	isb	sy
 8011268:	f3bf 8f4f 	dsb	sy
 801126c:	623b      	str	r3, [r7, #32]
}
 801126e:	bf00      	nop
 8011270:	e7fe      	b.n	8011270 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011274:	2b00      	cmp	r3, #0
 8011276:	d10a      	bne.n	801128e <xTaskCreateStatic+0x46>
	__asm volatile
 8011278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127c:	f383 8811 	msr	BASEPRI, r3
 8011280:	f3bf 8f6f 	isb	sy
 8011284:	f3bf 8f4f 	dsb	sy
 8011288:	61fb      	str	r3, [r7, #28]
}
 801128a:	bf00      	nop
 801128c:	e7fe      	b.n	801128c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801128e:	23c4      	movs	r3, #196	; 0xc4
 8011290:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	2bc4      	cmp	r3, #196	; 0xc4
 8011296:	d00a      	beq.n	80112ae <xTaskCreateStatic+0x66>
	__asm volatile
 8011298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129c:	f383 8811 	msr	BASEPRI, r3
 80112a0:	f3bf 8f6f 	isb	sy
 80112a4:	f3bf 8f4f 	dsb	sy
 80112a8:	61bb      	str	r3, [r7, #24]
}
 80112aa:	bf00      	nop
 80112ac:	e7fe      	b.n	80112ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80112ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80112b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d01e      	beq.n	80112f4 <xTaskCreateStatic+0xac>
 80112b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d01b      	beq.n	80112f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80112c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	2202      	movs	r2, #2
 80112ca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80112ce:	2300      	movs	r3, #0
 80112d0:	9303      	str	r3, [sp, #12]
 80112d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d4:	9302      	str	r3, [sp, #8]
 80112d6:	f107 0314 	add.w	r3, r7, #20
 80112da:	9301      	str	r3, [sp, #4]
 80112dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112de:	9300      	str	r3, [sp, #0]
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	68b9      	ldr	r1, [r7, #8]
 80112e6:	68f8      	ldr	r0, [r7, #12]
 80112e8:	f000 f850 	bl	801138c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80112ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112ee:	f000 f8f3 	bl	80114d8 <prvAddNewTaskToReadyList>
 80112f2:	e001      	b.n	80112f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80112f4:	2300      	movs	r3, #0
 80112f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80112f8:	697b      	ldr	r3, [r7, #20]
	}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3728      	adds	r7, #40	; 0x28
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}

08011302 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011302:	b580      	push	{r7, lr}
 8011304:	b08c      	sub	sp, #48	; 0x30
 8011306:	af04      	add	r7, sp, #16
 8011308:	60f8      	str	r0, [r7, #12]
 801130a:	60b9      	str	r1, [r7, #8]
 801130c:	603b      	str	r3, [r7, #0]
 801130e:	4613      	mov	r3, r2
 8011310:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011312:	88fb      	ldrh	r3, [r7, #6]
 8011314:	009b      	lsls	r3, r3, #2
 8011316:	4618      	mov	r0, r3
 8011318:	f001 fa8e 	bl	8012838 <pvPortMalloc>
 801131c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d00e      	beq.n	8011342 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011324:	20c4      	movs	r0, #196	; 0xc4
 8011326:	f001 fa87 	bl	8012838 <pvPortMalloc>
 801132a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801132c:	69fb      	ldr	r3, [r7, #28]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d003      	beq.n	801133a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	697a      	ldr	r2, [r7, #20]
 8011336:	631a      	str	r2, [r3, #48]	; 0x30
 8011338:	e005      	b.n	8011346 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801133a:	6978      	ldr	r0, [r7, #20]
 801133c:	f001 fb48 	bl	80129d0 <vPortFree>
 8011340:	e001      	b.n	8011346 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011342:	2300      	movs	r3, #0
 8011344:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d017      	beq.n	801137c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801134c:	69fb      	ldr	r3, [r7, #28]
 801134e:	2200      	movs	r2, #0
 8011350:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011354:	88fa      	ldrh	r2, [r7, #6]
 8011356:	2300      	movs	r3, #0
 8011358:	9303      	str	r3, [sp, #12]
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	9302      	str	r3, [sp, #8]
 801135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011360:	9301      	str	r3, [sp, #4]
 8011362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011364:	9300      	str	r3, [sp, #0]
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	68b9      	ldr	r1, [r7, #8]
 801136a:	68f8      	ldr	r0, [r7, #12]
 801136c:	f000 f80e 	bl	801138c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011370:	69f8      	ldr	r0, [r7, #28]
 8011372:	f000 f8b1 	bl	80114d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011376:	2301      	movs	r3, #1
 8011378:	61bb      	str	r3, [r7, #24]
 801137a:	e002      	b.n	8011382 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801137c:	f04f 33ff 	mov.w	r3, #4294967295
 8011380:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011382:	69bb      	ldr	r3, [r7, #24]
	}
 8011384:	4618      	mov	r0, r3
 8011386:	3720      	adds	r7, #32
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}

0801138c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b088      	sub	sp, #32
 8011390:	af00      	add	r7, sp, #0
 8011392:	60f8      	str	r0, [r7, #12]
 8011394:	60b9      	str	r1, [r7, #8]
 8011396:	607a      	str	r2, [r7, #4]
 8011398:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801139c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	009b      	lsls	r3, r3, #2
 80113a2:	461a      	mov	r2, r3
 80113a4:	21a5      	movs	r1, #165	; 0xa5
 80113a6:	f001 fd62 	bl	8012e6e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80113aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80113b4:	3b01      	subs	r3, #1
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	4413      	add	r3, r2
 80113ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80113bc:	69bb      	ldr	r3, [r7, #24]
 80113be:	f023 0307 	bic.w	r3, r3, #7
 80113c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	f003 0307 	and.w	r3, r3, #7
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00a      	beq.n	80113e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80113ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	617b      	str	r3, [r7, #20]
}
 80113e0:	bf00      	nop
 80113e2:	e7fe      	b.n	80113e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d01f      	beq.n	801142a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80113ea:	2300      	movs	r3, #0
 80113ec:	61fb      	str	r3, [r7, #28]
 80113ee:	e012      	b.n	8011416 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80113f0:	68ba      	ldr	r2, [r7, #8]
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	4413      	add	r3, r2
 80113f6:	7819      	ldrb	r1, [r3, #0]
 80113f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	4413      	add	r3, r2
 80113fe:	3334      	adds	r3, #52	; 0x34
 8011400:	460a      	mov	r2, r1
 8011402:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011404:	68ba      	ldr	r2, [r7, #8]
 8011406:	69fb      	ldr	r3, [r7, #28]
 8011408:	4413      	add	r3, r2
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d006      	beq.n	801141e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	3301      	adds	r3, #1
 8011414:	61fb      	str	r3, [r7, #28]
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	2b1f      	cmp	r3, #31
 801141a:	d9e9      	bls.n	80113f0 <prvInitialiseNewTask+0x64>
 801141c:	e000      	b.n	8011420 <prvInitialiseNewTask+0x94>
			{
				break;
 801141e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011422:	2200      	movs	r2, #0
 8011424:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8011428:	e003      	b.n	8011432 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801142c:	2200      	movs	r2, #0
 801142e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011434:	2b06      	cmp	r3, #6
 8011436:	d901      	bls.n	801143c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011438:	2306      	movs	r3, #6
 801143a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801143c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801143e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011440:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011446:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8011448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144a:	2200      	movs	r2, #0
 801144c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011450:	3304      	adds	r3, #4
 8011452:	4618      	mov	r0, r3
 8011454:	f7ff f89e 	bl	8010594 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145a:	3318      	adds	r3, #24
 801145c:	4618      	mov	r0, r3
 801145e:	f7ff f899 	bl	8010594 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011466:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146a:	f1c3 0207 	rsb	r2, r3, #7
 801146e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011470:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011476:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147a:	2200      	movs	r2, #0
 801147c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011482:	2200      	movs	r2, #0
 8011484:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801148a:	335c      	adds	r3, #92	; 0x5c
 801148c:	2260      	movs	r2, #96	; 0x60
 801148e:	2100      	movs	r1, #0
 8011490:	4618      	mov	r0, r3
 8011492:	f001 fcec 	bl	8012e6e <memset>
 8011496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011498:	4a0c      	ldr	r2, [pc, #48]	; (80114cc <prvInitialiseNewTask+0x140>)
 801149a:	661a      	str	r2, [r3, #96]	; 0x60
 801149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801149e:	4a0c      	ldr	r2, [pc, #48]	; (80114d0 <prvInitialiseNewTask+0x144>)
 80114a0:	665a      	str	r2, [r3, #100]	; 0x64
 80114a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a4:	4a0b      	ldr	r2, [pc, #44]	; (80114d4 <prvInitialiseNewTask+0x148>)
 80114a6:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80114a8:	683a      	ldr	r2, [r7, #0]
 80114aa:	68f9      	ldr	r1, [r7, #12]
 80114ac:	69b8      	ldr	r0, [r7, #24]
 80114ae:	f000 ff77 	bl	80123a0 <pxPortInitialiseStack>
 80114b2:	4602      	mov	r2, r0
 80114b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80114b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d002      	beq.n	80114c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80114be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114c4:	bf00      	nop
 80114c6:	3720      	adds	r7, #32
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}
 80114cc:	08016548 	.word	0x08016548
 80114d0:	08016568 	.word	0x08016568
 80114d4:	08016528 	.word	0x08016528

080114d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80114e0:	f001 f888 	bl	80125f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80114e4:	4b2a      	ldr	r3, [pc, #168]	; (8011590 <prvAddNewTaskToReadyList+0xb8>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	3301      	adds	r3, #1
 80114ea:	4a29      	ldr	r2, [pc, #164]	; (8011590 <prvAddNewTaskToReadyList+0xb8>)
 80114ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80114ee:	4b29      	ldr	r3, [pc, #164]	; (8011594 <prvAddNewTaskToReadyList+0xbc>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d109      	bne.n	801150a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80114f6:	4a27      	ldr	r2, [pc, #156]	; (8011594 <prvAddNewTaskToReadyList+0xbc>)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80114fc:	4b24      	ldr	r3, [pc, #144]	; (8011590 <prvAddNewTaskToReadyList+0xb8>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2b01      	cmp	r3, #1
 8011502:	d110      	bne.n	8011526 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011504:	f000 fc30 	bl	8011d68 <prvInitialiseTaskLists>
 8011508:	e00d      	b.n	8011526 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801150a:	4b23      	ldr	r3, [pc, #140]	; (8011598 <prvAddNewTaskToReadyList+0xc0>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d109      	bne.n	8011526 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011512:	4b20      	ldr	r3, [pc, #128]	; (8011594 <prvAddNewTaskToReadyList+0xbc>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801151c:	429a      	cmp	r2, r3
 801151e:	d802      	bhi.n	8011526 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011520:	4a1c      	ldr	r2, [pc, #112]	; (8011594 <prvAddNewTaskToReadyList+0xbc>)
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011526:	4b1d      	ldr	r3, [pc, #116]	; (801159c <prvAddNewTaskToReadyList+0xc4>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	3301      	adds	r3, #1
 801152c:	4a1b      	ldr	r2, [pc, #108]	; (801159c <prvAddNewTaskToReadyList+0xc4>)
 801152e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011534:	2201      	movs	r2, #1
 8011536:	409a      	lsls	r2, r3
 8011538:	4b19      	ldr	r3, [pc, #100]	; (80115a0 <prvAddNewTaskToReadyList+0xc8>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	4313      	orrs	r3, r2
 801153e:	4a18      	ldr	r2, [pc, #96]	; (80115a0 <prvAddNewTaskToReadyList+0xc8>)
 8011540:	6013      	str	r3, [r2, #0]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011546:	4613      	mov	r3, r2
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	4413      	add	r3, r2
 801154c:	009b      	lsls	r3, r3, #2
 801154e:	4a15      	ldr	r2, [pc, #84]	; (80115a4 <prvAddNewTaskToReadyList+0xcc>)
 8011550:	441a      	add	r2, r3
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	3304      	adds	r3, #4
 8011556:	4619      	mov	r1, r3
 8011558:	4610      	mov	r0, r2
 801155a:	f7ff f828 	bl	80105ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801155e:	f001 f879 	bl	8012654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011562:	4b0d      	ldr	r3, [pc, #52]	; (8011598 <prvAddNewTaskToReadyList+0xc0>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d00e      	beq.n	8011588 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801156a:	4b0a      	ldr	r3, [pc, #40]	; (8011594 <prvAddNewTaskToReadyList+0xbc>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011574:	429a      	cmp	r2, r3
 8011576:	d207      	bcs.n	8011588 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011578:	4b0b      	ldr	r3, [pc, #44]	; (80115a8 <prvAddNewTaskToReadyList+0xd0>)
 801157a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801157e:	601a      	str	r2, [r3, #0]
 8011580:	f3bf 8f4f 	dsb	sy
 8011584:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011588:	bf00      	nop
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}
 8011590:	20000bac 	.word	0x20000bac
 8011594:	20000aac 	.word	0x20000aac
 8011598:	20000bb8 	.word	0x20000bb8
 801159c:	20000bc8 	.word	0x20000bc8
 80115a0:	20000bb4 	.word	0x20000bb4
 80115a4:	20000ab0 	.word	0x20000ab0
 80115a8:	e000ed04 	.word	0xe000ed04

080115ac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b08a      	sub	sp, #40	; 0x28
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80115b6:	2300      	movs	r3, #0
 80115b8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d10a      	bne.n	80115d6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80115c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c4:	f383 8811 	msr	BASEPRI, r3
 80115c8:	f3bf 8f6f 	isb	sy
 80115cc:	f3bf 8f4f 	dsb	sy
 80115d0:	617b      	str	r3, [r7, #20]
}
 80115d2:	bf00      	nop
 80115d4:	e7fe      	b.n	80115d4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d10a      	bne.n	80115f2 <vTaskDelayUntil+0x46>
	__asm volatile
 80115dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e0:	f383 8811 	msr	BASEPRI, r3
 80115e4:	f3bf 8f6f 	isb	sy
 80115e8:	f3bf 8f4f 	dsb	sy
 80115ec:	613b      	str	r3, [r7, #16]
}
 80115ee:	bf00      	nop
 80115f0:	e7fe      	b.n	80115f0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80115f2:	4b2a      	ldr	r3, [pc, #168]	; (801169c <vTaskDelayUntil+0xf0>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d00a      	beq.n	8011610 <vTaskDelayUntil+0x64>
	__asm volatile
 80115fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115fe:	f383 8811 	msr	BASEPRI, r3
 8011602:	f3bf 8f6f 	isb	sy
 8011606:	f3bf 8f4f 	dsb	sy
 801160a:	60fb      	str	r3, [r7, #12]
}
 801160c:	bf00      	nop
 801160e:	e7fe      	b.n	801160e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8011610:	f000 f8b4 	bl	801177c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8011614:	4b22      	ldr	r3, [pc, #136]	; (80116a0 <vTaskDelayUntil+0xf4>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	683a      	ldr	r2, [r7, #0]
 8011620:	4413      	add	r3, r2
 8011622:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	6a3a      	ldr	r2, [r7, #32]
 801162a:	429a      	cmp	r2, r3
 801162c:	d20b      	bcs.n	8011646 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	69fa      	ldr	r2, [r7, #28]
 8011634:	429a      	cmp	r2, r3
 8011636:	d211      	bcs.n	801165c <vTaskDelayUntil+0xb0>
 8011638:	69fa      	ldr	r2, [r7, #28]
 801163a:	6a3b      	ldr	r3, [r7, #32]
 801163c:	429a      	cmp	r2, r3
 801163e:	d90d      	bls.n	801165c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8011640:	2301      	movs	r3, #1
 8011642:	627b      	str	r3, [r7, #36]	; 0x24
 8011644:	e00a      	b.n	801165c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	69fa      	ldr	r2, [r7, #28]
 801164c:	429a      	cmp	r2, r3
 801164e:	d303      	bcc.n	8011658 <vTaskDelayUntil+0xac>
 8011650:	69fa      	ldr	r2, [r7, #28]
 8011652:	6a3b      	ldr	r3, [r7, #32]
 8011654:	429a      	cmp	r2, r3
 8011656:	d901      	bls.n	801165c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8011658:	2301      	movs	r3, #1
 801165a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	69fa      	ldr	r2, [r7, #28]
 8011660:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8011662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011664:	2b00      	cmp	r3, #0
 8011666:	d006      	beq.n	8011676 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8011668:	69fa      	ldr	r2, [r7, #28]
 801166a:	6a3b      	ldr	r3, [r7, #32]
 801166c:	1ad3      	subs	r3, r2, r3
 801166e:	2100      	movs	r1, #0
 8011670:	4618      	mov	r0, r3
 8011672:	f000 fe2f 	bl	80122d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8011676:	f000 f88f 	bl	8011798 <xTaskResumeAll>
 801167a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801167c:	69bb      	ldr	r3, [r7, #24]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d107      	bne.n	8011692 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8011682:	4b08      	ldr	r3, [pc, #32]	; (80116a4 <vTaskDelayUntil+0xf8>)
 8011684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011688:	601a      	str	r2, [r3, #0]
 801168a:	f3bf 8f4f 	dsb	sy
 801168e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011692:	bf00      	nop
 8011694:	3728      	adds	r7, #40	; 0x28
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	20000bd4 	.word	0x20000bd4
 80116a0:	20000bb0 	.word	0x20000bb0
 80116a4:	e000ed04 	.word	0xe000ed04

080116a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b08a      	sub	sp, #40	; 0x28
 80116ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80116ae:	2300      	movs	r3, #0
 80116b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80116b2:	2300      	movs	r3, #0
 80116b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80116b6:	463a      	mov	r2, r7
 80116b8:	1d39      	adds	r1, r7, #4
 80116ba:	f107 0308 	add.w	r3, r7, #8
 80116be:	4618      	mov	r0, r3
 80116c0:	f7ef fbee 	bl	8000ea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80116c4:	6839      	ldr	r1, [r7, #0]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	68ba      	ldr	r2, [r7, #8]
 80116ca:	9202      	str	r2, [sp, #8]
 80116cc:	9301      	str	r3, [sp, #4]
 80116ce:	2300      	movs	r3, #0
 80116d0:	9300      	str	r3, [sp, #0]
 80116d2:	2300      	movs	r3, #0
 80116d4:	460a      	mov	r2, r1
 80116d6:	4921      	ldr	r1, [pc, #132]	; (801175c <vTaskStartScheduler+0xb4>)
 80116d8:	4821      	ldr	r0, [pc, #132]	; (8011760 <vTaskStartScheduler+0xb8>)
 80116da:	f7ff fdb5 	bl	8011248 <xTaskCreateStatic>
 80116de:	4603      	mov	r3, r0
 80116e0:	4a20      	ldr	r2, [pc, #128]	; (8011764 <vTaskStartScheduler+0xbc>)
 80116e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80116e4:	4b1f      	ldr	r3, [pc, #124]	; (8011764 <vTaskStartScheduler+0xbc>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d002      	beq.n	80116f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80116ec:	2301      	movs	r3, #1
 80116ee:	617b      	str	r3, [r7, #20]
 80116f0:	e001      	b.n	80116f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80116f2:	2300      	movs	r3, #0
 80116f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d11b      	bne.n	8011734 <vTaskStartScheduler+0x8c>
	__asm volatile
 80116fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011700:	f383 8811 	msr	BASEPRI, r3
 8011704:	f3bf 8f6f 	isb	sy
 8011708:	f3bf 8f4f 	dsb	sy
 801170c:	613b      	str	r3, [r7, #16]
}
 801170e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011710:	4b15      	ldr	r3, [pc, #84]	; (8011768 <vTaskStartScheduler+0xc0>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	335c      	adds	r3, #92	; 0x5c
 8011716:	4a15      	ldr	r2, [pc, #84]	; (801176c <vTaskStartScheduler+0xc4>)
 8011718:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801171a:	4b15      	ldr	r3, [pc, #84]	; (8011770 <vTaskStartScheduler+0xc8>)
 801171c:	f04f 32ff 	mov.w	r2, #4294967295
 8011720:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011722:	4b14      	ldr	r3, [pc, #80]	; (8011774 <vTaskStartScheduler+0xcc>)
 8011724:	2201      	movs	r2, #1
 8011726:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011728:	4b13      	ldr	r3, [pc, #76]	; (8011778 <vTaskStartScheduler+0xd0>)
 801172a:	2200      	movs	r2, #0
 801172c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801172e:	f000 febf 	bl	80124b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011732:	e00e      	b.n	8011752 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801173a:	d10a      	bne.n	8011752 <vTaskStartScheduler+0xaa>
	__asm volatile
 801173c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011740:	f383 8811 	msr	BASEPRI, r3
 8011744:	f3bf 8f6f 	isb	sy
 8011748:	f3bf 8f4f 	dsb	sy
 801174c:	60fb      	str	r3, [r7, #12]
}
 801174e:	bf00      	nop
 8011750:	e7fe      	b.n	8011750 <vTaskStartScheduler+0xa8>
}
 8011752:	bf00      	nop
 8011754:	3718      	adds	r7, #24
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
 801175a:	bf00      	nop
 801175c:	080164d8 	.word	0x080164d8
 8011760:	08011d39 	.word	0x08011d39
 8011764:	20000bd0 	.word	0x20000bd0
 8011768:	20000aac 	.word	0x20000aac
 801176c:	20000510 	.word	0x20000510
 8011770:	20000bcc 	.word	0x20000bcc
 8011774:	20000bb8 	.word	0x20000bb8
 8011778:	20000bb0 	.word	0x20000bb0

0801177c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801177c:	b480      	push	{r7}
 801177e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011780:	4b04      	ldr	r3, [pc, #16]	; (8011794 <vTaskSuspendAll+0x18>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	3301      	adds	r3, #1
 8011786:	4a03      	ldr	r2, [pc, #12]	; (8011794 <vTaskSuspendAll+0x18>)
 8011788:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801178a:	bf00      	nop
 801178c:	46bd      	mov	sp, r7
 801178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011792:	4770      	bx	lr
 8011794:	20000bd4 	.word	0x20000bd4

08011798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b084      	sub	sp, #16
 801179c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801179e:	2300      	movs	r3, #0
 80117a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80117a2:	2300      	movs	r3, #0
 80117a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80117a6:	4b41      	ldr	r3, [pc, #260]	; (80118ac <xTaskResumeAll+0x114>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d10a      	bne.n	80117c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80117ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b2:	f383 8811 	msr	BASEPRI, r3
 80117b6:	f3bf 8f6f 	isb	sy
 80117ba:	f3bf 8f4f 	dsb	sy
 80117be:	603b      	str	r3, [r7, #0]
}
 80117c0:	bf00      	nop
 80117c2:	e7fe      	b.n	80117c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80117c4:	f000 ff16 	bl	80125f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80117c8:	4b38      	ldr	r3, [pc, #224]	; (80118ac <xTaskResumeAll+0x114>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	3b01      	subs	r3, #1
 80117ce:	4a37      	ldr	r2, [pc, #220]	; (80118ac <xTaskResumeAll+0x114>)
 80117d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117d2:	4b36      	ldr	r3, [pc, #216]	; (80118ac <xTaskResumeAll+0x114>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d161      	bne.n	801189e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80117da:	4b35      	ldr	r3, [pc, #212]	; (80118b0 <xTaskResumeAll+0x118>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d05d      	beq.n	801189e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80117e2:	e02e      	b.n	8011842 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117e4:	4b33      	ldr	r3, [pc, #204]	; (80118b4 <xTaskResumeAll+0x11c>)
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	3318      	adds	r3, #24
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7fe ff39 	bl	8010668 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	3304      	adds	r3, #4
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fe ff34 	bl	8010668 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011804:	2201      	movs	r2, #1
 8011806:	409a      	lsls	r2, r3
 8011808:	4b2b      	ldr	r3, [pc, #172]	; (80118b8 <xTaskResumeAll+0x120>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	4313      	orrs	r3, r2
 801180e:	4a2a      	ldr	r2, [pc, #168]	; (80118b8 <xTaskResumeAll+0x120>)
 8011810:	6013      	str	r3, [r2, #0]
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011816:	4613      	mov	r3, r2
 8011818:	009b      	lsls	r3, r3, #2
 801181a:	4413      	add	r3, r2
 801181c:	009b      	lsls	r3, r3, #2
 801181e:	4a27      	ldr	r2, [pc, #156]	; (80118bc <xTaskResumeAll+0x124>)
 8011820:	441a      	add	r2, r3
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	3304      	adds	r3, #4
 8011826:	4619      	mov	r1, r3
 8011828:	4610      	mov	r0, r2
 801182a:	f7fe fec0 	bl	80105ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011832:	4b23      	ldr	r3, [pc, #140]	; (80118c0 <xTaskResumeAll+0x128>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011838:	429a      	cmp	r2, r3
 801183a:	d302      	bcc.n	8011842 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801183c:	4b21      	ldr	r3, [pc, #132]	; (80118c4 <xTaskResumeAll+0x12c>)
 801183e:	2201      	movs	r2, #1
 8011840:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011842:	4b1c      	ldr	r3, [pc, #112]	; (80118b4 <xTaskResumeAll+0x11c>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d1cc      	bne.n	80117e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d001      	beq.n	8011854 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011850:	f000 fb64 	bl	8011f1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011854:	4b1c      	ldr	r3, [pc, #112]	; (80118c8 <xTaskResumeAll+0x130>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d010      	beq.n	8011882 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011860:	f000 f846 	bl	80118f0 <xTaskIncrementTick>
 8011864:	4603      	mov	r3, r0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d002      	beq.n	8011870 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801186a:	4b16      	ldr	r3, [pc, #88]	; (80118c4 <xTaskResumeAll+0x12c>)
 801186c:	2201      	movs	r2, #1
 801186e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	3b01      	subs	r3, #1
 8011874:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d1f1      	bne.n	8011860 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801187c:	4b12      	ldr	r3, [pc, #72]	; (80118c8 <xTaskResumeAll+0x130>)
 801187e:	2200      	movs	r2, #0
 8011880:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011882:	4b10      	ldr	r3, [pc, #64]	; (80118c4 <xTaskResumeAll+0x12c>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d009      	beq.n	801189e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801188a:	2301      	movs	r3, #1
 801188c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801188e:	4b0f      	ldr	r3, [pc, #60]	; (80118cc <xTaskResumeAll+0x134>)
 8011890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011894:	601a      	str	r2, [r3, #0]
 8011896:	f3bf 8f4f 	dsb	sy
 801189a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801189e:	f000 fed9 	bl	8012654 <vPortExitCritical>

	return xAlreadyYielded;
 80118a2:	68bb      	ldr	r3, [r7, #8]
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3710      	adds	r7, #16
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	20000bd4 	.word	0x20000bd4
 80118b0:	20000bac 	.word	0x20000bac
 80118b4:	20000b6c 	.word	0x20000b6c
 80118b8:	20000bb4 	.word	0x20000bb4
 80118bc:	20000ab0 	.word	0x20000ab0
 80118c0:	20000aac 	.word	0x20000aac
 80118c4:	20000bc0 	.word	0x20000bc0
 80118c8:	20000bbc 	.word	0x20000bbc
 80118cc:	e000ed04 	.word	0xe000ed04

080118d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80118d0:	b480      	push	{r7}
 80118d2:	b083      	sub	sp, #12
 80118d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80118d6:	4b05      	ldr	r3, [pc, #20]	; (80118ec <xTaskGetTickCount+0x1c>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80118dc:	687b      	ldr	r3, [r7, #4]
}
 80118de:	4618      	mov	r0, r3
 80118e0:	370c      	adds	r7, #12
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr
 80118ea:	bf00      	nop
 80118ec:	20000bb0 	.word	0x20000bb0

080118f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b086      	sub	sp, #24
 80118f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80118f6:	2300      	movs	r3, #0
 80118f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118fa:	4b4e      	ldr	r3, [pc, #312]	; (8011a34 <xTaskIncrementTick+0x144>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	f040 808e 	bne.w	8011a20 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011904:	4b4c      	ldr	r3, [pc, #304]	; (8011a38 <xTaskIncrementTick+0x148>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	3301      	adds	r3, #1
 801190a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801190c:	4a4a      	ldr	r2, [pc, #296]	; (8011a38 <xTaskIncrementTick+0x148>)
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d120      	bne.n	801195a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011918:	4b48      	ldr	r3, [pc, #288]	; (8011a3c <xTaskIncrementTick+0x14c>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d00a      	beq.n	8011938 <xTaskIncrementTick+0x48>
	__asm volatile
 8011922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011926:	f383 8811 	msr	BASEPRI, r3
 801192a:	f3bf 8f6f 	isb	sy
 801192e:	f3bf 8f4f 	dsb	sy
 8011932:	603b      	str	r3, [r7, #0]
}
 8011934:	bf00      	nop
 8011936:	e7fe      	b.n	8011936 <xTaskIncrementTick+0x46>
 8011938:	4b40      	ldr	r3, [pc, #256]	; (8011a3c <xTaskIncrementTick+0x14c>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	60fb      	str	r3, [r7, #12]
 801193e:	4b40      	ldr	r3, [pc, #256]	; (8011a40 <xTaskIncrementTick+0x150>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	4a3e      	ldr	r2, [pc, #248]	; (8011a3c <xTaskIncrementTick+0x14c>)
 8011944:	6013      	str	r3, [r2, #0]
 8011946:	4a3e      	ldr	r2, [pc, #248]	; (8011a40 <xTaskIncrementTick+0x150>)
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	6013      	str	r3, [r2, #0]
 801194c:	4b3d      	ldr	r3, [pc, #244]	; (8011a44 <xTaskIncrementTick+0x154>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	3301      	adds	r3, #1
 8011952:	4a3c      	ldr	r2, [pc, #240]	; (8011a44 <xTaskIncrementTick+0x154>)
 8011954:	6013      	str	r3, [r2, #0]
 8011956:	f000 fae1 	bl	8011f1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801195a:	4b3b      	ldr	r3, [pc, #236]	; (8011a48 <xTaskIncrementTick+0x158>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	693a      	ldr	r2, [r7, #16]
 8011960:	429a      	cmp	r2, r3
 8011962:	d348      	bcc.n	80119f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011964:	4b35      	ldr	r3, [pc, #212]	; (8011a3c <xTaskIncrementTick+0x14c>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d104      	bne.n	8011978 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801196e:	4b36      	ldr	r3, [pc, #216]	; (8011a48 <xTaskIncrementTick+0x158>)
 8011970:	f04f 32ff 	mov.w	r2, #4294967295
 8011974:	601a      	str	r2, [r3, #0]
					break;
 8011976:	e03e      	b.n	80119f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011978:	4b30      	ldr	r3, [pc, #192]	; (8011a3c <xTaskIncrementTick+0x14c>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	68db      	ldr	r3, [r3, #12]
 8011980:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	685b      	ldr	r3, [r3, #4]
 8011986:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011988:	693a      	ldr	r2, [r7, #16]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	429a      	cmp	r2, r3
 801198e:	d203      	bcs.n	8011998 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011990:	4a2d      	ldr	r2, [pc, #180]	; (8011a48 <xTaskIncrementTick+0x158>)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011996:	e02e      	b.n	80119f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	3304      	adds	r3, #4
 801199c:	4618      	mov	r0, r3
 801199e:	f7fe fe63 	bl	8010668 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d004      	beq.n	80119b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	3318      	adds	r3, #24
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fe fe5a 	bl	8010668 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b8:	2201      	movs	r2, #1
 80119ba:	409a      	lsls	r2, r3
 80119bc:	4b23      	ldr	r3, [pc, #140]	; (8011a4c <xTaskIncrementTick+0x15c>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	4313      	orrs	r3, r2
 80119c2:	4a22      	ldr	r2, [pc, #136]	; (8011a4c <xTaskIncrementTick+0x15c>)
 80119c4:	6013      	str	r3, [r2, #0]
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ca:	4613      	mov	r3, r2
 80119cc:	009b      	lsls	r3, r3, #2
 80119ce:	4413      	add	r3, r2
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	4a1f      	ldr	r2, [pc, #124]	; (8011a50 <xTaskIncrementTick+0x160>)
 80119d4:	441a      	add	r2, r3
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	3304      	adds	r3, #4
 80119da:	4619      	mov	r1, r3
 80119dc:	4610      	mov	r0, r2
 80119de:	f7fe fde6 	bl	80105ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119e6:	4b1b      	ldr	r3, [pc, #108]	; (8011a54 <xTaskIncrementTick+0x164>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d3b9      	bcc.n	8011964 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80119f0:	2301      	movs	r3, #1
 80119f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80119f4:	e7b6      	b.n	8011964 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80119f6:	4b17      	ldr	r3, [pc, #92]	; (8011a54 <xTaskIncrementTick+0x164>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119fc:	4914      	ldr	r1, [pc, #80]	; (8011a50 <xTaskIncrementTick+0x160>)
 80119fe:	4613      	mov	r3, r2
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	4413      	add	r3, r2
 8011a04:	009b      	lsls	r3, r3, #2
 8011a06:	440b      	add	r3, r1
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d901      	bls.n	8011a12 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011a12:	4b11      	ldr	r3, [pc, #68]	; (8011a58 <xTaskIncrementTick+0x168>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d007      	beq.n	8011a2a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	617b      	str	r3, [r7, #20]
 8011a1e:	e004      	b.n	8011a2a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011a20:	4b0e      	ldr	r3, [pc, #56]	; (8011a5c <xTaskIncrementTick+0x16c>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	3301      	adds	r3, #1
 8011a26:	4a0d      	ldr	r2, [pc, #52]	; (8011a5c <xTaskIncrementTick+0x16c>)
 8011a28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011a2a:	697b      	ldr	r3, [r7, #20]
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3718      	adds	r7, #24
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}
 8011a34:	20000bd4 	.word	0x20000bd4
 8011a38:	20000bb0 	.word	0x20000bb0
 8011a3c:	20000b64 	.word	0x20000b64
 8011a40:	20000b68 	.word	0x20000b68
 8011a44:	20000bc4 	.word	0x20000bc4
 8011a48:	20000bcc 	.word	0x20000bcc
 8011a4c:	20000bb4 	.word	0x20000bb4
 8011a50:	20000ab0 	.word	0x20000ab0
 8011a54:	20000aac 	.word	0x20000aac
 8011a58:	20000bc0 	.word	0x20000bc0
 8011a5c:	20000bbc 	.word	0x20000bbc

08011a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011a60:	b480      	push	{r7}
 8011a62:	b087      	sub	sp, #28
 8011a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011a66:	4b29      	ldr	r3, [pc, #164]	; (8011b0c <vTaskSwitchContext+0xac>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d003      	beq.n	8011a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011a6e:	4b28      	ldr	r3, [pc, #160]	; (8011b10 <vTaskSwitchContext+0xb0>)
 8011a70:	2201      	movs	r2, #1
 8011a72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011a74:	e044      	b.n	8011b00 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8011a76:	4b26      	ldr	r3, [pc, #152]	; (8011b10 <vTaskSwitchContext+0xb0>)
 8011a78:	2200      	movs	r2, #0
 8011a7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a7c:	4b25      	ldr	r3, [pc, #148]	; (8011b14 <vTaskSwitchContext+0xb4>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	fab3 f383 	clz	r3, r3
 8011a88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011a8a:	7afb      	ldrb	r3, [r7, #11]
 8011a8c:	f1c3 031f 	rsb	r3, r3, #31
 8011a90:	617b      	str	r3, [r7, #20]
 8011a92:	4921      	ldr	r1, [pc, #132]	; (8011b18 <vTaskSwitchContext+0xb8>)
 8011a94:	697a      	ldr	r2, [r7, #20]
 8011a96:	4613      	mov	r3, r2
 8011a98:	009b      	lsls	r3, r3, #2
 8011a9a:	4413      	add	r3, r2
 8011a9c:	009b      	lsls	r3, r3, #2
 8011a9e:	440b      	add	r3, r1
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d10a      	bne.n	8011abc <vTaskSwitchContext+0x5c>
	__asm volatile
 8011aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aaa:	f383 8811 	msr	BASEPRI, r3
 8011aae:	f3bf 8f6f 	isb	sy
 8011ab2:	f3bf 8f4f 	dsb	sy
 8011ab6:	607b      	str	r3, [r7, #4]
}
 8011ab8:	bf00      	nop
 8011aba:	e7fe      	b.n	8011aba <vTaskSwitchContext+0x5a>
 8011abc:	697a      	ldr	r2, [r7, #20]
 8011abe:	4613      	mov	r3, r2
 8011ac0:	009b      	lsls	r3, r3, #2
 8011ac2:	4413      	add	r3, r2
 8011ac4:	009b      	lsls	r3, r3, #2
 8011ac6:	4a14      	ldr	r2, [pc, #80]	; (8011b18 <vTaskSwitchContext+0xb8>)
 8011ac8:	4413      	add	r3, r2
 8011aca:	613b      	str	r3, [r7, #16]
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	685a      	ldr	r2, [r3, #4]
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	605a      	str	r2, [r3, #4]
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	685a      	ldr	r2, [r3, #4]
 8011ada:	693b      	ldr	r3, [r7, #16]
 8011adc:	3308      	adds	r3, #8
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d104      	bne.n	8011aec <vTaskSwitchContext+0x8c>
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	685a      	ldr	r2, [r3, #4]
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	605a      	str	r2, [r3, #4]
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	4a0a      	ldr	r2, [pc, #40]	; (8011b1c <vTaskSwitchContext+0xbc>)
 8011af4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011af6:	4b09      	ldr	r3, [pc, #36]	; (8011b1c <vTaskSwitchContext+0xbc>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	335c      	adds	r3, #92	; 0x5c
 8011afc:	4a08      	ldr	r2, [pc, #32]	; (8011b20 <vTaskSwitchContext+0xc0>)
 8011afe:	6013      	str	r3, [r2, #0]
}
 8011b00:	bf00      	nop
 8011b02:	371c      	adds	r7, #28
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr
 8011b0c:	20000bd4 	.word	0x20000bd4
 8011b10:	20000bc0 	.word	0x20000bc0
 8011b14:	20000bb4 	.word	0x20000bb4
 8011b18:	20000ab0 	.word	0x20000ab0
 8011b1c:	20000aac 	.word	0x20000aac
 8011b20:	20000510 	.word	0x20000510

08011b24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b084      	sub	sp, #16
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d10a      	bne.n	8011b4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b38:	f383 8811 	msr	BASEPRI, r3
 8011b3c:	f3bf 8f6f 	isb	sy
 8011b40:	f3bf 8f4f 	dsb	sy
 8011b44:	60fb      	str	r3, [r7, #12]
}
 8011b46:	bf00      	nop
 8011b48:	e7fe      	b.n	8011b48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011b4a:	4b07      	ldr	r3, [pc, #28]	; (8011b68 <vTaskPlaceOnEventList+0x44>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	3318      	adds	r3, #24
 8011b50:	4619      	mov	r1, r3
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f7fe fd4f 	bl	80105f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b58:	2101      	movs	r1, #1
 8011b5a:	6838      	ldr	r0, [r7, #0]
 8011b5c:	f000 fbba 	bl	80122d4 <prvAddCurrentTaskToDelayedList>
}
 8011b60:	bf00      	nop
 8011b62:	3710      	adds	r7, #16
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	20000aac 	.word	0x20000aac

08011b6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b086      	sub	sp, #24
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	68db      	ldr	r3, [r3, #12]
 8011b78:	68db      	ldr	r3, [r3, #12]
 8011b7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d10a      	bne.n	8011b98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b86:	f383 8811 	msr	BASEPRI, r3
 8011b8a:	f3bf 8f6f 	isb	sy
 8011b8e:	f3bf 8f4f 	dsb	sy
 8011b92:	60fb      	str	r3, [r7, #12]
}
 8011b94:	bf00      	nop
 8011b96:	e7fe      	b.n	8011b96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	3318      	adds	r3, #24
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7fe fd63 	bl	8010668 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ba2:	4b1d      	ldr	r3, [pc, #116]	; (8011c18 <xTaskRemoveFromEventList+0xac>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d11c      	bne.n	8011be4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	3304      	adds	r3, #4
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7fe fd5a 	bl	8010668 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb8:	2201      	movs	r2, #1
 8011bba:	409a      	lsls	r2, r3
 8011bbc:	4b17      	ldr	r3, [pc, #92]	; (8011c1c <xTaskRemoveFromEventList+0xb0>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4313      	orrs	r3, r2
 8011bc2:	4a16      	ldr	r2, [pc, #88]	; (8011c1c <xTaskRemoveFromEventList+0xb0>)
 8011bc4:	6013      	str	r3, [r2, #0]
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bca:	4613      	mov	r3, r2
 8011bcc:	009b      	lsls	r3, r3, #2
 8011bce:	4413      	add	r3, r2
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	4a13      	ldr	r2, [pc, #76]	; (8011c20 <xTaskRemoveFromEventList+0xb4>)
 8011bd4:	441a      	add	r2, r3
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	3304      	adds	r3, #4
 8011bda:	4619      	mov	r1, r3
 8011bdc:	4610      	mov	r0, r2
 8011bde:	f7fe fce6 	bl	80105ae <vListInsertEnd>
 8011be2:	e005      	b.n	8011bf0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	3318      	adds	r3, #24
 8011be8:	4619      	mov	r1, r3
 8011bea:	480e      	ldr	r0, [pc, #56]	; (8011c24 <xTaskRemoveFromEventList+0xb8>)
 8011bec:	f7fe fcdf 	bl	80105ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bf4:	4b0c      	ldr	r3, [pc, #48]	; (8011c28 <xTaskRemoveFromEventList+0xbc>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d905      	bls.n	8011c0a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011bfe:	2301      	movs	r3, #1
 8011c00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011c02:	4b0a      	ldr	r3, [pc, #40]	; (8011c2c <xTaskRemoveFromEventList+0xc0>)
 8011c04:	2201      	movs	r2, #1
 8011c06:	601a      	str	r2, [r3, #0]
 8011c08:	e001      	b.n	8011c0e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011c0e:	697b      	ldr	r3, [r7, #20]
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3718      	adds	r7, #24
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	20000bd4 	.word	0x20000bd4
 8011c1c:	20000bb4 	.word	0x20000bb4
 8011c20:	20000ab0 	.word	0x20000ab0
 8011c24:	20000b6c 	.word	0x20000b6c
 8011c28:	20000aac 	.word	0x20000aac
 8011c2c:	20000bc0 	.word	0x20000bc0

08011c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011c30:	b480      	push	{r7}
 8011c32:	b083      	sub	sp, #12
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011c38:	4b06      	ldr	r3, [pc, #24]	; (8011c54 <vTaskInternalSetTimeOutState+0x24>)
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011c40:	4b05      	ldr	r3, [pc, #20]	; (8011c58 <vTaskInternalSetTimeOutState+0x28>)
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	605a      	str	r2, [r3, #4]
}
 8011c48:	bf00      	nop
 8011c4a:	370c      	adds	r7, #12
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr
 8011c54:	20000bc4 	.word	0x20000bc4
 8011c58:	20000bb0 	.word	0x20000bb0

08011c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b088      	sub	sp, #32
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d10a      	bne.n	8011c82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c70:	f383 8811 	msr	BASEPRI, r3
 8011c74:	f3bf 8f6f 	isb	sy
 8011c78:	f3bf 8f4f 	dsb	sy
 8011c7c:	613b      	str	r3, [r7, #16]
}
 8011c7e:	bf00      	nop
 8011c80:	e7fe      	b.n	8011c80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d10a      	bne.n	8011c9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c8c:	f383 8811 	msr	BASEPRI, r3
 8011c90:	f3bf 8f6f 	isb	sy
 8011c94:	f3bf 8f4f 	dsb	sy
 8011c98:	60fb      	str	r3, [r7, #12]
}
 8011c9a:	bf00      	nop
 8011c9c:	e7fe      	b.n	8011c9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011c9e:	f000 fca9 	bl	80125f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011ca2:	4b1d      	ldr	r3, [pc, #116]	; (8011d18 <xTaskCheckForTimeOut+0xbc>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	69ba      	ldr	r2, [r7, #24]
 8011cae:	1ad3      	subs	r3, r2, r3
 8011cb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cba:	d102      	bne.n	8011cc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	61fb      	str	r3, [r7, #28]
 8011cc0:	e023      	b.n	8011d0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	4b15      	ldr	r3, [pc, #84]	; (8011d1c <xTaskCheckForTimeOut+0xc0>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d007      	beq.n	8011cde <xTaskCheckForTimeOut+0x82>
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	69ba      	ldr	r2, [r7, #24]
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d302      	bcc.n	8011cde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011cd8:	2301      	movs	r3, #1
 8011cda:	61fb      	str	r3, [r7, #28]
 8011cdc:	e015      	b.n	8011d0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	697a      	ldr	r2, [r7, #20]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d20b      	bcs.n	8011d00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	1ad2      	subs	r2, r2, r3
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7ff ff9b 	bl	8011c30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	61fb      	str	r3, [r7, #28]
 8011cfe:	e004      	b.n	8011d0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	2200      	movs	r2, #0
 8011d04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011d06:	2301      	movs	r3, #1
 8011d08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011d0a:	f000 fca3 	bl	8012654 <vPortExitCritical>

	return xReturn;
 8011d0e:	69fb      	ldr	r3, [r7, #28]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3720      	adds	r7, #32
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	20000bb0 	.word	0x20000bb0
 8011d1c:	20000bc4 	.word	0x20000bc4

08011d20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011d20:	b480      	push	{r7}
 8011d22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011d24:	4b03      	ldr	r3, [pc, #12]	; (8011d34 <vTaskMissedYield+0x14>)
 8011d26:	2201      	movs	r2, #1
 8011d28:	601a      	str	r2, [r3, #0]
}
 8011d2a:	bf00      	nop
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr
 8011d34:	20000bc0 	.word	0x20000bc0

08011d38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011d40:	f000 f852 	bl	8011de8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011d44:	4b06      	ldr	r3, [pc, #24]	; (8011d60 <prvIdleTask+0x28>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	d9f9      	bls.n	8011d40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011d4c:	4b05      	ldr	r3, [pc, #20]	; (8011d64 <prvIdleTask+0x2c>)
 8011d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d52:	601a      	str	r2, [r3, #0]
 8011d54:	f3bf 8f4f 	dsb	sy
 8011d58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011d5c:	e7f0      	b.n	8011d40 <prvIdleTask+0x8>
 8011d5e:	bf00      	nop
 8011d60:	20000ab0 	.word	0x20000ab0
 8011d64:	e000ed04 	.word	0xe000ed04

08011d68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d6e:	2300      	movs	r3, #0
 8011d70:	607b      	str	r3, [r7, #4]
 8011d72:	e00c      	b.n	8011d8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011d74:	687a      	ldr	r2, [r7, #4]
 8011d76:	4613      	mov	r3, r2
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	4413      	add	r3, r2
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	4a12      	ldr	r2, [pc, #72]	; (8011dc8 <prvInitialiseTaskLists+0x60>)
 8011d80:	4413      	add	r3, r2
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7fe fbe6 	bl	8010554 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	607b      	str	r3, [r7, #4]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2b06      	cmp	r3, #6
 8011d92:	d9ef      	bls.n	8011d74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011d94:	480d      	ldr	r0, [pc, #52]	; (8011dcc <prvInitialiseTaskLists+0x64>)
 8011d96:	f7fe fbdd 	bl	8010554 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011d9a:	480d      	ldr	r0, [pc, #52]	; (8011dd0 <prvInitialiseTaskLists+0x68>)
 8011d9c:	f7fe fbda 	bl	8010554 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011da0:	480c      	ldr	r0, [pc, #48]	; (8011dd4 <prvInitialiseTaskLists+0x6c>)
 8011da2:	f7fe fbd7 	bl	8010554 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011da6:	480c      	ldr	r0, [pc, #48]	; (8011dd8 <prvInitialiseTaskLists+0x70>)
 8011da8:	f7fe fbd4 	bl	8010554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011dac:	480b      	ldr	r0, [pc, #44]	; (8011ddc <prvInitialiseTaskLists+0x74>)
 8011dae:	f7fe fbd1 	bl	8010554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011db2:	4b0b      	ldr	r3, [pc, #44]	; (8011de0 <prvInitialiseTaskLists+0x78>)
 8011db4:	4a05      	ldr	r2, [pc, #20]	; (8011dcc <prvInitialiseTaskLists+0x64>)
 8011db6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011db8:	4b0a      	ldr	r3, [pc, #40]	; (8011de4 <prvInitialiseTaskLists+0x7c>)
 8011dba:	4a05      	ldr	r2, [pc, #20]	; (8011dd0 <prvInitialiseTaskLists+0x68>)
 8011dbc:	601a      	str	r2, [r3, #0]
}
 8011dbe:	bf00      	nop
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	20000ab0 	.word	0x20000ab0
 8011dcc:	20000b3c 	.word	0x20000b3c
 8011dd0:	20000b50 	.word	0x20000b50
 8011dd4:	20000b6c 	.word	0x20000b6c
 8011dd8:	20000b80 	.word	0x20000b80
 8011ddc:	20000b98 	.word	0x20000b98
 8011de0:	20000b64 	.word	0x20000b64
 8011de4:	20000b68 	.word	0x20000b68

08011de8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011dee:	e019      	b.n	8011e24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011df0:	f000 fc00 	bl	80125f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011df4:	4b10      	ldr	r3, [pc, #64]	; (8011e38 <prvCheckTasksWaitingTermination+0x50>)
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	68db      	ldr	r3, [r3, #12]
 8011dfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	3304      	adds	r3, #4
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7fe fc31 	bl	8010668 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011e06:	4b0d      	ldr	r3, [pc, #52]	; (8011e3c <prvCheckTasksWaitingTermination+0x54>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	4a0b      	ldr	r2, [pc, #44]	; (8011e3c <prvCheckTasksWaitingTermination+0x54>)
 8011e0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011e10:	4b0b      	ldr	r3, [pc, #44]	; (8011e40 <prvCheckTasksWaitingTermination+0x58>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	3b01      	subs	r3, #1
 8011e16:	4a0a      	ldr	r2, [pc, #40]	; (8011e40 <prvCheckTasksWaitingTermination+0x58>)
 8011e18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011e1a:	f000 fc1b 	bl	8012654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f000 f848 	bl	8011eb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e24:	4b06      	ldr	r3, [pc, #24]	; (8011e40 <prvCheckTasksWaitingTermination+0x58>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d1e1      	bne.n	8011df0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011e2c:	bf00      	nop
 8011e2e:	bf00      	nop
 8011e30:	3708      	adds	r7, #8
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	bf00      	nop
 8011e38:	20000b80 	.word	0x20000b80
 8011e3c:	20000bac 	.word	0x20000bac
 8011e40:	20000b94 	.word	0x20000b94

08011e44 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8011e44:	b480      	push	{r7}
 8011e46:	b085      	sub	sp, #20
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011e50:	e005      	b.n	8011e5e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	3301      	adds	r3, #1
 8011e56:	607b      	str	r3, [r7, #4]
			ulCount++;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	2ba5      	cmp	r3, #165	; 0xa5
 8011e64:	d0f5      	beq.n	8011e52 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	089b      	lsrs	r3, r3, #2
 8011e6a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	b29b      	uxth	r3, r3
	}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3714      	adds	r7, #20
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr

08011e7c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b086      	sub	sp, #24
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d102      	bne.n	8011e90 <uxTaskGetStackHighWaterMark+0x14>
 8011e8a:	4b09      	ldr	r3, [pc, #36]	; (8011eb0 <uxTaskGetStackHighWaterMark+0x34>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	e000      	b.n	8011e92 <uxTaskGetStackHighWaterMark+0x16>
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e98:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8011e9a:	6938      	ldr	r0, [r7, #16]
 8011e9c:	f7ff ffd2 	bl	8011e44 <prvTaskCheckFreeStackSpace>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
	}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3718      	adds	r7, #24
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	20000aac 	.word	0x20000aac

08011eb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b084      	sub	sp, #16
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	335c      	adds	r3, #92	; 0x5c
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f001 fd7d 	bl	80139c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d108      	bne.n	8011ee2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f000 fd7b 	bl	80129d0 <vPortFree>
				vPortFree( pxTCB );
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f000 fd78 	bl	80129d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011ee0:	e018      	b.n	8011f14 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8011ee8:	2b01      	cmp	r3, #1
 8011eea:	d103      	bne.n	8011ef4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f000 fd6f 	bl	80129d0 <vPortFree>
	}
 8011ef2:	e00f      	b.n	8011f14 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8011efa:	2b02      	cmp	r3, #2
 8011efc:	d00a      	beq.n	8011f14 <prvDeleteTCB+0x60>
	__asm volatile
 8011efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f02:	f383 8811 	msr	BASEPRI, r3
 8011f06:	f3bf 8f6f 	isb	sy
 8011f0a:	f3bf 8f4f 	dsb	sy
 8011f0e:	60fb      	str	r3, [r7, #12]
}
 8011f10:	bf00      	nop
 8011f12:	e7fe      	b.n	8011f12 <prvDeleteTCB+0x5e>
	}
 8011f14:	bf00      	nop
 8011f16:	3710      	adds	r7, #16
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b083      	sub	sp, #12
 8011f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f22:	4b0c      	ldr	r3, [pc, #48]	; (8011f54 <prvResetNextTaskUnblockTime+0x38>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d104      	bne.n	8011f36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011f2c:	4b0a      	ldr	r3, [pc, #40]	; (8011f58 <prvResetNextTaskUnblockTime+0x3c>)
 8011f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011f34:	e008      	b.n	8011f48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f36:	4b07      	ldr	r3, [pc, #28]	; (8011f54 <prvResetNextTaskUnblockTime+0x38>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	4a04      	ldr	r2, [pc, #16]	; (8011f58 <prvResetNextTaskUnblockTime+0x3c>)
 8011f46:	6013      	str	r3, [r2, #0]
}
 8011f48:	bf00      	nop
 8011f4a:	370c      	adds	r7, #12
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f52:	4770      	bx	lr
 8011f54:	20000b64 	.word	0x20000b64
 8011f58:	20000bcc 	.word	0x20000bcc

08011f5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b083      	sub	sp, #12
 8011f60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011f62:	4b0b      	ldr	r3, [pc, #44]	; (8011f90 <xTaskGetSchedulerState+0x34>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d102      	bne.n	8011f70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	607b      	str	r3, [r7, #4]
 8011f6e:	e008      	b.n	8011f82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f70:	4b08      	ldr	r3, [pc, #32]	; (8011f94 <xTaskGetSchedulerState+0x38>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d102      	bne.n	8011f7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011f78:	2302      	movs	r3, #2
 8011f7a:	607b      	str	r3, [r7, #4]
 8011f7c:	e001      	b.n	8011f82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011f82:	687b      	ldr	r3, [r7, #4]
	}
 8011f84:	4618      	mov	r0, r3
 8011f86:	370c      	adds	r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr
 8011f90:	20000bb8 	.word	0x20000bb8
 8011f94:	20000bd4 	.word	0x20000bd4

08011f98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d05e      	beq.n	801206c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fb2:	4b31      	ldr	r3, [pc, #196]	; (8012078 <xTaskPriorityInherit+0xe0>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d24e      	bcs.n	801205a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011fbc:	68bb      	ldr	r3, [r7, #8]
 8011fbe:	699b      	ldr	r3, [r3, #24]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	db06      	blt.n	8011fd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fc4:	4b2c      	ldr	r3, [pc, #176]	; (8012078 <xTaskPriorityInherit+0xe0>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fca:	f1c3 0207 	rsb	r2, r3, #7
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	6959      	ldr	r1, [r3, #20]
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fda:	4613      	mov	r3, r2
 8011fdc:	009b      	lsls	r3, r3, #2
 8011fde:	4413      	add	r3, r2
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	4a26      	ldr	r2, [pc, #152]	; (801207c <xTaskPriorityInherit+0xe4>)
 8011fe4:	4413      	add	r3, r2
 8011fe6:	4299      	cmp	r1, r3
 8011fe8:	d12f      	bne.n	801204a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	3304      	adds	r3, #4
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7fe fb3a 	bl	8010668 <uxListRemove>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d10a      	bne.n	8012010 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ffe:	2201      	movs	r2, #1
 8012000:	fa02 f303 	lsl.w	r3, r2, r3
 8012004:	43da      	mvns	r2, r3
 8012006:	4b1e      	ldr	r3, [pc, #120]	; (8012080 <xTaskPriorityInherit+0xe8>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4013      	ands	r3, r2
 801200c:	4a1c      	ldr	r2, [pc, #112]	; (8012080 <xTaskPriorityInherit+0xe8>)
 801200e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012010:	4b19      	ldr	r3, [pc, #100]	; (8012078 <xTaskPriorityInherit+0xe0>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801201e:	2201      	movs	r2, #1
 8012020:	409a      	lsls	r2, r3
 8012022:	4b17      	ldr	r3, [pc, #92]	; (8012080 <xTaskPriorityInherit+0xe8>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	4313      	orrs	r3, r2
 8012028:	4a15      	ldr	r2, [pc, #84]	; (8012080 <xTaskPriorityInherit+0xe8>)
 801202a:	6013      	str	r3, [r2, #0]
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012030:	4613      	mov	r3, r2
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	4413      	add	r3, r2
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	4a10      	ldr	r2, [pc, #64]	; (801207c <xTaskPriorityInherit+0xe4>)
 801203a:	441a      	add	r2, r3
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	3304      	adds	r3, #4
 8012040:	4619      	mov	r1, r3
 8012042:	4610      	mov	r0, r2
 8012044:	f7fe fab3 	bl	80105ae <vListInsertEnd>
 8012048:	e004      	b.n	8012054 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801204a:	4b0b      	ldr	r3, [pc, #44]	; (8012078 <xTaskPriorityInherit+0xe0>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012054:	2301      	movs	r3, #1
 8012056:	60fb      	str	r3, [r7, #12]
 8012058:	e008      	b.n	801206c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801205e:	4b06      	ldr	r3, [pc, #24]	; (8012078 <xTaskPriorityInherit+0xe0>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012064:	429a      	cmp	r2, r3
 8012066:	d201      	bcs.n	801206c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012068:	2301      	movs	r3, #1
 801206a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801206c:	68fb      	ldr	r3, [r7, #12]
	}
 801206e:	4618      	mov	r0, r3
 8012070:	3710      	adds	r7, #16
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	20000aac 	.word	0x20000aac
 801207c:	20000ab0 	.word	0x20000ab0
 8012080:	20000bb4 	.word	0x20000bb4

08012084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012084:	b580      	push	{r7, lr}
 8012086:	b086      	sub	sp, #24
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012090:	2300      	movs	r3, #0
 8012092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d06e      	beq.n	8012178 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801209a:	4b3a      	ldr	r3, [pc, #232]	; (8012184 <xTaskPriorityDisinherit+0x100>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	693a      	ldr	r2, [r7, #16]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d00a      	beq.n	80120ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80120a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a8:	f383 8811 	msr	BASEPRI, r3
 80120ac:	f3bf 8f6f 	isb	sy
 80120b0:	f3bf 8f4f 	dsb	sy
 80120b4:	60fb      	str	r3, [r7, #12]
}
 80120b6:	bf00      	nop
 80120b8:	e7fe      	b.n	80120b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d10a      	bne.n	80120d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80120c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c6:	f383 8811 	msr	BASEPRI, r3
 80120ca:	f3bf 8f6f 	isb	sy
 80120ce:	f3bf 8f4f 	dsb	sy
 80120d2:	60bb      	str	r3, [r7, #8]
}
 80120d4:	bf00      	nop
 80120d6:	e7fe      	b.n	80120d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120dc:	1e5a      	subs	r2, r3, #1
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d044      	beq.n	8012178 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d140      	bne.n	8012178 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	3304      	adds	r3, #4
 80120fa:	4618      	mov	r0, r3
 80120fc:	f7fe fab4 	bl	8010668 <uxListRemove>
 8012100:	4603      	mov	r3, r0
 8012102:	2b00      	cmp	r3, #0
 8012104:	d115      	bne.n	8012132 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801210a:	491f      	ldr	r1, [pc, #124]	; (8012188 <xTaskPriorityDisinherit+0x104>)
 801210c:	4613      	mov	r3, r2
 801210e:	009b      	lsls	r3, r3, #2
 8012110:	4413      	add	r3, r2
 8012112:	009b      	lsls	r3, r3, #2
 8012114:	440b      	add	r3, r1
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d10a      	bne.n	8012132 <xTaskPriorityDisinherit+0xae>
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012120:	2201      	movs	r2, #1
 8012122:	fa02 f303 	lsl.w	r3, r2, r3
 8012126:	43da      	mvns	r2, r3
 8012128:	4b18      	ldr	r3, [pc, #96]	; (801218c <xTaskPriorityDisinherit+0x108>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	4013      	ands	r3, r2
 801212e:	4a17      	ldr	r2, [pc, #92]	; (801218c <xTaskPriorityDisinherit+0x108>)
 8012130:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012136:	693b      	ldr	r3, [r7, #16]
 8012138:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801213e:	f1c3 0207 	rsb	r2, r3, #7
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801214a:	2201      	movs	r2, #1
 801214c:	409a      	lsls	r2, r3
 801214e:	4b0f      	ldr	r3, [pc, #60]	; (801218c <xTaskPriorityDisinherit+0x108>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	4313      	orrs	r3, r2
 8012154:	4a0d      	ldr	r2, [pc, #52]	; (801218c <xTaskPriorityDisinherit+0x108>)
 8012156:	6013      	str	r3, [r2, #0]
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801215c:	4613      	mov	r3, r2
 801215e:	009b      	lsls	r3, r3, #2
 8012160:	4413      	add	r3, r2
 8012162:	009b      	lsls	r3, r3, #2
 8012164:	4a08      	ldr	r2, [pc, #32]	; (8012188 <xTaskPriorityDisinherit+0x104>)
 8012166:	441a      	add	r2, r3
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	3304      	adds	r3, #4
 801216c:	4619      	mov	r1, r3
 801216e:	4610      	mov	r0, r2
 8012170:	f7fe fa1d 	bl	80105ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012174:	2301      	movs	r3, #1
 8012176:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012178:	697b      	ldr	r3, [r7, #20]
	}
 801217a:	4618      	mov	r0, r3
 801217c:	3718      	adds	r7, #24
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	20000aac 	.word	0x20000aac
 8012188:	20000ab0 	.word	0x20000ab0
 801218c:	20000bb4 	.word	0x20000bb4

08012190 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012190:	b580      	push	{r7, lr}
 8012192:	b088      	sub	sp, #32
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801219e:	2301      	movs	r3, #1
 80121a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d077      	beq.n	8012298 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80121a8:	69bb      	ldr	r3, [r7, #24]
 80121aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d10a      	bne.n	80121c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80121b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b4:	f383 8811 	msr	BASEPRI, r3
 80121b8:	f3bf 8f6f 	isb	sy
 80121bc:	f3bf 8f4f 	dsb	sy
 80121c0:	60fb      	str	r3, [r7, #12]
}
 80121c2:	bf00      	nop
 80121c4:	e7fe      	b.n	80121c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121ca:	683a      	ldr	r2, [r7, #0]
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d902      	bls.n	80121d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	61fb      	str	r3, [r7, #28]
 80121d4:	e002      	b.n	80121dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80121d6:	69bb      	ldr	r3, [r7, #24]
 80121d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80121dc:	69bb      	ldr	r3, [r7, #24]
 80121de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121e0:	69fa      	ldr	r2, [r7, #28]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d058      	beq.n	8012298 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80121e6:	69bb      	ldr	r3, [r7, #24]
 80121e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121ea:	697a      	ldr	r2, [r7, #20]
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d153      	bne.n	8012298 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80121f0:	4b2b      	ldr	r3, [pc, #172]	; (80122a0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	69ba      	ldr	r2, [r7, #24]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d10a      	bne.n	8012210 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80121fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121fe:	f383 8811 	msr	BASEPRI, r3
 8012202:	f3bf 8f6f 	isb	sy
 8012206:	f3bf 8f4f 	dsb	sy
 801220a:	60bb      	str	r3, [r7, #8]
}
 801220c:	bf00      	nop
 801220e:	e7fe      	b.n	801220e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012210:	69bb      	ldr	r3, [r7, #24]
 8012212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012214:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012216:	69bb      	ldr	r3, [r7, #24]
 8012218:	69fa      	ldr	r2, [r7, #28]
 801221a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	699b      	ldr	r3, [r3, #24]
 8012220:	2b00      	cmp	r3, #0
 8012222:	db04      	blt.n	801222e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	f1c3 0207 	rsb	r2, r3, #7
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	6959      	ldr	r1, [r3, #20]
 8012232:	693a      	ldr	r2, [r7, #16]
 8012234:	4613      	mov	r3, r2
 8012236:	009b      	lsls	r3, r3, #2
 8012238:	4413      	add	r3, r2
 801223a:	009b      	lsls	r3, r3, #2
 801223c:	4a19      	ldr	r2, [pc, #100]	; (80122a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801223e:	4413      	add	r3, r2
 8012240:	4299      	cmp	r1, r3
 8012242:	d129      	bne.n	8012298 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	3304      	adds	r3, #4
 8012248:	4618      	mov	r0, r3
 801224a:	f7fe fa0d 	bl	8010668 <uxListRemove>
 801224e:	4603      	mov	r3, r0
 8012250:	2b00      	cmp	r3, #0
 8012252:	d10a      	bne.n	801226a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012254:	69bb      	ldr	r3, [r7, #24]
 8012256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012258:	2201      	movs	r2, #1
 801225a:	fa02 f303 	lsl.w	r3, r2, r3
 801225e:	43da      	mvns	r2, r3
 8012260:	4b11      	ldr	r3, [pc, #68]	; (80122a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	4013      	ands	r3, r2
 8012266:	4a10      	ldr	r2, [pc, #64]	; (80122a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012268:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801226a:	69bb      	ldr	r3, [r7, #24]
 801226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801226e:	2201      	movs	r2, #1
 8012270:	409a      	lsls	r2, r3
 8012272:	4b0d      	ldr	r3, [pc, #52]	; (80122a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	4313      	orrs	r3, r2
 8012278:	4a0b      	ldr	r2, [pc, #44]	; (80122a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801227a:	6013      	str	r3, [r2, #0]
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012280:	4613      	mov	r3, r2
 8012282:	009b      	lsls	r3, r3, #2
 8012284:	4413      	add	r3, r2
 8012286:	009b      	lsls	r3, r3, #2
 8012288:	4a06      	ldr	r2, [pc, #24]	; (80122a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801228a:	441a      	add	r2, r3
 801228c:	69bb      	ldr	r3, [r7, #24]
 801228e:	3304      	adds	r3, #4
 8012290:	4619      	mov	r1, r3
 8012292:	4610      	mov	r0, r2
 8012294:	f7fe f98b 	bl	80105ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012298:	bf00      	nop
 801229a:	3720      	adds	r7, #32
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	20000aac 	.word	0x20000aac
 80122a4:	20000ab0 	.word	0x20000ab0
 80122a8:	20000bb4 	.word	0x20000bb4

080122ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80122ac:	b480      	push	{r7}
 80122ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80122b0:	4b07      	ldr	r3, [pc, #28]	; (80122d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d004      	beq.n	80122c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80122b8:	4b05      	ldr	r3, [pc, #20]	; (80122d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80122be:	3201      	adds	r2, #1
 80122c0:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 80122c2:	4b03      	ldr	r3, [pc, #12]	; (80122d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80122c4:	681b      	ldr	r3, [r3, #0]
	}
 80122c6:	4618      	mov	r0, r3
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr
 80122d0:	20000aac 	.word	0x20000aac

080122d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b084      	sub	sp, #16
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80122de:	4b29      	ldr	r3, [pc, #164]	; (8012384 <prvAddCurrentTaskToDelayedList+0xb0>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122e4:	4b28      	ldr	r3, [pc, #160]	; (8012388 <prvAddCurrentTaskToDelayedList+0xb4>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	3304      	adds	r3, #4
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7fe f9bc 	bl	8010668 <uxListRemove>
 80122f0:	4603      	mov	r3, r0
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d10b      	bne.n	801230e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80122f6:	4b24      	ldr	r3, [pc, #144]	; (8012388 <prvAddCurrentTaskToDelayedList+0xb4>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122fc:	2201      	movs	r2, #1
 80122fe:	fa02 f303 	lsl.w	r3, r2, r3
 8012302:	43da      	mvns	r2, r3
 8012304:	4b21      	ldr	r3, [pc, #132]	; (801238c <prvAddCurrentTaskToDelayedList+0xb8>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	4013      	ands	r3, r2
 801230a:	4a20      	ldr	r2, [pc, #128]	; (801238c <prvAddCurrentTaskToDelayedList+0xb8>)
 801230c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012314:	d10a      	bne.n	801232c <prvAddCurrentTaskToDelayedList+0x58>
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d007      	beq.n	801232c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801231c:	4b1a      	ldr	r3, [pc, #104]	; (8012388 <prvAddCurrentTaskToDelayedList+0xb4>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	3304      	adds	r3, #4
 8012322:	4619      	mov	r1, r3
 8012324:	481a      	ldr	r0, [pc, #104]	; (8012390 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012326:	f7fe f942 	bl	80105ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801232a:	e026      	b.n	801237a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801232c:	68fa      	ldr	r2, [r7, #12]
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	4413      	add	r3, r2
 8012332:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012334:	4b14      	ldr	r3, [pc, #80]	; (8012388 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	68ba      	ldr	r2, [r7, #8]
 801233a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801233c:	68ba      	ldr	r2, [r7, #8]
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	429a      	cmp	r2, r3
 8012342:	d209      	bcs.n	8012358 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012344:	4b13      	ldr	r3, [pc, #76]	; (8012394 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	4b0f      	ldr	r3, [pc, #60]	; (8012388 <prvAddCurrentTaskToDelayedList+0xb4>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	3304      	adds	r3, #4
 801234e:	4619      	mov	r1, r3
 8012350:	4610      	mov	r0, r2
 8012352:	f7fe f950 	bl	80105f6 <vListInsert>
}
 8012356:	e010      	b.n	801237a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012358:	4b0f      	ldr	r3, [pc, #60]	; (8012398 <prvAddCurrentTaskToDelayedList+0xc4>)
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	4b0a      	ldr	r3, [pc, #40]	; (8012388 <prvAddCurrentTaskToDelayedList+0xb4>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	3304      	adds	r3, #4
 8012362:	4619      	mov	r1, r3
 8012364:	4610      	mov	r0, r2
 8012366:	f7fe f946 	bl	80105f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801236a:	4b0c      	ldr	r3, [pc, #48]	; (801239c <prvAddCurrentTaskToDelayedList+0xc8>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	68ba      	ldr	r2, [r7, #8]
 8012370:	429a      	cmp	r2, r3
 8012372:	d202      	bcs.n	801237a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012374:	4a09      	ldr	r2, [pc, #36]	; (801239c <prvAddCurrentTaskToDelayedList+0xc8>)
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	6013      	str	r3, [r2, #0]
}
 801237a:	bf00      	nop
 801237c:	3710      	adds	r7, #16
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	20000bb0 	.word	0x20000bb0
 8012388:	20000aac 	.word	0x20000aac
 801238c:	20000bb4 	.word	0x20000bb4
 8012390:	20000b98 	.word	0x20000b98
 8012394:	20000b68 	.word	0x20000b68
 8012398:	20000b64 	.word	0x20000b64
 801239c:	20000bcc 	.word	0x20000bcc

080123a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80123a0:	b480      	push	{r7}
 80123a2:	b085      	sub	sp, #20
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	3b04      	subs	r3, #4
 80123b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80123b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	3b04      	subs	r3, #4
 80123be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	f023 0201 	bic.w	r2, r3, #1
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	3b04      	subs	r3, #4
 80123ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80123d0:	4a0c      	ldr	r2, [pc, #48]	; (8012404 <pxPortInitialiseStack+0x64>)
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	3b14      	subs	r3, #20
 80123da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	3b04      	subs	r3, #4
 80123e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	f06f 0202 	mvn.w	r2, #2
 80123ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	3b20      	subs	r3, #32
 80123f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80123f6:	68fb      	ldr	r3, [r7, #12]
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3714      	adds	r7, #20
 80123fc:	46bd      	mov	sp, r7
 80123fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012402:	4770      	bx	lr
 8012404:	08012409 	.word	0x08012409

08012408 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012408:	b480      	push	{r7}
 801240a:	b085      	sub	sp, #20
 801240c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801240e:	2300      	movs	r3, #0
 8012410:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012412:	4b12      	ldr	r3, [pc, #72]	; (801245c <prvTaskExitError+0x54>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801241a:	d00a      	beq.n	8012432 <prvTaskExitError+0x2a>
	__asm volatile
 801241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012420:	f383 8811 	msr	BASEPRI, r3
 8012424:	f3bf 8f6f 	isb	sy
 8012428:	f3bf 8f4f 	dsb	sy
 801242c:	60fb      	str	r3, [r7, #12]
}
 801242e:	bf00      	nop
 8012430:	e7fe      	b.n	8012430 <prvTaskExitError+0x28>
	__asm volatile
 8012432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012436:	f383 8811 	msr	BASEPRI, r3
 801243a:	f3bf 8f6f 	isb	sy
 801243e:	f3bf 8f4f 	dsb	sy
 8012442:	60bb      	str	r3, [r7, #8]
}
 8012444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012446:	bf00      	nop
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d0fc      	beq.n	8012448 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801244e:	bf00      	nop
 8012450:	bf00      	nop
 8012452:	3714      	adds	r7, #20
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr
 801245c:	2000050c 	.word	0x2000050c

08012460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012460:	4b07      	ldr	r3, [pc, #28]	; (8012480 <pxCurrentTCBConst2>)
 8012462:	6819      	ldr	r1, [r3, #0]
 8012464:	6808      	ldr	r0, [r1, #0]
 8012466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801246a:	f380 8809 	msr	PSP, r0
 801246e:	f3bf 8f6f 	isb	sy
 8012472:	f04f 0000 	mov.w	r0, #0
 8012476:	f380 8811 	msr	BASEPRI, r0
 801247a:	4770      	bx	lr
 801247c:	f3af 8000 	nop.w

08012480 <pxCurrentTCBConst2>:
 8012480:	20000aac 	.word	0x20000aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012484:	bf00      	nop
 8012486:	bf00      	nop

08012488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012488:	4808      	ldr	r0, [pc, #32]	; (80124ac <prvPortStartFirstTask+0x24>)
 801248a:	6800      	ldr	r0, [r0, #0]
 801248c:	6800      	ldr	r0, [r0, #0]
 801248e:	f380 8808 	msr	MSP, r0
 8012492:	f04f 0000 	mov.w	r0, #0
 8012496:	f380 8814 	msr	CONTROL, r0
 801249a:	b662      	cpsie	i
 801249c:	b661      	cpsie	f
 801249e:	f3bf 8f4f 	dsb	sy
 80124a2:	f3bf 8f6f 	isb	sy
 80124a6:	df00      	svc	0
 80124a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80124aa:	bf00      	nop
 80124ac:	e000ed08 	.word	0xe000ed08

080124b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b086      	sub	sp, #24
 80124b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80124b6:	4b46      	ldr	r3, [pc, #280]	; (80125d0 <xPortStartScheduler+0x120>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	4a46      	ldr	r2, [pc, #280]	; (80125d4 <xPortStartScheduler+0x124>)
 80124bc:	4293      	cmp	r3, r2
 80124be:	d10a      	bne.n	80124d6 <xPortStartScheduler+0x26>
	__asm volatile
 80124c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c4:	f383 8811 	msr	BASEPRI, r3
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	613b      	str	r3, [r7, #16]
}
 80124d2:	bf00      	nop
 80124d4:	e7fe      	b.n	80124d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80124d6:	4b3e      	ldr	r3, [pc, #248]	; (80125d0 <xPortStartScheduler+0x120>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	4a3f      	ldr	r2, [pc, #252]	; (80125d8 <xPortStartScheduler+0x128>)
 80124dc:	4293      	cmp	r3, r2
 80124de:	d10a      	bne.n	80124f6 <xPortStartScheduler+0x46>
	__asm volatile
 80124e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e4:	f383 8811 	msr	BASEPRI, r3
 80124e8:	f3bf 8f6f 	isb	sy
 80124ec:	f3bf 8f4f 	dsb	sy
 80124f0:	60fb      	str	r3, [r7, #12]
}
 80124f2:	bf00      	nop
 80124f4:	e7fe      	b.n	80124f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80124f6:	4b39      	ldr	r3, [pc, #228]	; (80125dc <xPortStartScheduler+0x12c>)
 80124f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	b2db      	uxtb	r3, r3
 8012500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	22ff      	movs	r2, #255	; 0xff
 8012506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	b2db      	uxtb	r3, r3
 801250e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012510:	78fb      	ldrb	r3, [r7, #3]
 8012512:	b2db      	uxtb	r3, r3
 8012514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012518:	b2da      	uxtb	r2, r3
 801251a:	4b31      	ldr	r3, [pc, #196]	; (80125e0 <xPortStartScheduler+0x130>)
 801251c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801251e:	4b31      	ldr	r3, [pc, #196]	; (80125e4 <xPortStartScheduler+0x134>)
 8012520:	2207      	movs	r2, #7
 8012522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012524:	e009      	b.n	801253a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012526:	4b2f      	ldr	r3, [pc, #188]	; (80125e4 <xPortStartScheduler+0x134>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	3b01      	subs	r3, #1
 801252c:	4a2d      	ldr	r2, [pc, #180]	; (80125e4 <xPortStartScheduler+0x134>)
 801252e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012530:	78fb      	ldrb	r3, [r7, #3]
 8012532:	b2db      	uxtb	r3, r3
 8012534:	005b      	lsls	r3, r3, #1
 8012536:	b2db      	uxtb	r3, r3
 8012538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801253a:	78fb      	ldrb	r3, [r7, #3]
 801253c:	b2db      	uxtb	r3, r3
 801253e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012542:	2b80      	cmp	r3, #128	; 0x80
 8012544:	d0ef      	beq.n	8012526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012546:	4b27      	ldr	r3, [pc, #156]	; (80125e4 <xPortStartScheduler+0x134>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	f1c3 0307 	rsb	r3, r3, #7
 801254e:	2b04      	cmp	r3, #4
 8012550:	d00a      	beq.n	8012568 <xPortStartScheduler+0xb8>
	__asm volatile
 8012552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012556:	f383 8811 	msr	BASEPRI, r3
 801255a:	f3bf 8f6f 	isb	sy
 801255e:	f3bf 8f4f 	dsb	sy
 8012562:	60bb      	str	r3, [r7, #8]
}
 8012564:	bf00      	nop
 8012566:	e7fe      	b.n	8012566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012568:	4b1e      	ldr	r3, [pc, #120]	; (80125e4 <xPortStartScheduler+0x134>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	021b      	lsls	r3, r3, #8
 801256e:	4a1d      	ldr	r2, [pc, #116]	; (80125e4 <xPortStartScheduler+0x134>)
 8012570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012572:	4b1c      	ldr	r3, [pc, #112]	; (80125e4 <xPortStartScheduler+0x134>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801257a:	4a1a      	ldr	r2, [pc, #104]	; (80125e4 <xPortStartScheduler+0x134>)
 801257c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	b2da      	uxtb	r2, r3
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012586:	4b18      	ldr	r3, [pc, #96]	; (80125e8 <xPortStartScheduler+0x138>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	4a17      	ldr	r2, [pc, #92]	; (80125e8 <xPortStartScheduler+0x138>)
 801258c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012592:	4b15      	ldr	r3, [pc, #84]	; (80125e8 <xPortStartScheduler+0x138>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	4a14      	ldr	r2, [pc, #80]	; (80125e8 <xPortStartScheduler+0x138>)
 8012598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801259c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801259e:	f000 f8dd 	bl	801275c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80125a2:	4b12      	ldr	r3, [pc, #72]	; (80125ec <xPortStartScheduler+0x13c>)
 80125a4:	2200      	movs	r2, #0
 80125a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80125a8:	f000 f8fc 	bl	80127a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80125ac:	4b10      	ldr	r3, [pc, #64]	; (80125f0 <xPortStartScheduler+0x140>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	4a0f      	ldr	r2, [pc, #60]	; (80125f0 <xPortStartScheduler+0x140>)
 80125b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80125b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80125b8:	f7ff ff66 	bl	8012488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80125bc:	f7ff fa50 	bl	8011a60 <vTaskSwitchContext>
	prvTaskExitError();
 80125c0:	f7ff ff22 	bl	8012408 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80125c4:	2300      	movs	r3, #0
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3718      	adds	r7, #24
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
 80125ce:	bf00      	nop
 80125d0:	e000ed00 	.word	0xe000ed00
 80125d4:	410fc271 	.word	0x410fc271
 80125d8:	410fc270 	.word	0x410fc270
 80125dc:	e000e400 	.word	0xe000e400
 80125e0:	20000bd8 	.word	0x20000bd8
 80125e4:	20000bdc 	.word	0x20000bdc
 80125e8:	e000ed20 	.word	0xe000ed20
 80125ec:	2000050c 	.word	0x2000050c
 80125f0:	e000ef34 	.word	0xe000ef34

080125f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
	__asm volatile
 80125fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125fe:	f383 8811 	msr	BASEPRI, r3
 8012602:	f3bf 8f6f 	isb	sy
 8012606:	f3bf 8f4f 	dsb	sy
 801260a:	607b      	str	r3, [r7, #4]
}
 801260c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801260e:	4b0f      	ldr	r3, [pc, #60]	; (801264c <vPortEnterCritical+0x58>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	3301      	adds	r3, #1
 8012614:	4a0d      	ldr	r2, [pc, #52]	; (801264c <vPortEnterCritical+0x58>)
 8012616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012618:	4b0c      	ldr	r3, [pc, #48]	; (801264c <vPortEnterCritical+0x58>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	2b01      	cmp	r3, #1
 801261e:	d10f      	bne.n	8012640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012620:	4b0b      	ldr	r3, [pc, #44]	; (8012650 <vPortEnterCritical+0x5c>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	b2db      	uxtb	r3, r3
 8012626:	2b00      	cmp	r3, #0
 8012628:	d00a      	beq.n	8012640 <vPortEnterCritical+0x4c>
	__asm volatile
 801262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262e:	f383 8811 	msr	BASEPRI, r3
 8012632:	f3bf 8f6f 	isb	sy
 8012636:	f3bf 8f4f 	dsb	sy
 801263a:	603b      	str	r3, [r7, #0]
}
 801263c:	bf00      	nop
 801263e:	e7fe      	b.n	801263e <vPortEnterCritical+0x4a>
	}
}
 8012640:	bf00      	nop
 8012642:	370c      	adds	r7, #12
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr
 801264c:	2000050c 	.word	0x2000050c
 8012650:	e000ed04 	.word	0xe000ed04

08012654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012654:	b480      	push	{r7}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801265a:	4b12      	ldr	r3, [pc, #72]	; (80126a4 <vPortExitCritical+0x50>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d10a      	bne.n	8012678 <vPortExitCritical+0x24>
	__asm volatile
 8012662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012666:	f383 8811 	msr	BASEPRI, r3
 801266a:	f3bf 8f6f 	isb	sy
 801266e:	f3bf 8f4f 	dsb	sy
 8012672:	607b      	str	r3, [r7, #4]
}
 8012674:	bf00      	nop
 8012676:	e7fe      	b.n	8012676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012678:	4b0a      	ldr	r3, [pc, #40]	; (80126a4 <vPortExitCritical+0x50>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	3b01      	subs	r3, #1
 801267e:	4a09      	ldr	r2, [pc, #36]	; (80126a4 <vPortExitCritical+0x50>)
 8012680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012682:	4b08      	ldr	r3, [pc, #32]	; (80126a4 <vPortExitCritical+0x50>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d105      	bne.n	8012696 <vPortExitCritical+0x42>
 801268a:	2300      	movs	r3, #0
 801268c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	f383 8811 	msr	BASEPRI, r3
}
 8012694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012696:	bf00      	nop
 8012698:	370c      	adds	r7, #12
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr
 80126a2:	bf00      	nop
 80126a4:	2000050c 	.word	0x2000050c
	...

080126b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80126b0:	f3ef 8009 	mrs	r0, PSP
 80126b4:	f3bf 8f6f 	isb	sy
 80126b8:	4b15      	ldr	r3, [pc, #84]	; (8012710 <pxCurrentTCBConst>)
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	f01e 0f10 	tst.w	lr, #16
 80126c0:	bf08      	it	eq
 80126c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80126c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ca:	6010      	str	r0, [r2, #0]
 80126cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80126d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80126d4:	f380 8811 	msr	BASEPRI, r0
 80126d8:	f3bf 8f4f 	dsb	sy
 80126dc:	f3bf 8f6f 	isb	sy
 80126e0:	f7ff f9be 	bl	8011a60 <vTaskSwitchContext>
 80126e4:	f04f 0000 	mov.w	r0, #0
 80126e8:	f380 8811 	msr	BASEPRI, r0
 80126ec:	bc09      	pop	{r0, r3}
 80126ee:	6819      	ldr	r1, [r3, #0]
 80126f0:	6808      	ldr	r0, [r1, #0]
 80126f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f6:	f01e 0f10 	tst.w	lr, #16
 80126fa:	bf08      	it	eq
 80126fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012700:	f380 8809 	msr	PSP, r0
 8012704:	f3bf 8f6f 	isb	sy
 8012708:	4770      	bx	lr
 801270a:	bf00      	nop
 801270c:	f3af 8000 	nop.w

08012710 <pxCurrentTCBConst>:
 8012710:	20000aac 	.word	0x20000aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012714:	bf00      	nop
 8012716:	bf00      	nop

08012718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
	__asm volatile
 801271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012722:	f383 8811 	msr	BASEPRI, r3
 8012726:	f3bf 8f6f 	isb	sy
 801272a:	f3bf 8f4f 	dsb	sy
 801272e:	607b      	str	r3, [r7, #4]
}
 8012730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012732:	f7ff f8dd 	bl	80118f0 <xTaskIncrementTick>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d003      	beq.n	8012744 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801273c:	4b06      	ldr	r3, [pc, #24]	; (8012758 <SysTick_Handler+0x40>)
 801273e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012742:	601a      	str	r2, [r3, #0]
 8012744:	2300      	movs	r3, #0
 8012746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	f383 8811 	msr	BASEPRI, r3
}
 801274e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012750:	bf00      	nop
 8012752:	3708      	adds	r7, #8
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	e000ed04 	.word	0xe000ed04

0801275c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801275c:	b480      	push	{r7}
 801275e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012760:	4b0b      	ldr	r3, [pc, #44]	; (8012790 <vPortSetupTimerInterrupt+0x34>)
 8012762:	2200      	movs	r2, #0
 8012764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012766:	4b0b      	ldr	r3, [pc, #44]	; (8012794 <vPortSetupTimerInterrupt+0x38>)
 8012768:	2200      	movs	r2, #0
 801276a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801276c:	4b0a      	ldr	r3, [pc, #40]	; (8012798 <vPortSetupTimerInterrupt+0x3c>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4a0a      	ldr	r2, [pc, #40]	; (801279c <vPortSetupTimerInterrupt+0x40>)
 8012772:	fba2 2303 	umull	r2, r3, r2, r3
 8012776:	099b      	lsrs	r3, r3, #6
 8012778:	4a09      	ldr	r2, [pc, #36]	; (80127a0 <vPortSetupTimerInterrupt+0x44>)
 801277a:	3b01      	subs	r3, #1
 801277c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801277e:	4b04      	ldr	r3, [pc, #16]	; (8012790 <vPortSetupTimerInterrupt+0x34>)
 8012780:	2207      	movs	r2, #7
 8012782:	601a      	str	r2, [r3, #0]
}
 8012784:	bf00      	nop
 8012786:	46bd      	mov	sp, r7
 8012788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop
 8012790:	e000e010 	.word	0xe000e010
 8012794:	e000e018 	.word	0xe000e018
 8012798:	20000000 	.word	0x20000000
 801279c:	10624dd3 	.word	0x10624dd3
 80127a0:	e000e014 	.word	0xe000e014

080127a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80127a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80127b4 <vPortEnableVFP+0x10>
 80127a8:	6801      	ldr	r1, [r0, #0]
 80127aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80127ae:	6001      	str	r1, [r0, #0]
 80127b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80127b2:	bf00      	nop
 80127b4:	e000ed88 	.word	0xe000ed88

080127b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80127b8:	b480      	push	{r7}
 80127ba:	b085      	sub	sp, #20
 80127bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80127be:	f3ef 8305 	mrs	r3, IPSR
 80127c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	2b0f      	cmp	r3, #15
 80127c8:	d914      	bls.n	80127f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80127ca:	4a17      	ldr	r2, [pc, #92]	; (8012828 <vPortValidateInterruptPriority+0x70>)
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	4413      	add	r3, r2
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80127d4:	4b15      	ldr	r3, [pc, #84]	; (801282c <vPortValidateInterruptPriority+0x74>)
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	7afa      	ldrb	r2, [r7, #11]
 80127da:	429a      	cmp	r2, r3
 80127dc:	d20a      	bcs.n	80127f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80127de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e2:	f383 8811 	msr	BASEPRI, r3
 80127e6:	f3bf 8f6f 	isb	sy
 80127ea:	f3bf 8f4f 	dsb	sy
 80127ee:	607b      	str	r3, [r7, #4]
}
 80127f0:	bf00      	nop
 80127f2:	e7fe      	b.n	80127f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80127f4:	4b0e      	ldr	r3, [pc, #56]	; (8012830 <vPortValidateInterruptPriority+0x78>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80127fc:	4b0d      	ldr	r3, [pc, #52]	; (8012834 <vPortValidateInterruptPriority+0x7c>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	429a      	cmp	r2, r3
 8012802:	d90a      	bls.n	801281a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012808:	f383 8811 	msr	BASEPRI, r3
 801280c:	f3bf 8f6f 	isb	sy
 8012810:	f3bf 8f4f 	dsb	sy
 8012814:	603b      	str	r3, [r7, #0]
}
 8012816:	bf00      	nop
 8012818:	e7fe      	b.n	8012818 <vPortValidateInterruptPriority+0x60>
	}
 801281a:	bf00      	nop
 801281c:	3714      	adds	r7, #20
 801281e:	46bd      	mov	sp, r7
 8012820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012824:	4770      	bx	lr
 8012826:	bf00      	nop
 8012828:	e000e3f0 	.word	0xe000e3f0
 801282c:	20000bd8 	.word	0x20000bd8
 8012830:	e000ed0c 	.word	0xe000ed0c
 8012834:	20000bdc 	.word	0x20000bdc

08012838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b08a      	sub	sp, #40	; 0x28
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012840:	2300      	movs	r3, #0
 8012842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012844:	f7fe ff9a 	bl	801177c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012848:	4b5b      	ldr	r3, [pc, #364]	; (80129b8 <pvPortMalloc+0x180>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d101      	bne.n	8012854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012850:	f000 f920 	bl	8012a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012854:	4b59      	ldr	r3, [pc, #356]	; (80129bc <pvPortMalloc+0x184>)
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	4013      	ands	r3, r2
 801285c:	2b00      	cmp	r3, #0
 801285e:	f040 8093 	bne.w	8012988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d01d      	beq.n	80128a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012868:	2208      	movs	r2, #8
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4413      	add	r3, r2
 801286e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f003 0307 	and.w	r3, r3, #7
 8012876:	2b00      	cmp	r3, #0
 8012878:	d014      	beq.n	80128a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f023 0307 	bic.w	r3, r3, #7
 8012880:	3308      	adds	r3, #8
 8012882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f003 0307 	and.w	r3, r3, #7
 801288a:	2b00      	cmp	r3, #0
 801288c:	d00a      	beq.n	80128a4 <pvPortMalloc+0x6c>
	__asm volatile
 801288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012892:	f383 8811 	msr	BASEPRI, r3
 8012896:	f3bf 8f6f 	isb	sy
 801289a:	f3bf 8f4f 	dsb	sy
 801289e:	617b      	str	r3, [r7, #20]
}
 80128a0:	bf00      	nop
 80128a2:	e7fe      	b.n	80128a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d06e      	beq.n	8012988 <pvPortMalloc+0x150>
 80128aa:	4b45      	ldr	r3, [pc, #276]	; (80129c0 <pvPortMalloc+0x188>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	429a      	cmp	r2, r3
 80128b2:	d869      	bhi.n	8012988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80128b4:	4b43      	ldr	r3, [pc, #268]	; (80129c4 <pvPortMalloc+0x18c>)
 80128b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80128b8:	4b42      	ldr	r3, [pc, #264]	; (80129c4 <pvPortMalloc+0x18c>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80128be:	e004      	b.n	80128ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80128c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80128c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80128ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128cc:	685b      	ldr	r3, [r3, #4]
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d903      	bls.n	80128dc <pvPortMalloc+0xa4>
 80128d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d1f1      	bne.n	80128c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80128dc:	4b36      	ldr	r3, [pc, #216]	; (80129b8 <pvPortMalloc+0x180>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d050      	beq.n	8012988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80128e6:	6a3b      	ldr	r3, [r7, #32]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	2208      	movs	r2, #8
 80128ec:	4413      	add	r3, r2
 80128ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80128f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	6a3b      	ldr	r3, [r7, #32]
 80128f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80128f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fa:	685a      	ldr	r2, [r3, #4]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	1ad2      	subs	r2, r2, r3
 8012900:	2308      	movs	r3, #8
 8012902:	005b      	lsls	r3, r3, #1
 8012904:	429a      	cmp	r2, r3
 8012906:	d91f      	bls.n	8012948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	4413      	add	r3, r2
 801290e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012910:	69bb      	ldr	r3, [r7, #24]
 8012912:	f003 0307 	and.w	r3, r3, #7
 8012916:	2b00      	cmp	r3, #0
 8012918:	d00a      	beq.n	8012930 <pvPortMalloc+0xf8>
	__asm volatile
 801291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801291e:	f383 8811 	msr	BASEPRI, r3
 8012922:	f3bf 8f6f 	isb	sy
 8012926:	f3bf 8f4f 	dsb	sy
 801292a:	613b      	str	r3, [r7, #16]
}
 801292c:	bf00      	nop
 801292e:	e7fe      	b.n	801292e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012932:	685a      	ldr	r2, [r3, #4]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	1ad2      	subs	r2, r2, r3
 8012938:	69bb      	ldr	r3, [r7, #24]
 801293a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293e:	687a      	ldr	r2, [r7, #4]
 8012940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012942:	69b8      	ldr	r0, [r7, #24]
 8012944:	f000 f908 	bl	8012b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012948:	4b1d      	ldr	r3, [pc, #116]	; (80129c0 <pvPortMalloc+0x188>)
 801294a:	681a      	ldr	r2, [r3, #0]
 801294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	1ad3      	subs	r3, r2, r3
 8012952:	4a1b      	ldr	r2, [pc, #108]	; (80129c0 <pvPortMalloc+0x188>)
 8012954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012956:	4b1a      	ldr	r3, [pc, #104]	; (80129c0 <pvPortMalloc+0x188>)
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	4b1b      	ldr	r3, [pc, #108]	; (80129c8 <pvPortMalloc+0x190>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	429a      	cmp	r2, r3
 8012960:	d203      	bcs.n	801296a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012962:	4b17      	ldr	r3, [pc, #92]	; (80129c0 <pvPortMalloc+0x188>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	4a18      	ldr	r2, [pc, #96]	; (80129c8 <pvPortMalloc+0x190>)
 8012968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296c:	685a      	ldr	r2, [r3, #4]
 801296e:	4b13      	ldr	r3, [pc, #76]	; (80129bc <pvPortMalloc+0x184>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	431a      	orrs	r2, r3
 8012974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297a:	2200      	movs	r2, #0
 801297c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801297e:	4b13      	ldr	r3, [pc, #76]	; (80129cc <pvPortMalloc+0x194>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	3301      	adds	r3, #1
 8012984:	4a11      	ldr	r2, [pc, #68]	; (80129cc <pvPortMalloc+0x194>)
 8012986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012988:	f7fe ff06 	bl	8011798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801298c:	69fb      	ldr	r3, [r7, #28]
 801298e:	f003 0307 	and.w	r3, r3, #7
 8012992:	2b00      	cmp	r3, #0
 8012994:	d00a      	beq.n	80129ac <pvPortMalloc+0x174>
	__asm volatile
 8012996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801299a:	f383 8811 	msr	BASEPRI, r3
 801299e:	f3bf 8f6f 	isb	sy
 80129a2:	f3bf 8f4f 	dsb	sy
 80129a6:	60fb      	str	r3, [r7, #12]
}
 80129a8:	bf00      	nop
 80129aa:	e7fe      	b.n	80129aa <pvPortMalloc+0x172>
	return pvReturn;
 80129ac:	69fb      	ldr	r3, [r7, #28]
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3728      	adds	r7, #40	; 0x28
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
 80129b6:	bf00      	nop
 80129b8:	20004be8 	.word	0x20004be8
 80129bc:	20004bfc 	.word	0x20004bfc
 80129c0:	20004bec 	.word	0x20004bec
 80129c4:	20004be0 	.word	0x20004be0
 80129c8:	20004bf0 	.word	0x20004bf0
 80129cc:	20004bf4 	.word	0x20004bf4

080129d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b086      	sub	sp, #24
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d04d      	beq.n	8012a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80129e2:	2308      	movs	r3, #8
 80129e4:	425b      	negs	r3, r3
 80129e6:	697a      	ldr	r2, [r7, #20]
 80129e8:	4413      	add	r3, r2
 80129ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	685a      	ldr	r2, [r3, #4]
 80129f4:	4b24      	ldr	r3, [pc, #144]	; (8012a88 <vPortFree+0xb8>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	4013      	ands	r3, r2
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d10a      	bne.n	8012a14 <vPortFree+0x44>
	__asm volatile
 80129fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a02:	f383 8811 	msr	BASEPRI, r3
 8012a06:	f3bf 8f6f 	isb	sy
 8012a0a:	f3bf 8f4f 	dsb	sy
 8012a0e:	60fb      	str	r3, [r7, #12]
}
 8012a10:	bf00      	nop
 8012a12:	e7fe      	b.n	8012a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d00a      	beq.n	8012a32 <vPortFree+0x62>
	__asm volatile
 8012a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a20:	f383 8811 	msr	BASEPRI, r3
 8012a24:	f3bf 8f6f 	isb	sy
 8012a28:	f3bf 8f4f 	dsb	sy
 8012a2c:	60bb      	str	r3, [r7, #8]
}
 8012a2e:	bf00      	nop
 8012a30:	e7fe      	b.n	8012a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	685a      	ldr	r2, [r3, #4]
 8012a36:	4b14      	ldr	r3, [pc, #80]	; (8012a88 <vPortFree+0xb8>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	4013      	ands	r3, r2
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d01e      	beq.n	8012a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d11a      	bne.n	8012a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	685a      	ldr	r2, [r3, #4]
 8012a4c:	4b0e      	ldr	r3, [pc, #56]	; (8012a88 <vPortFree+0xb8>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	43db      	mvns	r3, r3
 8012a52:	401a      	ands	r2, r3
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012a58:	f7fe fe90 	bl	801177c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	685a      	ldr	r2, [r3, #4]
 8012a60:	4b0a      	ldr	r3, [pc, #40]	; (8012a8c <vPortFree+0xbc>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4413      	add	r3, r2
 8012a66:	4a09      	ldr	r2, [pc, #36]	; (8012a8c <vPortFree+0xbc>)
 8012a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012a6a:	6938      	ldr	r0, [r7, #16]
 8012a6c:	f000 f874 	bl	8012b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012a70:	4b07      	ldr	r3, [pc, #28]	; (8012a90 <vPortFree+0xc0>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	3301      	adds	r3, #1
 8012a76:	4a06      	ldr	r2, [pc, #24]	; (8012a90 <vPortFree+0xc0>)
 8012a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012a7a:	f7fe fe8d 	bl	8011798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012a7e:	bf00      	nop
 8012a80:	3718      	adds	r7, #24
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}
 8012a86:	bf00      	nop
 8012a88:	20004bfc 	.word	0x20004bfc
 8012a8c:	20004bec 	.word	0x20004bec
 8012a90:	20004bf8 	.word	0x20004bf8

08012a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012a94:	b480      	push	{r7}
 8012a96:	b085      	sub	sp, #20
 8012a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012a9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012aa0:	4b27      	ldr	r3, [pc, #156]	; (8012b40 <prvHeapInit+0xac>)
 8012aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	f003 0307 	and.w	r3, r3, #7
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d00c      	beq.n	8012ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	3307      	adds	r3, #7
 8012ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	f023 0307 	bic.w	r3, r3, #7
 8012aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012abc:	68ba      	ldr	r2, [r7, #8]
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	4a1f      	ldr	r2, [pc, #124]	; (8012b40 <prvHeapInit+0xac>)
 8012ac4:	4413      	add	r3, r2
 8012ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012acc:	4a1d      	ldr	r2, [pc, #116]	; (8012b44 <prvHeapInit+0xb0>)
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012ad2:	4b1c      	ldr	r3, [pc, #112]	; (8012b44 <prvHeapInit+0xb0>)
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	68ba      	ldr	r2, [r7, #8]
 8012adc:	4413      	add	r3, r2
 8012ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012ae0:	2208      	movs	r2, #8
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	1a9b      	subs	r3, r3, r2
 8012ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	f023 0307 	bic.w	r3, r3, #7
 8012aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	4a15      	ldr	r2, [pc, #84]	; (8012b48 <prvHeapInit+0xb4>)
 8012af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012af6:	4b14      	ldr	r3, [pc, #80]	; (8012b48 <prvHeapInit+0xb4>)
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	2200      	movs	r2, #0
 8012afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012afe:	4b12      	ldr	r3, [pc, #72]	; (8012b48 <prvHeapInit+0xb4>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	2200      	movs	r2, #0
 8012b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	68fa      	ldr	r2, [r7, #12]
 8012b0e:	1ad2      	subs	r2, r2, r3
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012b14:	4b0c      	ldr	r3, [pc, #48]	; (8012b48 <prvHeapInit+0xb4>)
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	4a0a      	ldr	r2, [pc, #40]	; (8012b4c <prvHeapInit+0xb8>)
 8012b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	4a09      	ldr	r2, [pc, #36]	; (8012b50 <prvHeapInit+0xbc>)
 8012b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012b2c:	4b09      	ldr	r3, [pc, #36]	; (8012b54 <prvHeapInit+0xc0>)
 8012b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012b32:	601a      	str	r2, [r3, #0]
}
 8012b34:	bf00      	nop
 8012b36:	3714      	adds	r7, #20
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr
 8012b40:	20000be0 	.word	0x20000be0
 8012b44:	20004be0 	.word	0x20004be0
 8012b48:	20004be8 	.word	0x20004be8
 8012b4c:	20004bf0 	.word	0x20004bf0
 8012b50:	20004bec 	.word	0x20004bec
 8012b54:	20004bfc 	.word	0x20004bfc

08012b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012b58:	b480      	push	{r7}
 8012b5a:	b085      	sub	sp, #20
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012b60:	4b28      	ldr	r3, [pc, #160]	; (8012c04 <prvInsertBlockIntoFreeList+0xac>)
 8012b62:	60fb      	str	r3, [r7, #12]
 8012b64:	e002      	b.n	8012b6c <prvInsertBlockIntoFreeList+0x14>
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	60fb      	str	r3, [r7, #12]
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	687a      	ldr	r2, [r7, #4]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d8f7      	bhi.n	8012b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	68ba      	ldr	r2, [r7, #8]
 8012b80:	4413      	add	r3, r2
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d108      	bne.n	8012b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	685a      	ldr	r2, [r3, #4]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	441a      	add	r2, r3
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	68ba      	ldr	r2, [r7, #8]
 8012ba4:	441a      	add	r2, r3
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d118      	bne.n	8012be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	681a      	ldr	r2, [r3, #0]
 8012bb2:	4b15      	ldr	r3, [pc, #84]	; (8012c08 <prvInsertBlockIntoFreeList+0xb0>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d00d      	beq.n	8012bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	685a      	ldr	r2, [r3, #4]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	441a      	add	r2, r3
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	681a      	ldr	r2, [r3, #0]
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	601a      	str	r2, [r3, #0]
 8012bd4:	e008      	b.n	8012be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012bd6:	4b0c      	ldr	r3, [pc, #48]	; (8012c08 <prvInsertBlockIntoFreeList+0xb0>)
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	601a      	str	r2, [r3, #0]
 8012bde:	e003      	b.n	8012be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	681a      	ldr	r2, [r3, #0]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d002      	beq.n	8012bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012bf6:	bf00      	nop
 8012bf8:	3714      	adds	r7, #20
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c00:	4770      	bx	lr
 8012c02:	bf00      	nop
 8012c04:	20004be0 	.word	0x20004be0
 8012c08:	20004be8 	.word	0x20004be8

08012c0c <__errno>:
 8012c0c:	4b01      	ldr	r3, [pc, #4]	; (8012c14 <__errno+0x8>)
 8012c0e:	6818      	ldr	r0, [r3, #0]
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop
 8012c14:	20000510 	.word	0x20000510

08012c18 <std>:
 8012c18:	2300      	movs	r3, #0
 8012c1a:	b510      	push	{r4, lr}
 8012c1c:	4604      	mov	r4, r0
 8012c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8012c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c26:	6083      	str	r3, [r0, #8]
 8012c28:	8181      	strh	r1, [r0, #12]
 8012c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8012c2c:	81c2      	strh	r2, [r0, #14]
 8012c2e:	6183      	str	r3, [r0, #24]
 8012c30:	4619      	mov	r1, r3
 8012c32:	2208      	movs	r2, #8
 8012c34:	305c      	adds	r0, #92	; 0x5c
 8012c36:	f000 f91a 	bl	8012e6e <memset>
 8012c3a:	4b05      	ldr	r3, [pc, #20]	; (8012c50 <std+0x38>)
 8012c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8012c3e:	4b05      	ldr	r3, [pc, #20]	; (8012c54 <std+0x3c>)
 8012c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c42:	4b05      	ldr	r3, [pc, #20]	; (8012c58 <std+0x40>)
 8012c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c46:	4b05      	ldr	r3, [pc, #20]	; (8012c5c <std+0x44>)
 8012c48:	6224      	str	r4, [r4, #32]
 8012c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8012c4c:	bd10      	pop	{r4, pc}
 8012c4e:	bf00      	nop
 8012c50:	08013a99 	.word	0x08013a99
 8012c54:	08013abb 	.word	0x08013abb
 8012c58:	08013af3 	.word	0x08013af3
 8012c5c:	08013b17 	.word	0x08013b17

08012c60 <_cleanup_r>:
 8012c60:	4901      	ldr	r1, [pc, #4]	; (8012c68 <_cleanup_r+0x8>)
 8012c62:	f000 b8af 	b.w	8012dc4 <_fwalk_reent>
 8012c66:	bf00      	nop
 8012c68:	08014b2d 	.word	0x08014b2d

08012c6c <__sfmoreglue>:
 8012c6c:	b570      	push	{r4, r5, r6, lr}
 8012c6e:	1e4a      	subs	r2, r1, #1
 8012c70:	2568      	movs	r5, #104	; 0x68
 8012c72:	4355      	muls	r5, r2
 8012c74:	460e      	mov	r6, r1
 8012c76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012c7a:	f000 f901 	bl	8012e80 <_malloc_r>
 8012c7e:	4604      	mov	r4, r0
 8012c80:	b140      	cbz	r0, 8012c94 <__sfmoreglue+0x28>
 8012c82:	2100      	movs	r1, #0
 8012c84:	e9c0 1600 	strd	r1, r6, [r0]
 8012c88:	300c      	adds	r0, #12
 8012c8a:	60a0      	str	r0, [r4, #8]
 8012c8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012c90:	f000 f8ed 	bl	8012e6e <memset>
 8012c94:	4620      	mov	r0, r4
 8012c96:	bd70      	pop	{r4, r5, r6, pc}

08012c98 <__sfp_lock_acquire>:
 8012c98:	4801      	ldr	r0, [pc, #4]	; (8012ca0 <__sfp_lock_acquire+0x8>)
 8012c9a:	f000 b8d8 	b.w	8012e4e <__retarget_lock_acquire_recursive>
 8012c9e:	bf00      	nop
 8012ca0:	20004f84 	.word	0x20004f84

08012ca4 <__sfp_lock_release>:
 8012ca4:	4801      	ldr	r0, [pc, #4]	; (8012cac <__sfp_lock_release+0x8>)
 8012ca6:	f000 b8d3 	b.w	8012e50 <__retarget_lock_release_recursive>
 8012caa:	bf00      	nop
 8012cac:	20004f84 	.word	0x20004f84

08012cb0 <__sinit_lock_acquire>:
 8012cb0:	4801      	ldr	r0, [pc, #4]	; (8012cb8 <__sinit_lock_acquire+0x8>)
 8012cb2:	f000 b8cc 	b.w	8012e4e <__retarget_lock_acquire_recursive>
 8012cb6:	bf00      	nop
 8012cb8:	20004f7f 	.word	0x20004f7f

08012cbc <__sinit_lock_release>:
 8012cbc:	4801      	ldr	r0, [pc, #4]	; (8012cc4 <__sinit_lock_release+0x8>)
 8012cbe:	f000 b8c7 	b.w	8012e50 <__retarget_lock_release_recursive>
 8012cc2:	bf00      	nop
 8012cc4:	20004f7f 	.word	0x20004f7f

08012cc8 <__sinit>:
 8012cc8:	b510      	push	{r4, lr}
 8012cca:	4604      	mov	r4, r0
 8012ccc:	f7ff fff0 	bl	8012cb0 <__sinit_lock_acquire>
 8012cd0:	69a3      	ldr	r3, [r4, #24]
 8012cd2:	b11b      	cbz	r3, 8012cdc <__sinit+0x14>
 8012cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cd8:	f7ff bff0 	b.w	8012cbc <__sinit_lock_release>
 8012cdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012ce0:	6523      	str	r3, [r4, #80]	; 0x50
 8012ce2:	4b13      	ldr	r3, [pc, #76]	; (8012d30 <__sinit+0x68>)
 8012ce4:	4a13      	ldr	r2, [pc, #76]	; (8012d34 <__sinit+0x6c>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	62a2      	str	r2, [r4, #40]	; 0x28
 8012cea:	42a3      	cmp	r3, r4
 8012cec:	bf04      	itt	eq
 8012cee:	2301      	moveq	r3, #1
 8012cf0:	61a3      	streq	r3, [r4, #24]
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	f000 f820 	bl	8012d38 <__sfp>
 8012cf8:	6060      	str	r0, [r4, #4]
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	f000 f81c 	bl	8012d38 <__sfp>
 8012d00:	60a0      	str	r0, [r4, #8]
 8012d02:	4620      	mov	r0, r4
 8012d04:	f000 f818 	bl	8012d38 <__sfp>
 8012d08:	2200      	movs	r2, #0
 8012d0a:	60e0      	str	r0, [r4, #12]
 8012d0c:	2104      	movs	r1, #4
 8012d0e:	6860      	ldr	r0, [r4, #4]
 8012d10:	f7ff ff82 	bl	8012c18 <std>
 8012d14:	68a0      	ldr	r0, [r4, #8]
 8012d16:	2201      	movs	r2, #1
 8012d18:	2109      	movs	r1, #9
 8012d1a:	f7ff ff7d 	bl	8012c18 <std>
 8012d1e:	68e0      	ldr	r0, [r4, #12]
 8012d20:	2202      	movs	r2, #2
 8012d22:	2112      	movs	r1, #18
 8012d24:	f7ff ff78 	bl	8012c18 <std>
 8012d28:	2301      	movs	r3, #1
 8012d2a:	61a3      	str	r3, [r4, #24]
 8012d2c:	e7d2      	b.n	8012cd4 <__sinit+0xc>
 8012d2e:	bf00      	nop
 8012d30:	08016588 	.word	0x08016588
 8012d34:	08012c61 	.word	0x08012c61

08012d38 <__sfp>:
 8012d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d3a:	4607      	mov	r7, r0
 8012d3c:	f7ff ffac 	bl	8012c98 <__sfp_lock_acquire>
 8012d40:	4b1e      	ldr	r3, [pc, #120]	; (8012dbc <__sfp+0x84>)
 8012d42:	681e      	ldr	r6, [r3, #0]
 8012d44:	69b3      	ldr	r3, [r6, #24]
 8012d46:	b913      	cbnz	r3, 8012d4e <__sfp+0x16>
 8012d48:	4630      	mov	r0, r6
 8012d4a:	f7ff ffbd 	bl	8012cc8 <__sinit>
 8012d4e:	3648      	adds	r6, #72	; 0x48
 8012d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012d54:	3b01      	subs	r3, #1
 8012d56:	d503      	bpl.n	8012d60 <__sfp+0x28>
 8012d58:	6833      	ldr	r3, [r6, #0]
 8012d5a:	b30b      	cbz	r3, 8012da0 <__sfp+0x68>
 8012d5c:	6836      	ldr	r6, [r6, #0]
 8012d5e:	e7f7      	b.n	8012d50 <__sfp+0x18>
 8012d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012d64:	b9d5      	cbnz	r5, 8012d9c <__sfp+0x64>
 8012d66:	4b16      	ldr	r3, [pc, #88]	; (8012dc0 <__sfp+0x88>)
 8012d68:	60e3      	str	r3, [r4, #12]
 8012d6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012d6e:	6665      	str	r5, [r4, #100]	; 0x64
 8012d70:	f000 f86c 	bl	8012e4c <__retarget_lock_init_recursive>
 8012d74:	f7ff ff96 	bl	8012ca4 <__sfp_lock_release>
 8012d78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012d7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012d80:	6025      	str	r5, [r4, #0]
 8012d82:	61a5      	str	r5, [r4, #24]
 8012d84:	2208      	movs	r2, #8
 8012d86:	4629      	mov	r1, r5
 8012d88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012d8c:	f000 f86f 	bl	8012e6e <memset>
 8012d90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012d94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012d98:	4620      	mov	r0, r4
 8012d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d9c:	3468      	adds	r4, #104	; 0x68
 8012d9e:	e7d9      	b.n	8012d54 <__sfp+0x1c>
 8012da0:	2104      	movs	r1, #4
 8012da2:	4638      	mov	r0, r7
 8012da4:	f7ff ff62 	bl	8012c6c <__sfmoreglue>
 8012da8:	4604      	mov	r4, r0
 8012daa:	6030      	str	r0, [r6, #0]
 8012dac:	2800      	cmp	r0, #0
 8012dae:	d1d5      	bne.n	8012d5c <__sfp+0x24>
 8012db0:	f7ff ff78 	bl	8012ca4 <__sfp_lock_release>
 8012db4:	230c      	movs	r3, #12
 8012db6:	603b      	str	r3, [r7, #0]
 8012db8:	e7ee      	b.n	8012d98 <__sfp+0x60>
 8012dba:	bf00      	nop
 8012dbc:	08016588 	.word	0x08016588
 8012dc0:	ffff0001 	.word	0xffff0001

08012dc4 <_fwalk_reent>:
 8012dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dc8:	4606      	mov	r6, r0
 8012dca:	4688      	mov	r8, r1
 8012dcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012dd0:	2700      	movs	r7, #0
 8012dd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012dd6:	f1b9 0901 	subs.w	r9, r9, #1
 8012dda:	d505      	bpl.n	8012de8 <_fwalk_reent+0x24>
 8012ddc:	6824      	ldr	r4, [r4, #0]
 8012dde:	2c00      	cmp	r4, #0
 8012de0:	d1f7      	bne.n	8012dd2 <_fwalk_reent+0xe>
 8012de2:	4638      	mov	r0, r7
 8012de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012de8:	89ab      	ldrh	r3, [r5, #12]
 8012dea:	2b01      	cmp	r3, #1
 8012dec:	d907      	bls.n	8012dfe <_fwalk_reent+0x3a>
 8012dee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012df2:	3301      	adds	r3, #1
 8012df4:	d003      	beq.n	8012dfe <_fwalk_reent+0x3a>
 8012df6:	4629      	mov	r1, r5
 8012df8:	4630      	mov	r0, r6
 8012dfa:	47c0      	blx	r8
 8012dfc:	4307      	orrs	r7, r0
 8012dfe:	3568      	adds	r5, #104	; 0x68
 8012e00:	e7e9      	b.n	8012dd6 <_fwalk_reent+0x12>
	...

08012e04 <__libc_init_array>:
 8012e04:	b570      	push	{r4, r5, r6, lr}
 8012e06:	4d0d      	ldr	r5, [pc, #52]	; (8012e3c <__libc_init_array+0x38>)
 8012e08:	4c0d      	ldr	r4, [pc, #52]	; (8012e40 <__libc_init_array+0x3c>)
 8012e0a:	1b64      	subs	r4, r4, r5
 8012e0c:	10a4      	asrs	r4, r4, #2
 8012e0e:	2600      	movs	r6, #0
 8012e10:	42a6      	cmp	r6, r4
 8012e12:	d109      	bne.n	8012e28 <__libc_init_array+0x24>
 8012e14:	4d0b      	ldr	r5, [pc, #44]	; (8012e44 <__libc_init_array+0x40>)
 8012e16:	4c0c      	ldr	r4, [pc, #48]	; (8012e48 <__libc_init_array+0x44>)
 8012e18:	f002 fd3c 	bl	8015894 <_init>
 8012e1c:	1b64      	subs	r4, r4, r5
 8012e1e:	10a4      	asrs	r4, r4, #2
 8012e20:	2600      	movs	r6, #0
 8012e22:	42a6      	cmp	r6, r4
 8012e24:	d105      	bne.n	8012e32 <__libc_init_array+0x2e>
 8012e26:	bd70      	pop	{r4, r5, r6, pc}
 8012e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e2c:	4798      	blx	r3
 8012e2e:	3601      	adds	r6, #1
 8012e30:	e7ee      	b.n	8012e10 <__libc_init_array+0xc>
 8012e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e36:	4798      	blx	r3
 8012e38:	3601      	adds	r6, #1
 8012e3a:	e7f2      	b.n	8012e22 <__libc_init_array+0x1e>
 8012e3c:	08016970 	.word	0x08016970
 8012e40:	08016970 	.word	0x08016970
 8012e44:	08016970 	.word	0x08016970
 8012e48:	08016974 	.word	0x08016974

08012e4c <__retarget_lock_init_recursive>:
 8012e4c:	4770      	bx	lr

08012e4e <__retarget_lock_acquire_recursive>:
 8012e4e:	4770      	bx	lr

08012e50 <__retarget_lock_release_recursive>:
 8012e50:	4770      	bx	lr

08012e52 <memcpy>:
 8012e52:	440a      	add	r2, r1
 8012e54:	4291      	cmp	r1, r2
 8012e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8012e5a:	d100      	bne.n	8012e5e <memcpy+0xc>
 8012e5c:	4770      	bx	lr
 8012e5e:	b510      	push	{r4, lr}
 8012e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e68:	4291      	cmp	r1, r2
 8012e6a:	d1f9      	bne.n	8012e60 <memcpy+0xe>
 8012e6c:	bd10      	pop	{r4, pc}

08012e6e <memset>:
 8012e6e:	4402      	add	r2, r0
 8012e70:	4603      	mov	r3, r0
 8012e72:	4293      	cmp	r3, r2
 8012e74:	d100      	bne.n	8012e78 <memset+0xa>
 8012e76:	4770      	bx	lr
 8012e78:	f803 1b01 	strb.w	r1, [r3], #1
 8012e7c:	e7f9      	b.n	8012e72 <memset+0x4>
	...

08012e80 <_malloc_r>:
 8012e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e82:	1ccd      	adds	r5, r1, #3
 8012e84:	f025 0503 	bic.w	r5, r5, #3
 8012e88:	3508      	adds	r5, #8
 8012e8a:	2d0c      	cmp	r5, #12
 8012e8c:	bf38      	it	cc
 8012e8e:	250c      	movcc	r5, #12
 8012e90:	2d00      	cmp	r5, #0
 8012e92:	4606      	mov	r6, r0
 8012e94:	db01      	blt.n	8012e9a <_malloc_r+0x1a>
 8012e96:	42a9      	cmp	r1, r5
 8012e98:	d903      	bls.n	8012ea2 <_malloc_r+0x22>
 8012e9a:	230c      	movs	r3, #12
 8012e9c:	6033      	str	r3, [r6, #0]
 8012e9e:	2000      	movs	r0, #0
 8012ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ea2:	f001 ff13 	bl	8014ccc <__malloc_lock>
 8012ea6:	4921      	ldr	r1, [pc, #132]	; (8012f2c <_malloc_r+0xac>)
 8012ea8:	680a      	ldr	r2, [r1, #0]
 8012eaa:	4614      	mov	r4, r2
 8012eac:	b99c      	cbnz	r4, 8012ed6 <_malloc_r+0x56>
 8012eae:	4f20      	ldr	r7, [pc, #128]	; (8012f30 <_malloc_r+0xb0>)
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	b923      	cbnz	r3, 8012ebe <_malloc_r+0x3e>
 8012eb4:	4621      	mov	r1, r4
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	f000 fdde 	bl	8013a78 <_sbrk_r>
 8012ebc:	6038      	str	r0, [r7, #0]
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	4630      	mov	r0, r6
 8012ec2:	f000 fdd9 	bl	8013a78 <_sbrk_r>
 8012ec6:	1c43      	adds	r3, r0, #1
 8012ec8:	d123      	bne.n	8012f12 <_malloc_r+0x92>
 8012eca:	230c      	movs	r3, #12
 8012ecc:	6033      	str	r3, [r6, #0]
 8012ece:	4630      	mov	r0, r6
 8012ed0:	f001 ff02 	bl	8014cd8 <__malloc_unlock>
 8012ed4:	e7e3      	b.n	8012e9e <_malloc_r+0x1e>
 8012ed6:	6823      	ldr	r3, [r4, #0]
 8012ed8:	1b5b      	subs	r3, r3, r5
 8012eda:	d417      	bmi.n	8012f0c <_malloc_r+0x8c>
 8012edc:	2b0b      	cmp	r3, #11
 8012ede:	d903      	bls.n	8012ee8 <_malloc_r+0x68>
 8012ee0:	6023      	str	r3, [r4, #0]
 8012ee2:	441c      	add	r4, r3
 8012ee4:	6025      	str	r5, [r4, #0]
 8012ee6:	e004      	b.n	8012ef2 <_malloc_r+0x72>
 8012ee8:	6863      	ldr	r3, [r4, #4]
 8012eea:	42a2      	cmp	r2, r4
 8012eec:	bf0c      	ite	eq
 8012eee:	600b      	streq	r3, [r1, #0]
 8012ef0:	6053      	strne	r3, [r2, #4]
 8012ef2:	4630      	mov	r0, r6
 8012ef4:	f001 fef0 	bl	8014cd8 <__malloc_unlock>
 8012ef8:	f104 000b 	add.w	r0, r4, #11
 8012efc:	1d23      	adds	r3, r4, #4
 8012efe:	f020 0007 	bic.w	r0, r0, #7
 8012f02:	1ac2      	subs	r2, r0, r3
 8012f04:	d0cc      	beq.n	8012ea0 <_malloc_r+0x20>
 8012f06:	1a1b      	subs	r3, r3, r0
 8012f08:	50a3      	str	r3, [r4, r2]
 8012f0a:	e7c9      	b.n	8012ea0 <_malloc_r+0x20>
 8012f0c:	4622      	mov	r2, r4
 8012f0e:	6864      	ldr	r4, [r4, #4]
 8012f10:	e7cc      	b.n	8012eac <_malloc_r+0x2c>
 8012f12:	1cc4      	adds	r4, r0, #3
 8012f14:	f024 0403 	bic.w	r4, r4, #3
 8012f18:	42a0      	cmp	r0, r4
 8012f1a:	d0e3      	beq.n	8012ee4 <_malloc_r+0x64>
 8012f1c:	1a21      	subs	r1, r4, r0
 8012f1e:	4630      	mov	r0, r6
 8012f20:	f000 fdaa 	bl	8013a78 <_sbrk_r>
 8012f24:	3001      	adds	r0, #1
 8012f26:	d1dd      	bne.n	8012ee4 <_malloc_r+0x64>
 8012f28:	e7cf      	b.n	8012eca <_malloc_r+0x4a>
 8012f2a:	bf00      	nop
 8012f2c:	20004c00 	.word	0x20004c00
 8012f30:	20004c04 	.word	0x20004c04

08012f34 <__cvt>:
 8012f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f38:	ec55 4b10 	vmov	r4, r5, d0
 8012f3c:	2d00      	cmp	r5, #0
 8012f3e:	460e      	mov	r6, r1
 8012f40:	4619      	mov	r1, r3
 8012f42:	462b      	mov	r3, r5
 8012f44:	bfbb      	ittet	lt
 8012f46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012f4a:	461d      	movlt	r5, r3
 8012f4c:	2300      	movge	r3, #0
 8012f4e:	232d      	movlt	r3, #45	; 0x2d
 8012f50:	700b      	strb	r3, [r1, #0]
 8012f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012f58:	4691      	mov	r9, r2
 8012f5a:	f023 0820 	bic.w	r8, r3, #32
 8012f5e:	bfbc      	itt	lt
 8012f60:	4622      	movlt	r2, r4
 8012f62:	4614      	movlt	r4, r2
 8012f64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012f68:	d005      	beq.n	8012f76 <__cvt+0x42>
 8012f6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012f6e:	d100      	bne.n	8012f72 <__cvt+0x3e>
 8012f70:	3601      	adds	r6, #1
 8012f72:	2102      	movs	r1, #2
 8012f74:	e000      	b.n	8012f78 <__cvt+0x44>
 8012f76:	2103      	movs	r1, #3
 8012f78:	ab03      	add	r3, sp, #12
 8012f7a:	9301      	str	r3, [sp, #4]
 8012f7c:	ab02      	add	r3, sp, #8
 8012f7e:	9300      	str	r3, [sp, #0]
 8012f80:	ec45 4b10 	vmov	d0, r4, r5
 8012f84:	4653      	mov	r3, sl
 8012f86:	4632      	mov	r2, r6
 8012f88:	f000 ff5e 	bl	8013e48 <_dtoa_r>
 8012f8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012f90:	4607      	mov	r7, r0
 8012f92:	d102      	bne.n	8012f9a <__cvt+0x66>
 8012f94:	f019 0f01 	tst.w	r9, #1
 8012f98:	d022      	beq.n	8012fe0 <__cvt+0xac>
 8012f9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012f9e:	eb07 0906 	add.w	r9, r7, r6
 8012fa2:	d110      	bne.n	8012fc6 <__cvt+0x92>
 8012fa4:	783b      	ldrb	r3, [r7, #0]
 8012fa6:	2b30      	cmp	r3, #48	; 0x30
 8012fa8:	d10a      	bne.n	8012fc0 <__cvt+0x8c>
 8012faa:	2200      	movs	r2, #0
 8012fac:	2300      	movs	r3, #0
 8012fae:	4620      	mov	r0, r4
 8012fb0:	4629      	mov	r1, r5
 8012fb2:	f7ed fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 8012fb6:	b918      	cbnz	r0, 8012fc0 <__cvt+0x8c>
 8012fb8:	f1c6 0601 	rsb	r6, r6, #1
 8012fbc:	f8ca 6000 	str.w	r6, [sl]
 8012fc0:	f8da 3000 	ldr.w	r3, [sl]
 8012fc4:	4499      	add	r9, r3
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	2300      	movs	r3, #0
 8012fca:	4620      	mov	r0, r4
 8012fcc:	4629      	mov	r1, r5
 8012fce:	f7ed fd7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8012fd2:	b108      	cbz	r0, 8012fd8 <__cvt+0xa4>
 8012fd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8012fd8:	2230      	movs	r2, #48	; 0x30
 8012fda:	9b03      	ldr	r3, [sp, #12]
 8012fdc:	454b      	cmp	r3, r9
 8012fde:	d307      	bcc.n	8012ff0 <__cvt+0xbc>
 8012fe0:	9b03      	ldr	r3, [sp, #12]
 8012fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012fe4:	1bdb      	subs	r3, r3, r7
 8012fe6:	4638      	mov	r0, r7
 8012fe8:	6013      	str	r3, [r2, #0]
 8012fea:	b004      	add	sp, #16
 8012fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ff0:	1c59      	adds	r1, r3, #1
 8012ff2:	9103      	str	r1, [sp, #12]
 8012ff4:	701a      	strb	r2, [r3, #0]
 8012ff6:	e7f0      	b.n	8012fda <__cvt+0xa6>

08012ff8 <__exponent>:
 8012ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	2900      	cmp	r1, #0
 8012ffe:	bfb8      	it	lt
 8013000:	4249      	neglt	r1, r1
 8013002:	f803 2b02 	strb.w	r2, [r3], #2
 8013006:	bfb4      	ite	lt
 8013008:	222d      	movlt	r2, #45	; 0x2d
 801300a:	222b      	movge	r2, #43	; 0x2b
 801300c:	2909      	cmp	r1, #9
 801300e:	7042      	strb	r2, [r0, #1]
 8013010:	dd2a      	ble.n	8013068 <__exponent+0x70>
 8013012:	f10d 0407 	add.w	r4, sp, #7
 8013016:	46a4      	mov	ip, r4
 8013018:	270a      	movs	r7, #10
 801301a:	46a6      	mov	lr, r4
 801301c:	460a      	mov	r2, r1
 801301e:	fb91 f6f7 	sdiv	r6, r1, r7
 8013022:	fb07 1516 	mls	r5, r7, r6, r1
 8013026:	3530      	adds	r5, #48	; 0x30
 8013028:	2a63      	cmp	r2, #99	; 0x63
 801302a:	f104 34ff 	add.w	r4, r4, #4294967295
 801302e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013032:	4631      	mov	r1, r6
 8013034:	dcf1      	bgt.n	801301a <__exponent+0x22>
 8013036:	3130      	adds	r1, #48	; 0x30
 8013038:	f1ae 0502 	sub.w	r5, lr, #2
 801303c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013040:	1c44      	adds	r4, r0, #1
 8013042:	4629      	mov	r1, r5
 8013044:	4561      	cmp	r1, ip
 8013046:	d30a      	bcc.n	801305e <__exponent+0x66>
 8013048:	f10d 0209 	add.w	r2, sp, #9
 801304c:	eba2 020e 	sub.w	r2, r2, lr
 8013050:	4565      	cmp	r5, ip
 8013052:	bf88      	it	hi
 8013054:	2200      	movhi	r2, #0
 8013056:	4413      	add	r3, r2
 8013058:	1a18      	subs	r0, r3, r0
 801305a:	b003      	add	sp, #12
 801305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801305e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013062:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013066:	e7ed      	b.n	8013044 <__exponent+0x4c>
 8013068:	2330      	movs	r3, #48	; 0x30
 801306a:	3130      	adds	r1, #48	; 0x30
 801306c:	7083      	strb	r3, [r0, #2]
 801306e:	70c1      	strb	r1, [r0, #3]
 8013070:	1d03      	adds	r3, r0, #4
 8013072:	e7f1      	b.n	8013058 <__exponent+0x60>

08013074 <_printf_float>:
 8013074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013078:	ed2d 8b02 	vpush	{d8}
 801307c:	b08d      	sub	sp, #52	; 0x34
 801307e:	460c      	mov	r4, r1
 8013080:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013084:	4616      	mov	r6, r2
 8013086:	461f      	mov	r7, r3
 8013088:	4605      	mov	r5, r0
 801308a:	f001 fd9d 	bl	8014bc8 <_localeconv_r>
 801308e:	f8d0 a000 	ldr.w	sl, [r0]
 8013092:	4650      	mov	r0, sl
 8013094:	f7ed f89c 	bl	80001d0 <strlen>
 8013098:	2300      	movs	r3, #0
 801309a:	930a      	str	r3, [sp, #40]	; 0x28
 801309c:	6823      	ldr	r3, [r4, #0]
 801309e:	9305      	str	r3, [sp, #20]
 80130a0:	f8d8 3000 	ldr.w	r3, [r8]
 80130a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80130a8:	3307      	adds	r3, #7
 80130aa:	f023 0307 	bic.w	r3, r3, #7
 80130ae:	f103 0208 	add.w	r2, r3, #8
 80130b2:	f8c8 2000 	str.w	r2, [r8]
 80130b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80130be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80130c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80130c6:	9307      	str	r3, [sp, #28]
 80130c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80130cc:	ee08 0a10 	vmov	s16, r0
 80130d0:	4b9f      	ldr	r3, [pc, #636]	; (8013350 <_printf_float+0x2dc>)
 80130d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80130d6:	f04f 32ff 	mov.w	r2, #4294967295
 80130da:	f7ed fd27 	bl	8000b2c <__aeabi_dcmpun>
 80130de:	bb88      	cbnz	r0, 8013144 <_printf_float+0xd0>
 80130e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80130e4:	4b9a      	ldr	r3, [pc, #616]	; (8013350 <_printf_float+0x2dc>)
 80130e6:	f04f 32ff 	mov.w	r2, #4294967295
 80130ea:	f7ed fd01 	bl	8000af0 <__aeabi_dcmple>
 80130ee:	bb48      	cbnz	r0, 8013144 <_printf_float+0xd0>
 80130f0:	2200      	movs	r2, #0
 80130f2:	2300      	movs	r3, #0
 80130f4:	4640      	mov	r0, r8
 80130f6:	4649      	mov	r1, r9
 80130f8:	f7ed fcf0 	bl	8000adc <__aeabi_dcmplt>
 80130fc:	b110      	cbz	r0, 8013104 <_printf_float+0x90>
 80130fe:	232d      	movs	r3, #45	; 0x2d
 8013100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013104:	4b93      	ldr	r3, [pc, #588]	; (8013354 <_printf_float+0x2e0>)
 8013106:	4894      	ldr	r0, [pc, #592]	; (8013358 <_printf_float+0x2e4>)
 8013108:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801310c:	bf94      	ite	ls
 801310e:	4698      	movls	r8, r3
 8013110:	4680      	movhi	r8, r0
 8013112:	2303      	movs	r3, #3
 8013114:	6123      	str	r3, [r4, #16]
 8013116:	9b05      	ldr	r3, [sp, #20]
 8013118:	f023 0204 	bic.w	r2, r3, #4
 801311c:	6022      	str	r2, [r4, #0]
 801311e:	f04f 0900 	mov.w	r9, #0
 8013122:	9700      	str	r7, [sp, #0]
 8013124:	4633      	mov	r3, r6
 8013126:	aa0b      	add	r2, sp, #44	; 0x2c
 8013128:	4621      	mov	r1, r4
 801312a:	4628      	mov	r0, r5
 801312c:	f000 f9d8 	bl	80134e0 <_printf_common>
 8013130:	3001      	adds	r0, #1
 8013132:	f040 8090 	bne.w	8013256 <_printf_float+0x1e2>
 8013136:	f04f 30ff 	mov.w	r0, #4294967295
 801313a:	b00d      	add	sp, #52	; 0x34
 801313c:	ecbd 8b02 	vpop	{d8}
 8013140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013144:	4642      	mov	r2, r8
 8013146:	464b      	mov	r3, r9
 8013148:	4640      	mov	r0, r8
 801314a:	4649      	mov	r1, r9
 801314c:	f7ed fcee 	bl	8000b2c <__aeabi_dcmpun>
 8013150:	b140      	cbz	r0, 8013164 <_printf_float+0xf0>
 8013152:	464b      	mov	r3, r9
 8013154:	2b00      	cmp	r3, #0
 8013156:	bfbc      	itt	lt
 8013158:	232d      	movlt	r3, #45	; 0x2d
 801315a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801315e:	487f      	ldr	r0, [pc, #508]	; (801335c <_printf_float+0x2e8>)
 8013160:	4b7f      	ldr	r3, [pc, #508]	; (8013360 <_printf_float+0x2ec>)
 8013162:	e7d1      	b.n	8013108 <_printf_float+0x94>
 8013164:	6863      	ldr	r3, [r4, #4]
 8013166:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801316a:	9206      	str	r2, [sp, #24]
 801316c:	1c5a      	adds	r2, r3, #1
 801316e:	d13f      	bne.n	80131f0 <_printf_float+0x17c>
 8013170:	2306      	movs	r3, #6
 8013172:	6063      	str	r3, [r4, #4]
 8013174:	9b05      	ldr	r3, [sp, #20]
 8013176:	6861      	ldr	r1, [r4, #4]
 8013178:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801317c:	2300      	movs	r3, #0
 801317e:	9303      	str	r3, [sp, #12]
 8013180:	ab0a      	add	r3, sp, #40	; 0x28
 8013182:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013186:	ab09      	add	r3, sp, #36	; 0x24
 8013188:	ec49 8b10 	vmov	d0, r8, r9
 801318c:	9300      	str	r3, [sp, #0]
 801318e:	6022      	str	r2, [r4, #0]
 8013190:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013194:	4628      	mov	r0, r5
 8013196:	f7ff fecd 	bl	8012f34 <__cvt>
 801319a:	9b06      	ldr	r3, [sp, #24]
 801319c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801319e:	2b47      	cmp	r3, #71	; 0x47
 80131a0:	4680      	mov	r8, r0
 80131a2:	d108      	bne.n	80131b6 <_printf_float+0x142>
 80131a4:	1cc8      	adds	r0, r1, #3
 80131a6:	db02      	blt.n	80131ae <_printf_float+0x13a>
 80131a8:	6863      	ldr	r3, [r4, #4]
 80131aa:	4299      	cmp	r1, r3
 80131ac:	dd41      	ble.n	8013232 <_printf_float+0x1be>
 80131ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80131b2:	fa5f fb8b 	uxtb.w	fp, fp
 80131b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80131ba:	d820      	bhi.n	80131fe <_printf_float+0x18a>
 80131bc:	3901      	subs	r1, #1
 80131be:	465a      	mov	r2, fp
 80131c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80131c4:	9109      	str	r1, [sp, #36]	; 0x24
 80131c6:	f7ff ff17 	bl	8012ff8 <__exponent>
 80131ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131cc:	1813      	adds	r3, r2, r0
 80131ce:	2a01      	cmp	r2, #1
 80131d0:	4681      	mov	r9, r0
 80131d2:	6123      	str	r3, [r4, #16]
 80131d4:	dc02      	bgt.n	80131dc <_printf_float+0x168>
 80131d6:	6822      	ldr	r2, [r4, #0]
 80131d8:	07d2      	lsls	r2, r2, #31
 80131da:	d501      	bpl.n	80131e0 <_printf_float+0x16c>
 80131dc:	3301      	adds	r3, #1
 80131de:	6123      	str	r3, [r4, #16]
 80131e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d09c      	beq.n	8013122 <_printf_float+0xae>
 80131e8:	232d      	movs	r3, #45	; 0x2d
 80131ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131ee:	e798      	b.n	8013122 <_printf_float+0xae>
 80131f0:	9a06      	ldr	r2, [sp, #24]
 80131f2:	2a47      	cmp	r2, #71	; 0x47
 80131f4:	d1be      	bne.n	8013174 <_printf_float+0x100>
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d1bc      	bne.n	8013174 <_printf_float+0x100>
 80131fa:	2301      	movs	r3, #1
 80131fc:	e7b9      	b.n	8013172 <_printf_float+0xfe>
 80131fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013202:	d118      	bne.n	8013236 <_printf_float+0x1c2>
 8013204:	2900      	cmp	r1, #0
 8013206:	6863      	ldr	r3, [r4, #4]
 8013208:	dd0b      	ble.n	8013222 <_printf_float+0x1ae>
 801320a:	6121      	str	r1, [r4, #16]
 801320c:	b913      	cbnz	r3, 8013214 <_printf_float+0x1a0>
 801320e:	6822      	ldr	r2, [r4, #0]
 8013210:	07d0      	lsls	r0, r2, #31
 8013212:	d502      	bpl.n	801321a <_printf_float+0x1a6>
 8013214:	3301      	adds	r3, #1
 8013216:	440b      	add	r3, r1
 8013218:	6123      	str	r3, [r4, #16]
 801321a:	65a1      	str	r1, [r4, #88]	; 0x58
 801321c:	f04f 0900 	mov.w	r9, #0
 8013220:	e7de      	b.n	80131e0 <_printf_float+0x16c>
 8013222:	b913      	cbnz	r3, 801322a <_printf_float+0x1b6>
 8013224:	6822      	ldr	r2, [r4, #0]
 8013226:	07d2      	lsls	r2, r2, #31
 8013228:	d501      	bpl.n	801322e <_printf_float+0x1ba>
 801322a:	3302      	adds	r3, #2
 801322c:	e7f4      	b.n	8013218 <_printf_float+0x1a4>
 801322e:	2301      	movs	r3, #1
 8013230:	e7f2      	b.n	8013218 <_printf_float+0x1a4>
 8013232:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013238:	4299      	cmp	r1, r3
 801323a:	db05      	blt.n	8013248 <_printf_float+0x1d4>
 801323c:	6823      	ldr	r3, [r4, #0]
 801323e:	6121      	str	r1, [r4, #16]
 8013240:	07d8      	lsls	r0, r3, #31
 8013242:	d5ea      	bpl.n	801321a <_printf_float+0x1a6>
 8013244:	1c4b      	adds	r3, r1, #1
 8013246:	e7e7      	b.n	8013218 <_printf_float+0x1a4>
 8013248:	2900      	cmp	r1, #0
 801324a:	bfd4      	ite	le
 801324c:	f1c1 0202 	rsble	r2, r1, #2
 8013250:	2201      	movgt	r2, #1
 8013252:	4413      	add	r3, r2
 8013254:	e7e0      	b.n	8013218 <_printf_float+0x1a4>
 8013256:	6823      	ldr	r3, [r4, #0]
 8013258:	055a      	lsls	r2, r3, #21
 801325a:	d407      	bmi.n	801326c <_printf_float+0x1f8>
 801325c:	6923      	ldr	r3, [r4, #16]
 801325e:	4642      	mov	r2, r8
 8013260:	4631      	mov	r1, r6
 8013262:	4628      	mov	r0, r5
 8013264:	47b8      	blx	r7
 8013266:	3001      	adds	r0, #1
 8013268:	d12c      	bne.n	80132c4 <_printf_float+0x250>
 801326a:	e764      	b.n	8013136 <_printf_float+0xc2>
 801326c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013270:	f240 80e0 	bls.w	8013434 <_printf_float+0x3c0>
 8013274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013278:	2200      	movs	r2, #0
 801327a:	2300      	movs	r3, #0
 801327c:	f7ed fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 8013280:	2800      	cmp	r0, #0
 8013282:	d034      	beq.n	80132ee <_printf_float+0x27a>
 8013284:	4a37      	ldr	r2, [pc, #220]	; (8013364 <_printf_float+0x2f0>)
 8013286:	2301      	movs	r3, #1
 8013288:	4631      	mov	r1, r6
 801328a:	4628      	mov	r0, r5
 801328c:	47b8      	blx	r7
 801328e:	3001      	adds	r0, #1
 8013290:	f43f af51 	beq.w	8013136 <_printf_float+0xc2>
 8013294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013298:	429a      	cmp	r2, r3
 801329a:	db02      	blt.n	80132a2 <_printf_float+0x22e>
 801329c:	6823      	ldr	r3, [r4, #0]
 801329e:	07d8      	lsls	r0, r3, #31
 80132a0:	d510      	bpl.n	80132c4 <_printf_float+0x250>
 80132a2:	ee18 3a10 	vmov	r3, s16
 80132a6:	4652      	mov	r2, sl
 80132a8:	4631      	mov	r1, r6
 80132aa:	4628      	mov	r0, r5
 80132ac:	47b8      	blx	r7
 80132ae:	3001      	adds	r0, #1
 80132b0:	f43f af41 	beq.w	8013136 <_printf_float+0xc2>
 80132b4:	f04f 0800 	mov.w	r8, #0
 80132b8:	f104 091a 	add.w	r9, r4, #26
 80132bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132be:	3b01      	subs	r3, #1
 80132c0:	4543      	cmp	r3, r8
 80132c2:	dc09      	bgt.n	80132d8 <_printf_float+0x264>
 80132c4:	6823      	ldr	r3, [r4, #0]
 80132c6:	079b      	lsls	r3, r3, #30
 80132c8:	f100 8105 	bmi.w	80134d6 <_printf_float+0x462>
 80132cc:	68e0      	ldr	r0, [r4, #12]
 80132ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132d0:	4298      	cmp	r0, r3
 80132d2:	bfb8      	it	lt
 80132d4:	4618      	movlt	r0, r3
 80132d6:	e730      	b.n	801313a <_printf_float+0xc6>
 80132d8:	2301      	movs	r3, #1
 80132da:	464a      	mov	r2, r9
 80132dc:	4631      	mov	r1, r6
 80132de:	4628      	mov	r0, r5
 80132e0:	47b8      	blx	r7
 80132e2:	3001      	adds	r0, #1
 80132e4:	f43f af27 	beq.w	8013136 <_printf_float+0xc2>
 80132e8:	f108 0801 	add.w	r8, r8, #1
 80132ec:	e7e6      	b.n	80132bc <_printf_float+0x248>
 80132ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	dc39      	bgt.n	8013368 <_printf_float+0x2f4>
 80132f4:	4a1b      	ldr	r2, [pc, #108]	; (8013364 <_printf_float+0x2f0>)
 80132f6:	2301      	movs	r3, #1
 80132f8:	4631      	mov	r1, r6
 80132fa:	4628      	mov	r0, r5
 80132fc:	47b8      	blx	r7
 80132fe:	3001      	adds	r0, #1
 8013300:	f43f af19 	beq.w	8013136 <_printf_float+0xc2>
 8013304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013308:	4313      	orrs	r3, r2
 801330a:	d102      	bne.n	8013312 <_printf_float+0x29e>
 801330c:	6823      	ldr	r3, [r4, #0]
 801330e:	07d9      	lsls	r1, r3, #31
 8013310:	d5d8      	bpl.n	80132c4 <_printf_float+0x250>
 8013312:	ee18 3a10 	vmov	r3, s16
 8013316:	4652      	mov	r2, sl
 8013318:	4631      	mov	r1, r6
 801331a:	4628      	mov	r0, r5
 801331c:	47b8      	blx	r7
 801331e:	3001      	adds	r0, #1
 8013320:	f43f af09 	beq.w	8013136 <_printf_float+0xc2>
 8013324:	f04f 0900 	mov.w	r9, #0
 8013328:	f104 0a1a 	add.w	sl, r4, #26
 801332c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801332e:	425b      	negs	r3, r3
 8013330:	454b      	cmp	r3, r9
 8013332:	dc01      	bgt.n	8013338 <_printf_float+0x2c4>
 8013334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013336:	e792      	b.n	801325e <_printf_float+0x1ea>
 8013338:	2301      	movs	r3, #1
 801333a:	4652      	mov	r2, sl
 801333c:	4631      	mov	r1, r6
 801333e:	4628      	mov	r0, r5
 8013340:	47b8      	blx	r7
 8013342:	3001      	adds	r0, #1
 8013344:	f43f aef7 	beq.w	8013136 <_printf_float+0xc2>
 8013348:	f109 0901 	add.w	r9, r9, #1
 801334c:	e7ee      	b.n	801332c <_printf_float+0x2b8>
 801334e:	bf00      	nop
 8013350:	7fefffff 	.word	0x7fefffff
 8013354:	0801658c 	.word	0x0801658c
 8013358:	08016590 	.word	0x08016590
 801335c:	08016598 	.word	0x08016598
 8013360:	08016594 	.word	0x08016594
 8013364:	0801659c 	.word	0x0801659c
 8013368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801336a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801336c:	429a      	cmp	r2, r3
 801336e:	bfa8      	it	ge
 8013370:	461a      	movge	r2, r3
 8013372:	2a00      	cmp	r2, #0
 8013374:	4691      	mov	r9, r2
 8013376:	dc37      	bgt.n	80133e8 <_printf_float+0x374>
 8013378:	f04f 0b00 	mov.w	fp, #0
 801337c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013380:	f104 021a 	add.w	r2, r4, #26
 8013384:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013386:	9305      	str	r3, [sp, #20]
 8013388:	eba3 0309 	sub.w	r3, r3, r9
 801338c:	455b      	cmp	r3, fp
 801338e:	dc33      	bgt.n	80133f8 <_printf_float+0x384>
 8013390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013394:	429a      	cmp	r2, r3
 8013396:	db3b      	blt.n	8013410 <_printf_float+0x39c>
 8013398:	6823      	ldr	r3, [r4, #0]
 801339a:	07da      	lsls	r2, r3, #31
 801339c:	d438      	bmi.n	8013410 <_printf_float+0x39c>
 801339e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133a0:	9b05      	ldr	r3, [sp, #20]
 80133a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133a4:	1ad3      	subs	r3, r2, r3
 80133a6:	eba2 0901 	sub.w	r9, r2, r1
 80133aa:	4599      	cmp	r9, r3
 80133ac:	bfa8      	it	ge
 80133ae:	4699      	movge	r9, r3
 80133b0:	f1b9 0f00 	cmp.w	r9, #0
 80133b4:	dc35      	bgt.n	8013422 <_printf_float+0x3ae>
 80133b6:	f04f 0800 	mov.w	r8, #0
 80133ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80133be:	f104 0a1a 	add.w	sl, r4, #26
 80133c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80133c6:	1a9b      	subs	r3, r3, r2
 80133c8:	eba3 0309 	sub.w	r3, r3, r9
 80133cc:	4543      	cmp	r3, r8
 80133ce:	f77f af79 	ble.w	80132c4 <_printf_float+0x250>
 80133d2:	2301      	movs	r3, #1
 80133d4:	4652      	mov	r2, sl
 80133d6:	4631      	mov	r1, r6
 80133d8:	4628      	mov	r0, r5
 80133da:	47b8      	blx	r7
 80133dc:	3001      	adds	r0, #1
 80133de:	f43f aeaa 	beq.w	8013136 <_printf_float+0xc2>
 80133e2:	f108 0801 	add.w	r8, r8, #1
 80133e6:	e7ec      	b.n	80133c2 <_printf_float+0x34e>
 80133e8:	4613      	mov	r3, r2
 80133ea:	4631      	mov	r1, r6
 80133ec:	4642      	mov	r2, r8
 80133ee:	4628      	mov	r0, r5
 80133f0:	47b8      	blx	r7
 80133f2:	3001      	adds	r0, #1
 80133f4:	d1c0      	bne.n	8013378 <_printf_float+0x304>
 80133f6:	e69e      	b.n	8013136 <_printf_float+0xc2>
 80133f8:	2301      	movs	r3, #1
 80133fa:	4631      	mov	r1, r6
 80133fc:	4628      	mov	r0, r5
 80133fe:	9205      	str	r2, [sp, #20]
 8013400:	47b8      	blx	r7
 8013402:	3001      	adds	r0, #1
 8013404:	f43f ae97 	beq.w	8013136 <_printf_float+0xc2>
 8013408:	9a05      	ldr	r2, [sp, #20]
 801340a:	f10b 0b01 	add.w	fp, fp, #1
 801340e:	e7b9      	b.n	8013384 <_printf_float+0x310>
 8013410:	ee18 3a10 	vmov	r3, s16
 8013414:	4652      	mov	r2, sl
 8013416:	4631      	mov	r1, r6
 8013418:	4628      	mov	r0, r5
 801341a:	47b8      	blx	r7
 801341c:	3001      	adds	r0, #1
 801341e:	d1be      	bne.n	801339e <_printf_float+0x32a>
 8013420:	e689      	b.n	8013136 <_printf_float+0xc2>
 8013422:	9a05      	ldr	r2, [sp, #20]
 8013424:	464b      	mov	r3, r9
 8013426:	4442      	add	r2, r8
 8013428:	4631      	mov	r1, r6
 801342a:	4628      	mov	r0, r5
 801342c:	47b8      	blx	r7
 801342e:	3001      	adds	r0, #1
 8013430:	d1c1      	bne.n	80133b6 <_printf_float+0x342>
 8013432:	e680      	b.n	8013136 <_printf_float+0xc2>
 8013434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013436:	2a01      	cmp	r2, #1
 8013438:	dc01      	bgt.n	801343e <_printf_float+0x3ca>
 801343a:	07db      	lsls	r3, r3, #31
 801343c:	d538      	bpl.n	80134b0 <_printf_float+0x43c>
 801343e:	2301      	movs	r3, #1
 8013440:	4642      	mov	r2, r8
 8013442:	4631      	mov	r1, r6
 8013444:	4628      	mov	r0, r5
 8013446:	47b8      	blx	r7
 8013448:	3001      	adds	r0, #1
 801344a:	f43f ae74 	beq.w	8013136 <_printf_float+0xc2>
 801344e:	ee18 3a10 	vmov	r3, s16
 8013452:	4652      	mov	r2, sl
 8013454:	4631      	mov	r1, r6
 8013456:	4628      	mov	r0, r5
 8013458:	47b8      	blx	r7
 801345a:	3001      	adds	r0, #1
 801345c:	f43f ae6b 	beq.w	8013136 <_printf_float+0xc2>
 8013460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013464:	2200      	movs	r2, #0
 8013466:	2300      	movs	r3, #0
 8013468:	f7ed fb2e 	bl	8000ac8 <__aeabi_dcmpeq>
 801346c:	b9d8      	cbnz	r0, 80134a6 <_printf_float+0x432>
 801346e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013470:	f108 0201 	add.w	r2, r8, #1
 8013474:	3b01      	subs	r3, #1
 8013476:	4631      	mov	r1, r6
 8013478:	4628      	mov	r0, r5
 801347a:	47b8      	blx	r7
 801347c:	3001      	adds	r0, #1
 801347e:	d10e      	bne.n	801349e <_printf_float+0x42a>
 8013480:	e659      	b.n	8013136 <_printf_float+0xc2>
 8013482:	2301      	movs	r3, #1
 8013484:	4652      	mov	r2, sl
 8013486:	4631      	mov	r1, r6
 8013488:	4628      	mov	r0, r5
 801348a:	47b8      	blx	r7
 801348c:	3001      	adds	r0, #1
 801348e:	f43f ae52 	beq.w	8013136 <_printf_float+0xc2>
 8013492:	f108 0801 	add.w	r8, r8, #1
 8013496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013498:	3b01      	subs	r3, #1
 801349a:	4543      	cmp	r3, r8
 801349c:	dcf1      	bgt.n	8013482 <_printf_float+0x40e>
 801349e:	464b      	mov	r3, r9
 80134a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80134a4:	e6dc      	b.n	8013260 <_printf_float+0x1ec>
 80134a6:	f04f 0800 	mov.w	r8, #0
 80134aa:	f104 0a1a 	add.w	sl, r4, #26
 80134ae:	e7f2      	b.n	8013496 <_printf_float+0x422>
 80134b0:	2301      	movs	r3, #1
 80134b2:	4642      	mov	r2, r8
 80134b4:	e7df      	b.n	8013476 <_printf_float+0x402>
 80134b6:	2301      	movs	r3, #1
 80134b8:	464a      	mov	r2, r9
 80134ba:	4631      	mov	r1, r6
 80134bc:	4628      	mov	r0, r5
 80134be:	47b8      	blx	r7
 80134c0:	3001      	adds	r0, #1
 80134c2:	f43f ae38 	beq.w	8013136 <_printf_float+0xc2>
 80134c6:	f108 0801 	add.w	r8, r8, #1
 80134ca:	68e3      	ldr	r3, [r4, #12]
 80134cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80134ce:	1a5b      	subs	r3, r3, r1
 80134d0:	4543      	cmp	r3, r8
 80134d2:	dcf0      	bgt.n	80134b6 <_printf_float+0x442>
 80134d4:	e6fa      	b.n	80132cc <_printf_float+0x258>
 80134d6:	f04f 0800 	mov.w	r8, #0
 80134da:	f104 0919 	add.w	r9, r4, #25
 80134de:	e7f4      	b.n	80134ca <_printf_float+0x456>

080134e0 <_printf_common>:
 80134e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134e4:	4616      	mov	r6, r2
 80134e6:	4699      	mov	r9, r3
 80134e8:	688a      	ldr	r2, [r1, #8]
 80134ea:	690b      	ldr	r3, [r1, #16]
 80134ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80134f0:	4293      	cmp	r3, r2
 80134f2:	bfb8      	it	lt
 80134f4:	4613      	movlt	r3, r2
 80134f6:	6033      	str	r3, [r6, #0]
 80134f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80134fc:	4607      	mov	r7, r0
 80134fe:	460c      	mov	r4, r1
 8013500:	b10a      	cbz	r2, 8013506 <_printf_common+0x26>
 8013502:	3301      	adds	r3, #1
 8013504:	6033      	str	r3, [r6, #0]
 8013506:	6823      	ldr	r3, [r4, #0]
 8013508:	0699      	lsls	r1, r3, #26
 801350a:	bf42      	ittt	mi
 801350c:	6833      	ldrmi	r3, [r6, #0]
 801350e:	3302      	addmi	r3, #2
 8013510:	6033      	strmi	r3, [r6, #0]
 8013512:	6825      	ldr	r5, [r4, #0]
 8013514:	f015 0506 	ands.w	r5, r5, #6
 8013518:	d106      	bne.n	8013528 <_printf_common+0x48>
 801351a:	f104 0a19 	add.w	sl, r4, #25
 801351e:	68e3      	ldr	r3, [r4, #12]
 8013520:	6832      	ldr	r2, [r6, #0]
 8013522:	1a9b      	subs	r3, r3, r2
 8013524:	42ab      	cmp	r3, r5
 8013526:	dc26      	bgt.n	8013576 <_printf_common+0x96>
 8013528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801352c:	1e13      	subs	r3, r2, #0
 801352e:	6822      	ldr	r2, [r4, #0]
 8013530:	bf18      	it	ne
 8013532:	2301      	movne	r3, #1
 8013534:	0692      	lsls	r2, r2, #26
 8013536:	d42b      	bmi.n	8013590 <_printf_common+0xb0>
 8013538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801353c:	4649      	mov	r1, r9
 801353e:	4638      	mov	r0, r7
 8013540:	47c0      	blx	r8
 8013542:	3001      	adds	r0, #1
 8013544:	d01e      	beq.n	8013584 <_printf_common+0xa4>
 8013546:	6823      	ldr	r3, [r4, #0]
 8013548:	68e5      	ldr	r5, [r4, #12]
 801354a:	6832      	ldr	r2, [r6, #0]
 801354c:	f003 0306 	and.w	r3, r3, #6
 8013550:	2b04      	cmp	r3, #4
 8013552:	bf08      	it	eq
 8013554:	1aad      	subeq	r5, r5, r2
 8013556:	68a3      	ldr	r3, [r4, #8]
 8013558:	6922      	ldr	r2, [r4, #16]
 801355a:	bf0c      	ite	eq
 801355c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013560:	2500      	movne	r5, #0
 8013562:	4293      	cmp	r3, r2
 8013564:	bfc4      	itt	gt
 8013566:	1a9b      	subgt	r3, r3, r2
 8013568:	18ed      	addgt	r5, r5, r3
 801356a:	2600      	movs	r6, #0
 801356c:	341a      	adds	r4, #26
 801356e:	42b5      	cmp	r5, r6
 8013570:	d11a      	bne.n	80135a8 <_printf_common+0xc8>
 8013572:	2000      	movs	r0, #0
 8013574:	e008      	b.n	8013588 <_printf_common+0xa8>
 8013576:	2301      	movs	r3, #1
 8013578:	4652      	mov	r2, sl
 801357a:	4649      	mov	r1, r9
 801357c:	4638      	mov	r0, r7
 801357e:	47c0      	blx	r8
 8013580:	3001      	adds	r0, #1
 8013582:	d103      	bne.n	801358c <_printf_common+0xac>
 8013584:	f04f 30ff 	mov.w	r0, #4294967295
 8013588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801358c:	3501      	adds	r5, #1
 801358e:	e7c6      	b.n	801351e <_printf_common+0x3e>
 8013590:	18e1      	adds	r1, r4, r3
 8013592:	1c5a      	adds	r2, r3, #1
 8013594:	2030      	movs	r0, #48	; 0x30
 8013596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801359a:	4422      	add	r2, r4
 801359c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80135a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80135a4:	3302      	adds	r3, #2
 80135a6:	e7c7      	b.n	8013538 <_printf_common+0x58>
 80135a8:	2301      	movs	r3, #1
 80135aa:	4622      	mov	r2, r4
 80135ac:	4649      	mov	r1, r9
 80135ae:	4638      	mov	r0, r7
 80135b0:	47c0      	blx	r8
 80135b2:	3001      	adds	r0, #1
 80135b4:	d0e6      	beq.n	8013584 <_printf_common+0xa4>
 80135b6:	3601      	adds	r6, #1
 80135b8:	e7d9      	b.n	801356e <_printf_common+0x8e>
	...

080135bc <_printf_i>:
 80135bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80135c0:	460c      	mov	r4, r1
 80135c2:	4691      	mov	r9, r2
 80135c4:	7e27      	ldrb	r7, [r4, #24]
 80135c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80135c8:	2f78      	cmp	r7, #120	; 0x78
 80135ca:	4680      	mov	r8, r0
 80135cc:	469a      	mov	sl, r3
 80135ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80135d2:	d807      	bhi.n	80135e4 <_printf_i+0x28>
 80135d4:	2f62      	cmp	r7, #98	; 0x62
 80135d6:	d80a      	bhi.n	80135ee <_printf_i+0x32>
 80135d8:	2f00      	cmp	r7, #0
 80135da:	f000 80d8 	beq.w	801378e <_printf_i+0x1d2>
 80135de:	2f58      	cmp	r7, #88	; 0x58
 80135e0:	f000 80a3 	beq.w	801372a <_printf_i+0x16e>
 80135e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80135e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80135ec:	e03a      	b.n	8013664 <_printf_i+0xa8>
 80135ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80135f2:	2b15      	cmp	r3, #21
 80135f4:	d8f6      	bhi.n	80135e4 <_printf_i+0x28>
 80135f6:	a001      	add	r0, pc, #4	; (adr r0, 80135fc <_printf_i+0x40>)
 80135f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80135fc:	08013655 	.word	0x08013655
 8013600:	08013669 	.word	0x08013669
 8013604:	080135e5 	.word	0x080135e5
 8013608:	080135e5 	.word	0x080135e5
 801360c:	080135e5 	.word	0x080135e5
 8013610:	080135e5 	.word	0x080135e5
 8013614:	08013669 	.word	0x08013669
 8013618:	080135e5 	.word	0x080135e5
 801361c:	080135e5 	.word	0x080135e5
 8013620:	080135e5 	.word	0x080135e5
 8013624:	080135e5 	.word	0x080135e5
 8013628:	08013775 	.word	0x08013775
 801362c:	08013699 	.word	0x08013699
 8013630:	08013757 	.word	0x08013757
 8013634:	080135e5 	.word	0x080135e5
 8013638:	080135e5 	.word	0x080135e5
 801363c:	08013797 	.word	0x08013797
 8013640:	080135e5 	.word	0x080135e5
 8013644:	08013699 	.word	0x08013699
 8013648:	080135e5 	.word	0x080135e5
 801364c:	080135e5 	.word	0x080135e5
 8013650:	0801375f 	.word	0x0801375f
 8013654:	680b      	ldr	r3, [r1, #0]
 8013656:	1d1a      	adds	r2, r3, #4
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	600a      	str	r2, [r1, #0]
 801365c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013664:	2301      	movs	r3, #1
 8013666:	e0a3      	b.n	80137b0 <_printf_i+0x1f4>
 8013668:	6825      	ldr	r5, [r4, #0]
 801366a:	6808      	ldr	r0, [r1, #0]
 801366c:	062e      	lsls	r6, r5, #24
 801366e:	f100 0304 	add.w	r3, r0, #4
 8013672:	d50a      	bpl.n	801368a <_printf_i+0xce>
 8013674:	6805      	ldr	r5, [r0, #0]
 8013676:	600b      	str	r3, [r1, #0]
 8013678:	2d00      	cmp	r5, #0
 801367a:	da03      	bge.n	8013684 <_printf_i+0xc8>
 801367c:	232d      	movs	r3, #45	; 0x2d
 801367e:	426d      	negs	r5, r5
 8013680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013684:	485e      	ldr	r0, [pc, #376]	; (8013800 <_printf_i+0x244>)
 8013686:	230a      	movs	r3, #10
 8013688:	e019      	b.n	80136be <_printf_i+0x102>
 801368a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801368e:	6805      	ldr	r5, [r0, #0]
 8013690:	600b      	str	r3, [r1, #0]
 8013692:	bf18      	it	ne
 8013694:	b22d      	sxthne	r5, r5
 8013696:	e7ef      	b.n	8013678 <_printf_i+0xbc>
 8013698:	680b      	ldr	r3, [r1, #0]
 801369a:	6825      	ldr	r5, [r4, #0]
 801369c:	1d18      	adds	r0, r3, #4
 801369e:	6008      	str	r0, [r1, #0]
 80136a0:	0628      	lsls	r0, r5, #24
 80136a2:	d501      	bpl.n	80136a8 <_printf_i+0xec>
 80136a4:	681d      	ldr	r5, [r3, #0]
 80136a6:	e002      	b.n	80136ae <_printf_i+0xf2>
 80136a8:	0669      	lsls	r1, r5, #25
 80136aa:	d5fb      	bpl.n	80136a4 <_printf_i+0xe8>
 80136ac:	881d      	ldrh	r5, [r3, #0]
 80136ae:	4854      	ldr	r0, [pc, #336]	; (8013800 <_printf_i+0x244>)
 80136b0:	2f6f      	cmp	r7, #111	; 0x6f
 80136b2:	bf0c      	ite	eq
 80136b4:	2308      	moveq	r3, #8
 80136b6:	230a      	movne	r3, #10
 80136b8:	2100      	movs	r1, #0
 80136ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80136be:	6866      	ldr	r6, [r4, #4]
 80136c0:	60a6      	str	r6, [r4, #8]
 80136c2:	2e00      	cmp	r6, #0
 80136c4:	bfa2      	ittt	ge
 80136c6:	6821      	ldrge	r1, [r4, #0]
 80136c8:	f021 0104 	bicge.w	r1, r1, #4
 80136cc:	6021      	strge	r1, [r4, #0]
 80136ce:	b90d      	cbnz	r5, 80136d4 <_printf_i+0x118>
 80136d0:	2e00      	cmp	r6, #0
 80136d2:	d04d      	beq.n	8013770 <_printf_i+0x1b4>
 80136d4:	4616      	mov	r6, r2
 80136d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80136da:	fb03 5711 	mls	r7, r3, r1, r5
 80136de:	5dc7      	ldrb	r7, [r0, r7]
 80136e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80136e4:	462f      	mov	r7, r5
 80136e6:	42bb      	cmp	r3, r7
 80136e8:	460d      	mov	r5, r1
 80136ea:	d9f4      	bls.n	80136d6 <_printf_i+0x11a>
 80136ec:	2b08      	cmp	r3, #8
 80136ee:	d10b      	bne.n	8013708 <_printf_i+0x14c>
 80136f0:	6823      	ldr	r3, [r4, #0]
 80136f2:	07df      	lsls	r7, r3, #31
 80136f4:	d508      	bpl.n	8013708 <_printf_i+0x14c>
 80136f6:	6923      	ldr	r3, [r4, #16]
 80136f8:	6861      	ldr	r1, [r4, #4]
 80136fa:	4299      	cmp	r1, r3
 80136fc:	bfde      	ittt	le
 80136fe:	2330      	movle	r3, #48	; 0x30
 8013700:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013704:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013708:	1b92      	subs	r2, r2, r6
 801370a:	6122      	str	r2, [r4, #16]
 801370c:	f8cd a000 	str.w	sl, [sp]
 8013710:	464b      	mov	r3, r9
 8013712:	aa03      	add	r2, sp, #12
 8013714:	4621      	mov	r1, r4
 8013716:	4640      	mov	r0, r8
 8013718:	f7ff fee2 	bl	80134e0 <_printf_common>
 801371c:	3001      	adds	r0, #1
 801371e:	d14c      	bne.n	80137ba <_printf_i+0x1fe>
 8013720:	f04f 30ff 	mov.w	r0, #4294967295
 8013724:	b004      	add	sp, #16
 8013726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801372a:	4835      	ldr	r0, [pc, #212]	; (8013800 <_printf_i+0x244>)
 801372c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013730:	6823      	ldr	r3, [r4, #0]
 8013732:	680e      	ldr	r6, [r1, #0]
 8013734:	061f      	lsls	r7, r3, #24
 8013736:	f856 5b04 	ldr.w	r5, [r6], #4
 801373a:	600e      	str	r6, [r1, #0]
 801373c:	d514      	bpl.n	8013768 <_printf_i+0x1ac>
 801373e:	07d9      	lsls	r1, r3, #31
 8013740:	bf44      	itt	mi
 8013742:	f043 0320 	orrmi.w	r3, r3, #32
 8013746:	6023      	strmi	r3, [r4, #0]
 8013748:	b91d      	cbnz	r5, 8013752 <_printf_i+0x196>
 801374a:	6823      	ldr	r3, [r4, #0]
 801374c:	f023 0320 	bic.w	r3, r3, #32
 8013750:	6023      	str	r3, [r4, #0]
 8013752:	2310      	movs	r3, #16
 8013754:	e7b0      	b.n	80136b8 <_printf_i+0xfc>
 8013756:	6823      	ldr	r3, [r4, #0]
 8013758:	f043 0320 	orr.w	r3, r3, #32
 801375c:	6023      	str	r3, [r4, #0]
 801375e:	2378      	movs	r3, #120	; 0x78
 8013760:	4828      	ldr	r0, [pc, #160]	; (8013804 <_printf_i+0x248>)
 8013762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013766:	e7e3      	b.n	8013730 <_printf_i+0x174>
 8013768:	065e      	lsls	r6, r3, #25
 801376a:	bf48      	it	mi
 801376c:	b2ad      	uxthmi	r5, r5
 801376e:	e7e6      	b.n	801373e <_printf_i+0x182>
 8013770:	4616      	mov	r6, r2
 8013772:	e7bb      	b.n	80136ec <_printf_i+0x130>
 8013774:	680b      	ldr	r3, [r1, #0]
 8013776:	6826      	ldr	r6, [r4, #0]
 8013778:	6960      	ldr	r0, [r4, #20]
 801377a:	1d1d      	adds	r5, r3, #4
 801377c:	600d      	str	r5, [r1, #0]
 801377e:	0635      	lsls	r5, r6, #24
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	d501      	bpl.n	8013788 <_printf_i+0x1cc>
 8013784:	6018      	str	r0, [r3, #0]
 8013786:	e002      	b.n	801378e <_printf_i+0x1d2>
 8013788:	0671      	lsls	r1, r6, #25
 801378a:	d5fb      	bpl.n	8013784 <_printf_i+0x1c8>
 801378c:	8018      	strh	r0, [r3, #0]
 801378e:	2300      	movs	r3, #0
 8013790:	6123      	str	r3, [r4, #16]
 8013792:	4616      	mov	r6, r2
 8013794:	e7ba      	b.n	801370c <_printf_i+0x150>
 8013796:	680b      	ldr	r3, [r1, #0]
 8013798:	1d1a      	adds	r2, r3, #4
 801379a:	600a      	str	r2, [r1, #0]
 801379c:	681e      	ldr	r6, [r3, #0]
 801379e:	6862      	ldr	r2, [r4, #4]
 80137a0:	2100      	movs	r1, #0
 80137a2:	4630      	mov	r0, r6
 80137a4:	f7ec fd1c 	bl	80001e0 <memchr>
 80137a8:	b108      	cbz	r0, 80137ae <_printf_i+0x1f2>
 80137aa:	1b80      	subs	r0, r0, r6
 80137ac:	6060      	str	r0, [r4, #4]
 80137ae:	6863      	ldr	r3, [r4, #4]
 80137b0:	6123      	str	r3, [r4, #16]
 80137b2:	2300      	movs	r3, #0
 80137b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137b8:	e7a8      	b.n	801370c <_printf_i+0x150>
 80137ba:	6923      	ldr	r3, [r4, #16]
 80137bc:	4632      	mov	r2, r6
 80137be:	4649      	mov	r1, r9
 80137c0:	4640      	mov	r0, r8
 80137c2:	47d0      	blx	sl
 80137c4:	3001      	adds	r0, #1
 80137c6:	d0ab      	beq.n	8013720 <_printf_i+0x164>
 80137c8:	6823      	ldr	r3, [r4, #0]
 80137ca:	079b      	lsls	r3, r3, #30
 80137cc:	d413      	bmi.n	80137f6 <_printf_i+0x23a>
 80137ce:	68e0      	ldr	r0, [r4, #12]
 80137d0:	9b03      	ldr	r3, [sp, #12]
 80137d2:	4298      	cmp	r0, r3
 80137d4:	bfb8      	it	lt
 80137d6:	4618      	movlt	r0, r3
 80137d8:	e7a4      	b.n	8013724 <_printf_i+0x168>
 80137da:	2301      	movs	r3, #1
 80137dc:	4632      	mov	r2, r6
 80137de:	4649      	mov	r1, r9
 80137e0:	4640      	mov	r0, r8
 80137e2:	47d0      	blx	sl
 80137e4:	3001      	adds	r0, #1
 80137e6:	d09b      	beq.n	8013720 <_printf_i+0x164>
 80137e8:	3501      	adds	r5, #1
 80137ea:	68e3      	ldr	r3, [r4, #12]
 80137ec:	9903      	ldr	r1, [sp, #12]
 80137ee:	1a5b      	subs	r3, r3, r1
 80137f0:	42ab      	cmp	r3, r5
 80137f2:	dcf2      	bgt.n	80137da <_printf_i+0x21e>
 80137f4:	e7eb      	b.n	80137ce <_printf_i+0x212>
 80137f6:	2500      	movs	r5, #0
 80137f8:	f104 0619 	add.w	r6, r4, #25
 80137fc:	e7f5      	b.n	80137ea <_printf_i+0x22e>
 80137fe:	bf00      	nop
 8013800:	0801659e 	.word	0x0801659e
 8013804:	080165af 	.word	0x080165af

08013808 <iprintf>:
 8013808:	b40f      	push	{r0, r1, r2, r3}
 801380a:	4b0a      	ldr	r3, [pc, #40]	; (8013834 <iprintf+0x2c>)
 801380c:	b513      	push	{r0, r1, r4, lr}
 801380e:	681c      	ldr	r4, [r3, #0]
 8013810:	b124      	cbz	r4, 801381c <iprintf+0x14>
 8013812:	69a3      	ldr	r3, [r4, #24]
 8013814:	b913      	cbnz	r3, 801381c <iprintf+0x14>
 8013816:	4620      	mov	r0, r4
 8013818:	f7ff fa56 	bl	8012cc8 <__sinit>
 801381c:	ab05      	add	r3, sp, #20
 801381e:	9a04      	ldr	r2, [sp, #16]
 8013820:	68a1      	ldr	r1, [r4, #8]
 8013822:	9301      	str	r3, [sp, #4]
 8013824:	4620      	mov	r0, r4
 8013826:	f001 fe65 	bl	80154f4 <_vfiprintf_r>
 801382a:	b002      	add	sp, #8
 801382c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013830:	b004      	add	sp, #16
 8013832:	4770      	bx	lr
 8013834:	20000510 	.word	0x20000510

08013838 <_puts_r>:
 8013838:	b570      	push	{r4, r5, r6, lr}
 801383a:	460e      	mov	r6, r1
 801383c:	4605      	mov	r5, r0
 801383e:	b118      	cbz	r0, 8013848 <_puts_r+0x10>
 8013840:	6983      	ldr	r3, [r0, #24]
 8013842:	b90b      	cbnz	r3, 8013848 <_puts_r+0x10>
 8013844:	f7ff fa40 	bl	8012cc8 <__sinit>
 8013848:	69ab      	ldr	r3, [r5, #24]
 801384a:	68ac      	ldr	r4, [r5, #8]
 801384c:	b913      	cbnz	r3, 8013854 <_puts_r+0x1c>
 801384e:	4628      	mov	r0, r5
 8013850:	f7ff fa3a 	bl	8012cc8 <__sinit>
 8013854:	4b2c      	ldr	r3, [pc, #176]	; (8013908 <_puts_r+0xd0>)
 8013856:	429c      	cmp	r4, r3
 8013858:	d120      	bne.n	801389c <_puts_r+0x64>
 801385a:	686c      	ldr	r4, [r5, #4]
 801385c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801385e:	07db      	lsls	r3, r3, #31
 8013860:	d405      	bmi.n	801386e <_puts_r+0x36>
 8013862:	89a3      	ldrh	r3, [r4, #12]
 8013864:	0598      	lsls	r0, r3, #22
 8013866:	d402      	bmi.n	801386e <_puts_r+0x36>
 8013868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801386a:	f7ff faf0 	bl	8012e4e <__retarget_lock_acquire_recursive>
 801386e:	89a3      	ldrh	r3, [r4, #12]
 8013870:	0719      	lsls	r1, r3, #28
 8013872:	d51d      	bpl.n	80138b0 <_puts_r+0x78>
 8013874:	6923      	ldr	r3, [r4, #16]
 8013876:	b1db      	cbz	r3, 80138b0 <_puts_r+0x78>
 8013878:	3e01      	subs	r6, #1
 801387a:	68a3      	ldr	r3, [r4, #8]
 801387c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013880:	3b01      	subs	r3, #1
 8013882:	60a3      	str	r3, [r4, #8]
 8013884:	bb39      	cbnz	r1, 80138d6 <_puts_r+0x9e>
 8013886:	2b00      	cmp	r3, #0
 8013888:	da38      	bge.n	80138fc <_puts_r+0xc4>
 801388a:	4622      	mov	r2, r4
 801388c:	210a      	movs	r1, #10
 801388e:	4628      	mov	r0, r5
 8013890:	f000 f94e 	bl	8013b30 <__swbuf_r>
 8013894:	3001      	adds	r0, #1
 8013896:	d011      	beq.n	80138bc <_puts_r+0x84>
 8013898:	250a      	movs	r5, #10
 801389a:	e011      	b.n	80138c0 <_puts_r+0x88>
 801389c:	4b1b      	ldr	r3, [pc, #108]	; (801390c <_puts_r+0xd4>)
 801389e:	429c      	cmp	r4, r3
 80138a0:	d101      	bne.n	80138a6 <_puts_r+0x6e>
 80138a2:	68ac      	ldr	r4, [r5, #8]
 80138a4:	e7da      	b.n	801385c <_puts_r+0x24>
 80138a6:	4b1a      	ldr	r3, [pc, #104]	; (8013910 <_puts_r+0xd8>)
 80138a8:	429c      	cmp	r4, r3
 80138aa:	bf08      	it	eq
 80138ac:	68ec      	ldreq	r4, [r5, #12]
 80138ae:	e7d5      	b.n	801385c <_puts_r+0x24>
 80138b0:	4621      	mov	r1, r4
 80138b2:	4628      	mov	r0, r5
 80138b4:	f000 f9a0 	bl	8013bf8 <__swsetup_r>
 80138b8:	2800      	cmp	r0, #0
 80138ba:	d0dd      	beq.n	8013878 <_puts_r+0x40>
 80138bc:	f04f 35ff 	mov.w	r5, #4294967295
 80138c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80138c2:	07da      	lsls	r2, r3, #31
 80138c4:	d405      	bmi.n	80138d2 <_puts_r+0x9a>
 80138c6:	89a3      	ldrh	r3, [r4, #12]
 80138c8:	059b      	lsls	r3, r3, #22
 80138ca:	d402      	bmi.n	80138d2 <_puts_r+0x9a>
 80138cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138ce:	f7ff fabf 	bl	8012e50 <__retarget_lock_release_recursive>
 80138d2:	4628      	mov	r0, r5
 80138d4:	bd70      	pop	{r4, r5, r6, pc}
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	da04      	bge.n	80138e4 <_puts_r+0xac>
 80138da:	69a2      	ldr	r2, [r4, #24]
 80138dc:	429a      	cmp	r2, r3
 80138de:	dc06      	bgt.n	80138ee <_puts_r+0xb6>
 80138e0:	290a      	cmp	r1, #10
 80138e2:	d004      	beq.n	80138ee <_puts_r+0xb6>
 80138e4:	6823      	ldr	r3, [r4, #0]
 80138e6:	1c5a      	adds	r2, r3, #1
 80138e8:	6022      	str	r2, [r4, #0]
 80138ea:	7019      	strb	r1, [r3, #0]
 80138ec:	e7c5      	b.n	801387a <_puts_r+0x42>
 80138ee:	4622      	mov	r2, r4
 80138f0:	4628      	mov	r0, r5
 80138f2:	f000 f91d 	bl	8013b30 <__swbuf_r>
 80138f6:	3001      	adds	r0, #1
 80138f8:	d1bf      	bne.n	801387a <_puts_r+0x42>
 80138fa:	e7df      	b.n	80138bc <_puts_r+0x84>
 80138fc:	6823      	ldr	r3, [r4, #0]
 80138fe:	250a      	movs	r5, #10
 8013900:	1c5a      	adds	r2, r3, #1
 8013902:	6022      	str	r2, [r4, #0]
 8013904:	701d      	strb	r5, [r3, #0]
 8013906:	e7db      	b.n	80138c0 <_puts_r+0x88>
 8013908:	08016548 	.word	0x08016548
 801390c:	08016568 	.word	0x08016568
 8013910:	08016528 	.word	0x08016528

08013914 <puts>:
 8013914:	4b02      	ldr	r3, [pc, #8]	; (8013920 <puts+0xc>)
 8013916:	4601      	mov	r1, r0
 8013918:	6818      	ldr	r0, [r3, #0]
 801391a:	f7ff bf8d 	b.w	8013838 <_puts_r>
 801391e:	bf00      	nop
 8013920:	20000510 	.word	0x20000510

08013924 <rand>:
 8013924:	4b17      	ldr	r3, [pc, #92]	; (8013984 <rand+0x60>)
 8013926:	b510      	push	{r4, lr}
 8013928:	681c      	ldr	r4, [r3, #0]
 801392a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801392c:	b9b3      	cbnz	r3, 801395c <rand+0x38>
 801392e:	2018      	movs	r0, #24
 8013930:	f001 f9c4 	bl	8014cbc <malloc>
 8013934:	63a0      	str	r0, [r4, #56]	; 0x38
 8013936:	b928      	cbnz	r0, 8013944 <rand+0x20>
 8013938:	4602      	mov	r2, r0
 801393a:	4b13      	ldr	r3, [pc, #76]	; (8013988 <rand+0x64>)
 801393c:	4813      	ldr	r0, [pc, #76]	; (801398c <rand+0x68>)
 801393e:	214e      	movs	r1, #78	; 0x4e
 8013940:	f000 f9c8 	bl	8013cd4 <__assert_func>
 8013944:	4a12      	ldr	r2, [pc, #72]	; (8013990 <rand+0x6c>)
 8013946:	4b13      	ldr	r3, [pc, #76]	; (8013994 <rand+0x70>)
 8013948:	e9c0 2300 	strd	r2, r3, [r0]
 801394c:	4b12      	ldr	r3, [pc, #72]	; (8013998 <rand+0x74>)
 801394e:	6083      	str	r3, [r0, #8]
 8013950:	230b      	movs	r3, #11
 8013952:	8183      	strh	r3, [r0, #12]
 8013954:	2201      	movs	r2, #1
 8013956:	2300      	movs	r3, #0
 8013958:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801395c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801395e:	480f      	ldr	r0, [pc, #60]	; (801399c <rand+0x78>)
 8013960:	690a      	ldr	r2, [r1, #16]
 8013962:	694b      	ldr	r3, [r1, #20]
 8013964:	4c0e      	ldr	r4, [pc, #56]	; (80139a0 <rand+0x7c>)
 8013966:	4350      	muls	r0, r2
 8013968:	fb04 0003 	mla	r0, r4, r3, r0
 801396c:	fba2 3404 	umull	r3, r4, r2, r4
 8013970:	1c5a      	adds	r2, r3, #1
 8013972:	4404      	add	r4, r0
 8013974:	f144 0000 	adc.w	r0, r4, #0
 8013978:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801397c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013980:	bd10      	pop	{r4, pc}
 8013982:	bf00      	nop
 8013984:	20000510 	.word	0x20000510
 8013988:	080165c0 	.word	0x080165c0
 801398c:	080165d7 	.word	0x080165d7
 8013990:	abcd330e 	.word	0xabcd330e
 8013994:	e66d1234 	.word	0xe66d1234
 8013998:	0005deec 	.word	0x0005deec
 801399c:	5851f42d 	.word	0x5851f42d
 80139a0:	4c957f2d 	.word	0x4c957f2d

080139a4 <cleanup_glue>:
 80139a4:	b538      	push	{r3, r4, r5, lr}
 80139a6:	460c      	mov	r4, r1
 80139a8:	6809      	ldr	r1, [r1, #0]
 80139aa:	4605      	mov	r5, r0
 80139ac:	b109      	cbz	r1, 80139b2 <cleanup_glue+0xe>
 80139ae:	f7ff fff9 	bl	80139a4 <cleanup_glue>
 80139b2:	4621      	mov	r1, r4
 80139b4:	4628      	mov	r0, r5
 80139b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139ba:	f001 bd21 	b.w	8015400 <_free_r>
	...

080139c0 <_reclaim_reent>:
 80139c0:	4b2c      	ldr	r3, [pc, #176]	; (8013a74 <_reclaim_reent+0xb4>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	4283      	cmp	r3, r0
 80139c6:	b570      	push	{r4, r5, r6, lr}
 80139c8:	4604      	mov	r4, r0
 80139ca:	d051      	beq.n	8013a70 <_reclaim_reent+0xb0>
 80139cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80139ce:	b143      	cbz	r3, 80139e2 <_reclaim_reent+0x22>
 80139d0:	68db      	ldr	r3, [r3, #12]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d14a      	bne.n	8013a6c <_reclaim_reent+0xac>
 80139d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139d8:	6819      	ldr	r1, [r3, #0]
 80139da:	b111      	cbz	r1, 80139e2 <_reclaim_reent+0x22>
 80139dc:	4620      	mov	r0, r4
 80139de:	f001 fd0f 	bl	8015400 <_free_r>
 80139e2:	6961      	ldr	r1, [r4, #20]
 80139e4:	b111      	cbz	r1, 80139ec <_reclaim_reent+0x2c>
 80139e6:	4620      	mov	r0, r4
 80139e8:	f001 fd0a 	bl	8015400 <_free_r>
 80139ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80139ee:	b111      	cbz	r1, 80139f6 <_reclaim_reent+0x36>
 80139f0:	4620      	mov	r0, r4
 80139f2:	f001 fd05 	bl	8015400 <_free_r>
 80139f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80139f8:	b111      	cbz	r1, 8013a00 <_reclaim_reent+0x40>
 80139fa:	4620      	mov	r0, r4
 80139fc:	f001 fd00 	bl	8015400 <_free_r>
 8013a00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013a02:	b111      	cbz	r1, 8013a0a <_reclaim_reent+0x4a>
 8013a04:	4620      	mov	r0, r4
 8013a06:	f001 fcfb 	bl	8015400 <_free_r>
 8013a0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013a0c:	b111      	cbz	r1, 8013a14 <_reclaim_reent+0x54>
 8013a0e:	4620      	mov	r0, r4
 8013a10:	f001 fcf6 	bl	8015400 <_free_r>
 8013a14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013a16:	b111      	cbz	r1, 8013a1e <_reclaim_reent+0x5e>
 8013a18:	4620      	mov	r0, r4
 8013a1a:	f001 fcf1 	bl	8015400 <_free_r>
 8013a1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013a20:	b111      	cbz	r1, 8013a28 <_reclaim_reent+0x68>
 8013a22:	4620      	mov	r0, r4
 8013a24:	f001 fcec 	bl	8015400 <_free_r>
 8013a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a2a:	b111      	cbz	r1, 8013a32 <_reclaim_reent+0x72>
 8013a2c:	4620      	mov	r0, r4
 8013a2e:	f001 fce7 	bl	8015400 <_free_r>
 8013a32:	69a3      	ldr	r3, [r4, #24]
 8013a34:	b1e3      	cbz	r3, 8013a70 <_reclaim_reent+0xb0>
 8013a36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013a38:	4620      	mov	r0, r4
 8013a3a:	4798      	blx	r3
 8013a3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013a3e:	b1b9      	cbz	r1, 8013a70 <_reclaim_reent+0xb0>
 8013a40:	4620      	mov	r0, r4
 8013a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a46:	f7ff bfad 	b.w	80139a4 <cleanup_glue>
 8013a4a:	5949      	ldr	r1, [r1, r5]
 8013a4c:	b941      	cbnz	r1, 8013a60 <_reclaim_reent+0xa0>
 8013a4e:	3504      	adds	r5, #4
 8013a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a52:	2d80      	cmp	r5, #128	; 0x80
 8013a54:	68d9      	ldr	r1, [r3, #12]
 8013a56:	d1f8      	bne.n	8013a4a <_reclaim_reent+0x8a>
 8013a58:	4620      	mov	r0, r4
 8013a5a:	f001 fcd1 	bl	8015400 <_free_r>
 8013a5e:	e7ba      	b.n	80139d6 <_reclaim_reent+0x16>
 8013a60:	680e      	ldr	r6, [r1, #0]
 8013a62:	4620      	mov	r0, r4
 8013a64:	f001 fccc 	bl	8015400 <_free_r>
 8013a68:	4631      	mov	r1, r6
 8013a6a:	e7ef      	b.n	8013a4c <_reclaim_reent+0x8c>
 8013a6c:	2500      	movs	r5, #0
 8013a6e:	e7ef      	b.n	8013a50 <_reclaim_reent+0x90>
 8013a70:	bd70      	pop	{r4, r5, r6, pc}
 8013a72:	bf00      	nop
 8013a74:	20000510 	.word	0x20000510

08013a78 <_sbrk_r>:
 8013a78:	b538      	push	{r3, r4, r5, lr}
 8013a7a:	4d06      	ldr	r5, [pc, #24]	; (8013a94 <_sbrk_r+0x1c>)
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	4604      	mov	r4, r0
 8013a80:	4608      	mov	r0, r1
 8013a82:	602b      	str	r3, [r5, #0]
 8013a84:	f7ee fd48 	bl	8002518 <_sbrk>
 8013a88:	1c43      	adds	r3, r0, #1
 8013a8a:	d102      	bne.n	8013a92 <_sbrk_r+0x1a>
 8013a8c:	682b      	ldr	r3, [r5, #0]
 8013a8e:	b103      	cbz	r3, 8013a92 <_sbrk_r+0x1a>
 8013a90:	6023      	str	r3, [r4, #0]
 8013a92:	bd38      	pop	{r3, r4, r5, pc}
 8013a94:	20004f88 	.word	0x20004f88

08013a98 <__sread>:
 8013a98:	b510      	push	{r4, lr}
 8013a9a:	460c      	mov	r4, r1
 8013a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aa0:	f001 fe58 	bl	8015754 <_read_r>
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	bfab      	itete	ge
 8013aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8013aac:	181b      	addge	r3, r3, r0
 8013aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013ab2:	bfac      	ite	ge
 8013ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8013ab6:	81a3      	strhlt	r3, [r4, #12]
 8013ab8:	bd10      	pop	{r4, pc}

08013aba <__swrite>:
 8013aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013abe:	461f      	mov	r7, r3
 8013ac0:	898b      	ldrh	r3, [r1, #12]
 8013ac2:	05db      	lsls	r3, r3, #23
 8013ac4:	4605      	mov	r5, r0
 8013ac6:	460c      	mov	r4, r1
 8013ac8:	4616      	mov	r6, r2
 8013aca:	d505      	bpl.n	8013ad8 <__swrite+0x1e>
 8013acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ad0:	2302      	movs	r3, #2
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f001 f87c 	bl	8014bd0 <_lseek_r>
 8013ad8:	89a3      	ldrh	r3, [r4, #12]
 8013ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ae2:	81a3      	strh	r3, [r4, #12]
 8013ae4:	4632      	mov	r2, r6
 8013ae6:	463b      	mov	r3, r7
 8013ae8:	4628      	mov	r0, r5
 8013aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aee:	f000 b871 	b.w	8013bd4 <_write_r>

08013af2 <__sseek>:
 8013af2:	b510      	push	{r4, lr}
 8013af4:	460c      	mov	r4, r1
 8013af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013afa:	f001 f869 	bl	8014bd0 <_lseek_r>
 8013afe:	1c43      	adds	r3, r0, #1
 8013b00:	89a3      	ldrh	r3, [r4, #12]
 8013b02:	bf15      	itete	ne
 8013b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b0e:	81a3      	strheq	r3, [r4, #12]
 8013b10:	bf18      	it	ne
 8013b12:	81a3      	strhne	r3, [r4, #12]
 8013b14:	bd10      	pop	{r4, pc}

08013b16 <__sclose>:
 8013b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b1a:	f000 b8f9 	b.w	8013d10 <_close_r>

08013b1e <strcpy>:
 8013b1e:	4603      	mov	r3, r0
 8013b20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b24:	f803 2b01 	strb.w	r2, [r3], #1
 8013b28:	2a00      	cmp	r2, #0
 8013b2a:	d1f9      	bne.n	8013b20 <strcpy+0x2>
 8013b2c:	4770      	bx	lr
	...

08013b30 <__swbuf_r>:
 8013b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b32:	460e      	mov	r6, r1
 8013b34:	4614      	mov	r4, r2
 8013b36:	4605      	mov	r5, r0
 8013b38:	b118      	cbz	r0, 8013b42 <__swbuf_r+0x12>
 8013b3a:	6983      	ldr	r3, [r0, #24]
 8013b3c:	b90b      	cbnz	r3, 8013b42 <__swbuf_r+0x12>
 8013b3e:	f7ff f8c3 	bl	8012cc8 <__sinit>
 8013b42:	4b21      	ldr	r3, [pc, #132]	; (8013bc8 <__swbuf_r+0x98>)
 8013b44:	429c      	cmp	r4, r3
 8013b46:	d12b      	bne.n	8013ba0 <__swbuf_r+0x70>
 8013b48:	686c      	ldr	r4, [r5, #4]
 8013b4a:	69a3      	ldr	r3, [r4, #24]
 8013b4c:	60a3      	str	r3, [r4, #8]
 8013b4e:	89a3      	ldrh	r3, [r4, #12]
 8013b50:	071a      	lsls	r2, r3, #28
 8013b52:	d52f      	bpl.n	8013bb4 <__swbuf_r+0x84>
 8013b54:	6923      	ldr	r3, [r4, #16]
 8013b56:	b36b      	cbz	r3, 8013bb4 <__swbuf_r+0x84>
 8013b58:	6923      	ldr	r3, [r4, #16]
 8013b5a:	6820      	ldr	r0, [r4, #0]
 8013b5c:	1ac0      	subs	r0, r0, r3
 8013b5e:	6963      	ldr	r3, [r4, #20]
 8013b60:	b2f6      	uxtb	r6, r6
 8013b62:	4283      	cmp	r3, r0
 8013b64:	4637      	mov	r7, r6
 8013b66:	dc04      	bgt.n	8013b72 <__swbuf_r+0x42>
 8013b68:	4621      	mov	r1, r4
 8013b6a:	4628      	mov	r0, r5
 8013b6c:	f000 ffde 	bl	8014b2c <_fflush_r>
 8013b70:	bb30      	cbnz	r0, 8013bc0 <__swbuf_r+0x90>
 8013b72:	68a3      	ldr	r3, [r4, #8]
 8013b74:	3b01      	subs	r3, #1
 8013b76:	60a3      	str	r3, [r4, #8]
 8013b78:	6823      	ldr	r3, [r4, #0]
 8013b7a:	1c5a      	adds	r2, r3, #1
 8013b7c:	6022      	str	r2, [r4, #0]
 8013b7e:	701e      	strb	r6, [r3, #0]
 8013b80:	6963      	ldr	r3, [r4, #20]
 8013b82:	3001      	adds	r0, #1
 8013b84:	4283      	cmp	r3, r0
 8013b86:	d004      	beq.n	8013b92 <__swbuf_r+0x62>
 8013b88:	89a3      	ldrh	r3, [r4, #12]
 8013b8a:	07db      	lsls	r3, r3, #31
 8013b8c:	d506      	bpl.n	8013b9c <__swbuf_r+0x6c>
 8013b8e:	2e0a      	cmp	r6, #10
 8013b90:	d104      	bne.n	8013b9c <__swbuf_r+0x6c>
 8013b92:	4621      	mov	r1, r4
 8013b94:	4628      	mov	r0, r5
 8013b96:	f000 ffc9 	bl	8014b2c <_fflush_r>
 8013b9a:	b988      	cbnz	r0, 8013bc0 <__swbuf_r+0x90>
 8013b9c:	4638      	mov	r0, r7
 8013b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ba0:	4b0a      	ldr	r3, [pc, #40]	; (8013bcc <__swbuf_r+0x9c>)
 8013ba2:	429c      	cmp	r4, r3
 8013ba4:	d101      	bne.n	8013baa <__swbuf_r+0x7a>
 8013ba6:	68ac      	ldr	r4, [r5, #8]
 8013ba8:	e7cf      	b.n	8013b4a <__swbuf_r+0x1a>
 8013baa:	4b09      	ldr	r3, [pc, #36]	; (8013bd0 <__swbuf_r+0xa0>)
 8013bac:	429c      	cmp	r4, r3
 8013bae:	bf08      	it	eq
 8013bb0:	68ec      	ldreq	r4, [r5, #12]
 8013bb2:	e7ca      	b.n	8013b4a <__swbuf_r+0x1a>
 8013bb4:	4621      	mov	r1, r4
 8013bb6:	4628      	mov	r0, r5
 8013bb8:	f000 f81e 	bl	8013bf8 <__swsetup_r>
 8013bbc:	2800      	cmp	r0, #0
 8013bbe:	d0cb      	beq.n	8013b58 <__swbuf_r+0x28>
 8013bc0:	f04f 37ff 	mov.w	r7, #4294967295
 8013bc4:	e7ea      	b.n	8013b9c <__swbuf_r+0x6c>
 8013bc6:	bf00      	nop
 8013bc8:	08016548 	.word	0x08016548
 8013bcc:	08016568 	.word	0x08016568
 8013bd0:	08016528 	.word	0x08016528

08013bd4 <_write_r>:
 8013bd4:	b538      	push	{r3, r4, r5, lr}
 8013bd6:	4d07      	ldr	r5, [pc, #28]	; (8013bf4 <_write_r+0x20>)
 8013bd8:	4604      	mov	r4, r0
 8013bda:	4608      	mov	r0, r1
 8013bdc:	4611      	mov	r1, r2
 8013bde:	2200      	movs	r2, #0
 8013be0:	602a      	str	r2, [r5, #0]
 8013be2:	461a      	mov	r2, r3
 8013be4:	f7ed f976 	bl	8000ed4 <_write>
 8013be8:	1c43      	adds	r3, r0, #1
 8013bea:	d102      	bne.n	8013bf2 <_write_r+0x1e>
 8013bec:	682b      	ldr	r3, [r5, #0]
 8013bee:	b103      	cbz	r3, 8013bf2 <_write_r+0x1e>
 8013bf0:	6023      	str	r3, [r4, #0]
 8013bf2:	bd38      	pop	{r3, r4, r5, pc}
 8013bf4:	20004f88 	.word	0x20004f88

08013bf8 <__swsetup_r>:
 8013bf8:	4b32      	ldr	r3, [pc, #200]	; (8013cc4 <__swsetup_r+0xcc>)
 8013bfa:	b570      	push	{r4, r5, r6, lr}
 8013bfc:	681d      	ldr	r5, [r3, #0]
 8013bfe:	4606      	mov	r6, r0
 8013c00:	460c      	mov	r4, r1
 8013c02:	b125      	cbz	r5, 8013c0e <__swsetup_r+0x16>
 8013c04:	69ab      	ldr	r3, [r5, #24]
 8013c06:	b913      	cbnz	r3, 8013c0e <__swsetup_r+0x16>
 8013c08:	4628      	mov	r0, r5
 8013c0a:	f7ff f85d 	bl	8012cc8 <__sinit>
 8013c0e:	4b2e      	ldr	r3, [pc, #184]	; (8013cc8 <__swsetup_r+0xd0>)
 8013c10:	429c      	cmp	r4, r3
 8013c12:	d10f      	bne.n	8013c34 <__swsetup_r+0x3c>
 8013c14:	686c      	ldr	r4, [r5, #4]
 8013c16:	89a3      	ldrh	r3, [r4, #12]
 8013c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c1c:	0719      	lsls	r1, r3, #28
 8013c1e:	d42c      	bmi.n	8013c7a <__swsetup_r+0x82>
 8013c20:	06dd      	lsls	r5, r3, #27
 8013c22:	d411      	bmi.n	8013c48 <__swsetup_r+0x50>
 8013c24:	2309      	movs	r3, #9
 8013c26:	6033      	str	r3, [r6, #0]
 8013c28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c2c:	81a3      	strh	r3, [r4, #12]
 8013c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c32:	e03e      	b.n	8013cb2 <__swsetup_r+0xba>
 8013c34:	4b25      	ldr	r3, [pc, #148]	; (8013ccc <__swsetup_r+0xd4>)
 8013c36:	429c      	cmp	r4, r3
 8013c38:	d101      	bne.n	8013c3e <__swsetup_r+0x46>
 8013c3a:	68ac      	ldr	r4, [r5, #8]
 8013c3c:	e7eb      	b.n	8013c16 <__swsetup_r+0x1e>
 8013c3e:	4b24      	ldr	r3, [pc, #144]	; (8013cd0 <__swsetup_r+0xd8>)
 8013c40:	429c      	cmp	r4, r3
 8013c42:	bf08      	it	eq
 8013c44:	68ec      	ldreq	r4, [r5, #12]
 8013c46:	e7e6      	b.n	8013c16 <__swsetup_r+0x1e>
 8013c48:	0758      	lsls	r0, r3, #29
 8013c4a:	d512      	bpl.n	8013c72 <__swsetup_r+0x7a>
 8013c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c4e:	b141      	cbz	r1, 8013c62 <__swsetup_r+0x6a>
 8013c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c54:	4299      	cmp	r1, r3
 8013c56:	d002      	beq.n	8013c5e <__swsetup_r+0x66>
 8013c58:	4630      	mov	r0, r6
 8013c5a:	f001 fbd1 	bl	8015400 <_free_r>
 8013c5e:	2300      	movs	r3, #0
 8013c60:	6363      	str	r3, [r4, #52]	; 0x34
 8013c62:	89a3      	ldrh	r3, [r4, #12]
 8013c64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c68:	81a3      	strh	r3, [r4, #12]
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	6063      	str	r3, [r4, #4]
 8013c6e:	6923      	ldr	r3, [r4, #16]
 8013c70:	6023      	str	r3, [r4, #0]
 8013c72:	89a3      	ldrh	r3, [r4, #12]
 8013c74:	f043 0308 	orr.w	r3, r3, #8
 8013c78:	81a3      	strh	r3, [r4, #12]
 8013c7a:	6923      	ldr	r3, [r4, #16]
 8013c7c:	b94b      	cbnz	r3, 8013c92 <__swsetup_r+0x9a>
 8013c7e:	89a3      	ldrh	r3, [r4, #12]
 8013c80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c88:	d003      	beq.n	8013c92 <__swsetup_r+0x9a>
 8013c8a:	4621      	mov	r1, r4
 8013c8c:	4630      	mov	r0, r6
 8013c8e:	f000 ffd5 	bl	8014c3c <__smakebuf_r>
 8013c92:	89a0      	ldrh	r0, [r4, #12]
 8013c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c98:	f010 0301 	ands.w	r3, r0, #1
 8013c9c:	d00a      	beq.n	8013cb4 <__swsetup_r+0xbc>
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	60a3      	str	r3, [r4, #8]
 8013ca2:	6963      	ldr	r3, [r4, #20]
 8013ca4:	425b      	negs	r3, r3
 8013ca6:	61a3      	str	r3, [r4, #24]
 8013ca8:	6923      	ldr	r3, [r4, #16]
 8013caa:	b943      	cbnz	r3, 8013cbe <__swsetup_r+0xc6>
 8013cac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013cb0:	d1ba      	bne.n	8013c28 <__swsetup_r+0x30>
 8013cb2:	bd70      	pop	{r4, r5, r6, pc}
 8013cb4:	0781      	lsls	r1, r0, #30
 8013cb6:	bf58      	it	pl
 8013cb8:	6963      	ldrpl	r3, [r4, #20]
 8013cba:	60a3      	str	r3, [r4, #8]
 8013cbc:	e7f4      	b.n	8013ca8 <__swsetup_r+0xb0>
 8013cbe:	2000      	movs	r0, #0
 8013cc0:	e7f7      	b.n	8013cb2 <__swsetup_r+0xba>
 8013cc2:	bf00      	nop
 8013cc4:	20000510 	.word	0x20000510
 8013cc8:	08016548 	.word	0x08016548
 8013ccc:	08016568 	.word	0x08016568
 8013cd0:	08016528 	.word	0x08016528

08013cd4 <__assert_func>:
 8013cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013cd6:	4614      	mov	r4, r2
 8013cd8:	461a      	mov	r2, r3
 8013cda:	4b09      	ldr	r3, [pc, #36]	; (8013d00 <__assert_func+0x2c>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	4605      	mov	r5, r0
 8013ce0:	68d8      	ldr	r0, [r3, #12]
 8013ce2:	b14c      	cbz	r4, 8013cf8 <__assert_func+0x24>
 8013ce4:	4b07      	ldr	r3, [pc, #28]	; (8013d04 <__assert_func+0x30>)
 8013ce6:	9100      	str	r1, [sp, #0]
 8013ce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013cec:	4906      	ldr	r1, [pc, #24]	; (8013d08 <__assert_func+0x34>)
 8013cee:	462b      	mov	r3, r5
 8013cf0:	f000 ff58 	bl	8014ba4 <fiprintf>
 8013cf4:	f001 fd40 	bl	8015778 <abort>
 8013cf8:	4b04      	ldr	r3, [pc, #16]	; (8013d0c <__assert_func+0x38>)
 8013cfa:	461c      	mov	r4, r3
 8013cfc:	e7f3      	b.n	8013ce6 <__assert_func+0x12>
 8013cfe:	bf00      	nop
 8013d00:	20000510 	.word	0x20000510
 8013d04:	08016636 	.word	0x08016636
 8013d08:	08016643 	.word	0x08016643
 8013d0c:	08016671 	.word	0x08016671

08013d10 <_close_r>:
 8013d10:	b538      	push	{r3, r4, r5, lr}
 8013d12:	4d06      	ldr	r5, [pc, #24]	; (8013d2c <_close_r+0x1c>)
 8013d14:	2300      	movs	r3, #0
 8013d16:	4604      	mov	r4, r0
 8013d18:	4608      	mov	r0, r1
 8013d1a:	602b      	str	r3, [r5, #0]
 8013d1c:	f7ee fbc7 	bl	80024ae <_close>
 8013d20:	1c43      	adds	r3, r0, #1
 8013d22:	d102      	bne.n	8013d2a <_close_r+0x1a>
 8013d24:	682b      	ldr	r3, [r5, #0]
 8013d26:	b103      	cbz	r3, 8013d2a <_close_r+0x1a>
 8013d28:	6023      	str	r3, [r4, #0]
 8013d2a:	bd38      	pop	{r3, r4, r5, pc}
 8013d2c:	20004f88 	.word	0x20004f88

08013d30 <quorem>:
 8013d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d34:	6903      	ldr	r3, [r0, #16]
 8013d36:	690c      	ldr	r4, [r1, #16]
 8013d38:	42a3      	cmp	r3, r4
 8013d3a:	4607      	mov	r7, r0
 8013d3c:	f2c0 8081 	blt.w	8013e42 <quorem+0x112>
 8013d40:	3c01      	subs	r4, #1
 8013d42:	f101 0814 	add.w	r8, r1, #20
 8013d46:	f100 0514 	add.w	r5, r0, #20
 8013d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013d4e:	9301      	str	r3, [sp, #4]
 8013d50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013d54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013d58:	3301      	adds	r3, #1
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013d60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013d64:	fbb2 f6f3 	udiv	r6, r2, r3
 8013d68:	d331      	bcc.n	8013dce <quorem+0x9e>
 8013d6a:	f04f 0e00 	mov.w	lr, #0
 8013d6e:	4640      	mov	r0, r8
 8013d70:	46ac      	mov	ip, r5
 8013d72:	46f2      	mov	sl, lr
 8013d74:	f850 2b04 	ldr.w	r2, [r0], #4
 8013d78:	b293      	uxth	r3, r2
 8013d7a:	fb06 e303 	mla	r3, r6, r3, lr
 8013d7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	ebaa 0303 	sub.w	r3, sl, r3
 8013d88:	0c12      	lsrs	r2, r2, #16
 8013d8a:	f8dc a000 	ldr.w	sl, [ip]
 8013d8e:	fb06 e202 	mla	r2, r6, r2, lr
 8013d92:	fa13 f38a 	uxtah	r3, r3, sl
 8013d96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013d9a:	fa1f fa82 	uxth.w	sl, r2
 8013d9e:	f8dc 2000 	ldr.w	r2, [ip]
 8013da2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013da6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013db0:	4581      	cmp	r9, r0
 8013db2:	f84c 3b04 	str.w	r3, [ip], #4
 8013db6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013dba:	d2db      	bcs.n	8013d74 <quorem+0x44>
 8013dbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8013dc0:	b92b      	cbnz	r3, 8013dce <quorem+0x9e>
 8013dc2:	9b01      	ldr	r3, [sp, #4]
 8013dc4:	3b04      	subs	r3, #4
 8013dc6:	429d      	cmp	r5, r3
 8013dc8:	461a      	mov	r2, r3
 8013dca:	d32e      	bcc.n	8013e2a <quorem+0xfa>
 8013dcc:	613c      	str	r4, [r7, #16]
 8013dce:	4638      	mov	r0, r7
 8013dd0:	f001 fa06 	bl	80151e0 <__mcmp>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	db24      	blt.n	8013e22 <quorem+0xf2>
 8013dd8:	3601      	adds	r6, #1
 8013dda:	4628      	mov	r0, r5
 8013ddc:	f04f 0c00 	mov.w	ip, #0
 8013de0:	f858 2b04 	ldr.w	r2, [r8], #4
 8013de4:	f8d0 e000 	ldr.w	lr, [r0]
 8013de8:	b293      	uxth	r3, r2
 8013dea:	ebac 0303 	sub.w	r3, ip, r3
 8013dee:	0c12      	lsrs	r2, r2, #16
 8013df0:	fa13 f38e 	uxtah	r3, r3, lr
 8013df4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013df8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013dfc:	b29b      	uxth	r3, r3
 8013dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e02:	45c1      	cmp	r9, r8
 8013e04:	f840 3b04 	str.w	r3, [r0], #4
 8013e08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013e0c:	d2e8      	bcs.n	8013de0 <quorem+0xb0>
 8013e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013e16:	b922      	cbnz	r2, 8013e22 <quorem+0xf2>
 8013e18:	3b04      	subs	r3, #4
 8013e1a:	429d      	cmp	r5, r3
 8013e1c:	461a      	mov	r2, r3
 8013e1e:	d30a      	bcc.n	8013e36 <quorem+0x106>
 8013e20:	613c      	str	r4, [r7, #16]
 8013e22:	4630      	mov	r0, r6
 8013e24:	b003      	add	sp, #12
 8013e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e2a:	6812      	ldr	r2, [r2, #0]
 8013e2c:	3b04      	subs	r3, #4
 8013e2e:	2a00      	cmp	r2, #0
 8013e30:	d1cc      	bne.n	8013dcc <quorem+0x9c>
 8013e32:	3c01      	subs	r4, #1
 8013e34:	e7c7      	b.n	8013dc6 <quorem+0x96>
 8013e36:	6812      	ldr	r2, [r2, #0]
 8013e38:	3b04      	subs	r3, #4
 8013e3a:	2a00      	cmp	r2, #0
 8013e3c:	d1f0      	bne.n	8013e20 <quorem+0xf0>
 8013e3e:	3c01      	subs	r4, #1
 8013e40:	e7eb      	b.n	8013e1a <quorem+0xea>
 8013e42:	2000      	movs	r0, #0
 8013e44:	e7ee      	b.n	8013e24 <quorem+0xf4>
	...

08013e48 <_dtoa_r>:
 8013e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e4c:	ed2d 8b02 	vpush	{d8}
 8013e50:	ec57 6b10 	vmov	r6, r7, d0
 8013e54:	b095      	sub	sp, #84	; 0x54
 8013e56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013e58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013e5c:	9105      	str	r1, [sp, #20]
 8013e5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013e62:	4604      	mov	r4, r0
 8013e64:	9209      	str	r2, [sp, #36]	; 0x24
 8013e66:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e68:	b975      	cbnz	r5, 8013e88 <_dtoa_r+0x40>
 8013e6a:	2010      	movs	r0, #16
 8013e6c:	f000 ff26 	bl	8014cbc <malloc>
 8013e70:	4602      	mov	r2, r0
 8013e72:	6260      	str	r0, [r4, #36]	; 0x24
 8013e74:	b920      	cbnz	r0, 8013e80 <_dtoa_r+0x38>
 8013e76:	4bb2      	ldr	r3, [pc, #712]	; (8014140 <_dtoa_r+0x2f8>)
 8013e78:	21ea      	movs	r1, #234	; 0xea
 8013e7a:	48b2      	ldr	r0, [pc, #712]	; (8014144 <_dtoa_r+0x2fc>)
 8013e7c:	f7ff ff2a 	bl	8013cd4 <__assert_func>
 8013e80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013e84:	6005      	str	r5, [r0, #0]
 8013e86:	60c5      	str	r5, [r0, #12]
 8013e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e8a:	6819      	ldr	r1, [r3, #0]
 8013e8c:	b151      	cbz	r1, 8013ea4 <_dtoa_r+0x5c>
 8013e8e:	685a      	ldr	r2, [r3, #4]
 8013e90:	604a      	str	r2, [r1, #4]
 8013e92:	2301      	movs	r3, #1
 8013e94:	4093      	lsls	r3, r2
 8013e96:	608b      	str	r3, [r1, #8]
 8013e98:	4620      	mov	r0, r4
 8013e9a:	f000 ff63 	bl	8014d64 <_Bfree>
 8013e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	601a      	str	r2, [r3, #0]
 8013ea4:	1e3b      	subs	r3, r7, #0
 8013ea6:	bfb9      	ittee	lt
 8013ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013eac:	9303      	strlt	r3, [sp, #12]
 8013eae:	2300      	movge	r3, #0
 8013eb0:	f8c8 3000 	strge.w	r3, [r8]
 8013eb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013eb8:	4ba3      	ldr	r3, [pc, #652]	; (8014148 <_dtoa_r+0x300>)
 8013eba:	bfbc      	itt	lt
 8013ebc:	2201      	movlt	r2, #1
 8013ebe:	f8c8 2000 	strlt.w	r2, [r8]
 8013ec2:	ea33 0309 	bics.w	r3, r3, r9
 8013ec6:	d11b      	bne.n	8013f00 <_dtoa_r+0xb8>
 8013ec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013eca:	f242 730f 	movw	r3, #9999	; 0x270f
 8013ece:	6013      	str	r3, [r2, #0]
 8013ed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013ed4:	4333      	orrs	r3, r6
 8013ed6:	f000 857a 	beq.w	80149ce <_dtoa_r+0xb86>
 8013eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013edc:	b963      	cbnz	r3, 8013ef8 <_dtoa_r+0xb0>
 8013ede:	4b9b      	ldr	r3, [pc, #620]	; (801414c <_dtoa_r+0x304>)
 8013ee0:	e024      	b.n	8013f2c <_dtoa_r+0xe4>
 8013ee2:	4b9b      	ldr	r3, [pc, #620]	; (8014150 <_dtoa_r+0x308>)
 8013ee4:	9300      	str	r3, [sp, #0]
 8013ee6:	3308      	adds	r3, #8
 8013ee8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013eea:	6013      	str	r3, [r2, #0]
 8013eec:	9800      	ldr	r0, [sp, #0]
 8013eee:	b015      	add	sp, #84	; 0x54
 8013ef0:	ecbd 8b02 	vpop	{d8}
 8013ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ef8:	4b94      	ldr	r3, [pc, #592]	; (801414c <_dtoa_r+0x304>)
 8013efa:	9300      	str	r3, [sp, #0]
 8013efc:	3303      	adds	r3, #3
 8013efe:	e7f3      	b.n	8013ee8 <_dtoa_r+0xa0>
 8013f00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013f04:	2200      	movs	r2, #0
 8013f06:	ec51 0b17 	vmov	r0, r1, d7
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013f10:	f7ec fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f14:	4680      	mov	r8, r0
 8013f16:	b158      	cbz	r0, 8013f30 <_dtoa_r+0xe8>
 8013f18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	6013      	str	r3, [r2, #0]
 8013f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	f000 8551 	beq.w	80149c8 <_dtoa_r+0xb80>
 8013f26:	488b      	ldr	r0, [pc, #556]	; (8014154 <_dtoa_r+0x30c>)
 8013f28:	6018      	str	r0, [r3, #0]
 8013f2a:	1e43      	subs	r3, r0, #1
 8013f2c:	9300      	str	r3, [sp, #0]
 8013f2e:	e7dd      	b.n	8013eec <_dtoa_r+0xa4>
 8013f30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013f34:	aa12      	add	r2, sp, #72	; 0x48
 8013f36:	a913      	add	r1, sp, #76	; 0x4c
 8013f38:	4620      	mov	r0, r4
 8013f3a:	f001 f9f5 	bl	8015328 <__d2b>
 8013f3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013f42:	4683      	mov	fp, r0
 8013f44:	2d00      	cmp	r5, #0
 8013f46:	d07c      	beq.n	8014042 <_dtoa_r+0x1fa>
 8013f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013f4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013f56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013f5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013f5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013f62:	4b7d      	ldr	r3, [pc, #500]	; (8014158 <_dtoa_r+0x310>)
 8013f64:	2200      	movs	r2, #0
 8013f66:	4630      	mov	r0, r6
 8013f68:	4639      	mov	r1, r7
 8013f6a:	f7ec f98d 	bl	8000288 <__aeabi_dsub>
 8013f6e:	a36e      	add	r3, pc, #440	; (adr r3, 8014128 <_dtoa_r+0x2e0>)
 8013f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f74:	f7ec fb40 	bl	80005f8 <__aeabi_dmul>
 8013f78:	a36d      	add	r3, pc, #436	; (adr r3, 8014130 <_dtoa_r+0x2e8>)
 8013f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f7e:	f7ec f985 	bl	800028c <__adddf3>
 8013f82:	4606      	mov	r6, r0
 8013f84:	4628      	mov	r0, r5
 8013f86:	460f      	mov	r7, r1
 8013f88:	f7ec facc 	bl	8000524 <__aeabi_i2d>
 8013f8c:	a36a      	add	r3, pc, #424	; (adr r3, 8014138 <_dtoa_r+0x2f0>)
 8013f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f92:	f7ec fb31 	bl	80005f8 <__aeabi_dmul>
 8013f96:	4602      	mov	r2, r0
 8013f98:	460b      	mov	r3, r1
 8013f9a:	4630      	mov	r0, r6
 8013f9c:	4639      	mov	r1, r7
 8013f9e:	f7ec f975 	bl	800028c <__adddf3>
 8013fa2:	4606      	mov	r6, r0
 8013fa4:	460f      	mov	r7, r1
 8013fa6:	f7ec fdd7 	bl	8000b58 <__aeabi_d2iz>
 8013faa:	2200      	movs	r2, #0
 8013fac:	4682      	mov	sl, r0
 8013fae:	2300      	movs	r3, #0
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	4639      	mov	r1, r7
 8013fb4:	f7ec fd92 	bl	8000adc <__aeabi_dcmplt>
 8013fb8:	b148      	cbz	r0, 8013fce <_dtoa_r+0x186>
 8013fba:	4650      	mov	r0, sl
 8013fbc:	f7ec fab2 	bl	8000524 <__aeabi_i2d>
 8013fc0:	4632      	mov	r2, r6
 8013fc2:	463b      	mov	r3, r7
 8013fc4:	f7ec fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 8013fc8:	b908      	cbnz	r0, 8013fce <_dtoa_r+0x186>
 8013fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fce:	f1ba 0f16 	cmp.w	sl, #22
 8013fd2:	d854      	bhi.n	801407e <_dtoa_r+0x236>
 8013fd4:	4b61      	ldr	r3, [pc, #388]	; (801415c <_dtoa_r+0x314>)
 8013fd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013fe2:	f7ec fd7b 	bl	8000adc <__aeabi_dcmplt>
 8013fe6:	2800      	cmp	r0, #0
 8013fe8:	d04b      	beq.n	8014082 <_dtoa_r+0x23a>
 8013fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fee:	2300      	movs	r3, #0
 8013ff0:	930e      	str	r3, [sp, #56]	; 0x38
 8013ff2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ff4:	1b5d      	subs	r5, r3, r5
 8013ff6:	1e6b      	subs	r3, r5, #1
 8013ff8:	9304      	str	r3, [sp, #16]
 8013ffa:	bf43      	ittte	mi
 8013ffc:	2300      	movmi	r3, #0
 8013ffe:	f1c5 0801 	rsbmi	r8, r5, #1
 8014002:	9304      	strmi	r3, [sp, #16]
 8014004:	f04f 0800 	movpl.w	r8, #0
 8014008:	f1ba 0f00 	cmp.w	sl, #0
 801400c:	db3b      	blt.n	8014086 <_dtoa_r+0x23e>
 801400e:	9b04      	ldr	r3, [sp, #16]
 8014010:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014014:	4453      	add	r3, sl
 8014016:	9304      	str	r3, [sp, #16]
 8014018:	2300      	movs	r3, #0
 801401a:	9306      	str	r3, [sp, #24]
 801401c:	9b05      	ldr	r3, [sp, #20]
 801401e:	2b09      	cmp	r3, #9
 8014020:	d869      	bhi.n	80140f6 <_dtoa_r+0x2ae>
 8014022:	2b05      	cmp	r3, #5
 8014024:	bfc4      	itt	gt
 8014026:	3b04      	subgt	r3, #4
 8014028:	9305      	strgt	r3, [sp, #20]
 801402a:	9b05      	ldr	r3, [sp, #20]
 801402c:	f1a3 0302 	sub.w	r3, r3, #2
 8014030:	bfcc      	ite	gt
 8014032:	2500      	movgt	r5, #0
 8014034:	2501      	movle	r5, #1
 8014036:	2b03      	cmp	r3, #3
 8014038:	d869      	bhi.n	801410e <_dtoa_r+0x2c6>
 801403a:	e8df f003 	tbb	[pc, r3]
 801403e:	4e2c      	.short	0x4e2c
 8014040:	5a4c      	.short	0x5a4c
 8014042:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8014046:	441d      	add	r5, r3
 8014048:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801404c:	2b20      	cmp	r3, #32
 801404e:	bfc1      	itttt	gt
 8014050:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014054:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014058:	fa09 f303 	lslgt.w	r3, r9, r3
 801405c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014060:	bfda      	itte	le
 8014062:	f1c3 0320 	rsble	r3, r3, #32
 8014066:	fa06 f003 	lslle.w	r0, r6, r3
 801406a:	4318      	orrgt	r0, r3
 801406c:	f7ec fa4a 	bl	8000504 <__aeabi_ui2d>
 8014070:	2301      	movs	r3, #1
 8014072:	4606      	mov	r6, r0
 8014074:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014078:	3d01      	subs	r5, #1
 801407a:	9310      	str	r3, [sp, #64]	; 0x40
 801407c:	e771      	b.n	8013f62 <_dtoa_r+0x11a>
 801407e:	2301      	movs	r3, #1
 8014080:	e7b6      	b.n	8013ff0 <_dtoa_r+0x1a8>
 8014082:	900e      	str	r0, [sp, #56]	; 0x38
 8014084:	e7b5      	b.n	8013ff2 <_dtoa_r+0x1aa>
 8014086:	f1ca 0300 	rsb	r3, sl, #0
 801408a:	9306      	str	r3, [sp, #24]
 801408c:	2300      	movs	r3, #0
 801408e:	eba8 080a 	sub.w	r8, r8, sl
 8014092:	930d      	str	r3, [sp, #52]	; 0x34
 8014094:	e7c2      	b.n	801401c <_dtoa_r+0x1d4>
 8014096:	2300      	movs	r3, #0
 8014098:	9308      	str	r3, [sp, #32]
 801409a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801409c:	2b00      	cmp	r3, #0
 801409e:	dc39      	bgt.n	8014114 <_dtoa_r+0x2cc>
 80140a0:	f04f 0901 	mov.w	r9, #1
 80140a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80140a8:	464b      	mov	r3, r9
 80140aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80140ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80140b0:	2200      	movs	r2, #0
 80140b2:	6042      	str	r2, [r0, #4]
 80140b4:	2204      	movs	r2, #4
 80140b6:	f102 0614 	add.w	r6, r2, #20
 80140ba:	429e      	cmp	r6, r3
 80140bc:	6841      	ldr	r1, [r0, #4]
 80140be:	d92f      	bls.n	8014120 <_dtoa_r+0x2d8>
 80140c0:	4620      	mov	r0, r4
 80140c2:	f000 fe0f 	bl	8014ce4 <_Balloc>
 80140c6:	9000      	str	r0, [sp, #0]
 80140c8:	2800      	cmp	r0, #0
 80140ca:	d14b      	bne.n	8014164 <_dtoa_r+0x31c>
 80140cc:	4b24      	ldr	r3, [pc, #144]	; (8014160 <_dtoa_r+0x318>)
 80140ce:	4602      	mov	r2, r0
 80140d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80140d4:	e6d1      	b.n	8013e7a <_dtoa_r+0x32>
 80140d6:	2301      	movs	r3, #1
 80140d8:	e7de      	b.n	8014098 <_dtoa_r+0x250>
 80140da:	2300      	movs	r3, #0
 80140dc:	9308      	str	r3, [sp, #32]
 80140de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140e0:	eb0a 0903 	add.w	r9, sl, r3
 80140e4:	f109 0301 	add.w	r3, r9, #1
 80140e8:	2b01      	cmp	r3, #1
 80140ea:	9301      	str	r3, [sp, #4]
 80140ec:	bfb8      	it	lt
 80140ee:	2301      	movlt	r3, #1
 80140f0:	e7dd      	b.n	80140ae <_dtoa_r+0x266>
 80140f2:	2301      	movs	r3, #1
 80140f4:	e7f2      	b.n	80140dc <_dtoa_r+0x294>
 80140f6:	2501      	movs	r5, #1
 80140f8:	2300      	movs	r3, #0
 80140fa:	9305      	str	r3, [sp, #20]
 80140fc:	9508      	str	r5, [sp, #32]
 80140fe:	f04f 39ff 	mov.w	r9, #4294967295
 8014102:	2200      	movs	r2, #0
 8014104:	f8cd 9004 	str.w	r9, [sp, #4]
 8014108:	2312      	movs	r3, #18
 801410a:	9209      	str	r2, [sp, #36]	; 0x24
 801410c:	e7cf      	b.n	80140ae <_dtoa_r+0x266>
 801410e:	2301      	movs	r3, #1
 8014110:	9308      	str	r3, [sp, #32]
 8014112:	e7f4      	b.n	80140fe <_dtoa_r+0x2b6>
 8014114:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014118:	f8cd 9004 	str.w	r9, [sp, #4]
 801411c:	464b      	mov	r3, r9
 801411e:	e7c6      	b.n	80140ae <_dtoa_r+0x266>
 8014120:	3101      	adds	r1, #1
 8014122:	6041      	str	r1, [r0, #4]
 8014124:	0052      	lsls	r2, r2, #1
 8014126:	e7c6      	b.n	80140b6 <_dtoa_r+0x26e>
 8014128:	636f4361 	.word	0x636f4361
 801412c:	3fd287a7 	.word	0x3fd287a7
 8014130:	8b60c8b3 	.word	0x8b60c8b3
 8014134:	3fc68a28 	.word	0x3fc68a28
 8014138:	509f79fb 	.word	0x509f79fb
 801413c:	3fd34413 	.word	0x3fd34413
 8014140:	080165c0 	.word	0x080165c0
 8014144:	0801667f 	.word	0x0801667f
 8014148:	7ff00000 	.word	0x7ff00000
 801414c:	0801667b 	.word	0x0801667b
 8014150:	08016672 	.word	0x08016672
 8014154:	0801659d 	.word	0x0801659d
 8014158:	3ff80000 	.word	0x3ff80000
 801415c:	08016778 	.word	0x08016778
 8014160:	080166de 	.word	0x080166de
 8014164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014166:	9a00      	ldr	r2, [sp, #0]
 8014168:	601a      	str	r2, [r3, #0]
 801416a:	9b01      	ldr	r3, [sp, #4]
 801416c:	2b0e      	cmp	r3, #14
 801416e:	f200 80ad 	bhi.w	80142cc <_dtoa_r+0x484>
 8014172:	2d00      	cmp	r5, #0
 8014174:	f000 80aa 	beq.w	80142cc <_dtoa_r+0x484>
 8014178:	f1ba 0f00 	cmp.w	sl, #0
 801417c:	dd36      	ble.n	80141ec <_dtoa_r+0x3a4>
 801417e:	4ac3      	ldr	r2, [pc, #780]	; (801448c <_dtoa_r+0x644>)
 8014180:	f00a 030f 	and.w	r3, sl, #15
 8014184:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014188:	ed93 7b00 	vldr	d7, [r3]
 801418c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014190:	ea4f 172a 	mov.w	r7, sl, asr #4
 8014194:	eeb0 8a47 	vmov.f32	s16, s14
 8014198:	eef0 8a67 	vmov.f32	s17, s15
 801419c:	d016      	beq.n	80141cc <_dtoa_r+0x384>
 801419e:	4bbc      	ldr	r3, [pc, #752]	; (8014490 <_dtoa_r+0x648>)
 80141a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80141a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80141a8:	f7ec fb50 	bl	800084c <__aeabi_ddiv>
 80141ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141b0:	f007 070f 	and.w	r7, r7, #15
 80141b4:	2503      	movs	r5, #3
 80141b6:	4eb6      	ldr	r6, [pc, #728]	; (8014490 <_dtoa_r+0x648>)
 80141b8:	b957      	cbnz	r7, 80141d0 <_dtoa_r+0x388>
 80141ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141be:	ec53 2b18 	vmov	r2, r3, d8
 80141c2:	f7ec fb43 	bl	800084c <__aeabi_ddiv>
 80141c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141ca:	e029      	b.n	8014220 <_dtoa_r+0x3d8>
 80141cc:	2502      	movs	r5, #2
 80141ce:	e7f2      	b.n	80141b6 <_dtoa_r+0x36e>
 80141d0:	07f9      	lsls	r1, r7, #31
 80141d2:	d508      	bpl.n	80141e6 <_dtoa_r+0x39e>
 80141d4:	ec51 0b18 	vmov	r0, r1, d8
 80141d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80141dc:	f7ec fa0c 	bl	80005f8 <__aeabi_dmul>
 80141e0:	ec41 0b18 	vmov	d8, r0, r1
 80141e4:	3501      	adds	r5, #1
 80141e6:	107f      	asrs	r7, r7, #1
 80141e8:	3608      	adds	r6, #8
 80141ea:	e7e5      	b.n	80141b8 <_dtoa_r+0x370>
 80141ec:	f000 80a6 	beq.w	801433c <_dtoa_r+0x4f4>
 80141f0:	f1ca 0600 	rsb	r6, sl, #0
 80141f4:	4ba5      	ldr	r3, [pc, #660]	; (801448c <_dtoa_r+0x644>)
 80141f6:	4fa6      	ldr	r7, [pc, #664]	; (8014490 <_dtoa_r+0x648>)
 80141f8:	f006 020f 	and.w	r2, r6, #15
 80141fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014204:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014208:	f7ec f9f6 	bl	80005f8 <__aeabi_dmul>
 801420c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014210:	1136      	asrs	r6, r6, #4
 8014212:	2300      	movs	r3, #0
 8014214:	2502      	movs	r5, #2
 8014216:	2e00      	cmp	r6, #0
 8014218:	f040 8085 	bne.w	8014326 <_dtoa_r+0x4de>
 801421c:	2b00      	cmp	r3, #0
 801421e:	d1d2      	bne.n	80141c6 <_dtoa_r+0x37e>
 8014220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014222:	2b00      	cmp	r3, #0
 8014224:	f000 808c 	beq.w	8014340 <_dtoa_r+0x4f8>
 8014228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801422c:	4b99      	ldr	r3, [pc, #612]	; (8014494 <_dtoa_r+0x64c>)
 801422e:	2200      	movs	r2, #0
 8014230:	4630      	mov	r0, r6
 8014232:	4639      	mov	r1, r7
 8014234:	f7ec fc52 	bl	8000adc <__aeabi_dcmplt>
 8014238:	2800      	cmp	r0, #0
 801423a:	f000 8081 	beq.w	8014340 <_dtoa_r+0x4f8>
 801423e:	9b01      	ldr	r3, [sp, #4]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d07d      	beq.n	8014340 <_dtoa_r+0x4f8>
 8014244:	f1b9 0f00 	cmp.w	r9, #0
 8014248:	dd3c      	ble.n	80142c4 <_dtoa_r+0x47c>
 801424a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801424e:	9307      	str	r3, [sp, #28]
 8014250:	2200      	movs	r2, #0
 8014252:	4b91      	ldr	r3, [pc, #580]	; (8014498 <_dtoa_r+0x650>)
 8014254:	4630      	mov	r0, r6
 8014256:	4639      	mov	r1, r7
 8014258:	f7ec f9ce 	bl	80005f8 <__aeabi_dmul>
 801425c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014260:	3501      	adds	r5, #1
 8014262:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014266:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801426a:	4628      	mov	r0, r5
 801426c:	f7ec f95a 	bl	8000524 <__aeabi_i2d>
 8014270:	4632      	mov	r2, r6
 8014272:	463b      	mov	r3, r7
 8014274:	f7ec f9c0 	bl	80005f8 <__aeabi_dmul>
 8014278:	4b88      	ldr	r3, [pc, #544]	; (801449c <_dtoa_r+0x654>)
 801427a:	2200      	movs	r2, #0
 801427c:	f7ec f806 	bl	800028c <__adddf3>
 8014280:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014288:	9303      	str	r3, [sp, #12]
 801428a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801428c:	2b00      	cmp	r3, #0
 801428e:	d15c      	bne.n	801434a <_dtoa_r+0x502>
 8014290:	4b83      	ldr	r3, [pc, #524]	; (80144a0 <_dtoa_r+0x658>)
 8014292:	2200      	movs	r2, #0
 8014294:	4630      	mov	r0, r6
 8014296:	4639      	mov	r1, r7
 8014298:	f7eb fff6 	bl	8000288 <__aeabi_dsub>
 801429c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80142a0:	4606      	mov	r6, r0
 80142a2:	460f      	mov	r7, r1
 80142a4:	f7ec fc38 	bl	8000b18 <__aeabi_dcmpgt>
 80142a8:	2800      	cmp	r0, #0
 80142aa:	f040 8296 	bne.w	80147da <_dtoa_r+0x992>
 80142ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80142b2:	4630      	mov	r0, r6
 80142b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142b8:	4639      	mov	r1, r7
 80142ba:	f7ec fc0f 	bl	8000adc <__aeabi_dcmplt>
 80142be:	2800      	cmp	r0, #0
 80142c0:	f040 8288 	bne.w	80147d4 <_dtoa_r+0x98c>
 80142c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80142c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80142cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	f2c0 8158 	blt.w	8014584 <_dtoa_r+0x73c>
 80142d4:	f1ba 0f0e 	cmp.w	sl, #14
 80142d8:	f300 8154 	bgt.w	8014584 <_dtoa_r+0x73c>
 80142dc:	4b6b      	ldr	r3, [pc, #428]	; (801448c <_dtoa_r+0x644>)
 80142de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80142e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80142e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	f280 80e3 	bge.w	80144b4 <_dtoa_r+0x66c>
 80142ee:	9b01      	ldr	r3, [sp, #4]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	f300 80df 	bgt.w	80144b4 <_dtoa_r+0x66c>
 80142f6:	f040 826d 	bne.w	80147d4 <_dtoa_r+0x98c>
 80142fa:	4b69      	ldr	r3, [pc, #420]	; (80144a0 <_dtoa_r+0x658>)
 80142fc:	2200      	movs	r2, #0
 80142fe:	4640      	mov	r0, r8
 8014300:	4649      	mov	r1, r9
 8014302:	f7ec f979 	bl	80005f8 <__aeabi_dmul>
 8014306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801430a:	f7ec fbfb 	bl	8000b04 <__aeabi_dcmpge>
 801430e:	9e01      	ldr	r6, [sp, #4]
 8014310:	4637      	mov	r7, r6
 8014312:	2800      	cmp	r0, #0
 8014314:	f040 8243 	bne.w	801479e <_dtoa_r+0x956>
 8014318:	9d00      	ldr	r5, [sp, #0]
 801431a:	2331      	movs	r3, #49	; 0x31
 801431c:	f805 3b01 	strb.w	r3, [r5], #1
 8014320:	f10a 0a01 	add.w	sl, sl, #1
 8014324:	e23f      	b.n	80147a6 <_dtoa_r+0x95e>
 8014326:	07f2      	lsls	r2, r6, #31
 8014328:	d505      	bpl.n	8014336 <_dtoa_r+0x4ee>
 801432a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801432e:	f7ec f963 	bl	80005f8 <__aeabi_dmul>
 8014332:	3501      	adds	r5, #1
 8014334:	2301      	movs	r3, #1
 8014336:	1076      	asrs	r6, r6, #1
 8014338:	3708      	adds	r7, #8
 801433a:	e76c      	b.n	8014216 <_dtoa_r+0x3ce>
 801433c:	2502      	movs	r5, #2
 801433e:	e76f      	b.n	8014220 <_dtoa_r+0x3d8>
 8014340:	9b01      	ldr	r3, [sp, #4]
 8014342:	f8cd a01c 	str.w	sl, [sp, #28]
 8014346:	930c      	str	r3, [sp, #48]	; 0x30
 8014348:	e78d      	b.n	8014266 <_dtoa_r+0x41e>
 801434a:	9900      	ldr	r1, [sp, #0]
 801434c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801434e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014350:	4b4e      	ldr	r3, [pc, #312]	; (801448c <_dtoa_r+0x644>)
 8014352:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014356:	4401      	add	r1, r0
 8014358:	9102      	str	r1, [sp, #8]
 801435a:	9908      	ldr	r1, [sp, #32]
 801435c:	eeb0 8a47 	vmov.f32	s16, s14
 8014360:	eef0 8a67 	vmov.f32	s17, s15
 8014364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014368:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801436c:	2900      	cmp	r1, #0
 801436e:	d045      	beq.n	80143fc <_dtoa_r+0x5b4>
 8014370:	494c      	ldr	r1, [pc, #304]	; (80144a4 <_dtoa_r+0x65c>)
 8014372:	2000      	movs	r0, #0
 8014374:	f7ec fa6a 	bl	800084c <__aeabi_ddiv>
 8014378:	ec53 2b18 	vmov	r2, r3, d8
 801437c:	f7eb ff84 	bl	8000288 <__aeabi_dsub>
 8014380:	9d00      	ldr	r5, [sp, #0]
 8014382:	ec41 0b18 	vmov	d8, r0, r1
 8014386:	4639      	mov	r1, r7
 8014388:	4630      	mov	r0, r6
 801438a:	f7ec fbe5 	bl	8000b58 <__aeabi_d2iz>
 801438e:	900c      	str	r0, [sp, #48]	; 0x30
 8014390:	f7ec f8c8 	bl	8000524 <__aeabi_i2d>
 8014394:	4602      	mov	r2, r0
 8014396:	460b      	mov	r3, r1
 8014398:	4630      	mov	r0, r6
 801439a:	4639      	mov	r1, r7
 801439c:	f7eb ff74 	bl	8000288 <__aeabi_dsub>
 80143a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143a2:	3330      	adds	r3, #48	; 0x30
 80143a4:	f805 3b01 	strb.w	r3, [r5], #1
 80143a8:	ec53 2b18 	vmov	r2, r3, d8
 80143ac:	4606      	mov	r6, r0
 80143ae:	460f      	mov	r7, r1
 80143b0:	f7ec fb94 	bl	8000adc <__aeabi_dcmplt>
 80143b4:	2800      	cmp	r0, #0
 80143b6:	d165      	bne.n	8014484 <_dtoa_r+0x63c>
 80143b8:	4632      	mov	r2, r6
 80143ba:	463b      	mov	r3, r7
 80143bc:	4935      	ldr	r1, [pc, #212]	; (8014494 <_dtoa_r+0x64c>)
 80143be:	2000      	movs	r0, #0
 80143c0:	f7eb ff62 	bl	8000288 <__aeabi_dsub>
 80143c4:	ec53 2b18 	vmov	r2, r3, d8
 80143c8:	f7ec fb88 	bl	8000adc <__aeabi_dcmplt>
 80143cc:	2800      	cmp	r0, #0
 80143ce:	f040 80b9 	bne.w	8014544 <_dtoa_r+0x6fc>
 80143d2:	9b02      	ldr	r3, [sp, #8]
 80143d4:	429d      	cmp	r5, r3
 80143d6:	f43f af75 	beq.w	80142c4 <_dtoa_r+0x47c>
 80143da:	4b2f      	ldr	r3, [pc, #188]	; (8014498 <_dtoa_r+0x650>)
 80143dc:	ec51 0b18 	vmov	r0, r1, d8
 80143e0:	2200      	movs	r2, #0
 80143e2:	f7ec f909 	bl	80005f8 <__aeabi_dmul>
 80143e6:	4b2c      	ldr	r3, [pc, #176]	; (8014498 <_dtoa_r+0x650>)
 80143e8:	ec41 0b18 	vmov	d8, r0, r1
 80143ec:	2200      	movs	r2, #0
 80143ee:	4630      	mov	r0, r6
 80143f0:	4639      	mov	r1, r7
 80143f2:	f7ec f901 	bl	80005f8 <__aeabi_dmul>
 80143f6:	4606      	mov	r6, r0
 80143f8:	460f      	mov	r7, r1
 80143fa:	e7c4      	b.n	8014386 <_dtoa_r+0x53e>
 80143fc:	ec51 0b17 	vmov	r0, r1, d7
 8014400:	f7ec f8fa 	bl	80005f8 <__aeabi_dmul>
 8014404:	9b02      	ldr	r3, [sp, #8]
 8014406:	9d00      	ldr	r5, [sp, #0]
 8014408:	930c      	str	r3, [sp, #48]	; 0x30
 801440a:	ec41 0b18 	vmov	d8, r0, r1
 801440e:	4639      	mov	r1, r7
 8014410:	4630      	mov	r0, r6
 8014412:	f7ec fba1 	bl	8000b58 <__aeabi_d2iz>
 8014416:	9011      	str	r0, [sp, #68]	; 0x44
 8014418:	f7ec f884 	bl	8000524 <__aeabi_i2d>
 801441c:	4602      	mov	r2, r0
 801441e:	460b      	mov	r3, r1
 8014420:	4630      	mov	r0, r6
 8014422:	4639      	mov	r1, r7
 8014424:	f7eb ff30 	bl	8000288 <__aeabi_dsub>
 8014428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801442a:	3330      	adds	r3, #48	; 0x30
 801442c:	f805 3b01 	strb.w	r3, [r5], #1
 8014430:	9b02      	ldr	r3, [sp, #8]
 8014432:	429d      	cmp	r5, r3
 8014434:	4606      	mov	r6, r0
 8014436:	460f      	mov	r7, r1
 8014438:	f04f 0200 	mov.w	r2, #0
 801443c:	d134      	bne.n	80144a8 <_dtoa_r+0x660>
 801443e:	4b19      	ldr	r3, [pc, #100]	; (80144a4 <_dtoa_r+0x65c>)
 8014440:	ec51 0b18 	vmov	r0, r1, d8
 8014444:	f7eb ff22 	bl	800028c <__adddf3>
 8014448:	4602      	mov	r2, r0
 801444a:	460b      	mov	r3, r1
 801444c:	4630      	mov	r0, r6
 801444e:	4639      	mov	r1, r7
 8014450:	f7ec fb62 	bl	8000b18 <__aeabi_dcmpgt>
 8014454:	2800      	cmp	r0, #0
 8014456:	d175      	bne.n	8014544 <_dtoa_r+0x6fc>
 8014458:	ec53 2b18 	vmov	r2, r3, d8
 801445c:	4911      	ldr	r1, [pc, #68]	; (80144a4 <_dtoa_r+0x65c>)
 801445e:	2000      	movs	r0, #0
 8014460:	f7eb ff12 	bl	8000288 <__aeabi_dsub>
 8014464:	4602      	mov	r2, r0
 8014466:	460b      	mov	r3, r1
 8014468:	4630      	mov	r0, r6
 801446a:	4639      	mov	r1, r7
 801446c:	f7ec fb36 	bl	8000adc <__aeabi_dcmplt>
 8014470:	2800      	cmp	r0, #0
 8014472:	f43f af27 	beq.w	80142c4 <_dtoa_r+0x47c>
 8014476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014478:	1e6b      	subs	r3, r5, #1
 801447a:	930c      	str	r3, [sp, #48]	; 0x30
 801447c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014480:	2b30      	cmp	r3, #48	; 0x30
 8014482:	d0f8      	beq.n	8014476 <_dtoa_r+0x62e>
 8014484:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014488:	e04a      	b.n	8014520 <_dtoa_r+0x6d8>
 801448a:	bf00      	nop
 801448c:	08016778 	.word	0x08016778
 8014490:	08016750 	.word	0x08016750
 8014494:	3ff00000 	.word	0x3ff00000
 8014498:	40240000 	.word	0x40240000
 801449c:	401c0000 	.word	0x401c0000
 80144a0:	40140000 	.word	0x40140000
 80144a4:	3fe00000 	.word	0x3fe00000
 80144a8:	4baf      	ldr	r3, [pc, #700]	; (8014768 <_dtoa_r+0x920>)
 80144aa:	f7ec f8a5 	bl	80005f8 <__aeabi_dmul>
 80144ae:	4606      	mov	r6, r0
 80144b0:	460f      	mov	r7, r1
 80144b2:	e7ac      	b.n	801440e <_dtoa_r+0x5c6>
 80144b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80144b8:	9d00      	ldr	r5, [sp, #0]
 80144ba:	4642      	mov	r2, r8
 80144bc:	464b      	mov	r3, r9
 80144be:	4630      	mov	r0, r6
 80144c0:	4639      	mov	r1, r7
 80144c2:	f7ec f9c3 	bl	800084c <__aeabi_ddiv>
 80144c6:	f7ec fb47 	bl	8000b58 <__aeabi_d2iz>
 80144ca:	9002      	str	r0, [sp, #8]
 80144cc:	f7ec f82a 	bl	8000524 <__aeabi_i2d>
 80144d0:	4642      	mov	r2, r8
 80144d2:	464b      	mov	r3, r9
 80144d4:	f7ec f890 	bl	80005f8 <__aeabi_dmul>
 80144d8:	4602      	mov	r2, r0
 80144da:	460b      	mov	r3, r1
 80144dc:	4630      	mov	r0, r6
 80144de:	4639      	mov	r1, r7
 80144e0:	f7eb fed2 	bl	8000288 <__aeabi_dsub>
 80144e4:	9e02      	ldr	r6, [sp, #8]
 80144e6:	9f01      	ldr	r7, [sp, #4]
 80144e8:	3630      	adds	r6, #48	; 0x30
 80144ea:	f805 6b01 	strb.w	r6, [r5], #1
 80144ee:	9e00      	ldr	r6, [sp, #0]
 80144f0:	1bae      	subs	r6, r5, r6
 80144f2:	42b7      	cmp	r7, r6
 80144f4:	4602      	mov	r2, r0
 80144f6:	460b      	mov	r3, r1
 80144f8:	d137      	bne.n	801456a <_dtoa_r+0x722>
 80144fa:	f7eb fec7 	bl	800028c <__adddf3>
 80144fe:	4642      	mov	r2, r8
 8014500:	464b      	mov	r3, r9
 8014502:	4606      	mov	r6, r0
 8014504:	460f      	mov	r7, r1
 8014506:	f7ec fb07 	bl	8000b18 <__aeabi_dcmpgt>
 801450a:	b9c8      	cbnz	r0, 8014540 <_dtoa_r+0x6f8>
 801450c:	4642      	mov	r2, r8
 801450e:	464b      	mov	r3, r9
 8014510:	4630      	mov	r0, r6
 8014512:	4639      	mov	r1, r7
 8014514:	f7ec fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 8014518:	b110      	cbz	r0, 8014520 <_dtoa_r+0x6d8>
 801451a:	9b02      	ldr	r3, [sp, #8]
 801451c:	07d9      	lsls	r1, r3, #31
 801451e:	d40f      	bmi.n	8014540 <_dtoa_r+0x6f8>
 8014520:	4620      	mov	r0, r4
 8014522:	4659      	mov	r1, fp
 8014524:	f000 fc1e 	bl	8014d64 <_Bfree>
 8014528:	2300      	movs	r3, #0
 801452a:	702b      	strb	r3, [r5, #0]
 801452c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801452e:	f10a 0001 	add.w	r0, sl, #1
 8014532:	6018      	str	r0, [r3, #0]
 8014534:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014536:	2b00      	cmp	r3, #0
 8014538:	f43f acd8 	beq.w	8013eec <_dtoa_r+0xa4>
 801453c:	601d      	str	r5, [r3, #0]
 801453e:	e4d5      	b.n	8013eec <_dtoa_r+0xa4>
 8014540:	f8cd a01c 	str.w	sl, [sp, #28]
 8014544:	462b      	mov	r3, r5
 8014546:	461d      	mov	r5, r3
 8014548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801454c:	2a39      	cmp	r2, #57	; 0x39
 801454e:	d108      	bne.n	8014562 <_dtoa_r+0x71a>
 8014550:	9a00      	ldr	r2, [sp, #0]
 8014552:	429a      	cmp	r2, r3
 8014554:	d1f7      	bne.n	8014546 <_dtoa_r+0x6fe>
 8014556:	9a07      	ldr	r2, [sp, #28]
 8014558:	9900      	ldr	r1, [sp, #0]
 801455a:	3201      	adds	r2, #1
 801455c:	9207      	str	r2, [sp, #28]
 801455e:	2230      	movs	r2, #48	; 0x30
 8014560:	700a      	strb	r2, [r1, #0]
 8014562:	781a      	ldrb	r2, [r3, #0]
 8014564:	3201      	adds	r2, #1
 8014566:	701a      	strb	r2, [r3, #0]
 8014568:	e78c      	b.n	8014484 <_dtoa_r+0x63c>
 801456a:	4b7f      	ldr	r3, [pc, #508]	; (8014768 <_dtoa_r+0x920>)
 801456c:	2200      	movs	r2, #0
 801456e:	f7ec f843 	bl	80005f8 <__aeabi_dmul>
 8014572:	2200      	movs	r2, #0
 8014574:	2300      	movs	r3, #0
 8014576:	4606      	mov	r6, r0
 8014578:	460f      	mov	r7, r1
 801457a:	f7ec faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 801457e:	2800      	cmp	r0, #0
 8014580:	d09b      	beq.n	80144ba <_dtoa_r+0x672>
 8014582:	e7cd      	b.n	8014520 <_dtoa_r+0x6d8>
 8014584:	9a08      	ldr	r2, [sp, #32]
 8014586:	2a00      	cmp	r2, #0
 8014588:	f000 80c4 	beq.w	8014714 <_dtoa_r+0x8cc>
 801458c:	9a05      	ldr	r2, [sp, #20]
 801458e:	2a01      	cmp	r2, #1
 8014590:	f300 80a8 	bgt.w	80146e4 <_dtoa_r+0x89c>
 8014594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014596:	2a00      	cmp	r2, #0
 8014598:	f000 80a0 	beq.w	80146dc <_dtoa_r+0x894>
 801459c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80145a0:	9e06      	ldr	r6, [sp, #24]
 80145a2:	4645      	mov	r5, r8
 80145a4:	9a04      	ldr	r2, [sp, #16]
 80145a6:	2101      	movs	r1, #1
 80145a8:	441a      	add	r2, r3
 80145aa:	4620      	mov	r0, r4
 80145ac:	4498      	add	r8, r3
 80145ae:	9204      	str	r2, [sp, #16]
 80145b0:	f000 fc94 	bl	8014edc <__i2b>
 80145b4:	4607      	mov	r7, r0
 80145b6:	2d00      	cmp	r5, #0
 80145b8:	dd0b      	ble.n	80145d2 <_dtoa_r+0x78a>
 80145ba:	9b04      	ldr	r3, [sp, #16]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	dd08      	ble.n	80145d2 <_dtoa_r+0x78a>
 80145c0:	42ab      	cmp	r3, r5
 80145c2:	9a04      	ldr	r2, [sp, #16]
 80145c4:	bfa8      	it	ge
 80145c6:	462b      	movge	r3, r5
 80145c8:	eba8 0803 	sub.w	r8, r8, r3
 80145cc:	1aed      	subs	r5, r5, r3
 80145ce:	1ad3      	subs	r3, r2, r3
 80145d0:	9304      	str	r3, [sp, #16]
 80145d2:	9b06      	ldr	r3, [sp, #24]
 80145d4:	b1fb      	cbz	r3, 8014616 <_dtoa_r+0x7ce>
 80145d6:	9b08      	ldr	r3, [sp, #32]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	f000 809f 	beq.w	801471c <_dtoa_r+0x8d4>
 80145de:	2e00      	cmp	r6, #0
 80145e0:	dd11      	ble.n	8014606 <_dtoa_r+0x7be>
 80145e2:	4639      	mov	r1, r7
 80145e4:	4632      	mov	r2, r6
 80145e6:	4620      	mov	r0, r4
 80145e8:	f000 fd34 	bl	8015054 <__pow5mult>
 80145ec:	465a      	mov	r2, fp
 80145ee:	4601      	mov	r1, r0
 80145f0:	4607      	mov	r7, r0
 80145f2:	4620      	mov	r0, r4
 80145f4:	f000 fc88 	bl	8014f08 <__multiply>
 80145f8:	4659      	mov	r1, fp
 80145fa:	9007      	str	r0, [sp, #28]
 80145fc:	4620      	mov	r0, r4
 80145fe:	f000 fbb1 	bl	8014d64 <_Bfree>
 8014602:	9b07      	ldr	r3, [sp, #28]
 8014604:	469b      	mov	fp, r3
 8014606:	9b06      	ldr	r3, [sp, #24]
 8014608:	1b9a      	subs	r2, r3, r6
 801460a:	d004      	beq.n	8014616 <_dtoa_r+0x7ce>
 801460c:	4659      	mov	r1, fp
 801460e:	4620      	mov	r0, r4
 8014610:	f000 fd20 	bl	8015054 <__pow5mult>
 8014614:	4683      	mov	fp, r0
 8014616:	2101      	movs	r1, #1
 8014618:	4620      	mov	r0, r4
 801461a:	f000 fc5f 	bl	8014edc <__i2b>
 801461e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014620:	2b00      	cmp	r3, #0
 8014622:	4606      	mov	r6, r0
 8014624:	dd7c      	ble.n	8014720 <_dtoa_r+0x8d8>
 8014626:	461a      	mov	r2, r3
 8014628:	4601      	mov	r1, r0
 801462a:	4620      	mov	r0, r4
 801462c:	f000 fd12 	bl	8015054 <__pow5mult>
 8014630:	9b05      	ldr	r3, [sp, #20]
 8014632:	2b01      	cmp	r3, #1
 8014634:	4606      	mov	r6, r0
 8014636:	dd76      	ble.n	8014726 <_dtoa_r+0x8de>
 8014638:	2300      	movs	r3, #0
 801463a:	9306      	str	r3, [sp, #24]
 801463c:	6933      	ldr	r3, [r6, #16]
 801463e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014642:	6918      	ldr	r0, [r3, #16]
 8014644:	f000 fbfa 	bl	8014e3c <__hi0bits>
 8014648:	f1c0 0020 	rsb	r0, r0, #32
 801464c:	9b04      	ldr	r3, [sp, #16]
 801464e:	4418      	add	r0, r3
 8014650:	f010 001f 	ands.w	r0, r0, #31
 8014654:	f000 8086 	beq.w	8014764 <_dtoa_r+0x91c>
 8014658:	f1c0 0320 	rsb	r3, r0, #32
 801465c:	2b04      	cmp	r3, #4
 801465e:	dd7f      	ble.n	8014760 <_dtoa_r+0x918>
 8014660:	f1c0 001c 	rsb	r0, r0, #28
 8014664:	9b04      	ldr	r3, [sp, #16]
 8014666:	4403      	add	r3, r0
 8014668:	4480      	add	r8, r0
 801466a:	4405      	add	r5, r0
 801466c:	9304      	str	r3, [sp, #16]
 801466e:	f1b8 0f00 	cmp.w	r8, #0
 8014672:	dd05      	ble.n	8014680 <_dtoa_r+0x838>
 8014674:	4659      	mov	r1, fp
 8014676:	4642      	mov	r2, r8
 8014678:	4620      	mov	r0, r4
 801467a:	f000 fd45 	bl	8015108 <__lshift>
 801467e:	4683      	mov	fp, r0
 8014680:	9b04      	ldr	r3, [sp, #16]
 8014682:	2b00      	cmp	r3, #0
 8014684:	dd05      	ble.n	8014692 <_dtoa_r+0x84a>
 8014686:	4631      	mov	r1, r6
 8014688:	461a      	mov	r2, r3
 801468a:	4620      	mov	r0, r4
 801468c:	f000 fd3c 	bl	8015108 <__lshift>
 8014690:	4606      	mov	r6, r0
 8014692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014694:	2b00      	cmp	r3, #0
 8014696:	d069      	beq.n	801476c <_dtoa_r+0x924>
 8014698:	4631      	mov	r1, r6
 801469a:	4658      	mov	r0, fp
 801469c:	f000 fda0 	bl	80151e0 <__mcmp>
 80146a0:	2800      	cmp	r0, #0
 80146a2:	da63      	bge.n	801476c <_dtoa_r+0x924>
 80146a4:	2300      	movs	r3, #0
 80146a6:	4659      	mov	r1, fp
 80146a8:	220a      	movs	r2, #10
 80146aa:	4620      	mov	r0, r4
 80146ac:	f000 fb7c 	bl	8014da8 <__multadd>
 80146b0:	9b08      	ldr	r3, [sp, #32]
 80146b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146b6:	4683      	mov	fp, r0
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	f000 818f 	beq.w	80149dc <_dtoa_r+0xb94>
 80146be:	4639      	mov	r1, r7
 80146c0:	2300      	movs	r3, #0
 80146c2:	220a      	movs	r2, #10
 80146c4:	4620      	mov	r0, r4
 80146c6:	f000 fb6f 	bl	8014da8 <__multadd>
 80146ca:	f1b9 0f00 	cmp.w	r9, #0
 80146ce:	4607      	mov	r7, r0
 80146d0:	f300 808e 	bgt.w	80147f0 <_dtoa_r+0x9a8>
 80146d4:	9b05      	ldr	r3, [sp, #20]
 80146d6:	2b02      	cmp	r3, #2
 80146d8:	dc50      	bgt.n	801477c <_dtoa_r+0x934>
 80146da:	e089      	b.n	80147f0 <_dtoa_r+0x9a8>
 80146dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80146de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80146e2:	e75d      	b.n	80145a0 <_dtoa_r+0x758>
 80146e4:	9b01      	ldr	r3, [sp, #4]
 80146e6:	1e5e      	subs	r6, r3, #1
 80146e8:	9b06      	ldr	r3, [sp, #24]
 80146ea:	42b3      	cmp	r3, r6
 80146ec:	bfbf      	itttt	lt
 80146ee:	9b06      	ldrlt	r3, [sp, #24]
 80146f0:	9606      	strlt	r6, [sp, #24]
 80146f2:	1af2      	sublt	r2, r6, r3
 80146f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80146f6:	bfb6      	itet	lt
 80146f8:	189b      	addlt	r3, r3, r2
 80146fa:	1b9e      	subge	r6, r3, r6
 80146fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80146fe:	9b01      	ldr	r3, [sp, #4]
 8014700:	bfb8      	it	lt
 8014702:	2600      	movlt	r6, #0
 8014704:	2b00      	cmp	r3, #0
 8014706:	bfb5      	itete	lt
 8014708:	eba8 0503 	sublt.w	r5, r8, r3
 801470c:	9b01      	ldrge	r3, [sp, #4]
 801470e:	2300      	movlt	r3, #0
 8014710:	4645      	movge	r5, r8
 8014712:	e747      	b.n	80145a4 <_dtoa_r+0x75c>
 8014714:	9e06      	ldr	r6, [sp, #24]
 8014716:	9f08      	ldr	r7, [sp, #32]
 8014718:	4645      	mov	r5, r8
 801471a:	e74c      	b.n	80145b6 <_dtoa_r+0x76e>
 801471c:	9a06      	ldr	r2, [sp, #24]
 801471e:	e775      	b.n	801460c <_dtoa_r+0x7c4>
 8014720:	9b05      	ldr	r3, [sp, #20]
 8014722:	2b01      	cmp	r3, #1
 8014724:	dc18      	bgt.n	8014758 <_dtoa_r+0x910>
 8014726:	9b02      	ldr	r3, [sp, #8]
 8014728:	b9b3      	cbnz	r3, 8014758 <_dtoa_r+0x910>
 801472a:	9b03      	ldr	r3, [sp, #12]
 801472c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014730:	b9a3      	cbnz	r3, 801475c <_dtoa_r+0x914>
 8014732:	9b03      	ldr	r3, [sp, #12]
 8014734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014738:	0d1b      	lsrs	r3, r3, #20
 801473a:	051b      	lsls	r3, r3, #20
 801473c:	b12b      	cbz	r3, 801474a <_dtoa_r+0x902>
 801473e:	9b04      	ldr	r3, [sp, #16]
 8014740:	3301      	adds	r3, #1
 8014742:	9304      	str	r3, [sp, #16]
 8014744:	f108 0801 	add.w	r8, r8, #1
 8014748:	2301      	movs	r3, #1
 801474a:	9306      	str	r3, [sp, #24]
 801474c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801474e:	2b00      	cmp	r3, #0
 8014750:	f47f af74 	bne.w	801463c <_dtoa_r+0x7f4>
 8014754:	2001      	movs	r0, #1
 8014756:	e779      	b.n	801464c <_dtoa_r+0x804>
 8014758:	2300      	movs	r3, #0
 801475a:	e7f6      	b.n	801474a <_dtoa_r+0x902>
 801475c:	9b02      	ldr	r3, [sp, #8]
 801475e:	e7f4      	b.n	801474a <_dtoa_r+0x902>
 8014760:	d085      	beq.n	801466e <_dtoa_r+0x826>
 8014762:	4618      	mov	r0, r3
 8014764:	301c      	adds	r0, #28
 8014766:	e77d      	b.n	8014664 <_dtoa_r+0x81c>
 8014768:	40240000 	.word	0x40240000
 801476c:	9b01      	ldr	r3, [sp, #4]
 801476e:	2b00      	cmp	r3, #0
 8014770:	dc38      	bgt.n	80147e4 <_dtoa_r+0x99c>
 8014772:	9b05      	ldr	r3, [sp, #20]
 8014774:	2b02      	cmp	r3, #2
 8014776:	dd35      	ble.n	80147e4 <_dtoa_r+0x99c>
 8014778:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801477c:	f1b9 0f00 	cmp.w	r9, #0
 8014780:	d10d      	bne.n	801479e <_dtoa_r+0x956>
 8014782:	4631      	mov	r1, r6
 8014784:	464b      	mov	r3, r9
 8014786:	2205      	movs	r2, #5
 8014788:	4620      	mov	r0, r4
 801478a:	f000 fb0d 	bl	8014da8 <__multadd>
 801478e:	4601      	mov	r1, r0
 8014790:	4606      	mov	r6, r0
 8014792:	4658      	mov	r0, fp
 8014794:	f000 fd24 	bl	80151e0 <__mcmp>
 8014798:	2800      	cmp	r0, #0
 801479a:	f73f adbd 	bgt.w	8014318 <_dtoa_r+0x4d0>
 801479e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147a0:	9d00      	ldr	r5, [sp, #0]
 80147a2:	ea6f 0a03 	mvn.w	sl, r3
 80147a6:	f04f 0800 	mov.w	r8, #0
 80147aa:	4631      	mov	r1, r6
 80147ac:	4620      	mov	r0, r4
 80147ae:	f000 fad9 	bl	8014d64 <_Bfree>
 80147b2:	2f00      	cmp	r7, #0
 80147b4:	f43f aeb4 	beq.w	8014520 <_dtoa_r+0x6d8>
 80147b8:	f1b8 0f00 	cmp.w	r8, #0
 80147bc:	d005      	beq.n	80147ca <_dtoa_r+0x982>
 80147be:	45b8      	cmp	r8, r7
 80147c0:	d003      	beq.n	80147ca <_dtoa_r+0x982>
 80147c2:	4641      	mov	r1, r8
 80147c4:	4620      	mov	r0, r4
 80147c6:	f000 facd 	bl	8014d64 <_Bfree>
 80147ca:	4639      	mov	r1, r7
 80147cc:	4620      	mov	r0, r4
 80147ce:	f000 fac9 	bl	8014d64 <_Bfree>
 80147d2:	e6a5      	b.n	8014520 <_dtoa_r+0x6d8>
 80147d4:	2600      	movs	r6, #0
 80147d6:	4637      	mov	r7, r6
 80147d8:	e7e1      	b.n	801479e <_dtoa_r+0x956>
 80147da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80147dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80147e0:	4637      	mov	r7, r6
 80147e2:	e599      	b.n	8014318 <_dtoa_r+0x4d0>
 80147e4:	9b08      	ldr	r3, [sp, #32]
 80147e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	f000 80fd 	beq.w	80149ea <_dtoa_r+0xba2>
 80147f0:	2d00      	cmp	r5, #0
 80147f2:	dd05      	ble.n	8014800 <_dtoa_r+0x9b8>
 80147f4:	4639      	mov	r1, r7
 80147f6:	462a      	mov	r2, r5
 80147f8:	4620      	mov	r0, r4
 80147fa:	f000 fc85 	bl	8015108 <__lshift>
 80147fe:	4607      	mov	r7, r0
 8014800:	9b06      	ldr	r3, [sp, #24]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d05c      	beq.n	80148c0 <_dtoa_r+0xa78>
 8014806:	6879      	ldr	r1, [r7, #4]
 8014808:	4620      	mov	r0, r4
 801480a:	f000 fa6b 	bl	8014ce4 <_Balloc>
 801480e:	4605      	mov	r5, r0
 8014810:	b928      	cbnz	r0, 801481e <_dtoa_r+0x9d6>
 8014812:	4b80      	ldr	r3, [pc, #512]	; (8014a14 <_dtoa_r+0xbcc>)
 8014814:	4602      	mov	r2, r0
 8014816:	f240 21ea 	movw	r1, #746	; 0x2ea
 801481a:	f7ff bb2e 	b.w	8013e7a <_dtoa_r+0x32>
 801481e:	693a      	ldr	r2, [r7, #16]
 8014820:	3202      	adds	r2, #2
 8014822:	0092      	lsls	r2, r2, #2
 8014824:	f107 010c 	add.w	r1, r7, #12
 8014828:	300c      	adds	r0, #12
 801482a:	f7fe fb12 	bl	8012e52 <memcpy>
 801482e:	2201      	movs	r2, #1
 8014830:	4629      	mov	r1, r5
 8014832:	4620      	mov	r0, r4
 8014834:	f000 fc68 	bl	8015108 <__lshift>
 8014838:	9b00      	ldr	r3, [sp, #0]
 801483a:	3301      	adds	r3, #1
 801483c:	9301      	str	r3, [sp, #4]
 801483e:	9b00      	ldr	r3, [sp, #0]
 8014840:	444b      	add	r3, r9
 8014842:	9307      	str	r3, [sp, #28]
 8014844:	9b02      	ldr	r3, [sp, #8]
 8014846:	f003 0301 	and.w	r3, r3, #1
 801484a:	46b8      	mov	r8, r7
 801484c:	9306      	str	r3, [sp, #24]
 801484e:	4607      	mov	r7, r0
 8014850:	9b01      	ldr	r3, [sp, #4]
 8014852:	4631      	mov	r1, r6
 8014854:	3b01      	subs	r3, #1
 8014856:	4658      	mov	r0, fp
 8014858:	9302      	str	r3, [sp, #8]
 801485a:	f7ff fa69 	bl	8013d30 <quorem>
 801485e:	4603      	mov	r3, r0
 8014860:	3330      	adds	r3, #48	; 0x30
 8014862:	9004      	str	r0, [sp, #16]
 8014864:	4641      	mov	r1, r8
 8014866:	4658      	mov	r0, fp
 8014868:	9308      	str	r3, [sp, #32]
 801486a:	f000 fcb9 	bl	80151e0 <__mcmp>
 801486e:	463a      	mov	r2, r7
 8014870:	4681      	mov	r9, r0
 8014872:	4631      	mov	r1, r6
 8014874:	4620      	mov	r0, r4
 8014876:	f000 fccf 	bl	8015218 <__mdiff>
 801487a:	68c2      	ldr	r2, [r0, #12]
 801487c:	9b08      	ldr	r3, [sp, #32]
 801487e:	4605      	mov	r5, r0
 8014880:	bb02      	cbnz	r2, 80148c4 <_dtoa_r+0xa7c>
 8014882:	4601      	mov	r1, r0
 8014884:	4658      	mov	r0, fp
 8014886:	f000 fcab 	bl	80151e0 <__mcmp>
 801488a:	9b08      	ldr	r3, [sp, #32]
 801488c:	4602      	mov	r2, r0
 801488e:	4629      	mov	r1, r5
 8014890:	4620      	mov	r0, r4
 8014892:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014896:	f000 fa65 	bl	8014d64 <_Bfree>
 801489a:	9b05      	ldr	r3, [sp, #20]
 801489c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801489e:	9d01      	ldr	r5, [sp, #4]
 80148a0:	ea43 0102 	orr.w	r1, r3, r2
 80148a4:	9b06      	ldr	r3, [sp, #24]
 80148a6:	430b      	orrs	r3, r1
 80148a8:	9b08      	ldr	r3, [sp, #32]
 80148aa:	d10d      	bne.n	80148c8 <_dtoa_r+0xa80>
 80148ac:	2b39      	cmp	r3, #57	; 0x39
 80148ae:	d029      	beq.n	8014904 <_dtoa_r+0xabc>
 80148b0:	f1b9 0f00 	cmp.w	r9, #0
 80148b4:	dd01      	ble.n	80148ba <_dtoa_r+0xa72>
 80148b6:	9b04      	ldr	r3, [sp, #16]
 80148b8:	3331      	adds	r3, #49	; 0x31
 80148ba:	9a02      	ldr	r2, [sp, #8]
 80148bc:	7013      	strb	r3, [r2, #0]
 80148be:	e774      	b.n	80147aa <_dtoa_r+0x962>
 80148c0:	4638      	mov	r0, r7
 80148c2:	e7b9      	b.n	8014838 <_dtoa_r+0x9f0>
 80148c4:	2201      	movs	r2, #1
 80148c6:	e7e2      	b.n	801488e <_dtoa_r+0xa46>
 80148c8:	f1b9 0f00 	cmp.w	r9, #0
 80148cc:	db06      	blt.n	80148dc <_dtoa_r+0xa94>
 80148ce:	9905      	ldr	r1, [sp, #20]
 80148d0:	ea41 0909 	orr.w	r9, r1, r9
 80148d4:	9906      	ldr	r1, [sp, #24]
 80148d6:	ea59 0101 	orrs.w	r1, r9, r1
 80148da:	d120      	bne.n	801491e <_dtoa_r+0xad6>
 80148dc:	2a00      	cmp	r2, #0
 80148de:	ddec      	ble.n	80148ba <_dtoa_r+0xa72>
 80148e0:	4659      	mov	r1, fp
 80148e2:	2201      	movs	r2, #1
 80148e4:	4620      	mov	r0, r4
 80148e6:	9301      	str	r3, [sp, #4]
 80148e8:	f000 fc0e 	bl	8015108 <__lshift>
 80148ec:	4631      	mov	r1, r6
 80148ee:	4683      	mov	fp, r0
 80148f0:	f000 fc76 	bl	80151e0 <__mcmp>
 80148f4:	2800      	cmp	r0, #0
 80148f6:	9b01      	ldr	r3, [sp, #4]
 80148f8:	dc02      	bgt.n	8014900 <_dtoa_r+0xab8>
 80148fa:	d1de      	bne.n	80148ba <_dtoa_r+0xa72>
 80148fc:	07da      	lsls	r2, r3, #31
 80148fe:	d5dc      	bpl.n	80148ba <_dtoa_r+0xa72>
 8014900:	2b39      	cmp	r3, #57	; 0x39
 8014902:	d1d8      	bne.n	80148b6 <_dtoa_r+0xa6e>
 8014904:	9a02      	ldr	r2, [sp, #8]
 8014906:	2339      	movs	r3, #57	; 0x39
 8014908:	7013      	strb	r3, [r2, #0]
 801490a:	462b      	mov	r3, r5
 801490c:	461d      	mov	r5, r3
 801490e:	3b01      	subs	r3, #1
 8014910:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014914:	2a39      	cmp	r2, #57	; 0x39
 8014916:	d050      	beq.n	80149ba <_dtoa_r+0xb72>
 8014918:	3201      	adds	r2, #1
 801491a:	701a      	strb	r2, [r3, #0]
 801491c:	e745      	b.n	80147aa <_dtoa_r+0x962>
 801491e:	2a00      	cmp	r2, #0
 8014920:	dd03      	ble.n	801492a <_dtoa_r+0xae2>
 8014922:	2b39      	cmp	r3, #57	; 0x39
 8014924:	d0ee      	beq.n	8014904 <_dtoa_r+0xabc>
 8014926:	3301      	adds	r3, #1
 8014928:	e7c7      	b.n	80148ba <_dtoa_r+0xa72>
 801492a:	9a01      	ldr	r2, [sp, #4]
 801492c:	9907      	ldr	r1, [sp, #28]
 801492e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014932:	428a      	cmp	r2, r1
 8014934:	d02a      	beq.n	801498c <_dtoa_r+0xb44>
 8014936:	4659      	mov	r1, fp
 8014938:	2300      	movs	r3, #0
 801493a:	220a      	movs	r2, #10
 801493c:	4620      	mov	r0, r4
 801493e:	f000 fa33 	bl	8014da8 <__multadd>
 8014942:	45b8      	cmp	r8, r7
 8014944:	4683      	mov	fp, r0
 8014946:	f04f 0300 	mov.w	r3, #0
 801494a:	f04f 020a 	mov.w	r2, #10
 801494e:	4641      	mov	r1, r8
 8014950:	4620      	mov	r0, r4
 8014952:	d107      	bne.n	8014964 <_dtoa_r+0xb1c>
 8014954:	f000 fa28 	bl	8014da8 <__multadd>
 8014958:	4680      	mov	r8, r0
 801495a:	4607      	mov	r7, r0
 801495c:	9b01      	ldr	r3, [sp, #4]
 801495e:	3301      	adds	r3, #1
 8014960:	9301      	str	r3, [sp, #4]
 8014962:	e775      	b.n	8014850 <_dtoa_r+0xa08>
 8014964:	f000 fa20 	bl	8014da8 <__multadd>
 8014968:	4639      	mov	r1, r7
 801496a:	4680      	mov	r8, r0
 801496c:	2300      	movs	r3, #0
 801496e:	220a      	movs	r2, #10
 8014970:	4620      	mov	r0, r4
 8014972:	f000 fa19 	bl	8014da8 <__multadd>
 8014976:	4607      	mov	r7, r0
 8014978:	e7f0      	b.n	801495c <_dtoa_r+0xb14>
 801497a:	f1b9 0f00 	cmp.w	r9, #0
 801497e:	9a00      	ldr	r2, [sp, #0]
 8014980:	bfcc      	ite	gt
 8014982:	464d      	movgt	r5, r9
 8014984:	2501      	movle	r5, #1
 8014986:	4415      	add	r5, r2
 8014988:	f04f 0800 	mov.w	r8, #0
 801498c:	4659      	mov	r1, fp
 801498e:	2201      	movs	r2, #1
 8014990:	4620      	mov	r0, r4
 8014992:	9301      	str	r3, [sp, #4]
 8014994:	f000 fbb8 	bl	8015108 <__lshift>
 8014998:	4631      	mov	r1, r6
 801499a:	4683      	mov	fp, r0
 801499c:	f000 fc20 	bl	80151e0 <__mcmp>
 80149a0:	2800      	cmp	r0, #0
 80149a2:	dcb2      	bgt.n	801490a <_dtoa_r+0xac2>
 80149a4:	d102      	bne.n	80149ac <_dtoa_r+0xb64>
 80149a6:	9b01      	ldr	r3, [sp, #4]
 80149a8:	07db      	lsls	r3, r3, #31
 80149aa:	d4ae      	bmi.n	801490a <_dtoa_r+0xac2>
 80149ac:	462b      	mov	r3, r5
 80149ae:	461d      	mov	r5, r3
 80149b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80149b4:	2a30      	cmp	r2, #48	; 0x30
 80149b6:	d0fa      	beq.n	80149ae <_dtoa_r+0xb66>
 80149b8:	e6f7      	b.n	80147aa <_dtoa_r+0x962>
 80149ba:	9a00      	ldr	r2, [sp, #0]
 80149bc:	429a      	cmp	r2, r3
 80149be:	d1a5      	bne.n	801490c <_dtoa_r+0xac4>
 80149c0:	f10a 0a01 	add.w	sl, sl, #1
 80149c4:	2331      	movs	r3, #49	; 0x31
 80149c6:	e779      	b.n	80148bc <_dtoa_r+0xa74>
 80149c8:	4b13      	ldr	r3, [pc, #76]	; (8014a18 <_dtoa_r+0xbd0>)
 80149ca:	f7ff baaf 	b.w	8013f2c <_dtoa_r+0xe4>
 80149ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	f47f aa86 	bne.w	8013ee2 <_dtoa_r+0x9a>
 80149d6:	4b11      	ldr	r3, [pc, #68]	; (8014a1c <_dtoa_r+0xbd4>)
 80149d8:	f7ff baa8 	b.w	8013f2c <_dtoa_r+0xe4>
 80149dc:	f1b9 0f00 	cmp.w	r9, #0
 80149e0:	dc03      	bgt.n	80149ea <_dtoa_r+0xba2>
 80149e2:	9b05      	ldr	r3, [sp, #20]
 80149e4:	2b02      	cmp	r3, #2
 80149e6:	f73f aec9 	bgt.w	801477c <_dtoa_r+0x934>
 80149ea:	9d00      	ldr	r5, [sp, #0]
 80149ec:	4631      	mov	r1, r6
 80149ee:	4658      	mov	r0, fp
 80149f0:	f7ff f99e 	bl	8013d30 <quorem>
 80149f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80149f8:	f805 3b01 	strb.w	r3, [r5], #1
 80149fc:	9a00      	ldr	r2, [sp, #0]
 80149fe:	1aaa      	subs	r2, r5, r2
 8014a00:	4591      	cmp	r9, r2
 8014a02:	ddba      	ble.n	801497a <_dtoa_r+0xb32>
 8014a04:	4659      	mov	r1, fp
 8014a06:	2300      	movs	r3, #0
 8014a08:	220a      	movs	r2, #10
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	f000 f9cc 	bl	8014da8 <__multadd>
 8014a10:	4683      	mov	fp, r0
 8014a12:	e7eb      	b.n	80149ec <_dtoa_r+0xba4>
 8014a14:	080166de 	.word	0x080166de
 8014a18:	0801659c 	.word	0x0801659c
 8014a1c:	08016672 	.word	0x08016672

08014a20 <__sflush_r>:
 8014a20:	898a      	ldrh	r2, [r1, #12]
 8014a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a26:	4605      	mov	r5, r0
 8014a28:	0710      	lsls	r0, r2, #28
 8014a2a:	460c      	mov	r4, r1
 8014a2c:	d458      	bmi.n	8014ae0 <__sflush_r+0xc0>
 8014a2e:	684b      	ldr	r3, [r1, #4]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	dc05      	bgt.n	8014a40 <__sflush_r+0x20>
 8014a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	dc02      	bgt.n	8014a40 <__sflush_r+0x20>
 8014a3a:	2000      	movs	r0, #0
 8014a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a42:	2e00      	cmp	r6, #0
 8014a44:	d0f9      	beq.n	8014a3a <__sflush_r+0x1a>
 8014a46:	2300      	movs	r3, #0
 8014a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014a4c:	682f      	ldr	r7, [r5, #0]
 8014a4e:	602b      	str	r3, [r5, #0]
 8014a50:	d032      	beq.n	8014ab8 <__sflush_r+0x98>
 8014a52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014a54:	89a3      	ldrh	r3, [r4, #12]
 8014a56:	075a      	lsls	r2, r3, #29
 8014a58:	d505      	bpl.n	8014a66 <__sflush_r+0x46>
 8014a5a:	6863      	ldr	r3, [r4, #4]
 8014a5c:	1ac0      	subs	r0, r0, r3
 8014a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014a60:	b10b      	cbz	r3, 8014a66 <__sflush_r+0x46>
 8014a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014a64:	1ac0      	subs	r0, r0, r3
 8014a66:	2300      	movs	r3, #0
 8014a68:	4602      	mov	r2, r0
 8014a6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a6c:	6a21      	ldr	r1, [r4, #32]
 8014a6e:	4628      	mov	r0, r5
 8014a70:	47b0      	blx	r6
 8014a72:	1c43      	adds	r3, r0, #1
 8014a74:	89a3      	ldrh	r3, [r4, #12]
 8014a76:	d106      	bne.n	8014a86 <__sflush_r+0x66>
 8014a78:	6829      	ldr	r1, [r5, #0]
 8014a7a:	291d      	cmp	r1, #29
 8014a7c:	d82c      	bhi.n	8014ad8 <__sflush_r+0xb8>
 8014a7e:	4a2a      	ldr	r2, [pc, #168]	; (8014b28 <__sflush_r+0x108>)
 8014a80:	40ca      	lsrs	r2, r1
 8014a82:	07d6      	lsls	r6, r2, #31
 8014a84:	d528      	bpl.n	8014ad8 <__sflush_r+0xb8>
 8014a86:	2200      	movs	r2, #0
 8014a88:	6062      	str	r2, [r4, #4]
 8014a8a:	04d9      	lsls	r1, r3, #19
 8014a8c:	6922      	ldr	r2, [r4, #16]
 8014a8e:	6022      	str	r2, [r4, #0]
 8014a90:	d504      	bpl.n	8014a9c <__sflush_r+0x7c>
 8014a92:	1c42      	adds	r2, r0, #1
 8014a94:	d101      	bne.n	8014a9a <__sflush_r+0x7a>
 8014a96:	682b      	ldr	r3, [r5, #0]
 8014a98:	b903      	cbnz	r3, 8014a9c <__sflush_r+0x7c>
 8014a9a:	6560      	str	r0, [r4, #84]	; 0x54
 8014a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a9e:	602f      	str	r7, [r5, #0]
 8014aa0:	2900      	cmp	r1, #0
 8014aa2:	d0ca      	beq.n	8014a3a <__sflush_r+0x1a>
 8014aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014aa8:	4299      	cmp	r1, r3
 8014aaa:	d002      	beq.n	8014ab2 <__sflush_r+0x92>
 8014aac:	4628      	mov	r0, r5
 8014aae:	f000 fca7 	bl	8015400 <_free_r>
 8014ab2:	2000      	movs	r0, #0
 8014ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8014ab6:	e7c1      	b.n	8014a3c <__sflush_r+0x1c>
 8014ab8:	6a21      	ldr	r1, [r4, #32]
 8014aba:	2301      	movs	r3, #1
 8014abc:	4628      	mov	r0, r5
 8014abe:	47b0      	blx	r6
 8014ac0:	1c41      	adds	r1, r0, #1
 8014ac2:	d1c7      	bne.n	8014a54 <__sflush_r+0x34>
 8014ac4:	682b      	ldr	r3, [r5, #0]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d0c4      	beq.n	8014a54 <__sflush_r+0x34>
 8014aca:	2b1d      	cmp	r3, #29
 8014acc:	d001      	beq.n	8014ad2 <__sflush_r+0xb2>
 8014ace:	2b16      	cmp	r3, #22
 8014ad0:	d101      	bne.n	8014ad6 <__sflush_r+0xb6>
 8014ad2:	602f      	str	r7, [r5, #0]
 8014ad4:	e7b1      	b.n	8014a3a <__sflush_r+0x1a>
 8014ad6:	89a3      	ldrh	r3, [r4, #12]
 8014ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014adc:	81a3      	strh	r3, [r4, #12]
 8014ade:	e7ad      	b.n	8014a3c <__sflush_r+0x1c>
 8014ae0:	690f      	ldr	r7, [r1, #16]
 8014ae2:	2f00      	cmp	r7, #0
 8014ae4:	d0a9      	beq.n	8014a3a <__sflush_r+0x1a>
 8014ae6:	0793      	lsls	r3, r2, #30
 8014ae8:	680e      	ldr	r6, [r1, #0]
 8014aea:	bf08      	it	eq
 8014aec:	694b      	ldreq	r3, [r1, #20]
 8014aee:	600f      	str	r7, [r1, #0]
 8014af0:	bf18      	it	ne
 8014af2:	2300      	movne	r3, #0
 8014af4:	eba6 0807 	sub.w	r8, r6, r7
 8014af8:	608b      	str	r3, [r1, #8]
 8014afa:	f1b8 0f00 	cmp.w	r8, #0
 8014afe:	dd9c      	ble.n	8014a3a <__sflush_r+0x1a>
 8014b00:	6a21      	ldr	r1, [r4, #32]
 8014b02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014b04:	4643      	mov	r3, r8
 8014b06:	463a      	mov	r2, r7
 8014b08:	4628      	mov	r0, r5
 8014b0a:	47b0      	blx	r6
 8014b0c:	2800      	cmp	r0, #0
 8014b0e:	dc06      	bgt.n	8014b1e <__sflush_r+0xfe>
 8014b10:	89a3      	ldrh	r3, [r4, #12]
 8014b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b16:	81a3      	strh	r3, [r4, #12]
 8014b18:	f04f 30ff 	mov.w	r0, #4294967295
 8014b1c:	e78e      	b.n	8014a3c <__sflush_r+0x1c>
 8014b1e:	4407      	add	r7, r0
 8014b20:	eba8 0800 	sub.w	r8, r8, r0
 8014b24:	e7e9      	b.n	8014afa <__sflush_r+0xda>
 8014b26:	bf00      	nop
 8014b28:	20400001 	.word	0x20400001

08014b2c <_fflush_r>:
 8014b2c:	b538      	push	{r3, r4, r5, lr}
 8014b2e:	690b      	ldr	r3, [r1, #16]
 8014b30:	4605      	mov	r5, r0
 8014b32:	460c      	mov	r4, r1
 8014b34:	b913      	cbnz	r3, 8014b3c <_fflush_r+0x10>
 8014b36:	2500      	movs	r5, #0
 8014b38:	4628      	mov	r0, r5
 8014b3a:	bd38      	pop	{r3, r4, r5, pc}
 8014b3c:	b118      	cbz	r0, 8014b46 <_fflush_r+0x1a>
 8014b3e:	6983      	ldr	r3, [r0, #24]
 8014b40:	b90b      	cbnz	r3, 8014b46 <_fflush_r+0x1a>
 8014b42:	f7fe f8c1 	bl	8012cc8 <__sinit>
 8014b46:	4b14      	ldr	r3, [pc, #80]	; (8014b98 <_fflush_r+0x6c>)
 8014b48:	429c      	cmp	r4, r3
 8014b4a:	d11b      	bne.n	8014b84 <_fflush_r+0x58>
 8014b4c:	686c      	ldr	r4, [r5, #4]
 8014b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d0ef      	beq.n	8014b36 <_fflush_r+0xa>
 8014b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014b58:	07d0      	lsls	r0, r2, #31
 8014b5a:	d404      	bmi.n	8014b66 <_fflush_r+0x3a>
 8014b5c:	0599      	lsls	r1, r3, #22
 8014b5e:	d402      	bmi.n	8014b66 <_fflush_r+0x3a>
 8014b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b62:	f7fe f974 	bl	8012e4e <__retarget_lock_acquire_recursive>
 8014b66:	4628      	mov	r0, r5
 8014b68:	4621      	mov	r1, r4
 8014b6a:	f7ff ff59 	bl	8014a20 <__sflush_r>
 8014b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b70:	07da      	lsls	r2, r3, #31
 8014b72:	4605      	mov	r5, r0
 8014b74:	d4e0      	bmi.n	8014b38 <_fflush_r+0xc>
 8014b76:	89a3      	ldrh	r3, [r4, #12]
 8014b78:	059b      	lsls	r3, r3, #22
 8014b7a:	d4dd      	bmi.n	8014b38 <_fflush_r+0xc>
 8014b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b7e:	f7fe f967 	bl	8012e50 <__retarget_lock_release_recursive>
 8014b82:	e7d9      	b.n	8014b38 <_fflush_r+0xc>
 8014b84:	4b05      	ldr	r3, [pc, #20]	; (8014b9c <_fflush_r+0x70>)
 8014b86:	429c      	cmp	r4, r3
 8014b88:	d101      	bne.n	8014b8e <_fflush_r+0x62>
 8014b8a:	68ac      	ldr	r4, [r5, #8]
 8014b8c:	e7df      	b.n	8014b4e <_fflush_r+0x22>
 8014b8e:	4b04      	ldr	r3, [pc, #16]	; (8014ba0 <_fflush_r+0x74>)
 8014b90:	429c      	cmp	r4, r3
 8014b92:	bf08      	it	eq
 8014b94:	68ec      	ldreq	r4, [r5, #12]
 8014b96:	e7da      	b.n	8014b4e <_fflush_r+0x22>
 8014b98:	08016548 	.word	0x08016548
 8014b9c:	08016568 	.word	0x08016568
 8014ba0:	08016528 	.word	0x08016528

08014ba4 <fiprintf>:
 8014ba4:	b40e      	push	{r1, r2, r3}
 8014ba6:	b503      	push	{r0, r1, lr}
 8014ba8:	4601      	mov	r1, r0
 8014baa:	ab03      	add	r3, sp, #12
 8014bac:	4805      	ldr	r0, [pc, #20]	; (8014bc4 <fiprintf+0x20>)
 8014bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bb2:	6800      	ldr	r0, [r0, #0]
 8014bb4:	9301      	str	r3, [sp, #4]
 8014bb6:	f000 fc9d 	bl	80154f4 <_vfiprintf_r>
 8014bba:	b002      	add	sp, #8
 8014bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014bc0:	b003      	add	sp, #12
 8014bc2:	4770      	bx	lr
 8014bc4:	20000510 	.word	0x20000510

08014bc8 <_localeconv_r>:
 8014bc8:	4800      	ldr	r0, [pc, #0]	; (8014bcc <_localeconv_r+0x4>)
 8014bca:	4770      	bx	lr
 8014bcc:	20000664 	.word	0x20000664

08014bd0 <_lseek_r>:
 8014bd0:	b538      	push	{r3, r4, r5, lr}
 8014bd2:	4d07      	ldr	r5, [pc, #28]	; (8014bf0 <_lseek_r+0x20>)
 8014bd4:	4604      	mov	r4, r0
 8014bd6:	4608      	mov	r0, r1
 8014bd8:	4611      	mov	r1, r2
 8014bda:	2200      	movs	r2, #0
 8014bdc:	602a      	str	r2, [r5, #0]
 8014bde:	461a      	mov	r2, r3
 8014be0:	f7ed fc8c 	bl	80024fc <_lseek>
 8014be4:	1c43      	adds	r3, r0, #1
 8014be6:	d102      	bne.n	8014bee <_lseek_r+0x1e>
 8014be8:	682b      	ldr	r3, [r5, #0]
 8014bea:	b103      	cbz	r3, 8014bee <_lseek_r+0x1e>
 8014bec:	6023      	str	r3, [r4, #0]
 8014bee:	bd38      	pop	{r3, r4, r5, pc}
 8014bf0:	20004f88 	.word	0x20004f88

08014bf4 <__swhatbuf_r>:
 8014bf4:	b570      	push	{r4, r5, r6, lr}
 8014bf6:	460e      	mov	r6, r1
 8014bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bfc:	2900      	cmp	r1, #0
 8014bfe:	b096      	sub	sp, #88	; 0x58
 8014c00:	4614      	mov	r4, r2
 8014c02:	461d      	mov	r5, r3
 8014c04:	da07      	bge.n	8014c16 <__swhatbuf_r+0x22>
 8014c06:	2300      	movs	r3, #0
 8014c08:	602b      	str	r3, [r5, #0]
 8014c0a:	89b3      	ldrh	r3, [r6, #12]
 8014c0c:	061a      	lsls	r2, r3, #24
 8014c0e:	d410      	bmi.n	8014c32 <__swhatbuf_r+0x3e>
 8014c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c14:	e00e      	b.n	8014c34 <__swhatbuf_r+0x40>
 8014c16:	466a      	mov	r2, sp
 8014c18:	f000 fdb6 	bl	8015788 <_fstat_r>
 8014c1c:	2800      	cmp	r0, #0
 8014c1e:	dbf2      	blt.n	8014c06 <__swhatbuf_r+0x12>
 8014c20:	9a01      	ldr	r2, [sp, #4]
 8014c22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014c26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014c2a:	425a      	negs	r2, r3
 8014c2c:	415a      	adcs	r2, r3
 8014c2e:	602a      	str	r2, [r5, #0]
 8014c30:	e7ee      	b.n	8014c10 <__swhatbuf_r+0x1c>
 8014c32:	2340      	movs	r3, #64	; 0x40
 8014c34:	2000      	movs	r0, #0
 8014c36:	6023      	str	r3, [r4, #0]
 8014c38:	b016      	add	sp, #88	; 0x58
 8014c3a:	bd70      	pop	{r4, r5, r6, pc}

08014c3c <__smakebuf_r>:
 8014c3c:	898b      	ldrh	r3, [r1, #12]
 8014c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014c40:	079d      	lsls	r5, r3, #30
 8014c42:	4606      	mov	r6, r0
 8014c44:	460c      	mov	r4, r1
 8014c46:	d507      	bpl.n	8014c58 <__smakebuf_r+0x1c>
 8014c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014c4c:	6023      	str	r3, [r4, #0]
 8014c4e:	6123      	str	r3, [r4, #16]
 8014c50:	2301      	movs	r3, #1
 8014c52:	6163      	str	r3, [r4, #20]
 8014c54:	b002      	add	sp, #8
 8014c56:	bd70      	pop	{r4, r5, r6, pc}
 8014c58:	ab01      	add	r3, sp, #4
 8014c5a:	466a      	mov	r2, sp
 8014c5c:	f7ff ffca 	bl	8014bf4 <__swhatbuf_r>
 8014c60:	9900      	ldr	r1, [sp, #0]
 8014c62:	4605      	mov	r5, r0
 8014c64:	4630      	mov	r0, r6
 8014c66:	f7fe f90b 	bl	8012e80 <_malloc_r>
 8014c6a:	b948      	cbnz	r0, 8014c80 <__smakebuf_r+0x44>
 8014c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c70:	059a      	lsls	r2, r3, #22
 8014c72:	d4ef      	bmi.n	8014c54 <__smakebuf_r+0x18>
 8014c74:	f023 0303 	bic.w	r3, r3, #3
 8014c78:	f043 0302 	orr.w	r3, r3, #2
 8014c7c:	81a3      	strh	r3, [r4, #12]
 8014c7e:	e7e3      	b.n	8014c48 <__smakebuf_r+0xc>
 8014c80:	4b0d      	ldr	r3, [pc, #52]	; (8014cb8 <__smakebuf_r+0x7c>)
 8014c82:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c84:	89a3      	ldrh	r3, [r4, #12]
 8014c86:	6020      	str	r0, [r4, #0]
 8014c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c8c:	81a3      	strh	r3, [r4, #12]
 8014c8e:	9b00      	ldr	r3, [sp, #0]
 8014c90:	6163      	str	r3, [r4, #20]
 8014c92:	9b01      	ldr	r3, [sp, #4]
 8014c94:	6120      	str	r0, [r4, #16]
 8014c96:	b15b      	cbz	r3, 8014cb0 <__smakebuf_r+0x74>
 8014c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c9c:	4630      	mov	r0, r6
 8014c9e:	f000 fd85 	bl	80157ac <_isatty_r>
 8014ca2:	b128      	cbz	r0, 8014cb0 <__smakebuf_r+0x74>
 8014ca4:	89a3      	ldrh	r3, [r4, #12]
 8014ca6:	f023 0303 	bic.w	r3, r3, #3
 8014caa:	f043 0301 	orr.w	r3, r3, #1
 8014cae:	81a3      	strh	r3, [r4, #12]
 8014cb0:	89a0      	ldrh	r0, [r4, #12]
 8014cb2:	4305      	orrs	r5, r0
 8014cb4:	81a5      	strh	r5, [r4, #12]
 8014cb6:	e7cd      	b.n	8014c54 <__smakebuf_r+0x18>
 8014cb8:	08012c61 	.word	0x08012c61

08014cbc <malloc>:
 8014cbc:	4b02      	ldr	r3, [pc, #8]	; (8014cc8 <malloc+0xc>)
 8014cbe:	4601      	mov	r1, r0
 8014cc0:	6818      	ldr	r0, [r3, #0]
 8014cc2:	f7fe b8dd 	b.w	8012e80 <_malloc_r>
 8014cc6:	bf00      	nop
 8014cc8:	20000510 	.word	0x20000510

08014ccc <__malloc_lock>:
 8014ccc:	4801      	ldr	r0, [pc, #4]	; (8014cd4 <__malloc_lock+0x8>)
 8014cce:	f7fe b8be 	b.w	8012e4e <__retarget_lock_acquire_recursive>
 8014cd2:	bf00      	nop
 8014cd4:	20004f80 	.word	0x20004f80

08014cd8 <__malloc_unlock>:
 8014cd8:	4801      	ldr	r0, [pc, #4]	; (8014ce0 <__malloc_unlock+0x8>)
 8014cda:	f7fe b8b9 	b.w	8012e50 <__retarget_lock_release_recursive>
 8014cde:	bf00      	nop
 8014ce0:	20004f80 	.word	0x20004f80

08014ce4 <_Balloc>:
 8014ce4:	b570      	push	{r4, r5, r6, lr}
 8014ce6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014ce8:	4604      	mov	r4, r0
 8014cea:	460d      	mov	r5, r1
 8014cec:	b976      	cbnz	r6, 8014d0c <_Balloc+0x28>
 8014cee:	2010      	movs	r0, #16
 8014cf0:	f7ff ffe4 	bl	8014cbc <malloc>
 8014cf4:	4602      	mov	r2, r0
 8014cf6:	6260      	str	r0, [r4, #36]	; 0x24
 8014cf8:	b920      	cbnz	r0, 8014d04 <_Balloc+0x20>
 8014cfa:	4b18      	ldr	r3, [pc, #96]	; (8014d5c <_Balloc+0x78>)
 8014cfc:	4818      	ldr	r0, [pc, #96]	; (8014d60 <_Balloc+0x7c>)
 8014cfe:	2166      	movs	r1, #102	; 0x66
 8014d00:	f7fe ffe8 	bl	8013cd4 <__assert_func>
 8014d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014d08:	6006      	str	r6, [r0, #0]
 8014d0a:	60c6      	str	r6, [r0, #12]
 8014d0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014d0e:	68f3      	ldr	r3, [r6, #12]
 8014d10:	b183      	cbz	r3, 8014d34 <_Balloc+0x50>
 8014d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d14:	68db      	ldr	r3, [r3, #12]
 8014d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014d1a:	b9b8      	cbnz	r0, 8014d4c <_Balloc+0x68>
 8014d1c:	2101      	movs	r1, #1
 8014d1e:	fa01 f605 	lsl.w	r6, r1, r5
 8014d22:	1d72      	adds	r2, r6, #5
 8014d24:	0092      	lsls	r2, r2, #2
 8014d26:	4620      	mov	r0, r4
 8014d28:	f000 fb5a 	bl	80153e0 <_calloc_r>
 8014d2c:	b160      	cbz	r0, 8014d48 <_Balloc+0x64>
 8014d2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014d32:	e00e      	b.n	8014d52 <_Balloc+0x6e>
 8014d34:	2221      	movs	r2, #33	; 0x21
 8014d36:	2104      	movs	r1, #4
 8014d38:	4620      	mov	r0, r4
 8014d3a:	f000 fb51 	bl	80153e0 <_calloc_r>
 8014d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d40:	60f0      	str	r0, [r6, #12]
 8014d42:	68db      	ldr	r3, [r3, #12]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d1e4      	bne.n	8014d12 <_Balloc+0x2e>
 8014d48:	2000      	movs	r0, #0
 8014d4a:	bd70      	pop	{r4, r5, r6, pc}
 8014d4c:	6802      	ldr	r2, [r0, #0]
 8014d4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014d52:	2300      	movs	r3, #0
 8014d54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014d58:	e7f7      	b.n	8014d4a <_Balloc+0x66>
 8014d5a:	bf00      	nop
 8014d5c:	080165c0 	.word	0x080165c0
 8014d60:	080166ef 	.word	0x080166ef

08014d64 <_Bfree>:
 8014d64:	b570      	push	{r4, r5, r6, lr}
 8014d66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014d68:	4605      	mov	r5, r0
 8014d6a:	460c      	mov	r4, r1
 8014d6c:	b976      	cbnz	r6, 8014d8c <_Bfree+0x28>
 8014d6e:	2010      	movs	r0, #16
 8014d70:	f7ff ffa4 	bl	8014cbc <malloc>
 8014d74:	4602      	mov	r2, r0
 8014d76:	6268      	str	r0, [r5, #36]	; 0x24
 8014d78:	b920      	cbnz	r0, 8014d84 <_Bfree+0x20>
 8014d7a:	4b09      	ldr	r3, [pc, #36]	; (8014da0 <_Bfree+0x3c>)
 8014d7c:	4809      	ldr	r0, [pc, #36]	; (8014da4 <_Bfree+0x40>)
 8014d7e:	218a      	movs	r1, #138	; 0x8a
 8014d80:	f7fe ffa8 	bl	8013cd4 <__assert_func>
 8014d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014d88:	6006      	str	r6, [r0, #0]
 8014d8a:	60c6      	str	r6, [r0, #12]
 8014d8c:	b13c      	cbz	r4, 8014d9e <_Bfree+0x3a>
 8014d8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014d90:	6862      	ldr	r2, [r4, #4]
 8014d92:	68db      	ldr	r3, [r3, #12]
 8014d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014d98:	6021      	str	r1, [r4, #0]
 8014d9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014d9e:	bd70      	pop	{r4, r5, r6, pc}
 8014da0:	080165c0 	.word	0x080165c0
 8014da4:	080166ef 	.word	0x080166ef

08014da8 <__multadd>:
 8014da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dac:	690e      	ldr	r6, [r1, #16]
 8014dae:	4607      	mov	r7, r0
 8014db0:	4698      	mov	r8, r3
 8014db2:	460c      	mov	r4, r1
 8014db4:	f101 0014 	add.w	r0, r1, #20
 8014db8:	2300      	movs	r3, #0
 8014dba:	6805      	ldr	r5, [r0, #0]
 8014dbc:	b2a9      	uxth	r1, r5
 8014dbe:	fb02 8101 	mla	r1, r2, r1, r8
 8014dc2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014dc6:	0c2d      	lsrs	r5, r5, #16
 8014dc8:	fb02 c505 	mla	r5, r2, r5, ip
 8014dcc:	b289      	uxth	r1, r1
 8014dce:	3301      	adds	r3, #1
 8014dd0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014dd4:	429e      	cmp	r6, r3
 8014dd6:	f840 1b04 	str.w	r1, [r0], #4
 8014dda:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014dde:	dcec      	bgt.n	8014dba <__multadd+0x12>
 8014de0:	f1b8 0f00 	cmp.w	r8, #0
 8014de4:	d022      	beq.n	8014e2c <__multadd+0x84>
 8014de6:	68a3      	ldr	r3, [r4, #8]
 8014de8:	42b3      	cmp	r3, r6
 8014dea:	dc19      	bgt.n	8014e20 <__multadd+0x78>
 8014dec:	6861      	ldr	r1, [r4, #4]
 8014dee:	4638      	mov	r0, r7
 8014df0:	3101      	adds	r1, #1
 8014df2:	f7ff ff77 	bl	8014ce4 <_Balloc>
 8014df6:	4605      	mov	r5, r0
 8014df8:	b928      	cbnz	r0, 8014e06 <__multadd+0x5e>
 8014dfa:	4602      	mov	r2, r0
 8014dfc:	4b0d      	ldr	r3, [pc, #52]	; (8014e34 <__multadd+0x8c>)
 8014dfe:	480e      	ldr	r0, [pc, #56]	; (8014e38 <__multadd+0x90>)
 8014e00:	21b5      	movs	r1, #181	; 0xb5
 8014e02:	f7fe ff67 	bl	8013cd4 <__assert_func>
 8014e06:	6922      	ldr	r2, [r4, #16]
 8014e08:	3202      	adds	r2, #2
 8014e0a:	f104 010c 	add.w	r1, r4, #12
 8014e0e:	0092      	lsls	r2, r2, #2
 8014e10:	300c      	adds	r0, #12
 8014e12:	f7fe f81e 	bl	8012e52 <memcpy>
 8014e16:	4621      	mov	r1, r4
 8014e18:	4638      	mov	r0, r7
 8014e1a:	f7ff ffa3 	bl	8014d64 <_Bfree>
 8014e1e:	462c      	mov	r4, r5
 8014e20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014e24:	3601      	adds	r6, #1
 8014e26:	f8c3 8014 	str.w	r8, [r3, #20]
 8014e2a:	6126      	str	r6, [r4, #16]
 8014e2c:	4620      	mov	r0, r4
 8014e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e32:	bf00      	nop
 8014e34:	080166de 	.word	0x080166de
 8014e38:	080166ef 	.word	0x080166ef

08014e3c <__hi0bits>:
 8014e3c:	0c03      	lsrs	r3, r0, #16
 8014e3e:	041b      	lsls	r3, r3, #16
 8014e40:	b9d3      	cbnz	r3, 8014e78 <__hi0bits+0x3c>
 8014e42:	0400      	lsls	r0, r0, #16
 8014e44:	2310      	movs	r3, #16
 8014e46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014e4a:	bf04      	itt	eq
 8014e4c:	0200      	lsleq	r0, r0, #8
 8014e4e:	3308      	addeq	r3, #8
 8014e50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014e54:	bf04      	itt	eq
 8014e56:	0100      	lsleq	r0, r0, #4
 8014e58:	3304      	addeq	r3, #4
 8014e5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014e5e:	bf04      	itt	eq
 8014e60:	0080      	lsleq	r0, r0, #2
 8014e62:	3302      	addeq	r3, #2
 8014e64:	2800      	cmp	r0, #0
 8014e66:	db05      	blt.n	8014e74 <__hi0bits+0x38>
 8014e68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014e6c:	f103 0301 	add.w	r3, r3, #1
 8014e70:	bf08      	it	eq
 8014e72:	2320      	moveq	r3, #32
 8014e74:	4618      	mov	r0, r3
 8014e76:	4770      	bx	lr
 8014e78:	2300      	movs	r3, #0
 8014e7a:	e7e4      	b.n	8014e46 <__hi0bits+0xa>

08014e7c <__lo0bits>:
 8014e7c:	6803      	ldr	r3, [r0, #0]
 8014e7e:	f013 0207 	ands.w	r2, r3, #7
 8014e82:	4601      	mov	r1, r0
 8014e84:	d00b      	beq.n	8014e9e <__lo0bits+0x22>
 8014e86:	07da      	lsls	r2, r3, #31
 8014e88:	d424      	bmi.n	8014ed4 <__lo0bits+0x58>
 8014e8a:	0798      	lsls	r0, r3, #30
 8014e8c:	bf49      	itett	mi
 8014e8e:	085b      	lsrmi	r3, r3, #1
 8014e90:	089b      	lsrpl	r3, r3, #2
 8014e92:	2001      	movmi	r0, #1
 8014e94:	600b      	strmi	r3, [r1, #0]
 8014e96:	bf5c      	itt	pl
 8014e98:	600b      	strpl	r3, [r1, #0]
 8014e9a:	2002      	movpl	r0, #2
 8014e9c:	4770      	bx	lr
 8014e9e:	b298      	uxth	r0, r3
 8014ea0:	b9b0      	cbnz	r0, 8014ed0 <__lo0bits+0x54>
 8014ea2:	0c1b      	lsrs	r3, r3, #16
 8014ea4:	2010      	movs	r0, #16
 8014ea6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014eaa:	bf04      	itt	eq
 8014eac:	0a1b      	lsreq	r3, r3, #8
 8014eae:	3008      	addeq	r0, #8
 8014eb0:	071a      	lsls	r2, r3, #28
 8014eb2:	bf04      	itt	eq
 8014eb4:	091b      	lsreq	r3, r3, #4
 8014eb6:	3004      	addeq	r0, #4
 8014eb8:	079a      	lsls	r2, r3, #30
 8014eba:	bf04      	itt	eq
 8014ebc:	089b      	lsreq	r3, r3, #2
 8014ebe:	3002      	addeq	r0, #2
 8014ec0:	07da      	lsls	r2, r3, #31
 8014ec2:	d403      	bmi.n	8014ecc <__lo0bits+0x50>
 8014ec4:	085b      	lsrs	r3, r3, #1
 8014ec6:	f100 0001 	add.w	r0, r0, #1
 8014eca:	d005      	beq.n	8014ed8 <__lo0bits+0x5c>
 8014ecc:	600b      	str	r3, [r1, #0]
 8014ece:	4770      	bx	lr
 8014ed0:	4610      	mov	r0, r2
 8014ed2:	e7e8      	b.n	8014ea6 <__lo0bits+0x2a>
 8014ed4:	2000      	movs	r0, #0
 8014ed6:	4770      	bx	lr
 8014ed8:	2020      	movs	r0, #32
 8014eda:	4770      	bx	lr

08014edc <__i2b>:
 8014edc:	b510      	push	{r4, lr}
 8014ede:	460c      	mov	r4, r1
 8014ee0:	2101      	movs	r1, #1
 8014ee2:	f7ff feff 	bl	8014ce4 <_Balloc>
 8014ee6:	4602      	mov	r2, r0
 8014ee8:	b928      	cbnz	r0, 8014ef6 <__i2b+0x1a>
 8014eea:	4b05      	ldr	r3, [pc, #20]	; (8014f00 <__i2b+0x24>)
 8014eec:	4805      	ldr	r0, [pc, #20]	; (8014f04 <__i2b+0x28>)
 8014eee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014ef2:	f7fe feef 	bl	8013cd4 <__assert_func>
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	6144      	str	r4, [r0, #20]
 8014efa:	6103      	str	r3, [r0, #16]
 8014efc:	bd10      	pop	{r4, pc}
 8014efe:	bf00      	nop
 8014f00:	080166de 	.word	0x080166de
 8014f04:	080166ef 	.word	0x080166ef

08014f08 <__multiply>:
 8014f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f0c:	4614      	mov	r4, r2
 8014f0e:	690a      	ldr	r2, [r1, #16]
 8014f10:	6923      	ldr	r3, [r4, #16]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	bfb8      	it	lt
 8014f16:	460b      	movlt	r3, r1
 8014f18:	460d      	mov	r5, r1
 8014f1a:	bfbc      	itt	lt
 8014f1c:	4625      	movlt	r5, r4
 8014f1e:	461c      	movlt	r4, r3
 8014f20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014f24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014f28:	68ab      	ldr	r3, [r5, #8]
 8014f2a:	6869      	ldr	r1, [r5, #4]
 8014f2c:	eb0a 0709 	add.w	r7, sl, r9
 8014f30:	42bb      	cmp	r3, r7
 8014f32:	b085      	sub	sp, #20
 8014f34:	bfb8      	it	lt
 8014f36:	3101      	addlt	r1, #1
 8014f38:	f7ff fed4 	bl	8014ce4 <_Balloc>
 8014f3c:	b930      	cbnz	r0, 8014f4c <__multiply+0x44>
 8014f3e:	4602      	mov	r2, r0
 8014f40:	4b42      	ldr	r3, [pc, #264]	; (801504c <__multiply+0x144>)
 8014f42:	4843      	ldr	r0, [pc, #268]	; (8015050 <__multiply+0x148>)
 8014f44:	f240 115d 	movw	r1, #349	; 0x15d
 8014f48:	f7fe fec4 	bl	8013cd4 <__assert_func>
 8014f4c:	f100 0614 	add.w	r6, r0, #20
 8014f50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014f54:	4633      	mov	r3, r6
 8014f56:	2200      	movs	r2, #0
 8014f58:	4543      	cmp	r3, r8
 8014f5a:	d31e      	bcc.n	8014f9a <__multiply+0x92>
 8014f5c:	f105 0c14 	add.w	ip, r5, #20
 8014f60:	f104 0314 	add.w	r3, r4, #20
 8014f64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014f68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014f6c:	9202      	str	r2, [sp, #8]
 8014f6e:	ebac 0205 	sub.w	r2, ip, r5
 8014f72:	3a15      	subs	r2, #21
 8014f74:	f022 0203 	bic.w	r2, r2, #3
 8014f78:	3204      	adds	r2, #4
 8014f7a:	f105 0115 	add.w	r1, r5, #21
 8014f7e:	458c      	cmp	ip, r1
 8014f80:	bf38      	it	cc
 8014f82:	2204      	movcc	r2, #4
 8014f84:	9201      	str	r2, [sp, #4]
 8014f86:	9a02      	ldr	r2, [sp, #8]
 8014f88:	9303      	str	r3, [sp, #12]
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d808      	bhi.n	8014fa0 <__multiply+0x98>
 8014f8e:	2f00      	cmp	r7, #0
 8014f90:	dc55      	bgt.n	801503e <__multiply+0x136>
 8014f92:	6107      	str	r7, [r0, #16]
 8014f94:	b005      	add	sp, #20
 8014f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f9a:	f843 2b04 	str.w	r2, [r3], #4
 8014f9e:	e7db      	b.n	8014f58 <__multiply+0x50>
 8014fa0:	f8b3 a000 	ldrh.w	sl, [r3]
 8014fa4:	f1ba 0f00 	cmp.w	sl, #0
 8014fa8:	d020      	beq.n	8014fec <__multiply+0xe4>
 8014faa:	f105 0e14 	add.w	lr, r5, #20
 8014fae:	46b1      	mov	r9, r6
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014fb6:	f8d9 b000 	ldr.w	fp, [r9]
 8014fba:	b2a1      	uxth	r1, r4
 8014fbc:	fa1f fb8b 	uxth.w	fp, fp
 8014fc0:	fb0a b101 	mla	r1, sl, r1, fp
 8014fc4:	4411      	add	r1, r2
 8014fc6:	f8d9 2000 	ldr.w	r2, [r9]
 8014fca:	0c24      	lsrs	r4, r4, #16
 8014fcc:	0c12      	lsrs	r2, r2, #16
 8014fce:	fb0a 2404 	mla	r4, sl, r4, r2
 8014fd2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014fd6:	b289      	uxth	r1, r1
 8014fd8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014fdc:	45f4      	cmp	ip, lr
 8014fde:	f849 1b04 	str.w	r1, [r9], #4
 8014fe2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014fe6:	d8e4      	bhi.n	8014fb2 <__multiply+0xaa>
 8014fe8:	9901      	ldr	r1, [sp, #4]
 8014fea:	5072      	str	r2, [r6, r1]
 8014fec:	9a03      	ldr	r2, [sp, #12]
 8014fee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014ff2:	3304      	adds	r3, #4
 8014ff4:	f1b9 0f00 	cmp.w	r9, #0
 8014ff8:	d01f      	beq.n	801503a <__multiply+0x132>
 8014ffa:	6834      	ldr	r4, [r6, #0]
 8014ffc:	f105 0114 	add.w	r1, r5, #20
 8015000:	46b6      	mov	lr, r6
 8015002:	f04f 0a00 	mov.w	sl, #0
 8015006:	880a      	ldrh	r2, [r1, #0]
 8015008:	f8be b002 	ldrh.w	fp, [lr, #2]
 801500c:	fb09 b202 	mla	r2, r9, r2, fp
 8015010:	4492      	add	sl, r2
 8015012:	b2a4      	uxth	r4, r4
 8015014:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015018:	f84e 4b04 	str.w	r4, [lr], #4
 801501c:	f851 4b04 	ldr.w	r4, [r1], #4
 8015020:	f8be 2000 	ldrh.w	r2, [lr]
 8015024:	0c24      	lsrs	r4, r4, #16
 8015026:	fb09 2404 	mla	r4, r9, r4, r2
 801502a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801502e:	458c      	cmp	ip, r1
 8015030:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015034:	d8e7      	bhi.n	8015006 <__multiply+0xfe>
 8015036:	9a01      	ldr	r2, [sp, #4]
 8015038:	50b4      	str	r4, [r6, r2]
 801503a:	3604      	adds	r6, #4
 801503c:	e7a3      	b.n	8014f86 <__multiply+0x7e>
 801503e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015042:	2b00      	cmp	r3, #0
 8015044:	d1a5      	bne.n	8014f92 <__multiply+0x8a>
 8015046:	3f01      	subs	r7, #1
 8015048:	e7a1      	b.n	8014f8e <__multiply+0x86>
 801504a:	bf00      	nop
 801504c:	080166de 	.word	0x080166de
 8015050:	080166ef 	.word	0x080166ef

08015054 <__pow5mult>:
 8015054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015058:	4615      	mov	r5, r2
 801505a:	f012 0203 	ands.w	r2, r2, #3
 801505e:	4606      	mov	r6, r0
 8015060:	460f      	mov	r7, r1
 8015062:	d007      	beq.n	8015074 <__pow5mult+0x20>
 8015064:	4c25      	ldr	r4, [pc, #148]	; (80150fc <__pow5mult+0xa8>)
 8015066:	3a01      	subs	r2, #1
 8015068:	2300      	movs	r3, #0
 801506a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801506e:	f7ff fe9b 	bl	8014da8 <__multadd>
 8015072:	4607      	mov	r7, r0
 8015074:	10ad      	asrs	r5, r5, #2
 8015076:	d03d      	beq.n	80150f4 <__pow5mult+0xa0>
 8015078:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801507a:	b97c      	cbnz	r4, 801509c <__pow5mult+0x48>
 801507c:	2010      	movs	r0, #16
 801507e:	f7ff fe1d 	bl	8014cbc <malloc>
 8015082:	4602      	mov	r2, r0
 8015084:	6270      	str	r0, [r6, #36]	; 0x24
 8015086:	b928      	cbnz	r0, 8015094 <__pow5mult+0x40>
 8015088:	4b1d      	ldr	r3, [pc, #116]	; (8015100 <__pow5mult+0xac>)
 801508a:	481e      	ldr	r0, [pc, #120]	; (8015104 <__pow5mult+0xb0>)
 801508c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015090:	f7fe fe20 	bl	8013cd4 <__assert_func>
 8015094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015098:	6004      	str	r4, [r0, #0]
 801509a:	60c4      	str	r4, [r0, #12]
 801509c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80150a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80150a4:	b94c      	cbnz	r4, 80150ba <__pow5mult+0x66>
 80150a6:	f240 2171 	movw	r1, #625	; 0x271
 80150aa:	4630      	mov	r0, r6
 80150ac:	f7ff ff16 	bl	8014edc <__i2b>
 80150b0:	2300      	movs	r3, #0
 80150b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80150b6:	4604      	mov	r4, r0
 80150b8:	6003      	str	r3, [r0, #0]
 80150ba:	f04f 0900 	mov.w	r9, #0
 80150be:	07eb      	lsls	r3, r5, #31
 80150c0:	d50a      	bpl.n	80150d8 <__pow5mult+0x84>
 80150c2:	4639      	mov	r1, r7
 80150c4:	4622      	mov	r2, r4
 80150c6:	4630      	mov	r0, r6
 80150c8:	f7ff ff1e 	bl	8014f08 <__multiply>
 80150cc:	4639      	mov	r1, r7
 80150ce:	4680      	mov	r8, r0
 80150d0:	4630      	mov	r0, r6
 80150d2:	f7ff fe47 	bl	8014d64 <_Bfree>
 80150d6:	4647      	mov	r7, r8
 80150d8:	106d      	asrs	r5, r5, #1
 80150da:	d00b      	beq.n	80150f4 <__pow5mult+0xa0>
 80150dc:	6820      	ldr	r0, [r4, #0]
 80150de:	b938      	cbnz	r0, 80150f0 <__pow5mult+0x9c>
 80150e0:	4622      	mov	r2, r4
 80150e2:	4621      	mov	r1, r4
 80150e4:	4630      	mov	r0, r6
 80150e6:	f7ff ff0f 	bl	8014f08 <__multiply>
 80150ea:	6020      	str	r0, [r4, #0]
 80150ec:	f8c0 9000 	str.w	r9, [r0]
 80150f0:	4604      	mov	r4, r0
 80150f2:	e7e4      	b.n	80150be <__pow5mult+0x6a>
 80150f4:	4638      	mov	r0, r7
 80150f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150fa:	bf00      	nop
 80150fc:	08016840 	.word	0x08016840
 8015100:	080165c0 	.word	0x080165c0
 8015104:	080166ef 	.word	0x080166ef

08015108 <__lshift>:
 8015108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801510c:	460c      	mov	r4, r1
 801510e:	6849      	ldr	r1, [r1, #4]
 8015110:	6923      	ldr	r3, [r4, #16]
 8015112:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015116:	68a3      	ldr	r3, [r4, #8]
 8015118:	4607      	mov	r7, r0
 801511a:	4691      	mov	r9, r2
 801511c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015120:	f108 0601 	add.w	r6, r8, #1
 8015124:	42b3      	cmp	r3, r6
 8015126:	db0b      	blt.n	8015140 <__lshift+0x38>
 8015128:	4638      	mov	r0, r7
 801512a:	f7ff fddb 	bl	8014ce4 <_Balloc>
 801512e:	4605      	mov	r5, r0
 8015130:	b948      	cbnz	r0, 8015146 <__lshift+0x3e>
 8015132:	4602      	mov	r2, r0
 8015134:	4b28      	ldr	r3, [pc, #160]	; (80151d8 <__lshift+0xd0>)
 8015136:	4829      	ldr	r0, [pc, #164]	; (80151dc <__lshift+0xd4>)
 8015138:	f240 11d9 	movw	r1, #473	; 0x1d9
 801513c:	f7fe fdca 	bl	8013cd4 <__assert_func>
 8015140:	3101      	adds	r1, #1
 8015142:	005b      	lsls	r3, r3, #1
 8015144:	e7ee      	b.n	8015124 <__lshift+0x1c>
 8015146:	2300      	movs	r3, #0
 8015148:	f100 0114 	add.w	r1, r0, #20
 801514c:	f100 0210 	add.w	r2, r0, #16
 8015150:	4618      	mov	r0, r3
 8015152:	4553      	cmp	r3, sl
 8015154:	db33      	blt.n	80151be <__lshift+0xb6>
 8015156:	6920      	ldr	r0, [r4, #16]
 8015158:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801515c:	f104 0314 	add.w	r3, r4, #20
 8015160:	f019 091f 	ands.w	r9, r9, #31
 8015164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015168:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801516c:	d02b      	beq.n	80151c6 <__lshift+0xbe>
 801516e:	f1c9 0e20 	rsb	lr, r9, #32
 8015172:	468a      	mov	sl, r1
 8015174:	2200      	movs	r2, #0
 8015176:	6818      	ldr	r0, [r3, #0]
 8015178:	fa00 f009 	lsl.w	r0, r0, r9
 801517c:	4302      	orrs	r2, r0
 801517e:	f84a 2b04 	str.w	r2, [sl], #4
 8015182:	f853 2b04 	ldr.w	r2, [r3], #4
 8015186:	459c      	cmp	ip, r3
 8015188:	fa22 f20e 	lsr.w	r2, r2, lr
 801518c:	d8f3      	bhi.n	8015176 <__lshift+0x6e>
 801518e:	ebac 0304 	sub.w	r3, ip, r4
 8015192:	3b15      	subs	r3, #21
 8015194:	f023 0303 	bic.w	r3, r3, #3
 8015198:	3304      	adds	r3, #4
 801519a:	f104 0015 	add.w	r0, r4, #21
 801519e:	4584      	cmp	ip, r0
 80151a0:	bf38      	it	cc
 80151a2:	2304      	movcc	r3, #4
 80151a4:	50ca      	str	r2, [r1, r3]
 80151a6:	b10a      	cbz	r2, 80151ac <__lshift+0xa4>
 80151a8:	f108 0602 	add.w	r6, r8, #2
 80151ac:	3e01      	subs	r6, #1
 80151ae:	4638      	mov	r0, r7
 80151b0:	612e      	str	r6, [r5, #16]
 80151b2:	4621      	mov	r1, r4
 80151b4:	f7ff fdd6 	bl	8014d64 <_Bfree>
 80151b8:	4628      	mov	r0, r5
 80151ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151be:	f842 0f04 	str.w	r0, [r2, #4]!
 80151c2:	3301      	adds	r3, #1
 80151c4:	e7c5      	b.n	8015152 <__lshift+0x4a>
 80151c6:	3904      	subs	r1, #4
 80151c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80151cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80151d0:	459c      	cmp	ip, r3
 80151d2:	d8f9      	bhi.n	80151c8 <__lshift+0xc0>
 80151d4:	e7ea      	b.n	80151ac <__lshift+0xa4>
 80151d6:	bf00      	nop
 80151d8:	080166de 	.word	0x080166de
 80151dc:	080166ef 	.word	0x080166ef

080151e0 <__mcmp>:
 80151e0:	b530      	push	{r4, r5, lr}
 80151e2:	6902      	ldr	r2, [r0, #16]
 80151e4:	690c      	ldr	r4, [r1, #16]
 80151e6:	1b12      	subs	r2, r2, r4
 80151e8:	d10e      	bne.n	8015208 <__mcmp+0x28>
 80151ea:	f100 0314 	add.w	r3, r0, #20
 80151ee:	3114      	adds	r1, #20
 80151f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80151f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80151f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80151fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015200:	42a5      	cmp	r5, r4
 8015202:	d003      	beq.n	801520c <__mcmp+0x2c>
 8015204:	d305      	bcc.n	8015212 <__mcmp+0x32>
 8015206:	2201      	movs	r2, #1
 8015208:	4610      	mov	r0, r2
 801520a:	bd30      	pop	{r4, r5, pc}
 801520c:	4283      	cmp	r3, r0
 801520e:	d3f3      	bcc.n	80151f8 <__mcmp+0x18>
 8015210:	e7fa      	b.n	8015208 <__mcmp+0x28>
 8015212:	f04f 32ff 	mov.w	r2, #4294967295
 8015216:	e7f7      	b.n	8015208 <__mcmp+0x28>

08015218 <__mdiff>:
 8015218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521c:	460c      	mov	r4, r1
 801521e:	4606      	mov	r6, r0
 8015220:	4611      	mov	r1, r2
 8015222:	4620      	mov	r0, r4
 8015224:	4617      	mov	r7, r2
 8015226:	f7ff ffdb 	bl	80151e0 <__mcmp>
 801522a:	1e05      	subs	r5, r0, #0
 801522c:	d110      	bne.n	8015250 <__mdiff+0x38>
 801522e:	4629      	mov	r1, r5
 8015230:	4630      	mov	r0, r6
 8015232:	f7ff fd57 	bl	8014ce4 <_Balloc>
 8015236:	b930      	cbnz	r0, 8015246 <__mdiff+0x2e>
 8015238:	4b39      	ldr	r3, [pc, #228]	; (8015320 <__mdiff+0x108>)
 801523a:	4602      	mov	r2, r0
 801523c:	f240 2132 	movw	r1, #562	; 0x232
 8015240:	4838      	ldr	r0, [pc, #224]	; (8015324 <__mdiff+0x10c>)
 8015242:	f7fe fd47 	bl	8013cd4 <__assert_func>
 8015246:	2301      	movs	r3, #1
 8015248:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801524c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015250:	bfa4      	itt	ge
 8015252:	463b      	movge	r3, r7
 8015254:	4627      	movge	r7, r4
 8015256:	4630      	mov	r0, r6
 8015258:	6879      	ldr	r1, [r7, #4]
 801525a:	bfa6      	itte	ge
 801525c:	461c      	movge	r4, r3
 801525e:	2500      	movge	r5, #0
 8015260:	2501      	movlt	r5, #1
 8015262:	f7ff fd3f 	bl	8014ce4 <_Balloc>
 8015266:	b920      	cbnz	r0, 8015272 <__mdiff+0x5a>
 8015268:	4b2d      	ldr	r3, [pc, #180]	; (8015320 <__mdiff+0x108>)
 801526a:	4602      	mov	r2, r0
 801526c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015270:	e7e6      	b.n	8015240 <__mdiff+0x28>
 8015272:	693e      	ldr	r6, [r7, #16]
 8015274:	60c5      	str	r5, [r0, #12]
 8015276:	6925      	ldr	r5, [r4, #16]
 8015278:	f107 0114 	add.w	r1, r7, #20
 801527c:	f104 0914 	add.w	r9, r4, #20
 8015280:	f100 0e14 	add.w	lr, r0, #20
 8015284:	f107 0210 	add.w	r2, r7, #16
 8015288:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801528c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015290:	46f2      	mov	sl, lr
 8015292:	2700      	movs	r7, #0
 8015294:	f859 3b04 	ldr.w	r3, [r9], #4
 8015298:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801529c:	fa1f f883 	uxth.w	r8, r3
 80152a0:	fa17 f78b 	uxtah	r7, r7, fp
 80152a4:	0c1b      	lsrs	r3, r3, #16
 80152a6:	eba7 0808 	sub.w	r8, r7, r8
 80152aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80152ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80152b2:	fa1f f888 	uxth.w	r8, r8
 80152b6:	141f      	asrs	r7, r3, #16
 80152b8:	454d      	cmp	r5, r9
 80152ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80152be:	f84a 3b04 	str.w	r3, [sl], #4
 80152c2:	d8e7      	bhi.n	8015294 <__mdiff+0x7c>
 80152c4:	1b2b      	subs	r3, r5, r4
 80152c6:	3b15      	subs	r3, #21
 80152c8:	f023 0303 	bic.w	r3, r3, #3
 80152cc:	3304      	adds	r3, #4
 80152ce:	3415      	adds	r4, #21
 80152d0:	42a5      	cmp	r5, r4
 80152d2:	bf38      	it	cc
 80152d4:	2304      	movcc	r3, #4
 80152d6:	4419      	add	r1, r3
 80152d8:	4473      	add	r3, lr
 80152da:	469e      	mov	lr, r3
 80152dc:	460d      	mov	r5, r1
 80152de:	4565      	cmp	r5, ip
 80152e0:	d30e      	bcc.n	8015300 <__mdiff+0xe8>
 80152e2:	f10c 0203 	add.w	r2, ip, #3
 80152e6:	1a52      	subs	r2, r2, r1
 80152e8:	f022 0203 	bic.w	r2, r2, #3
 80152ec:	3903      	subs	r1, #3
 80152ee:	458c      	cmp	ip, r1
 80152f0:	bf38      	it	cc
 80152f2:	2200      	movcc	r2, #0
 80152f4:	441a      	add	r2, r3
 80152f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80152fa:	b17b      	cbz	r3, 801531c <__mdiff+0x104>
 80152fc:	6106      	str	r6, [r0, #16]
 80152fe:	e7a5      	b.n	801524c <__mdiff+0x34>
 8015300:	f855 8b04 	ldr.w	r8, [r5], #4
 8015304:	fa17 f488 	uxtah	r4, r7, r8
 8015308:	1422      	asrs	r2, r4, #16
 801530a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801530e:	b2a4      	uxth	r4, r4
 8015310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015314:	f84e 4b04 	str.w	r4, [lr], #4
 8015318:	1417      	asrs	r7, r2, #16
 801531a:	e7e0      	b.n	80152de <__mdiff+0xc6>
 801531c:	3e01      	subs	r6, #1
 801531e:	e7ea      	b.n	80152f6 <__mdiff+0xde>
 8015320:	080166de 	.word	0x080166de
 8015324:	080166ef 	.word	0x080166ef

08015328 <__d2b>:
 8015328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801532c:	4689      	mov	r9, r1
 801532e:	2101      	movs	r1, #1
 8015330:	ec57 6b10 	vmov	r6, r7, d0
 8015334:	4690      	mov	r8, r2
 8015336:	f7ff fcd5 	bl	8014ce4 <_Balloc>
 801533a:	4604      	mov	r4, r0
 801533c:	b930      	cbnz	r0, 801534c <__d2b+0x24>
 801533e:	4602      	mov	r2, r0
 8015340:	4b25      	ldr	r3, [pc, #148]	; (80153d8 <__d2b+0xb0>)
 8015342:	4826      	ldr	r0, [pc, #152]	; (80153dc <__d2b+0xb4>)
 8015344:	f240 310a 	movw	r1, #778	; 0x30a
 8015348:	f7fe fcc4 	bl	8013cd4 <__assert_func>
 801534c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015350:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015354:	bb35      	cbnz	r5, 80153a4 <__d2b+0x7c>
 8015356:	2e00      	cmp	r6, #0
 8015358:	9301      	str	r3, [sp, #4]
 801535a:	d028      	beq.n	80153ae <__d2b+0x86>
 801535c:	4668      	mov	r0, sp
 801535e:	9600      	str	r6, [sp, #0]
 8015360:	f7ff fd8c 	bl	8014e7c <__lo0bits>
 8015364:	9900      	ldr	r1, [sp, #0]
 8015366:	b300      	cbz	r0, 80153aa <__d2b+0x82>
 8015368:	9a01      	ldr	r2, [sp, #4]
 801536a:	f1c0 0320 	rsb	r3, r0, #32
 801536e:	fa02 f303 	lsl.w	r3, r2, r3
 8015372:	430b      	orrs	r3, r1
 8015374:	40c2      	lsrs	r2, r0
 8015376:	6163      	str	r3, [r4, #20]
 8015378:	9201      	str	r2, [sp, #4]
 801537a:	9b01      	ldr	r3, [sp, #4]
 801537c:	61a3      	str	r3, [r4, #24]
 801537e:	2b00      	cmp	r3, #0
 8015380:	bf14      	ite	ne
 8015382:	2202      	movne	r2, #2
 8015384:	2201      	moveq	r2, #1
 8015386:	6122      	str	r2, [r4, #16]
 8015388:	b1d5      	cbz	r5, 80153c0 <__d2b+0x98>
 801538a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801538e:	4405      	add	r5, r0
 8015390:	f8c9 5000 	str.w	r5, [r9]
 8015394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015398:	f8c8 0000 	str.w	r0, [r8]
 801539c:	4620      	mov	r0, r4
 801539e:	b003      	add	sp, #12
 80153a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80153a8:	e7d5      	b.n	8015356 <__d2b+0x2e>
 80153aa:	6161      	str	r1, [r4, #20]
 80153ac:	e7e5      	b.n	801537a <__d2b+0x52>
 80153ae:	a801      	add	r0, sp, #4
 80153b0:	f7ff fd64 	bl	8014e7c <__lo0bits>
 80153b4:	9b01      	ldr	r3, [sp, #4]
 80153b6:	6163      	str	r3, [r4, #20]
 80153b8:	2201      	movs	r2, #1
 80153ba:	6122      	str	r2, [r4, #16]
 80153bc:	3020      	adds	r0, #32
 80153be:	e7e3      	b.n	8015388 <__d2b+0x60>
 80153c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80153c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80153c8:	f8c9 0000 	str.w	r0, [r9]
 80153cc:	6918      	ldr	r0, [r3, #16]
 80153ce:	f7ff fd35 	bl	8014e3c <__hi0bits>
 80153d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80153d6:	e7df      	b.n	8015398 <__d2b+0x70>
 80153d8:	080166de 	.word	0x080166de
 80153dc:	080166ef 	.word	0x080166ef

080153e0 <_calloc_r>:
 80153e0:	b513      	push	{r0, r1, r4, lr}
 80153e2:	434a      	muls	r2, r1
 80153e4:	4611      	mov	r1, r2
 80153e6:	9201      	str	r2, [sp, #4]
 80153e8:	f7fd fd4a 	bl	8012e80 <_malloc_r>
 80153ec:	4604      	mov	r4, r0
 80153ee:	b118      	cbz	r0, 80153f8 <_calloc_r+0x18>
 80153f0:	9a01      	ldr	r2, [sp, #4]
 80153f2:	2100      	movs	r1, #0
 80153f4:	f7fd fd3b 	bl	8012e6e <memset>
 80153f8:	4620      	mov	r0, r4
 80153fa:	b002      	add	sp, #8
 80153fc:	bd10      	pop	{r4, pc}
	...

08015400 <_free_r>:
 8015400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015402:	2900      	cmp	r1, #0
 8015404:	d048      	beq.n	8015498 <_free_r+0x98>
 8015406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801540a:	9001      	str	r0, [sp, #4]
 801540c:	2b00      	cmp	r3, #0
 801540e:	f1a1 0404 	sub.w	r4, r1, #4
 8015412:	bfb8      	it	lt
 8015414:	18e4      	addlt	r4, r4, r3
 8015416:	f7ff fc59 	bl	8014ccc <__malloc_lock>
 801541a:	4a20      	ldr	r2, [pc, #128]	; (801549c <_free_r+0x9c>)
 801541c:	9801      	ldr	r0, [sp, #4]
 801541e:	6813      	ldr	r3, [r2, #0]
 8015420:	4615      	mov	r5, r2
 8015422:	b933      	cbnz	r3, 8015432 <_free_r+0x32>
 8015424:	6063      	str	r3, [r4, #4]
 8015426:	6014      	str	r4, [r2, #0]
 8015428:	b003      	add	sp, #12
 801542a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801542e:	f7ff bc53 	b.w	8014cd8 <__malloc_unlock>
 8015432:	42a3      	cmp	r3, r4
 8015434:	d90b      	bls.n	801544e <_free_r+0x4e>
 8015436:	6821      	ldr	r1, [r4, #0]
 8015438:	1862      	adds	r2, r4, r1
 801543a:	4293      	cmp	r3, r2
 801543c:	bf04      	itt	eq
 801543e:	681a      	ldreq	r2, [r3, #0]
 8015440:	685b      	ldreq	r3, [r3, #4]
 8015442:	6063      	str	r3, [r4, #4]
 8015444:	bf04      	itt	eq
 8015446:	1852      	addeq	r2, r2, r1
 8015448:	6022      	streq	r2, [r4, #0]
 801544a:	602c      	str	r4, [r5, #0]
 801544c:	e7ec      	b.n	8015428 <_free_r+0x28>
 801544e:	461a      	mov	r2, r3
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	b10b      	cbz	r3, 8015458 <_free_r+0x58>
 8015454:	42a3      	cmp	r3, r4
 8015456:	d9fa      	bls.n	801544e <_free_r+0x4e>
 8015458:	6811      	ldr	r1, [r2, #0]
 801545a:	1855      	adds	r5, r2, r1
 801545c:	42a5      	cmp	r5, r4
 801545e:	d10b      	bne.n	8015478 <_free_r+0x78>
 8015460:	6824      	ldr	r4, [r4, #0]
 8015462:	4421      	add	r1, r4
 8015464:	1854      	adds	r4, r2, r1
 8015466:	42a3      	cmp	r3, r4
 8015468:	6011      	str	r1, [r2, #0]
 801546a:	d1dd      	bne.n	8015428 <_free_r+0x28>
 801546c:	681c      	ldr	r4, [r3, #0]
 801546e:	685b      	ldr	r3, [r3, #4]
 8015470:	6053      	str	r3, [r2, #4]
 8015472:	4421      	add	r1, r4
 8015474:	6011      	str	r1, [r2, #0]
 8015476:	e7d7      	b.n	8015428 <_free_r+0x28>
 8015478:	d902      	bls.n	8015480 <_free_r+0x80>
 801547a:	230c      	movs	r3, #12
 801547c:	6003      	str	r3, [r0, #0]
 801547e:	e7d3      	b.n	8015428 <_free_r+0x28>
 8015480:	6825      	ldr	r5, [r4, #0]
 8015482:	1961      	adds	r1, r4, r5
 8015484:	428b      	cmp	r3, r1
 8015486:	bf04      	itt	eq
 8015488:	6819      	ldreq	r1, [r3, #0]
 801548a:	685b      	ldreq	r3, [r3, #4]
 801548c:	6063      	str	r3, [r4, #4]
 801548e:	bf04      	itt	eq
 8015490:	1949      	addeq	r1, r1, r5
 8015492:	6021      	streq	r1, [r4, #0]
 8015494:	6054      	str	r4, [r2, #4]
 8015496:	e7c7      	b.n	8015428 <_free_r+0x28>
 8015498:	b003      	add	sp, #12
 801549a:	bd30      	pop	{r4, r5, pc}
 801549c:	20004c00 	.word	0x20004c00

080154a0 <__sfputc_r>:
 80154a0:	6893      	ldr	r3, [r2, #8]
 80154a2:	3b01      	subs	r3, #1
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	b410      	push	{r4}
 80154a8:	6093      	str	r3, [r2, #8]
 80154aa:	da08      	bge.n	80154be <__sfputc_r+0x1e>
 80154ac:	6994      	ldr	r4, [r2, #24]
 80154ae:	42a3      	cmp	r3, r4
 80154b0:	db01      	blt.n	80154b6 <__sfputc_r+0x16>
 80154b2:	290a      	cmp	r1, #10
 80154b4:	d103      	bne.n	80154be <__sfputc_r+0x1e>
 80154b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154ba:	f7fe bb39 	b.w	8013b30 <__swbuf_r>
 80154be:	6813      	ldr	r3, [r2, #0]
 80154c0:	1c58      	adds	r0, r3, #1
 80154c2:	6010      	str	r0, [r2, #0]
 80154c4:	7019      	strb	r1, [r3, #0]
 80154c6:	4608      	mov	r0, r1
 80154c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154cc:	4770      	bx	lr

080154ce <__sfputs_r>:
 80154ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154d0:	4606      	mov	r6, r0
 80154d2:	460f      	mov	r7, r1
 80154d4:	4614      	mov	r4, r2
 80154d6:	18d5      	adds	r5, r2, r3
 80154d8:	42ac      	cmp	r4, r5
 80154da:	d101      	bne.n	80154e0 <__sfputs_r+0x12>
 80154dc:	2000      	movs	r0, #0
 80154de:	e007      	b.n	80154f0 <__sfputs_r+0x22>
 80154e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154e4:	463a      	mov	r2, r7
 80154e6:	4630      	mov	r0, r6
 80154e8:	f7ff ffda 	bl	80154a0 <__sfputc_r>
 80154ec:	1c43      	adds	r3, r0, #1
 80154ee:	d1f3      	bne.n	80154d8 <__sfputs_r+0xa>
 80154f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080154f4 <_vfiprintf_r>:
 80154f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154f8:	460d      	mov	r5, r1
 80154fa:	b09d      	sub	sp, #116	; 0x74
 80154fc:	4614      	mov	r4, r2
 80154fe:	4698      	mov	r8, r3
 8015500:	4606      	mov	r6, r0
 8015502:	b118      	cbz	r0, 801550c <_vfiprintf_r+0x18>
 8015504:	6983      	ldr	r3, [r0, #24]
 8015506:	b90b      	cbnz	r3, 801550c <_vfiprintf_r+0x18>
 8015508:	f7fd fbde 	bl	8012cc8 <__sinit>
 801550c:	4b89      	ldr	r3, [pc, #548]	; (8015734 <_vfiprintf_r+0x240>)
 801550e:	429d      	cmp	r5, r3
 8015510:	d11b      	bne.n	801554a <_vfiprintf_r+0x56>
 8015512:	6875      	ldr	r5, [r6, #4]
 8015514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015516:	07d9      	lsls	r1, r3, #31
 8015518:	d405      	bmi.n	8015526 <_vfiprintf_r+0x32>
 801551a:	89ab      	ldrh	r3, [r5, #12]
 801551c:	059a      	lsls	r2, r3, #22
 801551e:	d402      	bmi.n	8015526 <_vfiprintf_r+0x32>
 8015520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015522:	f7fd fc94 	bl	8012e4e <__retarget_lock_acquire_recursive>
 8015526:	89ab      	ldrh	r3, [r5, #12]
 8015528:	071b      	lsls	r3, r3, #28
 801552a:	d501      	bpl.n	8015530 <_vfiprintf_r+0x3c>
 801552c:	692b      	ldr	r3, [r5, #16]
 801552e:	b9eb      	cbnz	r3, 801556c <_vfiprintf_r+0x78>
 8015530:	4629      	mov	r1, r5
 8015532:	4630      	mov	r0, r6
 8015534:	f7fe fb60 	bl	8013bf8 <__swsetup_r>
 8015538:	b1c0      	cbz	r0, 801556c <_vfiprintf_r+0x78>
 801553a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801553c:	07dc      	lsls	r4, r3, #31
 801553e:	d50e      	bpl.n	801555e <_vfiprintf_r+0x6a>
 8015540:	f04f 30ff 	mov.w	r0, #4294967295
 8015544:	b01d      	add	sp, #116	; 0x74
 8015546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801554a:	4b7b      	ldr	r3, [pc, #492]	; (8015738 <_vfiprintf_r+0x244>)
 801554c:	429d      	cmp	r5, r3
 801554e:	d101      	bne.n	8015554 <_vfiprintf_r+0x60>
 8015550:	68b5      	ldr	r5, [r6, #8]
 8015552:	e7df      	b.n	8015514 <_vfiprintf_r+0x20>
 8015554:	4b79      	ldr	r3, [pc, #484]	; (801573c <_vfiprintf_r+0x248>)
 8015556:	429d      	cmp	r5, r3
 8015558:	bf08      	it	eq
 801555a:	68f5      	ldreq	r5, [r6, #12]
 801555c:	e7da      	b.n	8015514 <_vfiprintf_r+0x20>
 801555e:	89ab      	ldrh	r3, [r5, #12]
 8015560:	0598      	lsls	r0, r3, #22
 8015562:	d4ed      	bmi.n	8015540 <_vfiprintf_r+0x4c>
 8015564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015566:	f7fd fc73 	bl	8012e50 <__retarget_lock_release_recursive>
 801556a:	e7e9      	b.n	8015540 <_vfiprintf_r+0x4c>
 801556c:	2300      	movs	r3, #0
 801556e:	9309      	str	r3, [sp, #36]	; 0x24
 8015570:	2320      	movs	r3, #32
 8015572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015576:	f8cd 800c 	str.w	r8, [sp, #12]
 801557a:	2330      	movs	r3, #48	; 0x30
 801557c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015740 <_vfiprintf_r+0x24c>
 8015580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015584:	f04f 0901 	mov.w	r9, #1
 8015588:	4623      	mov	r3, r4
 801558a:	469a      	mov	sl, r3
 801558c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015590:	b10a      	cbz	r2, 8015596 <_vfiprintf_r+0xa2>
 8015592:	2a25      	cmp	r2, #37	; 0x25
 8015594:	d1f9      	bne.n	801558a <_vfiprintf_r+0x96>
 8015596:	ebba 0b04 	subs.w	fp, sl, r4
 801559a:	d00b      	beq.n	80155b4 <_vfiprintf_r+0xc0>
 801559c:	465b      	mov	r3, fp
 801559e:	4622      	mov	r2, r4
 80155a0:	4629      	mov	r1, r5
 80155a2:	4630      	mov	r0, r6
 80155a4:	f7ff ff93 	bl	80154ce <__sfputs_r>
 80155a8:	3001      	adds	r0, #1
 80155aa:	f000 80aa 	beq.w	8015702 <_vfiprintf_r+0x20e>
 80155ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155b0:	445a      	add	r2, fp
 80155b2:	9209      	str	r2, [sp, #36]	; 0x24
 80155b4:	f89a 3000 	ldrb.w	r3, [sl]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	f000 80a2 	beq.w	8015702 <_vfiprintf_r+0x20e>
 80155be:	2300      	movs	r3, #0
 80155c0:	f04f 32ff 	mov.w	r2, #4294967295
 80155c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80155c8:	f10a 0a01 	add.w	sl, sl, #1
 80155cc:	9304      	str	r3, [sp, #16]
 80155ce:	9307      	str	r3, [sp, #28]
 80155d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80155d4:	931a      	str	r3, [sp, #104]	; 0x68
 80155d6:	4654      	mov	r4, sl
 80155d8:	2205      	movs	r2, #5
 80155da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155de:	4858      	ldr	r0, [pc, #352]	; (8015740 <_vfiprintf_r+0x24c>)
 80155e0:	f7ea fdfe 	bl	80001e0 <memchr>
 80155e4:	9a04      	ldr	r2, [sp, #16]
 80155e6:	b9d8      	cbnz	r0, 8015620 <_vfiprintf_r+0x12c>
 80155e8:	06d1      	lsls	r1, r2, #27
 80155ea:	bf44      	itt	mi
 80155ec:	2320      	movmi	r3, #32
 80155ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80155f2:	0713      	lsls	r3, r2, #28
 80155f4:	bf44      	itt	mi
 80155f6:	232b      	movmi	r3, #43	; 0x2b
 80155f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80155fc:	f89a 3000 	ldrb.w	r3, [sl]
 8015600:	2b2a      	cmp	r3, #42	; 0x2a
 8015602:	d015      	beq.n	8015630 <_vfiprintf_r+0x13c>
 8015604:	9a07      	ldr	r2, [sp, #28]
 8015606:	4654      	mov	r4, sl
 8015608:	2000      	movs	r0, #0
 801560a:	f04f 0c0a 	mov.w	ip, #10
 801560e:	4621      	mov	r1, r4
 8015610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015614:	3b30      	subs	r3, #48	; 0x30
 8015616:	2b09      	cmp	r3, #9
 8015618:	d94e      	bls.n	80156b8 <_vfiprintf_r+0x1c4>
 801561a:	b1b0      	cbz	r0, 801564a <_vfiprintf_r+0x156>
 801561c:	9207      	str	r2, [sp, #28]
 801561e:	e014      	b.n	801564a <_vfiprintf_r+0x156>
 8015620:	eba0 0308 	sub.w	r3, r0, r8
 8015624:	fa09 f303 	lsl.w	r3, r9, r3
 8015628:	4313      	orrs	r3, r2
 801562a:	9304      	str	r3, [sp, #16]
 801562c:	46a2      	mov	sl, r4
 801562e:	e7d2      	b.n	80155d6 <_vfiprintf_r+0xe2>
 8015630:	9b03      	ldr	r3, [sp, #12]
 8015632:	1d19      	adds	r1, r3, #4
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	9103      	str	r1, [sp, #12]
 8015638:	2b00      	cmp	r3, #0
 801563a:	bfbb      	ittet	lt
 801563c:	425b      	neglt	r3, r3
 801563e:	f042 0202 	orrlt.w	r2, r2, #2
 8015642:	9307      	strge	r3, [sp, #28]
 8015644:	9307      	strlt	r3, [sp, #28]
 8015646:	bfb8      	it	lt
 8015648:	9204      	strlt	r2, [sp, #16]
 801564a:	7823      	ldrb	r3, [r4, #0]
 801564c:	2b2e      	cmp	r3, #46	; 0x2e
 801564e:	d10c      	bne.n	801566a <_vfiprintf_r+0x176>
 8015650:	7863      	ldrb	r3, [r4, #1]
 8015652:	2b2a      	cmp	r3, #42	; 0x2a
 8015654:	d135      	bne.n	80156c2 <_vfiprintf_r+0x1ce>
 8015656:	9b03      	ldr	r3, [sp, #12]
 8015658:	1d1a      	adds	r2, r3, #4
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	9203      	str	r2, [sp, #12]
 801565e:	2b00      	cmp	r3, #0
 8015660:	bfb8      	it	lt
 8015662:	f04f 33ff 	movlt.w	r3, #4294967295
 8015666:	3402      	adds	r4, #2
 8015668:	9305      	str	r3, [sp, #20]
 801566a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015750 <_vfiprintf_r+0x25c>
 801566e:	7821      	ldrb	r1, [r4, #0]
 8015670:	2203      	movs	r2, #3
 8015672:	4650      	mov	r0, sl
 8015674:	f7ea fdb4 	bl	80001e0 <memchr>
 8015678:	b140      	cbz	r0, 801568c <_vfiprintf_r+0x198>
 801567a:	2340      	movs	r3, #64	; 0x40
 801567c:	eba0 000a 	sub.w	r0, r0, sl
 8015680:	fa03 f000 	lsl.w	r0, r3, r0
 8015684:	9b04      	ldr	r3, [sp, #16]
 8015686:	4303      	orrs	r3, r0
 8015688:	3401      	adds	r4, #1
 801568a:	9304      	str	r3, [sp, #16]
 801568c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015690:	482c      	ldr	r0, [pc, #176]	; (8015744 <_vfiprintf_r+0x250>)
 8015692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015696:	2206      	movs	r2, #6
 8015698:	f7ea fda2 	bl	80001e0 <memchr>
 801569c:	2800      	cmp	r0, #0
 801569e:	d03f      	beq.n	8015720 <_vfiprintf_r+0x22c>
 80156a0:	4b29      	ldr	r3, [pc, #164]	; (8015748 <_vfiprintf_r+0x254>)
 80156a2:	bb1b      	cbnz	r3, 80156ec <_vfiprintf_r+0x1f8>
 80156a4:	9b03      	ldr	r3, [sp, #12]
 80156a6:	3307      	adds	r3, #7
 80156a8:	f023 0307 	bic.w	r3, r3, #7
 80156ac:	3308      	adds	r3, #8
 80156ae:	9303      	str	r3, [sp, #12]
 80156b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156b2:	443b      	add	r3, r7
 80156b4:	9309      	str	r3, [sp, #36]	; 0x24
 80156b6:	e767      	b.n	8015588 <_vfiprintf_r+0x94>
 80156b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80156bc:	460c      	mov	r4, r1
 80156be:	2001      	movs	r0, #1
 80156c0:	e7a5      	b.n	801560e <_vfiprintf_r+0x11a>
 80156c2:	2300      	movs	r3, #0
 80156c4:	3401      	adds	r4, #1
 80156c6:	9305      	str	r3, [sp, #20]
 80156c8:	4619      	mov	r1, r3
 80156ca:	f04f 0c0a 	mov.w	ip, #10
 80156ce:	4620      	mov	r0, r4
 80156d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156d4:	3a30      	subs	r2, #48	; 0x30
 80156d6:	2a09      	cmp	r2, #9
 80156d8:	d903      	bls.n	80156e2 <_vfiprintf_r+0x1ee>
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d0c5      	beq.n	801566a <_vfiprintf_r+0x176>
 80156de:	9105      	str	r1, [sp, #20]
 80156e0:	e7c3      	b.n	801566a <_vfiprintf_r+0x176>
 80156e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80156e6:	4604      	mov	r4, r0
 80156e8:	2301      	movs	r3, #1
 80156ea:	e7f0      	b.n	80156ce <_vfiprintf_r+0x1da>
 80156ec:	ab03      	add	r3, sp, #12
 80156ee:	9300      	str	r3, [sp, #0]
 80156f0:	462a      	mov	r2, r5
 80156f2:	4b16      	ldr	r3, [pc, #88]	; (801574c <_vfiprintf_r+0x258>)
 80156f4:	a904      	add	r1, sp, #16
 80156f6:	4630      	mov	r0, r6
 80156f8:	f7fd fcbc 	bl	8013074 <_printf_float>
 80156fc:	4607      	mov	r7, r0
 80156fe:	1c78      	adds	r0, r7, #1
 8015700:	d1d6      	bne.n	80156b0 <_vfiprintf_r+0x1bc>
 8015702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015704:	07d9      	lsls	r1, r3, #31
 8015706:	d405      	bmi.n	8015714 <_vfiprintf_r+0x220>
 8015708:	89ab      	ldrh	r3, [r5, #12]
 801570a:	059a      	lsls	r2, r3, #22
 801570c:	d402      	bmi.n	8015714 <_vfiprintf_r+0x220>
 801570e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015710:	f7fd fb9e 	bl	8012e50 <__retarget_lock_release_recursive>
 8015714:	89ab      	ldrh	r3, [r5, #12]
 8015716:	065b      	lsls	r3, r3, #25
 8015718:	f53f af12 	bmi.w	8015540 <_vfiprintf_r+0x4c>
 801571c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801571e:	e711      	b.n	8015544 <_vfiprintf_r+0x50>
 8015720:	ab03      	add	r3, sp, #12
 8015722:	9300      	str	r3, [sp, #0]
 8015724:	462a      	mov	r2, r5
 8015726:	4b09      	ldr	r3, [pc, #36]	; (801574c <_vfiprintf_r+0x258>)
 8015728:	a904      	add	r1, sp, #16
 801572a:	4630      	mov	r0, r6
 801572c:	f7fd ff46 	bl	80135bc <_printf_i>
 8015730:	e7e4      	b.n	80156fc <_vfiprintf_r+0x208>
 8015732:	bf00      	nop
 8015734:	08016548 	.word	0x08016548
 8015738:	08016568 	.word	0x08016568
 801573c:	08016528 	.word	0x08016528
 8015740:	0801684c 	.word	0x0801684c
 8015744:	08016856 	.word	0x08016856
 8015748:	08013075 	.word	0x08013075
 801574c:	080154cf 	.word	0x080154cf
 8015750:	08016852 	.word	0x08016852

08015754 <_read_r>:
 8015754:	b538      	push	{r3, r4, r5, lr}
 8015756:	4d07      	ldr	r5, [pc, #28]	; (8015774 <_read_r+0x20>)
 8015758:	4604      	mov	r4, r0
 801575a:	4608      	mov	r0, r1
 801575c:	4611      	mov	r1, r2
 801575e:	2200      	movs	r2, #0
 8015760:	602a      	str	r2, [r5, #0]
 8015762:	461a      	mov	r2, r3
 8015764:	f7ec fe86 	bl	8002474 <_read>
 8015768:	1c43      	adds	r3, r0, #1
 801576a:	d102      	bne.n	8015772 <_read_r+0x1e>
 801576c:	682b      	ldr	r3, [r5, #0]
 801576e:	b103      	cbz	r3, 8015772 <_read_r+0x1e>
 8015770:	6023      	str	r3, [r4, #0]
 8015772:	bd38      	pop	{r3, r4, r5, pc}
 8015774:	20004f88 	.word	0x20004f88

08015778 <abort>:
 8015778:	b508      	push	{r3, lr}
 801577a:	2006      	movs	r0, #6
 801577c:	f000 f860 	bl	8015840 <raise>
 8015780:	2001      	movs	r0, #1
 8015782:	f7ec fe6d 	bl	8002460 <_exit>
	...

08015788 <_fstat_r>:
 8015788:	b538      	push	{r3, r4, r5, lr}
 801578a:	4d07      	ldr	r5, [pc, #28]	; (80157a8 <_fstat_r+0x20>)
 801578c:	2300      	movs	r3, #0
 801578e:	4604      	mov	r4, r0
 8015790:	4608      	mov	r0, r1
 8015792:	4611      	mov	r1, r2
 8015794:	602b      	str	r3, [r5, #0]
 8015796:	f7ec fe96 	bl	80024c6 <_fstat>
 801579a:	1c43      	adds	r3, r0, #1
 801579c:	d102      	bne.n	80157a4 <_fstat_r+0x1c>
 801579e:	682b      	ldr	r3, [r5, #0]
 80157a0:	b103      	cbz	r3, 80157a4 <_fstat_r+0x1c>
 80157a2:	6023      	str	r3, [r4, #0]
 80157a4:	bd38      	pop	{r3, r4, r5, pc}
 80157a6:	bf00      	nop
 80157a8:	20004f88 	.word	0x20004f88

080157ac <_isatty_r>:
 80157ac:	b538      	push	{r3, r4, r5, lr}
 80157ae:	4d06      	ldr	r5, [pc, #24]	; (80157c8 <_isatty_r+0x1c>)
 80157b0:	2300      	movs	r3, #0
 80157b2:	4604      	mov	r4, r0
 80157b4:	4608      	mov	r0, r1
 80157b6:	602b      	str	r3, [r5, #0]
 80157b8:	f7ec fe95 	bl	80024e6 <_isatty>
 80157bc:	1c43      	adds	r3, r0, #1
 80157be:	d102      	bne.n	80157c6 <_isatty_r+0x1a>
 80157c0:	682b      	ldr	r3, [r5, #0]
 80157c2:	b103      	cbz	r3, 80157c6 <_isatty_r+0x1a>
 80157c4:	6023      	str	r3, [r4, #0]
 80157c6:	bd38      	pop	{r3, r4, r5, pc}
 80157c8:	20004f88 	.word	0x20004f88

080157cc <__ascii_mbtowc>:
 80157cc:	b082      	sub	sp, #8
 80157ce:	b901      	cbnz	r1, 80157d2 <__ascii_mbtowc+0x6>
 80157d0:	a901      	add	r1, sp, #4
 80157d2:	b142      	cbz	r2, 80157e6 <__ascii_mbtowc+0x1a>
 80157d4:	b14b      	cbz	r3, 80157ea <__ascii_mbtowc+0x1e>
 80157d6:	7813      	ldrb	r3, [r2, #0]
 80157d8:	600b      	str	r3, [r1, #0]
 80157da:	7812      	ldrb	r2, [r2, #0]
 80157dc:	1e10      	subs	r0, r2, #0
 80157de:	bf18      	it	ne
 80157e0:	2001      	movne	r0, #1
 80157e2:	b002      	add	sp, #8
 80157e4:	4770      	bx	lr
 80157e6:	4610      	mov	r0, r2
 80157e8:	e7fb      	b.n	80157e2 <__ascii_mbtowc+0x16>
 80157ea:	f06f 0001 	mvn.w	r0, #1
 80157ee:	e7f8      	b.n	80157e2 <__ascii_mbtowc+0x16>

080157f0 <_raise_r>:
 80157f0:	291f      	cmp	r1, #31
 80157f2:	b538      	push	{r3, r4, r5, lr}
 80157f4:	4604      	mov	r4, r0
 80157f6:	460d      	mov	r5, r1
 80157f8:	d904      	bls.n	8015804 <_raise_r+0x14>
 80157fa:	2316      	movs	r3, #22
 80157fc:	6003      	str	r3, [r0, #0]
 80157fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015802:	bd38      	pop	{r3, r4, r5, pc}
 8015804:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015806:	b112      	cbz	r2, 801580e <_raise_r+0x1e>
 8015808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801580c:	b94b      	cbnz	r3, 8015822 <_raise_r+0x32>
 801580e:	4620      	mov	r0, r4
 8015810:	f000 f830 	bl	8015874 <_getpid_r>
 8015814:	462a      	mov	r2, r5
 8015816:	4601      	mov	r1, r0
 8015818:	4620      	mov	r0, r4
 801581a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801581e:	f000 b817 	b.w	8015850 <_kill_r>
 8015822:	2b01      	cmp	r3, #1
 8015824:	d00a      	beq.n	801583c <_raise_r+0x4c>
 8015826:	1c59      	adds	r1, r3, #1
 8015828:	d103      	bne.n	8015832 <_raise_r+0x42>
 801582a:	2316      	movs	r3, #22
 801582c:	6003      	str	r3, [r0, #0]
 801582e:	2001      	movs	r0, #1
 8015830:	e7e7      	b.n	8015802 <_raise_r+0x12>
 8015832:	2400      	movs	r4, #0
 8015834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015838:	4628      	mov	r0, r5
 801583a:	4798      	blx	r3
 801583c:	2000      	movs	r0, #0
 801583e:	e7e0      	b.n	8015802 <_raise_r+0x12>

08015840 <raise>:
 8015840:	4b02      	ldr	r3, [pc, #8]	; (801584c <raise+0xc>)
 8015842:	4601      	mov	r1, r0
 8015844:	6818      	ldr	r0, [r3, #0]
 8015846:	f7ff bfd3 	b.w	80157f0 <_raise_r>
 801584a:	bf00      	nop
 801584c:	20000510 	.word	0x20000510

08015850 <_kill_r>:
 8015850:	b538      	push	{r3, r4, r5, lr}
 8015852:	4d07      	ldr	r5, [pc, #28]	; (8015870 <_kill_r+0x20>)
 8015854:	2300      	movs	r3, #0
 8015856:	4604      	mov	r4, r0
 8015858:	4608      	mov	r0, r1
 801585a:	4611      	mov	r1, r2
 801585c:	602b      	str	r3, [r5, #0]
 801585e:	f7ec fdef 	bl	8002440 <_kill>
 8015862:	1c43      	adds	r3, r0, #1
 8015864:	d102      	bne.n	801586c <_kill_r+0x1c>
 8015866:	682b      	ldr	r3, [r5, #0]
 8015868:	b103      	cbz	r3, 801586c <_kill_r+0x1c>
 801586a:	6023      	str	r3, [r4, #0]
 801586c:	bd38      	pop	{r3, r4, r5, pc}
 801586e:	bf00      	nop
 8015870:	20004f88 	.word	0x20004f88

08015874 <_getpid_r>:
 8015874:	f7ec bddc 	b.w	8002430 <_getpid>

08015878 <__ascii_wctomb>:
 8015878:	b149      	cbz	r1, 801588e <__ascii_wctomb+0x16>
 801587a:	2aff      	cmp	r2, #255	; 0xff
 801587c:	bf85      	ittet	hi
 801587e:	238a      	movhi	r3, #138	; 0x8a
 8015880:	6003      	strhi	r3, [r0, #0]
 8015882:	700a      	strbls	r2, [r1, #0]
 8015884:	f04f 30ff 	movhi.w	r0, #4294967295
 8015888:	bf98      	it	ls
 801588a:	2001      	movls	r0, #1
 801588c:	4770      	bx	lr
 801588e:	4608      	mov	r0, r1
 8015890:	4770      	bx	lr
	...

08015894 <_init>:
 8015894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015896:	bf00      	nop
 8015898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801589a:	bc08      	pop	{r3}
 801589c:	469e      	mov	lr, r3
 801589e:	4770      	bx	lr

080158a0 <_fini>:
 80158a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158a2:	bf00      	nop
 80158a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158a6:	bc08      	pop	{r3}
 80158a8:	469e      	mov	lr, r3
 80158aa:	4770      	bx	lr
