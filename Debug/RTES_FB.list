
RTES_FB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015490  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001244  08015620  08015620  00025620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016864  08016864  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  08016864  08016864  00026864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801686c  0801686c  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801686c  0801686c  0002686c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016870  08016870  00026870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  08016874  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010450  200006e0  08016f54  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010b30  08016f54  00030b30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b552  00000000  00000000  00030710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d82  00000000  00000000  0007bc62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031b0  00000000  00000000  000829e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002f28  00000000  00000000  00085b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f788  00000000  00000000  00088ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003035a  00000000  00000000  000b8248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011451f  00000000  00000000  000e85a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fcac1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e4e4  00000000  00000000  001fcb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006e0 	.word	0x200006e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015608 	.word	0x08015608

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006e4 	.word	0x200006e4
 80001cc:	08015608 	.word	0x08015608

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x30>)
 8000eb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200006fc 	.word	0x200006fc
 8000ed0:	200007c0 	.word	0x200007c0

08000ed4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,10);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	230a      	movs	r3, #10
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <_write+0x24>)
 8000eea:	f00e fb0b 	bl	800f504 <HAL_UART_Transmit>
	return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20010924 	.word	0x20010924

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b0c2      	sub	sp, #264	; 0x108
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f02:	f00a f94f 	bl	800b1a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f06:	f000 f919 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0a:	f000 fa57 	bl	80013bc <MX_GPIO_Init>
  MX_I2C2_Init();
 8000f0e:	f000 f977 	bl	8001200 <MX_I2C2_Init>
  MX_SPI3_Init();
 8000f12:	f000 f9b5 	bl	8001280 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f16:	f000 f9f1 	bl	80012fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f1a:	f000 fa1f 	bl	800135c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	//Proximity

	VL53L0X_PROXIMITY_Init();
 8000f1e:	f009 fff9 	bl	800af14 <VL53L0X_PROXIMITY_Init>

	//User button
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000f22:	2100      	movs	r1, #0
 8000f24:	2000      	movs	r0, #0
 8000f26:	f001 faf9 	bl	800251c <BSP_PB_Init>

	//Temperature
	BSP_TSENSOR_Init();
 8000f2a:	f002 fbdb 	bl	80036e4 <BSP_TSENSOR_Init>

	//	//Humidity
	BSP_HSENSOR_Init();
 8000f2e:	f002 f987 	bl	8003240 <BSP_HSENSOR_Init>

	//	//Pressure
	BSP_PSENSOR_Init();
 8000f32:	f002 fba9 	bl	8003688 <BSP_PSENSOR_Init>

	//Motion sensors

	//BSP_MOTION_SENSOR_Init(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_GYRO);
	BSP_MOTION_SENSOR_Init(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO);
 8000f36:	2102      	movs	r1, #2
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f002 f9af 	bl	800329c <BSP_MOTION_SENSOR_Init>

	//BSP_MOTION_SENSOR_Enable(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_GYRO);
	BSP_MOTION_SENSOR_Enable(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO);
 8000f3e:	2102      	movs	r1, #2
 8000f40:	2000      	movs	r0, #0
 8000f42:	f002 f9fb 	bl	800333c <BSP_MOTION_SENSOR_Enable>

	//Struct elements initialization

	manager.humidity_value = 0;
 8000f46:	4b69      	ldr	r3, [pc, #420]	; (80010ec <main+0x1f0>)
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
	manager.pressure_value = 0;
 8000f4e:	4b67      	ldr	r3, [pc, #412]	; (80010ec <main+0x1f0>)
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
	manager.temperature_value = 0;
 8000f56:	4b65      	ldr	r3, [pc, #404]	; (80010ec <main+0x1f0>)
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
	manager.proximity = 0;
 8000f5e:	4b63      	ldr	r3, [pc, #396]	; (80010ec <main+0x1f0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	831a      	strh	r2, [r3, #24]
	manager.b_accelerometer, manager.b_temperature, manager.b_humidity, manager.b_pressure, manager.b_green_light, manager.b_proximity,
	manager.b_proximity, manager.b_race_data, manager.b_track_data, manager.b_user_button = 0;
 8000f64:	4b61      	ldr	r3, [pc, #388]	; (80010ec <main+0x1f0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
	manager.status = WAITING_FOR_GREEN_LIGHT;
 8000f6a:	4b60      	ldr	r3, [pc, #384]	; (80010ec <main+0x1f0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
//	manager.race_executions = 0;
//	manager.pit_stop_executions = 0;
//	manager.is_waiting_for_race_director_input = 0;
	manager.waiting_for_input_executions = 0;
 8000f70:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <main+0x1f0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of managerMutex */
  osMutexDef(managerMutex);
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  managerMutexHandle = osMutexCreate(osMutex(managerMutex));
 8000f82:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00e ffd2 	bl	800ff30 <osMutexCreate>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a58      	ldr	r2, [pc, #352]	; (80010f0 <main+0x1f4>)
 8000f90:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of greenLightTask */
  osThreadDef(greenLightTask, startGreenLightTask, osPriorityNormal, 0, 1024);
 8000f92:	4b58      	ldr	r3, [pc, #352]	; (80010f4 <main+0x1f8>)
 8000f94:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8000f98:	461d      	mov	r5, r3
 8000f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  greenLightTaskHandle = osThreadCreate(osThread(greenLightTask), NULL);
 8000fa6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f00e ff5f 	bl	800fe70 <osThreadCreate>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <main+0x1fc>)
 8000fb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of trackDataPrintTask */
  osThreadDef(trackDataPrintTask, startTrackDataPrintTask, osPriorityNormal, 0, 1024);
 8000fb8:	4b50      	ldr	r3, [pc, #320]	; (80010fc <main+0x200>)
 8000fba:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000fbe:	461d      	mov	r5, r3
 8000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  trackDataPrintTaskHandle = osThreadCreate(osThread(trackDataPrintTask), NULL);
 8000fcc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f00e ff4c 	bl	800fe70 <osThreadCreate>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a49      	ldr	r2, [pc, #292]	; (8001100 <main+0x204>)
 8000fdc:	6013      	str	r3, [r2, #0]

  /* definition and creation of userButtonTask */
  osThreadDef(userButtonTask, startUserButtonTask, osPriorityNormal, 0, 1024);
 8000fde:	4b49      	ldr	r3, [pc, #292]	; (8001104 <main+0x208>)
 8000fe0:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  userButtonTaskHandle = osThreadCreate(osThread(userButtonTask), NULL);
 8000ff2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00e ff39 	bl	800fe70 <osThreadCreate>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a41      	ldr	r2, [pc, #260]	; (8001108 <main+0x20c>)
 8001002:	6013      	str	r3, [r2, #0]

  /* definition and creation of proximitySensorTask */
  osThreadDef(proximitySensorTask, startProximitySensorTask, osPriorityNormal, 0, 1024);
 8001004:	4b41      	ldr	r3, [pc, #260]	; (800110c <main+0x210>)
 8001006:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800100a:	461d      	mov	r5, r3
 800100c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001010:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  proximitySensorTaskHandle = osThreadCreate(osThread(proximitySensorTask), NULL);
 8001018:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f00e ff26 	bl	800fe70 <osThreadCreate>
 8001024:	4603      	mov	r3, r0
 8001026:	4a3a      	ldr	r2, [pc, #232]	; (8001110 <main+0x214>)
 8001028:	6013      	str	r3, [r2, #0]

  /* definition and creation of raceDataPrintTask */
  osThreadDef(raceDataPrintTask, startRaceDataPrintTask, osPriorityNormal, 0, 1024);
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <main+0x218>)
 800102c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001030:	461d      	mov	r5, r3
 8001032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001036:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  raceDataPrintTaskHandle = osThreadCreate(osThread(raceDataPrintTask), NULL);
 800103e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f00e ff13 	bl	800fe70 <osThreadCreate>
 800104a:	4603      	mov	r3, r0
 800104c:	4a32      	ldr	r2, [pc, #200]	; (8001118 <main+0x21c>)
 800104e:	6013      	str	r3, [r2, #0]

  /* definition and creation of accelerometerTask */
  osThreadDef(accelerometerTask, startAccelerometerTask, osPriorityNormal, 0, 1024);
 8001050:	4b32      	ldr	r3, [pc, #200]	; (800111c <main+0x220>)
 8001052:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001056:	461d      	mov	r5, r3
 8001058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001060:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  accelerometerTaskHandle = osThreadCreate(osThread(accelerometerTask), NULL);
 8001064:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f00e ff00 	bl	800fe70 <osThreadCreate>
 8001070:	4603      	mov	r3, r0
 8001072:	4a2b      	ldr	r2, [pc, #172]	; (8001120 <main+0x224>)
 8001074:	6013      	str	r3, [r2, #0]

  /* definition and creation of temperatureSensorTask */
  osThreadDef(temperatureSensorTask, startTemperatureSensorTask, osPriorityBelowNormal, 0, 1024);
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <main+0x228>)
 8001078:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800107c:	461d      	mov	r5, r3
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  temperatureSensorTaskHandle = osThreadCreate(osThread(temperatureSensorTask), NULL);
 800108a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f00e feed 	bl	800fe70 <osThreadCreate>
 8001096:	4603      	mov	r3, r0
 8001098:	4a23      	ldr	r2, [pc, #140]	; (8001128 <main+0x22c>)
 800109a:	6013      	str	r3, [r2, #0]

  /* definition and creation of humiditySensorTask */
  osThreadDef(humiditySensorTask, startHumiditySensorTask, osPriorityBelowNormal, 0, 1024);
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <main+0x230>)
 800109e:	f107 0420 	add.w	r4, r7, #32
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  humiditySensorTaskHandle = osThreadCreate(osThread(humiditySensorTask), NULL);
 80010b0:	f107 0320 	add.w	r3, r7, #32
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f00e feda 	bl	800fe70 <osThreadCreate>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a1c      	ldr	r2, [pc, #112]	; (8001130 <main+0x234>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of pressureSensorTask */
  osThreadDef(pressureSensorTask, startPressureSensorTask, osPriorityBelowNormal, 0, 1024);
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <main+0x238>)
 80010c6:	461c      	mov	r4, r3
 80010c8:	4615      	mov	r5, r2
 80010ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureSensorTaskHandle = osThreadCreate(osThread(pressureSensorTask), NULL);
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f00e fec8 	bl	800fe70 <osThreadCreate>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <main+0x23c>)
 80010e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010e6:	f00e febc 	bl	800fe62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80010ea:	e7fe      	b.n	80010ea <main+0x1ee>
 80010ec:	2001086c 	.word	0x2001086c
 80010f0:	200109b0 	.word	0x200109b0
 80010f4:	080156d0 	.word	0x080156d0
 80010f8:	2001081c 	.word	0x2001081c
 80010fc:	080156ec 	.word	0x080156ec
 8001100:	200109ac 	.word	0x200109ac
 8001104:	08015708 	.word	0x08015708
 8001108:	20010920 	.word	0x20010920
 800110c:	08015724 	.word	0x08015724
 8001110:	200109a8 	.word	0x200109a8
 8001114:	08015740 	.word	0x08015740
 8001118:	2001091c 	.word	0x2001091c
 800111c:	0801575c 	.word	0x0801575c
 8001120:	200108b4 	.word	0x200108b4
 8001124:	08015778 	.word	0x08015778
 8001128:	200109b8 	.word	0x200109b8
 800112c:	08015794 	.word	0x08015794
 8001130:	200109bc 	.word	0x200109bc
 8001134:	080157b0 	.word	0x080157b0
 8001138:	200109b4 	.word	0x200109b4

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b096      	sub	sp, #88	; 0x58
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2244      	movs	r2, #68	; 0x44
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f011 fb97 	bl	801287e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800115e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001162:	f00b fc73 	bl	800ca4c <HAL_PWREx_ControlVoltageScaling>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800116c:	f000 fdac 	bl	8001cc8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001170:	f00b fc4e 	bl	800ca10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <SystemClock_Config+0xc0>)
 8001176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117a:	4a20      	ldr	r2, [pc, #128]	; (80011fc <SystemClock_Config+0xc0>)
 800117c:	f023 0318 	bic.w	r3, r3, #24
 8001180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001184:	2314      	movs	r3, #20
 8001186:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001194:	2360      	movs	r3, #96	; 0x60
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800119c:	2301      	movs	r3, #1
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011a4:	2328      	movs	r3, #40	; 0x28
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011a8:	2307      	movs	r3, #7
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00b fc9d 	bl	800caf8 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011c4:	f000 fd80 	bl	8001cc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2303      	movs	r3, #3
 80011ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	2104      	movs	r1, #4
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00c f86f 	bl	800d2c4 <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011ec:	f000 fd6c 	bl	8001cc8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011f0:	f00d faf4 	bl	800e7dc <HAL_RCCEx_EnableMSIPLLMode>
}
 80011f4:	bf00      	nop
 80011f6:	3758      	adds	r7, #88	; 0x58
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000

08001200 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_I2C2_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_I2C2_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_I2C2_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <MX_I2C2_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_I2C2_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_I2C2_Init+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_I2C2_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_I2C2_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C2_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C2_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C2_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_I2C2_Init+0x74>)
 800123c:	f00a fbd8 	bl	800b9f0 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001246:	f000 fd3f 	bl	8001cc8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_I2C2_Init+0x74>)
 800124e:	f00b fb47 	bl	800c8e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 fd36 	bl	8001cc8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_I2C2_Init+0x74>)
 8001260:	f00b fb89 	bl	800c976 <HAL_I2CEx_ConfigDigitalFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 fd2d 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20010820 	.word	0x20010820
 8001278:	40005800 	.word	0x40005800
 800127c:	10909cec 	.word	0x10909cec

08001280 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_SPI3_Init+0x74>)
 8001286:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <MX_SPI3_Init+0x78>)
 8001288:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_SPI3_Init+0x74>)
 800128c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001290:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_SPI3_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_SPI3_Init+0x74>)
 800129a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800129e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_SPI3_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_SPI3_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_SPI3_Init+0x74>)
 80012ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_SPI3_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_SPI3_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_SPI3_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_SPI3_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_SPI3_Init+0x74>)
 80012ce:	2207      	movs	r2, #7
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_SPI3_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_SPI3_Init+0x74>)
 80012da:	2208      	movs	r2, #8
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_SPI3_Init+0x74>)
 80012e0:	f00d fd4e 	bl	800ed80 <HAL_SPI_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012ea:	f000 fced 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200108b8 	.word	0x200108b8
 80012f8:	40003c00 	.word	0x40003c00

080012fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <MX_USART1_UART_Init+0x5c>)
 8001304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART1_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USART1_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USART1_UART_Init+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USART1_UART_Init+0x58>)
 8001340:	f00e f892 	bl	800f468 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800134a:	f000 fcbd 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20010924 	.word	0x20010924
 8001358:	40013800 	.word	0x40013800

0800135c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <MX_USART3_UART_Init+0x5c>)
 8001364:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART3_UART_Init+0x58>)
 80013a0:	f00e f862 	bl	800f468 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80013aa:	f000 fc8d 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20010798 	.word	0x20010798
 80013b8:	40004800 	.word	0x40004800

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d2:	4bba      	ldr	r3, [pc, #744]	; (80016bc <MX_GPIO_Init+0x300>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4ab9      	ldr	r2, [pc, #740]	; (80016bc <MX_GPIO_Init+0x300>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4bb7      	ldr	r3, [pc, #732]	; (80016bc <MX_GPIO_Init+0x300>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4bb4      	ldr	r3, [pc, #720]	; (80016bc <MX_GPIO_Init+0x300>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4ab3      	ldr	r2, [pc, #716]	; (80016bc <MX_GPIO_Init+0x300>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4bb1      	ldr	r3, [pc, #708]	; (80016bc <MX_GPIO_Init+0x300>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4bae      	ldr	r3, [pc, #696]	; (80016bc <MX_GPIO_Init+0x300>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4aad      	ldr	r2, [pc, #692]	; (80016bc <MX_GPIO_Init+0x300>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4bab      	ldr	r3, [pc, #684]	; (80016bc <MX_GPIO_Init+0x300>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4ba8      	ldr	r3, [pc, #672]	; (80016bc <MX_GPIO_Init+0x300>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4aa7      	ldr	r2, [pc, #668]	; (80016bc <MX_GPIO_Init+0x300>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4ba5      	ldr	r3, [pc, #660]	; (80016bc <MX_GPIO_Init+0x300>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	4ba2      	ldr	r3, [pc, #648]	; (80016bc <MX_GPIO_Init+0x300>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4aa1      	ldr	r2, [pc, #644]	; (80016bc <MX_GPIO_Init+0x300>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b9f      	ldr	r3, [pc, #636]	; (80016bc <MX_GPIO_Init+0x300>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001450:	489b      	ldr	r0, [pc, #620]	; (80016c0 <MX_GPIO_Init+0x304>)
 8001452:	f00a fa83 	bl	800b95c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f248 1104 	movw	r1, #33028	; 0x8104
 800145c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001460:	f00a fa7c 	bl	800b95c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001464:	2200      	movs	r2, #0
 8001466:	f24f 0114 	movw	r1, #61460	; 0xf014
 800146a:	4896      	ldr	r0, [pc, #600]	; (80016c4 <MX_GPIO_Init+0x308>)
 800146c:	f00a fa76 	bl	800b95c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f241 0181 	movw	r1, #4225	; 0x1081
 8001476:	4894      	ldr	r0, [pc, #592]	; (80016c8 <MX_GPIO_Init+0x30c>)
 8001478:	f00a fa70 	bl	800b95c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	4891      	ldr	r0, [pc, #580]	; (80016c8 <MX_GPIO_Init+0x30c>)
 8001484:	f00a fa6a 	bl	800b95c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800148e:	488f      	ldr	r0, [pc, #572]	; (80016cc <MX_GPIO_Init+0x310>)
 8001490:	f00a fa64 	bl	800b95c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	2120      	movs	r1, #32
 8001498:	488a      	ldr	r0, [pc, #552]	; (80016c4 <MX_GPIO_Init+0x308>)
 800149a:	f00a fa5f 	bl	800b95c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	2101      	movs	r1, #1
 80014a2:	4887      	ldr	r0, [pc, #540]	; (80016c0 <MX_GPIO_Init+0x304>)
 80014a4:	f00a fa5a 	bl	800b95c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80014a8:	f240 1315 	movw	r3, #277	; 0x115
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	487f      	ldr	r0, [pc, #508]	; (80016c0 <MX_GPIO_Init+0x304>)
 80014c2:	f009 ffad 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80014c6:	236a      	movs	r3, #106	; 0x6a
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ca:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <MX_GPIO_Init+0x314>)
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4879      	ldr	r0, [pc, #484]	; (80016c0 <MX_GPIO_Init+0x304>)
 80014da:	f009 ffa1 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80014de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e4:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <MX_GPIO_Init+0x318>)
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4876      	ldr	r0, [pc, #472]	; (80016cc <MX_GPIO_Init+0x310>)
 80014f4:	f009 ff94 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80014f8:	233f      	movs	r3, #63	; 0x3f
 80014fa:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014fc:	230b      	movs	r3, #11
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4870      	ldr	r0, [pc, #448]	; (80016cc <MX_GPIO_Init+0x310>)
 800150c:	f009 ff88 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001510:	2303      	movs	r3, #3
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001520:	2308      	movs	r3, #8
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f009 ff77 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001532:	f248 1304 	movw	r3, #33028	; 0x8104
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f009 ff67 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001552:	2308      	movs	r3, #8
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001562:	2301      	movs	r3, #1
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f009 ff56 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001574:	2310      	movs	r3, #16
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001578:	230b      	movs	r3, #11
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158a:	f009 ff49 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800158e:	23e0      	movs	r3, #224	; 0xe0
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800159e:	2305      	movs	r3, #5
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ac:	f009 ff38 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80015b0:	2301      	movs	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b4:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <MX_GPIO_Init+0x314>)
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4840      	ldr	r0, [pc, #256]	; (80016c4 <MX_GPIO_Init+0x308>)
 80015c4:	f009 ff2c 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80015c8:	2302      	movs	r3, #2
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015cc:	230b      	movs	r3, #11
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	483a      	ldr	r0, [pc, #232]	; (80016c4 <MX_GPIO_Init+0x308>)
 80015dc:	f009 ff20 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80015e0:	f24f 0334 	movw	r3, #61492	; 0xf034
 80015e4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4832      	ldr	r0, [pc, #200]	; (80016c4 <MX_GPIO_Init+0x308>)
 80015fa:	f009 ff11 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80015fe:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001610:	2306      	movs	r3, #6
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4829      	ldr	r0, [pc, #164]	; (80016c0 <MX_GPIO_Init+0x304>)
 800161c:	f009 ff00 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001620:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001624:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001632:	230a      	movs	r3, #10
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4820      	ldr	r0, [pc, #128]	; (80016c0 <MX_GPIO_Init+0x304>)
 800163e:	f009 feef 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001642:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001646:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <MX_GPIO_Init+0x314>)
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	481c      	ldr	r0, [pc, #112]	; (80016c8 <MX_GPIO_Init+0x30c>)
 8001658:	f009 fee2 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800165c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4814      	ldr	r0, [pc, #80]	; (80016c8 <MX_GPIO_Init+0x30c>)
 8001676:	f009 fed3 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800167a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <MX_GPIO_Init+0x310>)
 8001694:	f009 fec4 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001698:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_GPIO_Init+0x314>)
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <MX_GPIO_Init+0x310>)
 80016ae:	f009 feb7 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80016b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e00d      	b.n	80016d8 <MX_GPIO_Init+0x31c>
 80016bc:	40021000 	.word	0x40021000
 80016c0:	48001000 	.word	0x48001000
 80016c4:	48000400 	.word	0x48000400
 80016c8:	48000c00 	.word	0x48000c00
 80016cc:	48000800 	.word	0x48000800
 80016d0:	10110000 	.word	0x10110000
 80016d4:	10210000 	.word	0x10210000
 80016d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f009 fe9a 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80016ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016fe:	230a      	movs	r3, #10
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f009 fe88 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001710:	2302      	movs	r3, #2
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001720:	2305      	movs	r3, #5
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	481c      	ldr	r0, [pc, #112]	; (800179c <MX_GPIO_Init+0x3e0>)
 800172c:	f009 fe78 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001730:	2378      	movs	r3, #120	; 0x78
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001740:	2307      	movs	r3, #7
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4814      	ldr	r0, [pc, #80]	; (800179c <MX_GPIO_Init+0x3e0>)
 800174c:	f009 fe68 	bl	800b420 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001750:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001756:	2312      	movs	r3, #18
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001762:	2304      	movs	r3, #4
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <MX_GPIO_Init+0x3e4>)
 800176e:	f009 fe57 	bl	800b420 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2105      	movs	r1, #5
 8001776:	2017      	movs	r0, #23
 8001778:	f009 fe28 	bl	800b3cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800177c:	2017      	movs	r0, #23
 800177e:	f009 fe41 	bl	800b404 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2105      	movs	r1, #5
 8001786:	2028      	movs	r0, #40	; 0x28
 8001788:	f009 fe20 	bl	800b3cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800178c:	2028      	movs	r0, #40	; 0x28
 800178e:	f009 fe39 	bl	800b404 <HAL_NVIC_EnableIRQ>

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	48000c00 	.word	0x48000c00
 80017a0:	48000400 	.word	0x48000400

080017a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == USER_BUTTON_PIN) {
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b4:	d118      	bne.n	80017e8 <HAL_GPIO_EXTI_Callback+0x44>

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f04f 31ff 	mov.w	r1, #4294967295
 80017be:	4618      	mov	r0, r3
 80017c0:	f00e fbce 	bl	800ff60 <osMutexWait>

		printf("Received interrupt from user button \r\n");
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <HAL_GPIO_EXTI_Callback+0x50>)
 80017c6:	f011 fd95 	bl	80132f4 <puts>

		manager.status = manager.status == RACING ? WAITING_FOR_GREEN_LIGHT : RACING;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	bf14      	ite	ne
 80017d2:	2301      	movne	r3, #1
 80017d4:	2300      	moveq	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80017dc:	61da      	str	r2, [r3, #28]

		osMutexRelease(managerMutexHandle);
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f00e fc0a 	bl	800fffc <osMutexRelease>
	}
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200109b0 	.word	0x200109b0
 80017f4:	080157cc 	.word	0x080157cc
 80017f8:	2001086c 	.word	0x2001086c

080017fc <startGreenLightTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startGreenLightTask */
void startGreenLightTask(void const * argument)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		TickType_t initial_time = 0, end_time = 0,diff = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
		initial_time = xTaskGetTickCount();
 8001810:	f00f fd9e 	bl	8011350 <xTaskGetTickCount>
 8001814:	6178      	str	r0, [r7, #20]

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <startGreenLightTask+0x58>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f04f 31ff 	mov.w	r1, #4294967295
 800181e:	4618      	mov	r0, r3
 8001820:	f00e fb9e 	bl	800ff60 <osMutexWait>

		if (manager.status == RACING) {
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <startGreenLightTask+0x5c>)
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d102      	bne.n	8001832 <startGreenLightTask+0x36>
			BSP_LED_Toggle(LED2);
 800182c:	2000      	movs	r0, #0
 800182e:	f000 fe5f 	bl	80024f0 <BSP_LED_Toggle>
		}

		osMutexRelease(managerMutexHandle);
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <startGreenLightTask+0x58>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f00e fbe0 	bl	800fffc <osMutexRelease>

		end_time= xTaskGetTickCount();
 800183c:	f00f fd88 	bl	8011350 <xTaskGetTickCount>
 8001840:	6138      	str	r0, [r7, #16]
		diff = end_time - initial_time;
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	60fb      	str	r3, [r7, #12]

		osDelay(OS_DELAY_STANDARD);
 800184a:	20fa      	movs	r0, #250	; 0xfa
 800184c:	f00e fb5c 	bl	800ff08 <osDelay>
	{
 8001850:	e7d8      	b.n	8001804 <startGreenLightTask+0x8>
 8001852:	bf00      	nop
 8001854:	200109b0 	.word	0x200109b0
 8001858:	2001086c 	.word	0x2001086c

0800185c <startTrackDataPrintTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTrackDataPrintTask */
void startTrackDataPrintTask(void const * argument)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	; 0x38
 8001860:	af02      	add	r7, sp, #8
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTrackDataPrintTask */
	/* Infinite loop */
	for(;;)
	{
		TickType_t initial_time = 0, end_time = 0,diff = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
		initial_time = xTaskGetTickCount();
 8001870:	f00f fd6e 	bl	8011350 <xTaskGetTickCount>
 8001874:	62f8      	str	r0, [r7, #44]	; 0x2c

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001876:	4b44      	ldr	r3, [pc, #272]	; (8001988 <startTrackDataPrintTask+0x12c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f04f 31ff 	mov.w	r1, #4294967295
 800187e:	4618      	mov	r0, r3
 8001880:	f00e fb6e 	bl	800ff60 <osMutexWait>

		if (manager.status == WAITING_FOR_GREEN_LIGHT && manager.temperature_value > 0) {
 8001884:	4b41      	ldr	r3, [pc, #260]	; (800198c <startTrackDataPrintTask+0x130>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d16d      	bne.n	8001968 <startTrackDataPrintTask+0x10c>
 800188c:	4b3f      	ldr	r3, [pc, #252]	; (800198c <startTrackDataPrintTask+0x130>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189a:	dd65      	ble.n	8001968 <startTrackDataPrintTask+0x10c>

			//Pressure

			int normalized = manager.pressure_value;
 800189c:	4b3b      	ldr	r3, [pc, #236]	; (800198c <startTrackDataPrintTask+0x130>)
 800189e:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a6:	ee17 3a90 	vmov	r3, s15
 80018aa:	623b      	str	r3, [r7, #32]
			snprintf(str_prs,100,"Track pressure update: %d mBar \n\r", normalized);
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	4a38      	ldr	r2, [pc, #224]	; (8001990 <startTrackDataPrintTask+0x134>)
 80018b0:	2164      	movs	r1, #100	; 0x64
 80018b2:	4838      	ldr	r0, [pc, #224]	; (8001994 <startTrackDataPrintTask+0x138>)
 80018b4:	f011 fda0 	bl	80133f8 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_prs,sizeof(str_prs),1000);
 80018b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018bc:	2264      	movs	r2, #100	; 0x64
 80018be:	4935      	ldr	r1, [pc, #212]	; (8001994 <startTrackDataPrintTask+0x138>)
 80018c0:	4835      	ldr	r0, [pc, #212]	; (8001998 <startTrackDataPrintTask+0x13c>)
 80018c2:	f00d fe1f 	bl	800f504 <HAL_UART_Transmit>

			//Temperature

			float temp_value = manager.temperature_value;
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <startTrackDataPrintTask+0x130>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	61fb      	str	r3, [r7, #28]
			int tmpInt1 = temp_value;
 80018cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80018d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d4:	ee17 3a90 	vmov	r3, s15
 80018d8:	61bb      	str	r3, [r7, #24]
			float tmpFrac = temp_value - tmpInt1;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80018e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ec:	edc7 7a05 	vstr	s15, [r7, #20]
			int tmpInt2 = trunc(tmpFrac * 100);
 80018f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80018f4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800199c <startTrackDataPrintTask+0x140>
 80018f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018fc:	ee17 0a90 	vmov	r0, s15
 8001900:	f7fe fe22 	bl	8000548 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	ec43 2b10 	vmov	d0, r2, r3
 800190c:	f013 fe4a 	bl	80155a4 <trunc>
 8001910:	ec53 2b10 	vmov	r2, r3, d0
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff f91e 	bl	8000b58 <__aeabi_d2iz>
 800191c:	4603      	mov	r3, r0
 800191e:	613b      	str	r3, [r7, #16]
			snprintf(str_tmp,100,"Track temperature update: %d.%02d C\n\r", tmpInt1, tmpInt2);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <startTrackDataPrintTask+0x144>)
 8001928:	2164      	movs	r1, #100	; 0x64
 800192a:	481e      	ldr	r0, [pc, #120]	; (80019a4 <startTrackDataPrintTask+0x148>)
 800192c:	f011 fd64 	bl	80133f8 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 8001930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001934:	2264      	movs	r2, #100	; 0x64
 8001936:	491b      	ldr	r1, [pc, #108]	; (80019a4 <startTrackDataPrintTask+0x148>)
 8001938:	4817      	ldr	r0, [pc, #92]	; (8001998 <startTrackDataPrintTask+0x13c>)
 800193a:	f00d fde3 	bl	800f504 <HAL_UART_Transmit>

			//Humidity

			int hmd = manager.humidity_value;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <startTrackDataPrintTask+0x130>)
 8001940:	edd3 7a01 	vldr	s15, [r3, #4]
 8001944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001948:	ee17 3a90 	vmov	r3, s15
 800194c:	60fb      	str	r3, [r7, #12]
			snprintf(str_hmd,100,"Track humidity update: %d %%\n\r", hmd);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <startTrackDataPrintTask+0x14c>)
 8001952:	2164      	movs	r1, #100	; 0x64
 8001954:	4815      	ldr	r0, [pc, #84]	; (80019ac <startTrackDataPrintTask+0x150>)
 8001956:	f011 fd4f 	bl	80133f8 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_hmd,sizeof(str_hmd),1000);
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	2264      	movs	r2, #100	; 0x64
 8001960:	4912      	ldr	r1, [pc, #72]	; (80019ac <startTrackDataPrintTask+0x150>)
 8001962:	480d      	ldr	r0, [pc, #52]	; (8001998 <startTrackDataPrintTask+0x13c>)
 8001964:	f00d fdce 	bl	800f504 <HAL_UART_Transmit>
		}

		osMutexRelease(managerMutexHandle);
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <startTrackDataPrintTask+0x12c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f00e fb45 	bl	800fffc <osMutexRelease>

		end_time= xTaskGetTickCount();
 8001972:	f00f fced 	bl	8011350 <xTaskGetTickCount>
 8001976:	62b8      	str	r0, [r7, #40]	; 0x28
		diff = end_time - initial_time;
 8001978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	627b      	str	r3, [r7, #36]	; 0x24

		osDelay(OS_DELAY_STANDARD);
 8001980:	20fa      	movs	r0, #250	; 0xfa
 8001982:	f00e fac1 	bl	800ff08 <osDelay>
	{
 8001986:	e76d      	b.n	8001864 <startTrackDataPrintTask+0x8>
 8001988:	200109b0 	.word	0x200109b0
 800198c:	2001086c 	.word	0x2001086c
 8001990:	080157f4 	.word	0x080157f4
 8001994:	20000a88 	.word	0x20000a88
 8001998:	20010924 	.word	0x20010924
 800199c:	42c80000 	.word	0x42c80000
 80019a0:	08015818 	.word	0x08015818
 80019a4:	200009c0 	.word	0x200009c0
 80019a8:	08015840 	.word	0x08015840
 80019ac:	20000a24 	.word	0x20000a24

080019b0 <startUserButtonTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUserButtonTask */
void startUserButtonTask(void const * argument)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUserButtonTask */
	/* Infinite loop */
	for(;;)
	{
		TickType_t initial_time = 0, end_time = 0,diff = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
		initial_time = xTaskGetTickCount();
 80019c4:	f00f fcc4 	bl	8011350 <xTaskGetTickCount>
 80019c8:	6178      	str	r0, [r7, #20]

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <startUserButtonTask+0x58>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f04f 31ff 	mov.w	r1, #4294967295
 80019d2:	4618      	mov	r0, r3
 80019d4:	f00e fac4 	bl	800ff60 <osMutexWait>

		if (manager.status == WAITING_FOR_GREEN_LIGHT) {
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <startUserButtonTask+0x5c>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <startUserButtonTask+0x36>

			//Callback is handled in the HAL_GPIO_EXTI_Callback method

			//printf("\033[2J"); //Clears the terminal

			printf("Press the USER button to start the Grand Prix...\r\n");
 80019e0:	480b      	ldr	r0, [pc, #44]	; (8001a10 <startUserButtonTask+0x60>)
 80019e2:	f011 fc87 	bl	80132f4 <puts>
		}

		end_time= xTaskGetTickCount();
 80019e6:	f00f fcb3 	bl	8011350 <xTaskGetTickCount>
 80019ea:	6138      	str	r0, [r7, #16]
		diff = end_time - initial_time;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	60fb      	str	r3, [r7, #12]

		osMutexRelease(managerMutexHandle);
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <startUserButtonTask+0x58>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00e faff 	bl	800fffc <osMutexRelease>

		osDelay(OS_DELAY_STANDARD);
 80019fe:	20fa      	movs	r0, #250	; 0xfa
 8001a00:	f00e fa82 	bl	800ff08 <osDelay>
	{
 8001a04:	e7d8      	b.n	80019b8 <startUserButtonTask+0x8>
 8001a06:	bf00      	nop
 8001a08:	200109b0 	.word	0x200109b0
 8001a0c:	2001086c 	.word	0x2001086c
 8001a10:	08015860 	.word	0x08015860

08001a14 <startProximitySensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startProximitySensorTask */
void startProximitySensorTask(void const * argument)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startProximitySensorTask */

	/* Infinite loop */
	for(;;)
	{
		TickType_t initial_time = 0, end_time = 0,diff = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
		initial_time = xTaskGetTickCount();
 8001a28:	f00f fc92 	bl	8011350 <xTaskGetTickCount>
 8001a2c:	6178      	str	r0, [r7, #20]

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <startProximitySensorTask+0x64>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f04f 31ff 	mov.w	r1, #4294967295
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00e fa92 	bl	800ff60 <osMutexWait>

		if (manager.status == RACING) {
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <startProximitySensorTask+0x68>)
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <startProximitySensorTask+0x42>

			uint16_t proximity_value = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	817b      	strh	r3, [r7, #10]

			proximity_value = VL53L0X_PROXIMITY_GetDistance();
 8001a48:	f009 faac 	bl	800afa4 <VL53L0X_PROXIMITY_GetDistance>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	817b      	strh	r3, [r7, #10]

			manager.proximity = proximity_value;
 8001a50:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <startProximitySensorTask+0x68>)
 8001a52:	897b      	ldrh	r3, [r7, #10]
 8001a54:	8313      	strh	r3, [r2, #24]
		}

		osMutexRelease(managerMutexHandle);
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <startProximitySensorTask+0x64>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f00e face 	bl	800fffc <osMutexRelease>

		end_time= xTaskGetTickCount();
 8001a60:	f00f fc76 	bl	8011350 <xTaskGetTickCount>
 8001a64:	6138      	str	r0, [r7, #16]
		diff = end_time - initial_time;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	60fb      	str	r3, [r7, #12]

		osDelay(OS_DELAY_STANDARD);
 8001a6e:	20fa      	movs	r0, #250	; 0xfa
 8001a70:	f00e fa4a 	bl	800ff08 <osDelay>
	{
 8001a74:	e7d2      	b.n	8001a1c <startProximitySensorTask+0x8>
 8001a76:	bf00      	nop
 8001a78:	200109b0 	.word	0x200109b0
 8001a7c:	2001086c 	.word	0x2001086c

08001a80 <startRaceDataPrintTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startRaceDataPrintTask */
void startRaceDataPrintTask(void const * argument)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRaceDataPrintTask */
	/* Infinite loop */
	for(;;)
	{
		TickType_t initial_time = 0, end_time = 0,diff = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
		initial_time = xTaskGetTickCount();
 8001a94:	f00f fc5c 	bl	8011350 <xTaskGetTickCount>
 8001a98:	6178      	str	r0, [r7, #20]

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <startRaceDataPrintTask+0x74>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00e fa5c 	bl	800ff60 <osMutexWait>

		if (manager.status == RACING) {
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <startRaceDataPrintTask+0x78>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d110      	bne.n	8001ad2 <startRaceDataPrintTask+0x52>

			snprintf(str_acc,100, computeCurrentCarPosition(manager.accelerometer_value.x));
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <startRaceDataPrintTask+0x78>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fc1b 	bl	80022f0 <computeCurrentCarPosition>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	2164      	movs	r1, #100	; 0x64
 8001ac0:	480e      	ldr	r0, [pc, #56]	; (8001afc <startRaceDataPrintTask+0x7c>)
 8001ac2:	f011 fc99 	bl	80133f8 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc,sizeof(str_acc),100);
 8001ac6:	2364      	movs	r3, #100	; 0x64
 8001ac8:	2264      	movs	r2, #100	; 0x64
 8001aca:	490c      	ldr	r1, [pc, #48]	; (8001afc <startRaceDataPrintTask+0x7c>)
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <startRaceDataPrintTask+0x80>)
 8001ace:	f00d fd19 	bl	800f504 <HAL_UART_Transmit>
		}

		//manager.race_executions++;

		osMutexRelease(managerMutexHandle);
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <startRaceDataPrintTask+0x74>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f00e fa90 	bl	800fffc <osMutexRelease>

		end_time= xTaskGetTickCount();
 8001adc:	f00f fc38 	bl	8011350 <xTaskGetTickCount>
 8001ae0:	6138      	str	r0, [r7, #16]
		diff = end_time - initial_time;
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	60fb      	str	r3, [r7, #12]

		osDelay(OS_DELAY_STANDARD);
 8001aea:	20fa      	movs	r0, #250	; 0xfa
 8001aec:	f00e fa0c 	bl	800ff08 <osDelay>
	{
 8001af0:	e7ca      	b.n	8001a88 <startRaceDataPrintTask+0x8>
 8001af2:	bf00      	nop
 8001af4:	200109b0 	.word	0x200109b0
 8001af8:	2001086c 	.word	0x2001086c
 8001afc:	20000aec 	.word	0x20000aec
 8001b00:	20010924 	.word	0x20010924

08001b04 <startAccelerometerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startAccelerometerTask */
void startAccelerometerTask(void const * argument)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAccelerometerTask */
	/* Infinite loop */
	for(;;)
	{
		TickType_t initial_time = 0, end_time = 0,diff = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
		initial_time = xTaskGetTickCount();
 8001b18:	f00f fc1a 	bl	8011350 <xTaskGetTickCount>
 8001b1c:	61f8      	str	r0, [r7, #28]

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <startAccelerometerTask+0x78>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f04f 31ff 	mov.w	r1, #4294967295
 8001b26:	4618      	mov	r0, r3
 8001b28:	f00e fa1a 	bl	800ff60 <osMutexWait>

		if (manager.status == RACING) {
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <startAccelerometerTask+0x7c>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d113      	bne.n	8001b5c <startAccelerometerTask+0x58>

			BSP_MOTION_SENSOR_Axes_t  acc_value = {0, 0, 0};
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]

			BSP_MOTION_SENSOR_GetAxes(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO, &acc_value);
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	461a      	mov	r2, r3
 8001b46:	2102      	movs	r1, #2
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f001 fc57 	bl	80033fc <BSP_MOTION_SENSOR_GetAxes>

			manager.accelerometer_value = acc_value;
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <startAccelerometerTask+0x7c>)
 8001b50:	330c      	adds	r3, #12
 8001b52:	f107 0208 	add.w	r2, r7, #8
 8001b56:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		osMutexRelease(managerMutexHandle);
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <startAccelerometerTask+0x78>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f00e fa4b 	bl	800fffc <osMutexRelease>

		end_time= xTaskGetTickCount();
 8001b66:	f00f fbf3 	bl	8011350 <xTaskGetTickCount>
 8001b6a:	61b8      	str	r0, [r7, #24]
		diff = end_time - initial_time;
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]

		osDelay(OS_DELAY_STANDARD);
 8001b74:	20fa      	movs	r0, #250	; 0xfa
 8001b76:	f00e f9c7 	bl	800ff08 <osDelay>
	{
 8001b7a:	e7c7      	b.n	8001b0c <startAccelerometerTask+0x8>
 8001b7c:	200109b0 	.word	0x200109b0
 8001b80:	2001086c 	.word	0x2001086c

08001b84 <startTemperatureSensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTemperatureSensorTask */
void startTemperatureSensorTask(void const * argument)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTemperatureSensorTask */

	/* Infinite loop */
	for(;;)
	{
		TickType_t initial_time = 0, end_time = 0,diff = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
		initial_time = xTaskGetTickCount();
 8001b98:	f00f fbda 	bl	8011350 <xTaskGetTickCount>
 8001b9c:	6178      	str	r0, [r7, #20]

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <startTemperatureSensorTask+0x58>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f00e f9da 	bl	800ff60 <osMutexWait>

		manager.temperature_value = BSP_TSENSOR_ReadTemp();
 8001bac:	f001 fdb6 	bl	800371c <BSP_TSENSOR_ReadTemp>
 8001bb0:	eef0 7a40 	vmov.f32	s15, s0
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <startTemperatureSensorTask+0x5c>)
 8001bb6:	edc3 7a00 	vstr	s15, [r3]

		osMutexRelease(managerMutexHandle);
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <startTemperatureSensorTask+0x58>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f00e fa1c 	bl	800fffc <osMutexRelease>

		end_time= xTaskGetTickCount();
 8001bc4:	f00f fbc4 	bl	8011350 <xTaskGetTickCount>
 8001bc8:	6138      	str	r0, [r7, #16]
		diff = end_time - initial_time;
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	60fb      	str	r3, [r7, #12]

		osDelay(OS_DELAY_STANDARD);
 8001bd2:	20fa      	movs	r0, #250	; 0xfa
 8001bd4:	f00e f998 	bl	800ff08 <osDelay>
	{
 8001bd8:	e7d8      	b.n	8001b8c <startTemperatureSensorTask+0x8>
 8001bda:	bf00      	nop
 8001bdc:	200109b0 	.word	0x200109b0
 8001be0:	2001086c 	.word	0x2001086c

08001be4 <startHumiditySensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startHumiditySensorTask */
void startHumiditySensorTask(void const * argument)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startHumiditySensorTask */
	/* Infinite loop */
	for(;;)
	{
		TickType_t initial_time = 0, end_time = 0,diff = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
		initial_time = xTaskGetTickCount();
 8001bf8:	f00f fbaa 	bl	8011350 <xTaskGetTickCount>
 8001bfc:	6178      	str	r0, [r7, #20]

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <startHumiditySensorTask+0x58>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f04f 31ff 	mov.w	r1, #4294967295
 8001c06:	4618      	mov	r0, r3
 8001c08:	f00e f9aa 	bl	800ff60 <osMutexWait>

		manager.humidity_value = BSP_HSENSOR_ReadHumidity();
 8001c0c:	f001 fb38 	bl	8003280 <BSP_HSENSOR_ReadHumidity>
 8001c10:	eef0 7a40 	vmov.f32	s15, s0
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <startHumiditySensorTask+0x5c>)
 8001c16:	edc3 7a01 	vstr	s15, [r3, #4]

		osMutexRelease(managerMutexHandle);
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <startHumiditySensorTask+0x58>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00e f9ec 	bl	800fffc <osMutexRelease>

		end_time= xTaskGetTickCount();
 8001c24:	f00f fb94 	bl	8011350 <xTaskGetTickCount>
 8001c28:	6138      	str	r0, [r7, #16]
		diff = end_time - initial_time;
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	60fb      	str	r3, [r7, #12]

		osDelay(OS_DELAY_STANDARD);
 8001c32:	20fa      	movs	r0, #250	; 0xfa
 8001c34:	f00e f968 	bl	800ff08 <osDelay>
	{
 8001c38:	e7d8      	b.n	8001bec <startHumiditySensorTask+0x8>
 8001c3a:	bf00      	nop
 8001c3c:	200109b0 	.word	0x200109b0
 8001c40:	2001086c 	.word	0x2001086c

08001c44 <startPressureSensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startPressureSensorTask */
void startPressureSensorTask(void const * argument)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPressureSensorTask */
	/* Infinite loop */
	for(;;)
	{
		TickType_t initial_time = 0, end_time = 0,diff = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
		initial_time = xTaskGetTickCount();
 8001c58:	f00f fb7a 	bl	8011350 <xTaskGetTickCount>
 8001c5c:	6178      	str	r0, [r7, #20]

		osMutexWait(managerMutexHandle, MUTEX_WAIT_TIMEOUT);
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <startPressureSensorTask+0x58>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f04f 31ff 	mov.w	r1, #4294967295
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00e f97a 	bl	800ff60 <osMutexWait>

		manager.pressure_value = BSP_PSENSOR_ReadPressure();
 8001c6c:	f001 fd2c 	bl	80036c8 <BSP_PSENSOR_ReadPressure>
 8001c70:	eef0 7a40 	vmov.f32	s15, s0
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <startPressureSensorTask+0x5c>)
 8001c76:	edc3 7a02 	vstr	s15, [r3, #8]

		osMutexRelease(managerMutexHandle);
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <startPressureSensorTask+0x58>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00e f9bc 	bl	800fffc <osMutexRelease>

		end_time= xTaskGetTickCount();
 8001c84:	f00f fb64 	bl	8011350 <xTaskGetTickCount>
 8001c88:	6138      	str	r0, [r7, #16]
		diff = end_time - initial_time;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	60fb      	str	r3, [r7, #12]

		osDelay(OS_DELAY_STANDARD);
 8001c92:	20fa      	movs	r0, #250	; 0xfa
 8001c94:	f00e f938 	bl	800ff08 <osDelay>
	{
 8001c98:	e7d8      	b.n	8001c4c <startPressureSensorTask+0x8>
 8001c9a:	bf00      	nop
 8001c9c:	200109b0 	.word	0x200109b0
 8001ca0:	2001086c 	.word	0x2001086c

08001ca4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cb6:	f009 fa8d 	bl	800b1d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40001000 	.word	0x40001000

08001cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ccc:	b672      	cpsid	i
}
 8001cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <Error_Handler+0x8>
	...

08001cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_MspInit+0x4c>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_MspInit+0x4c>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_MspInit+0x4c>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_MspInit+0x4c>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HAL_MspInit+0x4c>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_MspInit+0x4c>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	210f      	movs	r1, #15
 8001d0e:	f06f 0001 	mvn.w	r0, #1
 8001d12:	f009 fb5b 	bl	800b3cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b0ac      	sub	sp, #176	; 0xb0
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2288      	movs	r2, #136	; 0x88
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f010 fd9a 	bl	801287e <memset>
  if(hi2c->Instance==I2C2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_I2C_MspInit+0xb0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d13b      	bne.n	8001dcc <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00b fce7 	bl	800d734 <HAL_RCCEx_PeriphCLKConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d6c:	f7ff ffac 	bl	8001cc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001d88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d90:	2312      	movs	r3, #18
 8001d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001da2:	2304      	movs	r3, #4
 8001da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dac:	4619      	mov	r1, r3
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <HAL_I2C_MspInit+0xb8>)
 8001db0:	f009 fb36 	bl	800b420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001dba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	37b0      	adds	r7, #176	; 0xb0
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40005800 	.word	0x40005800
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	48000400 	.word	0x48000400

08001de0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_I2C_MspDeInit+0x3c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10f      	bne.n	8001e12 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_I2C_MspDeInit+0x40>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_I2C_MspDeInit+0x40>)
 8001df8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dfc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e02:	4808      	ldr	r0, [pc, #32]	; (8001e24 <HAL_I2C_MspDeInit+0x44>)
 8001e04:	f009 fcb6 	bl	800b774 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001e08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e0c:	4805      	ldr	r0, [pc, #20]	; (8001e24 <HAL_I2C_MspDeInit+0x44>)
 8001e0e:	f009 fcb1 	bl	800b774 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40005800 	.word	0x40005800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	48000400 	.word	0x48000400

08001e28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_SPI_MspInit+0x7c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d128      	bne.n	8001e9c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_SPI_MspInit+0x80>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <HAL_SPI_MspInit+0x80>)
 8001e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e54:	6593      	str	r3, [r2, #88]	; 0x58
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_SPI_MspInit+0x80>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_SPI_MspInit+0x80>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_SPI_MspInit+0x80>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_SPI_MspInit+0x80>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001e7a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e8c:	2306      	movs	r3, #6
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <HAL_SPI_MspInit+0x84>)
 8001e98:	f009 fac2 	bl	800b420 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40003c00 	.word	0x40003c00
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	48000800 	.word	0x48000800

08001eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0ae      	sub	sp, #184	; 0xb8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	2288      	movs	r2, #136	; 0x88
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f010 fcd4 	bl	801287e <memset>
  if(huart->Instance==USART1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a42      	ldr	r2, [pc, #264]	; (8001fe4 <HAL_UART_MspInit+0x134>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d13b      	bne.n	8001f58 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00b fc21 	bl	800d734 <HAL_RCCEx_PeriphCLKConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef8:	f7ff fee6 	bl	8001cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001efc:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f00:	4a39      	ldr	r2, [pc, #228]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f06:	6613      	str	r3, [r2, #96]	; 0x60
 8001f08:	4b37      	ldr	r3, [pc, #220]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f14:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	4a33      	ldr	r2, [pc, #204]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001f2c:	23c0      	movs	r3, #192	; 0xc0
 8001f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f44:	2307      	movs	r3, #7
 8001f46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4826      	ldr	r0, [pc, #152]	; (8001fec <HAL_UART_MspInit+0x13c>)
 8001f52:	f009 fa65 	bl	800b420 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f56:	e040      	b.n	8001fda <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <HAL_UART_MspInit+0x140>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d13b      	bne.n	8001fda <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f62:	2304      	movs	r3, #4
 8001f64:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f66:	2300      	movs	r3, #0
 8001f68:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f00b fbe0 	bl	800d734 <HAL_RCCEx_PeriphCLKConfig>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001f7a:	f7ff fea5 	bl	8001cc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_UART_MspInit+0x138>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001fae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fc8:	2307      	movs	r3, #7
 8001fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <HAL_UART_MspInit+0x144>)
 8001fd6:	f009 fa23 	bl	800b420 <HAL_GPIO_Init>
}
 8001fda:	bf00      	nop
 8001fdc:	37b8      	adds	r7, #184	; 0xb8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40013800 	.word	0x40013800
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	48000400 	.word	0x48000400
 8001ff0:	40004800 	.word	0x40004800
 8001ff4:	48000c00 	.word	0x48000c00

08001ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	2036      	movs	r0, #54	; 0x36
 800200e:	f009 f9dd 	bl	800b3cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002012:	2036      	movs	r0, #54	; 0x36
 8002014:	f009 f9f6 	bl	800b404 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_InitTick+0x9c>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_InitTick+0x9c>)
 800201e:	f043 0310 	orr.w	r3, r3, #16
 8002022:	6593      	str	r3, [r2, #88]	; 0x58
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_InitTick+0x9c>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002030:	f107 0210 	add.w	r2, r7, #16
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f00b fae8 	bl	800d610 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002040:	f00b faba 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 8002044:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <HAL_InitTick+0xa0>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	0c9b      	lsrs	r3, r3, #18
 8002050:	3b01      	subs	r3, #1
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_InitTick+0xa4>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <HAL_InitTick+0xa8>)
 8002058:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_InitTick+0xa4>)
 800205c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002060:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002062:	4a0e      	ldr	r2, [pc, #56]	; (800209c <HAL_InitTick+0xa4>)
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002066:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_InitTick+0xa4>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_InitTick+0xa4>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002074:	4809      	ldr	r0, [pc, #36]	; (800209c <HAL_InitTick+0xa4>)
 8002076:	f00c ff26 	bl	800eec6 <HAL_TIM_Base_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d104      	bne.n	800208a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002080:	4806      	ldr	r0, [pc, #24]	; (800209c <HAL_InitTick+0xa4>)
 8002082:	f00c ff81 	bl	800ef88 <HAL_TIM_Base_Start_IT>
 8002086:	4603      	mov	r3, r0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3730      	adds	r7, #48	; 0x30
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	431bde83 	.word	0x431bde83
 800209c:	200109c0 	.word	0x200109c0
 80020a0:	40001000 	.word	0x40001000

080020a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <NMI_Handler+0x4>

080020aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <MemManage_Handler+0x4>

080020b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80020d4:	2020      	movs	r0, #32
 80020d6:	f009 fc73 	bl	800b9c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80020da:	2040      	movs	r0, #64	; 0x40
 80020dc:	f009 fc70 	bl	800b9c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D11_Pin);
 80020e0:	2080      	movs	r0, #128	; 0x80
 80020e2:	f009 fc6d 	bl	800b9c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ISM43362_RST_Pin);
 80020e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020ea:	f009 fc69 	bl	800b9c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_CLK_Pin);
 80020f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020fa:	f009 fc61 	bl	800b9c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_NCS_Pin);
 80020fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002102:	f009 fc5d 	bl	800b9c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002106:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800210a:	f009 fc59 	bl	800b9c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO2_Pin);
 800210e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002112:	f009 fc55 	bl	800b9c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO3_Pin);
 8002116:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800211a:	f009 fc51 	bl	800b9c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <TIM6_DAC_IRQHandler+0x10>)
 800212a:	f00c ff9d 	bl	800f068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200109c0 	.word	0x200109c0

08002138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_kill>:

int _kill(int pid, int sig)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002152:	f010 fa63 	bl	801261c <__errno>
 8002156:	4603      	mov	r3, r0
 8002158:	2216      	movs	r2, #22
 800215a:	601a      	str	r2, [r3, #0]
	return -1;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_exit>:

void _exit (int status)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ffe7 	bl	8002148 <_kill>
	while (1) {}		/* Make sure we hang here */
 800217a:	e7fe      	b.n	800217a <_exit+0x12>

0800217c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e00a      	b.n	80021a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800218e:	f3af 8000 	nop.w
 8002192:	4601      	mov	r1, r0
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	60ba      	str	r2, [r7, #8]
 800219a:	b2ca      	uxtb	r2, r1
 800219c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dbf0      	blt.n	800218e <_read+0x12>
	}

return len;
 80021ac:	687b      	ldr	r3, [r7, #4]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	return -1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021de:	605a      	str	r2, [r3, #4]
	return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_isatty>:

int _isatty(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	return 1;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
	return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f010 f9e4 	bl	801261c <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20018000 	.word	0x20018000
 8002280:	00000400 	.word	0x00000400
 8002284:	20000b50 	.word	0x20000b50
 8002288:	20010b30 	.word	0x20010b30

0800228c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002290:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <SystemInit+0x5c>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <SystemInit+0x5c>)
 8002298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <SystemInit+0x60>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a11      	ldr	r2, [pc, #68]	; (80022ec <SystemInit+0x60>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <SystemInit+0x60>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <SystemInit+0x60>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <SystemInit+0x60>)
 80022b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <SystemInit+0x60>)
 80022c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <SystemInit+0x60>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a07      	ldr	r2, [pc, #28]	; (80022ec <SystemInit+0x60>)
 80022d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SystemInit+0x60>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00
 80022ec:	40021000 	.word	0x40021000

080022f0 <computeCurrentCarPosition>:
#include "track_utils.h"

char* computeCurrentCarPosition(int32_t x_axis) {
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

	//This method is called inside a mutex so there's no need to protect the sensors struct here

	int value = x_axis;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	60fb      	str	r3, [r7, #12]

	if (value < 0 && value > -100) {
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	da05      	bge.n	800230e <computeCurrentCarPosition+0x1e>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002308:	db01      	blt.n	800230e <computeCurrentCarPosition+0x1e>

		return CLEAR_TRACK
 800230a:	4b53      	ldr	r3, [pc, #332]	; (8002458 <computeCurrentCarPosition+0x168>)
 800230c:	e09d      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|          *         |\r\n"
				CLEAR_TRACK;

	} else if (value < -100 && value > -200) {
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8002314:	da05      	bge.n	8002322 <computeCurrentCarPosition+0x32>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 800231c:	db01      	blt.n	8002322 <computeCurrentCarPosition+0x32>

		return  CLEAR_TRACK
 800231e:	4b4f      	ldr	r3, [pc, #316]	; (800245c <computeCurrentCarPosition+0x16c>)
 8002320:	e093      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|        *           |\r\n"
				CLEAR_TRACK;

	} else if (value < -200 && value > -300) {
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8002328:	da05      	bge.n	8002336 <computeCurrentCarPosition+0x46>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8002330:	dd01      	ble.n	8002336 <computeCurrentCarPosition+0x46>

		return  CLEAR_TRACK
 8002332:	4b4b      	ldr	r3, [pc, #300]	; (8002460 <computeCurrentCarPosition+0x170>)
 8002334:	e089      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|       *            |\r\n"
				CLEAR_TRACK;

	} else if (value < -300 && value > -400) {
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 800233c:	da05      	bge.n	800234a <computeCurrentCarPosition+0x5a>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8002344:	dd01      	ble.n	800234a <computeCurrentCarPosition+0x5a>

		return  CLEAR_TRACK
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <computeCurrentCarPosition+0x174>)
 8002348:	e07f      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|      *             |\r\n"
				CLEAR_TRACK;

	} else if (value < -400 && value > -500) {
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8002350:	da05      	bge.n	800235e <computeCurrentCarPosition+0x6e>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8002358:	dd01      	ble.n	800235e <computeCurrentCarPosition+0x6e>

		return  CLEAR_TRACK
 800235a:	4b42      	ldr	r3, [pc, #264]	; (8002464 <computeCurrentCarPosition+0x174>)
 800235c:	e075      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|      *             |\r\n"
				CLEAR_TRACK;

	} else if (value < -500 && value > -600) {
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8002364:	da05      	bge.n	8002372 <computeCurrentCarPosition+0x82>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f513 7f16 	cmn.w	r3, #600	; 0x258
 800236c:	dd01      	ble.n	8002372 <computeCurrentCarPosition+0x82>

		return  CLEAR_TRACK
 800236e:	4b3e      	ldr	r3, [pc, #248]	; (8002468 <computeCurrentCarPosition+0x178>)
 8002370:	e06b      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|    *               |\r\n"
				CLEAR_TRACK;

	} else if (value < -600 && value > -700) {
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8002378:	da05      	bge.n	8002386 <computeCurrentCarPosition+0x96>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 8002380:	dd01      	ble.n	8002386 <computeCurrentCarPosition+0x96>

		return  CLEAR_TRACK
 8002382:	4b3a      	ldr	r3, [pc, #232]	; (800246c <computeCurrentCarPosition+0x17c>)
 8002384:	e061      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|   *                |\r\n"
				CLEAR_TRACK;

	} else if (value < -700 && value > -800) {
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 800238c:	da05      	bge.n	800239a <computeCurrentCarPosition+0xaa>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8002394:	dd01      	ble.n	800239a <computeCurrentCarPosition+0xaa>

		return CLEAR_TRACK
 8002396:	4b36      	ldr	r3, [pc, #216]	; (8002470 <computeCurrentCarPosition+0x180>)
 8002398:	e057      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|  *                 |\r\n"
				CLEAR_TRACK;

	} else if (value < -800) {
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f513 7f48 	cmn.w	r3, #800	; 0x320
 80023a0:	da01      	bge.n	80023a6 <computeCurrentCarPosition+0xb6>

		return  CLEAR_TRACK
 80023a2:	4b34      	ldr	r3, [pc, #208]	; (8002474 <computeCurrentCarPosition+0x184>)
 80023a4:	e051      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|*                   |\r\n"
				CLEAR_TRACK;

	} else if (value > 0 && value < 100) {
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	dd04      	ble.n	80023b6 <computeCurrentCarPosition+0xc6>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b63      	cmp	r3, #99	; 0x63
 80023b0:	dc01      	bgt.n	80023b6 <computeCurrentCarPosition+0xc6>

		return CLEAR_TRACK
 80023b2:	4b29      	ldr	r3, [pc, #164]	; (8002458 <computeCurrentCarPosition+0x168>)
 80023b4:	e049      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|          *         |\r\n"
				CLEAR_TRACK;

	} else if (value > 100 && value < 200) {
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b64      	cmp	r3, #100	; 0x64
 80023ba:	dd04      	ble.n	80023c6 <computeCurrentCarPosition+0xd6>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2bc7      	cmp	r3, #199	; 0xc7
 80023c0:	dc01      	bgt.n	80023c6 <computeCurrentCarPosition+0xd6>

		return  CLEAR_TRACK
 80023c2:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <computeCurrentCarPosition+0x188>)
 80023c4:	e041      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|           *        |\r\n"
				CLEAR_TRACK;

	} else if (value > 200 && value < 300) {
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2bc8      	cmp	r3, #200	; 0xc8
 80023ca:	dd05      	ble.n	80023d8 <computeCurrentCarPosition+0xe8>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80023d2:	da01      	bge.n	80023d8 <computeCurrentCarPosition+0xe8>

		return  CLEAR_TRACK
 80023d4:	4b29      	ldr	r3, [pc, #164]	; (800247c <computeCurrentCarPosition+0x18c>)
 80023d6:	e038      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|            *       |\r\n"
				CLEAR_TRACK;

	} else if (value > 300 && value < 400) {
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80023de:	dd05      	ble.n	80023ec <computeCurrentCarPosition+0xfc>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80023e6:	da01      	bge.n	80023ec <computeCurrentCarPosition+0xfc>

		return  CLEAR_TRACK
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <computeCurrentCarPosition+0x190>)
 80023ea:	e02e      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|             *      |\r\n"
				CLEAR_TRACK;

	} else if (value > 400 && value < 500) {
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80023f2:	dd05      	ble.n	8002400 <computeCurrentCarPosition+0x110>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023fa:	da01      	bge.n	8002400 <computeCurrentCarPosition+0x110>

		return  CLEAR_TRACK
 80023fc:	4b21      	ldr	r3, [pc, #132]	; (8002484 <computeCurrentCarPosition+0x194>)
 80023fe:	e024      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|              *     |\r\n"
				CLEAR_TRACK;

	} else if (value > 500 && value < 600) {
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002406:	dd05      	ble.n	8002414 <computeCurrentCarPosition+0x124>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800240e:	da01      	bge.n	8002414 <computeCurrentCarPosition+0x124>

		return  CLEAR_TRACK
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <computeCurrentCarPosition+0x198>)
 8002412:	e01a      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|               *    |\r\n"
				CLEAR_TRACK;

	} else if (value > 600 && value < 700) {
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800241a:	dd05      	ble.n	8002428 <computeCurrentCarPosition+0x138>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002422:	da01      	bge.n	8002428 <computeCurrentCarPosition+0x138>

		return  CLEAR_TRACK
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <computeCurrentCarPosition+0x19c>)
 8002426:	e010      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|                *   |\r\n"
				CLEAR_TRACK;


	} else if (value > 700 && value < 800) {
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800242e:	dd05      	ble.n	800243c <computeCurrentCarPosition+0x14c>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002436:	da01      	bge.n	800243c <computeCurrentCarPosition+0x14c>

		return  CLEAR_TRACK
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <computeCurrentCarPosition+0x1a0>)
 800243a:	e006      	b.n	800244a <computeCurrentCarPosition+0x15a>
				"|                 *  |\r\n"
				CLEAR_TRACK;

	} else if (value > 800) {
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002442:	dd01      	ble.n	8002448 <computeCurrentCarPosition+0x158>

		return  CLEAR_TRACK
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <computeCurrentCarPosition+0x1a4>)
 8002446:	e000      	b.n	800244a <computeCurrentCarPosition+0x15a>
				CLEAR_TRACK;
	}

	else {

		return "";
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <computeCurrentCarPosition+0x1a8>)
	}

}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	08015894 	.word	0x08015894
 800245c:	080158e0 	.word	0x080158e0
 8002460:	0801592c 	.word	0x0801592c
 8002464:	08015978 	.word	0x08015978
 8002468:	080159c4 	.word	0x080159c4
 800246c:	08015a10 	.word	0x08015a10
 8002470:	08015a5c 	.word	0x08015a5c
 8002474:	08015aa8 	.word	0x08015aa8
 8002478:	08015af4 	.word	0x08015af4
 800247c:	08015b40 	.word	0x08015b40
 8002480:	08015b8c 	.word	0x08015b8c
 8002484:	08015bd8 	.word	0x08015bd8
 8002488:	08015c24 	.word	0x08015c24
 800248c:	08015c70 	.word	0x08015c70
 8002490:	08015cbc 	.word	0x08015cbc
 8002494:	08015d08 	.word	0x08015d08
 8002498:	08015d54 	.word	0x08015d54

0800249c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800249c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a0:	f7ff fef4 	bl	800228c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024a6:	e003      	b.n	80024b0 <LoopCopyDataInit>

080024a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024ae:	3104      	adds	r1, #4

080024b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024b0:	480a      	ldr	r0, [pc, #40]	; (80024dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80024b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024b8:	d3f6      	bcc.n	80024a8 <CopyDataInit>
	ldr	r2, =_sbss
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024bc:	e002      	b.n	80024c4 <LoopFillZerobss>

080024be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024c0:	f842 3b04 	str.w	r3, [r2], #4

080024c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <LoopForever+0x16>)
	cmp	r2, r3
 80024c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024c8:	d3f9      	bcc.n	80024be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ca:	f010 f9a3 	bl	8012814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ce:	f7fe fd15 	bl	8000efc <main>

080024d2 <LoopForever>:

LoopForever:
    b LoopForever
 80024d2:	e7fe      	b.n	80024d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80024d8:	08016874 	.word	0x08016874
	ldr	r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80024e0:	200006e0 	.word	0x200006e0
	ldr	r2, =_sbss
 80024e4:	200006e0 	.word	0x200006e0
	ldr	r3, = _ebss
 80024e8:	20010b30 	.word	0x20010b30

080024ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC1_2_IRQHandler>
	...

080024f0 <BSP_LED_Toggle>:
  * @param  Led  LED to be toggled
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4a06      	ldr	r2, [pc, #24]	; (8002518 <BSP_LED_Toggle+0x28>)
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002506:	b292      	uxth	r2, r2
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f009 fa3e 	bl	800b98c <HAL_GPIO_TogglePin>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000004 	.word	0x20000004

0800251c <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	460a      	mov	r2, r1
 8002526:	71fb      	strb	r3, [r7, #7]
 8002528:	4613      	mov	r3, r2
 800252a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <BSP_PB_Init+0xa0>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002530:	4a22      	ldr	r2, [pc, #136]	; (80025bc <BSP_PB_Init+0xa0>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002538:	4b20      	ldr	r3, [pc, #128]	; (80025bc <BSP_PB_Init+0xa0>)
 800253a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002544:	79bb      	ldrb	r3, [r7, #6]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d112      	bne.n	8002570 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800254a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800254e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002554:	2301      	movs	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002558:	2302      	movs	r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <BSP_PB_Init+0xa4>)
 8002560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002564:	f107 020c 	add.w	r2, r7, #12
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f008 ff58 	bl	800b420 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002570:	79bb      	ldrb	r3, [r7, #6]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d11e      	bne.n	80025b4 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800257a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800257c:	2301      	movs	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <BSP_PB_Init+0xa8>)
 8002586:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	4a0d      	ldr	r2, [pc, #52]	; (80025c0 <BSP_PB_Init+0xa4>)
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	f107 020c 	add.w	r2, r7, #12
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f008 ff42 	bl	800b420 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800259c:	2328      	movs	r3, #40	; 0x28
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	2200      	movs	r2, #0
 80025a2:	210f      	movs	r1, #15
 80025a4:	4618      	mov	r0, r3
 80025a6:	f008 ff11 	bl	800b3cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80025aa:	2328      	movs	r3, #40	; 0x28
 80025ac:	b25b      	sxtb	r3, r3
 80025ae:	4618      	mov	r0, r3
 80025b0:	f008 ff28 	bl	800b404 <HAL_NVIC_EnableIRQ>
  }
}
 80025b4:	bf00      	nop
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	20000008 	.word	0x20000008
 80025c4:	10110000 	.word	0x10110000

080025c8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80025d0:	4b27      	ldr	r3, [pc, #156]	; (8002670 <I2Cx_MspInit+0xa8>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	4a26      	ldr	r2, [pc, #152]	; (8002670 <I2Cx_MspInit+0xa8>)
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <I2Cx_MspInit+0xa8>)
 80025de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80025e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025ec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80025ee:	2312      	movs	r3, #18
 80025f0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80025fa:	2304      	movs	r3, #4
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	481b      	ldr	r0, [pc, #108]	; (8002674 <I2Cx_MspInit+0xac>)
 8002606:	f008 ff0b 	bl	800b420 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	4818      	ldr	r0, [pc, #96]	; (8002674 <I2Cx_MspInit+0xac>)
 8002612:	f008 ff05 	bl	800b420 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <I2Cx_MspInit+0xa8>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	4a15      	ldr	r2, [pc, #84]	; (8002670 <I2Cx_MspInit+0xa8>)
 800261c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002620:	6593      	str	r3, [r2, #88]	; 0x58
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <I2Cx_MspInit+0xa8>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <I2Cx_MspInit+0xa8>)
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	4a0f      	ldr	r2, [pc, #60]	; (8002670 <I2Cx_MspInit+0xa8>)
 8002634:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002638:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <I2Cx_MspInit+0xa8>)
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <I2Cx_MspInit+0xa8>)
 8002640:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002644:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	210f      	movs	r1, #15
 800264a:	2021      	movs	r0, #33	; 0x21
 800264c:	f008 febe 	bl	800b3cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002650:	2021      	movs	r0, #33	; 0x21
 8002652:	f008 fed7 	bl	800b404 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	210f      	movs	r1, #15
 800265a:	2022      	movs	r0, #34	; 0x22
 800265c:	f008 feb6 	bl	800b3cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002660:	2022      	movs	r0, #34	; 0x22
 8002662:	f008 fecf 	bl	800b404 <HAL_NVIC_EnableIRQ>
}
 8002666:	bf00      	nop
 8002668:	3728      	adds	r7, #40	; 0x28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000
 8002674:	48000400 	.word	0x48000400

08002678 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <I2Cx_Init+0x54>)
 8002684:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <I2Cx_Init+0x58>)
 800268a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff89 	bl	80025c8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f009 f99a 	bl	800b9f0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80026bc:	2100      	movs	r1, #0
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f00a f90e 	bl	800c8e0 <HAL_I2CEx_ConfigAnalogFilter>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40005800 	.word	0x40005800
 80026d0:	00702681 	.word	0x00702681

080026d4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af04      	add	r7, sp, #16
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	72fb      	strb	r3, [r7, #11]
 80026e6:	460b      	mov	r3, r1
 80026e8:	813b      	strh	r3, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026f2:	7afb      	ldrb	r3, [r7, #11]
 80026f4:	b299      	uxth	r1, r3
 80026f6:	88f8      	ldrh	r0, [r7, #6]
 80026f8:	893a      	ldrh	r2, [r7, #8]
 80026fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fe:	9302      	str	r3, [sp, #8]
 8002700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	4603      	mov	r3, r0
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f009 fd2c 	bl	800c168 <HAL_I2C_Mem_Read>
 8002710:	4603      	mov	r3, r0
 8002712:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	4619      	mov	r1, r3
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f832 	bl	8002788 <I2Cx_Error>
  }
  return status;
 8002724:	7dfb      	ldrb	r3, [r7, #23]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b08a      	sub	sp, #40	; 0x28
 8002732:	af04      	add	r7, sp, #16
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	4608      	mov	r0, r1
 8002738:	4611      	mov	r1, r2
 800273a:	461a      	mov	r2, r3
 800273c:	4603      	mov	r3, r0
 800273e:	72fb      	strb	r3, [r7, #11]
 8002740:	460b      	mov	r3, r1
 8002742:	813b      	strh	r3, [r7, #8]
 8002744:	4613      	mov	r3, r2
 8002746:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800274c:	7afb      	ldrb	r3, [r7, #11]
 800274e:	b299      	uxth	r1, r3
 8002750:	88f8      	ldrh	r0, [r7, #6]
 8002752:	893a      	ldrh	r2, [r7, #8]
 8002754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002758:	9302      	str	r3, [sp, #8]
 800275a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	4603      	mov	r3, r0
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f009 fbeb 	bl	800bf40 <HAL_I2C_Mem_Write>
 800276a:	4603      	mov	r3, r0
 800276c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002774:	7afb      	ldrb	r3, [r7, #11]
 8002776:	4619      	mov	r1, r3
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f805 	bl	8002788 <I2Cx_Error>
  }
  return status;
 800277e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f009 f9ba 	bl	800bb0e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ff6c 	bl	8002678 <I2Cx_Init>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <SENSOR_IO_Init+0x10>)
 80027ae:	f7ff ff63 	bl	8002678 <I2Cx_Init>
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20010a90 	.word	0x20010a90

080027bc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
 80027c6:	460b      	mov	r3, r1
 80027c8:	71bb      	strb	r3, [r7, #6]
 80027ca:	4613      	mov	r3, r2
 80027cc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80027ce:	79bb      	ldrb	r3, [r7, #6]
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	79f9      	ldrb	r1, [r7, #7]
 80027d4:	2301      	movs	r3, #1
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	1d7b      	adds	r3, r7, #5
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2301      	movs	r3, #1
 80027de:	4803      	ldr	r0, [pc, #12]	; (80027ec <SENSOR_IO_Write+0x30>)
 80027e0:	f7ff ffa5 	bl	800272e <I2Cx_WriteMultiple>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20010a90 	.word	0x20010a90

080027f0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	4603      	mov	r3, r0
 80027f8:	460a      	mov	r2, r1
 80027fa:	71fb      	strb	r3, [r7, #7]
 80027fc:	4613      	mov	r3, r2
 80027fe:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002804:	79bb      	ldrb	r3, [r7, #6]
 8002806:	b29a      	uxth	r2, r3
 8002808:	79f9      	ldrb	r1, [r7, #7]
 800280a:	2301      	movs	r3, #1
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	f107 030f 	add.w	r3, r7, #15
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2301      	movs	r3, #1
 8002816:	4804      	ldr	r0, [pc, #16]	; (8002828 <SENSOR_IO_Read+0x38>)
 8002818:	f7ff ff5c 	bl	80026d4 <I2Cx_ReadMultiple>

  return read_value;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20010a90 	.word	0x20010a90

0800282c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af02      	add	r7, sp, #8
 8002832:	603a      	str	r2, [r7, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
 800283a:	460b      	mov	r3, r1
 800283c:	71bb      	strb	r3, [r7, #6]
 800283e:	4613      	mov	r3, r2
 8002840:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002842:	79bb      	ldrb	r3, [r7, #6]
 8002844:	b29a      	uxth	r2, r3
 8002846:	79f9      	ldrb	r1, [r7, #7]
 8002848:	88bb      	ldrh	r3, [r7, #4]
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2301      	movs	r3, #1
 8002852:	4804      	ldr	r0, [pc, #16]	; (8002864 <SENSOR_IO_ReadMultiple+0x38>)
 8002854:	f7ff ff3e 	bl	80026d4 <I2Cx_ReadMultiple>
 8002858:	4603      	mov	r3, r0
 800285a:	b29b      	uxth	r3, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20010a90 	.word	0x20010a90

08002868 <BSP_I2C2_Init>:
/**
  * @brief  Initialize BSP I2C2.
  * @retval BSP status.
  */
int32_t BSP_I2C2_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <BSP_I2C2_Init+0x70>)
 8002874:	4a19      	ldr	r2, [pc, #100]	; (80028dc <BSP_I2C2_Init+0x74>)
 8002876:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <BSP_I2C2_Init+0x78>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d11b      	bne.n	80028b8 <BSP_I2C2_Init+0x50>
  {
    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8002880:	4815      	ldr	r0, [pc, #84]	; (80028d8 <BSP_I2C2_Init+0x70>)
 8002882:	f009 fd8b 	bl	800c39c <HAL_I2C_GetState>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d115      	bne.n	80028b8 <BSP_I2C2_Init+0x50>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C2_MspInit(&hbus_i2c2);
 800288c:	4812      	ldr	r0, [pc, #72]	; (80028d8 <BSP_I2C2_Init+0x70>)
 800288e:	f000 f8b3 	bl	80029f8 <I2C2_MspInit>

      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2C2), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8002892:	2080      	movs	r0, #128	; 0x80
 8002894:	f00b fa38 	bl	800dd08 <HAL_RCCEx_GetPeriphCLKFreq>
 8002898:	4603      	mov	r3, r0
 800289a:	4912      	ldr	r1, [pc, #72]	; (80028e4 <BSP_I2C2_Init+0x7c>)
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f9c7 	bl	8002c30 <I2C_GetTiming>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4619      	mov	r1, r3
 80028a6:	480c      	ldr	r0, [pc, #48]	; (80028d8 <BSP_I2C2_Init+0x70>)
 80028a8:	f000 f876 	bl	8002998 <MX_I2C2_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <BSP_I2C2_Init+0x50>
      {
        status = BSP_ERROR_BUS_FAILURE;
 80028b2:	f06f 0307 	mvn.w	r3, #7
 80028b6:	607b      	str	r3, [r7, #4]
        }
      }
#endif
    }
  }
  if (I2c2InitCounter < 0xFFFFFFFFU)
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <BSP_I2C2_Init+0x78>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d004      	beq.n	80028cc <BSP_I2C2_Init+0x64>
  {
    I2c2InitCounter++;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <BSP_I2C2_Init+0x78>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <BSP_I2C2_Init+0x78>)
 80028ca:	6013      	str	r3, [r2, #0]
  }
  return status;
 80028cc:	687b      	ldr	r3, [r7, #4]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000b58 	.word	0x20000b58
 80028dc:	40005800 	.word	0x40005800
 80028e0:	20000b54 	.word	0x20000b54
 80028e4:	000186a0 	.word	0x000186a0

080028e8 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize BSP I2C2.
  * @retval BSP status.
  */
int32_t BSP_I2C2_DeInit(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]

  if (I2c2InitCounter > 0U)
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <BSP_I2C2_DeInit+0x48>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d014      	beq.n	8002924 <BSP_I2C2_DeInit+0x3c>
  {
    I2c2InitCounter--;
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <BSP_I2C2_DeInit+0x48>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3b01      	subs	r3, #1
 8002900:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <BSP_I2C2_DeInit+0x48>)
 8002902:	6013      	str	r3, [r2, #0]
    if (I2c2InitCounter == 0U)
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <BSP_I2C2_DeInit+0x48>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <BSP_I2C2_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C2_MspDeInit(&hbus_i2c2);
 800290c:	4809      	ldr	r0, [pc, #36]	; (8002934 <BSP_I2C2_DeInit+0x4c>)
 800290e:	f000 f8cb 	bl	8002aa8 <I2C2_MspDeInit>
#endif

      /* De-Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8002912:	4808      	ldr	r0, [pc, #32]	; (8002934 <BSP_I2C2_DeInit+0x4c>)
 8002914:	f009 f8fb 	bl	800bb0e <HAL_I2C_DeInit>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <BSP_I2C2_DeInit+0x3c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 800291e:	f06f 0303 	mvn.w	r3, #3
 8002922:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return status;
 8002924:	687b      	ldr	r3, [r7, #4]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000b54 	.word	0x20000b54
 8002934:	20000b58 	.word	0x20000b58

08002938 <BSP_I2C2_WriteReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af02      	add	r7, sp, #8
 800293e:	60ba      	str	r2, [r7, #8]
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	81fb      	strh	r3, [r7, #14]
 8002946:	460b      	mov	r3, r1
 8002948:	81bb      	strh	r3, [r7, #12]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  return I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 800294e:	89b9      	ldrh	r1, [r7, #12]
 8002950:	89f8      	ldrh	r0, [r7, #14]
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2201      	movs	r2, #1
 800295a:	f000 f8c1 	bl	8002ae0 <I2C2_WriteReg>
 800295e:	4603      	mov	r3, r0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af02      	add	r7, sp, #8
 800296e:	60ba      	str	r2, [r7, #8]
 8002970:	461a      	mov	r2, r3
 8002972:	4603      	mov	r3, r0
 8002974:	81fb      	strh	r3, [r7, #14]
 8002976:	460b      	mov	r3, r1
 8002978:	81bb      	strh	r3, [r7, #12]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 800297e:	89b9      	ldrh	r1, [r7, #12]
 8002980:	89f8      	ldrh	r0, [r7, #14]
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2201      	movs	r2, #1
 800298a:	f000 f8fd 	bl	8002b88 <I2C2_ReadReg>
 800298e:	4603      	mov	r3, r0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <MX_I2C2_Init>:
  * @param  hI2c I2C handle.
  * @param  timing I2C timing.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  hI2c->Init.Timing           = timing;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	621a      	str	r2, [r3, #32]

  return HAL_I2C_Init(hI2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f009 f80c 	bl	800b9f0 <HAL_I2C_Init>
 80029d8:	4603      	mov	r3, r0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <BSP_GetTick>:
/**
  * @brief  Provide a tick value in millisecond.
  * @retval Tick value.
  */
int32_t BSP_GetTick(void)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
  uint32_t ret;
  ret = HAL_GetTick();
 80029e8:	f008 fc08 	bl	800b1fc <HAL_GetTick>
 80029ec:	6078      	str	r0, [r7, #4]
  return (int32_t)ret;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <I2C2_MspInit>:
  * @brief  Initialize I2C2 MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 8002a00:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a04:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8002a18:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1c:	4a20      	ldr	r2, [pc, #128]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C2_SCL_GPIO_PIN;
 8002a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002a36:	2312      	movs	r3, #18
 8002a38:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002a42:	2304      	movs	r3, #4
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4815      	ldr	r0, [pc, #84]	; (8002aa4 <I2C2_MspInit+0xac>)
 8002a4e:	f008 fce7 	bl	800b420 <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C2_SDA_GPIO_PIN;
 8002a52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a56:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002a58:	2304      	movs	r3, #4
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4619      	mov	r1, r3
 8002a62:	4810      	ldr	r0, [pc, #64]	; (8002aa4 <I2C2_MspInit+0xac>)
 8002a64:	f008 fcdc 	bl	800b420 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a72:	6593      	str	r3, [r2, #88]	; 0x58
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	4a06      	ldr	r2, [pc, #24]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a8a:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <I2C2_MspInit+0xa8>)
 8002a92:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a96:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a98:	bf00      	nop
 8002a9a:	3728      	adds	r7, #40	; 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	48000400 	.word	0x48000400

08002aa8 <I2C2_MspDeInit>:
  * @brief  DeInitialize I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* De-initialiaze I2C SCL and SDA */
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab4:	4808      	ldr	r0, [pc, #32]	; (8002ad8 <I2C2_MspDeInit+0x30>)
 8002ab6:	f008 fe5d 	bl	800b774 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002abe:	4806      	ldr	r0, [pc, #24]	; (8002ad8 <I2C2_MspDeInit+0x30>)
 8002ac0:	f008 fe58 	bl	800b774 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <I2C2_MspDeInit+0x34>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <I2C2_MspDeInit+0x34>)
 8002aca:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ace:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	48000400 	.word	0x48000400
 8002adc:	40021000 	.word	0x40021000

08002ae0 <I2C2_WriteReg>:
  * @param  pData      The target register values to be written.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af04      	add	r7, sp, #16
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	4603      	mov	r3, r0
 8002aea:	81fb      	strh	r3, [r7, #14]
 8002aec:	460b      	mov	r3, r1
 8002aee:	81bb      	strh	r3, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C2_TIMEOUT) != HAL_OK)
 8002af8:	8978      	ldrh	r0, [r7, #10]
 8002afa:	89ba      	ldrh	r2, [r7, #12]
 8002afc:	89f9      	ldrh	r1, [r7, #14]
 8002afe:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b02:	9302      	str	r3, [sp, #8]
 8002b04:	8c3b      	ldrh	r3, [r7, #32]
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	481d      	ldr	r0, [pc, #116]	; (8002b84 <I2C2_WriteReg+0xa4>)
 8002b10:	f009 fa16 	bl	800bf40 <HAL_I2C_Mem_Write>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02f      	beq.n	8002b7a <I2C2_WriteReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c2);
 8002b1a:	481a      	ldr	r0, [pc, #104]	; (8002b84 <I2C2_WriteReg+0xa4>)
 8002b1c:	f009 fc4c 	bl	800c3b8 <HAL_I2C_GetError>
 8002b20:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <I2C2_WriteReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 8002b2c:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e022      	b.n	8002b7a <I2C2_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <I2C2_WriteReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 8002b3e:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	e019      	b.n	8002b7a <I2C2_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <I2C2_WriteReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b50:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e010      	b.n	8002b7a <I2C2_WriteReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d104      	bne.n	8002b6c <I2C2_WriteReg+0x8c>
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <I2C2_WriteReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 8002b6c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	e002      	b.n	8002b7a <I2C2_WriteReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8002b74:	f06f 0303 	mvn.w	r3, #3
 8002b78:	617b      	str	r3, [r7, #20]
    }    
  }

  return status;
 8002b7a:	697b      	ldr	r3, [r7, #20]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000b58 	.word	0x20000b58

08002b88 <I2C2_ReadReg>:
  * @param  pData      The target register values to be read.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af04      	add	r7, sp, #16
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	4603      	mov	r3, r0
 8002b92:	81fb      	strh	r3, [r7, #14]
 8002b94:	460b      	mov	r3, r1
 8002b96:	81bb      	strh	r3, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C2_TIMEOUT) != HAL_OK)
 8002ba0:	8978      	ldrh	r0, [r7, #10]
 8002ba2:	89ba      	ldrh	r2, [r7, #12]
 8002ba4:	89f9      	ldrh	r1, [r7, #14]
 8002ba6:	f242 7310 	movw	r3, #10000	; 0x2710
 8002baa:	9302      	str	r3, [sp, #8]
 8002bac:	8c3b      	ldrh	r3, [r7, #32]
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	481d      	ldr	r0, [pc, #116]	; (8002c2c <I2C2_ReadReg+0xa4>)
 8002bb8:	f009 fad6 	bl	800c168 <HAL_I2C_Mem_Read>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d02f      	beq.n	8002c22 <I2C2_ReadReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c2);
 8002bc2:	481a      	ldr	r0, [pc, #104]	; (8002c2c <I2C2_ReadReg+0xa4>)
 8002bc4:	f009 fbf8 	bl	800c3b8 <HAL_I2C_GetError>
 8002bc8:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <I2C2_ReadReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 8002bd4:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	e022      	b.n	8002c22 <I2C2_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <I2C2_ReadReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 8002be6:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e019      	b.n	8002c22 <I2C2_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <I2C2_ReadReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002bf8:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e010      	b.n	8002c22 <I2C2_ReadReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d104      	bne.n	8002c14 <I2C2_ReadReg+0x8c>
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <I2C2_ReadReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 8002c14:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e002      	b.n	8002c22 <I2C2_ReadReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8002c1c:	f06f 0303 	mvn.w	r3, #3
 8002c20:	617b      	str	r3, [r7, #20]
    }    
  }

  return status;
 8002c22:	697b      	ldr	r3, [r7, #20]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000b58 	.word	0x20000b58

08002c30 <I2C_GetTiming>:
  * @param  clock_src_hz I2C clock source in Hz.
  * @param  i2cfreq_hz Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_hz, uint32_t i2cfreq_hz)
{
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	6018      	str	r0, [r3, #0]
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	6019      	str	r1, [r3, #0]
  uint32_t ret = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  uint32_t speed;
  uint32_t is_valid_speed = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
  uint32_t p_prev = PRESC_MAX;
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
  int32_t  sdadel_min, sdadel_max;
  int32_t  scldel_min;
  struct   i2c_timings_s *s;
  struct   i2c_timings_s valid_timing[VALID_PRESC_NBR];
  uint16_t p, l, a, h;
  uint32_t valid_timing_nbr = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec

  const struct i2c_specs_s i2c_specs[3] =
 8002c58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c5c:	4ad1      	ldr	r2, [pc, #836]	; (8002fa4 <I2C_GetTiming+0x374>)
 8002c5e:	4618      	mov	r0, r3
 8002c60:	4611      	mov	r1, r2
 8002c62:	2378      	movs	r3, #120	; 0x78
 8002c64:	461a      	mov	r2, r3
 8002c66:	f00f fdfc 	bl	8012862 <memcpy>
      .sudat_min = 50,
      .l_min = 500,
      .h_min = 260,
    }
  };
  const struct i2c_setup_s i2c_user_setup[3] =
 8002c6a:	f107 030c 	add.w	r3, r7, #12
 8002c6e:	4ace      	ldr	r2, [pc, #824]	; (8002fa8 <I2C_GetTiming+0x378>)
 8002c70:	461c      	mov	r4, r3
 8002c72:	4615      	mov	r5, r2
 8002c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002c80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      .dnf = 0,
      .analog_filter = 1
    }
  };

  for (speed = 0; speed <= (uint32_t) I2C_SPEED_FAST_PLUS; speed++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8002c8a:	e026      	b.n	8002cda <I2C_GetTiming+0xaa>
  {
    if ((i2cfreq_hz >= i2c_specs[speed].rate_min) && (i2cfreq_hz <= i2c_specs[speed].rate_max))
 8002c8c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002c90:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	463a      	mov	r2, r7
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d312      	bcc.n	8002cd0 <I2C_GetTiming+0xa0>
 8002caa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002cae:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	463a      	mov	r2, r7
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d803      	bhi.n	8002cd0 <I2C_GetTiming+0xa0>
    {
      is_valid_speed = 1;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
      break;
 8002cce:	e008      	b.n	8002ce2 <I2C_GetTiming+0xb2>
  for (speed = 0; speed <= (uint32_t) I2C_SPEED_FAST_PLUS; speed++)
 8002cd0:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8002cda:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d9d4      	bls.n	8002c8c <I2C_GetTiming+0x5c>
    }
  }

  if ((is_valid_speed != 0U) && (speed  <= (uint32_t) I2C_SPEED_FAST_PLUS))
 8002ce2:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 82a1 	beq.w	800322e <I2C_GetTiming+0x5fe>
 8002cec:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	f200 829c 	bhi.w	800322e <I2C_GetTiming+0x5fe>
  {
    i2cclk = DIV_ROUND_CLOSEST(NSEC_PER_SEC, clock_src_hz);
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	085a      	lsrs	r2, r3, #1
 8002cfc:	4bab      	ldr	r3, [pc, #684]	; (8002fac <I2C_GetTiming+0x37c>)
 8002cfe:	4413      	add	r3, r2
 8002d00:	1d3a      	adds	r2, r7, #4
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d08:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    i2cspeed = DIV_ROUND_CLOSEST(NSEC_PER_SEC, i2cfreq_hz);
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	085a      	lsrs	r2, r3, #1
 8002d12:	4ba6      	ldr	r3, [pc, #664]	; (8002fac <I2C_GetTiming+0x37c>)
 8002d14:	4413      	add	r3, r2
 8002d16:	463a      	mov	r2, r7
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d1e:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    clk_error_prev = i2cspeed;
 8002d22:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8002d26:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304

    /* Analog and Digital Filters */
    af_delay_min = (i2c_user_setup[speed].analog_filter == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8002d2a:	f107 020c 	add.w	r2, r7, #12
 8002d2e:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	4413      	add	r3, r2
 8002d36:	330c      	adds	r3, #12
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <I2C_GetTiming+0x112>
 8002d3e:	2332      	movs	r3, #50	; 0x32
 8002d40:	e000      	b.n	8002d44 <I2C_GetTiming+0x114>
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
    af_delay_max = (i2c_user_setup[speed].analog_filter == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8002d48:	f107 020c 	add.w	r2, r7, #12
 8002d4c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	4413      	add	r3, r2
 8002d54:	330c      	adds	r3, #12
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d102      	bne.n	8002d62 <I2C_GetTiming+0x132>
 8002d5c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002d60:	e000      	b.n	8002d64 <I2C_GetTiming+0x134>
 8002d62:	2300      	movs	r3, #0
 8002d64:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
    dnf_delay    = i2c_user_setup[speed].dnf * i2cclk;
 8002d68:	f107 020c 	add.w	r2, r7, #12
 8002d6c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4413      	add	r3, r2
 8002d74:	3308      	adds	r3, #8
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    sdadel_min   = (int32_t) i2c_user_setup[speed].fall_time - (int32_t) i2c_specs[speed].hddat_min - (int32_t) af_delay_min - (((int32_t) i2c_user_setup[speed].dnf + 3) * (int32_t) i2cclk);
 8002d84:	f107 020c 	add.w	r2, r7, #12
 8002d88:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	4413      	add	r3, r2
 8002d90:	3304      	adds	r3, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002d9a:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	3314      	adds	r3, #20
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	1ac2      	subs	r2, r0, r3
 8002dae:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8002db2:	1ad2      	subs	r2, r2, r3
 8002db4:	f107 010c 	add.w	r1, r7, #12
 8002db8:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3303      	adds	r3, #3
 8002dc6:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    sdadel_max   = (int32_t) i2c_specs[speed].vddat_max - (int32_t) i2c_user_setup[speed].rise_time - (int32_t) af_delay_max - (((int32_t) i2c_user_setup[speed].dnf + 4) * (int32_t) i2cclk);
 8002dd4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002dd8:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	3318      	adds	r3, #24
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4619      	mov	r1, r3
 8002dec:	f107 020c 	add.w	r2, r7, #12
 8002df0:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	1aca      	subs	r2, r1, r3
 8002dfc:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8002e00:	1ad2      	subs	r2, r2, r3
 8002e02:	f107 010c 	add.w	r1, r7, #12
 8002e06:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3308      	adds	r3, #8
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3304      	adds	r3, #4
 8002e14:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    scldel_min   = (int32_t) i2c_user_setup[speed].rise_time + (int32_t) i2c_specs[speed].sudat_min;
 8002e22:	f107 020c 	add.w	r2, r7, #12
 8002e26:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	4413      	add	r3, r2
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002e36:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	331c      	adds	r3, #28
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4403      	add	r3, r0
 8002e4a:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
    if (sdadel_min < 0)
 8002e4e:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da02      	bge.n	8002e5c <I2C_GetTiming+0x22c>
    {
      sdadel_min = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    }
    if (sdadel_max < 0)
 8002e5c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	da02      	bge.n	8002e6a <I2C_GetTiming+0x23a>
    {
      sdadel_max = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    }

    /* Compute possible values for PRESC, SCLDEL and SDADEL */
    for (p = 0; p < PRESC_MAX; p++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f8a7 32f6 	strh.w	r3, [r7, #758]	; 0x2f6
 8002e70:	e08b      	b.n	8002f8a <I2C_GetTiming+0x35a>
    {
      for (l = 0; l < SCLDEL_MAX; l++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 8002e78:	e07d      	b.n	8002f76 <I2C_GetTiming+0x346>
      {
        int32_t scldel = ((int32_t) l + 1) * ((int32_t) p + 1) * (int32_t) i2cclk;
 8002e7a:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f8b7 22f6 	ldrh.w	r2, [r7, #758]	; 0x2f6
 8002e84:	3201      	adds	r2, #1
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
        if (scldel < scldel_min)
 8002e96:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8002e9a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	db63      	blt.n	8002f6a <I2C_GetTiming+0x33a>
        {
          continue;
        }
        for (a = 0; a < SDADEL_MAX; a++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
 8002ea8:	e05a      	b.n	8002f60 <I2C_GetTiming+0x330>
        {
          int32_t sdadel = (((int32_t) a * ((int32_t) p + 1)) + 1) * (int32_t) i2cclk;
 8002eaa:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002eae:	f8b7 22f6 	ldrh.w	r2, [r7, #758]	; 0x2f6
 8002eb2:	3201      	adds	r2, #1
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8002ebe:	fb02 f303 	mul.w	r3, r2, r3
 8002ec2:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
          if (((sdadel >= sdadel_min) && (sdadel <= sdadel_max))&& (p != p_prev))
 8002ec6:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8002eca:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	db41      	blt.n	8002f56 <I2C_GetTiming+0x326>
 8002ed2:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8002ed6:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002eda:	429a      	cmp	r2, r3
 8002edc:	dc3b      	bgt.n	8002f56 <I2C_GetTiming+0x326>
 8002ede:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002ee2:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d035      	beq.n	8002f56 <I2C_GetTiming+0x326>
          {
            valid_timing[valid_timing_nbr].presc = (uint8_t) p;
 8002eea:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002eee:	b2d8      	uxtb	r0, r3
 8002ef0:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002ef4:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	440b      	add	r3, r1
 8002f00:	4602      	mov	r2, r0
 8002f02:	701a      	strb	r2, [r3, #0]
            valid_timing[valid_timing_nbr].scldel = (uint8_t) l;
 8002f04:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002f08:	b2d8      	uxtb	r0, r3
 8002f0a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002f0e:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	701a      	strb	r2, [r3, #0]
            valid_timing[valid_timing_nbr].sdadel = (uint8_t) a;
 8002f20:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002f24:	b2d8      	uxtb	r0, r3
 8002f26:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002f2a:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	3302      	adds	r3, #2
 8002f38:	4602      	mov	r2, r0
 8002f3a:	701a      	strb	r2, [r3, #0]
            p_prev = p;
 8002f3c:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002f40:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
            valid_timing_nbr ++;
 8002f44:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
            if(valid_timing_nbr >= VALID_PRESC_NBR)
 8002f4e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002f52:	2b63      	cmp	r3, #99	; 0x63
 8002f54:	d824      	bhi.n	8002fa0 <I2C_GetTiming+0x370>
        for (a = 0; a < SDADEL_MAX; a++)
 8002f56:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
 8002f60:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d9a0      	bls.n	8002eaa <I2C_GetTiming+0x27a>
 8002f68:	e000      	b.n	8002f6c <I2C_GetTiming+0x33c>
          continue;
 8002f6a:	bf00      	nop
      for (l = 0; l < SCLDEL_MAX; l++)
 8002f6c:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002f70:	3301      	adds	r3, #1
 8002f72:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 8002f76:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	f67f af7d 	bls.w	8002e7a <I2C_GetTiming+0x24a>
    for (p = 0; p < PRESC_MAX; p++)
 8002f80:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002f84:	3301      	adds	r3, #1
 8002f86:	f8a7 32f6 	strh.w	r3, [r7, #758]	; 0x2f6
 8002f8a:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	f67f af6f 	bls.w	8002e72 <I2C_GetTiming+0x242>
          }
        }
      }
    }

    if (valid_timing_nbr == 0U)
 8002f94:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <I2C_GetTiming+0x380>
    {
      return 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e148      	b.n	8003232 <I2C_GetTiming+0x602>
              goto Compute_scll_sclh;
 8002fa0:	bf00      	nop
 8002fa2:	e006      	b.n	8002fb2 <I2C_GetTiming+0x382>
 8002fa4:	08015d58 	.word	0x08015d58
 8002fa8:	08015dd0 	.word	0x08015dd0
 8002fac:	3b9aca00 	.word	0x3b9aca00
    }

Compute_scll_sclh:
 8002fb0:	bf00      	nop
    tsync = af_delay_min + dnf_delay + (2U * i2cclk);
 8002fb2:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8002fb6:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002fba:	441a      	add	r2, r3
 8002fbc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    s = NULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
    clk_max = NSEC_PER_SEC / i2c_specs[speed].rate_min;
 8002fce:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002fd2:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a95      	ldr	r2, [pc, #596]	; (800323c <I2C_GetTiming+0x60c>)
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    clk_min = NSEC_PER_SEC / i2c_specs[speed].rate_max;
 8002fee:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002ff2:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	3308      	adds	r3, #8
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a8d      	ldr	r2, [pc, #564]	; (800323c <I2C_GetTiming+0x60c>)
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
    *   (SCL Low Period - Analog/Digital filters) / 4.
    * - SCL High Period has to be lower than High Period of the SCL Clock
    *   defined by I2C Specification
    * - I2C Clock has to be lower than SCL High Period
    */
    for (uint32_t count = 0; count < valid_timing_nbr; count++)
 800300e:	2300      	movs	r3, #0
 8003010:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8003014:	e0e1      	b.n	80031da <I2C_GetTiming+0x5aa>
    {
      uint32_t prescaler = ((uint32_t) valid_timing[count].presc + 1U) * i2cclk;
 8003016:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800301a:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	440b      	add	r3, r1
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
      for (l = 0; l < SCLL_MAX; l++)
 8003036:	2300      	movs	r3, #0
 8003038:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 800303c:	e0c3      	b.n	80031c6 <I2C_GetTiming+0x596>
      {
        uint32_t tscl_l = (((uint32_t) l + 1U) * prescaler) + tsync;
 800303e:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8003042:	3301      	adds	r3, #1
 8003044:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8003050:	4413      	add	r3, r2
 8003052:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
        if ((tscl_l < i2c_specs[speed].l_min) || (i2cclk >= ((tscl_l - af_delay_min - dnf_delay) / 4U)))
 8003056:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800305a:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	3320      	adds	r3, #32
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8003070:	429a      	cmp	r2, r3
 8003072:	f0c0 80a2 	bcc.w	80031ba <I2C_GetTiming+0x58a>
 8003076:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 800307a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800307e:	1ad2      	subs	r2, r2, r3
 8003080:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800308c:	429a      	cmp	r2, r3
 800308e:	f080 8094 	bcs.w	80031ba <I2C_GetTiming+0x58a>
        {
          continue;
        }
        for (h = 0; h < SCLH_MAX; h++)
 8003092:	2300      	movs	r3, #0
 8003094:	f8a7 32f0 	strh.w	r3, [r7, #752]	; 0x2f0
 8003098:	e089      	b.n	80031ae <I2C_GetTiming+0x57e>
        {
          uint32_t tscl_h = (((uint32_t) h + 1U) * prescaler) + tsync;
 800309a:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 800309e:	3301      	adds	r3, #1
 80030a0:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80030ac:	4413      	add	r3, r2
 80030ae:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
          uint32_t tscl = tscl_l + tscl_h + i2c_user_setup[speed].rise_time + i2c_user_setup[speed].fall_time;
 80030b2:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 80030b6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80030ba:	441a      	add	r2, r3
 80030bc:	f107 010c 	add.w	r1, r7, #12
 80030c0:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	440b      	add	r3, r1
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	441a      	add	r2, r3
 80030cc:	f107 010c 	add.w	r1, r7, #12
 80030d0:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	440b      	add	r3, r1
 80030d8:	3304      	adds	r3, #4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= i2c_specs[speed].h_min) && (i2cclk < tscl_h))
 80030e2:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80030e6:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d35a      	bcc.n	80031a4 <I2C_GetTiming+0x574>
 80030ee:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80030f2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d854      	bhi.n	80031a4 <I2C_GetTiming+0x574>
 80030fa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80030fe:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	3324      	adds	r3, #36	; 0x24
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8003114:	429a      	cmp	r2, r3
 8003116:	d345      	bcc.n	80031a4 <I2C_GetTiming+0x574>
 8003118:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800311c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8003120:	429a      	cmp	r2, r3
 8003122:	d23f      	bcs.n	80031a4 <I2C_GetTiming+0x574>
          {
            int32_t clk_error = (int32_t) tscl - (int32_t) i2cspeed;
 8003124:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8003128:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            if (clk_error < 0)
 8003132:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8003136:	2b00      	cmp	r3, #0
 8003138:	da04      	bge.n	8003144 <I2C_GetTiming+0x514>
            {
              clk_error = -clk_error;
 800313a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800313e:	425b      	negs	r3, r3
 8003140:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            }
            /* save the solution with the lowest clock error */
            if (clk_error < (int32_t) clk_error_prev)
 8003144:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8003148:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800314c:	429a      	cmp	r2, r3
 800314e:	da29      	bge.n	80031a4 <I2C_GetTiming+0x574>
            {
              clk_error_prev = (uint32_t) clk_error;
 8003150:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8003154:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
              valid_timing[count].scll = (uint8_t) l;
 8003158:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 800315c:	b2d8      	uxtb	r0, r3
 800315e:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8003162:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	440b      	add	r3, r1
 800316e:	3304      	adds	r3, #4
 8003170:	4602      	mov	r2, r0
 8003172:	701a      	strb	r2, [r3, #0]
              valid_timing[count].sclh = (uint8_t) h;
 8003174:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 8003178:	b2d8      	uxtb	r0, r3
 800317a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800317e:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	440b      	add	r3, r1
 800318a:	3303      	adds	r3, #3
 800318c:	4602      	mov	r2, r0
 800318e:	701a      	strb	r2, [r3, #0]
              s = &valid_timing[count];
 8003190:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8003194:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	440b      	add	r3, r1
 80031a0:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
        for (h = 0; h < SCLH_MAX; h++)
 80031a4:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 80031a8:	3301      	adds	r3, #1
 80031aa:	f8a7 32f0 	strh.w	r3, [r7, #752]	; 0x2f0
 80031ae:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 80031b2:	2bff      	cmp	r3, #255	; 0xff
 80031b4:	f67f af71 	bls.w	800309a <I2C_GetTiming+0x46a>
 80031b8:	e000      	b.n	80031bc <I2C_GetTiming+0x58c>
          continue;
 80031ba:	bf00      	nop
      for (l = 0; l < SCLL_MAX; l++)
 80031bc:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 80031c0:	3301      	adds	r3, #1
 80031c2:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 80031c6:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 80031ca:	2bff      	cmp	r3, #255	; 0xff
 80031cc:	f67f af37 	bls.w	800303e <I2C_GetTiming+0x40e>
    for (uint32_t count = 0; count < valid_timing_nbr; count++)
 80031d0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80031d4:	3301      	adds	r3, #1
 80031d6:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80031da:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80031de:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80031e2:	429a      	cmp	r2, r3
 80031e4:	f4ff af17 	bcc.w	8003016 <I2C_GetTiming+0x3e6>
            }
          }
        }
      }
    }
    if (s == NULL)
 80031e8:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <I2C_GetTiming+0x5c4>
    {
      return 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e01e      	b.n	8003232 <I2C_GetTiming+0x602>
    }
    ret = (((uint32_t) s->presc & 0xFU) << 28) | (((uint32_t) s->scldel & 0xFU) << 20) | (((uint32_t) s->sdadel & 0xFU) << 16) | (((uint32_t) s->sclh & 0xFFU) << 8) | (((uint32_t) s->scll & 0xFFU) << 0);
 80031f4:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	071a      	lsls	r2, r3, #28
 80031fc:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8003200:	785b      	ldrb	r3, [r3, #1]
 8003202:	051b      	lsls	r3, r3, #20
 8003204:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003208:	431a      	orrs	r2, r3
 800320a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800320e:	789b      	ldrb	r3, [r3, #2]
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003216:	431a      	orrs	r2, r3
 8003218:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800321c:	78db      	ldrb	r3, [r3, #3]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	4313      	orrs	r3, r2
 8003222:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8003226:	7912      	ldrb	r2, [r2, #4]
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  }
  
  return ret;
 800322e:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
}
 8003232:	4618      	mov	r0, r3
 8003234:	f507 7746 	add.w	r7, r7, #792	; 0x318
 8003238:	46bd      	mov	sp, r7
 800323a:	bdb0      	pop	{r4, r5, r7, pc}
 800323c:	3b9aca00 	.word	0x3b9aca00

08003240 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <BSP_HSENSOR_Init+0x38>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	20be      	movs	r0, #190	; 0xbe
 800324c:	4798      	blx	r3
 800324e:	4603      	mov	r3, r0
 8003250:	2bbc      	cmp	r3, #188	; 0xbc
 8003252:	d002      	beq.n	800325a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	e009      	b.n	800326e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <BSP_HSENSOR_Init+0x3c>)
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <BSP_HSENSOR_Init+0x38>)
 800325e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <BSP_HSENSOR_Init+0x3c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	20be      	movs	r0, #190	; 0xbe
 8003268:	4798      	blx	r3
    ret = HSENSOR_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800326e:	687b      	ldr	r3, [r7, #4]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	2000000c 	.word	0x2000000c
 800327c:	20000ba4 	.word	0x20000ba4

08003280 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <BSP_HSENSOR_ReadHumidity+0x18>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	20be      	movs	r0, #190	; 0xbe
 800328c:	4798      	blx	r3
 800328e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003292:	eeb0 0a67 	vmov.f32	s0, s15
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000ba4 	.word	0x20000ba4

0800329c <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d903      	bls.n	80032b8 <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80032b0:	f06f 0301 	mvn.w	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	e03a      	b.n	800332e <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d108      	bne.n	80032d0 <BSP_MOTION_SENSOR_Init+0x34>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <BSP_MOTION_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80032c8:	f06f 030a 	mvn.w	r3, #10
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e02e      	b.n	800332e <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d108      	bne.n	80032e8 <BSP_MOTION_SENSOR_Init+0x4c>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <BSP_MOTION_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80032e0:	f06f 030a 	mvn.w	r3, #10
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e022      	b.n	800332e <BSP_MOTION_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <BSP_MOTION_SENSOR_Init+0x66>
    {
      if (LSM6DSL_Probe(Functions) != BSP_ERROR_NONE)
 80032ee:	6838      	ldr	r0, [r7, #0]
 80032f0:	f000 f8e8 	bl	80034c4 <LSM6DSL_Probe>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00c      	beq.n	8003314 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 80032fa:	f06f 0304 	mvn.w	r3, #4
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e008      	b.n	8003314 <BSP_MOTION_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      if (LIS3MDL_Probe(Functions) != BSP_ERROR_NONE)
 8003302:	6838      	ldr	r0, [r7, #0]
 8003304:	f000 f954 	bl	80035b0 <LIS3MDL_Probe>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 800330e:	f06f 0304 	mvn.w	r3, #4
 8003312:	60fb      	str	r3, [r7, #12]
      }
    }
    
    if (status == BSP_ERROR_NONE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <BSP_MOTION_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 800331a:	4a07      	ldr	r2, [pc, #28]	; (8003338 <BSP_MOTION_SENSOR_Init+0x9c>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	431a      	orrs	r2, r3
 8003326:	4904      	ldr	r1, [pc, #16]	; (8003338 <BSP_MOTION_SENSOR_Init+0x9c>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 800332e:	68fb      	ldr	r3, [r7, #12]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000ba8 	.word	0x20000ba8

0800333c <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d903      	bls.n	8003358 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003350:	f06f 0301 	mvn.w	r3, #1
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	e045      	b.n	80033e4 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d108      	bne.n	8003370 <BSP_MOTION_SENSOR_Enable+0x34>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <BSP_MOTION_SENSOR_Enable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003368:	f06f 030a 	mvn.w	r3, #10
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	e039      	b.n	80033e4 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d108      	bne.n	8003388 <BSP_MOTION_SENSOR_Enable+0x4c>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <BSP_MOTION_SENSOR_Enable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003380:	f06f 030a 	mvn.w	r3, #10
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e02d      	b.n	80033e4 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <BSP_MOTION_SENSOR_Enable+0xb4>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d103      	bne.n	80033a0 <BSP_MOTION_SENSOR_Enable+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8003398:	f04f 33ff 	mov.w	r3, #4294967295
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e021      	b.n	80033e4 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GyroIdx : ((Function == MOTION_ACCELERO) ? AcceleroIdx : MagnetoIdx);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d006      	beq.n	80033b4 <BSP_MOTION_SENSOR_Enable+0x78>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d101      	bne.n	80033b0 <BSP_MOTION_SENSOR_Enable+0x74>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e002      	b.n	80033b6 <BSP_MOTION_SENSOR_Enable+0x7a>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e000      	b.n	80033b6 <BSP_MOTION_SENSOR_Enable+0x7a>
 80033b4:	2300      	movs	r3, #0
 80033b6:	72fb      	strb	r3, [r7, #11]
    if(Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 80033b8:	7af9      	ldrb	r1, [r7, #11]
 80033ba:	480e      	ldr	r0, [pc, #56]	; (80033f4 <BSP_MOTION_SENSOR_Enable+0xb8>)
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	440b      	add	r3, r1
 80033c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	490a      	ldr	r1, [pc, #40]	; (80033f8 <BSP_MOTION_SENSOR_Enable+0xbc>)
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80033d4:	4610      	mov	r0, r2
 80033d6:	4798      	blx	r3
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da02      	bge.n	80033e4 <BSP_MOTION_SENSOR_Enable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80033de:	f06f 0304 	mvn.w	r3, #4
 80033e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80033e4:	68fb      	ldr	r3, [r7, #12]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000ba8 	.word	0x20000ba8
 80033f4:	20000bc0 	.word	0x20000bc0
 80033f8:	20000bb0 	.word	0x20000bb0

080033fc <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d802      	bhi.n	8003418 <BSP_MOTION_SENSOR_GetAxes+0x1c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003418:	f06f 0301 	mvn.w	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	e046      	b.n	80034ae <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <BSP_MOTION_SENSOR_GetAxes+0x3c>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <BSP_MOTION_SENSOR_GetAxes+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003430:	f06f 030a 	mvn.w	r3, #10
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	e03a      	b.n	80034ae <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d108      	bne.n	8003450 <BSP_MOTION_SENSOR_GetAxes+0x54>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <BSP_MOTION_SENSOR_GetAxes+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003448:	f06f 030a 	mvn.w	r3, #10
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	e02e      	b.n	80034ae <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003450:	4a19      	ldr	r2, [pc, #100]	; (80034b8 <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d103      	bne.n	8003468 <BSP_MOTION_SENSOR_GetAxes+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8003460:	f04f 33ff 	mov.w	r3, #4294967295
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	e022      	b.n	80034ae <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GyroIdx : ((Function == MOTION_ACCELERO) ? AcceleroIdx : MagnetoIdx);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d006      	beq.n	800347c <BSP_MOTION_SENSOR_GetAxes+0x80>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d101      	bne.n	8003478 <BSP_MOTION_SENSOR_GetAxes+0x7c>
 8003474:	2301      	movs	r3, #1
 8003476:	e002      	b.n	800347e <BSP_MOTION_SENSOR_GetAxes+0x82>
 8003478:	2302      	movs	r3, #2
 800347a:	e000      	b.n	800347e <BSP_MOTION_SENSOR_GetAxes+0x82>
 800347c:	2300      	movs	r3, #0
 800347e:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 8003480:	7cf9      	ldrb	r1, [r7, #19]
 8003482:	480e      	ldr	r0, [pc, #56]	; (80034bc <BSP_MOTION_SENSOR_GetAxes+0xc0>)
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	440b      	add	r3, r1
 800348e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	490a      	ldr	r1, [pc, #40]	; (80034c0 <BSP_MOTION_SENSOR_GetAxes+0xc4>)
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4610      	mov	r0, r2
 80034a0:	4798      	blx	r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	da02      	bge.n	80034ae <BSP_MOTION_SENSOR_GetAxes+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80034a8:	f06f 0304 	mvn.w	r3, #4
 80034ac:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80034ae:	697b      	ldr	r3, [r7, #20]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000ba8 	.word	0x20000ba8
 80034bc:	20000bc0 	.word	0x20000bc0
 80034c0:	20000bb0 	.word	0x20000bb0

080034c4 <LSM6DSL_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t LSM6DSL_Probe(uint32_t Functions)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  LSM6DSL_IO_t            IOCtx;
  uint8_t                 lsm6dsl_id;
  static LSM6DSL_Object_t LSM6DSL_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = LSM6DSL_I2C_BUS;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = LSM6DSL_I2C_ADD_L;
 80034d4:	23d5      	movs	r3, #213	; 0xd5
 80034d6:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 80034d8:	4b29      	ldr	r3, [pc, #164]	; (8003580 <LSM6DSL_Probe+0xbc>)
 80034da:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 80034dc:	4b29      	ldr	r3, [pc, #164]	; (8003584 <LSM6DSL_Probe+0xc0>)
 80034de:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 80034e0:	4b29      	ldr	r3, [pc, #164]	; (8003588 <LSM6DSL_Probe+0xc4>)
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 80034e4:	4b29      	ldr	r3, [pc, #164]	; (800358c <LSM6DSL_Probe+0xc8>)
 80034e6:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 80034e8:	4b29      	ldr	r3, [pc, #164]	; (8003590 <LSM6DSL_Probe+0xcc>)
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LSM6DSL_RegisterBusIO(&LSM6DSL_Obj, &IOCtx) != LSM6DSL_OK)
 80034ec:	f107 0310 	add.w	r3, r7, #16
 80034f0:	4619      	mov	r1, r3
 80034f2:	4828      	ldr	r0, [pc, #160]	; (8003594 <LSM6DSL_Probe+0xd0>)
 80034f4:	f001 fa3a 	bl	800496c <LSM6DSL_RegisterBusIO>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <LSM6DSL_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 80034fe:	f06f 0307 	mvn.w	r3, #7
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003504:	e037      	b.n	8003576 <LSM6DSL_Probe+0xb2>
  }
  else if (LSM6DSL_ReadID(&LSM6DSL_Obj, &lsm6dsl_id) != LSM6DSL_OK)
 8003506:	f107 030f 	add.w	r3, r7, #15
 800350a:	4619      	mov	r1, r3
 800350c:	4821      	ldr	r0, [pc, #132]	; (8003594 <LSM6DSL_Probe+0xd0>)
 800350e:	f001 fb23 	bl	8004b58 <LSM6DSL_ReadID>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <LSM6DSL_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8003518:	f06f 0304 	mvn.w	r3, #4
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800351e:	e02a      	b.n	8003576 <LSM6DSL_Probe+0xb2>
  }
  else if (lsm6dsl_id != LSM6DSL_ID)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b6a      	cmp	r3, #106	; 0x6a
 8003524:	d003      	beq.n	800352e <LSM6DSL_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8003526:	f06f 0306 	mvn.w	r3, #6
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352c:	e023      	b.n	8003576 <LSM6DSL_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &LSM6DSL_Obj;
 800352e:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <LSM6DSL_Probe+0xd4>)
 8003530:	4a18      	ldr	r2, [pc, #96]	; (8003594 <LSM6DSL_Probe+0xd0>)
 8003532:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &LSM6DSL_COMMON_Driver;
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <LSM6DSL_Probe+0xd8>)
 8003536:	4a1a      	ldr	r2, [pc, #104]	; (80035a0 <LSM6DSL_Probe+0xdc>)
 8003538:	601a      	str	r2, [r3, #0]
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <LSM6DSL_Probe+0xd8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a15      	ldr	r2, [pc, #84]	; (8003598 <LSM6DSL_Probe+0xd4>)
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	4610      	mov	r0, r2
 8003546:	4798      	blx	r3
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	da03      	bge.n	8003556 <LSM6DSL_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800354e:	f06f 0304 	mvn.w	r3, #4
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003554:	e00f      	b.n	8003576 <LSM6DSL_Probe+0xb2>
    }
    else
    {
      if ((Functions & MOTION_GYRO) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <LSM6DSL_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GyroIdx] = (MOTION_SENSOR_FuncDrv_t *) &LSM6DSL_GYRO_Driver;
 8003560:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <LSM6DSL_Probe+0xe0>)
 8003562:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <LSM6DSL_Probe+0xe4>)
 8003564:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <LSM6DSL_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][AcceleroIdx] = (MOTION_SENSOR_FuncDrv_t *) &LSM6DSL_ACC_Driver;
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <LSM6DSL_Probe+0xe0>)
 8003572:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <LSM6DSL_Probe+0xe8>)
 8003574:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003578:	4618      	mov	r0, r3
 800357a:	3730      	adds	r7, #48	; 0x30
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	08002869 	.word	0x08002869
 8003584:	080028e9 	.word	0x080028e9
 8003588:	08002969 	.word	0x08002969
 800358c:	08002939 	.word	0x08002939
 8003590:	080029e3 	.word	0x080029e3
 8003594:	20000bd8 	.word	0x20000bd8
 8003598:	20000bb0 	.word	0x20000bb0
 800359c:	20000bb8 	.word	0x20000bb8
 80035a0:	20000068 	.word	0x20000068
 80035a4:	20000bc0 	.word	0x20000bc0
 80035a8:	2000009c 	.word	0x2000009c
 80035ac:	20000078 	.word	0x20000078

080035b0 <LIS3MDL_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t LIS3MDL_Probe(uint32_t Functions)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08c      	sub	sp, #48	; 0x30
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  LIS3MDL_IO_t            IOCtx;
  uint8_t                 lis3mdl_id;
  static LIS3MDL_Object_t LIS3MDL_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = LIS3MDL_I2C_BUS;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = LIS3MDL_I2C_ADD_H;
 80035c0:	233d      	movs	r3, #61	; 0x3d
 80035c2:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <LIS3MDL_Probe+0xac>)
 80035c6:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <LIS3MDL_Probe+0xb0>)
 80035ca:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <LIS3MDL_Probe+0xb4>)
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 80035d0:	4b25      	ldr	r3, [pc, #148]	; (8003668 <LIS3MDL_Probe+0xb8>)
 80035d2:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <LIS3MDL_Probe+0xbc>)
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS3MDL_RegisterBusIO(&LIS3MDL_Obj, &IOCtx) != LIS3MDL_OK)
 80035d8:	f107 0310 	add.w	r3, r7, #16
 80035dc:	4619      	mov	r1, r3
 80035de:	4824      	ldr	r0, [pc, #144]	; (8003670 <LIS3MDL_Probe+0xc0>)
 80035e0:	f000 fa3c 	bl	8003a5c <LIS3MDL_RegisterBusIO>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <LIS3MDL_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 80035ea:	f06f 0307 	mvn.w	r3, #7
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f0:	e02f      	b.n	8003652 <LIS3MDL_Probe+0xa2>
  }
  else if (LIS3MDL_ReadID(&LIS3MDL_Obj, &lis3mdl_id) != LIS3MDL_OK)
 80035f2:	f107 030f 	add.w	r3, r7, #15
 80035f6:	4619      	mov	r1, r3
 80035f8:	481d      	ldr	r0, [pc, #116]	; (8003670 <LIS3MDL_Probe+0xc0>)
 80035fa:	f000 fae7 	bl	8003bcc <LIS3MDL_ReadID>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <LIS3MDL_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8003604:	f06f 0304 	mvn.w	r3, #4
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360a:	e022      	b.n	8003652 <LIS3MDL_Probe+0xa2>
  }
  else if (lis3mdl_id != LIS3MDL_ID)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b3d      	cmp	r3, #61	; 0x3d
 8003610:	d003      	beq.n	800361a <LIS3MDL_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8003612:	f06f 0306 	mvn.w	r3, #6
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003618:	e01b      	b.n	8003652 <LIS3MDL_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &LIS3MDL_Obj;
 800361a:	4b16      	ldr	r3, [pc, #88]	; (8003674 <LIS3MDL_Probe+0xc4>)
 800361c:	4a14      	ldr	r2, [pc, #80]	; (8003670 <LIS3MDL_Probe+0xc0>)
 800361e:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &LIS3MDL_COMMON_Driver;
 8003620:	4b15      	ldr	r3, [pc, #84]	; (8003678 <LIS3MDL_Probe+0xc8>)
 8003622:	4a16      	ldr	r2, [pc, #88]	; (800367c <LIS3MDL_Probe+0xcc>)
 8003624:	605a      	str	r2, [r3, #4]
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <LIS3MDL_Probe+0xc8>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a11      	ldr	r2, [pc, #68]	; (8003674 <LIS3MDL_Probe+0xc4>)
 800362e:	6852      	ldr	r2, [r2, #4]
 8003630:	4610      	mov	r0, r2
 8003632:	4798      	blx	r3
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	da03      	bge.n	8003642 <LIS3MDL_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800363a:	f06f 0304 	mvn.w	r3, #4
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003640:	e007      	b.n	8003652 <LIS3MDL_Probe+0xa2>
    }
    else
    {
      if ((Functions & MOTION_MAGNETO) != 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <LIS3MDL_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MagnetoIdx] = (MOTION_SENSOR_FuncDrv_t *) &LIS3MDL_MAG_Driver;
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <LIS3MDL_Probe+0xd0>)
 800364e:	4a0d      	ldr	r2, [pc, #52]	; (8003684 <LIS3MDL_Probe+0xd4>)
 8003650:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003654:	4618      	mov	r0, r3
 8003656:	3730      	adds	r7, #48	; 0x30
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	08002869 	.word	0x08002869
 8003660:	080028e9 	.word	0x080028e9
 8003664:	08002969 	.word	0x08002969
 8003668:	08002939 	.word	0x08002939
 800366c:	080029e3 	.word	0x080029e3
 8003670:	20000c08 	.word	0x20000c08
 8003674:	20000bb0 	.word	0x20000bb0
 8003678:	20000bb8 	.word	0x20000bb8
 800367c:	20000028 	.word	0x20000028
 8003680:	20000bc0 	.word	0x20000bc0
 8003684:	20000038 	.word	0x20000038

08003688 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800368e:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <BSP_PSENSOR_Init+0x38>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	20ba      	movs	r0, #186	; 0xba
 8003694:	4798      	blx	r3
 8003696:	4603      	mov	r3, r0
 8003698:	2bb1      	cmp	r3, #177	; 0xb1
 800369a:	d002      	beq.n	80036a2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	e009      	b.n	80036b6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <BSP_PSENSOR_Init+0x3c>)
 80036a4:	4a06      	ldr	r2, [pc, #24]	; (80036c0 <BSP_PSENSOR_Init+0x38>)
 80036a6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <BSP_PSENSOR_Init+0x3c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	20ba      	movs	r0, #186	; 0xba
 80036b0:	4798      	blx	r3
    ret = PSENSOR_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80036b6:	687b      	ldr	r3, [r7, #4]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	2000005c 	.word	0x2000005c
 80036c4:	20000c34 	.word	0x20000c34

080036c8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <BSP_PSENSOR_ReadPressure+0x18>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	20ba      	movs	r0, #186	; 0xba
 80036d4:	4798      	blx	r3
 80036d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80036da:	eeb0 0a67 	vmov.f32	s0, s15
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000c34 	.word	0x20000c34

080036e4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <BSP_TSENSOR_Init+0x30>)
 80036f0:	4a09      	ldr	r2, [pc, #36]	; (8003718 <BSP_TSENSOR_Init+0x34>)
 80036f2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80036f4:	f7ff f858 	bl	80027a8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <BSP_TSENSOR_Init+0x30>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2100      	movs	r1, #0
 8003700:	20be      	movs	r0, #190	; 0xbe
 8003702:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003708:	79fb      	ldrb	r3, [r7, #7]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000c38 	.word	0x20000c38
 8003718:	20000018 	.word	0x20000018

0800371c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <BSP_TSENSOR_ReadTemp+0x18>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	20be      	movs	r0, #190	; 0xbe
 8003728:	4798      	blx	r3
 800372a:	eef0 7a40 	vmov.f32	s15, s0
}
 800372e:	eeb0 0a67 	vmov.f32	s0, s15
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000c38 	.word	0x20000c38

08003738 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2120      	movs	r1, #32
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f851 	bl	80027f0 <SENSOR_IO_Read>
 800374e:	4603      	mov	r3, r0
 8003750:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	f043 0304 	orr.w	r3, r3, #4
 8003760:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	f023 0303 	bic.w	r3, r3, #3
 8003768:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003778:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	2120      	movs	r1, #32
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff f81a 	bl	80027bc <SENSOR_IO_Write>
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800379e:	f7ff f803 	bl	80027a8 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	210f      	movs	r1, #15
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff f821 	bl	80027f0 <SENSOR_IO_Read>
 80037ae:	4603      	mov	r3, r0
 80037b0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	b2d8      	uxtb	r0, r3
 80037ca:	f107 020c 	add.w	r2, r7, #12
 80037ce:	2302      	movs	r3, #2
 80037d0:	21b0      	movs	r1, #176	; 0xb0
 80037d2:	f7ff f82b 	bl	800282c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80037d6:	7b3b      	ldrb	r3, [r7, #12]
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80037de:	7b7b      	ldrb	r3, [r7, #13]
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	b2d8      	uxtb	r0, r3
 80037ea:	f107 020c 	add.w	r2, r7, #12
 80037ee:	2302      	movs	r3, #2
 80037f0:	21b6      	movs	r1, #182	; 0xb6
 80037f2:	f7ff f81b 	bl	800282c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80037f6:	7b7b      	ldrb	r3, [r7, #13]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	b21a      	sxth	r2, r3
 80037fc:	7b3b      	ldrb	r3, [r7, #12]
 80037fe:	b21b      	sxth	r3, r3
 8003800:	4313      	orrs	r3, r2
 8003802:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	b2d8      	uxtb	r0, r3
 8003808:	f107 020c 	add.w	r2, r7, #12
 800380c:	2302      	movs	r3, #2
 800380e:	21ba      	movs	r1, #186	; 0xba
 8003810:	f7ff f80c 	bl	800282c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003814:	7b7b      	ldrb	r3, [r7, #13]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	b21a      	sxth	r2, r3
 800381a:	7b3b      	ldrb	r3, [r7, #12]
 800381c:	b21b      	sxth	r3, r3
 800381e:	4313      	orrs	r3, r2
 8003820:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	b2d8      	uxtb	r0, r3
 8003826:	f107 020c 	add.w	r2, r7, #12
 800382a:	2302      	movs	r3, #2
 800382c:	21a8      	movs	r1, #168	; 0xa8
 800382e:	f7fe fffd 	bl	800282c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003832:	7b7b      	ldrb	r3, [r7, #13]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	b21a      	sxth	r2, r3
 8003838:	7b3b      	ldrb	r3, [r7, #12]
 800383a:	b21b      	sxth	r3, r3
 800383c:	4313      	orrs	r3, r2
 800383e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003840:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003844:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003852:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003856:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003864:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003868:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800386c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800387a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800388a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8003892:	edd7 7a04 	vldr	s15, [r7, #16]
 8003896:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800389a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800389e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80038a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80038a6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80038ec <HTS221_H_ReadHumidity+0x130>
 80038aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	dd01      	ble.n	80038b8 <HTS221_H_ReadHumidity+0xfc>
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HTS221_H_ReadHumidity+0x134>)
 80038b6:	e00a      	b.n	80038ce <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80038b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80038bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c4:	d502      	bpl.n	80038cc <HTS221_H_ReadHumidity+0x110>
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e000      	b.n	80038ce <HTS221_H_ReadHumidity+0x112>
 80038cc:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80038ce:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80038d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80038d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80038d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80038dc:	eef0 7a66 	vmov.f32	s15, s13
}
 80038e0:	eeb0 0a67 	vmov.f32	s0, s15
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	447a0000 	.word	0x447a0000
 80038f0:	447a0000 	.word	0x447a0000

080038f4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2120      	movs	r1, #32
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe ff72 	bl	80027f0 <SENSOR_IO_Read>
 800390c:	4603      	mov	r3, r0
 800390e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	f023 0304 	bic.w	r3, r3, #4
 8003916:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	f043 0304 	orr.w	r3, r3, #4
 800391e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003936:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	7bfa      	ldrb	r2, [r7, #15]
 800393e:	2120      	movs	r1, #32
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe ff3b 	bl	80027bc <SENSOR_IO_Write>
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b088      	sub	sp, #32
 8003952:	af00      	add	r7, sp, #0
 8003954:	4603      	mov	r3, r0
 8003956:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	b2d8      	uxtb	r0, r3
 800395c:	f107 0208 	add.w	r2, r7, #8
 8003960:	2302      	movs	r3, #2
 8003962:	21b2      	movs	r1, #178	; 0xb2
 8003964:	f7fe ff62 	bl	800282c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2135      	movs	r1, #53	; 0x35
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe ff3e 	bl	80027f0 <SENSOR_IO_Read>
 8003974:	4603      	mov	r3, r0
 8003976:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003978:	7ffb      	ldrb	r3, [r7, #31]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	b21b      	sxth	r3, r3
 800397e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003982:	b21a      	sxth	r2, r3
 8003984:	7a3b      	ldrb	r3, [r7, #8]
 8003986:	b21b      	sxth	r3, r3
 8003988:	4313      	orrs	r3, r2
 800398a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800398c:	7ffb      	ldrb	r3, [r7, #31]
 800398e:	019b      	lsls	r3, r3, #6
 8003990:	b21b      	sxth	r3, r3
 8003992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003996:	b21a      	sxth	r2, r3
 8003998:	7a7b      	ldrb	r3, [r7, #9]
 800399a:	b21b      	sxth	r3, r3
 800399c:	4313      	orrs	r3, r2
 800399e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80039a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80039a4:	10db      	asrs	r3, r3, #3
 80039a6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80039a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80039ac:	10db      	asrs	r3, r3, #3
 80039ae:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	b2d8      	uxtb	r0, r3
 80039b4:	f107 0208 	add.w	r2, r7, #8
 80039b8:	2304      	movs	r3, #4
 80039ba:	21bc      	movs	r1, #188	; 0xbc
 80039bc:	f7fe ff36 	bl	800282c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80039c0:	7a7b      	ldrb	r3, [r7, #9]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	b21a      	sxth	r2, r3
 80039c6:	7a3b      	ldrb	r3, [r7, #8]
 80039c8:	b21b      	sxth	r3, r3
 80039ca:	4313      	orrs	r3, r2
 80039cc:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80039ce:	7afb      	ldrb	r3, [r7, #11]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	b21a      	sxth	r2, r3
 80039d4:	7abb      	ldrb	r3, [r7, #10]
 80039d6:	b21b      	sxth	r3, r3
 80039d8:	4313      	orrs	r3, r2
 80039da:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	b2d8      	uxtb	r0, r3
 80039e0:	f107 0208 	add.w	r2, r7, #8
 80039e4:	2302      	movs	r3, #2
 80039e6:	21aa      	movs	r1, #170	; 0xaa
 80039e8:	f7fe ff20 	bl	800282c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80039ec:	7a7b      	ldrb	r3, [r7, #9]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	b21a      	sxth	r2, r3
 80039f2:	7a3b      	ldrb	r3, [r7, #8]
 80039f4:	b21b      	sxth	r3, r3
 80039f6:	4313      	orrs	r3, r2
 80039f8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80039fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80039fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003a10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a1e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a22:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003a26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	ee07 3a90 	vmov	s15, r3
 8003a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a38:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a48:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	ee07 3a90 	vmov	s15, r3
}
 8003a52:	eeb0 0a67 	vmov.f32	s0, s15
 8003a56:	3720      	adds	r7, #32
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <LIS3MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_RegisterBusIO(LIS3MDL_Object_t *pObj, LIS3MDL_IO_t *pIO)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3MDL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <LIS3MDL_RegisterBusIO+0x1c>
  {
    ret = LIS3MDL_ERROR;
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e04d      	b.n	8003b14 <LIS3MDL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	7b1a      	ldrb	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	699a      	ldr	r2, [r3, #24]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <LIS3MDL_RegisterBusIO+0xc4>)
 8003ab4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <LIS3MDL_RegisterBusIO+0xc8>)
 8003aba:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <LIS3MDL_RegisterBusIO+0x76>
    {
      ret = LIS3MDL_ERROR;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e020      	b.n	8003b14 <LIS3MDL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS3MDL_OK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4798      	blx	r3
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <LIS3MDL_RegisterBusIO+0x8a>
    {
      ret = LIS3MDL_ERROR;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e016      	b.n	8003b14 <LIS3MDL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS3MDL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d112      	bne.n	8003b14 <LIS3MDL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10d      	bne.n	8003b14 <LIS3MDL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x07;
 8003af8:	2307      	movs	r3, #7
 8003afa:	72fb      	strb	r3, [r7, #11]

          if (LIS3MDL_Write_Reg(pObj, LIS3MDL_CTRL_REG3, data) != LIS3MDL_OK)
 8003afc:	7afb      	ldrb	r3, [r7, #11]
 8003afe:	461a      	mov	r2, r3
 8003b00:	2122      	movs	r1, #34	; 0x22
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fb51 	bl	80041aa <LIS3MDL_Write_Reg>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <LIS3MDL_RegisterBusIO+0xb8>
          {
            ret = LIS3MDL_ERROR;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 8003b14:	68fb      	ldr	r3, [r7, #12]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	080041e1 	.word	0x080041e1
 8003b24:	08004243 	.word	0x08004243

08003b28 <LIS3MDL_Init>:
  * @brief  Component initialization
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_Init(LIS3MDL_Object_t *pObj)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Operating mode selection - power down */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_POWER_DOWN) != LIS3MDL_OK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	331c      	adds	r3, #28
 8003b34:	2102      	movs	r1, #2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fdac 	bl	8004694 <lis3mdl_operating_mode_set>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <LIS3MDL_Init+0x20>
  {
    return LIS3MDL_ERROR;
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295
 8003b46:	e025      	b.n	8003b94 <LIS3MDL_Init+0x6c>
  }

  /* Enable BDU */
  if (lis3mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS3MDL_OK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	331c      	adds	r3, #28
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fdc6 	bl	80046e0 <lis3mdl_block_data_update_set>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <LIS3MDL_Init+0x38>
  {
    return LIS3MDL_ERROR;
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5e:	e019      	b.n	8003b94 <LIS3MDL_Init+0x6c>
  }

  /* Set Output data rate. */
  if (LIS3MDL_MAG_SetOutputDataRate(pObj, 80.0f) != LIS3MDL_OK)
 8003b60:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8003b9c <LIS3MDL_Init+0x74>
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f9db 	bl	8003f20 <LIS3MDL_MAG_SetOutputDataRate>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <LIS3MDL_Init+0x4e>
  {
    return LIS3MDL_ERROR;
 8003b70:	f04f 33ff 	mov.w	r3, #4294967295
 8003b74:	e00e      	b.n	8003b94 <LIS3MDL_Init+0x6c>
  }

  /* Full scale selection. */
  if (LIS3MDL_MAG_SetFullScale(pObj, 4) != LIS3MDL_OK)
 8003b76:	2104      	movs	r1, #4
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fa73 	bl	8004064 <LIS3MDL_MAG_SetFullScale>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <LIS3MDL_Init+0x62>
  {
    return LIS3MDL_ERROR;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	e004      	b.n	8003b94 <LIS3MDL_Init+0x6c>
  }

  pObj->is_initialized = 1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS3MDL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	42a00000 	.word	0x42a00000

08003ba0 <LIS3MDL_DeInit>:
 * @brief Deinitialize the LIS3MDL sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_DeInit(LIS3MDL_Object_t *pObj)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS3MDL_MAG_Disable(pObj) != LIS3MDL_OK)
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f873 	bl	8003c94 <LIS3MDL_MAG_Disable>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <LIS3MDL_DeInit+0x1a>
  {
    return LIS3MDL_ERROR;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	e004      	b.n	8003bc4 <LIS3MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS3MDL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <LIS3MDL_ReadID>:
  * @param  pObj pointer to Component object
  * @param  Id pointer to Component ID
  * @retval Component status
  */
int32_t LIS3MDL_ReadID(LIS3MDL_Object_t *pObj, uint8_t *Id)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  if (lis3mdl_device_id_get(&(pObj->Ctx), Id) != LIS3MDL_OK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	331c      	adds	r3, #28
 8003bda:	6839      	ldr	r1, [r7, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fdf0 	bl	80047c2 <lis3mdl_device_id_get>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <LIS3MDL_ReadID+0x22>
  {
    return LIS3MDL_ERROR;
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bec:	e000      	b.n	8003bf0 <LIS3MDL_ReadID+0x24>
  }

  return LIS3MDL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <LIS3MDL_GetCapabilities>:
  * @param  pObj pointer to Component object
  * @param  Capabilities pointer to LIS3MDL sensor capabilities
  * @retval Component status
  */
int32_t LIS3MDL_GetCapabilities(LIS3MDL_Object_t *pObj, LIS3MDL_Capabilities_t *Capabilities)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2201      	movs	r2, #1
 8003c12:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 16;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2210      	movs	r2, #16
 8003c2a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 80.0f;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <LIS3MDL_GetCapabilities+0x58>)
 8003c40:	619a      	str	r2, [r3, #24]
  return LIS3MDL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	42a00000 	.word	0x42a00000

08003c54 <LIS3MDL_MAG_Enable>:
 * @brief Enable the LIS3MDL accelerometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_Enable(LIS3MDL_Object_t *pObj)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <LIS3MDL_MAG_Enable+0x16>
  {
    return LIS3MDL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e010      	b.n	8003c8c <LIS3MDL_MAG_Enable+0x38>
  }

  /* Operating mode selection - continuous */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_CONTINUOUS_MODE) != LIS3MDL_OK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	331c      	adds	r3, #28
 8003c6e:	2100      	movs	r1, #0
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fd0f 	bl	8004694 <lis3mdl_operating_mode_set>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <LIS3MDL_MAG_Enable+0x2e>
  {
    return LIS3MDL_ERROR;
 8003c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c80:	e004      	b.n	8003c8c <LIS3MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3MDL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <LIS3MDL_MAG_Disable>:
 * @brief Disable the LIS3MDL accelerometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_Disable(LIS3MDL_Object_t *pObj)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <LIS3MDL_MAG_Disable+0x16>
  {
    return LIS3MDL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e010      	b.n	8003ccc <LIS3MDL_MAG_Disable+0x38>
  }

  /* Operating mode selection - power down */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_POWER_DOWN) != LIS3MDL_OK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	331c      	adds	r3, #28
 8003cae:	2102      	movs	r1, #2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fcef 	bl	8004694 <lis3mdl_operating_mode_set>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <LIS3MDL_MAG_Disable+0x2e>
  {
    return LIS3MDL_ERROR;
 8003cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc0:	e004      	b.n	8003ccc <LIS3MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3MDL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <LIS3MDL_MAG_GetSensitivity>:
 * @param pObj the device pObj
 * @param Sensitivity pointer to Sensitivity value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetSensitivity(LIS3MDL_Object_t *pObj, float *Sensitivity)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lis3mdl_full_scale_get(&(pObj->Ctx), &full_scale) != LIS3MDL_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	331c      	adds	r3, #28
 8003ce2:	f107 020f 	add.w	r2, r7, #15
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fc9b 	bl	8004624 <lis3mdl_full_scale_get>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <LIS3MDL_MAG_GetSensitivity+0x26>
  {
    return LIS3MDL_ERROR;
 8003cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf8:	e020      	b.n	8003d3c <LIS3MDL_MAG_GetSensitivity+0x68>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d81b      	bhi.n	8003d38 <LIS3MDL_MAG_GetSensitivity+0x64>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <LIS3MDL_MAG_GetSensitivity+0x34>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d19 	.word	0x08003d19
 8003d0c:	08003d21 	.word	0x08003d21
 8003d10:	08003d29 	.word	0x08003d29
 8003d14:	08003d31 	.word	0x08003d31
  {
    case LIS3MDL_4_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_4GAUSS;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <LIS3MDL_MAG_GetSensitivity+0x70>)
 8003d1c:	601a      	str	r2, [r3, #0]
      break;
 8003d1e:	e00c      	b.n	8003d3a <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_8_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_8GAUSS;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <LIS3MDL_MAG_GetSensitivity+0x74>)
 8003d24:	601a      	str	r2, [r3, #0]
      break;
 8003d26:	e008      	b.n	8003d3a <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_12_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_12GAUSS;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <LIS3MDL_MAG_GetSensitivity+0x78>)
 8003d2c:	601a      	str	r2, [r3, #0]
      break;
 8003d2e:	e004      	b.n	8003d3a <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_16_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_16GAUSS;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <LIS3MDL_MAG_GetSensitivity+0x7c>)
 8003d34:	601a      	str	r2, [r3, #0]
      break;
 8003d36:	e000      	b.n	8003d3a <LIS3MDL_MAG_GetSensitivity+0x66>
    default:
      break;
 8003d38:	bf00      	nop
  }

  return LIS3MDL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	3e158106 	.word	0x3e158106
 8003d48:	3e958106 	.word	0x3e958106
 8003d4c:	3ee04189 	.word	0x3ee04189
 8003d50:	3f158106 	.word	0x3f158106

08003d54 <LIS3MDL_MAG_GetOutputDataRate>:
 * @param pObj the device pObj
 * @param Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetOutputDataRate(LIS3MDL_Object_t *pObj, float *Odr)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  lis3mdl_om_t odr_low_level;

  /* Get current output data rate. */
  if (lis3mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS3MDL_OK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	331c      	adds	r3, #28
 8003d62:	f107 020f 	add.w	r2, r7, #15
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fb11 	bl	8004390 <lis3mdl_data_rate_get>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <LIS3MDL_MAG_GetOutputDataRate+0x26>
  {
    return LIS3MDL_ERROR;
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295
 8003d78:	e0b6      	b.n	8003ee8 <LIS3MDL_MAG_GetOutputDataRate+0x194>
  }

  switch (odr_low_level)
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8003d7e:	f200 80b1 	bhi.w	8003ee4 <LIS3MDL_MAG_GetOutputDataRate+0x190>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <LIS3MDL_MAG_GetOutputDataRate+0x34>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003e85 	.word	0x08003e85
 8003d8c:	08003edd 	.word	0x08003edd
 8003d90:	08003e8d 	.word	0x08003e8d
 8003d94:	08003ee5 	.word	0x08003ee5
 8003d98:	08003e95 	.word	0x08003e95
 8003d9c:	08003ee5 	.word	0x08003ee5
 8003da0:	08003e9d 	.word	0x08003e9d
 8003da4:	08003ee5 	.word	0x08003ee5
 8003da8:	08003ea5 	.word	0x08003ea5
 8003dac:	08003ee5 	.word	0x08003ee5
 8003db0:	08003ead 	.word	0x08003ead
 8003db4:	08003ee5 	.word	0x08003ee5
 8003db8:	08003eb5 	.word	0x08003eb5
 8003dbc:	08003ee5 	.word	0x08003ee5
 8003dc0:	08003ebd 	.word	0x08003ebd
 8003dc4:	08003ee5 	.word	0x08003ee5
 8003dc8:	08003ee5 	.word	0x08003ee5
 8003dcc:	08003ed5 	.word	0x08003ed5
 8003dd0:	08003e8d 	.word	0x08003e8d
 8003dd4:	08003ee5 	.word	0x08003ee5
 8003dd8:	08003e95 	.word	0x08003e95
 8003ddc:	08003ee5 	.word	0x08003ee5
 8003de0:	08003e9d 	.word	0x08003e9d
 8003de4:	08003ee5 	.word	0x08003ee5
 8003de8:	08003ea5 	.word	0x08003ea5
 8003dec:	08003ee5 	.word	0x08003ee5
 8003df0:	08003ead 	.word	0x08003ead
 8003df4:	08003ee5 	.word	0x08003ee5
 8003df8:	08003eb5 	.word	0x08003eb5
 8003dfc:	08003ee5 	.word	0x08003ee5
 8003e00:	08003ebd 	.word	0x08003ebd
 8003e04:	08003ee5 	.word	0x08003ee5
 8003e08:	08003ee5 	.word	0x08003ee5
 8003e0c:	08003ecd 	.word	0x08003ecd
 8003e10:	08003e8d 	.word	0x08003e8d
 8003e14:	08003ee5 	.word	0x08003ee5
 8003e18:	08003e95 	.word	0x08003e95
 8003e1c:	08003ee5 	.word	0x08003ee5
 8003e20:	08003e9d 	.word	0x08003e9d
 8003e24:	08003ee5 	.word	0x08003ee5
 8003e28:	08003ea5 	.word	0x08003ea5
 8003e2c:	08003ee5 	.word	0x08003ee5
 8003e30:	08003ead 	.word	0x08003ead
 8003e34:	08003ee5 	.word	0x08003ee5
 8003e38:	08003eb5 	.word	0x08003eb5
 8003e3c:	08003ee5 	.word	0x08003ee5
 8003e40:	08003ebd 	.word	0x08003ebd
 8003e44:	08003ee5 	.word	0x08003ee5
 8003e48:	08003ee5 	.word	0x08003ee5
 8003e4c:	08003ec5 	.word	0x08003ec5
 8003e50:	08003e8d 	.word	0x08003e8d
 8003e54:	08003ee5 	.word	0x08003ee5
 8003e58:	08003e95 	.word	0x08003e95
 8003e5c:	08003ee5 	.word	0x08003ee5
 8003e60:	08003e9d 	.word	0x08003e9d
 8003e64:	08003ee5 	.word	0x08003ee5
 8003e68:	08003ea5 	.word	0x08003ea5
 8003e6c:	08003ee5 	.word	0x08003ee5
 8003e70:	08003ead 	.word	0x08003ead
 8003e74:	08003ee5 	.word	0x08003ee5
 8003e78:	08003eb5 	.word	0x08003eb5
 8003e7c:	08003ee5 	.word	0x08003ee5
 8003e80:	08003ebd 	.word	0x08003ebd
  {
    case LIS3MDL_LP_Hz625:
      *Odr = 0.625f;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4a1a      	ldr	r2, [pc, #104]	; (8003ef0 <LIS3MDL_MAG_GetOutputDataRate+0x19c>)
 8003e88:	601a      	str	r2, [r3, #0]
      break;
 8003e8a:	e02c      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1Hz25:
    case LIS3MDL_MP_1Hz25:
    case LIS3MDL_HP_1Hz25:
    case LIS3MDL_UHP_1Hz25:
      *Odr = 1.250f;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	4a19      	ldr	r2, [pc, #100]	; (8003ef4 <LIS3MDL_MAG_GetOutputDataRate+0x1a0>)
 8003e90:	601a      	str	r2, [r3, #0]
      break;
 8003e92:	e028      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_2Hz5:
    case LIS3MDL_MP_2Hz5:
    case LIS3MDL_HP_2Hz5:
    case LIS3MDL_UHP_2Hz5:
      *Odr = 2.500f;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <LIS3MDL_MAG_GetOutputDataRate+0x1a4>)
 8003e98:	601a      	str	r2, [r3, #0]
      break;
 8003e9a:	e024      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_5Hz:
    case LIS3MDL_MP_5Hz:
    case LIS3MDL_HP_5Hz:
    case LIS3MDL_UHP_5Hz:
      *Odr = 5.000f;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	4a17      	ldr	r2, [pc, #92]	; (8003efc <LIS3MDL_MAG_GetOutputDataRate+0x1a8>)
 8003ea0:	601a      	str	r2, [r3, #0]
      break;
 8003ea2:	e020      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_10Hz:
    case LIS3MDL_MP_10Hz:
    case LIS3MDL_HP_10Hz:
    case LIS3MDL_UHP_10Hz:
      *Odr = 10.000f;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4a16      	ldr	r2, [pc, #88]	; (8003f00 <LIS3MDL_MAG_GetOutputDataRate+0x1ac>)
 8003ea8:	601a      	str	r2, [r3, #0]
      break;
 8003eaa:	e01c      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_20Hz:
    case LIS3MDL_MP_20Hz:
    case LIS3MDL_HP_20Hz:
    case LIS3MDL_UHP_20Hz:
      *Odr = 20.000f;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <LIS3MDL_MAG_GetOutputDataRate+0x1b0>)
 8003eb0:	601a      	str	r2, [r3, #0]
      break;
 8003eb2:	e018      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_40Hz:
    case LIS3MDL_MP_40Hz:
    case LIS3MDL_HP_40Hz:
    case LIS3MDL_UHP_40Hz:
      *Odr = 40.000f;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <LIS3MDL_MAG_GetOutputDataRate+0x1b4>)
 8003eb8:	601a      	str	r2, [r3, #0]
      break;
 8003eba:	e014      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_80Hz:
    case LIS3MDL_MP_80Hz:
    case LIS3MDL_HP_80Hz:
    case LIS3MDL_UHP_80Hz:
      *Odr = 80.000f;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <LIS3MDL_MAG_GetOutputDataRate+0x1b8>)
 8003ec0:	601a      	str	r2, [r3, #0]
      break;
 8003ec2:	e010      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_UHP_155Hz:
      *Odr = 155.000f;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <LIS3MDL_MAG_GetOutputDataRate+0x1bc>)
 8003ec8:	601a      	str	r2, [r3, #0]
      break;
 8003eca:	e00c      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_HP_300Hz:
      *Odr = 300.000f;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4a11      	ldr	r2, [pc, #68]	; (8003f14 <LIS3MDL_MAG_GetOutputDataRate+0x1c0>)
 8003ed0:	601a      	str	r2, [r3, #0]
      break;
 8003ed2:	e008      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_MP_560Hz:
      *Odr = 560.000f;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <LIS3MDL_MAG_GetOutputDataRate+0x1c4>)
 8003ed8:	601a      	str	r2, [r3, #0]
      break;
 8003eda:	e004      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1kHz:
      *Odr = 1000.000f;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4a0f      	ldr	r2, [pc, #60]	; (8003f1c <LIS3MDL_MAG_GetOutputDataRate+0x1c8>)
 8003ee0:	601a      	str	r2, [r3, #0]
      break;
 8003ee2:	e000      	b.n	8003ee6 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    default:
      break;
 8003ee4:	bf00      	nop
  }

  return LIS3MDL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	3f200000 	.word	0x3f200000
 8003ef4:	3fa00000 	.word	0x3fa00000
 8003ef8:	40200000 	.word	0x40200000
 8003efc:	40a00000 	.word	0x40a00000
 8003f00:	41200000 	.word	0x41200000
 8003f04:	41a00000 	.word	0x41a00000
 8003f08:	42200000 	.word	0x42200000
 8003f0c:	42a00000 	.word	0x42a00000
 8003f10:	431b0000 	.word	0x431b0000
 8003f14:	43960000 	.word	0x43960000
 8003f18:	440c0000 	.word	0x440c0000
 8003f1c:	447a0000 	.word	0x447a0000

08003f20 <LIS3MDL_MAG_SetOutputDataRate>:
 * @param pObj the device pObj
 * @param Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_SetOutputDataRate(LIS3MDL_Object_t *pObj, float Odr)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	ed87 0a00 	vstr	s0, [r7]
  lis3mdl_om_t new_odr;

  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
            : (Odr <=  1.250f) ? LIS3MDL_LP_1Hz25
 8003f2c:	edd7 7a00 	vldr	s15, [r7]
 8003f30:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 8003f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3c:	d801      	bhi.n	8003f42 <LIS3MDL_MAG_SetOutputDataRate+0x22>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e042      	b.n	8003fc8 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003f42:	edd7 7a00 	vldr	s15, [r7]
 8003f46:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8003f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f52:	d801      	bhi.n	8003f58 <LIS3MDL_MAG_SetOutputDataRate+0x38>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e037      	b.n	8003fc8 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003f58:	edd7 7a00 	vldr	s15, [r7]
 8003f5c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f68:	d801      	bhi.n	8003f6e <LIS3MDL_MAG_SetOutputDataRate+0x4e>
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	e02c      	b.n	8003fc8 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003f6e:	edd7 7a00 	vldr	s15, [r7]
 8003f72:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7e:	d801      	bhi.n	8003f84 <LIS3MDL_MAG_SetOutputDataRate+0x64>
 8003f80:	2306      	movs	r3, #6
 8003f82:	e021      	b.n	8003fc8 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003f84:	edd7 7a00 	vldr	s15, [r7]
 8003f88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f94:	d801      	bhi.n	8003f9a <LIS3MDL_MAG_SetOutputDataRate+0x7a>
 8003f96:	2308      	movs	r3, #8
 8003f98:	e016      	b.n	8003fc8 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003f9a:	edd7 7a00 	vldr	s15, [r7]
 8003f9e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003faa:	d801      	bhi.n	8003fb0 <LIS3MDL_MAG_SetOutputDataRate+0x90>
 8003fac:	230a      	movs	r3, #10
 8003fae:	e00b      	b.n	8003fc8 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003fb0:	edd7 7a00 	vldr	s15, [r7]
 8003fb4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003ff0 <LIS3MDL_MAG_SetOutputDataRate+0xd0>
 8003fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc0:	d801      	bhi.n	8003fc6 <LIS3MDL_MAG_SetOutputDataRate+0xa6>
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	e000      	b.n	8003fc8 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003fc6:	230e      	movs	r3, #14
  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
 8003fc8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 10.000f) ? LIS3MDL_LP_10Hz
            : (Odr <= 20.000f) ? LIS3MDL_LP_20Hz
            : (Odr <= 40.000f) ? LIS3MDL_LP_40Hz
            :                      LIS3MDL_LP_80Hz;

  if (lis3mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS3MDL_OK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	331c      	adds	r3, #28
 8003fce:	7bfa      	ldrb	r2, [r7, #15]
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f996 	bl	8004304 <lis3mdl_data_rate_set>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <LIS3MDL_MAG_SetOutputDataRate+0xc4>
  {
    return LIS3MDL_ERROR;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	e000      	b.n	8003fe6 <LIS3MDL_MAG_SetOutputDataRate+0xc6>
  }

  return LIS3MDL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	42200000 	.word	0x42200000

08003ff4 <LIS3MDL_MAG_GetFullScale>:
 * @param pObj the device pObj
 * @param FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetFullScale(LIS3MDL_Object_t *pObj, int32_t  *FullScale)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis3mdl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS3MDL_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	331c      	adds	r3, #28
 8004002:	f107 020f 	add.w	r2, r7, #15
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fb0b 	bl	8004624 <lis3mdl_full_scale_get>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <LIS3MDL_MAG_GetFullScale+0x26>
  {
    return LIS3MDL_ERROR;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	e020      	b.n	800405c <LIS3MDL_MAG_GetFullScale+0x68>
  }

  switch (fs_low_level)
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b03      	cmp	r3, #3
 800401e:	d81b      	bhi.n	8004058 <LIS3MDL_MAG_GetFullScale+0x64>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <LIS3MDL_MAG_GetFullScale+0x34>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	08004039 	.word	0x08004039
 800402c:	08004041 	.word	0x08004041
 8004030:	08004049 	.word	0x08004049
 8004034:	08004051 	.word	0x08004051
  {
    case LIS3MDL_4_GAUSS:
      *FullScale = 4;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2204      	movs	r2, #4
 800403c:	601a      	str	r2, [r3, #0]
      break;
 800403e:	e00c      	b.n	800405a <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_8_GAUSS:
      *FullScale = 8;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2208      	movs	r2, #8
 8004044:	601a      	str	r2, [r3, #0]
      break;
 8004046:	e008      	b.n	800405a <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_12_GAUSS:
      *FullScale = 12;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	220c      	movs	r2, #12
 800404c:	601a      	str	r2, [r3, #0]
      break;
 800404e:	e004      	b.n	800405a <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_16_GAUSS:
      *FullScale = 16;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2210      	movs	r2, #16
 8004054:	601a      	str	r2, [r3, #0]
      break;
 8004056:	e000      	b.n	800405a <LIS3MDL_MAG_GetFullScale+0x66>
    default:
      break;
 8004058:	bf00      	nop
  }

  return LIS3MDL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <LIS3MDL_MAG_SetFullScale>:
 * @param pObj the device pObj
 * @param FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_SetFullScale(LIS3MDL_Object_t *pObj, int32_t FullScale)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t new_fs;

  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
           : (FullScale <= 8) ? LIS3MDL_8_GAUSS
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b04      	cmp	r3, #4
 8004072:	dd0b      	ble.n	800408c <LIS3MDL_MAG_SetFullScale+0x28>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b08      	cmp	r3, #8
 8004078:	dd06      	ble.n	8004088 <LIS3MDL_MAG_SetFullScale+0x24>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b0c      	cmp	r3, #12
 800407e:	dc01      	bgt.n	8004084 <LIS3MDL_MAG_SetFullScale+0x20>
 8004080:	2302      	movs	r3, #2
 8004082:	e004      	b.n	800408e <LIS3MDL_MAG_SetFullScale+0x2a>
 8004084:	2303      	movs	r3, #3
 8004086:	e002      	b.n	800408e <LIS3MDL_MAG_SetFullScale+0x2a>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <LIS3MDL_MAG_SetFullScale+0x2a>
 800408c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
 800408e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 12) ? LIS3MDL_12_GAUSS
           :                       LIS3MDL_16_GAUSS;

  if (lis3mdl_full_scale_set(&(pObj->Ctx), new_fs) != LIS3MDL_OK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	331c      	adds	r3, #28
 8004094:	7bfa      	ldrb	r2, [r7, #15]
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fa9d 	bl	80045d8 <lis3mdl_full_scale_set>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <LIS3MDL_MAG_SetFullScale+0x46>
  {
    return LIS3MDL_ERROR;
 80040a4:	f04f 33ff 	mov.w	r3, #4294967295
 80040a8:	e000      	b.n	80040ac <LIS3MDL_MAG_SetFullScale+0x48>
  }

  return LIS3MDL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <LIS3MDL_MAG_GetAxesRaw>:
 * @param pObj the device pObj
 * @param Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetAxesRaw(LIS3MDL_Object_t *pObj, LIS3MDL_AxesRaw_t *Value)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  lis3mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis3mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3MDL_OK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	331c      	adds	r3, #28
 80040c2:	f107 0208 	add.w	r2, r7, #8
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fb2f 	bl	800472c <lis3mdl_magnetic_raw_get>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <LIS3MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS3MDL_ERROR;
 80040d4:	f04f 33ff 	mov.w	r3, #4294967295
 80040d8:	e00c      	b.n	80040f4 <LIS3MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80040da:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80040e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80040ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	809a      	strh	r2, [r3, #4]

  return LIS3MDL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <LIS3MDL_MAG_GetAxes>:
 * @param pObj the device pObj
 * @param MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetAxes(LIS3MDL_Object_t *pObj, LIS3MDL_Axes_t *MagneticField)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  lis3mdl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lis3mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3MDL_OK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	331c      	adds	r3, #28
 8004110:	f107 0210 	add.w	r2, r7, #16
 8004114:	4611      	mov	r1, r2
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fb08 	bl	800472c <lis3mdl_magnetic_raw_get>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <LIS3MDL_MAG_GetAxes+0x2c>
  {
    return LIS3MDL_ERROR;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
 8004126:	e03c      	b.n	80041a2 <LIS3MDL_MAG_GetAxes+0xa6>
  }

  /* Get LIS3MDL actual sensitivity. */
  if (LIS3MDL_MAG_GetSensitivity(pObj, &sensitivity) != LIS3MDL_OK)
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fdd0 	bl	8003cd4 <LIS3MDL_MAG_GetSensitivity>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <LIS3MDL_MAG_GetAxes+0x44>
  {
    return LIS3MDL_ERROR;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
 800413e:	e030      	b.n	80041a2 <LIS3MDL_MAG_GetAxes+0xa6>
  }

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004140:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800414c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004158:	ee17 2a90 	vmov	r2, s15
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004160:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004164:	ee07 3a90 	vmov	s15, r3
 8004168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800416c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004178:	ee17 2a90 	vmov	r2, s15
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004180:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004184:	ee07 3a90 	vmov	s15, r3
 8004188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800418c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004198:	ee17 2a90 	vmov	r2, s15
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	609a      	str	r2, [r3, #8]

  return LIS3MDL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <LIS3MDL_Write_Reg>:
 * @param Reg address to be written
 * @param Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_Write_Reg(LIS3MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	70fb      	strb	r3, [r7, #3]
 80041b6:	4613      	mov	r3, r2
 80041b8:	70bb      	strb	r3, [r7, #2]
  if (lis3mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS3MDL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f103 001c 	add.w	r0, r3, #28
 80041c0:	1cba      	adds	r2, r7, #2
 80041c2:	78f9      	ldrb	r1, [r7, #3]
 80041c4:	2301      	movs	r3, #1
 80041c6:	f000 f885 	bl	80042d4 <lis3mdl_write_reg>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <LIS3MDL_Write_Reg+0x2c>
  {
    return LIS3MDL_ERROR;
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
 80041d4:	e000      	b.n	80041d8 <LIS3MDL_Write_Reg+0x2e>
  }

  return LIS3MDL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <ReadRegWrap>:
  * @brief  Wrap Read register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80041e0:	b590      	push	{r4, r7, lr}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	461a      	mov	r2, r3
 80041ec:	460b      	mov	r3, r1
 80041ee:	72fb      	strb	r3, [r7, #11]
 80041f0:	4613      	mov	r3, r2
 80041f2:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10e      	bne.n	800421e <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	695c      	ldr	r4, [r3, #20]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	7b1b      	ldrb	r3, [r3, #12]
 8004208:	b298      	uxth	r0, r3
 800420a:	7afb      	ldrb	r3, [r7, #11]
 800420c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004210:	b2db      	uxtb	r3, r3
 8004212:	b299      	uxth	r1, r3
 8004214:	893b      	ldrh	r3, [r7, #8]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	47a0      	blx	r4
 800421a:	4603      	mov	r3, r0
 800421c:	e00d      	b.n	800423a <ReadRegWrap+0x5a>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	695c      	ldr	r4, [r3, #20]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	7b1b      	ldrb	r3, [r3, #12]
 8004226:	b298      	uxth	r0, r3
 8004228:	7afb      	ldrb	r3, [r7, #11]
 800422a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800422e:	b2db      	uxtb	r3, r3
 8004230:	b299      	uxth	r1, r3
 8004232:	893b      	ldrh	r3, [r7, #8]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	47a0      	blx	r4
 8004238:	4603      	mov	r3, r0
  }
}
 800423a:	4618      	mov	r0, r3
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	bd90      	pop	{r4, r7, pc}

08004242 <WriteRegWrap>:
  * @brief  Wrap Write register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004242:	b590      	push	{r4, r7, lr}
 8004244:	b087      	sub	sp, #28
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	461a      	mov	r2, r3
 800424e:	460b      	mov	r3, r1
 8004250:	72fb      	strb	r3, [r7, #11]
 8004252:	4613      	mov	r3, r2
 8004254:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10e      	bne.n	8004280 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	691c      	ldr	r4, [r3, #16]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	7b1b      	ldrb	r3, [r3, #12]
 800426a:	b298      	uxth	r0, r3
 800426c:	7afb      	ldrb	r3, [r7, #11]
 800426e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004272:	b2db      	uxtb	r3, r3
 8004274:	b299      	uxth	r1, r3
 8004276:	893b      	ldrh	r3, [r7, #8]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	47a0      	blx	r4
 800427c:	4603      	mov	r3, r0
 800427e:	e00d      	b.n	800429c <WriteRegWrap+0x5a>
  }
  else   /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	691c      	ldr	r4, [r3, #16]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	7b1b      	ldrb	r3, [r3, #12]
 8004288:	b298      	uxth	r0, r3
 800428a:	7afb      	ldrb	r3, [r7, #11]
 800428c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004290:	b2db      	uxtb	r3, r3
 8004292:	b299      	uxth	r1, r3
 8004294:	893b      	ldrh	r3, [r7, #8]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	47a0      	blx	r4
 800429a:	4603      	mov	r3, r0
  }
}
 800429c:	4618      	mov	r0, r3
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd90      	pop	{r4, r7, pc}

080042a4 <lis3mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	461a      	mov	r2, r3
 80042b0:	460b      	mov	r3, r1
 80042b2:	72fb      	strb	r3, [r7, #11]
 80042b4:	4613      	mov	r3, r2
 80042b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685c      	ldr	r4, [r3, #4]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6898      	ldr	r0, [r3, #8]
 80042c0:	893b      	ldrh	r3, [r7, #8]
 80042c2:	7af9      	ldrb	r1, [r7, #11]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	47a0      	blx	r4
 80042c8:	6178      	str	r0, [r7, #20]
  return ret;
 80042ca:	697b      	ldr	r3, [r7, #20]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd90      	pop	{r4, r7, pc}

080042d4 <lis3mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	461a      	mov	r2, r3
 80042e0:	460b      	mov	r3, r1
 80042e2:	72fb      	strb	r3, [r7, #11]
 80042e4:	4613      	mov	r3, r2
 80042e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681c      	ldr	r4, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6898      	ldr	r0, [r3, #8]
 80042f0:	893b      	ldrh	r3, [r7, #8]
 80042f2:	7af9      	ldrb	r1, [r7, #11]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	47a0      	blx	r4
 80042f8:	6178      	str	r0, [r7, #20]
  return ret;
 80042fa:	697b      	ldr	r3, [r7, #20]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bd90      	pop	{r4, r7, pc}

08004304 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004310:	f107 0210 	add.w	r2, r7, #16
 8004314:	2301      	movs	r3, #1
 8004316:	2120      	movs	r1, #32
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ffc3 	bl	80042a4 <lis3mdl_read_reg>
 800431e:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800432c:	b2da      	uxtb	r2, r3
 800432e:	7c3b      	ldrb	r3, [r7, #16]
 8004330:	f362 0346 	bfi	r3, r2, #1, #6
 8004334:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004336:	f107 0210 	add.w	r2, r7, #16
 800433a:	2301      	movs	r3, #1
 800433c:	2120      	movs	r1, #32
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff ffc8 	bl	80042d4 <lis3mdl_write_reg>
 8004344:	6178      	str	r0, [r7, #20]
  }
  
  if (ret == 0)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d107      	bne.n	800435c <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 800434c:	f107 020c 	add.w	r2, r7, #12
 8004350:	2301      	movs	r3, #1
 8004352:	2123      	movs	r1, #35	; 0x23
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ffa5 	bl	80042a4 <lis3mdl_read_reg>
 800435a:	6178      	str	r0, [r7, #20]
  }
  
  if (ret == 0)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d111      	bne.n	8004386 <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	b2da      	uxtb	r2, r3
 800436e:	7b3b      	ldrb	r3, [r7, #12]
 8004370:	f362 0383 	bfi	r3, r2, #2, #2
 8004374:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 8004376:	f107 020c 	add.w	r2, r7, #12
 800437a:	2301      	movs	r3, #1
 800437c:	2123      	movs	r1, #35	; 0x23
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff ffa8 	bl	80042d4 <lis3mdl_write_reg>
 8004384:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg4, 1);
  }

  return ret;
 8004386:	697b      	ldr	r3, [r7, #20]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <lis3mdl_data_rate_get>:
  * @param  val      Get the values of om in reg CTRL_REG1(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_get(stmdev_ctx_t *ctx, lis3mdl_om_t *val)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  /* z axis, ctrl_reg4 -> omz is aligned with x/y axis ctrl_reg1 -> om*/
  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800439a:	f107 0208 	add.w	r2, r7, #8
 800439e:	2301      	movs	r3, #1
 80043a0:	2120      	movs	r1, #32
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff ff7e 	bl	80042a4 <lis3mdl_read_reg>
 80043a8:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.om)
 80043aa:	7a3b      	ldrb	r3, [r7, #8]
 80043ac:	f3c3 0345 	ubfx	r3, r3, #1, #6
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b3e      	cmp	r3, #62	; 0x3e
 80043b4:	f200 8106 	bhi.w	80045c4 <lis3mdl_data_rate_get+0x234>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <lis3mdl_data_rate_get+0x30>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080044bd 	.word	0x080044bd
 80043c4:	080044c5 	.word	0x080044c5
 80043c8:	080044e5 	.word	0x080044e5
 80043cc:	080045c5 	.word	0x080045c5
 80043d0:	080044ed 	.word	0x080044ed
 80043d4:	080045c5 	.word	0x080045c5
 80043d8:	080044f5 	.word	0x080044f5
 80043dc:	080045c5 	.word	0x080045c5
 80043e0:	080044fd 	.word	0x080044fd
 80043e4:	080045c5 	.word	0x080045c5
 80043e8:	08004505 	.word	0x08004505
 80043ec:	080045c5 	.word	0x080045c5
 80043f0:	0800450d 	.word	0x0800450d
 80043f4:	080045c5 	.word	0x080045c5
 80043f8:	08004515 	.word	0x08004515
 80043fc:	080045c5 	.word	0x080045c5
 8004400:	080045c5 	.word	0x080045c5
 8004404:	080044cd 	.word	0x080044cd
 8004408:	0800451d 	.word	0x0800451d
 800440c:	080045c5 	.word	0x080045c5
 8004410:	08004525 	.word	0x08004525
 8004414:	080045c5 	.word	0x080045c5
 8004418:	0800452d 	.word	0x0800452d
 800441c:	080045c5 	.word	0x080045c5
 8004420:	08004535 	.word	0x08004535
 8004424:	080045c5 	.word	0x080045c5
 8004428:	0800453d 	.word	0x0800453d
 800442c:	080045c5 	.word	0x080045c5
 8004430:	08004545 	.word	0x08004545
 8004434:	080045c5 	.word	0x080045c5
 8004438:	0800454d 	.word	0x0800454d
 800443c:	080045c5 	.word	0x080045c5
 8004440:	080045c5 	.word	0x080045c5
 8004444:	080044d5 	.word	0x080044d5
 8004448:	08004555 	.word	0x08004555
 800444c:	080045c5 	.word	0x080045c5
 8004450:	0800455d 	.word	0x0800455d
 8004454:	080045c5 	.word	0x080045c5
 8004458:	08004565 	.word	0x08004565
 800445c:	080045c5 	.word	0x080045c5
 8004460:	0800456d 	.word	0x0800456d
 8004464:	080045c5 	.word	0x080045c5
 8004468:	08004575 	.word	0x08004575
 800446c:	080045c5 	.word	0x080045c5
 8004470:	0800457d 	.word	0x0800457d
 8004474:	080045c5 	.word	0x080045c5
 8004478:	08004585 	.word	0x08004585
 800447c:	080045c5 	.word	0x080045c5
 8004480:	080045c5 	.word	0x080045c5
 8004484:	080044dd 	.word	0x080044dd
 8004488:	0800458d 	.word	0x0800458d
 800448c:	080045c5 	.word	0x080045c5
 8004490:	08004595 	.word	0x08004595
 8004494:	080045c5 	.word	0x080045c5
 8004498:	0800459d 	.word	0x0800459d
 800449c:	080045c5 	.word	0x080045c5
 80044a0:	080045a5 	.word	0x080045a5
 80044a4:	080045c5 	.word	0x080045c5
 80044a8:	080045ad 	.word	0x080045ad
 80044ac:	080045c5 	.word	0x080045c5
 80044b0:	080045b5 	.word	0x080045b5
 80044b4:	080045c5 	.word	0x080045c5
 80044b8:	080045bd 	.word	0x080045bd
  {
    case LIS3MDL_LP_Hz625:
      *val = LIS3MDL_LP_Hz625;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
      break;
 80044c2:	e083      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_1kHz:
      *val = LIS3MDL_LP_1kHz;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]
      break;
 80044ca:	e07f      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_560Hz:
      *val = LIS3MDL_MP_560Hz;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2211      	movs	r2, #17
 80044d0:	701a      	strb	r2, [r3, #0]
      break;
 80044d2:	e07b      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_300Hz:
      *val = LIS3MDL_HP_300Hz;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2221      	movs	r2, #33	; 0x21
 80044d8:	701a      	strb	r2, [r3, #0]
      break;
 80044da:	e077      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_155Hz:
      *val = LIS3MDL_UHP_155Hz;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2231      	movs	r2, #49	; 0x31
 80044e0:	701a      	strb	r2, [r3, #0]
      break;
 80044e2:	e073      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_1Hz25:
      *val = LIS3MDL_LP_1Hz25;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2202      	movs	r2, #2
 80044e8:	701a      	strb	r2, [r3, #0]
      break;
 80044ea:	e06f      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_2Hz5:
      *val = LIS3MDL_LP_2Hz5;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2204      	movs	r2, #4
 80044f0:	701a      	strb	r2, [r3, #0]
      break;
 80044f2:	e06b      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_5Hz:
      *val = LIS3MDL_LP_5Hz;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2206      	movs	r2, #6
 80044f8:	701a      	strb	r2, [r3, #0]
      break;
 80044fa:	e067      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_10Hz:
      *val = LIS3MDL_LP_10Hz;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2208      	movs	r2, #8
 8004500:	701a      	strb	r2, [r3, #0]
      break;
 8004502:	e063      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_20Hz:
      *val = LIS3MDL_LP_20Hz;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	220a      	movs	r2, #10
 8004508:	701a      	strb	r2, [r3, #0]
      break;
 800450a:	e05f      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_40Hz:
      *val = LIS3MDL_LP_40Hz;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	220c      	movs	r2, #12
 8004510:	701a      	strb	r2, [r3, #0]
      break;
 8004512:	e05b      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_80Hz:
      *val = LIS3MDL_LP_80Hz;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	220e      	movs	r2, #14
 8004518:	701a      	strb	r2, [r3, #0]
      break;
 800451a:	e057      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_1Hz25:
      *val = LIS3MDL_MP_1Hz25;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2212      	movs	r2, #18
 8004520:	701a      	strb	r2, [r3, #0]
      break;
 8004522:	e053      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_2Hz5:
      *val = LIS3MDL_MP_2Hz5;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2214      	movs	r2, #20
 8004528:	701a      	strb	r2, [r3, #0]
      break;
 800452a:	e04f      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_5Hz:
      *val = LIS3MDL_MP_5Hz;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2216      	movs	r2, #22
 8004530:	701a      	strb	r2, [r3, #0]
      break;
 8004532:	e04b      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_10Hz:
      *val = LIS3MDL_MP_10Hz;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2218      	movs	r2, #24
 8004538:	701a      	strb	r2, [r3, #0]
      break;
 800453a:	e047      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_20Hz:
      *val = LIS3MDL_MP_20Hz;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	221a      	movs	r2, #26
 8004540:	701a      	strb	r2, [r3, #0]
      break;
 8004542:	e043      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_40Hz:
      *val = LIS3MDL_MP_40Hz;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	221c      	movs	r2, #28
 8004548:	701a      	strb	r2, [r3, #0]
      break;
 800454a:	e03f      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_80Hz:
      *val = LIS3MDL_MP_80Hz;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	221e      	movs	r2, #30
 8004550:	701a      	strb	r2, [r3, #0]
      break;
 8004552:	e03b      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_1Hz25:
      *val = LIS3MDL_HP_1Hz25;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2222      	movs	r2, #34	; 0x22
 8004558:	701a      	strb	r2, [r3, #0]
      break;
 800455a:	e037      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_2Hz5:
      *val = LIS3MDL_HP_2Hz5;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2224      	movs	r2, #36	; 0x24
 8004560:	701a      	strb	r2, [r3, #0]
      break;
 8004562:	e033      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_5Hz:
      *val = LIS3MDL_HP_5Hz;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2226      	movs	r2, #38	; 0x26
 8004568:	701a      	strb	r2, [r3, #0]
      break;
 800456a:	e02f      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_10Hz:
      *val = LIS3MDL_HP_10Hz;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2228      	movs	r2, #40	; 0x28
 8004570:	701a      	strb	r2, [r3, #0]
      break;
 8004572:	e02b      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_20Hz:
      *val = LIS3MDL_HP_20Hz;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	222a      	movs	r2, #42	; 0x2a
 8004578:	701a      	strb	r2, [r3, #0]
      break;
 800457a:	e027      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_40Hz:
      *val = LIS3MDL_HP_40Hz;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	222c      	movs	r2, #44	; 0x2c
 8004580:	701a      	strb	r2, [r3, #0]
      break;
 8004582:	e023      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_80Hz:
      *val = LIS3MDL_HP_80Hz;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	222e      	movs	r2, #46	; 0x2e
 8004588:	701a      	strb	r2, [r3, #0]
      break;
 800458a:	e01f      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_1Hz25:
      *val = LIS3MDL_UHP_1Hz25;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2232      	movs	r2, #50	; 0x32
 8004590:	701a      	strb	r2, [r3, #0]
      break;
 8004592:	e01b      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_2Hz5:
      *val = LIS3MDL_UHP_2Hz5;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2234      	movs	r2, #52	; 0x34
 8004598:	701a      	strb	r2, [r3, #0]
      break;
 800459a:	e017      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_5Hz:
      *val = LIS3MDL_UHP_5Hz;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2236      	movs	r2, #54	; 0x36
 80045a0:	701a      	strb	r2, [r3, #0]
      break;
 80045a2:	e013      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_10Hz:
      *val = LIS3MDL_UHP_10Hz;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2238      	movs	r2, #56	; 0x38
 80045a8:	701a      	strb	r2, [r3, #0]
      break;
 80045aa:	e00f      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_20Hz:
      *val = LIS3MDL_UHP_20Hz;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	223a      	movs	r2, #58	; 0x3a
 80045b0:	701a      	strb	r2, [r3, #0]
      break;
 80045b2:	e00b      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_40Hz:
      *val = LIS3MDL_UHP_40Hz;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	223c      	movs	r2, #60	; 0x3c
 80045b8:	701a      	strb	r2, [r3, #0]
      break;
 80045ba:	e007      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_80Hz:
      *val = LIS3MDL_UHP_80Hz;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	223e      	movs	r2, #62	; 0x3e
 80045c0:	701a      	strb	r2, [r3, #0]
      break;
 80045c2:	e003      	b.n	80045cc <lis3mdl_data_rate_get+0x23c>
    default:
      *val = LIS3MDL_UHP_80Hz;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	223e      	movs	r2, #62	; 0x3e
 80045c8:	701a      	strb	r2, [r3, #0]
      break;
 80045ca:	bf00      	nop
  }

  return ret;
 80045cc:	68fb      	ldr	r3, [r7, #12]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop

080045d8 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80045e4:	f107 0208 	add.w	r2, r7, #8
 80045e8:	2301      	movs	r3, #1
 80045ea:	2121      	movs	r1, #33	; 0x21
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff fe59 	bl	80042a4 <lis3mdl_read_reg>
 80045f2:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	b2da      	uxtb	r2, r3
 8004602:	7a3b      	ldrb	r3, [r7, #8]
 8004604:	f362 1346 	bfi	r3, r2, #5, #2
 8004608:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800460a:	f107 0208 	add.w	r2, r7, #8
 800460e:	2301      	movs	r3, #1
 8004610:	2121      	movs	r1, #33	; 0x21
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff fe5e 	bl	80042d4 <lis3mdl_write_reg>
 8004618:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800461a:	68fb      	ldr	r3, [r7, #12]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <lis3mdl_full_scale_get>:
  * @param  val      get the values of fs in reg CTRL_REG2(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_get(stmdev_ctx_t *ctx, lis3mdl_fs_t *val)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800462e:	f107 0208 	add.w	r2, r7, #8
 8004632:	2301      	movs	r3, #1
 8004634:	2121      	movs	r1, #33	; 0x21
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff fe34 	bl	80042a4 <lis3mdl_read_reg>
 800463c:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg2.fs)
 800463e:	7a3b      	ldrb	r3, [r7, #8]
 8004640:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b03      	cmp	r3, #3
 8004648:	d81a      	bhi.n	8004680 <lis3mdl_full_scale_get+0x5c>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <lis3mdl_full_scale_get+0x2c>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004661 	.word	0x08004661
 8004654:	08004669 	.word	0x08004669
 8004658:	08004671 	.word	0x08004671
 800465c:	08004679 	.word	0x08004679
  {
    case LIS3MDL_4_GAUSS:
      *val = LIS3MDL_4_GAUSS;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
      break;
 8004666:	e00f      	b.n	8004688 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_8_GAUSS:
      *val = LIS3MDL_8_GAUSS;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
      break;
 800466e:	e00b      	b.n	8004688 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_12_GAUSS:
      *val = LIS3MDL_12_GAUSS;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2202      	movs	r2, #2
 8004674:	701a      	strb	r2, [r3, #0]
      break;
 8004676:	e007      	b.n	8004688 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_16_GAUSS:
      *val = LIS3MDL_16_GAUSS;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2203      	movs	r2, #3
 800467c:	701a      	strb	r2, [r3, #0]
      break;
 800467e:	e003      	b.n	8004688 <lis3mdl_full_scale_get+0x64>
    default:
      *val = LIS3MDL_4_GAUSS;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
      break;
 8004686:	bf00      	nop
  }

  return ret;
 8004688:	68fb      	ldr	r3, [r7, #12]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop

08004694 <lis3mdl_operating_mode_set>:
  * @param  val      change the values of md in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx, lis3mdl_md_t val)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 80046a0:	f107 0208 	add.w	r2, r7, #8
 80046a4:	2301      	movs	r3, #1
 80046a6:	2122      	movs	r1, #34	; 0x22
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff fdfb 	bl	80042a4 <lis3mdl_read_reg>
 80046ae:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10f      	bne.n	80046d6 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	7a3b      	ldrb	r3, [r7, #8]
 80046c0:	f362 0301 	bfi	r3, r2, #0, #2
 80046c4:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 80046c6:	f107 0208 	add.w	r2, r7, #8
 80046ca:	2301      	movs	r3, #1
 80046cc:	2122      	movs	r1, #34	; 0x22
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fe00 	bl	80042d4 <lis3mdl_write_reg>
 80046d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046d6:	68fb      	ldr	r3, [r7, #12]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 80046ec:	f107 0208 	add.w	r2, r7, #8
 80046f0:	2301      	movs	r3, #1
 80046f2:	2124      	movs	r1, #36	; 0x24
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff fdd5 	bl	80042a4 <lis3mdl_read_reg>
 80046fa:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	7a3b      	ldrb	r3, [r7, #8]
 800470c:	f362 1386 	bfi	r3, r2, #6, #1
 8004710:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 8004712:	f107 0208 	add.w	r2, r7, #8
 8004716:	2301      	movs	r3, #1
 8004718:	2124      	movs	r1, #36	; 0x24
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff fdda 	bl	80042d4 <lis3mdl_write_reg>
 8004720:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004722:	68fb      	ldr	r3, [r7, #12]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t*) buff, 6);
 8004736:	f107 020c 	add.w	r2, r7, #12
 800473a:	2306      	movs	r3, #6
 800473c:	2128      	movs	r1, #40	; 0x28
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff fdb0 	bl	80042a4 <lis3mdl_read_reg>
 8004744:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004746:	7b7b      	ldrb	r3, [r7, #13]
 8004748:	b21a      	sxth	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004754:	b29b      	uxth	r3, r3
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	b29a      	uxth	r2, r3
 800475a:	7b3b      	ldrb	r3, [r7, #12]
 800475c:	b29b      	uxth	r3, r3
 800475e:	4413      	add	r3, r2
 8004760:	b29b      	uxth	r3, r3
 8004762:	b21a      	sxth	r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	3302      	adds	r3, #2
 800476e:	b212      	sxth	r2, r2
 8004770:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	3302      	adds	r3, #2
 8004776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800477a:	b29b      	uxth	r3, r3
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	b29a      	uxth	r2, r3
 8004780:	7bbb      	ldrb	r3, [r7, #14]
 8004782:	b29b      	uxth	r3, r3
 8004784:	4413      	add	r3, r2
 8004786:	b29a      	uxth	r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	3302      	adds	r3, #2
 800478c:	b212      	sxth	r2, r2
 800478e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004790:	7c7a      	ldrb	r2, [r7, #17]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	3304      	adds	r3, #4
 8004796:	b212      	sxth	r2, r2
 8004798:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	3304      	adds	r3, #4
 800479e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	7c3b      	ldrb	r3, [r7, #16]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	3304      	adds	r3, #4
 80047b4:	b212      	sxth	r2, r2
 80047b6:	801a      	strh	r2, [r3, #0]

  return ret;
 80047b8:	697b      	ldr	r3, [r7, #20]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  int32_t ret;  
  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t*) buff, 1);
 80047cc:	2301      	movs	r3, #1
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	210f      	movs	r1, #15
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff fd66 	bl	80042a4 <lis3mdl_read_reg>
 80047d8:	60f8      	str	r0, [r7, #12]
  return ret;
 80047da:	68fb      	ldr	r3, [r7, #12]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f87b 	bl	80048ec <LPS22HB_Init>
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800480c:	f7fd ffcc 	bl	80027a8 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8004810:	88fb      	ldrh	r3, [r7, #6]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	210f      	movs	r1, #15
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd ffea 	bl	80027f0 <SENSOR_IO_Read>
 800481c:	4603      	mov	r3, r0
 800481e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800482c:	b590      	push	{r4, r7, lr}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800483a:	2300      	movs	r3, #0
 800483c:	74fb      	strb	r3, [r7, #19]
 800483e:	e013      	b.n	8004868 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	b2da      	uxtb	r2, r3
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	3328      	adds	r3, #40	; 0x28
 8004848:	b2db      	uxtb	r3, r3
 800484a:	7cfc      	ldrb	r4, [r7, #19]
 800484c:	4619      	mov	r1, r3
 800484e:	4610      	mov	r0, r2
 8004850:	f7fd ffce 	bl	80027f0 <SENSOR_IO_Read>
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	f107 0318 	add.w	r3, r7, #24
 800485c:	4423      	add	r3, r4
 800485e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8004862:	7cfb      	ldrb	r3, [r7, #19]
 8004864:	3301      	adds	r3, #1
 8004866:	74fb      	strb	r3, [r7, #19]
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d9e8      	bls.n	8004840 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800486e:	2300      	movs	r3, #0
 8004870:	74fb      	strb	r3, [r7, #19]
 8004872:	e010      	b.n	8004896 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8004874:	7cfb      	ldrb	r3, [r7, #19]
 8004876:	f107 0218 	add.w	r2, r7, #24
 800487a:	4413      	add	r3, r2
 800487c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004880:	461a      	mov	r2, r3
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	3301      	adds	r3, #1
 8004894:	74fb      	strb	r3, [r7, #19]
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d9eb      	bls.n	8004874 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ac:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2264      	movs	r2, #100	; 0x64
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da01      	bge.n	80048c2 <LPS22HB_P_ReadPressure+0x96>
 80048be:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80048c2:	131b      	asrs	r3, r3, #12
 80048c4:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	ee07 3a90 	vmov	s15, r3
 80048cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048d0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80048e8 <LPS22HB_P_ReadPressure+0xbc>
 80048d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80048dc:	eeb0 0a67 	vmov.f32	s0, s15
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd90      	pop	{r4, r7, pc}
 80048e6:	bf00      	nop
 80048e8:	42c80000 	.word	0x42c80000

080048ec <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	211a      	movs	r1, #26
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fd ff77 	bl	80027f0 <SENSOR_IO_Read>
 8004902:	4603      	mov	r3, r0
 8004904:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	7bfa      	ldrb	r2, [r7, #15]
 800491c:	211a      	movs	r1, #26
 800491e:	4618      	mov	r0, r3
 8004920:	f7fd ff4c 	bl	80027bc <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2110      	movs	r1, #16
 800492a:	4618      	mov	r0, r3
 800492c:	f7fd ff60 	bl	80027f0 <SENSOR_IO_Read>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004942:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	f023 0302 	bic.w	r3, r3, #2
 800494a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	f043 0302 	orr.w	r3, r3, #2
 8004952:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	7bfa      	ldrb	r2, [r7, #15]
 800495a:	2110      	movs	r1, #16
 800495c:	4618      	mov	r0, r3
 800495e:	f7fd ff2d 	bl	80027bc <SENSOR_IO_Write>
}  
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d103      	bne.n	8004988 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004980:	f04f 33ff 	mov.w	r3, #4294967295
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	e04d      	b.n	8004a24 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	7b1a      	ldrb	r2, [r3, #12]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a1b      	ldr	r2, [pc, #108]	; (8004a30 <LSM6DSL_RegisterBusIO+0xc4>)
 80049c4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a1a      	ldr	r2, [pc, #104]	; (8004a34 <LSM6DSL_RegisterBusIO+0xc8>)
 80049ca:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 80049da:	f04f 33ff 	mov.w	r3, #4294967295
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e020      	b.n	8004a24 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4798      	blx	r3
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 80049ee:	f04f 33ff 	mov.w	r3, #4294967295
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e016      	b.n	8004a24 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d112      	bne.n	8004a24 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10d      	bne.n	8004a24 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004a08:	230c      	movs	r3, #12
 8004a0a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8004a0c:	7afb      	ldrb	r3, [r7, #11]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2112      	movs	r1, #18
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fd2d 	bl	8005472 <LSM6DSL_Write_Reg>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8004a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a22:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004a24:	68fb      	ldr	r3, [r7, #12]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	080058e1 	.word	0x080058e1
 8004a34:	08005917 	.word	0x08005917

08004a38 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	331c      	adds	r3, #28
 8004a44:	2101      	movs	r1, #1
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 f9e5 	bl	8005e16 <lsm6dsl_auto_increment_set>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295
 8004a56:	e054      	b.n	8004b02 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	331c      	adds	r3, #28
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 f980 	bl	8005d64 <lsm6dsl_block_data_update_set>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6e:	e048      	b.n	8004b02 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	331c      	adds	r3, #28
 8004a74:	2100      	movs	r1, #0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 f9f3 	bl	8005e62 <lsm6dsl_fifo_mode_set>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004a82:	f04f 33ff 	mov.w	r3, #4294967295
 8004a86:	e03c      	b.n	8004b02 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	331c      	adds	r3, #28
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 ffe6 	bl	8005a68 <lsm6dsl_xl_data_rate_set>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8004aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa6:	e02c      	b.n	8004b02 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	331c      	adds	r3, #28
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 ff7c 	bl	80059ac <lsm6dsl_xl_full_scale_set>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8004aba:	f04f 33ff 	mov.w	r3, #4294967295
 8004abe:	e020      	b.n	8004b02 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2204      	movs	r2, #4
 8004ac4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	331c      	adds	r3, #28
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 f8c0 	bl	8005c54 <lsm6dsl_gy_data_rate_set>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8004ada:	f04f 33ff 	mov.w	r3, #4294967295
 8004ade:	e010      	b.n	8004b02 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	331c      	adds	r3, #28
 8004ae4:	2106      	movs	r1, #6
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 f84c 	bl	8005b84 <lsm6dsl_gy_full_scale_set>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004af2:	f04f 33ff 	mov.w	r3, #4294967295
 8004af6:	e004      	b.n	8004b02 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f888 	bl	8004c28 <LSM6DSL_ACC_Disable>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b22:	e015      	b.n	8004b50 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fa9a 	bl	800505e <LSM6DSL_GYRO_Disable>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295
 8004b34:	e00c      	b.n	8004b50 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	331c      	adds	r3, #28
 8004b66:	6839      	ldr	r1, [r7, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 f943 	bl	8005df4 <lsm6dsl_device_id_get>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	e000      	b.n	8004b7c <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2201      	movs	r2, #1
 8004b92:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2201      	movs	r2, #1
 8004b98:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bac:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2210      	movs	r2, #16
 8004bb2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <LSM6DSL_GetCapabilities+0x58>)
 8004bbe:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	4a06      	ldr	r2, [pc, #24]	; (8004bdc <LSM6DSL_GetCapabilities+0x58>)
 8004bc4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	45d02000 	.word	0x45d02000

08004be0 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e014      	b.n	8004c20 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f103 021c 	add.w	r2, r3, #28
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004c02:	4619      	mov	r1, r3
 8004c04:	4610      	mov	r0, r2
 8004c06:	f000 ff2f 	bl	8005a68 <lsm6dsl_xl_data_rate_set>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004c10:	f04f 33ff 	mov.w	r3, #4294967295
 8004c14:	e004      	b.n	8004c20 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e01f      	b.n	8004c7e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f103 021c 	add.w	r2, r3, #28
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	332b      	adds	r3, #43	; 0x2b
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 ff32 	bl	8005ab4 <lsm6dsl_xl_data_rate_get>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004c56:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5a:	e010      	b.n	8004c7e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	331c      	adds	r3, #28
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 ff00 	bl	8005a68 <lsm6dsl_xl_data_rate_set>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c72:	e004      	b.n	8004c7e <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	331c      	adds	r3, #28
 8004c9a:	f107 020b 	add.w	r2, r7, #11
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fea9 	bl	80059f8 <lsm6dsl_xl_full_scale_get>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004cac:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb0:	e023      	b.n	8004cfa <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004cb2:	7afb      	ldrb	r3, [r7, #11]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d81b      	bhi.n	8004cf0 <LSM6DSL_ACC_GetSensitivity+0x68>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004ce1 	.word	0x08004ce1
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004cd4:	601a      	str	r2, [r3, #0]
      break;
 8004cd6:	e00f      	b.n	8004cf8 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4a0b      	ldr	r2, [pc, #44]	; (8004d08 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004cdc:	601a      	str	r2, [r3, #0]
      break;
 8004cde:	e00b      	b.n	8004cf8 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004ce4:	601a      	str	r2, [r3, #0]
      break;
 8004ce6:	e007      	b.n	8004cf8 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004cec:	601a      	str	r2, [r3, #0]
      break;
 8004cee:	e003      	b.n	8004cf8 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	60fb      	str	r3, [r7, #12]
      break;
 8004cf6:	bf00      	nop
  }

  return ret;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	3d79db23 	.word	0x3d79db23
 8004d08:	3df9db23 	.word	0x3df9db23
 8004d0c:	3e79db23 	.word	0x3e79db23
 8004d10:	3ef9db23 	.word	0x3ef9db23

08004d14 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	331c      	adds	r3, #28
 8004d26:	f107 020b 	add.w	r2, r7, #11
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fec1 	bl	8005ab4 <lsm6dsl_xl_data_rate_get>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004d38:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3c:	e054      	b.n	8004de8 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004d3e:	7afb      	ldrb	r3, [r7, #11]
 8004d40:	2b0b      	cmp	r3, #11
 8004d42:	d84c      	bhi.n	8004dde <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004d44:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8004d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4a:	bf00      	nop
 8004d4c:	08004d7d 	.word	0x08004d7d
 8004d50:	08004d8f 	.word	0x08004d8f
 8004d54:	08004d97 	.word	0x08004d97
 8004d58:	08004d9f 	.word	0x08004d9f
 8004d5c:	08004da7 	.word	0x08004da7
 8004d60:	08004daf 	.word	0x08004daf
 8004d64:	08004db7 	.word	0x08004db7
 8004d68:	08004dbf 	.word	0x08004dbf
 8004d6c:	08004dc7 	.word	0x08004dc7
 8004d70:	08004dcf 	.word	0x08004dcf
 8004d74:	08004dd7 	.word	0x08004dd7
 8004d78:	08004d87 	.word	0x08004d87
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
      break;
 8004d84:	e02f      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004d8a:	601a      	str	r2, [r3, #0]
      break;
 8004d8c:	e02b      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	4a18      	ldr	r2, [pc, #96]	; (8004df4 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004d92:	601a      	str	r2, [r3, #0]
      break;
 8004d94:	e027      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004d9a:	601a      	str	r2, [r3, #0]
      break;
 8004d9c:	e023      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	4a16      	ldr	r2, [pc, #88]	; (8004dfc <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8004da2:	601a      	str	r2, [r3, #0]
      break;
 8004da4:	e01f      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	4a15      	ldr	r2, [pc, #84]	; (8004e00 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004daa:	601a      	str	r2, [r3, #0]
      break;
 8004dac:	e01b      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	4a14      	ldr	r2, [pc, #80]	; (8004e04 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004db2:	601a      	str	r2, [r3, #0]
      break;
 8004db4:	e017      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004dba:	601a      	str	r2, [r3, #0]
      break;
 8004dbc:	e013      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004dc2:	601a      	str	r2, [r3, #0]
      break;
 8004dc4:	e00f      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004dca:	601a      	str	r2, [r3, #0]
      break;
 8004dcc:	e00b      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	4a10      	ldr	r2, [pc, #64]	; (8004e14 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8004dd2:	601a      	str	r2, [r3, #0]
      break;
 8004dd4:	e007      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	4a0f      	ldr	r2, [pc, #60]	; (8004e18 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004dda:	601a      	str	r2, [r3, #0]
      break;
 8004ddc:	e003      	b.n	8004de6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295
 8004de2:	60fb      	str	r3, [r7, #12]
      break;
 8004de4:	bf00      	nop
  }

  return ret;
 8004de6:	68fb      	ldr	r3, [r7, #12]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	3fcccccd 	.word	0x3fcccccd
 8004df4:	41480000 	.word	0x41480000
 8004df8:	41d00000 	.word	0x41d00000
 8004dfc:	42500000 	.word	0x42500000
 8004e00:	42d00000 	.word	0x42d00000
 8004e04:	43500000 	.word	0x43500000
 8004e08:	43d00000 	.word	0x43d00000
 8004e0c:	44504000 	.word	0x44504000
 8004e10:	44cf8000 	.word	0x44cf8000
 8004e14:	45502000 	.word	0x45502000
 8004e18:	45d02000 	.word	0x45d02000

08004e1c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d106      	bne.n	8004e40 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004e32:	ed97 0a00 	vldr	s0, [r7]
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fb36 	bl	80054a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	e005      	b.n	8004e4c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004e40:	ed97 0a00 	vldr	s0, [r7]
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fbbb 	bl	80055c0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8004e4a:	4603      	mov	r3, r0
  }
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	331c      	adds	r3, #28
 8004e66:	f107 020b 	add.w	r2, r7, #11
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fdc3 	bl	80059f8 <lsm6dsl_xl_full_scale_get>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004e78:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7c:	e023      	b.n	8004ec6 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004e7e:	7afb      	ldrb	r3, [r7, #11]
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d81b      	bhi.n	8004ebc <LSM6DSL_ACC_GetFullScale+0x68>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <LSM6DSL_ACC_GetFullScale+0x38>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004eb5 	.word	0x08004eb5
 8004e94:	08004ea5 	.word	0x08004ea5
 8004e98:	08004ead 	.word	0x08004ead
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	601a      	str	r2, [r3, #0]
      break;
 8004ea2:	e00f      	b.n	8004ec4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	601a      	str	r2, [r3, #0]
      break;
 8004eaa:	e00b      	b.n	8004ec4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2208      	movs	r2, #8
 8004eb0:	601a      	str	r2, [r3, #0]
      break;
 8004eb2:	e007      	b.n	8004ec4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2210      	movs	r2, #16
 8004eb8:	601a      	str	r2, [r3, #0]
      break;
 8004eba:	e003      	b.n	8004ec4 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec0:	60fb      	str	r3, [r7, #12]
      break;
 8004ec2:	bf00      	nop
  }

  return ret;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop

08004ed0 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	dd0b      	ble.n	8004ef8 <LSM6DSL_ACC_SetFullScale+0x28>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	dd06      	ble.n	8004ef4 <LSM6DSL_ACC_SetFullScale+0x24>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	dc01      	bgt.n	8004ef0 <LSM6DSL_ACC_SetFullScale+0x20>
 8004eec:	2303      	movs	r3, #3
 8004eee:	e004      	b.n	8004efa <LSM6DSL_ACC_SetFullScale+0x2a>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e002      	b.n	8004efa <LSM6DSL_ACC_SetFullScale+0x2a>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e000      	b.n	8004efa <LSM6DSL_ACC_SetFullScale+0x2a>
 8004ef8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004efa:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	331c      	adds	r3, #28
 8004f00:	7bfa      	ldrb	r2, [r7, #15]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fd51 	bl	80059ac <lsm6dsl_xl_full_scale_set>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004f10:	f04f 33ff 	mov.w	r3, #4294967295
 8004f14:	e000      	b.n	8004f18 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	331c      	adds	r3, #28
 8004f2e:	f107 0208 	add.w	r2, r7, #8
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 ff4c 	bl	8005dd2 <lsm6dsl_acceleration_raw_get>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004f40:	f04f 33ff 	mov.w	r3, #4294967295
 8004f44:	e00c      	b.n	8004f60 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004f46:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004f4e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004f56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	331c      	adds	r3, #28
 8004f7c:	f107 0210 	add.w	r2, r7, #16
 8004f80:	4611      	mov	r1, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 ff25 	bl	8005dd2 <lsm6dsl_acceleration_raw_get>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	e03c      	b.n	800500e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004f94:	f107 030c 	add.w	r3, r7, #12
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fe74 	bl	8004c88 <LSM6DSL_ACC_GetSensitivity>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004faa:	e030      	b.n	800500e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004fac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004fb0:	ee07 3a90 	vmov	s15, r3
 8004fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fc4:	ee17 2a90 	vmov	r2, s15
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004fcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004fd0:	ee07 3a90 	vmov	s15, r3
 8004fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fe4:	ee17 2a90 	vmov	r2, s15
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004fec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ff0:	ee07 3a90 	vmov	s15, r3
 8004ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005004:	ee17 2a90 	vmov	r2, s15
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e014      	b.n	8005056 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f103 021c 	add.w	r2, r3, #28
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f000 fe0a 	bl	8005c54 <lsm6dsl_gy_data_rate_set>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	e004      	b.n	8005056 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	e01f      	b.n	80050b4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f103 021c 	add.w	r2, r3, #28
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	332c      	adds	r3, #44	; 0x2c
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 fe0d 	bl	8005ca0 <lsm6dsl_gy_data_rate_get>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 800508c:	f04f 33ff 	mov.w	r3, #4294967295
 8005090:	e010      	b.n	80050b4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	331c      	adds	r3, #28
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fddb 	bl	8005c54 <lsm6dsl_gy_data_rate_set>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	e004      	b.n	80050b4 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	331c      	adds	r3, #28
 80050ce:	f107 020b 	add.w	r2, r7, #11
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fd7b 	bl	8005bd0 <lsm6dsl_gy_full_scale_get>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80050e0:	f04f 33ff 	mov.w	r3, #4294967295
 80050e4:	e02d      	b.n	8005142 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80050e6:	7afb      	ldrb	r3, [r7, #11]
 80050e8:	2b06      	cmp	r3, #6
 80050ea:	d825      	bhi.n	8005138 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80050ec:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005119 	.word	0x08005119
 80050f8:	08005111 	.word	0x08005111
 80050fc:	08005121 	.word	0x08005121
 8005100:	08005139 	.word	0x08005139
 8005104:	08005129 	.word	0x08005129
 8005108:	08005139 	.word	0x08005139
 800510c:	08005131 	.word	0x08005131
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	4a0e      	ldr	r2, [pc, #56]	; (800514c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8005114:	601a      	str	r2, [r3, #0]
      break;
 8005116:	e013      	b.n	8005140 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	4a0d      	ldr	r2, [pc, #52]	; (8005150 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 800511c:	601a      	str	r2, [r3, #0]
      break;
 800511e:	e00f      	b.n	8005140 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4a0c      	ldr	r2, [pc, #48]	; (8005154 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8005124:	601a      	str	r2, [r3, #0]
      break;
 8005126:	e00b      	b.n	8005140 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 800512c:	601a      	str	r2, [r3, #0]
      break;
 800512e:	e007      	b.n	8005140 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8005134:	601a      	str	r2, [r3, #0]
      break;
 8005136:	e003      	b.n	8005140 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8005138:	f04f 33ff 	mov.w	r3, #4294967295
 800513c:	60fb      	str	r3, [r7, #12]
      break;
 800513e:	bf00      	nop
  }

  return ret;
 8005140:	68fb      	ldr	r3, [r7, #12]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	408c0000 	.word	0x408c0000
 8005150:	410c0000 	.word	0x410c0000
 8005154:	418c0000 	.word	0x418c0000
 8005158:	420c0000 	.word	0x420c0000
 800515c:	428c0000 	.word	0x428c0000

08005160 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	331c      	adds	r3, #28
 8005172:	f107 020b 	add.w	r2, r7, #11
 8005176:	4611      	mov	r1, r2
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fd91 	bl	8005ca0 <lsm6dsl_gy_data_rate_get>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8005184:	f04f 33ff 	mov.w	r3, #4294967295
 8005188:	e04e      	b.n	8005228 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800518a:	7afb      	ldrb	r3, [r7, #11]
 800518c:	2b0a      	cmp	r3, #10
 800518e:	d846      	bhi.n	800521e <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8005190:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051cf 	.word	0x080051cf
 80051a0:	080051d7 	.word	0x080051d7
 80051a4:	080051df 	.word	0x080051df
 80051a8:	080051e7 	.word	0x080051e7
 80051ac:	080051ef 	.word	0x080051ef
 80051b0:	080051f7 	.word	0x080051f7
 80051b4:	080051ff 	.word	0x080051ff
 80051b8:	08005207 	.word	0x08005207
 80051bc:	0800520f 	.word	0x0800520f
 80051c0:	08005217 	.word	0x08005217
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
      break;
 80051cc:	e02b      	b.n	8005226 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	4a17      	ldr	r2, [pc, #92]	; (8005230 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 80051d2:	601a      	str	r2, [r3, #0]
      break;
 80051d4:	e027      	b.n	8005226 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	4a16      	ldr	r2, [pc, #88]	; (8005234 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 80051da:	601a      	str	r2, [r3, #0]
      break;
 80051dc:	e023      	b.n	8005226 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	4a15      	ldr	r2, [pc, #84]	; (8005238 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 80051e2:	601a      	str	r2, [r3, #0]
      break;
 80051e4:	e01f      	b.n	8005226 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	4a14      	ldr	r2, [pc, #80]	; (800523c <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80051ea:	601a      	str	r2, [r3, #0]
      break;
 80051ec:	e01b      	b.n	8005226 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 80051f2:	601a      	str	r2, [r3, #0]
      break;
 80051f4:	e017      	b.n	8005226 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	4a12      	ldr	r2, [pc, #72]	; (8005244 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80051fa:	601a      	str	r2, [r3, #0]
      break;
 80051fc:	e013      	b.n	8005226 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	4a11      	ldr	r2, [pc, #68]	; (8005248 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8005202:	601a      	str	r2, [r3, #0]
      break;
 8005204:	e00f      	b.n	8005226 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	4a10      	ldr	r2, [pc, #64]	; (800524c <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800520a:	601a      	str	r2, [r3, #0]
      break;
 800520c:	e00b      	b.n	8005226 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	4a0f      	ldr	r2, [pc, #60]	; (8005250 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8005212:	601a      	str	r2, [r3, #0]
      break;
 8005214:	e007      	b.n	8005226 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	4a0e      	ldr	r2, [pc, #56]	; (8005254 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 800521a:	601a      	str	r2, [r3, #0]
      break;
 800521c:	e003      	b.n	8005226 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800521e:	f04f 33ff 	mov.w	r3, #4294967295
 8005222:	60fb      	str	r3, [r7, #12]
      break;
 8005224:	bf00      	nop
  }

  return ret;
 8005226:	68fb      	ldr	r3, [r7, #12]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	41480000 	.word	0x41480000
 8005234:	41d00000 	.word	0x41d00000
 8005238:	42500000 	.word	0x42500000
 800523c:	42d00000 	.word	0x42d00000
 8005240:	43500000 	.word	0x43500000
 8005244:	43d00000 	.word	0x43d00000
 8005248:	44504000 	.word	0x44504000
 800524c:	44cf8000 	.word	0x44cf8000
 8005250:	45502000 	.word	0x45502000
 8005254:	45d02000 	.word	0x45d02000

08005258 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800526a:	2b01      	cmp	r3, #1
 800526c:	d106      	bne.n	800527c <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800526e:	ed97 0a00 	vldr	s0, [r7]
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fa26 	bl	80056c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8005278:	4603      	mov	r3, r0
 800527a:	e005      	b.n	8005288 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800527c:	ed97 0a00 	vldr	s0, [r7]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 faab 	bl	80057dc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8005286:	4603      	mov	r3, r0
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	331c      	adds	r3, #28
 80052a2:	f107 020b 	add.w	r2, r7, #11
 80052a6:	4611      	mov	r1, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fc91 	bl	8005bd0 <lsm6dsl_gy_full_scale_get>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80052b4:	f04f 33ff 	mov.w	r3, #4294967295
 80052b8:	e030      	b.n	800531c <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80052ba:	7afb      	ldrb	r3, [r7, #11]
 80052bc:	2b06      	cmp	r3, #6
 80052be:	d828      	bhi.n	8005312 <LSM6DSL_GYRO_GetFullScale+0x82>
 80052c0:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <LSM6DSL_GYRO_GetFullScale+0x38>)
 80052c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c6:	bf00      	nop
 80052c8:	080052ed 	.word	0x080052ed
 80052cc:	080052e5 	.word	0x080052e5
 80052d0:	080052f5 	.word	0x080052f5
 80052d4:	08005313 	.word	0x08005313
 80052d8:	080052ff 	.word	0x080052ff
 80052dc:	08005313 	.word	0x08005313
 80052e0:	08005309 	.word	0x08005309
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	227d      	movs	r2, #125	; 0x7d
 80052e8:	601a      	str	r2, [r3, #0]
      break;
 80052ea:	e016      	b.n	800531a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	22fa      	movs	r2, #250	; 0xfa
 80052f0:	601a      	str	r2, [r3, #0]
      break;
 80052f2:	e012      	b.n	800531a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80052fa:	601a      	str	r2, [r3, #0]
      break;
 80052fc:	e00d      	b.n	800531a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005304:	601a      	str	r2, [r3, #0]
      break;
 8005306:	e008      	b.n	800531a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800530e:	601a      	str	r2, [r3, #0]
      break;
 8005310:	e003      	b.n	800531a <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8005312:	f04f 33ff 	mov.w	r3, #4294967295
 8005316:	60fb      	str	r3, [r7, #12]
      break;
 8005318:	bf00      	nop
  }

  return ret;
 800531a:	68fb      	ldr	r3, [r7, #12]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b7d      	cmp	r3, #125	; 0x7d
 8005332:	dd12      	ble.n	800535a <LSM6DSL_GYRO_SetFullScale+0x36>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2bfa      	cmp	r3, #250	; 0xfa
 8005338:	dd0d      	ble.n	8005356 <LSM6DSL_GYRO_SetFullScale+0x32>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005340:	dd07      	ble.n	8005352 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005348:	dc01      	bgt.n	800534e <LSM6DSL_GYRO_SetFullScale+0x2a>
 800534a:	2304      	movs	r3, #4
 800534c:	e006      	b.n	800535c <LSM6DSL_GYRO_SetFullScale+0x38>
 800534e:	2306      	movs	r3, #6
 8005350:	e004      	b.n	800535c <LSM6DSL_GYRO_SetFullScale+0x38>
 8005352:	2302      	movs	r3, #2
 8005354:	e002      	b.n	800535c <LSM6DSL_GYRO_SetFullScale+0x38>
 8005356:	2300      	movs	r3, #0
 8005358:	e000      	b.n	800535c <LSM6DSL_GYRO_SetFullScale+0x38>
 800535a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 800535c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	331c      	adds	r3, #28
 8005362:	7bfa      	ldrb	r2, [r7, #15]
 8005364:	4611      	mov	r1, r2
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fc0c 	bl	8005b84 <lsm6dsl_gy_full_scale_set>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8005372:	f04f 33ff 	mov.w	r3, #4294967295
 8005376:	e000      	b.n	800537a <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	331c      	adds	r3, #28
 8005390:	f107 0208 	add.w	r2, r7, #8
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fd0a 	bl	8005db0 <lsm6dsl_angular_rate_raw_get>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295
 80053a6:	e00c      	b.n	80053c2 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80053a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80053b0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80053b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	331c      	adds	r3, #28
 80053d8:	f107 0210 	add.w	r2, r7, #16
 80053dc:	4611      	mov	r1, r2
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fce6 	bl	8005db0 <lsm6dsl_angular_rate_raw_get>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80053ea:	f04f 33ff 	mov.w	r3, #4294967295
 80053ee:	e03c      	b.n	800546a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80053f0:	f107 030c 	add.w	r3, r7, #12
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff fe60 	bl	80050bc <LSM6DSL_GYRO_GetSensitivity>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
 8005406:	e030      	b.n	800546a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005408:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005414:	edd7 7a03 	vldr	s15, [r7, #12]
 8005418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005420:	ee17 2a90 	vmov	r2, s15
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005428:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800542c:	ee07 3a90 	vmov	s15, r3
 8005430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005434:	edd7 7a03 	vldr	s15, [r7, #12]
 8005438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005440:	ee17 2a90 	vmov	r2, s15
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005448:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800544c:	ee07 3a90 	vmov	s15, r3
 8005450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005454:	edd7 7a03 	vldr	s15, [r7, #12]
 8005458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005460:	ee17 2a90 	vmov	r2, s15
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	460b      	mov	r3, r1
 800547c:	70fb      	strb	r3, [r7, #3]
 800547e:	4613      	mov	r3, r2
 8005480:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f103 001c 	add.w	r0, r3, #28
 8005488:	1cba      	adds	r2, r7, #2
 800548a:	78f9      	ldrb	r1, [r7, #3]
 800548c:	2301      	movs	r3, #1
 800548e:	f000 fa75 	bl	800597c <lsm6dsl_write_reg>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8005498:	f04f 33ff 	mov.w	r3, #4294967295
 800549c:	e000      	b.n	80054a0 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80054b4:	edd7 7a00 	vldr	s15, [r7]
 80054b8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80054bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c4:	d801      	bhi.n	80054ca <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e058      	b.n	800557c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80054ca:	edd7 7a00 	vldr	s15, [r7]
 80054ce:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80054d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054da:	d801      	bhi.n	80054e0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80054dc:	2302      	movs	r3, #2
 80054de:	e04d      	b.n	800557c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80054e0:	edd7 7a00 	vldr	s15, [r7]
 80054e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80055a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80054e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f0:	d801      	bhi.n	80054f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80054f2:	2303      	movs	r3, #3
 80054f4:	e042      	b.n	800557c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80054f6:	edd7 7a00 	vldr	s15, [r7]
 80054fa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80055a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80054fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005506:	d801      	bhi.n	800550c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005508:	2304      	movs	r3, #4
 800550a:	e037      	b.n	800557c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800550c:	edd7 7a00 	vldr	s15, [r7]
 8005510:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80055ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551c:	d801      	bhi.n	8005522 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800551e:	2305      	movs	r3, #5
 8005520:	e02c      	b.n	800557c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005522:	edd7 7a00 	vldr	s15, [r7]
 8005526:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80055b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800552a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005532:	d801      	bhi.n	8005538 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005534:	2306      	movs	r3, #6
 8005536:	e021      	b.n	800557c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005538:	edd7 7a00 	vldr	s15, [r7]
 800553c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80055b4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8005540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005548:	d801      	bhi.n	800554e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800554a:	2307      	movs	r3, #7
 800554c:	e016      	b.n	800557c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800554e:	edd7 7a00 	vldr	s15, [r7]
 8005552:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80055b8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800555a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555e:	d801      	bhi.n	8005564 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005560:	2308      	movs	r3, #8
 8005562:	e00b      	b.n	800557c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005564:	edd7 7a00 	vldr	s15, [r7]
 8005568:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80055bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 800556c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005574:	d801      	bhi.n	800557a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005576:	2309      	movs	r3, #9
 8005578:	e000      	b.n	800557c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800557a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800557c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	331c      	adds	r3, #28
 8005582:	7bfa      	ldrb	r2, [r7, #15]
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fa6e 	bl	8005a68 <lsm6dsl_xl_data_rate_set>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8005592:	f04f 33ff 	mov.w	r3, #4294967295
 8005596:	e000      	b.n	800559a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	42500000 	.word	0x42500000
 80055a8:	42d00000 	.word	0x42d00000
 80055ac:	43500000 	.word	0x43500000
 80055b0:	43d00000 	.word	0x43d00000
 80055b4:	44504000 	.word	0x44504000
 80055b8:	44cf8000 	.word	0x44cf8000
 80055bc:	45502000 	.word	0x45502000

080055c0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80055cc:	edd7 7a00 	vldr	s15, [r7]
 80055d0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80055d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055dc:	d801      	bhi.n	80055e2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80055de:	2301      	movs	r3, #1
 80055e0:	e058      	b.n	8005694 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80055e2:	edd7 7a00 	vldr	s15, [r7]
 80055e6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80055ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f2:	d801      	bhi.n	80055f8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e04d      	b.n	8005694 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80055f8:	edd7 7a00 	vldr	s15, [r7]
 80055fc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80056a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005608:	d801      	bhi.n	800560e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800560a:	2303      	movs	r3, #3
 800560c:	e042      	b.n	8005694 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800560e:	edd7 7a00 	vldr	s15, [r7]
 8005612:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80056ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561e:	d801      	bhi.n	8005624 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005620:	2304      	movs	r3, #4
 8005622:	e037      	b.n	8005694 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005624:	edd7 7a00 	vldr	s15, [r7]
 8005628:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80056b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800562c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005634:	d801      	bhi.n	800563a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005636:	2305      	movs	r3, #5
 8005638:	e02c      	b.n	8005694 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800563a:	edd7 7a00 	vldr	s15, [r7]
 800563e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80056b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8005642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564a:	d801      	bhi.n	8005650 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 800564c:	2306      	movs	r3, #6
 800564e:	e021      	b.n	8005694 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005650:	edd7 7a00 	vldr	s15, [r7]
 8005654:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80056b8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8005658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800565c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005660:	d801      	bhi.n	8005666 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005662:	2307      	movs	r3, #7
 8005664:	e016      	b.n	8005694 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005666:	edd7 7a00 	vldr	s15, [r7]
 800566a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80056bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800566e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005676:	d801      	bhi.n	800567c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005678:	2308      	movs	r3, #8
 800567a:	e00b      	b.n	8005694 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800567c:	edd7 7a00 	vldr	s15, [r7]
 8005680:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80056c0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568c:	d801      	bhi.n	8005692 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800568e:	2309      	movs	r3, #9
 8005690:	e000      	b.n	8005694 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005692:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	42500000 	.word	0x42500000
 80056ac:	42d00000 	.word	0x42d00000
 80056b0:	43500000 	.word	0x43500000
 80056b4:	43d00000 	.word	0x43d00000
 80056b8:	44504000 	.word	0x44504000
 80056bc:	44cf8000 	.word	0x44cf8000
 80056c0:	45502000 	.word	0x45502000

080056c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80056d0:	edd7 7a00 	vldr	s15, [r7]
 80056d4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80056d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e0:	d801      	bhi.n	80056e6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e058      	b.n	8005798 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80056e6:	edd7 7a00 	vldr	s15, [r7]
 80056ea:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80056ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f6:	d801      	bhi.n	80056fc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e04d      	b.n	8005798 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80056fc:	edd7 7a00 	vldr	s15, [r7]
 8005700:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80057c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570c:	d801      	bhi.n	8005712 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800570e:	2303      	movs	r3, #3
 8005710:	e042      	b.n	8005798 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005712:	edd7 7a00 	vldr	s15, [r7]
 8005716:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80057c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800571a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800571e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005722:	d801      	bhi.n	8005728 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005724:	2304      	movs	r3, #4
 8005726:	e037      	b.n	8005798 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005728:	edd7 7a00 	vldr	s15, [r7]
 800572c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80057c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005738:	d801      	bhi.n	800573e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800573a:	2305      	movs	r3, #5
 800573c:	e02c      	b.n	8005798 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800573e:	edd7 7a00 	vldr	s15, [r7]
 8005742:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80057cc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800574a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574e:	d801      	bhi.n	8005754 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005750:	2306      	movs	r3, #6
 8005752:	e021      	b.n	8005798 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005754:	edd7 7a00 	vldr	s15, [r7]
 8005758:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80057d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800575c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005764:	d801      	bhi.n	800576a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005766:	2307      	movs	r3, #7
 8005768:	e016      	b.n	8005798 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800576a:	edd7 7a00 	vldr	s15, [r7]
 800576e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80057d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577a:	d801      	bhi.n	8005780 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800577c:	2308      	movs	r3, #8
 800577e:	e00b      	b.n	8005798 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005780:	edd7 7a00 	vldr	s15, [r7]
 8005784:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80057d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800578c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005790:	d801      	bhi.n	8005796 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005792:	2309      	movs	r3, #9
 8005794:	e000      	b.n	8005798 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005796:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005798:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	331c      	adds	r3, #28
 800579e:	7bfa      	ldrb	r2, [r7, #15]
 80057a0:	4611      	mov	r1, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fa56 	bl	8005c54 <lsm6dsl_gy_data_rate_set>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80057ae:	f04f 33ff 	mov.w	r3, #4294967295
 80057b2:	e000      	b.n	80057b6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	42500000 	.word	0x42500000
 80057c4:	42d00000 	.word	0x42d00000
 80057c8:	43500000 	.word	0x43500000
 80057cc:	43d00000 	.word	0x43d00000
 80057d0:	44504000 	.word	0x44504000
 80057d4:	44cf8000 	.word	0x44cf8000
 80057d8:	45502000 	.word	0x45502000

080057dc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80057e8:	edd7 7a00 	vldr	s15, [r7]
 80057ec:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80057f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f8:	d801      	bhi.n	80057fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e058      	b.n	80058b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80057fe:	edd7 7a00 	vldr	s15, [r7]
 8005802:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800580a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580e:	d801      	bhi.n	8005814 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005810:	2302      	movs	r3, #2
 8005812:	e04d      	b.n	80058b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005814:	edd7 7a00 	vldr	s15, [r7]
 8005818:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80058c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800581c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005824:	d801      	bhi.n	800582a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005826:	2303      	movs	r3, #3
 8005828:	e042      	b.n	80058b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800582a:	edd7 7a00 	vldr	s15, [r7]
 800582e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80058c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583a:	d801      	bhi.n	8005840 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800583c:	2304      	movs	r3, #4
 800583e:	e037      	b.n	80058b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005840:	edd7 7a00 	vldr	s15, [r7]
 8005844:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80058cc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800584c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005850:	d801      	bhi.n	8005856 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005852:	2305      	movs	r3, #5
 8005854:	e02c      	b.n	80058b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005856:	edd7 7a00 	vldr	s15, [r7]
 800585a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80058d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800585e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005866:	d801      	bhi.n	800586c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005868:	2306      	movs	r3, #6
 800586a:	e021      	b.n	80058b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800586c:	edd7 7a00 	vldr	s15, [r7]
 8005870:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80058d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587c:	d801      	bhi.n	8005882 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800587e:	2307      	movs	r3, #7
 8005880:	e016      	b.n	80058b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005882:	edd7 7a00 	vldr	s15, [r7]
 8005886:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80058d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800588a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800588e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005892:	d801      	bhi.n	8005898 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005894:	2308      	movs	r3, #8
 8005896:	e00b      	b.n	80058b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005898:	edd7 7a00 	vldr	s15, [r7]
 800589c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80058dc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80058a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a8:	d801      	bhi.n	80058ae <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80058aa:	2309      	movs	r3, #9
 80058ac:	e000      	b.n	80058b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80058ae:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	42500000 	.word	0x42500000
 80058c8:	42d00000 	.word	0x42d00000
 80058cc:	43500000 	.word	0x43500000
 80058d0:	43d00000 	.word	0x43d00000
 80058d4:	44504000 	.word	0x44504000
 80058d8:	44cf8000 	.word	0x44cf8000
 80058dc:	45502000 	.word	0x45502000

080058e0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80058e0:	b590      	push	{r4, r7, lr}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	461a      	mov	r2, r3
 80058ec:	460b      	mov	r3, r1
 80058ee:	72fb      	strb	r3, [r7, #11]
 80058f0:	4613      	mov	r3, r2
 80058f2:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	695c      	ldr	r4, [r3, #20]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	7b1b      	ldrb	r3, [r3, #12]
 8005900:	b298      	uxth	r0, r3
 8005902:	7afb      	ldrb	r3, [r7, #11]
 8005904:	b299      	uxth	r1, r3
 8005906:	893b      	ldrh	r3, [r7, #8]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	47a0      	blx	r4
 800590c:	4603      	mov	r3, r0
}
 800590e:	4618      	mov	r0, r3
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	bd90      	pop	{r4, r7, pc}

08005916 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005916:	b590      	push	{r4, r7, lr}
 8005918:	b087      	sub	sp, #28
 800591a:	af00      	add	r7, sp, #0
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	461a      	mov	r2, r3
 8005922:	460b      	mov	r3, r1
 8005924:	72fb      	strb	r3, [r7, #11]
 8005926:	4613      	mov	r3, r2
 8005928:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	691c      	ldr	r4, [r3, #16]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	7b1b      	ldrb	r3, [r3, #12]
 8005936:	b298      	uxth	r0, r3
 8005938:	7afb      	ldrb	r3, [r7, #11]
 800593a:	b299      	uxth	r1, r3
 800593c:	893b      	ldrh	r3, [r7, #8]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	47a0      	blx	r4
 8005942:	4603      	mov	r3, r0
}
 8005944:	4618      	mov	r0, r3
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	bd90      	pop	{r4, r7, pc}

0800594c <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800594c:	b590      	push	{r4, r7, lr}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	607a      	str	r2, [r7, #4]
 8005956:	461a      	mov	r2, r3
 8005958:	460b      	mov	r3, r1
 800595a:	72fb      	strb	r3, [r7, #11]
 800595c:	4613      	mov	r3, r2
 800595e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685c      	ldr	r4, [r3, #4]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6898      	ldr	r0, [r3, #8]
 8005968:	893b      	ldrh	r3, [r7, #8]
 800596a:	7af9      	ldrb	r1, [r7, #11]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	47a0      	blx	r4
 8005970:	6178      	str	r0, [r7, #20]
  return ret;
 8005972:	697b      	ldr	r3, [r7, #20]
}
 8005974:	4618      	mov	r0, r3
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd90      	pop	{r4, r7, pc}

0800597c <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800597c:	b590      	push	{r4, r7, lr}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	461a      	mov	r2, r3
 8005988:	460b      	mov	r3, r1
 800598a:	72fb      	strb	r3, [r7, #11]
 800598c:	4613      	mov	r3, r2
 800598e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681c      	ldr	r4, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6898      	ldr	r0, [r3, #8]
 8005998:	893b      	ldrh	r3, [r7, #8]
 800599a:	7af9      	ldrb	r1, [r7, #11]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	47a0      	blx	r4
 80059a0:	6178      	str	r0, [r7, #20]
  return ret;
 80059a2:	697b      	ldr	r3, [r7, #20]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd90      	pop	{r4, r7, pc}

080059ac <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80059b8:	f107 0208 	add.w	r2, r7, #8
 80059bc:	2301      	movs	r3, #1
 80059be:	2110      	movs	r1, #16
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ffc3 	bl	800594c <lsm6dsl_read_reg>
 80059c6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10f      	bne.n	80059ee <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	7a3b      	ldrb	r3, [r7, #8]
 80059d8:	f362 0383 	bfi	r3, r2, #2, #2
 80059dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80059de:	f107 0208 	add.w	r2, r7, #8
 80059e2:	2301      	movs	r3, #1
 80059e4:	2110      	movs	r1, #16
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff ffc8 	bl	800597c <lsm6dsl_write_reg>
 80059ec:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80059ee:	68fb      	ldr	r3, [r7, #12]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005a02:	f107 0208 	add.w	r2, r7, #8
 8005a06:	2301      	movs	r3, #1
 8005a08:	2110      	movs	r1, #16
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff ff9e 	bl	800594c <lsm6dsl_read_reg>
 8005a10:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8005a12:	7a3b      	ldrb	r3, [r7, #8]
 8005a14:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d81a      	bhi.n	8005a54 <lsm6dsl_xl_full_scale_get+0x5c>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <lsm6dsl_xl_full_scale_get+0x2c>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a35 	.word	0x08005a35
 8005a28:	08005a3d 	.word	0x08005a3d
 8005a2c:	08005a45 	.word	0x08005a45
 8005a30:	08005a4d 	.word	0x08005a4d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]
      break;
 8005a3a:	e00f      	b.n	8005a5c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
      break;
 8005a42:	e00b      	b.n	8005a5c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2202      	movs	r2, #2
 8005a48:	701a      	strb	r2, [r3, #0]
      break;
 8005a4a:	e007      	b.n	8005a5c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2203      	movs	r2, #3
 8005a50:	701a      	strb	r2, [r3, #0]
      break;
 8005a52:	e003      	b.n	8005a5c <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2204      	movs	r2, #4
 8005a58:	701a      	strb	r2, [r3, #0]
      break;
 8005a5a:	bf00      	nop
  }

  return ret;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop

08005a68 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005a74:	f107 0208 	add.w	r2, r7, #8
 8005a78:	2301      	movs	r3, #1
 8005a7a:	2110      	movs	r1, #16
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff ff65 	bl	800594c <lsm6dsl_read_reg>
 8005a82:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10f      	bne.n	8005aaa <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	7a3b      	ldrb	r3, [r7, #8]
 8005a94:	f362 1307 	bfi	r3, r2, #4, #4
 8005a98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005a9a:	f107 0208 	add.w	r2, r7, #8
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	2110      	movs	r1, #16
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff ff6a 	bl	800597c <lsm6dsl_write_reg>
 8005aa8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005abe:	f107 0208 	add.w	r2, r7, #8
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	2110      	movs	r1, #16
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff ff40 	bl	800594c <lsm6dsl_read_reg>
 8005acc:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 8005ace:	7a3b      	ldrb	r3, [r7, #8]
 8005ad0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b0b      	cmp	r3, #11
 8005ad8:	d84a      	bhi.n	8005b70 <lsm6dsl_xl_data_rate_get+0xbc>
 8005ada:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <lsm6dsl_xl_data_rate_get+0x2c>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005b11 	.word	0x08005b11
 8005ae4:	08005b19 	.word	0x08005b19
 8005ae8:	08005b21 	.word	0x08005b21
 8005aec:	08005b29 	.word	0x08005b29
 8005af0:	08005b31 	.word	0x08005b31
 8005af4:	08005b39 	.word	0x08005b39
 8005af8:	08005b41 	.word	0x08005b41
 8005afc:	08005b49 	.word	0x08005b49
 8005b00:	08005b51 	.word	0x08005b51
 8005b04:	08005b59 	.word	0x08005b59
 8005b08:	08005b61 	.word	0x08005b61
 8005b0c:	08005b69 	.word	0x08005b69
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
      break;
 8005b16:	e02f      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]
      break;
 8005b1e:	e02b      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2202      	movs	r2, #2
 8005b24:	701a      	strb	r2, [r3, #0]
      break;
 8005b26:	e027      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	701a      	strb	r2, [r3, #0]
      break;
 8005b2e:	e023      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2204      	movs	r2, #4
 8005b34:	701a      	strb	r2, [r3, #0]
      break;
 8005b36:	e01f      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2205      	movs	r2, #5
 8005b3c:	701a      	strb	r2, [r3, #0]
      break;
 8005b3e:	e01b      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2206      	movs	r2, #6
 8005b44:	701a      	strb	r2, [r3, #0]
      break;
 8005b46:	e017      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2207      	movs	r2, #7
 8005b4c:	701a      	strb	r2, [r3, #0]
      break;
 8005b4e:	e013      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2208      	movs	r2, #8
 8005b54:	701a      	strb	r2, [r3, #0]
      break;
 8005b56:	e00f      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2209      	movs	r2, #9
 8005b5c:	701a      	strb	r2, [r3, #0]
      break;
 8005b5e:	e00b      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	220a      	movs	r2, #10
 8005b64:	701a      	strb	r2, [r3, #0]
      break;
 8005b66:	e007      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	220b      	movs	r2, #11
 8005b6c:	701a      	strb	r2, [r3, #0]
      break;
 8005b6e:	e003      	b.n	8005b78 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	220c      	movs	r2, #12
 8005b74:	701a      	strb	r2, [r3, #0]
      break;
 8005b76:	bf00      	nop
  }

  return ret;
 8005b78:	68fb      	ldr	r3, [r7, #12]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop

08005b84 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005b90:	f107 0208 	add.w	r2, r7, #8
 8005b94:	2301      	movs	r3, #1
 8005b96:	2111      	movs	r1, #17
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff fed7 	bl	800594c <lsm6dsl_read_reg>
 8005b9e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10f      	bne.n	8005bc6 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005ba6:	78fb      	ldrb	r3, [r7, #3]
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	7a3b      	ldrb	r3, [r7, #8]
 8005bb0:	f362 0343 	bfi	r3, r2, #1, #3
 8005bb4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005bb6:	f107 0208 	add.w	r2, r7, #8
 8005bba:	2301      	movs	r3, #1
 8005bbc:	2111      	movs	r1, #17
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff fedc 	bl	800597c <lsm6dsl_write_reg>
 8005bc4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005bda:	f107 0208 	add.w	r2, r7, #8
 8005bde:	2301      	movs	r3, #1
 8005be0:	2111      	movs	r1, #17
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff feb2 	bl	800594c <lsm6dsl_read_reg>
 8005be8:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8005bea:	7a3b      	ldrb	r3, [r7, #8]
 8005bec:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b06      	cmp	r3, #6
 8005bf4:	d824      	bhi.n	8005c40 <lsm6dsl_gy_full_scale_get+0x70>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <lsm6dsl_gy_full_scale_get+0x2c>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c19 	.word	0x08005c19
 8005c00:	08005c21 	.word	0x08005c21
 8005c04:	08005c29 	.word	0x08005c29
 8005c08:	08005c41 	.word	0x08005c41
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c41 	.word	0x08005c41
 8005c14:	08005c39 	.word	0x08005c39
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
      break;
 8005c1e:	e013      	b.n	8005c48 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2201      	movs	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]
      break;
 8005c26:	e00f      	b.n	8005c48 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	701a      	strb	r2, [r3, #0]
      break;
 8005c2e:	e00b      	b.n	8005c48 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2204      	movs	r2, #4
 8005c34:	701a      	strb	r2, [r3, #0]
      break;
 8005c36:	e007      	b.n	8005c48 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2206      	movs	r2, #6
 8005c3c:	701a      	strb	r2, [r3, #0]
      break;
 8005c3e:	e003      	b.n	8005c48 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2207      	movs	r2, #7
 8005c44:	701a      	strb	r2, [r3, #0]
      break;
 8005c46:	bf00      	nop
  }

  return ret;
 8005c48:	68fb      	ldr	r3, [r7, #12]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop

08005c54 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005c60:	f107 0208 	add.w	r2, r7, #8
 8005c64:	2301      	movs	r3, #1
 8005c66:	2111      	movs	r1, #17
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff fe6f 	bl	800594c <lsm6dsl_read_reg>
 8005c6e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10f      	bne.n	8005c96 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005c76:	78fb      	ldrb	r3, [r7, #3]
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	7a3b      	ldrb	r3, [r7, #8]
 8005c80:	f362 1307 	bfi	r3, r2, #4, #4
 8005c84:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005c86:	f107 0208 	add.w	r2, r7, #8
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	2111      	movs	r1, #17
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff fe74 	bl	800597c <lsm6dsl_write_reg>
 8005c94:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005c96:	68fb      	ldr	r3, [r7, #12]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005caa:	f107 0208 	add.w	r2, r7, #8
 8005cae:	2301      	movs	r3, #1
 8005cb0:	2111      	movs	r1, #17
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fe4a 	bl	800594c <lsm6dsl_read_reg>
 8005cb8:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8005cba:	7a3b      	ldrb	r3, [r7, #8]
 8005cbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b0a      	cmp	r3, #10
 8005cc4:	d844      	bhi.n	8005d50 <lsm6dsl_gy_data_rate_get+0xb0>
 8005cc6:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <lsm6dsl_gy_data_rate_get+0x2c>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005cf9 	.word	0x08005cf9
 8005cd0:	08005d01 	.word	0x08005d01
 8005cd4:	08005d09 	.word	0x08005d09
 8005cd8:	08005d11 	.word	0x08005d11
 8005cdc:	08005d19 	.word	0x08005d19
 8005ce0:	08005d21 	.word	0x08005d21
 8005ce4:	08005d29 	.word	0x08005d29
 8005ce8:	08005d31 	.word	0x08005d31
 8005cec:	08005d39 	.word	0x08005d39
 8005cf0:	08005d41 	.word	0x08005d41
 8005cf4:	08005d49 	.word	0x08005d49
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]
      break;
 8005cfe:	e02b      	b.n	8005d58 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2201      	movs	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
      break;
 8005d06:	e027      	b.n	8005d58 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	701a      	strb	r2, [r3, #0]
      break;
 8005d0e:	e023      	b.n	8005d58 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2203      	movs	r2, #3
 8005d14:	701a      	strb	r2, [r3, #0]
      break;
 8005d16:	e01f      	b.n	8005d58 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	701a      	strb	r2, [r3, #0]
      break;
 8005d1e:	e01b      	b.n	8005d58 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2205      	movs	r2, #5
 8005d24:	701a      	strb	r2, [r3, #0]
      break;
 8005d26:	e017      	b.n	8005d58 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2206      	movs	r2, #6
 8005d2c:	701a      	strb	r2, [r3, #0]
      break;
 8005d2e:	e013      	b.n	8005d58 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2207      	movs	r2, #7
 8005d34:	701a      	strb	r2, [r3, #0]
      break;
 8005d36:	e00f      	b.n	8005d58 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	701a      	strb	r2, [r3, #0]
      break;
 8005d3e:	e00b      	b.n	8005d58 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2209      	movs	r2, #9
 8005d44:	701a      	strb	r2, [r3, #0]
      break;
 8005d46:	e007      	b.n	8005d58 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	220a      	movs	r2, #10
 8005d4c:	701a      	strb	r2, [r3, #0]
      break;
 8005d4e:	e003      	b.n	8005d58 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	220b      	movs	r2, #11
 8005d54:	701a      	strb	r2, [r3, #0]
      break;
 8005d56:	bf00      	nop
  }

  return ret;
 8005d58:	68fb      	ldr	r3, [r7, #12]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop

08005d64 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005d70:	f107 0208 	add.w	r2, r7, #8
 8005d74:	2301      	movs	r3, #1
 8005d76:	2112      	movs	r1, #18
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fde7 	bl	800594c <lsm6dsl_read_reg>
 8005d7e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10f      	bne.n	8005da6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005d86:	78fb      	ldrb	r3, [r7, #3]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	7a3b      	ldrb	r3, [r7, #8]
 8005d90:	f362 1386 	bfi	r3, r2, #6, #1
 8005d94:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005d96:	f107 0208 	add.w	r2, r7, #8
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	2112      	movs	r1, #18
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff fdec 	bl	800597c <lsm6dsl_write_reg>
 8005da4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005da6:	68fb      	ldr	r3, [r7, #12]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005dba:	2306      	movs	r3, #6
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	2122      	movs	r1, #34	; 0x22
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff fdc3 	bl	800594c <lsm6dsl_read_reg>
 8005dc6:	60f8      	str	r0, [r7, #12]
  return ret;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8005ddc:	2306      	movs	r3, #6
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	2128      	movs	r1, #40	; 0x28
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff fdb2 	bl	800594c <lsm6dsl_read_reg>
 8005de8:	60f8      	str	r0, [r7, #12]
  return ret;
 8005dea:	68fb      	ldr	r3, [r7, #12]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005dfe:	2301      	movs	r3, #1
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	210f      	movs	r1, #15
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff fda1 	bl	800594c <lsm6dsl_read_reg>
 8005e0a:	60f8      	str	r0, [r7, #12]
  return ret;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005e22:	f107 0208 	add.w	r2, r7, #8
 8005e26:	2301      	movs	r3, #1
 8005e28:	2112      	movs	r1, #18
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff fd8e 	bl	800594c <lsm6dsl_read_reg>
 8005e30:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10f      	bne.n	8005e58 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	7a3b      	ldrb	r3, [r7, #8]
 8005e42:	f362 0382 	bfi	r3, r2, #2, #1
 8005e46:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005e48:	f107 0208 	add.w	r2, r7, #8
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	2112      	movs	r1, #18
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff fd93 	bl	800597c <lsm6dsl_write_reg>
 8005e56:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005e58:	68fb      	ldr	r3, [r7, #12]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8005e6e:	f107 0208 	add.w	r2, r7, #8
 8005e72:	2301      	movs	r3, #1
 8005e74:	210a      	movs	r1, #10
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fd68 	bl	800594c <lsm6dsl_read_reg>
 8005e7c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10f      	bne.n	8005ea4 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	7a3b      	ldrb	r3, [r7, #8]
 8005e8e:	f362 0302 	bfi	r3, r2, #0, #3
 8005e92:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8005e94:	f107 0208 	add.w	r2, r7, #8
 8005e98:	2301      	movs	r3, #1
 8005e9a:	210a      	movs	r1, #10
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff fd6d 	bl	800597c <lsm6dsl_write_reg>
 8005ea2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f004 fdd6 	bl	800aa70 <VL53L0X_get_device_info>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 fc54 	bl	8007792 <VL53L0X_get_offset_calibration_data_micro_meter>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005efc:	b5b0      	push	{r4, r5, r7, lr}
 8005efe:	b094      	sub	sp, #80	; 0x50
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005f0a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d107      	bne.n	8005f22 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005f12:	2200      	movs	r2, #0
 8005f14:	2188      	movs	r1, #136	; 0x88
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f004 ff6a 	bl	800adf0 <VL53L0X_WrByte>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f30:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f3a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a71      	ldr	r2, [pc, #452]	; (8006108 <VL53L0X_DataInit+0x20c>)
 8005f42:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a70      	ldr	r2, [pc, #448]	; (800610c <VL53L0X_DataInit+0x210>)
 8005f4a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005f54:	f107 0308 	add.w	r3, r7, #8
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa5a 	bl	8006414 <VL53L0X_GetDeviceParameters>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 8005f66:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d112      	bne.n	8005f94 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005f72:	2300      	movs	r3, #0
 8005f74:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f103 0410 	add.w	r4, r3, #16
 8005f7c:	f107 0508 	add.w	r5, r7, #8
 8005f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2264      	movs	r2, #100	; 0x64
 8005f98:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005fa2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005fac:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005fb6:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc6:	e014      	b.n	8005ff2 <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8005fc8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d114      	bne.n	8005ffa <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fd67 	bl	8006aac <VL53L0X_SetLimitCheckEnable>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fee:	3301      	adds	r3, #1
 8005ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff4:	2b05      	cmp	r3, #5
 8005ff6:	dde7      	ble.n	8005fc8 <VL53L0X_DataInit+0xcc>
 8005ff8:	e000      	b.n	8005ffc <VL53L0X_DataInit+0x100>
		else
			break;
 8005ffa:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005ffc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006000:	2b00      	cmp	r3, #0
 8006002:	d107      	bne.n	8006014 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006004:	2200      	movs	r2, #0
 8006006:	2102      	movs	r1, #2
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fd4f 	bl	8006aac <VL53L0X_SetLimitCheckEnable>
 800600e:	4603      	mov	r3, r0
 8006010:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006014:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006018:	2b00      	cmp	r3, #0
 800601a:	d107      	bne.n	800602c <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800601c:	2200      	movs	r2, #0
 800601e:	2103      	movs	r1, #3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fd43 	bl	8006aac <VL53L0X_SetLimitCheckEnable>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800602c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006030:	2b00      	cmp	r3, #0
 8006032:	d107      	bne.n	8006044 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006034:	2200      	movs	r2, #0
 8006036:	2104      	movs	r1, #4
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fd37 	bl	8006aac <VL53L0X_SetLimitCheckEnable>
 800603e:	4603      	mov	r3, r0
 8006040:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006044:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006048:	2b00      	cmp	r3, #0
 800604a:	d107      	bne.n	800605c <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800604c:	2200      	movs	r2, #0
 800604e:	2105      	movs	r1, #5
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fd2b 	bl	8006aac <VL53L0X_SetLimitCheckEnable>
 8006056:	4603      	mov	r3, r0
 8006058:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800605c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006060:	2b00      	cmp	r3, #0
 8006062:	d108      	bne.n	8006076 <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006064:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006068:	2100      	movs	r1, #0
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fdce 	bl	8006c0c <VL53L0X_SetLimitCheckValue>
 8006070:	4603      	mov	r3, r0
 8006072:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006076:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800607a:	2b00      	cmp	r3, #0
 800607c:	d108      	bne.n	8006090 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800607e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006082:	2101      	movs	r1, #1
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fdc1 	bl	8006c0c <VL53L0X_SetLimitCheckValue>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006090:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006094:	2b00      	cmp	r3, #0
 8006096:	d108      	bne.n	80060aa <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006098:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800609c:	2102      	movs	r1, #2
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fdb4 	bl	8006c0c <VL53L0X_SetLimitCheckValue>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80060aa:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80060b2:	2200      	movs	r2, #0
 80060b4:	2103      	movs	r1, #3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fda8 	bl	8006c0c <VL53L0X_SetLimitCheckValue>
 80060bc:	4603      	mov	r3, r0
 80060be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80060c2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10f      	bne.n	80060ea <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	22ff      	movs	r2, #255	; 0xff
 80060ce:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80060d2:	22ff      	movs	r2, #255	; 0xff
 80060d4:	2101      	movs	r1, #1
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f004 fe8a 	bl	800adf0 <VL53L0X_WrByte>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80060ea:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d103      	bne.n	80060fa <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80060fa:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3750      	adds	r7, #80	; 0x50
 8006102:	46bd      	mov	sp, r7
 8006104:	bdb0      	pop	{r4, r5, r7, pc}
 8006106:	bf00      	nop
 8006108:	00016b85 	.word	0x00016b85
 800610c:	000970a4 	.word	0x000970a4

08006110 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006110:	b5b0      	push	{r4, r5, r7, lr}
 8006112:	b09e      	sub	sp, #120	; 0x78
 8006114:	af02      	add	r7, sp, #8
 8006116:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006118:	2300      	movs	r3, #0
 800611a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800611e:	f107 031c 	add.w	r3, r7, #28
 8006122:	2240      	movs	r2, #64	; 0x40
 8006124:	2100      	movs	r1, #0
 8006126:	4618      	mov	r0, r3
 8006128:	f00c fba9 	bl	801287e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800612c:	2300      	movs	r3, #0
 800612e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006130:	2300      	movs	r3, #0
 8006132:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006134:	2300      	movs	r3, #0
 8006136:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800613e:	2300      	movs	r3, #0
 8006140:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800614c:	2101      	movs	r1, #1
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f002 fa72 	bl	8008638 <VL53L0X_get_info_from_device>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006160:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800616c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006170:	2b01      	cmp	r3, #1
 8006172:	d80d      	bhi.n	8006190 <VL53L0X_StaticInit+0x80>
 8006174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006178:	2b01      	cmp	r3, #1
 800617a:	d102      	bne.n	8006182 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800617c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800617e:	2b20      	cmp	r3, #32
 8006180:	d806      	bhi.n	8006190 <VL53L0X_StaticInit+0x80>
 8006182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10e      	bne.n	80061a8 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800618a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800618c:	2b0c      	cmp	r3, #12
 800618e:	d90b      	bls.n	80061a8 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006190:	f107 0218 	add.w	r2, r7, #24
 8006194:	f107 0314 	add.w	r3, r7, #20
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fcf4 	bl	8007b88 <VL53L0X_perform_ref_spad_management>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80061a6:	e009      	b.n	80061bc <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80061a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061ac:	461a      	mov	r2, r3
 80061ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fef5 	bl	8007fa0 <VL53L0X_set_reference_spads>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80061bc:	4b94      	ldr	r3, [pc, #592]	; (8006410 <VL53L0X_StaticInit+0x300>)
 80061be:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80061c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10f      	bne.n	80061e8 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80061ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80061d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d104      	bne.n	80061e4 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80061e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80061e2:	e001      	b.n	80061e8 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80061e4:	4b8a      	ldr	r3, [pc, #552]	; (8006410 <VL53L0X_StaticInit+0x300>)
 80061e6:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80061e8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d106      	bne.n	80061fe <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80061f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f003 fdca 	bl	8009d8c <VL53L0X_load_tuning_settings>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80061fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006206:	2300      	movs	r3, #0
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	2304      	movs	r3, #4
 800620c:	2200      	movs	r2, #0
 800620e:	2100      	movs	r1, #0
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 f8ed 	bl	80073f0 <VL53L0X_SetGpioConfig>
 8006216:	4603      	mov	r3, r0
 8006218:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800621c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006220:	2b00      	cmp	r3, #0
 8006222:	d121      	bne.n	8006268 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006224:	2201      	movs	r2, #1
 8006226:	21ff      	movs	r1, #255	; 0xff
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f004 fde1 	bl	800adf0 <VL53L0X_WrByte>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006234:	f107 031a 	add.w	r3, r7, #26
 8006238:	461a      	mov	r2, r3
 800623a:	2184      	movs	r1, #132	; 0x84
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f004 fd63 	bl	800ad08 <VL53L0X_RdWord>
 8006242:	4603      	mov	r3, r0
 8006244:	461a      	mov	r2, r3
 8006246:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800624a:	4313      	orrs	r3, r2
 800624c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006250:	2200      	movs	r2, #0
 8006252:	21ff      	movs	r1, #255	; 0xff
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f004 fdcb 	bl	800adf0 <VL53L0X_WrByte>
 800625a:	4603      	mov	r3, r0
 800625c:	461a      	mov	r2, r3
 800625e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006262:	4313      	orrs	r3, r2
 8006264:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006268:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800626c:	2b00      	cmp	r3, #0
 800626e:	d105      	bne.n	800627c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006270:	8b7b      	ldrh	r3, [r7, #26]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	461a      	mov	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800627c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006280:	2b00      	cmp	r3, #0
 8006282:	d108      	bne.n	8006296 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006284:	f107 031c 	add.w	r3, r7, #28
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f8c2 	bl	8006414 <VL53L0X_GetDeviceParameters>
 8006290:	4603      	mov	r3, r0
 8006292:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006296:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800629a:	2b00      	cmp	r3, #0
 800629c:	d110      	bne.n	80062c0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800629e:	f107 0319 	add.w	r3, r7, #25
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f984 	bl	80065b2 <VL53L0X_GetFractionEnable>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80062b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d103      	bne.n	80062c0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80062b8:	7e7a      	ldrb	r2, [r7, #25]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80062c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10e      	bne.n	80062e6 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f103 0410 	add.w	r4, r3, #16
 80062ce:	f107 051c 	add.w	r5, r7, #28
 80062d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80062e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80062e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d111      	bne.n	8006312 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80062ee:	f107 0319 	add.w	r3, r7, #25
 80062f2:	461a      	mov	r2, r3
 80062f4:	2101      	movs	r1, #1
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f004 fc7f 	bl	800abfa <VL53L0X_RdByte>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006302:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006306:	2b00      	cmp	r3, #0
 8006308:	d103      	bne.n	8006312 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800630a:	7e7a      	ldrb	r2, [r7, #25]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006312:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006316:	2b00      	cmp	r3, #0
 8006318:	d107      	bne.n	800632a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800631a:	2200      	movs	r2, #0
 800631c:	2100      	movs	r1, #0
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f9bc 	bl	800669c <VL53L0X_SetSequenceStepEnable>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800632a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800632e:	2b00      	cmp	r3, #0
 8006330:	d107      	bne.n	8006342 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006332:	2200      	movs	r2, #0
 8006334:	2102      	movs	r1, #2
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f9b0 	bl	800669c <VL53L0X_SetSequenceStepEnable>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006342:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d103      	bne.n	8006352 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2203      	movs	r2, #3
 800634e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006352:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006356:	2b00      	cmp	r3, #0
 8006358:	d109      	bne.n	800636e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800635a:	f107 0313 	add.w	r3, r7, #19
 800635e:	461a      	mov	r2, r3
 8006360:	2100      	movs	r1, #0
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f982 	bl	800666c <VL53L0X_GetVcselPulsePeriod>
 8006368:	4603      	mov	r3, r0
 800636a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800636e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006376:	7cfa      	ldrb	r2, [r7, #19]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800637e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006386:	f107 0313 	add.w	r3, r7, #19
 800638a:	461a      	mov	r2, r3
 800638c:	2101      	movs	r1, #1
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f96c 	bl	800666c <VL53L0X_GetVcselPulsePeriod>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800639a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80063a2:	7cfa      	ldrb	r2, [r7, #19]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80063aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 80063b2:	f107 030c 	add.w	r3, r7, #12
 80063b6:	461a      	mov	r2, r3
 80063b8:	2103      	movs	r1, #3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 faba 	bl	8006934 <VL53L0X_GetSequenceStepTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80063c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d103      	bne.n	80063d6 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80063d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d109      	bne.n	80063f2 <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 80063de:	f107 030c 	add.w	r3, r7, #12
 80063e2:	461a      	mov	r2, r3
 80063e4:	2104      	movs	r1, #4
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 faa4 	bl	8006934 <VL53L0X_GetSequenceStepTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80063f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d103      	bne.n	8006402 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006402:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006406:	4618      	mov	r0, r3
 8006408:	3770      	adds	r7, #112	; 0x70
 800640a:	46bd      	mov	sp, r7
 800640c:	bdb0      	pop	{r4, r5, r7, pc}
 800640e:	bf00      	nop
 8006410:	200000c0 	.word	0x200000c0

08006414 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f8b0 	bl	800658c <VL53L0X_GetDeviceMode>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d107      	bne.n	8006448 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	3308      	adds	r3, #8
 800643c:	4619      	mov	r1, r3
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fab8 	bl	80069b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006444:	4603      	mov	r3, r0
 8006446:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d102      	bne.n	8006456 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2200      	movs	r2, #0
 8006454:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d107      	bne.n	800646e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	3310      	adds	r3, #16
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 faee 	bl	8006a46 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800646a:	4603      	mov	r3, r0
 800646c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800646e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d107      	bne.n	8006486 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	3314      	adds	r3, #20
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff fd29 	bl	8005ed4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006482:	4603      	mov	r3, r0
 8006484:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d134      	bne.n	80064f8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800648e:	2300      	movs	r3, #0
 8006490:	60bb      	str	r3, [r7, #8]
 8006492:	e02a      	b.n	80064ea <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d12a      	bne.n	80064f2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	b299      	uxth	r1, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	3308      	adds	r3, #8
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	4413      	add	r3, r2
 80064aa:	3304      	adds	r3, #4
 80064ac:	461a      	mov	r2, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fc0e 	bl	8006cd0 <VL53L0X_GetLimitCheckValue>
 80064b4:	4603      	mov	r3, r0
 80064b6:	461a      	mov	r2, r3
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80064be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d117      	bne.n	80064f6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	b299      	uxth	r1, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	3318      	adds	r3, #24
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	4413      	add	r3, r2
 80064d2:	461a      	mov	r2, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fb75 	bl	8006bc4 <VL53L0X_GetLimitCheckEnable>
 80064da:	4603      	mov	r3, r0
 80064dc:	461a      	mov	r2, r3
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b05      	cmp	r3, #5
 80064ee:	ddd1      	ble.n	8006494 <VL53L0X_GetDeviceParameters+0x80>
 80064f0:	e002      	b.n	80064f8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80064f2:	bf00      	nop
 80064f4:	e000      	b.n	80064f8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80064f6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	333c      	adds	r3, #60	; 0x3c
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fc70 	bl	8006dec <VL53L0X_GetWrapAroundCheckEnable>
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d107      	bne.n	8006528 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	3304      	adds	r3, #4
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f879 	bl	8006616 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006540:	2300      	movs	r3, #0
 8006542:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	2b15      	cmp	r3, #21
 8006548:	bf8c      	ite	hi
 800654a:	2201      	movhi	r2, #1
 800654c:	2200      	movls	r2, #0
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	2a00      	cmp	r2, #0
 8006552:	d10e      	bne.n	8006572 <VL53L0X_SetDeviceMode+0x3e>
 8006554:	2201      	movs	r2, #1
 8006556:	409a      	lsls	r2, r3
 8006558:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <VL53L0X_SetDeviceMode+0x54>)
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	bf14      	ite	ne
 8006560:	2301      	movne	r3, #1
 8006562:	2300      	moveq	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	78fa      	ldrb	r2, [r7, #3]
 800656e:	741a      	strb	r2, [r3, #16]
		break;
 8006570:	e001      	b.n	8006576 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006572:	23f8      	movs	r3, #248	; 0xf8
 8006574:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006576:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	0030000b 	.word	0x0030000b

0800658c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	7c1a      	ldrb	r2, [r3, #16]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80065a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065bc:	2300      	movs	r3, #0
 80065be:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	2109      	movs	r1, #9
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f004 fb18 	bl	800abfa <VL53L0X_RdByte>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80065ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d106      	bne.n	80065e4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80065e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f003 fa32 	bl	8009a6a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006606:	4603      	mov	r3, r0
 8006608:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800660a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006620:	2300      	movs	r3, #0
 8006622:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f003 faff 	bl	8009c2a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006630:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
 8006648:	4613      	mov	r3, r2
 800664a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006650:	78ba      	ldrb	r2, [r7, #2]
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f002 ff47 	bl	80094ea <VL53L0X_set_vcsel_pulse_period>
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	460b      	mov	r3, r1
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800667a:	2300      	movs	r3, #0
 800667c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800667e:	7afb      	ldrb	r3, [r7, #11]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	4619      	mov	r1, r3
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f003 f9b9 	bl	80099fc <VL53L0X_get_vcsel_pulse_period>
 800668a:	4603      	mov	r3, r0
 800668c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800668e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
 80066a8:	4613      	mov	r3, r2
 80066aa:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80066b8:	f107 030f 	add.w	r3, r7, #15
 80066bc:	461a      	mov	r2, r3
 80066be:	2101      	movs	r1, #1
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f004 fa9a 	bl	800abfa <VL53L0X_RdByte>
 80066c6:	4603      	mov	r3, r0
 80066c8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80066ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d15a      	bne.n	800678c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80066d6:	78bb      	ldrb	r3, [r7, #2]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d12b      	bne.n	8006734 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d825      	bhi.n	800672e <VL53L0X_SetSequenceStepEnable+0x92>
 80066e2:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80066e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e8:	080066fd 	.word	0x080066fd
 80066ec:	08006707 	.word	0x08006707
 80066f0:	08006711 	.word	0x08006711
 80066f4:	0800671b 	.word	0x0800671b
 80066f8:	08006725 	.word	0x08006725
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80066fc:	7dbb      	ldrb	r3, [r7, #22]
 80066fe:	f043 0310 	orr.w	r3, r3, #16
 8006702:	75bb      	strb	r3, [r7, #22]
				break;
 8006704:	e043      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006706:	7dbb      	ldrb	r3, [r7, #22]
 8006708:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800670c:	75bb      	strb	r3, [r7, #22]
				break;
 800670e:	e03e      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006710:	7dbb      	ldrb	r3, [r7, #22]
 8006712:	f043 0304 	orr.w	r3, r3, #4
 8006716:	75bb      	strb	r3, [r7, #22]
				break;
 8006718:	e039      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800671a:	7dbb      	ldrb	r3, [r7, #22]
 800671c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006720:	75bb      	strb	r3, [r7, #22]
				break;
 8006722:	e034      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006724:	7dbb      	ldrb	r3, [r7, #22]
 8006726:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800672a:	75bb      	strb	r3, [r7, #22]
				break;
 800672c:	e02f      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800672e:	23fc      	movs	r3, #252	; 0xfc
 8006730:	75fb      	strb	r3, [r7, #23]
 8006732:	e02c      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	2b04      	cmp	r3, #4
 8006738:	d825      	bhi.n	8006786 <VL53L0X_SetSequenceStepEnable+0xea>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006755 	.word	0x08006755
 8006744:	0800675f 	.word	0x0800675f
 8006748:	08006769 	.word	0x08006769
 800674c:	08006773 	.word	0x08006773
 8006750:	0800677d 	.word	0x0800677d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006754:	7dbb      	ldrb	r3, [r7, #22]
 8006756:	f023 0310 	bic.w	r3, r3, #16
 800675a:	75bb      	strb	r3, [r7, #22]
				break;
 800675c:	e017      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800675e:	7dbb      	ldrb	r3, [r7, #22]
 8006760:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006764:	75bb      	strb	r3, [r7, #22]
				break;
 8006766:	e012      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006768:	7dbb      	ldrb	r3, [r7, #22]
 800676a:	f023 0304 	bic.w	r3, r3, #4
 800676e:	75bb      	strb	r3, [r7, #22]
				break;
 8006770:	e00d      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006772:	7dbb      	ldrb	r3, [r7, #22]
 8006774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006778:	75bb      	strb	r3, [r7, #22]
				break;
 800677a:	e008      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800677c:	7dbb      	ldrb	r3, [r7, #22]
 800677e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006782:	75bb      	strb	r3, [r7, #22]
				break;
 8006784:	e003      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006786:	23fc      	movs	r3, #252	; 0xfc
 8006788:	75fb      	strb	r3, [r7, #23]
 800678a:	e000      	b.n	800678e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800678c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	7dba      	ldrb	r2, [r7, #22]
 8006792:	429a      	cmp	r2, r3
 8006794:	d01e      	beq.n	80067d4 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006796:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d107      	bne.n	80067ae <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800679e:	7dbb      	ldrb	r3, [r7, #22]
 80067a0:	461a      	mov	r2, r3
 80067a2:	2101      	movs	r1, #1
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f004 fb23 	bl	800adf0 <VL53L0X_WrByte>
 80067aa:	4603      	mov	r3, r0
 80067ac:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80067ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	7dba      	ldrb	r2, [r7, #22]
 80067ba:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80067be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80067cc:	6939      	ldr	r1, [r7, #16]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff ff0e 	bl	80065f0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80067d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	607b      	str	r3, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	72fb      	strb	r3, [r7, #11]
 80067ee:	4613      	mov	r3, r2
 80067f0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80067fc:	7afb      	ldrb	r3, [r7, #11]
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d836      	bhi.n	8006870 <sequence_step_enabled+0x90>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <sequence_step_enabled+0x28>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	0800681d 	.word	0x0800681d
 800680c:	0800682f 	.word	0x0800682f
 8006810:	08006841 	.word	0x08006841
 8006814:	08006853 	.word	0x08006853
 8006818:	08006865 	.word	0x08006865
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800681c:	7abb      	ldrb	r3, [r7, #10]
 800681e:	111b      	asrs	r3, r3, #4
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	b2da      	uxtb	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	701a      	strb	r2, [r3, #0]
		break;
 800682c:	e022      	b.n	8006874 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800682e:	7abb      	ldrb	r3, [r7, #10]
 8006830:	10db      	asrs	r3, r3, #3
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	b2da      	uxtb	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	701a      	strb	r2, [r3, #0]
		break;
 800683e:	e019      	b.n	8006874 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006840:	7abb      	ldrb	r3, [r7, #10]
 8006842:	109b      	asrs	r3, r3, #2
 8006844:	b2db      	uxtb	r3, r3
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	b2da      	uxtb	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	701a      	strb	r2, [r3, #0]
		break;
 8006850:	e010      	b.n	8006874 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006852:	7abb      	ldrb	r3, [r7, #10]
 8006854:	119b      	asrs	r3, r3, #6
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	b2da      	uxtb	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	701a      	strb	r2, [r3, #0]
		break;
 8006862:	e007      	b.n	8006874 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006864:	7abb      	ldrb	r3, [r7, #10]
 8006866:	09db      	lsrs	r3, r3, #7
 8006868:	b2da      	uxtb	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	701a      	strb	r2, [r3, #0]
		break;
 800686e:	e001      	b.n	8006874 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006870:	23fc      	movs	r3, #252	; 0xfc
 8006872:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006874:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006878:	4618      	mov	r0, r3
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006896:	f107 030e 	add.w	r3, r7, #14
 800689a:	461a      	mov	r2, r3
 800689c:	2101      	movs	r1, #1
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f004 f9ab 	bl	800abfa <VL53L0X_RdByte>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80068a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d107      	bne.n	80068c0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80068b0:	7bba      	ldrb	r2, [r7, #14]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2100      	movs	r1, #0
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff ff92 	bl	80067e0 <sequence_step_enabled>
 80068bc:	4603      	mov	r3, r0
 80068be:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80068c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d108      	bne.n	80068da <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80068c8:	7bba      	ldrb	r2, [r7, #14]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	3302      	adds	r3, #2
 80068ce:	2101      	movs	r1, #1
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff ff85 	bl	80067e0 <sequence_step_enabled>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80068da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d108      	bne.n	80068f4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80068e2:	7bba      	ldrb	r2, [r7, #14]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	3301      	adds	r3, #1
 80068e8:	2102      	movs	r1, #2
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff ff78 	bl	80067e0 <sequence_step_enabled>
 80068f0:	4603      	mov	r3, r0
 80068f2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80068f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d108      	bne.n	800690e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80068fc:	7bba      	ldrb	r2, [r7, #14]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	3303      	adds	r3, #3
 8006902:	2103      	movs	r1, #3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff ff6b 	bl	80067e0 <sequence_step_enabled>
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800690e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d108      	bne.n	8006928 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006916:	7bba      	ldrb	r2, [r7, #14]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	3304      	adds	r3, #4
 800691c:	2104      	movs	r1, #4
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff ff5e 	bl	80067e0 <sequence_step_enabled>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006928:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	460b      	mov	r3, r1
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006942:	2300      	movs	r3, #0
 8006944:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 800694e:	f107 0210 	add.w	r2, r7, #16
 8006952:	7afb      	ldrb	r3, [r7, #11]
 8006954:	4619      	mov	r1, r3
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f002 fbf2 	bl	8009140 <get_sequence_step_timeout>
 800695c:	4603      	mov	r3, r0
 800695e:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8006960:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11c      	bne.n	80069a2 <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4a11      	ldr	r2, [pc, #68]	; (80069b0 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 800696c:	fba2 2303 	umull	r2, r3, r2, r3
 8006970:	099b      	lsrs	r3, r3, #6
 8006972:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4613      	mov	r3, r2
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006994:	4a06      	ldr	r2, [pc, #24]	; (80069b0 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8006996:	fba2 2303 	umull	r2, r3, r2, r3
 800699a:	099b      	lsrs	r3, r3, #6
 800699c:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	10624dd3 	.word	0x10624dd3

080069b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80069c2:	f107 030c 	add.w	r3, r7, #12
 80069c6:	461a      	mov	r2, r3
 80069c8:	21f8      	movs	r1, #248	; 0xf8
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f004 f99c 	bl	800ad08 <VL53L0X_RdWord>
 80069d0:	4603      	mov	r3, r0
 80069d2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80069d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d108      	bne.n	80069ee <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80069dc:	f107 0308 	add.w	r3, r7, #8
 80069e0:	461a      	mov	r2, r3
 80069e2:	2104      	movs	r1, #4
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f004 f9c7 	bl	800ad78 <VL53L0X_RdDWord>
 80069ea:	4603      	mov	r3, r0
 80069ec:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80069ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10c      	bne.n	8006a10 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80069f6:	89bb      	ldrh	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	89ba      	ldrh	r2, [r7, #12]
 8006a00:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	7f1b      	ldrb	r3, [r3, #28]
 8006a2e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	7bba      	ldrb	r2, [r7, #14]
 8006a34:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b086      	sub	sp, #24
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006a54:	f107 030e 	add.w	r3, r7, #14
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2120      	movs	r1, #32
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f004 f953 	bl	800ad08 <VL53L0X_RdWord>
 8006a62:	4603      	mov	r3, r0
 8006a64:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d118      	bne.n	8006aa0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006a6e:	89fb      	ldrh	r3, [r7, #14]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d109      	bne.n	8006a88 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	771a      	strb	r2, [r3, #28]
 8006a86:	e00b      	b.n	8006aa0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006a88:	89fb      	ldrh	r3, [r7, #14]
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	807b      	strh	r3, [r7, #2]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006acc:	887b      	ldrh	r3, [r7, #2]
 8006ace:	2b05      	cmp	r3, #5
 8006ad0:	d902      	bls.n	8006ad8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ad2:	23fc      	movs	r3, #252	; 0xfc
 8006ad4:	75fb      	strb	r3, [r7, #23]
 8006ad6:	e05b      	b.n	8006b90 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006ad8:	787b      	ldrb	r3, [r7, #1]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	73bb      	strb	r3, [r7, #14]
 8006aea:	e00a      	b.n	8006b02 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	330c      	adds	r3, #12
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006afe:	2301      	movs	r3, #1
 8006b00:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8006b02:	887b      	ldrh	r3, [r7, #2]
 8006b04:	2b05      	cmp	r3, #5
 8006b06:	d841      	bhi.n	8006b8c <VL53L0X_SetLimitCheckEnable+0xe0>
 8006b08:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <VL53L0X_SetLimitCheckEnable+0x64>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b29 	.word	0x08006b29
 8006b14:	08006b33 	.word	0x08006b33
 8006b18:	08006b49 	.word	0x08006b49
 8006b1c:	08006b53 	.word	0x08006b53
 8006b20:	08006b5d 	.word	0x08006b5d
 8006b24:	08006b75 	.word	0x08006b75

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	7bfa      	ldrb	r2, [r7, #15]
 8006b2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006b30:	e02e      	b.n	8006b90 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	2144      	movs	r1, #68	; 0x44
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f004 f97b 	bl	800ae38 <VL53L0X_WrWord>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75fb      	strb	r3, [r7, #23]

			break;
 8006b46:	e023      	b.n	8006b90 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	7bfa      	ldrb	r2, [r7, #15]
 8006b4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006b50:	e01e      	b.n	8006b90 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7bfa      	ldrb	r2, [r7, #15]
 8006b56:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006b5a:	e019      	b.n	8006b90 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006b62:	7b7b      	ldrb	r3, [r7, #13]
 8006b64:	22fe      	movs	r2, #254	; 0xfe
 8006b66:	2160      	movs	r1, #96	; 0x60
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f004 f98f 	bl	800ae8c <VL53L0X_UpdateByte>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006b72:	e00d      	b.n	8006b90 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006b7a:	7b7b      	ldrb	r3, [r7, #13]
 8006b7c:	22ef      	movs	r2, #239	; 0xef
 8006b7e:	2160      	movs	r1, #96	; 0x60
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f004 f983 	bl	800ae8c <VL53L0X_UpdateByte>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006b8a:	e001      	b.n	8006b90 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b8c:	23fc      	movs	r3, #252	; 0xfc
 8006b8e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10f      	bne.n	8006bb8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006b98:	787b      	ldrb	r3, [r7, #1]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006b9e:	887b      	ldrh	r3, [r7, #2]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006baa:	e005      	b.n	8006bb8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006bac:	887b      	ldrh	r3, [r7, #2]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006bd6:	897b      	ldrh	r3, [r7, #10]
 8006bd8:	2b05      	cmp	r3, #5
 8006bda:	d905      	bls.n	8006be8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006bdc:	23fc      	movs	r3, #252	; 0xfc
 8006bde:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	701a      	strb	r2, [r3, #0]
 8006be6:	e008      	b.n	8006bfa <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006be8:	897b      	ldrh	r3, [r7, #10]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bf2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	7dba      	ldrb	r2, [r7, #22]
 8006bf8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
	...

08006c0c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	460b      	mov	r3, r1
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006c1e:	897b      	ldrh	r3, [r7, #10]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c28:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8006c2a:	7dbb      	ldrb	r3, [r7, #22]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d107      	bne.n	8006c40 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006c30:	897b      	ldrh	r3, [r7, #10]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	330c      	adds	r3, #12
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	605a      	str	r2, [r3, #4]
 8006c3e:	e040      	b.n	8006cc2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006c40:	897b      	ldrh	r3, [r7, #10]
 8006c42:	2b05      	cmp	r3, #5
 8006c44:	d830      	bhi.n	8006ca8 <VL53L0X_SetLimitCheckValue+0x9c>
 8006c46:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <VL53L0X_SetLimitCheckValue+0x40>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006c65 	.word	0x08006c65
 8006c50:	08006c6d 	.word	0x08006c6d
 8006c54:	08006c83 	.word	0x08006c83
 8006c58:	08006c8b 	.word	0x08006c8b
 8006c5c:	08006c93 	.word	0x08006c93
 8006c60:	08006c93 	.word	0x08006c93

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006c6a:	e01f      	b.n	8006cac <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	2144      	movs	r1, #68	; 0x44
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f004 f8de 	bl	800ae38 <VL53L0X_WrWord>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006c80:	e014      	b.n	8006cac <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006c88:	e010      	b.n	8006cac <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006c90:	e00c      	b.n	8006cac <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	2164      	movs	r1, #100	; 0x64
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f004 f8cb 	bl	800ae38 <VL53L0X_WrWord>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006ca6:	e001      	b.n	8006cac <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ca8:	23fc      	movs	r3, #252	; 0xfc
 8006caa:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d106      	bne.n	8006cc2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006cb4:	897b      	ldrh	r3, [r7, #10]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	330c      	adds	r3, #12
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop

08006cd0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006ce6:	897b      	ldrh	r3, [r7, #10]
 8006ce8:	2b05      	cmp	r3, #5
 8006cea:	d847      	bhi.n	8006d7c <VL53L0X_GetLimitCheckValue+0xac>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <VL53L0X_GetLimitCheckValue+0x24>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d0d 	.word	0x08006d0d
 8006cf8:	08006d19 	.word	0x08006d19
 8006cfc:	08006d3f 	.word	0x08006d3f
 8006d00:	08006d4b 	.word	0x08006d4b
 8006d04:	08006d57 	.word	0x08006d57
 8006d08:	08006d57 	.word	0x08006d57

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d10:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	77bb      	strb	r3, [r7, #30]
		break;
 8006d16:	e033      	b.n	8006d80 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006d18:	f107 0316 	add.w	r3, r7, #22
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	2144      	movs	r1, #68	; 0x44
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f003 fff1 	bl	800ad08 <VL53L0X_RdWord>
 8006d26:	4603      	mov	r3, r0
 8006d28:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006d2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d102      	bne.n	8006d38 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006d32:	8afb      	ldrh	r3, [r7, #22]
 8006d34:	025b      	lsls	r3, r3, #9
 8006d36:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	77bb      	strb	r3, [r7, #30]
		break;
 8006d3c:	e020      	b.n	8006d80 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	77bb      	strb	r3, [r7, #30]
		break;
 8006d48:	e01a      	b.n	8006d80 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	77bb      	strb	r3, [r7, #30]
		break;
 8006d54:	e014      	b.n	8006d80 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006d56:	f107 0316 	add.w	r3, r7, #22
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	2164      	movs	r1, #100	; 0x64
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f003 ffd2 	bl	800ad08 <VL53L0X_RdWord>
 8006d64:	4603      	mov	r3, r0
 8006d66:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006d68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d102      	bne.n	8006d76 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006d70:	8afb      	ldrh	r3, [r7, #22]
 8006d72:	025b      	lsls	r3, r3, #9
 8006d74:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	77bb      	strb	r3, [r7, #30]
		break;
 8006d7a:	e001      	b.n	8006d80 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d7c:	23fc      	movs	r3, #252	; 0xfc
 8006d7e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006d80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d12a      	bne.n	8006dde <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006d88:	7fbb      	ldrb	r3, [r7, #30]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d124      	bne.n	8006dd8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d110      	bne.n	8006db6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006d94:	897b      	ldrh	r3, [r7, #10]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006da8:	897b      	ldrh	r3, [r7, #10]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006db4:	e013      	b.n	8006dde <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006dbc:	897b      	ldrh	r3, [r7, #10]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006dca:	897b      	ldrh	r3, [r7, #10]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006dd6:	e002      	b.n	8006dde <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006dde:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop

08006dec <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006dfa:	f107 030e 	add.w	r3, r7, #14
 8006dfe:	461a      	mov	r2, r3
 8006e00:	2101      	movs	r1, #1
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f003 fef9 	bl	800abfa <VL53L0X_RdByte>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10e      	bne.n	8006e32 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006e14:	7bba      	ldrb	r2, [r7, #14]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	b25b      	sxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	da03      	bge.n	8006e2c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2201      	movs	r2, #1
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	e002      	b.n	8006e32 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d104      	bne.n	8006e44 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781a      	ldrb	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006e5c:	f107 030e 	add.w	r3, r7, #14
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff fb92 	bl	800658c <VL53L0X_GetDeviceMode>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d107      	bne.n	8006e84 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d104      	bne.n	8006e84 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f898 	bl	8006fb0 <VL53L0X_StartMeasurement>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 fb09 	bl	80084a4 <VL53L0X_measurement_poll_for_completion>
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d103      	bne.n	8006eac <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006ec8:	2301      	movs	r3, #1
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f001 faab 	bl	800842a <VL53L0X_perform_ref_calibration>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006efa:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006efc:	7dbb      	ldrb	r3, [r7, #22]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d005      	beq.n	8006f0e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006f02:	7dbb      	ldrb	r3, [r7, #22]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d002      	beq.n	8006f0e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006f08:	7dbb      	ldrb	r3, [r7, #22]
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d147      	bne.n	8006f9e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006f0e:	f107 030c 	add.w	r3, r7, #12
 8006f12:	f107 0210 	add.w	r2, r7, #16
 8006f16:	2101      	movs	r1, #1
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fb8d 	bl	8007638 <VL53L0X_GetInterruptThresholds>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006f28:	d803      	bhi.n	8006f32 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8006f2a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006f2c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006f30:	d935      	bls.n	8006f9e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d131      	bne.n	8006f9e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d006      	beq.n	8006f4e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006f40:	491a      	ldr	r1, [pc, #104]	; (8006fac <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f002 ff22 	bl	8009d8c <VL53L0X_load_tuning_settings>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75fb      	strb	r3, [r7, #23]
 8006f4c:	e027      	b.n	8006f9e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006f4e:	2204      	movs	r2, #4
 8006f50:	21ff      	movs	r1, #255	; 0xff
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f003 ff4c 	bl	800adf0 <VL53L0X_WrByte>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006f62:	2200      	movs	r2, #0
 8006f64:	2170      	movs	r1, #112	; 0x70
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f003 ff42 	bl	800adf0 <VL53L0X_WrByte>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	461a      	mov	r2, r3
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006f76:	2200      	movs	r2, #0
 8006f78:	21ff      	movs	r1, #255	; 0xff
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f003 ff38 	bl	800adf0 <VL53L0X_WrByte>
 8006f80:	4603      	mov	r3, r0
 8006f82:	461a      	mov	r2, r3
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2180      	movs	r1, #128	; 0x80
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f003 ff2e 	bl	800adf0 <VL53L0X_WrByte>
 8006f94:	4603      	mov	r3, r0
 8006f96:	461a      	mov	r2, r3
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	200001b4 	.word	0x200001b4

08006fb0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006fc0:	f107 030e 	add.w	r3, r7, #14
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff fae0 	bl	800658c <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d052      	beq.n	8007078 <VL53L0X_StartMeasurement+0xc8>
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	dc6a      	bgt.n	80070ac <VL53L0X_StartMeasurement+0xfc>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <VL53L0X_StartMeasurement+0x30>
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d032      	beq.n	8007044 <VL53L0X_StartMeasurement+0x94>
 8006fde:	e065      	b.n	80070ac <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f003 ff03 	bl	800adf0 <VL53L0X_WrByte>
 8006fea:	4603      	mov	r3, r0
 8006fec:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d15b      	bne.n	80070b2 <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d008      	beq.n	8007016 <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 8007004:	f107 030d 	add.w	r3, r7, #13
 8007008:	461a      	mov	r2, r3
 800700a:	2100      	movs	r1, #0
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f003 fdf4 	bl	800abfa <VL53L0X_RdByte>
 8007012:	4603      	mov	r3, r0
 8007014:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	3301      	adds	r3, #1
 800701a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800701c:	7b7a      	ldrb	r2, [r7, #13]
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	4013      	ands	r3, r2
 8007022:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007024:	7bfa      	ldrb	r2, [r7, #15]
 8007026:	429a      	cmp	r2, r3
 8007028:	d106      	bne.n	8007038 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 800702a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d102      	bne.n	8007038 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2bc7      	cmp	r3, #199	; 0xc7
 8007036:	d9e2      	bls.n	8006ffe <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2bc7      	cmp	r3, #199	; 0xc7
 800703c:	d939      	bls.n	80070b2 <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 800703e:	23f9      	movs	r3, #249	; 0xf9
 8007040:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007042:	e036      	b.n	80070b2 <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007044:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d105      	bne.n	8007058 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800704c:	2101      	movs	r1, #1
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff ff48 	bl	8006ee4 <VL53L0X_CheckAndLoadInterruptSettings>
 8007054:	4603      	mov	r3, r0
 8007056:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007058:	2202      	movs	r2, #2
 800705a:	2100      	movs	r1, #0
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f003 fec7 	bl	800adf0 <VL53L0X_WrByte>
 8007062:	4603      	mov	r3, r0
 8007064:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007066:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d123      	bne.n	80070b6 <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2204      	movs	r2, #4
 8007072:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007076:	e01e      	b.n	80070b6 <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d105      	bne.n	800708c <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007080:	2101      	movs	r1, #1
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ff2e 	bl	8006ee4 <VL53L0X_CheckAndLoadInterruptSettings>
 8007088:	4603      	mov	r3, r0
 800708a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800708c:	2204      	movs	r2, #4
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f003 fead 	bl	800adf0 <VL53L0X_WrByte>
 8007096:	4603      	mov	r3, r0
 8007098:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800709a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10b      	bne.n	80070ba <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2204      	movs	r2, #4
 80070a6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80070aa:	e006      	b.n	80070ba <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80070ac:	23f8      	movs	r3, #248	; 0xf8
 80070ae:	75fb      	strb	r3, [r7, #23]
 80070b0:	e004      	b.n	80070bc <VL53L0X_StartMeasurement+0x10c>
		break;
 80070b2:	bf00      	nop
 80070b4:	e002      	b.n	80070bc <VL53L0X_StartMeasurement+0x10c>
		break;
 80070b6:	bf00      	nop
 80070b8:	e000      	b.n	80070bc <VL53L0X_StartMeasurement+0x10c>
		break;
 80070ba:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80070bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80070dc:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d112      	bne.n	800710a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80070e4:	f107 0308 	add.w	r3, r7, #8
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fb1a 	bl	8007724 <VL53L0X_GetInterruptMaskStatus>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d103      	bne.n	8007102 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2201      	movs	r2, #1
 80070fe:	701a      	strb	r2, [r3, #0]
 8007100:	e01c      	b.n	800713c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	e018      	b.n	800713c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800710a:	f107 030d 	add.w	r3, r7, #13
 800710e:	461a      	mov	r2, r3
 8007110:	2114      	movs	r1, #20
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f003 fd71 	bl	800abfa <VL53L0X_RdByte>
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800711c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10b      	bne.n	800713c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007124:	7b7b      	ldrb	r3, [r7, #13]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2201      	movs	r2, #1
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	e002      	b.n	800713c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800713c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007148:	b5b0      	push	{r4, r5, r7, lr}
 800714a:	b096      	sub	sp, #88	; 0x58
 800714c:	af02      	add	r7, sp, #8
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007152:	2300      	movs	r3, #0
 8007154:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007158:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800715c:	230c      	movs	r3, #12
 800715e:	2114      	movs	r1, #20
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f003 fda5 	bl	800acb0 <VL53L0X_ReadMulti>
 8007166:	4603      	mov	r3, r0
 8007168:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800716c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007170:	2b00      	cmp	r3, #0
 8007172:	f040 80d1 	bne.w	8007318 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2200      	movs	r2, #0
 800717a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007182:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007186:	b29b      	uxth	r3, r3
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	b29a      	uxth	r2, r3
 800718c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007190:	b29b      	uxth	r3, r3
 8007192:	4413      	add	r3, r2
 8007194:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2200      	movs	r2, #0
 800719c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800719e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	4413      	add	r3, r2
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	025b      	lsls	r3, r3, #9
 80071b4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071ba:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80071bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	4413      	add	r3, r2
 80071ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80071d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80071d6:	025b      	lsls	r3, r3, #9
 80071d8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80071de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	4413      	add	r3, r2
 80071f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80071fa:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80071fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007200:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 800720a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007216:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800721c:	d046      	beq.n	80072ac <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800721e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007220:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007224:	fb02 f303 	mul.w	r3, r2, r3
 8007228:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800722c:	4a57      	ldr	r2, [pc, #348]	; (800738c <VL53L0X_GetRangingMeasurementData+0x244>)
 800722e:	fb82 1203 	smull	r1, r2, r2, r3
 8007232:	1192      	asrs	r2, r2, #6
 8007234:	17db      	asrs	r3, r3, #31
 8007236:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007238:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	7f1b      	ldrb	r3, [r3, #28]
 8007246:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800724a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800724e:	2b00      	cmp	r3, #0
 8007250:	d02c      	beq.n	80072ac <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007252:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007254:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007258:	fb02 f303 	mul.w	r3, r2, r3
 800725c:	121a      	asrs	r2, r3, #8
					<= 0) {
 800725e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8007260:	429a      	cmp	r2, r3
 8007262:	d10d      	bne.n	8007280 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007264:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007268:	2b00      	cmp	r3, #0
 800726a:	d004      	beq.n	8007276 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800726c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007270:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007274:	e016      	b.n	80072a4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8007276:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800727a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800727e:	e011      	b.n	80072a4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007280:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007286:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800728a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800728c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007290:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007294:	121b      	asrs	r3, r3, #8
 8007296:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729a:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800729c:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80072a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80072a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80072a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80072ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00d      	beq.n	80072d0 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80072b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072b8:	089b      	lsrs	r3, r3, #2
 80072ba:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80072c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	019b      	lsls	r3, r3, #6
 80072c8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	75da      	strb	r2, [r3, #23]
 80072ce:	e006      	b.n	80072de <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80072d6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2200      	movs	r2, #0
 80072dc:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80072de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80072e2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80072e6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80072ea:	9301      	str	r3, [sp, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	4613      	mov	r3, r2
 80072f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f003 f9ab 	bl	800a650 <VL53L0X_get_pal_range_status>
 80072fa:	4603      	mov	r3, r0
 80072fc:	461a      	mov	r2, r3
 80072fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007302:	4313      	orrs	r3, r2
 8007304:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007308:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800730c:	2b00      	cmp	r3, #0
 800730e:	d103      	bne.n	8007318 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007310:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007318:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800731c:	2b00      	cmp	r3, #0
 800731e:	d12f      	bne.n	8007380 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f107 040c 	add.w	r4, r7, #12
 8007326:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800732a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800732c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800732e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007332:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800733a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8007348:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800734e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007354:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800735a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007360:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007366:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007370:	f107 050c 	add.w	r5, r7, #12
 8007374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007378:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800737c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007380:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007384:	4618      	mov	r0, r3
 8007386:	3750      	adds	r7, #80	; 0x50
 8007388:	46bd      	mov	sp, r7
 800738a:	bdb0      	pop	{r4, r5, r7, pc}
 800738c:	10624dd3 	.word	0x10624dd3

08007390 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800739e:	2100      	movs	r1, #0
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff f8c7 	bl	8006534 <VL53L0X_SetDeviceMode>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80073aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d104      	bne.n	80073bc <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff fd4c 	bl	8006e50 <VL53L0X_PerformSingleMeasurement>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80073bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d105      	bne.n	80073d0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7ff febe 	bl	8007148 <VL53L0X_GetRangingMeasurementData>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80073d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d105      	bne.n	80073e4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80073d8:	2100      	movs	r1, #0
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f962 	bl	80076a4 <VL53L0X_ClearInterruptMask>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80073e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	461a      	mov	r2, r3
 80073fe:	4603      	mov	r3, r0
 8007400:	70fb      	strb	r3, [r7, #3]
 8007402:	460b      	mov	r3, r1
 8007404:	70bb      	strb	r3, [r7, #2]
 8007406:	4613      	mov	r3, r2
 8007408:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007414:	23f6      	movs	r3, #246	; 0xf6
 8007416:	73fb      	strb	r3, [r7, #15]
 8007418:	e107      	b.n	800762a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800741a:	78bb      	ldrb	r3, [r7, #2]
 800741c:	2b14      	cmp	r3, #20
 800741e:	d110      	bne.n	8007442 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007420:	7e3b      	ldrb	r3, [r7, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d102      	bne.n	800742c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007426:	2310      	movs	r3, #16
 8007428:	73bb      	strb	r3, [r7, #14]
 800742a:	e001      	b.n	8007430 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800742c:	2301      	movs	r3, #1
 800742e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	461a      	mov	r2, r3
 8007434:	2184      	movs	r1, #132	; 0x84
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f003 fcda 	bl	800adf0 <VL53L0X_WrByte>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]
 8007440:	e0f3      	b.n	800762a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007442:	78bb      	ldrb	r3, [r7, #2]
 8007444:	2b15      	cmp	r3, #21
 8007446:	f040 8097 	bne.w	8007578 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800744a:	2201      	movs	r2, #1
 800744c:	21ff      	movs	r1, #255	; 0xff
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f003 fcce 	bl	800adf0 <VL53L0X_WrByte>
 8007454:	4603      	mov	r3, r0
 8007456:	461a      	mov	r2, r3
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	4313      	orrs	r3, r2
 800745c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f003 fcc4 	bl	800adf0 <VL53L0X_WrByte>
 8007468:	4603      	mov	r3, r0
 800746a:	461a      	mov	r2, r3
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	4313      	orrs	r3, r2
 8007470:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007472:	2200      	movs	r2, #0
 8007474:	21ff      	movs	r1, #255	; 0xff
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f003 fcba 	bl	800adf0 <VL53L0X_WrByte>
 800747c:	4603      	mov	r3, r0
 800747e:	461a      	mov	r2, r3
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	4313      	orrs	r3, r2
 8007484:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007486:	2201      	movs	r2, #1
 8007488:	2180      	movs	r1, #128	; 0x80
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f003 fcb0 	bl	800adf0 <VL53L0X_WrByte>
 8007490:	4603      	mov	r3, r0
 8007492:	461a      	mov	r2, r3
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	4313      	orrs	r3, r2
 8007498:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800749a:	2202      	movs	r2, #2
 800749c:	2185      	movs	r1, #133	; 0x85
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f003 fca6 	bl	800adf0 <VL53L0X_WrByte>
 80074a4:	4603      	mov	r3, r0
 80074a6:	461a      	mov	r2, r3
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80074ae:	2204      	movs	r2, #4
 80074b0:	21ff      	movs	r1, #255	; 0xff
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f003 fc9c 	bl	800adf0 <VL53L0X_WrByte>
 80074b8:	4603      	mov	r3, r0
 80074ba:	461a      	mov	r2, r3
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	4313      	orrs	r3, r2
 80074c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80074c2:	2200      	movs	r2, #0
 80074c4:	21cd      	movs	r1, #205	; 0xcd
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f003 fc92 	bl	800adf0 <VL53L0X_WrByte>
 80074cc:	4603      	mov	r3, r0
 80074ce:	461a      	mov	r2, r3
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80074d6:	2211      	movs	r2, #17
 80074d8:	21cc      	movs	r1, #204	; 0xcc
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f003 fc88 	bl	800adf0 <VL53L0X_WrByte>
 80074e0:	4603      	mov	r3, r0
 80074e2:	461a      	mov	r2, r3
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80074ea:	2207      	movs	r2, #7
 80074ec:	21ff      	movs	r1, #255	; 0xff
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f003 fc7e 	bl	800adf0 <VL53L0X_WrByte>
 80074f4:	4603      	mov	r3, r0
 80074f6:	461a      	mov	r2, r3
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80074fe:	2200      	movs	r2, #0
 8007500:	21be      	movs	r1, #190	; 0xbe
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f003 fc74 	bl	800adf0 <VL53L0X_WrByte>
 8007508:	4603      	mov	r3, r0
 800750a:	461a      	mov	r2, r3
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	4313      	orrs	r3, r2
 8007510:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007512:	2206      	movs	r2, #6
 8007514:	21ff      	movs	r1, #255	; 0xff
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f003 fc6a 	bl	800adf0 <VL53L0X_WrByte>
 800751c:	4603      	mov	r3, r0
 800751e:	461a      	mov	r2, r3
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	4313      	orrs	r3, r2
 8007524:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007526:	2209      	movs	r2, #9
 8007528:	21cc      	movs	r1, #204	; 0xcc
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f003 fc60 	bl	800adf0 <VL53L0X_WrByte>
 8007530:	4603      	mov	r3, r0
 8007532:	461a      	mov	r2, r3
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	4313      	orrs	r3, r2
 8007538:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800753a:	2200      	movs	r2, #0
 800753c:	21ff      	movs	r1, #255	; 0xff
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f003 fc56 	bl	800adf0 <VL53L0X_WrByte>
 8007544:	4603      	mov	r3, r0
 8007546:	461a      	mov	r2, r3
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	4313      	orrs	r3, r2
 800754c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800754e:	2201      	movs	r2, #1
 8007550:	21ff      	movs	r1, #255	; 0xff
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f003 fc4c 	bl	800adf0 <VL53L0X_WrByte>
 8007558:	4603      	mov	r3, r0
 800755a:	461a      	mov	r2, r3
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	4313      	orrs	r3, r2
 8007560:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007562:	2200      	movs	r2, #0
 8007564:	2100      	movs	r1, #0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f003 fc42 	bl	800adf0 <VL53L0X_WrByte>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	4313      	orrs	r3, r2
 8007574:	73fb      	strb	r3, [r7, #15]
 8007576:	e058      	b.n	800762a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d121      	bne.n	80075c4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007580:	787b      	ldrb	r3, [r7, #1]
 8007582:	2b04      	cmp	r3, #4
 8007584:	d81b      	bhi.n	80075be <VL53L0X_SetGpioConfig+0x1ce>
 8007586:	a201      	add	r2, pc, #4	; (adr r2, 800758c <VL53L0X_SetGpioConfig+0x19c>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	080075a1 	.word	0x080075a1
 8007590:	080075a7 	.word	0x080075a7
 8007594:	080075ad 	.word	0x080075ad
 8007598:	080075b3 	.word	0x080075b3
 800759c:	080075b9 	.word	0x080075b9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73bb      	strb	r3, [r7, #14]
				break;
 80075a4:	e00f      	b.n	80075c6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80075a6:	2301      	movs	r3, #1
 80075a8:	73bb      	strb	r3, [r7, #14]
				break;
 80075aa:	e00c      	b.n	80075c6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80075ac:	2302      	movs	r3, #2
 80075ae:	73bb      	strb	r3, [r7, #14]
				break;
 80075b0:	e009      	b.n	80075c6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80075b2:	2303      	movs	r3, #3
 80075b4:	73bb      	strb	r3, [r7, #14]
				break;
 80075b6:	e006      	b.n	80075c6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80075b8:	2304      	movs	r3, #4
 80075ba:	73bb      	strb	r3, [r7, #14]
				break;
 80075bc:	e003      	b.n	80075c6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80075be:	23f5      	movs	r3, #245	; 0xf5
 80075c0:	73fb      	strb	r3, [r7, #15]
 80075c2:	e000      	b.n	80075c6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80075c4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80075c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d107      	bne.n	80075de <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80075ce:	7bbb      	ldrb	r3, [r7, #14]
 80075d0:	461a      	mov	r2, r3
 80075d2:	210a      	movs	r1, #10
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f003 fc0b 	bl	800adf0 <VL53L0X_WrByte>
 80075da:	4603      	mov	r3, r0
 80075dc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80075de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10f      	bne.n	8007606 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80075e6:	7e3b      	ldrb	r3, [r7, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73bb      	strb	r3, [r7, #14]
 80075f0:	e001      	b.n	80075f6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80075f2:	2310      	movs	r3, #16
 80075f4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	22ef      	movs	r2, #239	; 0xef
 80075fa:	2184      	movs	r1, #132	; 0x84
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f003 fc45 	bl	800ae8c <VL53L0X_UpdateByte>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d103      	bne.n	8007616 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	787a      	ldrb	r2, [r7, #1]
 8007612:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d105      	bne.n	800762a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800761e:	2100      	movs	r1, #0
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f83f 	bl	80076a4 <VL53L0X_ClearInterruptMask>
 8007626:	4603      	mov	r3, r0
 8007628:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800762a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop

08007638 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	460b      	mov	r3, r1
 8007646:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007648:	2300      	movs	r3, #0
 800764a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800764c:	f107 0314 	add.w	r3, r7, #20
 8007650:	461a      	mov	r2, r3
 8007652:	210e      	movs	r1, #14
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f003 fb57 	bl	800ad08 <VL53L0X_RdWord>
 800765a:	4603      	mov	r3, r0
 800765c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800765e:	8abb      	ldrh	r3, [r7, #20]
 8007660:	045b      	lsls	r3, r3, #17
 8007662:	461a      	mov	r2, r3
 8007664:	4b0e      	ldr	r3, [pc, #56]	; (80076a0 <VL53L0X_GetInterruptThresholds+0x68>)
 8007666:	4013      	ands	r3, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800766c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10f      	bne.n	8007694 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007674:	f107 0314 	add.w	r3, r7, #20
 8007678:	461a      	mov	r2, r3
 800767a:	210c      	movs	r1, #12
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f003 fb43 	bl	800ad08 <VL53L0X_RdWord>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007686:	8abb      	ldrh	r3, [r7, #20]
 8007688:	045b      	lsls	r3, r3, #17
 800768a:	461a      	mov	r2, r3
 800768c:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <VL53L0X_GetInterruptThresholds+0x68>)
 800768e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007694:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	1ffe0000 	.word	0x1ffe0000

080076a4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076ae:	2300      	movs	r3, #0
 80076b0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80076b6:	2201      	movs	r2, #1
 80076b8:	210b      	movs	r1, #11
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f003 fb98 	bl	800adf0 <VL53L0X_WrByte>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80076c4:	2200      	movs	r2, #0
 80076c6:	210b      	movs	r1, #11
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f003 fb91 	bl	800adf0 <VL53L0X_WrByte>
 80076ce:	4603      	mov	r3, r0
 80076d0:	461a      	mov	r2, r3
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80076d8:	f107 030d 	add.w	r3, r7, #13
 80076dc:	461a      	mov	r2, r3
 80076de:	2113      	movs	r1, #19
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f003 fa8a 	bl	800abfa <VL53L0X_RdByte>
 80076e6:	4603      	mov	r3, r0
 80076e8:	461a      	mov	r2, r3
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	3301      	adds	r3, #1
 80076f4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80076f6:	7b7b      	ldrb	r3, [r7, #13]
 80076f8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d006      	beq.n	800770e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d803      	bhi.n	800770e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0d3      	beq.n	80076b6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800770e:	7bbb      	ldrb	r3, [r7, #14]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d901      	bls.n	8007718 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007714:	23f4      	movs	r3, #244	; 0xf4
 8007716:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007718:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007732:	f107 030e 	add.w	r3, r7, #14
 8007736:	461a      	mov	r2, r3
 8007738:	2113      	movs	r1, #19
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f003 fa5d 	bl	800abfa <VL53L0X_RdByte>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	f003 0207 	and.w	r2, r3, #7
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	f003 0318 	and.w	r3, r3, #24
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007758:	23fa      	movs	r3, #250	; 0xfa
 800775a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800775c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007774:	2300      	movs	r3, #0
 8007776:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	68b9      	ldr	r1, [r7, #8]
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 fa03 	bl	8007b88 <VL53L0X_perform_ref_spad_management>
 8007782:	4603      	mov	r3, r0
 8007784:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007786:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80077a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80077a4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80077a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077aa:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80077ac:	f107 0308 	add.w	r3, r7, #8
 80077b0:	461a      	mov	r2, r3
 80077b2:	2128      	movs	r1, #40	; 0x28
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f003 faa7 	bl	800ad08 <VL53L0X_RdWord>
 80077ba:	4603      	mov	r3, r0
 80077bc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80077be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d11e      	bne.n	8007804 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80077c6:	893b      	ldrh	r3, [r7, #8]
 80077c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80077d0:	893b      	ldrh	r3, [r7, #8]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80077d8:	429a      	cmp	r2, r3
 80077da:	dd0b      	ble.n	80077f4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80077dc:	893a      	ldrh	r2, [r7, #8]
 80077de:	897b      	ldrh	r3, [r7, #10]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	b21b      	sxth	r3, r3
 80077e6:	461a      	mov	r2, r3
					* 250;
 80077e8:	23fa      	movs	r3, #250	; 0xfa
 80077ea:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	e007      	b.n	8007804 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80077f4:	893b      	ldrh	r3, [r7, #8]
 80077f6:	b21b      	sxth	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	23fa      	movs	r3, #250	; 0xfa
 80077fc:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007810:	b480      	push	{r7}
 8007812:	b08b      	sub	sp, #44	; 0x2c
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800781e:	2308      	movs	r3, #8
 8007820:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	f04f 32ff 	mov.w	r2, #4294967295
 800782c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	fbb2 f3f3 	udiv	r3, r2, r3
 8007836:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007840:	69b9      	ldr	r1, [r7, #24]
 8007842:	fb01 f202 	mul.w	r2, r1, r2
 8007846:	1a9b      	subs	r3, r3, r2
 8007848:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
 800784e:	e030      	b.n	80078b2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	4413      	add	r3, r2
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800785e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	429a      	cmp	r2, r3
 8007864:	d11e      	bne.n	80078a4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007866:	7ffa      	ldrb	r2, [r7, #31]
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	fa42 f303 	asr.w	r3, r2, r3
 800786e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007874:	e016      	b.n	80078a4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007876:	7ffb      	ldrb	r3, [r7, #31]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <get_next_good_spad+0x88>
				success = 1;
 8007880:	2301      	movs	r3, #1
 8007882:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	fb02 f203 	mul.w	r2, r2, r3
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	4413      	add	r3, r2
 8007890:	461a      	mov	r2, r3
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	601a      	str	r2, [r3, #0]
				break;
 8007896:	e009      	b.n	80078ac <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007898:	7ffb      	ldrb	r3, [r7, #31]
 800789a:	085b      	lsrs	r3, r3, #1
 800789c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	3301      	adds	r3, #1
 80078a2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80078a4:	6a3a      	ldr	r2, [r7, #32]
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d3e4      	bcc.n	8007876 <get_next_good_spad+0x66>
				coarseIndex++) {
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	3301      	adds	r3, #1
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80078b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d202      	bcs.n	80078c0 <get_next_good_spad+0xb0>
 80078ba:	7fbb      	ldrb	r3, [r7, #30]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0c7      	beq.n	8007850 <get_next_good_spad+0x40>
		}
	}
}
 80078c0:	bf00      	nop
 80078c2:	372c      	adds	r7, #44	; 0x2c
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	099b      	lsrs	r3, r3, #6
 80078dc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80078de:	4a07      	ldr	r2, [pc, #28]	; (80078fc <is_aperture+0x30>)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <is_aperture+0x22>
		isAperture = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	2000036c 	.word	0x2000036c

08007900 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007900:	b480      	push	{r7}
 8007902:	b089      	sub	sp, #36	; 0x24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800790c:	2300      	movs	r3, #0
 800790e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007910:	2308      	movs	r3, #8
 8007912:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	fbb2 f3f3 	udiv	r3, r2, r3
 800791c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	fbb3 f2f2 	udiv	r2, r3, r2
 8007926:	69b9      	ldr	r1, [r7, #24]
 8007928:	fb01 f202 	mul.w	r2, r1, r2
 800792c:	1a9b      	subs	r3, r3, r2
 800792e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	d302      	bcc.n	800793e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007938:	23ce      	movs	r3, #206	; 0xce
 800793a:	77fb      	strb	r3, [r7, #31]
 800793c:	e010      	b.n	8007960 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	4413      	add	r3, r2
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	b25a      	sxtb	r2, r3
 8007948:	2101      	movs	r1, #1
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	fa01 f303 	lsl.w	r3, r1, r3
 8007950:	b25b      	sxtb	r3, r3
 8007952:	4313      	orrs	r3, r2
 8007954:	b259      	sxtb	r1, r3
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	4413      	add	r3, r2
 800795c:	b2ca      	uxtb	r2, r1
 800795e:	701a      	strb	r2, [r3, #0]

	return status;
 8007960:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3724      	adds	r7, #36	; 0x24
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800797a:	2306      	movs	r3, #6
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	21b0      	movs	r1, #176	; 0xb0
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f003 f965 	bl	800ac50 <VL53L0X_WriteMulti>
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800798a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80079a0:	2306      	movs	r3, #6
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	21b0      	movs	r1, #176	; 0xb0
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f003 f982 	bl	800acb0 <VL53L0X_ReadMulti>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80079b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08c      	sub	sp, #48	; 0x30
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	607a      	str	r2, [r7, #4]
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	460b      	mov	r3, r1
 80079ca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80079d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80079d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80079da:	2300      	movs	r3, #0
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80079de:	e02b      	b.n	8007a38 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80079e0:	f107 031c 	add.w	r3, r7, #28
 80079e4:	6a3a      	ldr	r2, [r7, #32]
 80079e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff ff11 	bl	8007810 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f4:	d103      	bne.n	80079fe <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80079f6:	23ce      	movs	r3, #206	; 0xce
 80079f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80079fc:	e020      	b.n	8007a40 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a04:	4413      	add	r3, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff ff60 	bl	80078cc <is_aperture>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	461a      	mov	r2, r3
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d003      	beq.n	8007a1e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007a16:	23ce      	movs	r3, #206	; 0xce
 8007a18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007a1c:	e010      	b.n	8007a40 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007a22:	6a3a      	ldr	r2, [r7, #32]
 8007a24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a26:	6838      	ldr	r0, [r7, #0]
 8007a28:	f7ff ff6a 	bl	8007900 <enable_spad_bit>
		currentSpad++;
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	3301      	adds	r3, #1
 8007a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d3cf      	bcc.n	80079e0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a42:	6a3a      	ldr	r2, [r7, #32]
 8007a44:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007a46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d106      	bne.n	8007a5c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7ff ff8d 	bl	8007970 <set_ref_spad_map>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007a5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d121      	bne.n	8007aa8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007a64:	f107 0314 	add.w	r3, r7, #20
 8007a68:	4619      	mov	r1, r3
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f7ff ff93 	bl	8007996 <get_ref_spad_map>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007a7a:	e011      	b.n	8007aa0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	4413      	add	r3, r2
 8007a82:	781a      	ldrb	r2, [r3, #0]
 8007a84:	f107 0114 	add.w	r1, r7, #20
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	440b      	add	r3, r1
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d003      	beq.n	8007a9a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007a92:	23ce      	movs	r3, #206	; 0xce
 8007a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007a98:	e006      	b.n	8007aa8 <enable_ref_spads+0xec>
			}
			i++;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d3e9      	bcc.n	8007a7c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007aa8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3730      	adds	r7, #48	; 0x30
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08a      	sub	sp, #40	; 0x28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007ad0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d107      	bne.n	8007aec <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007adc:	22c0      	movs	r2, #192	; 0xc0
 8007ade:	2101      	movs	r1, #1
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f003 f985 	bl	800adf0 <VL53L0X_WrByte>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007aec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d108      	bne.n	8007b06 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007af4:	f107 0308 	add.w	r3, r7, #8
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff fc48 	bl	8007390 <VL53L0X_PerformSingleRangingMeasurement>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007b06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d107      	bne.n	8007b1e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007b0e:	2201      	movs	r2, #1
 8007b10:	21ff      	movs	r1, #255	; 0xff
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f003 f96c 	bl	800adf0 <VL53L0X_WrByte>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007b1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	21b6      	movs	r1, #182	; 0xb6
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f003 f8ec 	bl	800ad08 <VL53L0X_RdWord>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d107      	bne.n	8007b4e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	21ff      	movs	r1, #255	; 0xff
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f003 f954 	bl	800adf0 <VL53L0X_WrByte>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007b4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d112      	bne.n	8007b7c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007b56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f003 f946 	bl	800adf0 <VL53L0X_WrByte>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007b6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d104      	bne.n	8007b7c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b78:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007b7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3728      	adds	r7, #40	; 0x28
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007b88:	b590      	push	{r4, r7, lr}
 8007b8a:	b09d      	sub	sp, #116	; 0x74
 8007b8c:	af06      	add	r7, sp, #24
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b94:	2300      	movs	r3, #0
 8007b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007b9a:	23b4      	movs	r3, #180	; 0xb4
 8007b9c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007ba4:	232c      	movs	r3, #44	; 0x2c
 8007ba6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007bb4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007bb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007bc2:	2306      	movs	r3, #6
 8007bc4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 8007bec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007bee:	2300      	movs	r3, #0
 8007bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bf2:	e009      	b.n	8007c08 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c04:	3301      	adds	r3, #1
 8007c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d3f1      	bcc.n	8007bf4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007c10:	2201      	movs	r2, #1
 8007c12:	21ff      	movs	r1, #255	; 0xff
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f003 f8eb 	bl	800adf0 <VL53L0X_WrByte>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007c20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d107      	bne.n	8007c38 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8007c28:	2200      	movs	r2, #0
 8007c2a:	214f      	movs	r1, #79	; 0x4f
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f003 f8df 	bl	800adf0 <VL53L0X_WrByte>
 8007c32:	4603      	mov	r3, r0
 8007c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007c38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007c40:	222c      	movs	r2, #44	; 0x2c
 8007c42:	214e      	movs	r1, #78	; 0x4e
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f003 f8d3 	bl	800adf0 <VL53L0X_WrByte>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007c50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d107      	bne.n	8007c68 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007c58:	2200      	movs	r2, #0
 8007c5a:	21ff      	movs	r1, #255	; 0xff
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f003 f8c7 	bl	800adf0 <VL53L0X_WrByte>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007c68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d109      	bne.n	8007c84 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007c70:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007c74:	461a      	mov	r2, r3
 8007c76:	21b6      	movs	r1, #182	; 0xb6
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f003 f8b9 	bl	800adf0 <VL53L0X_WrByte>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007c84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d107      	bne.n	8007c9c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2180      	movs	r1, #128	; 0x80
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f003 f8ad 	bl	800adf0 <VL53L0X_WrByte>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007c9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007ca4:	f107 0210 	add.w	r2, r7, #16
 8007ca8:	f107 0111 	add.w	r1, r7, #17
 8007cac:	2300      	movs	r3, #0
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 fbbb 	bl	800842a <VL53L0X_perform_ref_calibration>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007cba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d121      	bne.n	8007d06 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cc8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007cde:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007ce2:	f107 0218 	add.w	r2, r7, #24
 8007ce6:	9204      	str	r2, [sp, #16]
 8007ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cea:	9203      	str	r2, [sp, #12]
 8007cec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cee:	9202      	str	r2, [sp, #8]
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4623      	mov	r3, r4
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7ff fe5e 	bl	80079bc <enable_ref_spads>
 8007d00:	4603      	mov	r3, r0
 8007d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d174      	bne.n	8007df8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007d12:	f107 0312 	add.w	r3, r7, #18
 8007d16:	4619      	mov	r1, r3
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff fecb 	bl	8007ab4 <perform_ref_signal_measurement>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007d24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d161      	bne.n	8007df0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007d2c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007d2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d25d      	bcs.n	8007df0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007d34:	2300      	movs	r3, #0
 8007d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d38:	e009      	b.n	8007d4e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007d44:	2200      	movs	r2, #0
 8007d46:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d3f1      	bcc.n	8007d3a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007d56:	e002      	b.n	8007d5e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007d5e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d64:	4413      	add	r3, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff fdb0 	bl	80078cc <is_aperture>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d103      	bne.n	8007d7a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007d72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d3ee      	bcc.n	8007d58 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d80:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007d8e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007d92:	f107 0218 	add.w	r2, r7, #24
 8007d96:	9204      	str	r2, [sp, #16]
 8007d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d9a:	9203      	str	r2, [sp, #12]
 8007d9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d9e:	9202      	str	r2, [sp, #8]
 8007da0:	9301      	str	r3, [sp, #4]
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	4623      	mov	r3, r4
 8007da8:	4602      	mov	r2, r0
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff fe06 	bl	80079bc <enable_ref_spads>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007db6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d11b      	bne.n	8007df6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007dc2:	f107 0312 	add.w	r3, r7, #18
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f7ff fe73 	bl	8007ab4 <perform_ref_signal_measurement>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007dd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10c      	bne.n	8007df6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007ddc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007dde:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d208      	bcs.n	8007df6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007de4:	2301      	movs	r3, #1
 8007de6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007dee:	e002      	b.n	8007df6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007df4:	e000      	b.n	8007df8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007df6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007df8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f040 80af 	bne.w	8007f60 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007e02:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007e04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e06:	429a      	cmp	r2, r3
 8007e08:	f240 80aa 	bls.w	8007f60 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007e1c:	f107 031c 	add.w	r3, r7, #28
 8007e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e22:	4618      	mov	r0, r3
 8007e24:	f00a fd1d 	bl	8012862 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007e28:	8a7b      	ldrh	r3, [r7, #18]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	bfb8      	it	lt
 8007e34:	425b      	neglt	r3, r3
 8007e36:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8007e3e:	e086      	b.n	8007f4e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007e46:	f107 0314 	add.w	r3, r7, #20
 8007e4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e4e:	f7ff fcdf 	bl	8007810 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e58:	d103      	bne.n	8007e62 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007e5a:	23ce      	movs	r3, #206	; 0xce
 8007e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007e60:	e07e      	b.n	8007f60 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8007e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e64:	3301      	adds	r3, #1
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007e68:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	4413      	add	r3, r2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fd2b 	bl	80078cc <is_aperture>
 8007e76:	4603      	mov	r3, r0
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007e80:	23ce      	movs	r3, #206	; 0xce
 8007e82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007e86:	e06b      	b.n	8007f60 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007e92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fd32 	bl	8007900 <enable_spad_bit>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007ea2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10c      	bne.n	8007ec4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eac:	3301      	adds	r3, #1
 8007eae:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7ff fd59 	bl	8007970 <set_ref_spad_map>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007ec4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d146      	bne.n	8007f5a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007ecc:	f107 0312 	add.w	r3, r7, #18
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f7ff fdee 	bl	8007ab4 <perform_ref_signal_measurement>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007ede:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d13b      	bne.n	8007f5e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007ee6:	8a7b      	ldrh	r3, [r7, #18]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bfb8      	it	lt
 8007ef2:	425b      	neglt	r3, r3
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007ef6:	8a7b      	ldrh	r3, [r7, #18]
 8007ef8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d21c      	bcs.n	8007f38 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d914      	bls.n	8007f30 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007f06:	f107 031c 	add.w	r3, r7, #28
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7ff fd2f 	bl	8007970 <set_ref_spad_map>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007f1e:	f107 011c 	add.w	r1, r7, #28
 8007f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f24:	4618      	mov	r0, r3
 8007f26:	f00a fc9c 	bl	8012862 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f36:	e00a      	b.n	8007f4e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007f42:	f107 031c 	add.w	r3, r7, #28
 8007f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f00a fc8a 	bl	8012862 <memcpy>
		while (!complete) {
 8007f4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f43f af74 	beq.w	8007e40 <VL53L0X_perform_ref_spad_management+0x2b8>
 8007f58:	e002      	b.n	8007f60 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007f5a:	bf00      	nop
 8007f5c:	e000      	b.n	8007f60 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007f5e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d115      	bne.n	8007f94 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f6c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007f74:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	781a      	ldrb	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007f94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	375c      	adds	r7, #92	; 0x5c
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd90      	pop	{r4, r7, pc}

08007fa0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007fa0:	b590      	push	{r4, r7, lr}
 8007fa2:	b093      	sub	sp, #76	; 0x4c
 8007fa4:	af06      	add	r7, sp, #24
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4613      	mov	r3, r2
 8007fac:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007fb8:	23b4      	movs	r3, #180	; 0xb4
 8007fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007fbe:	2306      	movs	r3, #6
 8007fc0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007fc2:	232c      	movs	r3, #44	; 0x2c
 8007fc4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	21ff      	movs	r1, #255	; 0xff
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f002 ff10 	bl	800adf0 <VL53L0X_WrByte>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007fd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d107      	bne.n	8007fee <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007fde:	2200      	movs	r2, #0
 8007fe0:	214f      	movs	r1, #79	; 0x4f
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f002 ff04 	bl	800adf0 <VL53L0X_WrByte>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007fee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d107      	bne.n	8008006 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007ff6:	222c      	movs	r2, #44	; 0x2c
 8007ff8:	214e      	movs	r1, #78	; 0x4e
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f002 fef8 	bl	800adf0 <VL53L0X_WrByte>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008006:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800800a:	2b00      	cmp	r3, #0
 800800c:	d107      	bne.n	800801e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800800e:	2200      	movs	r2, #0
 8008010:	21ff      	movs	r1, #255	; 0xff
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f002 feec 	bl	800adf0 <VL53L0X_WrByte>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800801e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800802a:	461a      	mov	r2, r3
 800802c:	21b6      	movs	r1, #182	; 0xb6
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f002 fede 	bl	800adf0 <VL53L0X_WrByte>
 8008034:	4603      	mov	r3, r0
 8008036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800803a:	2300      	movs	r3, #0
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
 800803e:	e009      	b.n	8008054 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	4413      	add	r3, r2
 8008046:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	3301      	adds	r3, #1
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
 8008054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	429a      	cmp	r2, r3
 800805a:	d3f1      	bcc.n	8008040 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800805c:	79fb      	ldrb	r3, [r7, #7]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d011      	beq.n	8008086 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008062:	e002      	b.n	800806a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	3301      	adds	r3, #1
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800806a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008070:	4413      	add	r3, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff fc2a 	bl	80078cc <is_aperture>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d103      	bne.n	8008086 <VL53L0X_set_reference_spads+0xe6>
 800807e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	429a      	cmp	r2, r3
 8008084:	d3ee      	bcc.n	8008064 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8008092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008096:	79f9      	ldrb	r1, [r7, #7]
 8008098:	f107 0214 	add.w	r2, r7, #20
 800809c:	9204      	str	r2, [sp, #16]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	9203      	str	r2, [sp, #12]
 80080a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080a4:	9202      	str	r2, [sp, #8]
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	4623      	mov	r3, r4
 80080ae:	4602      	mov	r2, r0
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7ff fc83 	bl	80079bc <enable_ref_spads>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80080bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10c      	bne.n	80080de <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	79fa      	ldrb	r2, [r7, #7]
 80080da:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80080de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3734      	adds	r7, #52	; 0x34
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd90      	pop	{r4, r7, pc}

080080ea <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80080fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	f043 0301 	orr.w	r3, r3, #1
 8008108:	b2db      	uxtb	r3, r3
 800810a:	461a      	mov	r2, r3
 800810c:	2100      	movs	r1, #0
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f002 fe6e 	bl	800adf0 <VL53L0X_WrByte>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d104      	bne.n	800812a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f9bf 	bl	80084a4 <VL53L0X_measurement_poll_for_completion>
 8008126:	4603      	mov	r3, r0
 8008128:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800812a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d105      	bne.n	800813e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008132:	2100      	movs	r1, #0
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7ff fab5 	bl	80076a4 <VL53L0X_ClearInterruptMask>
 800813a:	4603      	mov	r3, r0
 800813c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800813e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008146:	2200      	movs	r2, #0
 8008148:	2100      	movs	r1, #0
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f002 fe50 	bl	800adf0 <VL53L0X_WrByte>
 8008150:	4603      	mov	r3, r0
 8008152:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	4608      	mov	r0, r1
 800816a:	4611      	mov	r1, r2
 800816c:	461a      	mov	r2, r3
 800816e:	4603      	mov	r3, r0
 8008170:	70fb      	strb	r3, [r7, #3]
 8008172:	460b      	mov	r3, r1
 8008174:	70bb      	strb	r3, [r7, #2]
 8008176:	4613      	mov	r3, r2
 8008178:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008182:	2201      	movs	r2, #1
 8008184:	21ff      	movs	r1, #255	; 0xff
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f002 fe32 	bl	800adf0 <VL53L0X_WrByte>
 800818c:	4603      	mov	r3, r0
 800818e:	461a      	mov	r2, r3
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	4313      	orrs	r3, r2
 8008194:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008196:	2200      	movs	r2, #0
 8008198:	2100      	movs	r1, #0
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f002 fe28 	bl	800adf0 <VL53L0X_WrByte>
 80081a0:	4603      	mov	r3, r0
 80081a2:	461a      	mov	r2, r3
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80081aa:	2200      	movs	r2, #0
 80081ac:	21ff      	movs	r1, #255	; 0xff
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f002 fe1e 	bl	800adf0 <VL53L0X_WrByte>
 80081b4:	4603      	mov	r3, r0
 80081b6:	461a      	mov	r2, r3
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d01e      	beq.n	8008202 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80081c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	21cb      	movs	r1, #203	; 0xcb
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f002 fd12 	bl	800abfa <VL53L0X_RdByte>
 80081d6:	4603      	mov	r3, r0
 80081d8:	461a      	mov	r2, r3
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	4313      	orrs	r3, r2
 80081de:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80081e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d02a      	beq.n	800823e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80081e8:	f107 030e 	add.w	r3, r7, #14
 80081ec:	461a      	mov	r2, r3
 80081ee:	21ee      	movs	r1, #238	; 0xee
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f002 fd02 	bl	800abfa <VL53L0X_RdByte>
 80081f6:	4603      	mov	r3, r0
 80081f8:	461a      	mov	r2, r3
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	73fb      	strb	r3, [r7, #15]
 8008200:	e01d      	b.n	800823e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008202:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800820a:	78bb      	ldrb	r3, [r7, #2]
 800820c:	461a      	mov	r2, r3
 800820e:	21cb      	movs	r1, #203	; 0xcb
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f002 fded 	bl	800adf0 <VL53L0X_WrByte>
 8008216:	4603      	mov	r3, r0
 8008218:	461a      	mov	r2, r3
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	4313      	orrs	r3, r2
 800821e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008220:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00a      	beq.n	800823e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008228:	787b      	ldrb	r3, [r7, #1]
 800822a:	2280      	movs	r2, #128	; 0x80
 800822c:	21ee      	movs	r1, #238	; 0xee
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f002 fe2c 	bl	800ae8c <VL53L0X_UpdateByte>
 8008234:	4603      	mov	r3, r0
 8008236:	461a      	mov	r2, r3
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	4313      	orrs	r3, r2
 800823c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800823e:	2201      	movs	r2, #1
 8008240:	21ff      	movs	r1, #255	; 0xff
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f002 fdd4 	bl	800adf0 <VL53L0X_WrByte>
 8008248:	4603      	mov	r3, r0
 800824a:	461a      	mov	r2, r3
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	4313      	orrs	r3, r2
 8008250:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008252:	2201      	movs	r2, #1
 8008254:	2100      	movs	r1, #0
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f002 fdca 	bl	800adf0 <VL53L0X_WrByte>
 800825c:	4603      	mov	r3, r0
 800825e:	461a      	mov	r2, r3
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	4313      	orrs	r3, r2
 8008264:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008266:	2200      	movs	r2, #0
 8008268:	21ff      	movs	r1, #255	; 0xff
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f002 fdc0 	bl	800adf0 <VL53L0X_WrByte>
 8008270:	4603      	mov	r3, r0
 8008272:	461a      	mov	r2, r3
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	4313      	orrs	r3, r2
 8008278:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800827a:	7bbb      	ldrb	r3, [r7, #14]
 800827c:	f023 0310 	bic.w	r3, r3, #16
 8008280:	b2da      	uxtb	r2, r3
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	701a      	strb	r2, [r3, #0]

	return Status;
 8008286:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b08a      	sub	sp, #40	; 0x28
 8008296:	af04      	add	r7, sp, #16
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	4611      	mov	r1, r2
 800829e:	461a      	mov	r2, r3
 80082a0:	460b      	mov	r3, r1
 80082a2:	71fb      	strb	r3, [r7, #7]
 80082a4:	4613      	mov	r3, r2
 80082a6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80082bc:	79bb      	ldrb	r3, [r7, #6]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80082c8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80082ca:	2201      	movs	r2, #1
 80082cc:	2101      	movs	r1, #1
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f002 fd8e 	bl	800adf0 <VL53L0X_WrByte>
 80082d4:	4603      	mov	r3, r0
 80082d6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80082d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d105      	bne.n	80082ec <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80082e0:	2140      	movs	r1, #64	; 0x40
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f7ff ff01 	bl	80080ea <VL53L0X_perform_single_ref_calibration>
 80082e8:	4603      	mov	r3, r0
 80082ea:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80082ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d115      	bne.n	8008320 <VL53L0X_perform_vhv_calibration+0x8e>
 80082f4:	79fb      	ldrb	r3, [r7, #7]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d112      	bne.n	8008320 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80082fa:	7d39      	ldrb	r1, [r7, #20]
 80082fc:	7d7a      	ldrb	r2, [r7, #21]
 80082fe:	2300      	movs	r3, #0
 8008300:	9303      	str	r3, [sp, #12]
 8008302:	2301      	movs	r3, #1
 8008304:	9302      	str	r3, [sp, #8]
 8008306:	f107 0313 	add.w	r3, r7, #19
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	460b      	mov	r3, r1
 8008312:	2101      	movs	r1, #1
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f7ff ff23 	bl	8008160 <VL53L0X_ref_calibration_io>
 800831a:	4603      	mov	r3, r0
 800831c:	75fb      	strb	r3, [r7, #23]
 800831e:	e002      	b.n	8008326 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2200      	movs	r2, #0
 8008324:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008326:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d112      	bne.n	8008354 <VL53L0X_perform_vhv_calibration+0xc2>
 800832e:	79bb      	ldrb	r3, [r7, #6]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00f      	beq.n	8008354 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008334:	7dbb      	ldrb	r3, [r7, #22]
 8008336:	461a      	mov	r2, r3
 8008338:	2101      	movs	r1, #1
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f002 fd58 	bl	800adf0 <VL53L0X_WrByte>
 8008340:	4603      	mov	r3, r0
 8008342:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008344:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d103      	bne.n	8008354 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	7dba      	ldrb	r2, [r7, #22]
 8008350:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008354:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08a      	sub	sp, #40	; 0x28
 8008364:	af04      	add	r7, sp, #16
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4611      	mov	r1, r2
 800836c:	461a      	mov	r2, r3
 800836e:	460b      	mov	r3, r1
 8008370:	71fb      	strb	r3, [r7, #7]
 8008372:	4613      	mov	r3, r2
 8008374:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008376:	2300      	movs	r3, #0
 8008378:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800837a:	2300      	movs	r3, #0
 800837c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008386:	79bb      	ldrb	r3, [r7, #6]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008392:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008394:	2202      	movs	r2, #2
 8008396:	2101      	movs	r1, #1
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f002 fd29 	bl	800adf0 <VL53L0X_WrByte>
 800839e:	4603      	mov	r3, r0
 80083a0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80083a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d105      	bne.n	80083b6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80083aa:	2100      	movs	r1, #0
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7ff fe9c 	bl	80080ea <VL53L0X_perform_single_ref_calibration>
 80083b2:	4603      	mov	r3, r0
 80083b4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80083b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d115      	bne.n	80083ea <VL53L0X_perform_phase_calibration+0x8a>
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d112      	bne.n	80083ea <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80083c4:	7d39      	ldrb	r1, [r7, #20]
 80083c6:	7d7a      	ldrb	r2, [r7, #21]
 80083c8:	2301      	movs	r3, #1
 80083ca:	9303      	str	r3, [sp, #12]
 80083cc:	2300      	movs	r3, #0
 80083ce:	9302      	str	r3, [sp, #8]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	f107 0313 	add.w	r3, r7, #19
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	460b      	mov	r3, r1
 80083dc:	2101      	movs	r1, #1
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff febe 	bl	8008160 <VL53L0X_ref_calibration_io>
 80083e4:	4603      	mov	r3, r0
 80083e6:	75fb      	strb	r3, [r7, #23]
 80083e8:	e002      	b.n	80083f0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2200      	movs	r2, #0
 80083ee:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80083f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d112      	bne.n	800841e <VL53L0X_perform_phase_calibration+0xbe>
 80083f8:	79bb      	ldrb	r3, [r7, #6]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00f      	beq.n	800841e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80083fe:	7dbb      	ldrb	r3, [r7, #22]
 8008400:	461a      	mov	r2, r3
 8008402:	2101      	movs	r1, #1
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f002 fcf3 	bl	800adf0 <VL53L0X_WrByte>
 800840a:	4603      	mov	r3, r0
 800840c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800840e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d103      	bne.n	800841e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	7dba      	ldrb	r2, [r7, #22]
 800841a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800841e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b086      	sub	sp, #24
 800842e:	af00      	add	r7, sp, #0
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	607a      	str	r2, [r7, #4]
 8008436:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008438:	2300      	movs	r3, #0
 800843a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008446:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008448:	78fa      	ldrb	r2, [r7, #3]
 800844a:	2300      	movs	r3, #0
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff ff1f 	bl	8008292 <VL53L0X_perform_vhv_calibration>
 8008454:	4603      	mov	r3, r0
 8008456:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008458:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d107      	bne.n	8008470 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008460:	78fa      	ldrb	r2, [r7, #3]
 8008462:	2300      	movs	r3, #0
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f7ff ff7a 	bl	8008360 <VL53L0X_perform_phase_calibration>
 800846c:	4603      	mov	r3, r0
 800846e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008470:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10f      	bne.n	8008498 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008478:	7dbb      	ldrb	r3, [r7, #22]
 800847a:	461a      	mov	r2, r3
 800847c:	2101      	movs	r1, #1
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f002 fcb6 	bl	800adf0 <VL53L0X_WrByte>
 8008484:	4603      	mov	r3, r0
 8008486:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008488:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d103      	bne.n	8008498 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	7dba      	ldrb	r2, [r7, #22]
 8008494:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008498:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084ac:	2300      	movs	r3, #0
 80084ae:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80084b8:	f107 030f 	add.w	r3, r7, #15
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fe fe02 	bl	80070c8 <VL53L0X_GetMeasurementDataReady>
 80084c4:	4603      	mov	r3, r0
 80084c6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80084c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10f      	bne.n	80084f0 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d00e      	beq.n	80084f4 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	3301      	adds	r3, #1
 80084da:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	2bc7      	cmp	r3, #199	; 0xc7
 80084e0:	d902      	bls.n	80084e8 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 80084e2:	23f9      	movs	r3, #249	; 0xf9
 80084e4:	75fb      	strb	r3, [r7, #23]
			break;
 80084e6:	e006      	b.n	80084f6 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f002 fd03 	bl	800aef4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80084ee:	e7e3      	b.n	80084b8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80084f0:	bf00      	nop
 80084f2:	e000      	b.n	80084f6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 80084f4:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80084f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008502:	b480      	push	{r7}
 8008504:	b085      	sub	sp, #20
 8008506:	af00      	add	r7, sp, #0
 8008508:	4603      	mov	r3, r0
 800850a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	3301      	adds	r3, #1
 8008514:	b2db      	uxtb	r3, r3
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	085b      	lsrs	r3, r3, #1
 800853a:	b2db      	uxtb	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008540:	7bfb      	ldrb	r3, [r7, #15]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800855a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800855e:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008560:	e002      	b.n	8008568 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	089b      	lsrs	r3, r3, #2
 8008566:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	429a      	cmp	r2, r3
 800856e:	d8f8      	bhi.n	8008562 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008570:	e017      	b.n	80085a2 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	4413      	add	r3, r2
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	429a      	cmp	r2, r3
 800857c:	d30b      	bcc.n	8008596 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4413      	add	r3, r2
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	085b      	lsrs	r3, r3, #1
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	4413      	add	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e002      	b.n	800859c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	085b      	lsrs	r3, r3, #1
 800859a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	089b      	lsrs	r3, r3, #2
 80085a0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e4      	bne.n	8008572 <VL53L0X_isqrt+0x24>
	}

	return res;
 80085a8:	68fb      	ldr	r3, [r7, #12]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b086      	sub	sp, #24
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085be:	2300      	movs	r3, #0
 80085c0:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80085c2:	2200      	movs	r2, #0
 80085c4:	2183      	movs	r1, #131	; 0x83
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f002 fc12 	bl	800adf0 <VL53L0X_WrByte>
 80085cc:	4603      	mov	r3, r0
 80085ce:	461a      	mov	r2, r3
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80085d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d11c      	bne.n	8008618 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80085e2:	f107 030f 	add.w	r3, r7, #15
 80085e6:	461a      	mov	r2, r3
 80085e8:	2183      	movs	r1, #131	; 0x83
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f002 fb05 	bl	800abfa <VL53L0X_RdByte>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d109      	bne.n	800860e <VL53L0X_device_read_strobe+0x58>
 80085fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	3301      	adds	r3, #1
 8008606:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	2bc7      	cmp	r3, #199	; 0xc7
 800860c:	d9e9      	bls.n	80085e2 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2bc7      	cmp	r3, #199	; 0xc7
 8008612:	d901      	bls.n	8008618 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008614:	23f9      	movs	r3, #249	; 0xf9
 8008616:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008618:	2201      	movs	r2, #1
 800861a:	2183      	movs	r1, #131	; 0x83
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f002 fbe7 	bl	800adf0 <VL53L0X_WrByte>
 8008622:	4603      	mov	r3, r0
 8008624:	461a      	mov	r2, r3
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	4313      	orrs	r3, r2
 800862a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800862c:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b098      	sub	sp, #96	; 0x60
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008644:	2300      	movs	r3, #0
 8008646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008656:	2300      	movs	r3, #0
 8008658:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008668:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800866c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008680:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008688:	2b07      	cmp	r3, #7
 800868a:	f000 8408 	beq.w	8008e9e <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800868e:	2201      	movs	r2, #1
 8008690:	2180      	movs	r1, #128	; 0x80
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f002 fbac 	bl	800adf0 <VL53L0X_WrByte>
 8008698:	4603      	mov	r3, r0
 800869a:	461a      	mov	r2, r3
 800869c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086a0:	4313      	orrs	r3, r2
 80086a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80086a6:	2201      	movs	r2, #1
 80086a8:	21ff      	movs	r1, #255	; 0xff
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f002 fba0 	bl	800adf0 <VL53L0X_WrByte>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086b8:	4313      	orrs	r3, r2
 80086ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80086be:	2200      	movs	r2, #0
 80086c0:	2100      	movs	r1, #0
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f002 fb94 	bl	800adf0 <VL53L0X_WrByte>
 80086c8:	4603      	mov	r3, r0
 80086ca:	461a      	mov	r2, r3
 80086cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086d0:	4313      	orrs	r3, r2
 80086d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80086d6:	2206      	movs	r2, #6
 80086d8:	21ff      	movs	r1, #255	; 0xff
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f002 fb88 	bl	800adf0 <VL53L0X_WrByte>
 80086e0:	4603      	mov	r3, r0
 80086e2:	461a      	mov	r2, r3
 80086e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086e8:	4313      	orrs	r3, r2
 80086ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80086ee:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80086f2:	461a      	mov	r2, r3
 80086f4:	2183      	movs	r1, #131	; 0x83
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f002 fa7f 	bl	800abfa <VL53L0X_RdByte>
 80086fc:	4603      	mov	r3, r0
 80086fe:	461a      	mov	r2, r3
 8008700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008704:	4313      	orrs	r3, r2
 8008706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800870a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800870e:	f043 0304 	orr.w	r3, r3, #4
 8008712:	b2db      	uxtb	r3, r3
 8008714:	461a      	mov	r2, r3
 8008716:	2183      	movs	r1, #131	; 0x83
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f002 fb69 	bl	800adf0 <VL53L0X_WrByte>
 800871e:	4603      	mov	r3, r0
 8008720:	461a      	mov	r2, r3
 8008722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008726:	4313      	orrs	r3, r2
 8008728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800872c:	2207      	movs	r2, #7
 800872e:	21ff      	movs	r1, #255	; 0xff
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f002 fb5d 	bl	800adf0 <VL53L0X_WrByte>
 8008736:	4603      	mov	r3, r0
 8008738:	461a      	mov	r2, r3
 800873a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800873e:	4313      	orrs	r3, r2
 8008740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008744:	2201      	movs	r2, #1
 8008746:	2181      	movs	r1, #129	; 0x81
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f002 fb51 	bl	800adf0 <VL53L0X_WrByte>
 800874e:	4603      	mov	r3, r0
 8008750:	461a      	mov	r2, r3
 8008752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008756:	4313      	orrs	r3, r2
 8008758:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f002 fbc9 	bl	800aef4 <VL53L0X_PollingDelay>
 8008762:	4603      	mov	r3, r0
 8008764:	461a      	mov	r2, r3
 8008766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800876a:	4313      	orrs	r3, r2
 800876c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008770:	2201      	movs	r2, #1
 8008772:	2180      	movs	r1, #128	; 0x80
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f002 fb3b 	bl	800adf0 <VL53L0X_WrByte>
 800877a:	4603      	mov	r3, r0
 800877c:	461a      	mov	r2, r3
 800877e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008782:	4313      	orrs	r3, r2
 8008784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 8098 	beq.w	80088c4 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008794:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008798:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800879c:	2b00      	cmp	r3, #0
 800879e:	f040 8091 	bne.w	80088c4 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80087a2:	226b      	movs	r2, #107	; 0x6b
 80087a4:	2194      	movs	r1, #148	; 0x94
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f002 fb22 	bl	800adf0 <VL53L0X_WrByte>
 80087ac:	4603      	mov	r3, r0
 80087ae:	461a      	mov	r2, r3
 80087b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087b4:	4313      	orrs	r3, r2
 80087b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fefb 	bl	80085b6 <VL53L0X_device_read_strobe>
 80087c0:	4603      	mov	r3, r0
 80087c2:	461a      	mov	r2, r3
 80087c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087c8:	4313      	orrs	r3, r2
 80087ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80087ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087d2:	461a      	mov	r2, r3
 80087d4:	2190      	movs	r1, #144	; 0x90
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f002 face 	bl	800ad78 <VL53L0X_RdDWord>
 80087dc:	4603      	mov	r3, r0
 80087de:	461a      	mov	r2, r3
 80087e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087e4:	4313      	orrs	r3, r2
 80087e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	0a1b      	lsrs	r3, r3, #8
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80087f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fa:	0bdb      	lsrs	r3, r3, #15
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008806:	2224      	movs	r2, #36	; 0x24
 8008808:	2194      	movs	r1, #148	; 0x94
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f002 faf0 	bl	800adf0 <VL53L0X_WrByte>
 8008810:	4603      	mov	r3, r0
 8008812:	461a      	mov	r2, r3
 8008814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008818:	4313      	orrs	r3, r2
 800881a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff fec9 	bl	80085b6 <VL53L0X_device_read_strobe>
 8008824:	4603      	mov	r3, r0
 8008826:	461a      	mov	r2, r3
 8008828:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800882c:	4313      	orrs	r3, r2
 800882e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008832:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008836:	461a      	mov	r2, r3
 8008838:	2190      	movs	r1, #144	; 0x90
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f002 fa9c 	bl	800ad78 <VL53L0X_RdDWord>
 8008840:	4603      	mov	r3, r0
 8008842:	461a      	mov	r2, r3
 8008844:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008848:	4313      	orrs	r3, r2
 800884a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008850:	0e1b      	lsrs	r3, r3, #24
 8008852:	b2db      	uxtb	r3, r3
 8008854:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	0c1b      	lsrs	r3, r3, #16
 800885a:	b2db      	uxtb	r3, r3
 800885c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	0a1b      	lsrs	r3, r3, #8
 8008862:	b2db      	uxtb	r3, r3
 8008864:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	b2db      	uxtb	r3, r3
 800886a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800886c:	2225      	movs	r2, #37	; 0x25
 800886e:	2194      	movs	r1, #148	; 0x94
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f002 fabd 	bl	800adf0 <VL53L0X_WrByte>
 8008876:	4603      	mov	r3, r0
 8008878:	461a      	mov	r2, r3
 800887a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800887e:	4313      	orrs	r3, r2
 8008880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff fe96 	bl	80085b6 <VL53L0X_device_read_strobe>
 800888a:	4603      	mov	r3, r0
 800888c:	461a      	mov	r2, r3
 800888e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008892:	4313      	orrs	r3, r2
 8008894:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800889c:	461a      	mov	r2, r3
 800889e:	2190      	movs	r1, #144	; 0x90
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f002 fa69 	bl	800ad78 <VL53L0X_RdDWord>
 80088a6:	4603      	mov	r3, r0
 80088a8:	461a      	mov	r2, r3
 80088aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088ae:	4313      	orrs	r3, r2
 80088b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	0e1b      	lsrs	r3, r3, #24
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	0c1b      	lsrs	r3, r3, #16
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 8189 	beq.w	8008be2 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80088d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088d4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f040 8182 	bne.w	8008be2 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80088de:	2202      	movs	r2, #2
 80088e0:	2194      	movs	r1, #148	; 0x94
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f002 fa84 	bl	800adf0 <VL53L0X_WrByte>
 80088e8:	4603      	mov	r3, r0
 80088ea:	461a      	mov	r2, r3
 80088ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088f0:	4313      	orrs	r3, r2
 80088f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff fe5d 	bl	80085b6 <VL53L0X_device_read_strobe>
 80088fc:	4603      	mov	r3, r0
 80088fe:	461a      	mov	r2, r3
 8008900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008904:	4313      	orrs	r3, r2
 8008906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800890a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800890e:	461a      	mov	r2, r3
 8008910:	2190      	movs	r1, #144	; 0x90
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f002 f971 	bl	800abfa <VL53L0X_RdByte>
 8008918:	4603      	mov	r3, r0
 800891a:	461a      	mov	r2, r3
 800891c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008920:	4313      	orrs	r3, r2
 8008922:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008926:	227b      	movs	r2, #123	; 0x7b
 8008928:	2194      	movs	r1, #148	; 0x94
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f002 fa60 	bl	800adf0 <VL53L0X_WrByte>
 8008930:	4603      	mov	r3, r0
 8008932:	461a      	mov	r2, r3
 8008934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008938:	4313      	orrs	r3, r2
 800893a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff fe39 	bl	80085b6 <VL53L0X_device_read_strobe>
 8008944:	4603      	mov	r3, r0
 8008946:	461a      	mov	r2, r3
 8008948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800894c:	4313      	orrs	r3, r2
 800894e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008952:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008956:	461a      	mov	r2, r3
 8008958:	2190      	movs	r1, #144	; 0x90
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f002 f94d 	bl	800abfa <VL53L0X_RdByte>
 8008960:	4603      	mov	r3, r0
 8008962:	461a      	mov	r2, r3
 8008964:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008968:	4313      	orrs	r3, r2
 800896a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800896e:	2277      	movs	r2, #119	; 0x77
 8008970:	2194      	movs	r1, #148	; 0x94
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f002 fa3c 	bl	800adf0 <VL53L0X_WrByte>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008980:	4313      	orrs	r3, r2
 8008982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff fe15 	bl	80085b6 <VL53L0X_device_read_strobe>
 800898c:	4603      	mov	r3, r0
 800898e:	461a      	mov	r2, r3
 8008990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008994:	4313      	orrs	r3, r2
 8008996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800899a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800899e:	461a      	mov	r2, r3
 80089a0:	2190      	movs	r1, #144	; 0x90
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f002 f9e8 	bl	800ad78 <VL53L0X_RdDWord>
 80089a8:	4603      	mov	r3, r0
 80089aa:	461a      	mov	r2, r3
 80089ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b0:	4313      	orrs	r3, r2
 80089b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	0e5b      	lsrs	r3, r3, #25
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	0c9b      	lsrs	r3, r3, #18
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	0adb      	lsrs	r3, r3, #11
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	091b      	lsrs	r3, r3, #4
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008a00:	2278      	movs	r2, #120	; 0x78
 8008a02:	2194      	movs	r1, #148	; 0x94
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f002 f9f3 	bl	800adf0 <VL53L0X_WrByte>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a12:	4313      	orrs	r3, r2
 8008a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff fdcc 	bl	80085b6 <VL53L0X_device_read_strobe>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	461a      	mov	r2, r3
 8008a22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a26:	4313      	orrs	r3, r2
 8008a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a30:	461a      	mov	r2, r3
 8008a32:	2190      	movs	r1, #144	; 0x90
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f002 f99f 	bl	800ad78 <VL53L0X_RdDWord>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	0f5b      	lsrs	r3, r3, #29
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a52:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008a54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a58:	4413      	add	r3, r2
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	0d9b      	lsrs	r3, r3, #22
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	0bdb      	lsrs	r3, r3, #15
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	0a1b      	lsrs	r3, r3, #8
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	085b      	lsrs	r3, r3, #1
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	019b      	lsls	r3, r3, #6
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008aa8:	2279      	movs	r2, #121	; 0x79
 8008aaa:	2194      	movs	r1, #148	; 0x94
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f002 f99f 	bl	800adf0 <VL53L0X_WrByte>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aba:	4313      	orrs	r3, r2
 8008abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff fd78 	bl	80085b6 <VL53L0X_device_read_strobe>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	461a      	mov	r2, r3
 8008aca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ad4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ad8:	461a      	mov	r2, r3
 8008ada:	2190      	movs	r1, #144	; 0x90
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f002 f94b 	bl	800ad78 <VL53L0X_RdDWord>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aea:	4313      	orrs	r3, r2
 8008aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af2:	0e9b      	lsrs	r3, r3, #26
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afa:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008afc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b00:	4413      	add	r3, r2
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	0cdb      	lsrs	r3, r3, #19
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	0b1b      	lsrs	r3, r3, #12
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	095b      	lsrs	r3, r3, #5
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008b42:	227a      	movs	r2, #122	; 0x7a
 8008b44:	2194      	movs	r1, #148	; 0x94
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f002 f952 	bl	800adf0 <VL53L0X_WrByte>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b54:	4313      	orrs	r3, r2
 8008b56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff fd2b 	bl	80085b6 <VL53L0X_device_read_strobe>
 8008b60:	4603      	mov	r3, r0
 8008b62:	461a      	mov	r2, r3
 8008b64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b72:	461a      	mov	r2, r3
 8008b74:	2190      	movs	r1, #144	; 0x90
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f002 f8fe 	bl	800ad78 <VL53L0X_RdDWord>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b84:	4313      	orrs	r3, r2
 8008b86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	0f9b      	lsrs	r3, r3, #30
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b94:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008b96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b9a:	4413      	add	r3, r2
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	0ddb      	lsrs	r3, r3, #23
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	0c1b      	lsrs	r3, r3, #16
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbe:	0a5b      	lsrs	r3, r3, #9
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	089b      	lsrs	r3, r3, #2
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008be2:	78fb      	ldrb	r3, [r7, #3]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 80f1 	beq.w	8008dd0 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008bee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bf2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f040 80ea 	bne.w	8008dd0 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008bfc:	227b      	movs	r2, #123	; 0x7b
 8008bfe:	2194      	movs	r1, #148	; 0x94
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f002 f8f5 	bl	800adf0 <VL53L0X_WrByte>
 8008c06:	4603      	mov	r3, r0
 8008c08:	461a      	mov	r2, r3
 8008c0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff fcce 	bl	80085b6 <VL53L0X_device_read_strobe>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c22:	4313      	orrs	r3, r2
 8008c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	2190      	movs	r1, #144	; 0x90
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f002 f8a1 	bl	800ad78 <VL53L0X_RdDWord>
 8008c36:	4603      	mov	r3, r0
 8008c38:	461a      	mov	r2, r3
 8008c3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008c44:	227c      	movs	r2, #124	; 0x7c
 8008c46:	2194      	movs	r1, #148	; 0x94
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f002 f8d1 	bl	800adf0 <VL53L0X_WrByte>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	461a      	mov	r2, r3
 8008c52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c56:	4313      	orrs	r3, r2
 8008c58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff fcaa 	bl	80085b6 <VL53L0X_device_read_strobe>
 8008c62:	4603      	mov	r3, r0
 8008c64:	461a      	mov	r2, r3
 8008c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8008c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c74:	461a      	mov	r2, r3
 8008c76:	2190      	movs	r1, #144	; 0x90
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f002 f87d 	bl	800ad78 <VL53L0X_RdDWord>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	461a      	mov	r2, r3
 8008c82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c86:	4313      	orrs	r3, r2
 8008c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8008c8c:	2273      	movs	r2, #115	; 0x73
 8008c8e:	2194      	movs	r1, #148	; 0x94
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f002 f8ad 	bl	800adf0 <VL53L0X_WrByte>
 8008c96:	4603      	mov	r3, r0
 8008c98:	461a      	mov	r2, r3
 8008c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff fc86 	bl	80085b6 <VL53L0X_device_read_strobe>
 8008caa:	4603      	mov	r3, r0
 8008cac:	461a      	mov	r2, r3
 8008cae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008cb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	2190      	movs	r1, #144	; 0x90
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f002 f859 	bl	800ad78 <VL53L0X_RdDWord>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	461a      	mov	r2, r3
 8008cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd6:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008cdc:	2274      	movs	r2, #116	; 0x74
 8008cde:	2194      	movs	r1, #148	; 0x94
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f002 f885 	bl	800adf0 <VL53L0X_WrByte>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	461a      	mov	r2, r3
 8008cea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff fc5e 	bl	80085b6 <VL53L0X_device_read_strobe>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d02:	4313      	orrs	r3, r2
 8008d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	2190      	movs	r1, #144	; 0x90
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f002 f831 	bl	800ad78 <VL53L0X_RdDWord>
 8008d16:	4603      	mov	r3, r0
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008d28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008d2e:	2275      	movs	r2, #117	; 0x75
 8008d30:	2194      	movs	r1, #148	; 0x94
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f002 f85c 	bl	800adf0 <VL53L0X_WrByte>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d40:	4313      	orrs	r3, r2
 8008d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7ff fc35 	bl	80085b6 <VL53L0X_device_read_strobe>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d54:	4313      	orrs	r3, r2
 8008d56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008d5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d5e:	461a      	mov	r2, r3
 8008d60:	2190      	movs	r1, #144	; 0x90
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f002 f808 	bl	800ad78 <VL53L0X_RdDWord>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d70:	4313      	orrs	r3, r2
 8008d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8008d7e:	2276      	movs	r2, #118	; 0x76
 8008d80:	2194      	movs	r1, #148	; 0x94
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f002 f834 	bl	800adf0 <VL53L0X_WrByte>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d90:	4313      	orrs	r3, r2
 8008d92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff fc0d 	bl	80085b6 <VL53L0X_device_read_strobe>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008da4:	4313      	orrs	r3, r2
 8008da6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008daa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dae:	461a      	mov	r2, r3
 8008db0:	2190      	movs	r1, #144	; 0x90
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 ffe0 	bl	800ad78 <VL53L0X_RdDWord>
 8008db8:	4603      	mov	r3, r0
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc8:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008dca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2181      	movs	r1, #129	; 0x81
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f002 f80b 	bl	800adf0 <VL53L0X_WrByte>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	461a      	mov	r2, r3
 8008dde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008de2:	4313      	orrs	r3, r2
 8008de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008de8:	2206      	movs	r2, #6
 8008dea:	21ff      	movs	r1, #255	; 0xff
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 ffff 	bl	800adf0 <VL53L0X_WrByte>
 8008df2:	4603      	mov	r3, r0
 8008df4:	461a      	mov	r2, r3
 8008df6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008e00:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008e04:	461a      	mov	r2, r3
 8008e06:	2183      	movs	r1, #131	; 0x83
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 fef6 	bl	800abfa <VL53L0X_RdByte>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	461a      	mov	r2, r3
 8008e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e16:	4313      	orrs	r3, r2
 8008e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008e1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e20:	f023 0304 	bic.w	r3, r3, #4
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	461a      	mov	r2, r3
 8008e28:	2183      	movs	r1, #131	; 0x83
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f001 ffe0 	bl	800adf0 <VL53L0X_WrByte>
 8008e30:	4603      	mov	r3, r0
 8008e32:	461a      	mov	r2, r3
 8008e34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008e3e:	2201      	movs	r2, #1
 8008e40:	21ff      	movs	r1, #255	; 0xff
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 ffd4 	bl	800adf0 <VL53L0X_WrByte>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e50:	4313      	orrs	r3, r2
 8008e52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008e56:	2201      	movs	r2, #1
 8008e58:	2100      	movs	r1, #0
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 ffc8 	bl	800adf0 <VL53L0X_WrByte>
 8008e60:	4603      	mov	r3, r0
 8008e62:	461a      	mov	r2, r3
 8008e64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008e6e:	2200      	movs	r2, #0
 8008e70:	21ff      	movs	r1, #255	; 0xff
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f001 ffbc 	bl	800adf0 <VL53L0X_WrByte>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e80:	4313      	orrs	r3, r2
 8008e82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008e86:	2200      	movs	r2, #0
 8008e88:	2180      	movs	r1, #128	; 0x80
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f001 ffb0 	bl	800adf0 <VL53L0X_WrByte>
 8008e90:	4603      	mov	r3, r0
 8008e92:	461a      	mov	r2, r3
 8008e94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008e9e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f040 808f 	bne.w	8008fc6 <VL53L0X_get_info_from_device+0x98e>
 8008ea8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008eac:	2b07      	cmp	r3, #7
 8008eae:	f000 808a 	beq.w	8008fc6 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8008eb2:	78fb      	ldrb	r3, [r7, #3]
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d024      	beq.n	8008f06 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008ebc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ec0:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d11e      	bne.n	8008f06 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008ece:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008ed8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008edc:	2300      	movs	r3, #0
 8008ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ee0:	e00e      	b.n	8008f00 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008ee2:	f107 0208 	add.w	r2, r7, #8
 8008ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee8:	4413      	add	r3, r2
 8008eea:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008ef6:	460a      	mov	r2, r1
 8008ef8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008efc:	3301      	adds	r3, #1
 8008efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f02:	2b05      	cmp	r3, #5
 8008f04:	dded      	ble.n	8008ee2 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008f06:	78fb      	ldrb	r3, [r7, #3]
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d018      	beq.n	8008f42 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008f10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f14:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d112      	bne.n	8008f42 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f1c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f26:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	33f3      	adds	r3, #243	; 0xf3
 8008f34:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008f36:	f107 0310 	add.w	r3, r7, #16
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f3e:	f00a fad2 	bl	80134e6 <strcpy>

		}

		if (((option & 4) == 4) &&
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d030      	beq.n	8008fae <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008f4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f50:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d12a      	bne.n	8008fae <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f6a:	025b      	lsls	r3, r3, #9
 8008f6c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f72:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d011      	beq.n	8008fa6 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008f82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f90:	fb02 f303 	mul.w	r3, r2, r3
 8008f94:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008f96:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008f9a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008f9e:	425b      	negs	r3, r3
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008fa6:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008fae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008fbc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008fc6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3760      	adds	r7, #96	; 0x60
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b087      	sub	sp, #28
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008fde:	f240 6277 	movw	r2, #1655	; 0x677
 8008fe2:	f04f 0300 	mov.w	r3, #0
 8008fe6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8008fea:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008fee:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008ff0:	78fb      	ldrb	r3, [r7, #3]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	fb02 f303 	mul.w	r3, r2, r3
 8008ffe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009000:	68bb      	ldr	r3, [r7, #8]
}
 8009002:	4618      	mov	r0, r3
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800900e:	b480      	push	{r7}
 8009010:	b087      	sub	sp, #28
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d017      	beq.n	8009058 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	3b01      	subs	r3, #1
 800902c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800902e:	e005      	b.n	800903c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009036:	89fb      	ldrh	r3, [r7, #14]
 8009038:	3301      	adds	r3, #1
 800903a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1f4      	bne.n	8009030 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009046:	89fb      	ldrh	r3, [r7, #14]
 8009048:	021b      	lsls	r3, r3, #8
 800904a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	b29b      	uxth	r3, r3
 8009050:	b2db      	uxtb	r3, r3
 8009052:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009054:	4413      	add	r3, r2
 8009056:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009058:	8afb      	ldrh	r3, [r7, #22]

}
 800905a:	4618      	mov	r0, r3
 800905c:	371c      	adds	r7, #28
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009066:	b480      	push	{r7}
 8009068:	b085      	sub	sp, #20
 800906a:	af00      	add	r7, sp, #0
 800906c:	4603      	mov	r3, r0
 800906e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009074:	88fb      	ldrh	r3, [r7, #6]
 8009076:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009078:	88fa      	ldrh	r2, [r7, #6]
 800907a:	0a12      	lsrs	r2, r2, #8
 800907c:	b292      	uxth	r2, r2
 800907e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009080:	3301      	adds	r3, #1
 8009082:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009084:	68fb      	ldr	r3, [r7, #12]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
	...

08009094 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	4613      	mov	r3, r2
 80090a0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	4619      	mov	r1, r3
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f7ff ff91 	bl	8008fd2 <VL53L0X_calc_macro_period_ps>
 80090b0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80090b8:	4a0a      	ldr	r2, [pc, #40]	; (80090e4 <VL53L0X_calc_timeout_mclks+0x50>)
 80090ba:	fba2 2303 	umull	r2, r3, r2, r3
 80090be:	099b      	lsrs	r3, r3, #6
 80090c0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090c8:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	085b      	lsrs	r3, r3, #1
 80090d0:	441a      	add	r2, r3
	timeout_period_mclks =
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d8:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 80090da:	69fb      	ldr	r3, [r7, #28]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3720      	adds	r7, #32
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	10624dd3 	.word	0x10624dd3

080090e8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	807b      	strh	r3, [r7, #2]
 80090f4:	4613      	mov	r3, r2
 80090f6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80090fc:	787b      	ldrb	r3, [r7, #1]
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7ff ff66 	bl	8008fd2 <VL53L0X_calc_macro_period_ps>
 8009106:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800910e:	4a0b      	ldr	r2, [pc, #44]	; (800913c <VL53L0X_calc_timeout_us+0x54>)
 8009110:	fba2 2303 	umull	r2, r3, r2, r3
 8009114:	099b      	lsrs	r3, r3, #6
 8009116:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 8009118:	887b      	ldrh	r3, [r7, #2]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	085b      	lsrs	r3, r3, #1
 8009124:	4413      	add	r3, r2
	actual_timeout_period_us =
 8009126:	4a05      	ldr	r2, [pc, #20]	; (800913c <VL53L0X_calc_timeout_us+0x54>)
 8009128:	fba2 2303 	umull	r2, r3, r2, r3
 800912c:	099b      	lsrs	r3, r3, #6
 800912e:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009130:	697b      	ldr	r3, [r7, #20]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	10624dd3 	.word	0x10624dd3

08009140 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08c      	sub	sp, #48	; 0x30
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	460b      	mov	r3, r1
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800914e:	2300      	movs	r3, #0
 8009150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009154:	2300      	movs	r3, #0
 8009156:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800915a:	2300      	movs	r3, #0
 800915c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <get_sequence_step_timeout+0x38>
 800916c:	7afb      	ldrb	r3, [r7, #11]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d002      	beq.n	8009178 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009172:	7afb      	ldrb	r3, [r7, #11]
 8009174:	2b02      	cmp	r3, #2
 8009176:	d128      	bne.n	80091ca <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009178:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800917c:	461a      	mov	r2, r3
 800917e:	2100      	movs	r1, #0
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f7fd fa73 	bl	800666c <VL53L0X_GetVcselPulsePeriod>
 8009186:	4603      	mov	r3, r0
 8009188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800918c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009190:	2b00      	cmp	r3, #0
 8009192:	d109      	bne.n	80091a8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009194:	f107 0320 	add.w	r3, r7, #32
 8009198:	461a      	mov	r2, r3
 800919a:	2146      	movs	r1, #70	; 0x46
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f001 fd2c 	bl	800abfa <VL53L0X_RdByte>
 80091a2:	4603      	mov	r3, r0
 80091a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80091a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff ff59 	bl	8009066 <VL53L0X_decode_timeout>
 80091b4:	4603      	mov	r3, r0
 80091b6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80091b8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80091bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091be:	4619      	mov	r1, r3
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff ff91 	bl	80090e8 <VL53L0X_calc_timeout_us>
 80091c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80091c8:	e092      	b.n	80092f0 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d135      	bne.n	800923c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80091d0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80091d4:	461a      	mov	r2, r3
 80091d6:	2100      	movs	r1, #0
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f7fd fa47 	bl	800666c <VL53L0X_GetVcselPulsePeriod>
 80091de:	4603      	mov	r3, r0
 80091e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80091e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f040 8081 	bne.w	80092f0 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80091ee:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80091f2:	461a      	mov	r2, r3
 80091f4:	2100      	movs	r1, #0
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f7fd fa38 	bl	800666c <VL53L0X_GetVcselPulsePeriod>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009202:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800920a:	f107 031e 	add.w	r3, r7, #30
 800920e:	461a      	mov	r2, r3
 8009210:	2151      	movs	r1, #81	; 0x51
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f001 fd78 	bl	800ad08 <VL53L0X_RdWord>
 8009218:	4603      	mov	r3, r0
 800921a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800921e:	8bfb      	ldrh	r3, [r7, #30]
 8009220:	4618      	mov	r0, r3
 8009222:	f7ff ff20 	bl	8009066 <VL53L0X_decode_timeout>
 8009226:	4603      	mov	r3, r0
 8009228:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800922a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800922e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009230:	4619      	mov	r1, r3
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f7ff ff58 	bl	80090e8 <VL53L0X_calc_timeout_us>
 8009238:	62b8      	str	r0, [r7, #40]	; 0x28
 800923a:	e059      	b.n	80092f0 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800923c:	7afb      	ldrb	r3, [r7, #11]
 800923e:	2b04      	cmp	r3, #4
 8009240:	d156      	bne.n	80092f0 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009242:	f107 0314 	add.w	r3, r7, #20
 8009246:	4619      	mov	r1, r3
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f7fd fb1b 	bl	8006884 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01d      	beq.n	8009294 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009258:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800925c:	461a      	mov	r2, r3
 800925e:	2100      	movs	r1, #0
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f7fd fa03 	bl	800666c <VL53L0X_GetVcselPulsePeriod>
 8009266:	4603      	mov	r3, r0
 8009268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800926c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10f      	bne.n	8009294 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009274:	f107 031e 	add.w	r3, r7, #30
 8009278:	461a      	mov	r2, r3
 800927a:	2151      	movs	r1, #81	; 0x51
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f001 fd43 	bl	800ad08 <VL53L0X_RdWord>
 8009282:	4603      	mov	r3, r0
 8009284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009288:	8bfb      	ldrh	r3, [r7, #30]
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff feeb 	bl	8009066 <VL53L0X_decode_timeout>
 8009290:	4603      	mov	r3, r0
 8009292:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009294:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009298:	2b00      	cmp	r3, #0
 800929a:	d109      	bne.n	80092b0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800929c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80092a0:	461a      	mov	r2, r3
 80092a2:	2101      	movs	r1, #1
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f7fd f9e1 	bl	800666c <VL53L0X_GetVcselPulsePeriod>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80092b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10f      	bne.n	80092d8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80092b8:	f107 031c 	add.w	r3, r7, #28
 80092bc:	461a      	mov	r2, r3
 80092be:	2171      	movs	r1, #113	; 0x71
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f001 fd21 	bl	800ad08 <VL53L0X_RdWord>
 80092c6:	4603      	mov	r3, r0
 80092c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80092cc:	8bbb      	ldrh	r3, [r7, #28]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7ff fec9 	bl	8009066 <VL53L0X_decode_timeout>
 80092d4:	4603      	mov	r3, r0
 80092d6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80092d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80092e0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80092e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092e6:	4619      	mov	r1, r3
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f7ff fefd 	bl	80090e8 <VL53L0X_calc_timeout_us>
 80092ee:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092f4:	601a      	str	r2, [r3, #0]

	return Status;
 80092f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3730      	adds	r7, #48	; 0x30
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b08a      	sub	sp, #40	; 0x28
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	460b      	mov	r3, r1
 800930c:	607a      	str	r2, [r7, #4]
 800930e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009310:	2300      	movs	r3, #0
 8009312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009316:	7afb      	ldrb	r3, [r7, #11]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <set_sequence_step_timeout+0x26>
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d002      	beq.n	8009328 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009322:	7afb      	ldrb	r3, [r7, #11]
 8009324:	2b02      	cmp	r3, #2
 8009326:	d138      	bne.n	800939a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009328:	f107 031d 	add.w	r3, r7, #29
 800932c:	461a      	mov	r2, r3
 800932e:	2100      	movs	r1, #0
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f7fd f99b 	bl	800666c <VL53L0X_GetVcselPulsePeriod>
 8009336:	4603      	mov	r3, r0
 8009338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800933c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009340:	2b00      	cmp	r3, #0
 8009342:	d11a      	bne.n	800937a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009344:	7f7b      	ldrb	r3, [r7, #29]
 8009346:	461a      	mov	r2, r3
 8009348:	6879      	ldr	r1, [r7, #4]
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7ff fea2 	bl	8009094 <VL53L0X_calc_timeout_mclks>
 8009350:	4603      	mov	r3, r0
 8009352:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009354:	8bfb      	ldrh	r3, [r7, #30]
 8009356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800935a:	d903      	bls.n	8009364 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800935c:	23ff      	movs	r3, #255	; 0xff
 800935e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009362:	e004      	b.n	800936e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009364:	8bfb      	ldrh	r3, [r7, #30]
 8009366:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009368:	3b01      	subs	r3, #1
 800936a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800936e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009372:	b29a      	uxth	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800937a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800937e:	2b00      	cmp	r3, #0
 8009380:	f040 80ad 	bne.w	80094de <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 8009384:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009388:	461a      	mov	r2, r3
 800938a:	2146      	movs	r1, #70	; 0x46
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f001 fd2f 	bl	800adf0 <VL53L0X_WrByte>
 8009392:	4603      	mov	r3, r0
 8009394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009398:	e0a1      	b.n	80094de <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800939a:	7afb      	ldrb	r3, [r7, #11]
 800939c:	2b03      	cmp	r3, #3
 800939e:	d135      	bne.n	800940c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80093a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d11b      	bne.n	80093e0 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80093a8:	f107 031d 	add.w	r3, r7, #29
 80093ac:	461a      	mov	r2, r3
 80093ae:	2100      	movs	r1, #0
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f7fd f95b 	bl	800666c <VL53L0X_GetVcselPulsePeriod>
 80093b6:	4603      	mov	r3, r0
 80093b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80093bc:	7f7b      	ldrb	r3, [r7, #29]
 80093be:	461a      	mov	r2, r3
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f7ff fe66 	bl	8009094 <VL53L0X_calc_timeout_mclks>
 80093c8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80093ca:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80093cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff fe1d 	bl	800900e <VL53L0X_encode_timeout>
 80093d4:	4603      	mov	r3, r0
 80093d6:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093d8:	8b7a      	ldrh	r2, [r7, #26]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80093e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d108      	bne.n	80093fa <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80093e8:	8b7b      	ldrh	r3, [r7, #26]
 80093ea:	461a      	mov	r2, r3
 80093ec:	2151      	movs	r1, #81	; 0x51
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f001 fd22 	bl	800ae38 <VL53L0X_WrWord>
 80093f4:	4603      	mov	r3, r0
 80093f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80093fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d16d      	bne.n	80094de <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800940a:	e068      	b.n	80094de <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800940c:	7afb      	ldrb	r3, [r7, #11]
 800940e:	2b04      	cmp	r3, #4
 8009410:	d162      	bne.n	80094d8 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009412:	f107 0314 	add.w	r3, r7, #20
 8009416:	4619      	mov	r1, r3
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f7fd fa33 	bl	8006884 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01d      	beq.n	8009464 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009428:	f107 031d 	add.w	r3, r7, #29
 800942c:	461a      	mov	r2, r3
 800942e:	2100      	movs	r1, #0
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f7fd f91b 	bl	800666c <VL53L0X_GetVcselPulsePeriod>
 8009436:	4603      	mov	r3, r0
 8009438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800943c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10f      	bne.n	8009464 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009444:	f107 031a 	add.w	r3, r7, #26
 8009448:	461a      	mov	r2, r3
 800944a:	2151      	movs	r1, #81	; 0x51
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f001 fc5b 	bl	800ad08 <VL53L0X_RdWord>
 8009452:	4603      	mov	r3, r0
 8009454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009458:	8b7b      	ldrh	r3, [r7, #26]
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff fe03 	bl	8009066 <VL53L0X_decode_timeout>
 8009460:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009462:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009468:	2b00      	cmp	r3, #0
 800946a:	d109      	bne.n	8009480 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800946c:	f107 031d 	add.w	r3, r7, #29
 8009470:	461a      	mov	r2, r3
 8009472:	2101      	movs	r1, #1
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f7fd f8f9 	bl	800666c <VL53L0X_GetVcselPulsePeriod>
 800947a:	4603      	mov	r3, r0
 800947c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009484:	2b00      	cmp	r3, #0
 8009486:	d12a      	bne.n	80094de <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009488:	7f7b      	ldrb	r3, [r7, #29]
 800948a:	461a      	mov	r2, r3
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f7ff fe00 	bl	8009094 <VL53L0X_calc_timeout_mclks>
 8009494:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8009496:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009498:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800949a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800949c:	4413      	add	r3, r2
 800949e:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80094a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff fdb3 	bl	800900e <VL53L0X_encode_timeout>
 80094a8:	4603      	mov	r3, r0
 80094aa:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 80094ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d108      	bne.n	80094c6 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80094b4:	8c3b      	ldrh	r3, [r7, #32]
 80094b6:	461a      	mov	r2, r3
 80094b8:	2171      	movs	r1, #113	; 0x71
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f001 fcbc 	bl	800ae38 <VL53L0X_WrWord>
 80094c0:	4603      	mov	r3, r0
 80094c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80094c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d107      	bne.n	80094de <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80094d6:	e002      	b.n	80094de <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80094d8:	23fc      	movs	r3, #252	; 0xfc
 80094da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80094de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3728      	adds	r7, #40	; 0x28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b08a      	sub	sp, #40	; 0x28
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	460b      	mov	r3, r1
 80094f4:	70fb      	strb	r3, [r7, #3]
 80094f6:	4613      	mov	r3, r2
 80094f8:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094fa:	2300      	movs	r3, #0
 80094fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009500:	230c      	movs	r3, #12
 8009502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009506:	2312      	movs	r3, #18
 8009508:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800950c:	2308      	movs	r3, #8
 800950e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009512:	230e      	movs	r3, #14
 8009514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800951c:	78bb      	ldrb	r3, [r7, #2]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	d003      	beq.n	8009530 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009528:	23fc      	movs	r3, #252	; 0xfc
 800952a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800952e:	e020      	b.n	8009572 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10d      	bne.n	8009552 <VL53L0X_set_vcsel_pulse_period+0x68>
 8009536:	78ba      	ldrb	r2, [r7, #2]
 8009538:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800953c:	429a      	cmp	r2, r3
 800953e:	d304      	bcc.n	800954a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009540:	78ba      	ldrb	r2, [r7, #2]
 8009542:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009546:	429a      	cmp	r2, r3
 8009548:	d903      	bls.n	8009552 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800954a:	23fc      	movs	r3, #252	; 0xfc
 800954c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009550:	e00f      	b.n	8009572 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d10c      	bne.n	8009572 <VL53L0X_set_vcsel_pulse_period+0x88>
 8009558:	78ba      	ldrb	r2, [r7, #2]
 800955a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800955e:	429a      	cmp	r2, r3
 8009560:	d304      	bcc.n	800956c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8009562:	78ba      	ldrb	r2, [r7, #2]
 8009564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009568:	429a      	cmp	r2, r3
 800956a:	d902      	bls.n	8009572 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800956c:	23fc      	movs	r3, #252	; 0xfc
 800956e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8009572:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800957a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800957e:	e239      	b.n	80099f4 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d150      	bne.n	8009628 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009586:	78bb      	ldrb	r3, [r7, #2]
 8009588:	2b0c      	cmp	r3, #12
 800958a:	d110      	bne.n	80095ae <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800958c:	2218      	movs	r2, #24
 800958e:	2157      	movs	r1, #87	; 0x57
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f001 fc2d 	bl	800adf0 <VL53L0X_WrByte>
 8009596:	4603      	mov	r3, r0
 8009598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800959c:	2208      	movs	r2, #8
 800959e:	2156      	movs	r1, #86	; 0x56
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 fc25 	bl	800adf0 <VL53L0X_WrByte>
 80095a6:	4603      	mov	r3, r0
 80095a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095ac:	e17f      	b.n	80098ae <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80095ae:	78bb      	ldrb	r3, [r7, #2]
 80095b0:	2b0e      	cmp	r3, #14
 80095b2:	d110      	bne.n	80095d6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80095b4:	2230      	movs	r2, #48	; 0x30
 80095b6:	2157      	movs	r1, #87	; 0x57
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 fc19 	bl	800adf0 <VL53L0X_WrByte>
 80095be:	4603      	mov	r3, r0
 80095c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80095c4:	2208      	movs	r2, #8
 80095c6:	2156      	movs	r1, #86	; 0x56
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f001 fc11 	bl	800adf0 <VL53L0X_WrByte>
 80095ce:	4603      	mov	r3, r0
 80095d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095d4:	e16b      	b.n	80098ae <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80095d6:	78bb      	ldrb	r3, [r7, #2]
 80095d8:	2b10      	cmp	r3, #16
 80095da:	d110      	bne.n	80095fe <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80095dc:	2240      	movs	r2, #64	; 0x40
 80095de:	2157      	movs	r1, #87	; 0x57
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 fc05 	bl	800adf0 <VL53L0X_WrByte>
 80095e6:	4603      	mov	r3, r0
 80095e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80095ec:	2208      	movs	r2, #8
 80095ee:	2156      	movs	r1, #86	; 0x56
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 fbfd 	bl	800adf0 <VL53L0X_WrByte>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095fc:	e157      	b.n	80098ae <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80095fe:	78bb      	ldrb	r3, [r7, #2]
 8009600:	2b12      	cmp	r3, #18
 8009602:	f040 8154 	bne.w	80098ae <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009606:	2250      	movs	r2, #80	; 0x50
 8009608:	2157      	movs	r1, #87	; 0x57
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 fbf0 	bl	800adf0 <VL53L0X_WrByte>
 8009610:	4603      	mov	r3, r0
 8009612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009616:	2208      	movs	r2, #8
 8009618:	2156      	movs	r1, #86	; 0x56
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 fbe8 	bl	800adf0 <VL53L0X_WrByte>
 8009620:	4603      	mov	r3, r0
 8009622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009626:	e142      	b.n	80098ae <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	2b01      	cmp	r3, #1
 800962c:	f040 813f 	bne.w	80098ae <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009630:	78bb      	ldrb	r3, [r7, #2]
 8009632:	2b08      	cmp	r3, #8
 8009634:	d14c      	bne.n	80096d0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009636:	2210      	movs	r2, #16
 8009638:	2148      	movs	r1, #72	; 0x48
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 fbd8 	bl	800adf0 <VL53L0X_WrByte>
 8009640:	4603      	mov	r3, r0
 8009642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009646:	2208      	movs	r2, #8
 8009648:	2147      	movs	r1, #71	; 0x47
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 fbd0 	bl	800adf0 <VL53L0X_WrByte>
 8009650:	4603      	mov	r3, r0
 8009652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009656:	2202      	movs	r2, #2
 8009658:	2132      	movs	r1, #50	; 0x32
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 fbc8 	bl	800adf0 <VL53L0X_WrByte>
 8009660:	4603      	mov	r3, r0
 8009662:	461a      	mov	r2, r3
 8009664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009668:	4313      	orrs	r3, r2
 800966a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800966e:	220c      	movs	r2, #12
 8009670:	2130      	movs	r1, #48	; 0x30
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 fbbc 	bl	800adf0 <VL53L0X_WrByte>
 8009678:	4603      	mov	r3, r0
 800967a:	461a      	mov	r2, r3
 800967c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009680:	4313      	orrs	r3, r2
 8009682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009686:	2201      	movs	r2, #1
 8009688:	21ff      	movs	r1, #255	; 0xff
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 fbb0 	bl	800adf0 <VL53L0X_WrByte>
 8009690:	4603      	mov	r3, r0
 8009692:	461a      	mov	r2, r3
 8009694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009698:	4313      	orrs	r3, r2
 800969a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800969e:	2230      	movs	r2, #48	; 0x30
 80096a0:	2130      	movs	r1, #48	; 0x30
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f001 fba4 	bl	800adf0 <VL53L0X_WrByte>
 80096a8:	4603      	mov	r3, r0
 80096aa:	461a      	mov	r2, r3
 80096ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096b0:	4313      	orrs	r3, r2
 80096b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80096b6:	2200      	movs	r2, #0
 80096b8:	21ff      	movs	r1, #255	; 0xff
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 fb98 	bl	800adf0 <VL53L0X_WrByte>
 80096c0:	4603      	mov	r3, r0
 80096c2:	461a      	mov	r2, r3
 80096c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c8:	4313      	orrs	r3, r2
 80096ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096ce:	e0ee      	b.n	80098ae <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80096d0:	78bb      	ldrb	r3, [r7, #2]
 80096d2:	2b0a      	cmp	r3, #10
 80096d4:	d14c      	bne.n	8009770 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80096d6:	2228      	movs	r2, #40	; 0x28
 80096d8:	2148      	movs	r1, #72	; 0x48
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 fb88 	bl	800adf0 <VL53L0X_WrByte>
 80096e0:	4603      	mov	r3, r0
 80096e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80096e6:	2208      	movs	r2, #8
 80096e8:	2147      	movs	r1, #71	; 0x47
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 fb80 	bl	800adf0 <VL53L0X_WrByte>
 80096f0:	4603      	mov	r3, r0
 80096f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80096f6:	2203      	movs	r2, #3
 80096f8:	2132      	movs	r1, #50	; 0x32
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 fb78 	bl	800adf0 <VL53L0X_WrByte>
 8009700:	4603      	mov	r3, r0
 8009702:	461a      	mov	r2, r3
 8009704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009708:	4313      	orrs	r3, r2
 800970a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800970e:	2209      	movs	r2, #9
 8009710:	2130      	movs	r1, #48	; 0x30
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f001 fb6c 	bl	800adf0 <VL53L0X_WrByte>
 8009718:	4603      	mov	r3, r0
 800971a:	461a      	mov	r2, r3
 800971c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009720:	4313      	orrs	r3, r2
 8009722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009726:	2201      	movs	r2, #1
 8009728:	21ff      	movs	r1, #255	; 0xff
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f001 fb60 	bl	800adf0 <VL53L0X_WrByte>
 8009730:	4603      	mov	r3, r0
 8009732:	461a      	mov	r2, r3
 8009734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009738:	4313      	orrs	r3, r2
 800973a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800973e:	2220      	movs	r2, #32
 8009740:	2130      	movs	r1, #48	; 0x30
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 fb54 	bl	800adf0 <VL53L0X_WrByte>
 8009748:	4603      	mov	r3, r0
 800974a:	461a      	mov	r2, r3
 800974c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009750:	4313      	orrs	r3, r2
 8009752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009756:	2200      	movs	r2, #0
 8009758:	21ff      	movs	r1, #255	; 0xff
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f001 fb48 	bl	800adf0 <VL53L0X_WrByte>
 8009760:	4603      	mov	r3, r0
 8009762:	461a      	mov	r2, r3
 8009764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009768:	4313      	orrs	r3, r2
 800976a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800976e:	e09e      	b.n	80098ae <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009770:	78bb      	ldrb	r3, [r7, #2]
 8009772:	2b0c      	cmp	r3, #12
 8009774:	d14c      	bne.n	8009810 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009776:	2238      	movs	r2, #56	; 0x38
 8009778:	2148      	movs	r1, #72	; 0x48
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 fb38 	bl	800adf0 <VL53L0X_WrByte>
 8009780:	4603      	mov	r3, r0
 8009782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009786:	2208      	movs	r2, #8
 8009788:	2147      	movs	r1, #71	; 0x47
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 fb30 	bl	800adf0 <VL53L0X_WrByte>
 8009790:	4603      	mov	r3, r0
 8009792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009796:	2203      	movs	r2, #3
 8009798:	2132      	movs	r1, #50	; 0x32
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f001 fb28 	bl	800adf0 <VL53L0X_WrByte>
 80097a0:	4603      	mov	r3, r0
 80097a2:	461a      	mov	r2, r3
 80097a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097a8:	4313      	orrs	r3, r2
 80097aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80097ae:	2208      	movs	r2, #8
 80097b0:	2130      	movs	r1, #48	; 0x30
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 fb1c 	bl	800adf0 <VL53L0X_WrByte>
 80097b8:	4603      	mov	r3, r0
 80097ba:	461a      	mov	r2, r3
 80097bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097c0:	4313      	orrs	r3, r2
 80097c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80097c6:	2201      	movs	r2, #1
 80097c8:	21ff      	movs	r1, #255	; 0xff
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 fb10 	bl	800adf0 <VL53L0X_WrByte>
 80097d0:	4603      	mov	r3, r0
 80097d2:	461a      	mov	r2, r3
 80097d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097d8:	4313      	orrs	r3, r2
 80097da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80097de:	2220      	movs	r2, #32
 80097e0:	2130      	movs	r1, #48	; 0x30
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f001 fb04 	bl	800adf0 <VL53L0X_WrByte>
 80097e8:	4603      	mov	r3, r0
 80097ea:	461a      	mov	r2, r3
 80097ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097f0:	4313      	orrs	r3, r2
 80097f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80097f6:	2200      	movs	r2, #0
 80097f8:	21ff      	movs	r1, #255	; 0xff
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f001 faf8 	bl	800adf0 <VL53L0X_WrByte>
 8009800:	4603      	mov	r3, r0
 8009802:	461a      	mov	r2, r3
 8009804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009808:	4313      	orrs	r3, r2
 800980a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800980e:	e04e      	b.n	80098ae <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009810:	78bb      	ldrb	r3, [r7, #2]
 8009812:	2b0e      	cmp	r3, #14
 8009814:	d14b      	bne.n	80098ae <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009816:	2248      	movs	r2, #72	; 0x48
 8009818:	2148      	movs	r1, #72	; 0x48
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 fae8 	bl	800adf0 <VL53L0X_WrByte>
 8009820:	4603      	mov	r3, r0
 8009822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009826:	2208      	movs	r2, #8
 8009828:	2147      	movs	r1, #71	; 0x47
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 fae0 	bl	800adf0 <VL53L0X_WrByte>
 8009830:	4603      	mov	r3, r0
 8009832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009836:	2203      	movs	r2, #3
 8009838:	2132      	movs	r1, #50	; 0x32
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f001 fad8 	bl	800adf0 <VL53L0X_WrByte>
 8009840:	4603      	mov	r3, r0
 8009842:	461a      	mov	r2, r3
 8009844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009848:	4313      	orrs	r3, r2
 800984a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800984e:	2207      	movs	r2, #7
 8009850:	2130      	movs	r1, #48	; 0x30
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f001 facc 	bl	800adf0 <VL53L0X_WrByte>
 8009858:	4603      	mov	r3, r0
 800985a:	461a      	mov	r2, r3
 800985c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009860:	4313      	orrs	r3, r2
 8009862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009866:	2201      	movs	r2, #1
 8009868:	21ff      	movs	r1, #255	; 0xff
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 fac0 	bl	800adf0 <VL53L0X_WrByte>
 8009870:	4603      	mov	r3, r0
 8009872:	461a      	mov	r2, r3
 8009874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009878:	4313      	orrs	r3, r2
 800987a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800987e:	2220      	movs	r2, #32
 8009880:	2130      	movs	r1, #48	; 0x30
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f001 fab4 	bl	800adf0 <VL53L0X_WrByte>
 8009888:	4603      	mov	r3, r0
 800988a:	461a      	mov	r2, r3
 800988c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009890:	4313      	orrs	r3, r2
 8009892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009896:	2200      	movs	r2, #0
 8009898:	21ff      	movs	r1, #255	; 0xff
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f001 faa8 	bl	800adf0 <VL53L0X_WrByte>
 80098a0:	4603      	mov	r3, r0
 80098a2:	461a      	mov	r2, r3
 80098a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098a8:	4313      	orrs	r3, r2
 80098aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80098ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d17f      	bne.n	80099b6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80098b6:	78bb      	ldrb	r3, [r7, #2]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fe fe35 	bl	8008528 <VL53L0X_encode_vcsel_period>
 80098be:	4603      	mov	r3, r0
 80098c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d002      	beq.n	80098d0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d045      	beq.n	800995a <VL53L0X_set_vcsel_pulse_period+0x470>
 80098ce:	e06e      	b.n	80099ae <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80098d0:	f107 0314 	add.w	r3, r7, #20
 80098d4:	461a      	mov	r2, r3
 80098d6:	2103      	movs	r1, #3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff fc31 	bl	8009140 <get_sequence_step_timeout>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80098e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d109      	bne.n	8009900 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80098ec:	f107 0310 	add.w	r3, r7, #16
 80098f0:	461a      	mov	r2, r3
 80098f2:	2102      	movs	r1, #2
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff fc23 	bl	8009140 <get_sequence_step_timeout>
 80098fa:	4603      	mov	r3, r0
 80098fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009900:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009904:	2b00      	cmp	r3, #0
 8009906:	d109      	bne.n	800991c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009908:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800990c:	461a      	mov	r2, r3
 800990e:	2150      	movs	r1, #80	; 0x50
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f001 fa6d 	bl	800adf0 <VL53L0X_WrByte>
 8009916:	4603      	mov	r3, r0
 8009918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800991c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009920:	2b00      	cmp	r3, #0
 8009922:	d108      	bne.n	8009936 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	461a      	mov	r2, r3
 8009928:	2103      	movs	r1, #3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff fce9 	bl	8009302 <set_sequence_step_timeout>
 8009930:	4603      	mov	r3, r0
 8009932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009936:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800993a:	2b00      	cmp	r3, #0
 800993c:	d108      	bne.n	8009950 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	461a      	mov	r2, r3
 8009942:	2102      	movs	r1, #2
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff fcdc 	bl	8009302 <set_sequence_step_timeout>
 800994a:	4603      	mov	r3, r0
 800994c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	78ba      	ldrb	r2, [r7, #2]
 8009954:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009958:	e02e      	b.n	80099b8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800995a:	f107 0318 	add.w	r3, r7, #24
 800995e:	461a      	mov	r2, r3
 8009960:	2104      	movs	r1, #4
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff fbec 	bl	8009140 <get_sequence_step_timeout>
 8009968:	4603      	mov	r3, r0
 800996a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800996e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009972:	2b00      	cmp	r3, #0
 8009974:	d109      	bne.n	800998a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009976:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800997a:	461a      	mov	r2, r3
 800997c:	2170      	movs	r1, #112	; 0x70
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f001 fa36 	bl	800adf0 <VL53L0X_WrByte>
 8009984:	4603      	mov	r3, r0
 8009986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800998a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800998e:	2b00      	cmp	r3, #0
 8009990:	d108      	bne.n	80099a4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	461a      	mov	r2, r3
 8009996:	2104      	movs	r1, #4
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7ff fcb2 	bl	8009302 <set_sequence_step_timeout>
 800999e:	4603      	mov	r3, r0
 80099a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	78ba      	ldrb	r2, [r7, #2]
 80099a8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80099ac:	e004      	b.n	80099b8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099ae:	23fc      	movs	r3, #252	; 0xfc
 80099b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099b4:	e000      	b.n	80099b8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80099b6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80099b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d109      	bne.n	80099d4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80099c6:	69f9      	ldr	r1, [r7, #28]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fc fe11 	bl	80065f0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80099d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d109      	bne.n	80099f0 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80099dc:	f107 010f 	add.w	r1, r7, #15
 80099e0:	2301      	movs	r3, #1
 80099e2:	2200      	movs	r2, #0
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7fe fcbb 	bl	8008360 <VL53L0X_perform_phase_calibration>
 80099ea:	4603      	mov	r3, r0
 80099ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80099f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3728      	adds	r7, #40	; 0x28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	460b      	mov	r3, r1
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009a0e:	7afb      	ldrb	r3, [r7, #11]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d00a      	beq.n	8009a2e <VL53L0X_get_vcsel_pulse_period+0x32>
 8009a18:	e013      	b.n	8009a42 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009a1a:	f107 0316 	add.w	r3, r7, #22
 8009a1e:	461a      	mov	r2, r3
 8009a20:	2150      	movs	r1, #80	; 0x50
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f001 f8e9 	bl	800abfa <VL53L0X_RdByte>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009a2c:	e00b      	b.n	8009a46 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009a2e:	f107 0316 	add.w	r3, r7, #22
 8009a32:	461a      	mov	r2, r3
 8009a34:	2170      	movs	r1, #112	; 0x70
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f001 f8df 	bl	800abfa <VL53L0X_RdByte>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009a40:	e001      	b.n	8009a46 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a42:	23fc      	movs	r3, #252	; 0xfc
 8009a44:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009a46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d107      	bne.n	8009a5e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009a4e:	7dbb      	ldrb	r3, [r7, #22]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fe fd56 	bl	8008502 <VL53L0X_decode_vcsel_period>
 8009a56:	4603      	mov	r3, r0
 8009a58:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	701a      	strb	r2, [r3, #0]

	return Status;
 8009a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b092      	sub	sp, #72	; 0x48
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009a7a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009a7e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 8009a80:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8009a84:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009a86:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009a8a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009a8c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009a90:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8009a92:	f240 234e 	movw	r3, #590	; 0x24e
 8009a96:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009a98:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009a9e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009aa2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009aa4:	f240 2326 	movw	r3, #550	; 0x226
 8009aa8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009aae:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009ab2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d205      	bcs.n	8009acc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ac0:	23fc      	movs	r3, #252	; 0xfc
 8009ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009ac6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009aca:	e0aa      	b.n	8009c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009acc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009ad8:	f107 0314 	add.w	r3, r7, #20
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7fc fed0 	bl	8006884 <VL53L0X_GetSequenceStepEnables>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009aea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d15b      	bne.n	8009baa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009af2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d105      	bne.n	8009b04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009af8:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d102      	bne.n	8009b04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8009afe:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d052      	beq.n	8009baa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009b04:	f107 0310 	add.w	r3, r7, #16
 8009b08:	461a      	mov	r2, r3
 8009b0a:	2102      	movs	r1, #2
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7ff fb17 	bl	8009140 <get_sequence_step_timeout>
 8009b12:	4603      	mov	r3, r0
 8009b14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009b18:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009b20:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009b24:	e07d      	b.n	8009c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009b26:	7d3b      	ldrb	r3, [r7, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00f      	beq.n	8009b4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009b2c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b30:	4413      	add	r3, r2
 8009b32:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009b34:	69fa      	ldr	r2, [r7, #28]
 8009b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d204      	bcs.n	8009b46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	643b      	str	r3, [r7, #64]	; 0x40
 8009b44:	e002      	b.n	8009b4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b46:	23fc      	movs	r3, #252	; 0xfc
 8009b48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009b4c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009b54:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009b58:	e063      	b.n	8009c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009b5a:	7dbb      	ldrb	r3, [r7, #22]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d011      	beq.n	8009b84 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b64:	4413      	add	r3, r2
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009b6a:	69fa      	ldr	r2, [r7, #28]
 8009b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d204      	bcs.n	8009b7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	643b      	str	r3, [r7, #64]	; 0x40
 8009b7a:	e016      	b.n	8009baa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b7c:	23fc      	movs	r3, #252	; 0xfc
 8009b7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009b82:	e012      	b.n	8009baa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009b84:	7d7b      	ldrb	r3, [r7, #21]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00f      	beq.n	8009baa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b8e:	4413      	add	r3, r2
 8009b90:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009b92:	69fa      	ldr	r2, [r7, #28]
 8009b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d204      	bcs.n	8009ba4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8009ba2:	e002      	b.n	8009baa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ba4:	23fc      	movs	r3, #252	; 0xfc
 8009ba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009baa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009bb2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009bb6:	e034      	b.n	8009c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d019      	beq.n	8009bf2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009bbe:	f107 030c 	add.w	r3, r7, #12
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	2103      	movs	r1, #3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff faba 	bl	8009140 <get_sequence_step_timeout>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bd6:	4413      	add	r3, r2
 8009bd8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009bda:	69fa      	ldr	r2, [r7, #28]
 8009bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d204      	bcs.n	8009bec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009be2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	643b      	str	r3, [r7, #64]	; 0x40
 8009bea:	e002      	b.n	8009bf2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009bec:	23fc      	movs	r3, #252	; 0xfc
 8009bee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009bf2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d111      	bne.n	8009c1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009bfa:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00e      	beq.n	8009c1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009c00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 8009c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c0a:	2104      	movs	r1, #4
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7ff fb78 	bl	8009302 <set_sequence_step_timeout>
 8009c12:	4603      	mov	r3, r0
 8009c14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009c1e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3748      	adds	r7, #72	; 0x48
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b090      	sub	sp, #64	; 0x40
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c34:	2300      	movs	r3, #0
 8009c36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009c3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009c3e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009c40:	f240 7376 	movw	r3, #1910	; 0x776
 8009c44:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009c46:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009c4a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009c4c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009c50:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009c52:	f240 234e 	movw	r3, #590	; 0x24e
 8009c56:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009c58:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009c5c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009c5e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009c64:	f240 2326 	movw	r3, #550	; 0x226
 8009c68:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8009c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c72:	441a      	add	r2, r3
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009c78:	f107 0318 	add.w	r3, r7, #24
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7fc fe00 	bl	8006884 <VL53L0X_GetSequenceStepEnables>
 8009c84:	4603      	mov	r3, r0
 8009c86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8009c8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009c92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c96:	e075      	b.n	8009d84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8009c98:	7e3b      	ldrb	r3, [r7, #24]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d105      	bne.n	8009caa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009c9e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d102      	bne.n	8009caa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8009ca4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d030      	beq.n	8009d0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8009caa:	f107 0310 	add.w	r3, r7, #16
 8009cae:	461a      	mov	r2, r3
 8009cb0:	2102      	movs	r1, #2
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f7ff fa44 	bl	8009140 <get_sequence_step_timeout>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8009cbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d122      	bne.n	8009d0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009cc6:	7e3b      	ldrb	r3, [r7, #24]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d007      	beq.n	8009cdc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009cd0:	6939      	ldr	r1, [r7, #16]
 8009cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009cd6:	441a      	add	r2, r3
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009cdc:	7ebb      	ldrb	r3, [r7, #26]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d009      	beq.n	8009cf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009ce6:	6939      	ldr	r1, [r7, #16]
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	440b      	add	r3, r1
 8009cec:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009cee:	441a      	add	r2, r3
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	e00a      	b.n	8009d0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009cf6:	7e7b      	ldrb	r3, [r7, #25]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d007      	beq.n	8009d0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009d00:	6939      	ldr	r1, [r7, #16]
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009d06:	441a      	add	r2, r3
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d114      	bne.n	8009d3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009d14:	7efb      	ldrb	r3, [r7, #27]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d011      	beq.n	8009d3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009d1a:	f107 030c 	add.w	r3, r7, #12
 8009d1e:	461a      	mov	r2, r3
 8009d20:	2103      	movs	r1, #3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff fa0c 	bl	8009140 <get_sequence_step_timeout>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8009d32:	68f9      	ldr	r1, [r7, #12]
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009d38:	441a      	add	r2, r3
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d114      	bne.n	8009d70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009d46:	7f3b      	ldrb	r3, [r7, #28]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d011      	beq.n	8009d70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009d4c:	f107 0314 	add.w	r3, r7, #20
 8009d50:	461a      	mov	r2, r3
 8009d52:	2104      	movs	r1, #4
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff f9f3 	bl	8009140 <get_sequence_step_timeout>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009d64:	6979      	ldr	r1, [r7, #20]
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009d6a:	441a      	add	r2, r3
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3740      	adds	r7, #64	; 0x40
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b088      	sub	sp, #32
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d96:	2300      	movs	r3, #0
 8009d98:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009d9e:	e0c6      	b.n	8009f2e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	4413      	add	r3, r2
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	74fb      	strb	r3, [r7, #19]
		Index++;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	3301      	adds	r3, #1
 8009dae:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8009db0:	7cfb      	ldrb	r3, [r7, #19]
 8009db2:	2bff      	cmp	r3, #255	; 0xff
 8009db4:	f040 808d 	bne.w	8009ed2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	747b      	strb	r3, [r7, #17]
			Index++;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009dc8:	7c7b      	ldrb	r3, [r7, #17]
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d87e      	bhi.n	8009ecc <VL53L0X_load_tuning_settings+0x140>
 8009dce:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <VL53L0X_load_tuning_settings+0x48>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009de5 	.word	0x08009de5
 8009dd8:	08009e1f 	.word	0x08009e1f
 8009ddc:	08009e59 	.word	0x08009e59
 8009de0:	08009e93 	.word	0x08009e93
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	4413      	add	r3, r2
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	743b      	strb	r3, [r7, #16]
				Index++;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	3301      	adds	r3, #1
 8009df2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	4413      	add	r3, r2
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	3301      	adds	r3, #1
 8009e02:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009e04:	7c3b      	ldrb	r3, [r7, #16]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	021b      	lsls	r3, r3, #8
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	4413      	add	r3, r2
 8009e12:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	89ba      	ldrh	r2, [r7, #12]
 8009e18:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009e1c:	e087      	b.n	8009f2e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	4413      	add	r3, r2
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	743b      	strb	r3, [r7, #16]
				Index++;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	4413      	add	r3, r2
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009e3e:	7c3b      	ldrb	r3, [r7, #16]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	021b      	lsls	r3, r3, #8
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	4413      	add	r3, r2
 8009e4c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	89ba      	ldrh	r2, [r7, #12]
 8009e52:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009e56:	e06a      	b.n	8009f2e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	743b      	strb	r3, [r7, #16]
				Index++;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	3301      	adds	r3, #1
 8009e66:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	3301      	adds	r3, #1
 8009e76:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009e78:	7c3b      	ldrb	r3, [r7, #16]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	4413      	add	r3, r2
 8009e86:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	89ba      	ldrh	r2, [r7, #12]
 8009e8c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8009e90:	e04d      	b.n	8009f2e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	683a      	ldr	r2, [r7, #0]
 8009e96:	4413      	add	r3, r2
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	743b      	strb	r3, [r7, #16]
				Index++;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	683a      	ldr	r2, [r7, #0]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009eb2:	7c3b      	ldrb	r3, [r7, #16]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	021b      	lsls	r3, r3, #8
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	4413      	add	r3, r2
 8009ec0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	89ba      	ldrh	r2, [r7, #12]
 8009ec6:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 8009eca:	e030      	b.n	8009f2e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ecc:	23fc      	movs	r3, #252	; 0xfc
 8009ece:	77fb      	strb	r3, [r7, #31]
 8009ed0:	e02d      	b.n	8009f2e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8009ed2:	7cfb      	ldrb	r3, [r7, #19]
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	d828      	bhi.n	8009f2a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	4413      	add	r3, r2
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009ee8:	2300      	movs	r3, #0
 8009eea:	61bb      	str	r3, [r7, #24]
 8009eec:	e00f      	b.n	8009f0e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	7819      	ldrb	r1, [r3, #0]
 8009ef6:	f107 0208 	add.w	r2, r7, #8
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	4413      	add	r3, r2
 8009efe:	460a      	mov	r2, r1
 8009f00:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	3301      	adds	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	61bb      	str	r3, [r7, #24]
 8009f0e:	7cfb      	ldrb	r3, [r7, #19]
 8009f10:	69ba      	ldr	r2, [r7, #24]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	dbeb      	blt.n	8009eee <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009f16:	7cfb      	ldrb	r3, [r7, #19]
 8009f18:	f107 0208 	add.w	r2, r7, #8
 8009f1c:	7cb9      	ldrb	r1, [r7, #18]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fe96 	bl	800ac50 <VL53L0X_WriteMulti>
 8009f24:	4603      	mov	r3, r0
 8009f26:	77fb      	strb	r3, [r7, #31]
 8009f28:	e001      	b.n	8009f2e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f2a:	23fc      	movs	r3, #252	; 0xfc
 8009f2c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	4413      	add	r3, r2
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d004      	beq.n	8009f44 <VL53L0X_load_tuning_settings+0x1b8>
 8009f3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f43f af2e 	beq.w	8009da0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f44:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3720      	adds	r7, #32
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009f66:	f107 0313 	add.w	r3, r7, #19
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f7fc fd55 	bl	8006a1c <VL53L0X_GetXTalkCompensationEnable>
 8009f72:	4603      	mov	r3, r0
 8009f74:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009f76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d111      	bne.n	8009fa2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8009f7e:	7cfb      	ldrb	r3, [r7, #19]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00e      	beq.n	8009fa2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	8a9b      	ldrh	r3, [r3, #20]
 8009f8e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	fb02 f303 	mul.w	r3, r2, r3
 8009f96:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	3380      	adds	r3, #128	; 0x80
 8009f9c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8009fa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3720      	adds	r7, #32
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b086      	sub	sp, #24
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	60f8      	str	r0, [r7, #12]
 8009fb6:	60b9      	str	r1, [r7, #8]
 8009fb8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009fc6:	f107 0310 	add.w	r3, r7, #16
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68b9      	ldr	r1, [r7, #8]
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f7ff ffbe 	bl	8009f50 <VL53L0X_get_total_xtalk_rate>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d105      	bne.n	8009fec <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	441a      	add	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	601a      	str	r2, [r3, #0]

	return Status;
 8009fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b09a      	sub	sp, #104	; 0x68
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
 800a004:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a006:	2312      	movs	r3, #18
 800a008:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a00a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a00e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a010:	2342      	movs	r3, #66	; 0x42
 800a012:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a014:	2306      	movs	r3, #6
 800a016:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a018:	2307      	movs	r3, #7
 800a01a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a01c:	2300      	movs	r3, #0
 800a01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 800a028:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a030:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a036:	fb02 f303 	mul.w	r3, r2, r3
 800a03a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a03e:	3380      	adds	r3, #128	; 0x80
 800a040:	0a1b      	lsrs	r3, r3, #8
 800a042:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a048:	fb02 f303 	mul.w	r3, r2, r3
 800a04c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d01a      	beq.n	800a08e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	029b      	lsls	r3, r3, #10
 800a05c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a064:	4413      	add	r3, r2
 800a066:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a068:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a070:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a072:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a074:	4613      	mov	r3, r2
 800a076:	005b      	lsls	r3, r3, #1
 800a078:	4413      	add	r3, r2
 800a07a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a07c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a07e:	fb03 f303 	mul.w	r3, r3, r3
 800a082:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a086:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a08a:	0c1b      	lsrs	r3, r3, #16
 800a08c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a092:	fb02 f303 	mul.w	r3, r2, r3
 800a096:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a09e:	0c1b      	lsrs	r3, r3, #16
 800a0a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a4:	fb03 f303 	mul.w	r3, r3, r3
 800a0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a0aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a0b0:	0c1b      	lsrs	r3, r3, #16
 800a0b2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a0b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0b6:	085a      	lsrs	r2, r3, #1
 800a0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ba:	441a      	add	r2, r3
 800a0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0c8:	fb02 f303 	mul.w	r3, r2, r3
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0d4:	d302      	bcc.n	800a0dc <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800a0d6:	4b54      	ldr	r3, [pc, #336]	; (800a228 <VL53L0X_calc_dmax+0x230>)
 800a0d8:	663b      	str	r3, [r7, #96]	; 0x60
 800a0da:	e015      	b.n	800a108 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a0dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0de:	085a      	lsrs	r2, r3, #1
 800a0e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0e2:	441a      	add	r2, r3
 800a0e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ea:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a0ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0f0:	fb02 f303 	mul.w	r3, r2, r3
 800a0f4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a0f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a0fc:	0c1b      	lsrs	r3, r3, #16
 800a0fe:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a102:	fb03 f303 	mul.w	r3, r3, r3
 800a106:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a10a:	039b      	lsls	r3, r3, #14
 800a10c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a110:	4a46      	ldr	r2, [pc, #280]	; (800a22c <VL53L0X_calc_dmax+0x234>)
 800a112:	fba2 2303 	umull	r2, r3, r2, r3
 800a116:	099b      	lsrs	r3, r3, #6
 800a118:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	fb03 f303 	mul.w	r3, r3, r3
 800a120:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a124:	fb03 f303 	mul.w	r3, r3, r3
 800a128:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	3308      	adds	r3, #8
 800a12e:	091b      	lsrs	r3, r3, #4
 800a130:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13c:	4613      	mov	r3, r2
 800a13e:	005b      	lsls	r3, r3, #1
 800a140:	4413      	add	r3, r2
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a14c:	0b9b      	lsrs	r3, r3, #14
 800a14e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a154:	4413      	add	r3, r2
 800a156:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a15a:	085b      	lsrs	r3, r3, #1
 800a15c:	69ba      	ldr	r2, [r7, #24]
 800a15e:	4413      	add	r3, r2
 800a160:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a166:	fbb2 f3f3 	udiv	r3, r2, r3
 800a16a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	039b      	lsls	r3, r3, #14
 800a170:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	085b      	lsrs	r3, r3, #1
 800a176:	69ba      	ldr	r2, [r7, #24]
 800a178:	4413      	add	r3, r2
 800a17a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	fbb2 f3f3 	udiv	r3, r2, r3
 800a184:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a18a:	fb02 f303 	mul.w	r3, r2, r3
 800a18e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a196:	4a25      	ldr	r2, [pc, #148]	; (800a22c <VL53L0X_calc_dmax+0x234>)
 800a198:	fba2 2303 	umull	r2, r3, r2, r3
 800a19c:	099b      	lsrs	r3, r3, #6
 800a19e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a1ac:	4a1f      	ldr	r2, [pc, #124]	; (800a22c <VL53L0X_calc_dmax+0x234>)
 800a1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b2:	099b      	lsrs	r3, r3, #6
 800a1b4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a1b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1b8:	3380      	adds	r3, #128	; 0x80
 800a1ba:	0a1b      	lsrs	r3, r3, #8
 800a1bc:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d008      	beq.n	800a1d6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	085a      	lsrs	r2, r3, #1
 800a1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ca:	441a      	add	r2, r3
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1d4:	e001      	b.n	800a1da <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a1da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a1dc:	f7fe f9b7 	bl	800854e <VL53L0X_isqrt>
 800a1e0:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d008      	beq.n	800a1fa <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	085a      	lsrs	r2, r3, #1
 800a1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ee:	441a      	add	r2, r3
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1f8:	e001      	b.n	800a1fe <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a1fe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a200:	f7fe f9a5 	bl	800854e <VL53L0X_isqrt>
 800a204:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a206:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a210:	429a      	cmp	r2, r3
 800a212:	d902      	bls.n	800a21a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800a214:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a216:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a218:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a21a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3768      	adds	r7, #104	; 0x68
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	fff00000 	.word	0xfff00000
 800a22c:	10624dd3 	.word	0x10624dd3

0800a230 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b0b2      	sub	sp, #200	; 0xc8
 800a234:	af04      	add	r7, sp, #16
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a23e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a246:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a24a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a24e:	2342      	movs	r3, #66	; 0x42
 800a250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a254:	f241 235c 	movw	r3, #4700	; 0x125c
 800a258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a25c:	4b6b      	ldr	r3, [pc, #428]	; (800a40c <VL53L0X_calc_sigma_estimate+0x1dc>)
 800a25e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a262:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a266:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a26a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a26e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a272:	fbb2 f3f3 	udiv	r3, r2, r3
 800a276:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a278:	4b65      	ldr	r3, [pc, #404]	; (800a410 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800a27a:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a27c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a280:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a282:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a286:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 800a288:	f240 6377 	movw	r3, #1655	; 0x677
 800a28c:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a28e:	2300      	movs	r3, #0
 800a290:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6a1b      	ldr	r3, [r3, #32]
 800a298:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2a2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a2a6:	0c1b      	lsrs	r3, r3, #16
 800a2a8:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a2b0:	f107 0310 	add.w	r3, r7, #16
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	68b9      	ldr	r1, [r7, #8]
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f7ff fe78 	bl	8009fae <VL53L0X_get_total_signal_rate>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a2c4:	f107 0314 	add.w	r3, r7, #20
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	68b9      	ldr	r1, [r7, #8]
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7ff fe3f 	bl	8009f50 <VL53L0X_get_total_xtalk_rate>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2de:	fb02 f303 	mul.w	r3, r2, r3
 800a2e2:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a2e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a2ea:	0c1b      	lsrs	r3, r3, #16
 800a2ec:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2f4:	fb02 f303 	mul.w	r3, r2, r3
 800a2f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a2fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a302:	429a      	cmp	r2, r3
 800a304:	d902      	bls.n	800a30c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 800a30c:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800a310:	2b00      	cmp	r3, #0
 800a312:	d164      	bne.n	800a3de <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a31a:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a322:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a326:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a32a:	461a      	mov	r2, r3
 800a32c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7fe feb0 	bl	8009094 <VL53L0X_calc_timeout_mclks>
 800a334:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a33c:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a344:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a348:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a34c:	461a      	mov	r2, r3
 800a34e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f7fe fe9f 	bl	8009094 <VL53L0X_calc_timeout_mclks>
 800a356:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a358:	2303      	movs	r3, #3
 800a35a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800a35e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a362:	2b08      	cmp	r3, #8
 800a364:	d102      	bne.n	800a36c <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 800a366:	2302      	movs	r3, #2
 800a368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a36c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a36e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a370:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a372:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a376:	fb02 f303 	mul.w	r3, r2, r3
 800a37a:	02db      	lsls	r3, r3, #11
 800a37c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a384:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a388:	4a22      	ldr	r2, [pc, #136]	; (800a414 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800a38a:	fba2 2303 	umull	r2, r3, r2, r3
 800a38e:	099b      	lsrs	r3, r3, #6
 800a390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 800a394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a398:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a39a:	fb02 f303 	mul.w	r3, r2, r3
 800a39e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a3a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a3aa:	4a1a      	ldr	r2, [pc, #104]	; (800a414 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800a3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b0:	099b      	lsrs	r3, r3, #6
 800a3b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	3380      	adds	r3, #128	; 0x80
 800a3ba:	0a1b      	lsrs	r3, r3, #8
 800a3bc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3c4:	fb02 f303 	mul.w	r3, r2, r3
 800a3c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a3cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a3d0:	3380      	adds	r3, #128	; 0x80
 800a3d2:	0a1b      	lsrs	r3, r3, #8
 800a3d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	021b      	lsls	r3, r3, #8
 800a3dc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a3de:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 800a3e6:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800a3ea:	e127      	b.n	800a63c <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 800a3ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d112      	bne.n	800a418 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a3f8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a400:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	e115      	b.n	800a638 <VL53L0X_calc_sigma_estimate+0x408>
 800a40c:	028f87ae 	.word	0x028f87ae
 800a410:	0006999a 	.word	0x0006999a
 800a414:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 800a418:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 800a420:	2301      	movs	r3, #1
 800a422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a426:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a42a:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a42c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a42e:	041a      	lsls	r2, r3, #16
 800a430:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a432:	fbb2 f3f3 	udiv	r3, r2, r3
 800a436:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a43a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a43e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a440:	429a      	cmp	r2, r3
 800a442:	d902      	bls.n	800a44a <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a444:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a44a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a44e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a452:	fb02 f303 	mul.w	r3, r2, r3
 800a456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a45a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a45e:	4613      	mov	r3, r2
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	4413      	add	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe f871 	bl	800854e <VL53L0X_isqrt>
 800a46c:	4603      	mov	r3, r0
 800a46e:	005b      	lsls	r3, r3, #1
 800a470:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	891b      	ldrh	r3, [r3, #8]
 800a476:	461a      	mov	r2, r3
 800a478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a47a:	fb02 f303 	mul.w	r3, r2, r3
 800a47e:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a482:	041a      	lsls	r2, r3, #16
 800a484:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a488:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 800a48a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a48e:	4a6d      	ldr	r2, [pc, #436]	; (800a644 <VL53L0X_calc_sigma_estimate+0x414>)
 800a490:	fba2 2303 	umull	r2, r3, r2, r3
 800a494:	099b      	lsrs	r3, r3, #6
 800a496:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800a498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a49a:	041a      	lsls	r2, r3, #16
 800a49c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4a0:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 800a4a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800a4a6:	4a67      	ldr	r2, [pc, #412]	; (800a644 <VL53L0X_calc_sigma_estimate+0x414>)
 800a4a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ac:	099b      	lsrs	r3, r3, #6
 800a4ae:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	021b      	lsls	r3, r3, #8
 800a4b4:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a4b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	bfb8      	it	lt
 800a4c2:	425b      	neglt	r3, r3
 800a4c4:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	021b      	lsls	r3, r3, #8
 800a4ca:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a4cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4da:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e0:	fb02 f303 	mul.w	r3, r2, r3
 800a4e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a4e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4ea:	4413      	add	r3, r2
 800a4ec:	0c1b      	lsrs	r3, r3, #16
 800a4ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	085b      	lsrs	r3, r3, #1
 800a4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 800a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a500:	fb03 f303 	mul.w	r3, r3, r3
 800a504:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 800a506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a508:	0b9b      	lsrs	r3, r3, #14
 800a50a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a510:	fb02 f303 	mul.w	r3, r2, r3
 800a514:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a51c:	0c1b      	lsrs	r3, r3, #16
 800a51e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	fb03 f303 	mul.w	r3, r3, r3
 800a526:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 800a528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a52c:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a534:	0c1b      	lsrs	r3, r3, #16
 800a536:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	fb03 f303 	mul.w	r3, r3, r3
 800a53e:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	4413      	add	r3, r2
 800a546:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a548:	6a38      	ldr	r0, [r7, #32]
 800a54a:	f7fe f800 	bl	800854e <VL53L0X_isqrt>
 800a54e:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	041b      	lsls	r3, r3, #16
 800a554:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	3332      	adds	r3, #50	; 0x32
 800a55a:	4a3b      	ldr	r2, [pc, #236]	; (800a648 <VL53L0X_calc_sigma_estimate+0x418>)
 800a55c:	fba2 2303 	umull	r2, r3, r2, r3
 800a560:	095a      	lsrs	r2, r3, #5
 800a562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a564:	fbb2 f3f3 	udiv	r3, r2, r3
 800a568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a56c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a570:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a574:	fb02 f303 	mul.w	r3, r2, r3
 800a578:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a57c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a580:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a584:	3308      	adds	r3, #8
 800a586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 800a58a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a58e:	4a2f      	ldr	r2, [pc, #188]	; (800a64c <VL53L0X_calc_sigma_estimate+0x41c>)
 800a590:	fba2 2303 	umull	r2, r3, r2, r3
 800a594:	0b5b      	lsrs	r3, r3, #13
 800a596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a59a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a59e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d903      	bls.n	800a5ae <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a5a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a5aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a5ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5b2:	fb03 f303 	mul.w	r3, r3, r3
 800a5b6:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 800a5b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5bc:	fb03 f303 	mul.w	r3, r3, r3
 800a5c0:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a5c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	4413      	add	r3, r2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fd ffc0 	bl	800854e <VL53L0X_isqrt>
 800a5ce:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5d6:	fb02 f303 	mul.w	r3, r2, r3
 800a5da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a5de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d009      	beq.n	800a5f8 <VL53L0X_calc_sigma_estimate+0x3c8>
 800a5e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d005      	beq.n	800a5f8 <VL53L0X_calc_sigma_estimate+0x3c8>
 800a5ec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a5f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d903      	bls.n	800a600 <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a5f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a606:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 800a612:	6939      	ldr	r1, [r7, #16]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	9303      	str	r3, [sp, #12]
 800a618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a61c:	9302      	str	r3, [sp, #8]
 800a61e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7ff fce3 	bl	8009ff8 <VL53L0X_calc_dmax>
 800a632:	4603      	mov	r3, r0
 800a634:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a638:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	37b8      	adds	r7, #184	; 0xb8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	10624dd3 	.word	0x10624dd3
 800a648:	51eb851f 	.word	0x51eb851f
 800a64c:	d1b71759 	.word	0xd1b71759

0800a650 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b090      	sub	sp, #64	; 0x40
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	607a      	str	r2, [r7, #4]
 800a65a:	461a      	mov	r2, r3
 800a65c:	460b      	mov	r3, r1
 800a65e:	72fb      	strb	r3, [r7, #11]
 800a660:	4613      	mov	r3, r2
 800a662:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a664:	2300      	movs	r3, #0
 800a666:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a670:	2300      	movs	r3, #0
 800a672:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a694:	2300      	movs	r3, #0
 800a696:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a69a:	2300      	movs	r3, #0
 800a69c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a6a2:	7afb      	ldrb	r3, [r7, #11]
 800a6a4:	10db      	asrs	r3, r3, #3
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	f003 030f 	and.w	r3, r3, #15
 800a6ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a6b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d017      	beq.n	800a6e8 <VL53L0X_get_pal_range_status+0x98>
 800a6b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a6bc:	2b05      	cmp	r3, #5
 800a6be:	d013      	beq.n	800a6e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a6c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a6c4:	2b07      	cmp	r3, #7
 800a6c6:	d00f      	beq.n	800a6e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a6c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a6cc:	2b0c      	cmp	r3, #12
 800a6ce:	d00b      	beq.n	800a6e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a6d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a6d4:	2b0d      	cmp	r3, #13
 800a6d6:	d007      	beq.n	800a6e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a6d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a6dc:	2b0e      	cmp	r3, #14
 800a6de:	d003      	beq.n	800a6e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a6e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a6e4:	2b0f      	cmp	r3, #15
 800a6e6:	d103      	bne.n	800a6f0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a6ee:	e002      	b.n	800a6f6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 800a6f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d107      	bne.n	800a70e <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a6fe:	2201      	movs	r2, #1
 800a700:	21ff      	movs	r1, #255	; 0xff
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 fb74 	bl	800adf0 <VL53L0X_WrByte>
 800a708:	4603      	mov	r3, r0
 800a70a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 800a70e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a712:	2b00      	cmp	r3, #0
 800a714:	d109      	bne.n	800a72a <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 800a716:	f107 0316 	add.w	r3, r7, #22
 800a71a:	461a      	mov	r2, r3
 800a71c:	21b6      	movs	r1, #182	; 0xb6
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f000 faf2 	bl	800ad08 <VL53L0X_RdWord>
 800a724:	4603      	mov	r3, r0
 800a726:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a72a:	8afb      	ldrh	r3, [r7, #22]
 800a72c:	025b      	lsls	r3, r3, #9
 800a72e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 800a730:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a734:	2b00      	cmp	r3, #0
 800a736:	d107      	bne.n	800a748 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a738:	2200      	movs	r2, #0
 800a73a:	21ff      	movs	r1, #255	; 0xff
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f000 fb57 	bl	800adf0 <VL53L0X_WrByte>
 800a742:	4603      	mov	r3, r0
 800a744:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a74c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a750:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a754:	2b00      	cmp	r3, #0
 800a756:	d109      	bne.n	800a76c <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a758:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a75c:	461a      	mov	r2, r3
 800a75e:	2100      	movs	r1, #0
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f7fc fa2f 	bl	8006bc4 <VL53L0X_GetLimitCheckEnable>
 800a766:	4603      	mov	r3, r0
 800a768:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a76c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a770:	2b00      	cmp	r3, #0
 800a772:	d02e      	beq.n	800a7d2 <VL53L0X_get_pal_range_status+0x182>
 800a774:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d12a      	bne.n	800a7d2 <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a77c:	f107 0310 	add.w	r3, r7, #16
 800a780:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a784:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f7ff fd52 	bl	800a230 <VL53L0X_calc_sigma_estimate>
 800a78c:	4603      	mov	r3, r0
 800a78e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a792:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a796:	2b00      	cmp	r3, #0
 800a798:	d103      	bne.n	800a7a2 <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7a0:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a7a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d113      	bne.n	800a7d2 <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a7aa:	f107 0320 	add.w	r3, r7, #32
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7fc fa8c 	bl	8006cd0 <VL53L0X_GetLimitCheckValue>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d006      	beq.n	800a7d2 <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 800a7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d902      	bls.n	800a7d2 <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a7d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a7da:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a7de:	461a      	mov	r2, r3
 800a7e0:	2102      	movs	r1, #2
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f7fc f9ee 	bl	8006bc4 <VL53L0X_GetLimitCheckEnable>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a7ee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d017      	beq.n	800a826 <VL53L0X_get_pal_range_status+0x1d6>
 800a7f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d113      	bne.n	800a826 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a7fe:	f107 031c 	add.w	r3, r7, #28
 800a802:	461a      	mov	r2, r3
 800a804:	2102      	movs	r1, #2
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7fc fa62 	bl	8006cd0 <VL53L0X_GetLimitCheckValue>
 800a80c:	4603      	mov	r3, r0
 800a80e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d006      	beq.n	800a826 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a818:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a81a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d902      	bls.n	800a826 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a820:	2301      	movs	r3, #1
 800a822:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a826:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d109      	bne.n	800a842 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a82e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a832:	461a      	mov	r2, r3
 800a834:	2103      	movs	r1, #3
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7fc f9c4 	bl	8006bc4 <VL53L0X_GetLimitCheckEnable>
 800a83c:	4603      	mov	r3, r0
 800a83e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a842:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a846:	2b00      	cmp	r3, #0
 800a848:	d023      	beq.n	800a892 <VL53L0X_get_pal_range_status+0x242>
 800a84a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d11f      	bne.n	800a892 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a852:	893b      	ldrh	r3, [r7, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d102      	bne.n	800a85e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	637b      	str	r3, [r7, #52]	; 0x34
 800a85c:	e005      	b.n	800a86a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	021a      	lsls	r2, r3, #8
 800a862:	893b      	ldrh	r3, [r7, #8]
 800a864:	fbb2 f3f3 	udiv	r3, r2, r3
 800a868:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a86a:	f107 0318 	add.w	r3, r7, #24
 800a86e:	461a      	mov	r2, r3
 800a870:	2103      	movs	r1, #3
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f7fc fa2c 	bl	8006cd0 <VL53L0X_GetLimitCheckValue>
 800a878:	4603      	mov	r3, r0
 800a87a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d006      	beq.n	800a892 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a884:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a888:	429a      	cmp	r2, r3
 800a88a:	d202      	bcs.n	800a892 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a88c:	2301      	movs	r3, #1
 800a88e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a892:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a896:	2b00      	cmp	r3, #0
 800a898:	d14a      	bne.n	800a930 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800a89a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d103      	bne.n	800a8aa <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800a8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a4:	22ff      	movs	r2, #255	; 0xff
 800a8a6:	701a      	strb	r2, [r3, #0]
 800a8a8:	e042      	b.n	800a930 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a8aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d007      	beq.n	800a8c2 <VL53L0X_get_pal_range_status+0x272>
 800a8b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d003      	beq.n	800a8c2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800a8ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	d103      	bne.n	800a8ca <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c4:	2205      	movs	r2, #5
 800a8c6:	701a      	strb	r2, [r3, #0]
 800a8c8:	e032      	b.n	800a930 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a8ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8ce:	2b06      	cmp	r3, #6
 800a8d0:	d003      	beq.n	800a8da <VL53L0X_get_pal_range_status+0x28a>
 800a8d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8d6:	2b09      	cmp	r3, #9
 800a8d8:	d103      	bne.n	800a8e2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8dc:	2204      	movs	r2, #4
 800a8de:	701a      	strb	r2, [r3, #0]
 800a8e0:	e026      	b.n	800a930 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a8e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8e6:	2b08      	cmp	r3, #8
 800a8e8:	d007      	beq.n	800a8fa <VL53L0X_get_pal_range_status+0x2aa>
 800a8ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8ee:	2b0a      	cmp	r3, #10
 800a8f0:	d003      	beq.n	800a8fa <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800a8f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d103      	bne.n	800a902 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8fc:	2203      	movs	r2, #3
 800a8fe:	701a      	strb	r2, [r3, #0]
 800a900:	e016      	b.n	800a930 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a902:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a906:	2b04      	cmp	r3, #4
 800a908:	d003      	beq.n	800a912 <VL53L0X_get_pal_range_status+0x2c2>
 800a90a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d103      	bne.n	800a91a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a914:	2202      	movs	r2, #2
 800a916:	701a      	strb	r2, [r3, #0]
 800a918:	e00a      	b.n	800a930 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800a91a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d103      	bne.n	800a92a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a924:	2201      	movs	r2, #1
 800a926:	701a      	strb	r2, [r3, #0]
 800a928:	e002      	b.n	800a930 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a92a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a92c:	2200      	movs	r2, #0
 800a92e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800a930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800a938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a93a:	2200      	movs	r2, #0
 800a93c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a93e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a942:	461a      	mov	r2, r3
 800a944:	2101      	movs	r1, #1
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7fc f93c 	bl	8006bc4 <VL53L0X_GetLimitCheckEnable>
 800a94c:	4603      	mov	r3, r0
 800a94e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a952:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a956:	2b00      	cmp	r3, #0
 800a958:	d14f      	bne.n	800a9fa <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a95a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d003      	beq.n	800a96a <VL53L0X_get_pal_range_status+0x31a>
 800a962:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a966:	2b01      	cmp	r3, #1
 800a968:	d103      	bne.n	800a972 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a96a:	2301      	movs	r3, #1
 800a96c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a970:	e002      	b.n	800a978 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a97e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a982:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a986:	2b04      	cmp	r3, #4
 800a988:	d003      	beq.n	800a992 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a98a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d103      	bne.n	800a99a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800a992:	2301      	movs	r3, #1
 800a994:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a998:	e002      	b.n	800a9a0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a9a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a9aa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <VL53L0X_get_pal_range_status+0x36a>
 800a9b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d103      	bne.n	800a9c2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9c0:	e002      	b.n	800a9c8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a9ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a9d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <VL53L0X_get_pal_range_status+0x392>
 800a9da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d103      	bne.n	800a9ea <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9e8:	e002      	b.n	800a9f0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a9f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a9fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3740      	adds	r7, #64	; 0x40
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <VL53L0X_check_part_used>:
/* Functions Definition ------------------------------------------------------*/

VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b086      	sub	sp, #24
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa12:	2300      	movs	r3, #0
 800aa14:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800aa16:	2102      	movs	r1, #2
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f7fd fe0d 	bl	8008638 <VL53L0X_get_info_from_device>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800aa22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d11c      	bne.n	800aa64 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800aa30:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800aa32:	7dbb      	ldrb	r3, [r7, #22]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d107      	bne.n	800aa48 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	3340      	adds	r3, #64	; 0x40
 800aa42:	2200      	movs	r2, #0
 800aa44:	701a      	strb	r2, [r3, #0]
 800aa46:	e00d      	b.n	800aa64 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	33f3      	adds	r3, #243	; 0xf3
 800aa56:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3340      	adds	r3, #64	; 0x40
 800aa5c:	6939      	ldr	r1, [r7, #16]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f008 fd41 	bl	80134e6 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3718      	adds	r7, #24
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800aa70:	b5b0      	push	{r4, r5, r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800aa7e:	f107 030d 	add.w	r3, r7, #13
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff ffbd 	bl	800aa06 <VL53L0X_check_part_used>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800aa90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d13b      	bne.n	800ab10 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800aa98:	7b7b      	ldrb	r3, [r7, #13]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d108      	bne.n	800aab0 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	4a30      	ldr	r2, [pc, #192]	; (800ab64 <VL53L0X_get_device_info+0xf4>)
 800aaa2:	461c      	mov	r4, r3
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aaa8:	6020      	str	r0, [r4, #0]
 800aaaa:	6061      	str	r1, [r4, #4]
 800aaac:	60a2      	str	r2, [r4, #8]
 800aaae:	e027      	b.n	800ab00 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800aab0:	7b7b      	ldrb	r3, [r7, #13]
 800aab2:	2b22      	cmp	r3, #34	; 0x22
 800aab4:	d80b      	bhi.n	800aace <VL53L0X_get_device_info+0x5e>
 800aab6:	7b7b      	ldrb	r3, [r7, #13]
 800aab8:	2b20      	cmp	r3, #32
 800aaba:	d008      	beq.n	800aace <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	4a2a      	ldr	r2, [pc, #168]	; (800ab68 <VL53L0X_get_device_info+0xf8>)
 800aac0:	461c      	mov	r4, r3
 800aac2:	4613      	mov	r3, r2
 800aac4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aac6:	6020      	str	r0, [r4, #0]
 800aac8:	6061      	str	r1, [r4, #4]
 800aaca:	60a2      	str	r2, [r4, #8]
 800aacc:	e018      	b.n	800ab00 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800aace:	7b7b      	ldrb	r3, [r7, #13]
 800aad0:	2b26      	cmp	r3, #38	; 0x26
 800aad2:	d808      	bhi.n	800aae6 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	4a25      	ldr	r2, [pc, #148]	; (800ab6c <VL53L0X_get_device_info+0xfc>)
 800aad8:	461c      	mov	r4, r3
 800aada:	4613      	mov	r3, r2
 800aadc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aade:	6020      	str	r0, [r4, #0]
 800aae0:	6061      	str	r1, [r4, #4]
 800aae2:	60a2      	str	r2, [r4, #8]
 800aae4:	e00c      	b.n	800ab00 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	4a21      	ldr	r2, [pc, #132]	; (800ab70 <VL53L0X_get_device_info+0x100>)
 800aaea:	461d      	mov	r5, r3
 800aaec:	4614      	mov	r4, r2
 800aaee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaf0:	6028      	str	r0, [r5, #0]
 800aaf2:	6069      	str	r1, [r5, #4]
 800aaf4:	60aa      	str	r2, [r5, #8]
 800aaf6:	60eb      	str	r3, [r5, #12]
 800aaf8:	6820      	ldr	r0, [r4, #0]
 800aafa:	6128      	str	r0, [r5, #16]
 800aafc:	7923      	ldrb	r3, [r4, #4]
 800aafe:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	3320      	adds	r3, #32
 800ab04:	491b      	ldr	r1, [pc, #108]	; (800ab74 <VL53L0X_get_device_info+0x104>)
 800ab06:	461a      	mov	r2, r3
 800ab08:	460b      	mov	r3, r1
 800ab0a:	cb03      	ldmia	r3!, {r0, r1}
 800ab0c:	6010      	str	r0, [r2, #0]
 800ab0e:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d108      	bne.n	800ab2a <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	3360      	adds	r3, #96	; 0x60
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	21c0      	movs	r1, #192	; 0xc0
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f86a 	bl	800abfa <VL53L0X_RdByte>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d112      	bne.n	800ab58 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800ab32:	f107 030e 	add.w	r3, r7, #14
 800ab36:	461a      	mov	r2, r3
 800ab38:	21c2      	movs	r1, #194	; 0xc2
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f85d 	bl	800abfa <VL53L0X_RdByte>
 800ab40:	4603      	mov	r3, r0
 800ab42:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800ab4c:	7bbb      	ldrb	r3, [r7, #14]
 800ab4e:	091b      	lsrs	r3, r3, #4
 800ab50:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800ab58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bdb0      	pop	{r4, r5, r7, pc}
 800ab64:	08015e00 	.word	0x08015e00
 800ab68:	08015e0c 	.word	0x08015e0c
 800ab6c:	08015e18 	.word	0x08015e18
 800ab70:	08015e24 	.word	0x08015e24
 800ab74:	08015e3c 	.word	0x08015e3c

0800ab78 <_I2CWrite>:
int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count);

/* Exported functions --------------------------------------------------------*/

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b088      	sub	sp, #32
 800ab7c:	af02      	add	r7, sp, #8
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	330a      	adds	r3, #10
 800ab88:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ab96:	b299      	uxth	r1, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	4613      	mov	r3, r2
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	f000 ffe2 	bl	800bb6c <HAL_I2C_Master_Transmit>
 800aba8:	4603      	mov	r3, r0
 800abaa:	613b      	str	r3, [r7, #16]

    return status;
 800abac:	693b      	ldr	r3, [r7, #16]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3718      	adds	r7, #24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b088      	sub	sp, #32
 800abba:	af02      	add	r7, sp, #8
 800abbc:	60f8      	str	r0, [r7, #12]
 800abbe:	60b9      	str	r1, [r7, #8]
 800abc0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	330a      	adds	r3, #10
 800abc6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800abd4:	f043 0301 	orr.w	r3, r3, #1
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	b299      	uxth	r1, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	b29a      	uxth	r2, r3
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	4613      	mov	r3, r2
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	f001 f8b4 	bl	800bd54 <HAL_I2C_Master_Receive>
 800abec:	4603      	mov	r3, r0
 800abee:	613b      	str	r3, [r7, #16]

    return status;
 800abf0:	693b      	ldr	r3, [r7, #16]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b086      	sub	sp, #24
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	60f8      	str	r0, [r7, #12]
 800ac02:	460b      	mov	r3, r1
 800ac04:	607a      	str	r2, [r7, #4]
 800ac06:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800ac0c:	f107 030b 	add.w	r3, r7, #11
 800ac10:	2201      	movs	r2, #1
 800ac12:	4619      	mov	r1, r3
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f7ff ffaf 	bl	800ab78 <_I2CWrite>
 800ac1a:	6138      	str	r0, [r7, #16]

    if (status_int)
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <VL53L0X_RdByte+0x2e>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac22:	23ec      	movs	r3, #236	; 0xec
 800ac24:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ac26:	e00c      	b.n	800ac42 <VL53L0X_RdByte+0x48>
    }

    status_int = _I2CRead(Dev, data, 1);
 800ac28:	2201      	movs	r2, #1
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f7ff ffc2 	bl	800abb6 <_I2CRead>
 800ac32:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d002      	beq.n	800ac40 <VL53L0X_RdByte+0x46>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac3a:	23ec      	movs	r3, #236	; 0xec
 800ac3c:	75fb      	strb	r3, [r7, #23]
 800ac3e:	e000      	b.n	800ac42 <VL53L0X_RdByte+0x48>
    }
done:
 800ac40:	bf00      	nop
    return Status;
 800ac42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b086      	sub	sp, #24
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	607a      	str	r2, [r7, #4]
 800ac5a:	603b      	str	r3, [r7, #0]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac60:	2300      	movs	r3, #0
 800ac62:	75fb      	strb	r3, [r7, #23]

    if (count > sizeof(_I2CBuffer) - 1) {
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	2b3f      	cmp	r3, #63	; 0x3f
 800ac68:	d902      	bls.n	800ac70 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ac6a:	f06f 0303 	mvn.w	r3, #3
 800ac6e:	e016      	b.n	800ac9e <VL53L0X_WriteMulti+0x4e>
    }

    _I2CBuffer[0] = index;
 800ac70:	4a0d      	ldr	r2, [pc, #52]	; (800aca8 <VL53L0X_WriteMulti+0x58>)
 800ac72:	7afb      	ldrb	r3, [r7, #11]
 800ac74:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	480c      	ldr	r0, [pc, #48]	; (800acac <VL53L0X_WriteMulti+0x5c>)
 800ac7c:	f007 fdf1 	bl	8012862 <memcpy>

    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	3301      	adds	r3, #1
 800ac84:	461a      	mov	r2, r3
 800ac86:	4908      	ldr	r1, [pc, #32]	; (800aca8 <VL53L0X_WriteMulti+0x58>)
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f7ff ff75 	bl	800ab78 <_I2CWrite>
 800ac8e:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac96:	23ec      	movs	r3, #236	; 0xec
 800ac98:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 800ac9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3718      	adds	r7, #24
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	20010adc 	.word	0x20010adc
 800acac:	20010add 	.word	0x20010add

0800acb0 <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	607a      	str	r2, [r7, #4]
 800acba:	603b      	str	r3, [r7, #0]
 800acbc:	460b      	mov	r3, r1
 800acbe:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acc0:	2300      	movs	r3, #0
 800acc2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800acc4:	f107 030b 	add.w	r3, r7, #11
 800acc8:	2201      	movs	r2, #1
 800acca:	4619      	mov	r1, r3
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f7ff ff53 	bl	800ab78 <_I2CWrite>
 800acd2:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d002      	beq.n	800ace0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800acda:	23ec      	movs	r3, #236	; 0xec
 800acdc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800acde:	e00c      	b.n	800acfa <VL53L0X_ReadMulti+0x4a>
    }

    status_int = _I2CRead(Dev, pdata, count);
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	6879      	ldr	r1, [r7, #4]
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f7ff ff66 	bl	800abb6 <_I2CRead>
 800acea:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d002      	beq.n	800acf8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800acf2:	23ec      	movs	r3, #236	; 0xec
 800acf4:	75fb      	strb	r3, [r7, #23]
 800acf6:	e000      	b.n	800acfa <VL53L0X_ReadMulti+0x4a>
    }
done:
 800acf8:	bf00      	nop
    return Status;
 800acfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
	...

0800ad08 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	460b      	mov	r3, r1
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800ad1a:	f107 030b 	add.w	r3, r7, #11
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4619      	mov	r1, r3
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7ff ff28 	bl	800ab78 <_I2CWrite>
 800ad28:	6138      	str	r0, [r7, #16]

    if (status_int)
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <VL53L0X_RdWord+0x2e>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad30:	23ec      	movs	r3, #236	; 0xec
 800ad32:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ad34:	e017      	b.n	800ad66 <VL53L0X_RdWord+0x5e>
    }

    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ad36:	2202      	movs	r2, #2
 800ad38:	490e      	ldr	r1, [pc, #56]	; (800ad74 <VL53L0X_RdWord+0x6c>)
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f7ff ff3b 	bl	800abb6 <_I2CRead>
 800ad40:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <VL53L0X_RdWord+0x46>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad48:	23ec      	movs	r3, #236	; 0xec
 800ad4a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ad4c:	e00b      	b.n	800ad66 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ad4e:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <VL53L0X_RdWord+0x6c>)
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	021b      	lsls	r3, r3, #8
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	4b06      	ldr	r3, [pc, #24]	; (800ad74 <VL53L0X_RdWord+0x6c>)
 800ad5a:	785b      	ldrb	r3, [r3, #1]
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	4413      	add	r3, r2
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800ad66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	20010adc 	.word	0x20010adc

0800ad78 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	460b      	mov	r3, r1
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad86:	2300      	movs	r3, #0
 800ad88:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800ad8a:	f107 030b 	add.w	r3, r7, #11
 800ad8e:	2201      	movs	r2, #1
 800ad90:	4619      	mov	r1, r3
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f7ff fef0 	bl	800ab78 <_I2CWrite>
 800ad98:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ada0:	23ec      	movs	r3, #236	; 0xec
 800ada2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ada4:	e01b      	b.n	800adde <VL53L0X_RdDWord+0x66>
    }

    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ada6:	2204      	movs	r2, #4
 800ada8:	4910      	ldr	r1, [pc, #64]	; (800adec <VL53L0X_RdDWord+0x74>)
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f7ff ff03 	bl	800abb6 <_I2CRead>
 800adb0:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800adb8:	23ec      	movs	r3, #236	; 0xec
 800adba:	75fb      	strb	r3, [r7, #23]
        goto done;
 800adbc:	e00f      	b.n	800adde <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800adbe:	4b0b      	ldr	r3, [pc, #44]	; (800adec <VL53L0X_RdDWord+0x74>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	061a      	lsls	r2, r3, #24
 800adc4:	4b09      	ldr	r3, [pc, #36]	; (800adec <VL53L0X_RdDWord+0x74>)
 800adc6:	785b      	ldrb	r3, [r3, #1]
 800adc8:	041b      	lsls	r3, r3, #16
 800adca:	441a      	add	r2, r3
 800adcc:	4b07      	ldr	r3, [pc, #28]	; (800adec <VL53L0X_RdDWord+0x74>)
 800adce:	789b      	ldrb	r3, [r3, #2]
 800add0:	021b      	lsls	r3, r3, #8
 800add2:	4413      	add	r3, r2
 800add4:	4a05      	ldr	r2, [pc, #20]	; (800adec <VL53L0X_RdDWord+0x74>)
 800add6:	78d2      	ldrb	r2, [r2, #3]
 800add8:	441a      	add	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800adde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20010adc 	.word	0x20010adc

0800adf0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
 800adfc:	4613      	mov	r3, r2
 800adfe:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae00:	2300      	movs	r3, #0
 800ae02:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ae04:	4a0b      	ldr	r2, [pc, #44]	; (800ae34 <VL53L0X_WrByte+0x44>)
 800ae06:	78fb      	ldrb	r3, [r7, #3]
 800ae08:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ae0a:	4a0a      	ldr	r2, [pc, #40]	; (800ae34 <VL53L0X_WrByte+0x44>)
 800ae0c:	78bb      	ldrb	r3, [r7, #2]
 800ae0e:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ae10:	2202      	movs	r2, #2
 800ae12:	4908      	ldr	r1, [pc, #32]	; (800ae34 <VL53L0X_WrByte+0x44>)
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7ff feaf 	bl	800ab78 <_I2CWrite>
 800ae1a:	60b8      	str	r0, [r7, #8]

    if (status_int != 0) {
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae22:	23ec      	movs	r3, #236	; 0xec
 800ae24:	73fb      	strb	r3, [r7, #15]
    }

    return Status;
 800ae26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20010adc 	.word	0x20010adc

0800ae38 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
 800ae44:	4613      	mov	r3, r2
 800ae46:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ae4c:	4a0e      	ldr	r2, [pc, #56]	; (800ae88 <VL53L0X_WrWord+0x50>)
 800ae4e:	78fb      	ldrb	r3, [r7, #3]
 800ae50:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ae52:	883b      	ldrh	r3, [r7, #0]
 800ae54:	0a1b      	lsrs	r3, r3, #8
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	4b0b      	ldr	r3, [pc, #44]	; (800ae88 <VL53L0X_WrWord+0x50>)
 800ae5c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ae5e:	883b      	ldrh	r3, [r7, #0]
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	4b09      	ldr	r3, [pc, #36]	; (800ae88 <VL53L0X_WrWord+0x50>)
 800ae64:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ae66:	2203      	movs	r2, #3
 800ae68:	4907      	ldr	r1, [pc, #28]	; (800ae88 <VL53L0X_WrWord+0x50>)
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7ff fe84 	bl	800ab78 <_I2CWrite>
 800ae70:	60b8      	str	r0, [r7, #8]

    if (status_int != 0) {
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae78:	23ec      	movs	r3, #236	; 0xec
 800ae7a:	73fb      	strb	r3, [r7, #15]
    }

    return Status;
 800ae7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	20010adc 	.word	0x20010adc

0800ae8c <VL53L0X_UpdateByte>:

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	4608      	mov	r0, r1
 800ae96:	4611      	mov	r1, r2
 800ae98:	461a      	mov	r2, r3
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	70fb      	strb	r3, [r7, #3]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	70bb      	strb	r3, [r7, #2]
 800aea2:	4613      	mov	r3, r2
 800aea4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aea6:	2300      	movs	r3, #0
 800aea8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800aeaa:	f107 020e 	add.w	r2, r7, #14
 800aeae:	78fb      	ldrb	r3, [r7, #3]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff fea1 	bl	800abfa <VL53L0X_RdByte>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]

    if (Status) {
 800aebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d110      	bne.n	800aee6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }

    data = (data & AndData) | OrData;
 800aec4:	7bba      	ldrb	r2, [r7, #14]
 800aec6:	78bb      	ldrb	r3, [r7, #2]
 800aec8:	4013      	ands	r3, r2
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	787b      	ldrb	r3, [r7, #1]
 800aece:	4313      	orrs	r3, r2
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800aed4:	7bba      	ldrb	r2, [r7, #14]
 800aed6:	78fb      	ldrb	r3, [r7, #3]
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f7ff ff88 	bl	800adf0 <VL53L0X_WrByte>
 800aee0:	4603      	mov	r3, r0
 800aee2:	73fb      	strb	r3, [r7, #15]
 800aee4:	e000      	b.n	800aee8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800aee6:	bf00      	nop
done:
    return Status;
 800aee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73fb      	strb	r3, [r7, #15]

    /* do nothing */
    VL53L0X_OsDelay();
 800af00:	2002      	movs	r0, #2
 800af02:	f000 f987 	bl	800b214 <HAL_Delay>
    return status;
 800af06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <VL53L0X_PROXIMITY_Init>:

/**
  * @brief  VL53L0X proximity sensor Initialization.
  */
void VL53L0X_PROXIMITY_Init(void)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b09a      	sub	sp, #104	; 0x68
 800af18:	af00      	add	r7, sp, #0
  uint16_t vl53l0x_id = 0; 
 800af1a:	2300      	movs	r3, #0
 800af1c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;
  
  /* Initialize IO interface */
  BSP_I2C2_Init();
 800af20:	f7f7 fca2 	bl	8002868 <BSP_I2C2_Init>
  VL53L0X_PROXIMITY_MspInit();
 800af24:	f000 f84e 	bl	800afc4 <VL53L0X_PROXIMITY_MspInit>
  
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 800af28:	463b      	mov	r3, r7
 800af2a:	2263      	movs	r2, #99	; 0x63
 800af2c:	2100      	movs	r1, #0
 800af2e:	4618      	mov	r0, r3
 800af30:	f007 fca5 	bl	801287e <memset>
  
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 800af34:	463b      	mov	r3, r7
 800af36:	4619      	mov	r1, r3
 800af38:	4817      	ldr	r0, [pc, #92]	; (800af98 <VL53L0X_PROXIMITY_Init+0x84>)
 800af3a:	f7fa ffb8 	bl	8005eae <VL53L0X_GetDeviceInfo>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d121      	bne.n	800af88 <VL53L0X_PROXIMITY_Init+0x74>
  {  
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 800af44:	f107 0366 	add.w	r3, r7, #102	; 0x66
 800af48:	461a      	mov	r2, r3
 800af4a:	21c0      	movs	r1, #192	; 0xc0
 800af4c:	4812      	ldr	r0, [pc, #72]	; (800af98 <VL53L0X_PROXIMITY_Init+0x84>)
 800af4e:	f7ff fedb 	bl	800ad08 <VL53L0X_RdWord>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d113      	bne.n	800af80 <VL53L0X_PROXIMITY_Init+0x6c>
    {
      if (vl53l0x_id == VL53L0X_ID)
 800af58:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800af5c:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 800af60:	4293      	cmp	r3, r2
 800af62:	d114      	bne.n	800af8e <VL53L0X_PROXIMITY_Init+0x7a>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 800af64:	480c      	ldr	r0, [pc, #48]	; (800af98 <VL53L0X_PROXIMITY_Init+0x84>)
 800af66:	f7fa ffc9 	bl	8005efc <VL53L0X_DataInit>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10e      	bne.n	800af8e <VL53L0X_PROXIMITY_Init+0x7a>
        {
          Dev.Present = 1;
 800af70:	4b09      	ldr	r3, [pc, #36]	; (800af98 <VL53L0X_PROXIMITY_Init+0x84>)
 800af72:	2201      	movs	r2, #1
 800af74:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
          SetupSingleShot(&Dev);
 800af78:	4807      	ldr	r0, [pc, #28]	; (800af98 <VL53L0X_PROXIMITY_Init+0x84>)
 800af7a:	f000 f843 	bl	800b004 <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }  
}
 800af7e:	e006      	b.n	800af8e <VL53L0X_PROXIMITY_Init+0x7a>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 800af80:	4806      	ldr	r0, [pc, #24]	; (800af9c <VL53L0X_PROXIMITY_Init+0x88>)
 800af82:	f008 f9b7 	bl	80132f4 <puts>
}
 800af86:	e002      	b.n	800af8e <VL53L0X_PROXIMITY_Init+0x7a>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 800af88:	4805      	ldr	r0, [pc, #20]	; (800afa0 <VL53L0X_PROXIMITY_Init+0x8c>)
 800af8a:	f008 f9b3 	bl	80132f4 <puts>
}
 800af8e:	bf00      	nop
 800af90:	3768      	adds	r7, #104	; 0x68
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	2000037c 	.word	0x2000037c
 800af9c:	080162a4 	.word	0x080162a4
 800afa0:	080162d4 	.word	0x080162d4

0800afa4 <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;
  
  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 800afaa:	1d3b      	adds	r3, r7, #4
 800afac:	4619      	mov	r1, r3
 800afae:	4804      	ldr	r0, [pc, #16]	; (800afc0 <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 800afb0:	f7fc f9ee 	bl	8007390 <VL53L0X_PerformSingleRangingMeasurement>
  
  return RangingMeasurementData.RangeMilliMeter;  
 800afb4:	89bb      	ldrh	r3, [r7, #12]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3720      	adds	r7, #32
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	2000037c 	.word	0x2000037c

0800afc4 <VL53L0X_PROXIMITY_MspInit>:

/**
  * @brief  VL53L0X proximity sensor Msp Initialization.
  */
void VL53L0X_PROXIMITY_MspInit(void)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 800afca:	2340      	movs	r3, #64	; 0x40
 800afcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800afce:	2301      	movs	r3, #1
 800afd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800afd2:	2301      	movs	r3, #1
 800afd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800afd6:	2302      	movs	r3, #2
 800afd8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800afda:	1d3b      	adds	r3, r7, #4
 800afdc:	4619      	mov	r1, r3
 800afde:	4808      	ldr	r0, [pc, #32]	; (800b000 <VL53L0X_PROXIMITY_MspInit+0x3c>)
 800afe0:	f000 fa1e 	bl	800b420 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 800afe4:	2201      	movs	r2, #1
 800afe6:	2140      	movs	r1, #64	; 0x40
 800afe8:	4805      	ldr	r0, [pc, #20]	; (800b000 <VL53L0X_PROXIMITY_MspInit+0x3c>)
 800afea:	f000 fcb7 	bl	800b95c <HAL_GPIO_WritePin>
  
  HAL_Delay(1000);  
 800afee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aff2:	f000 f90f 	bl	800b214 <HAL_Delay>
}
 800aff6:	bf00      	nop
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	48000800 	.word	0x48000800

0800b004 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t* pDev)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08a      	sub	sp, #40	; 0x28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
  uint8_t isApertureSpads;
  FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800b00c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b010:	627b      	str	r3, [r7, #36]	; 0x24
  FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800b012:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800b016:	623b      	str	r3, [r7, #32]
  uint32_t timingBudget = 33000;
 800b018:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800b01c:	61fb      	str	r3, [r7, #28]
  uint8_t preRangeVcselPeriod = 14;
 800b01e:	230e      	movs	r3, #14
 800b020:	76fb      	strb	r3, [r7, #27]
  uint8_t finalRangeVcselPeriod = 10;
 800b022:	230a      	movs	r3, #10
 800b024:	76bb      	strb	r3, [r7, #26]
                          
  if (pDev->Present)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 80a4 	beq.w	800b17a <SetupSingleShot+0x176>
  {
    status = VL53L0X_StaticInit(pDev);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7fb f86c 	bl	8006110 <VL53L0X_StaticInit>
 800b038:	4603      	mov	r3, r0
 800b03a:	617b      	str	r3, [r7, #20]
    if (status)
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d002      	beq.n	800b048 <SetupSingleShot+0x44>
    {
      printf("VL53L0X_StaticInit failed\n");
 800b042:	4850      	ldr	r0, [pc, #320]	; (800b184 <SetupSingleShot+0x180>)
 800b044:	f008 f956 	bl	80132f4 <puts>
    }
    
    status = VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 800b048:	f107 0212 	add.w	r2, r7, #18
 800b04c:	f107 0313 	add.w	r3, r7, #19
 800b050:	4619      	mov	r1, r3
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7fb ff30 	bl	8006eb8 <VL53L0X_PerformRefCalibration>
 800b058:	4603      	mov	r3, r0
 800b05a:	617b      	str	r3, [r7, #20]
    if (status)
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d002      	beq.n	800b068 <SetupSingleShot+0x64>
    {
      printf("VL53L0X_PerformRefCalibration failed\n");
 800b062:	4849      	ldr	r0, [pc, #292]	; (800b188 <SetupSingleShot+0x184>)
 800b064:	f008 f946 	bl	80132f4 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 800b068:	f107 020b 	add.w	r2, r7, #11
 800b06c:	f107 030c 	add.w	r3, r7, #12
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7fc fb78 	bl	8007768 <VL53L0X_PerformRefSpadManagement>
 800b078:	4603      	mov	r3, r0
 800b07a:	617b      	str	r3, [r7, #20]
    if (status)
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d002      	beq.n	800b088 <SetupSingleShot+0x84>
    {
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 800b082:	4842      	ldr	r0, [pc, #264]	; (800b18c <SetupSingleShot+0x188>)
 800b084:	f008 f936 	bl	80132f4 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_SINGLE_RANGING); /* Setup in single ranging mode */
 800b088:	2100      	movs	r1, #0
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7fb fa52 	bl	8006534 <VL53L0X_SetDeviceMode>
 800b090:	4603      	mov	r3, r0
 800b092:	617b      	str	r3, [r7, #20]
    if (status)
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d002      	beq.n	800b0a0 <SetupSingleShot+0x9c>
    {
      printf("VL53L0X_SetDeviceMode failed\n");
 800b09a:	483d      	ldr	r0, [pc, #244]	; (800b190 <SetupSingleShot+0x18c>)
 800b09c:	f008 f92a 	bl	80132f4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); /* Enable Sigma limit */
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7fb fd01 	bl	8006aac <VL53L0X_SetLimitCheckEnable>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	617b      	str	r3, [r7, #20]
    if (status)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d002      	beq.n	800b0ba <SetupSingleShot+0xb6>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800b0b4:	4837      	ldr	r0, [pc, #220]	; (800b194 <SetupSingleShot+0x190>)
 800b0b6:	f008 f91d 	bl	80132f4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); /* Enable Signa limit */
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	2101      	movs	r1, #1
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7fb fcf4 	bl	8006aac <VL53L0X_SetLimitCheckEnable>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	617b      	str	r3, [r7, #20]
    if (status)
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <SetupSingleShot+0xd0>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800b0ce:	4831      	ldr	r0, [pc, #196]	; (800b194 <SetupSingleShot+0x190>)
 800b0d0:	f008 f910 	bl	80132f4 <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 800b0d4:	f641 1399 	movw	r3, #6553	; 0x1999
 800b0d8:	627b      	str	r3, [r7, #36]	; 0x24
    sigmaLimit = (FixPoint1616_t)(60*65536);
 800b0da:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800b0de:	623b      	str	r3, [r7, #32]
    timingBudget = 33000;
 800b0e0:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800b0e4:	61fb      	str	r3, [r7, #28]
    preRangeVcselPeriod = 18;
 800b0e6:	2312      	movs	r3, #18
 800b0e8:	76fb      	strb	r3, [r7, #27]
    finalRangeVcselPeriod = 14;
 800b0ea:	230e      	movs	r3, #14
 800b0ec:	76bb      	strb	r3, [r7, #26]
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 800b0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f0:	2101      	movs	r1, #1
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7fb fd8a 	bl	8006c0c <VL53L0X_SetLimitCheckValue>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	617b      	str	r3, [r7, #20]
    
    if (status)
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d002      	beq.n	800b108 <SetupSingleShot+0x104>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800b102:	4825      	ldr	r0, [pc, #148]	; (800b198 <SetupSingleShot+0x194>)
 800b104:	f008 f8f6 	bl	80132f4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800b108:	6a3a      	ldr	r2, [r7, #32]
 800b10a:	2100      	movs	r1, #0
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7fb fd7d 	bl	8006c0c <VL53L0X_SetLimitCheckValue>
 800b112:	4603      	mov	r3, r0
 800b114:	617b      	str	r3, [r7, #20]
    if (status)
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <SetupSingleShot+0x11e>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800b11c:	481e      	ldr	r0, [pc, #120]	; (800b198 <SetupSingleShot+0x194>)
 800b11e:	f008 f8e9 	bl	80132f4 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pDev,  timingBudget);
 800b122:	69f9      	ldr	r1, [r7, #28]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7fb fa63 	bl	80065f0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800b12a:	4603      	mov	r3, r0
 800b12c:	617b      	str	r3, [r7, #20]
    if (status)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <SetupSingleShot+0x136>
    {
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 800b134:	4819      	ldr	r0, [pc, #100]	; (800b19c <SetupSingleShot+0x198>)
 800b136:	f008 f8dd 	bl	80132f4 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800b13a:	7efb      	ldrb	r3, [r7, #27]
 800b13c:	461a      	mov	r2, r3
 800b13e:	2100      	movs	r1, #0
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7fb fa7b 	bl	800663c <VL53L0X_SetVcselPulsePeriod>
 800b146:	4603      	mov	r3, r0
 800b148:	617b      	str	r3, [r7, #20]
    if (status)
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <SetupSingleShot+0x152>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800b150:	4813      	ldr	r0, [pc, #76]	; (800b1a0 <SetupSingleShot+0x19c>)
 800b152:	f008 f8cf 	bl	80132f4 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800b156:	7ebb      	ldrb	r3, [r7, #26]
 800b158:	461a      	mov	r2, r3
 800b15a:	2101      	movs	r1, #1
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7fb fa6d 	bl	800663c <VL53L0X_SetVcselPulsePeriod>
 800b162:	4603      	mov	r3, r0
 800b164:	617b      	str	r3, [r7, #20]
    if (status)
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <SetupSingleShot+0x16e>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800b16c:	480c      	ldr	r0, [pc, #48]	; (800b1a0 <SetupSingleShot+0x19c>)
 800b16e:	f008 f8c1 	bl	80132f4 <puts>
    }
    
    pDev->LeakyFirst = 1;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  }
}
 800b17a:	bf00      	nop
 800b17c:	3728      	adds	r7, #40	; 0x28
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	08016300 	.word	0x08016300
 800b188:	0801631c 	.word	0x0801631c
 800b18c:	08016344 	.word	0x08016344
 800b190:	0801636c 	.word	0x0801636c
 800b194:	0801638c 	.word	0x0801638c
 800b198:	080163b0 	.word	0x080163b0
 800b19c:	080163d4 	.word	0x080163d4
 800b1a0:	0801640c 	.word	0x0801640c

0800b1a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b1ae:	2003      	movs	r0, #3
 800b1b0:	f000 f901 	bl	800b3b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b1b4:	200f      	movs	r0, #15
 800b1b6:	f7f6 ff1f 	bl	8001ff8 <HAL_InitTick>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	71fb      	strb	r3, [r7, #7]
 800b1c4:	e001      	b.n	800b1ca <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b1c6:	f7f6 fd85 	bl	8001cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b1d8:	4b06      	ldr	r3, [pc, #24]	; (800b1f4 <HAL_IncTick+0x20>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	4b06      	ldr	r3, [pc, #24]	; (800b1f8 <HAL_IncTick+0x24>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	4a04      	ldr	r2, [pc, #16]	; (800b1f8 <HAL_IncTick+0x24>)
 800b1e6:	6013      	str	r3, [r2, #0]
}
 800b1e8:	bf00      	nop
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	20000508 	.word	0x20000508
 800b1f8:	20010b1c 	.word	0x20010b1c

0800b1fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	af00      	add	r7, sp, #0
  return uwTick;
 800b200:	4b03      	ldr	r3, [pc, #12]	; (800b210 <HAL_GetTick+0x14>)
 800b202:	681b      	ldr	r3, [r3, #0]
}
 800b204:	4618      	mov	r0, r3
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	20010b1c 	.word	0x20010b1c

0800b214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b21c:	f7ff ffee 	bl	800b1fc <HAL_GetTick>
 800b220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22c:	d005      	beq.n	800b23a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b22e:	4b0a      	ldr	r3, [pc, #40]	; (800b258 <HAL_Delay+0x44>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	461a      	mov	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	4413      	add	r3, r2
 800b238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b23a:	bf00      	nop
 800b23c:	f7ff ffde 	bl	800b1fc <HAL_GetTick>
 800b240:	4602      	mov	r2, r0
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d8f7      	bhi.n	800b23c <HAL_Delay+0x28>
  {
  }
}
 800b24c:	bf00      	nop
 800b24e:	bf00      	nop
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	20000508 	.word	0x20000508

0800b25c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f003 0307 	and.w	r3, r3, #7
 800b26a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b26c:	4b0c      	ldr	r3, [pc, #48]	; (800b2a0 <__NVIC_SetPriorityGrouping+0x44>)
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b278:	4013      	ands	r3, r2
 800b27a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b28c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b28e:	4a04      	ldr	r2, [pc, #16]	; (800b2a0 <__NVIC_SetPriorityGrouping+0x44>)
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	60d3      	str	r3, [r2, #12]
}
 800b294:	bf00      	nop
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	e000ed00 	.word	0xe000ed00

0800b2a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <__NVIC_GetPriorityGrouping+0x18>)
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	0a1b      	lsrs	r3, r3, #8
 800b2ae:	f003 0307 	and.w	r3, r3, #7
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	e000ed00 	.word	0xe000ed00

0800b2c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b2ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	db0b      	blt.n	800b2ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b2d2:	79fb      	ldrb	r3, [r7, #7]
 800b2d4:	f003 021f 	and.w	r2, r3, #31
 800b2d8:	4907      	ldr	r1, [pc, #28]	; (800b2f8 <__NVIC_EnableIRQ+0x38>)
 800b2da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2de:	095b      	lsrs	r3, r3, #5
 800b2e0:	2001      	movs	r0, #1
 800b2e2:	fa00 f202 	lsl.w	r2, r0, r2
 800b2e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b2ea:	bf00      	nop
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	e000e100 	.word	0xe000e100

0800b2fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	4603      	mov	r3, r0
 800b304:	6039      	str	r1, [r7, #0]
 800b306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	db0a      	blt.n	800b326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	b2da      	uxtb	r2, r3
 800b314:	490c      	ldr	r1, [pc, #48]	; (800b348 <__NVIC_SetPriority+0x4c>)
 800b316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b31a:	0112      	lsls	r2, r2, #4
 800b31c:	b2d2      	uxtb	r2, r2
 800b31e:	440b      	add	r3, r1
 800b320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b324:	e00a      	b.n	800b33c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	4908      	ldr	r1, [pc, #32]	; (800b34c <__NVIC_SetPriority+0x50>)
 800b32c:	79fb      	ldrb	r3, [r7, #7]
 800b32e:	f003 030f 	and.w	r3, r3, #15
 800b332:	3b04      	subs	r3, #4
 800b334:	0112      	lsls	r2, r2, #4
 800b336:	b2d2      	uxtb	r2, r2
 800b338:	440b      	add	r3, r1
 800b33a:	761a      	strb	r2, [r3, #24]
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	e000e100 	.word	0xe000e100
 800b34c:	e000ed00 	.word	0xe000ed00

0800b350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b350:	b480      	push	{r7}
 800b352:	b089      	sub	sp, #36	; 0x24
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f003 0307 	and.w	r3, r3, #7
 800b362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	f1c3 0307 	rsb	r3, r3, #7
 800b36a:	2b04      	cmp	r3, #4
 800b36c:	bf28      	it	cs
 800b36e:	2304      	movcs	r3, #4
 800b370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	3304      	adds	r3, #4
 800b376:	2b06      	cmp	r3, #6
 800b378:	d902      	bls.n	800b380 <NVIC_EncodePriority+0x30>
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	3b03      	subs	r3, #3
 800b37e:	e000      	b.n	800b382 <NVIC_EncodePriority+0x32>
 800b380:	2300      	movs	r3, #0
 800b382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b384:	f04f 32ff 	mov.w	r2, #4294967295
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	fa02 f303 	lsl.w	r3, r2, r3
 800b38e:	43da      	mvns	r2, r3
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	401a      	ands	r2, r3
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b398:	f04f 31ff 	mov.w	r1, #4294967295
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	fa01 f303 	lsl.w	r3, r1, r3
 800b3a2:	43d9      	mvns	r1, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b3a8:	4313      	orrs	r3, r2
         );
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3724      	adds	r7, #36	; 0x24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff ff4c 	bl	800b25c <__NVIC_SetPriorityGrouping>
}
 800b3c4:	bf00      	nop
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
 800b3d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b3de:	f7ff ff61 	bl	800b2a4 <__NVIC_GetPriorityGrouping>
 800b3e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	68b9      	ldr	r1, [r7, #8]
 800b3e8:	6978      	ldr	r0, [r7, #20]
 800b3ea:	f7ff ffb1 	bl	800b350 <NVIC_EncodePriority>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff ff80 	bl	800b2fc <__NVIC_SetPriority>
}
 800b3fc:	bf00      	nop
 800b3fe:	3718      	adds	r7, #24
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b40e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff ff54 	bl	800b2c0 <__NVIC_EnableIRQ>
}
 800b418:	bf00      	nop
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b42a:	2300      	movs	r3, #0
 800b42c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b42e:	e17f      	b.n	800b730 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	2101      	movs	r1, #1
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	fa01 f303 	lsl.w	r3, r1, r3
 800b43c:	4013      	ands	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	f000 8171 	beq.w	800b72a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d00b      	beq.n	800b468 <HAL_GPIO_Init+0x48>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	2b02      	cmp	r3, #2
 800b456:	d007      	beq.n	800b468 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b45c:	2b11      	cmp	r3, #17
 800b45e:	d003      	beq.n	800b468 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	2b12      	cmp	r3, #18
 800b466:	d130      	bne.n	800b4ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	005b      	lsls	r3, r3, #1
 800b472:	2203      	movs	r2, #3
 800b474:	fa02 f303 	lsl.w	r3, r2, r3
 800b478:	43db      	mvns	r3, r3
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	4013      	ands	r3, r2
 800b47e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	68da      	ldr	r2, [r3, #12]
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	005b      	lsls	r3, r3, #1
 800b488:	fa02 f303 	lsl.w	r3, r2, r3
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	4313      	orrs	r3, r2
 800b490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b49e:	2201      	movs	r2, #1
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a6:	43db      	mvns	r3, r3
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	091b      	lsrs	r3, r3, #4
 800b4b4:	f003 0201 	and.w	r2, r3, #1
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d118      	bne.n	800b508 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800b4dc:	2201      	movs	r2, #1
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e4:	43db      	mvns	r3, r3
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	08db      	lsrs	r3, r3, #3
 800b4f2:	f003 0201 	and.w	r2, r3, #1
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	693a      	ldr	r2, [r7, #16]
 800b506:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	005b      	lsls	r3, r3, #1
 800b512:	2203      	movs	r2, #3
 800b514:	fa02 f303 	lsl.w	r3, r2, r3
 800b518:	43db      	mvns	r3, r3
 800b51a:	693a      	ldr	r2, [r7, #16]
 800b51c:	4013      	ands	r3, r2
 800b51e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	689a      	ldr	r2, [r3, #8]
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	005b      	lsls	r3, r3, #1
 800b528:	fa02 f303 	lsl.w	r3, r2, r3
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	4313      	orrs	r3, r2
 800b530:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d003      	beq.n	800b548 <HAL_GPIO_Init+0x128>
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	2b12      	cmp	r3, #18
 800b546:	d123      	bne.n	800b590 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	08da      	lsrs	r2, r3, #3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3208      	adds	r2, #8
 800b550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b554:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f003 0307 	and.w	r3, r3, #7
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	220f      	movs	r2, #15
 800b560:	fa02 f303 	lsl.w	r3, r2, r3
 800b564:	43db      	mvns	r3, r3
 800b566:	693a      	ldr	r2, [r7, #16]
 800b568:	4013      	ands	r3, r2
 800b56a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	691a      	ldr	r2, [r3, #16]
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	f003 0307 	and.w	r3, r3, #7
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	fa02 f303 	lsl.w	r3, r2, r3
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	4313      	orrs	r3, r2
 800b580:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	08da      	lsrs	r2, r3, #3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	3208      	adds	r2, #8
 800b58a:	6939      	ldr	r1, [r7, #16]
 800b58c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	2203      	movs	r2, #3
 800b59c:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a0:	43db      	mvns	r3, r3
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	f003 0203 	and.w	r2, r3, #3
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b8:	693a      	ldr	r2, [r7, #16]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 80ac 	beq.w	800b72a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b5d2:	4b5f      	ldr	r3, [pc, #380]	; (800b750 <HAL_GPIO_Init+0x330>)
 800b5d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5d6:	4a5e      	ldr	r2, [pc, #376]	; (800b750 <HAL_GPIO_Init+0x330>)
 800b5d8:	f043 0301 	orr.w	r3, r3, #1
 800b5dc:	6613      	str	r3, [r2, #96]	; 0x60
 800b5de:	4b5c      	ldr	r3, [pc, #368]	; (800b750 <HAL_GPIO_Init+0x330>)
 800b5e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5e2:	f003 0301 	and.w	r3, r3, #1
 800b5e6:	60bb      	str	r3, [r7, #8]
 800b5e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b5ea:	4a5a      	ldr	r2, [pc, #360]	; (800b754 <HAL_GPIO_Init+0x334>)
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	089b      	lsrs	r3, r3, #2
 800b5f0:	3302      	adds	r3, #2
 800b5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	f003 0303 	and.w	r3, r3, #3
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	220f      	movs	r2, #15
 800b602:	fa02 f303 	lsl.w	r3, r2, r3
 800b606:	43db      	mvns	r3, r3
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	4013      	ands	r3, r2
 800b60c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b614:	d025      	beq.n	800b662 <HAL_GPIO_Init+0x242>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a4f      	ldr	r2, [pc, #316]	; (800b758 <HAL_GPIO_Init+0x338>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d01f      	beq.n	800b65e <HAL_GPIO_Init+0x23e>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a4e      	ldr	r2, [pc, #312]	; (800b75c <HAL_GPIO_Init+0x33c>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d019      	beq.n	800b65a <HAL_GPIO_Init+0x23a>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a4d      	ldr	r2, [pc, #308]	; (800b760 <HAL_GPIO_Init+0x340>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d013      	beq.n	800b656 <HAL_GPIO_Init+0x236>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a4c      	ldr	r2, [pc, #304]	; (800b764 <HAL_GPIO_Init+0x344>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d00d      	beq.n	800b652 <HAL_GPIO_Init+0x232>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a4b      	ldr	r2, [pc, #300]	; (800b768 <HAL_GPIO_Init+0x348>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d007      	beq.n	800b64e <HAL_GPIO_Init+0x22e>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a4a      	ldr	r2, [pc, #296]	; (800b76c <HAL_GPIO_Init+0x34c>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d101      	bne.n	800b64a <HAL_GPIO_Init+0x22a>
 800b646:	2306      	movs	r3, #6
 800b648:	e00c      	b.n	800b664 <HAL_GPIO_Init+0x244>
 800b64a:	2307      	movs	r3, #7
 800b64c:	e00a      	b.n	800b664 <HAL_GPIO_Init+0x244>
 800b64e:	2305      	movs	r3, #5
 800b650:	e008      	b.n	800b664 <HAL_GPIO_Init+0x244>
 800b652:	2304      	movs	r3, #4
 800b654:	e006      	b.n	800b664 <HAL_GPIO_Init+0x244>
 800b656:	2303      	movs	r3, #3
 800b658:	e004      	b.n	800b664 <HAL_GPIO_Init+0x244>
 800b65a:	2302      	movs	r3, #2
 800b65c:	e002      	b.n	800b664 <HAL_GPIO_Init+0x244>
 800b65e:	2301      	movs	r3, #1
 800b660:	e000      	b.n	800b664 <HAL_GPIO_Init+0x244>
 800b662:	2300      	movs	r3, #0
 800b664:	697a      	ldr	r2, [r7, #20]
 800b666:	f002 0203 	and.w	r2, r2, #3
 800b66a:	0092      	lsls	r2, r2, #2
 800b66c:	4093      	lsls	r3, r2
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	4313      	orrs	r3, r2
 800b672:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b674:	4937      	ldr	r1, [pc, #220]	; (800b754 <HAL_GPIO_Init+0x334>)
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	089b      	lsrs	r3, r3, #2
 800b67a:	3302      	adds	r3, #2
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b682:	4b3b      	ldr	r3, [pc, #236]	; (800b770 <HAL_GPIO_Init+0x350>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	43db      	mvns	r3, r3
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	4013      	ands	r3, r2
 800b690:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d003      	beq.n	800b6a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800b69e:	693a      	ldr	r2, [r7, #16]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b6a6:	4a32      	ldr	r2, [pc, #200]	; (800b770 <HAL_GPIO_Init+0x350>)
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800b6ac:	4b30      	ldr	r3, [pc, #192]	; (800b770 <HAL_GPIO_Init+0x350>)
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	43db      	mvns	r3, r3
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d003      	beq.n	800b6d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b6d0:	4a27      	ldr	r2, [pc, #156]	; (800b770 <HAL_GPIO_Init+0x350>)
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b6d6:	4b26      	ldr	r3, [pc, #152]	; (800b770 <HAL_GPIO_Init+0x350>)
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	43db      	mvns	r3, r3
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b6fa:	4a1d      	ldr	r2, [pc, #116]	; (800b770 <HAL_GPIO_Init+0x350>)
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b700:	4b1b      	ldr	r3, [pc, #108]	; (800b770 <HAL_GPIO_Init+0x350>)
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	43db      	mvns	r3, r3
 800b70a:	693a      	ldr	r2, [r7, #16]
 800b70c:	4013      	ands	r3, r2
 800b70e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d003      	beq.n	800b724 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	4313      	orrs	r3, r2
 800b722:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b724:	4a12      	ldr	r2, [pc, #72]	; (800b770 <HAL_GPIO_Init+0x350>)
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	3301      	adds	r3, #1
 800b72e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	fa22 f303 	lsr.w	r3, r2, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f47f ae78 	bne.w	800b430 <HAL_GPIO_Init+0x10>
  }
}
 800b740:	bf00      	nop
 800b742:	bf00      	nop
 800b744:	371c      	adds	r7, #28
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	40021000 	.word	0x40021000
 800b754:	40010000 	.word	0x40010000
 800b758:	48000400 	.word	0x48000400
 800b75c:	48000800 	.word	0x48000800
 800b760:	48000c00 	.word	0x48000c00
 800b764:	48001000 	.word	0x48001000
 800b768:	48001400 	.word	0x48001400
 800b76c:	48001800 	.word	0x48001800
 800b770:	40010400 	.word	0x40010400

0800b774 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b774:	b480      	push	{r7}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b77e:	2300      	movs	r3, #0
 800b780:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800b782:	e0cd      	b.n	800b920 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800b784:	2201      	movs	r2, #1
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	fa02 f303 	lsl.w	r3, r2, r3
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	4013      	ands	r3, r2
 800b790:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 80c0 	beq.w	800b91a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800b79a:	4a68      	ldr	r2, [pc, #416]	; (800b93c <HAL_GPIO_DeInit+0x1c8>)
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	089b      	lsrs	r3, r3, #2
 800b7a0:	3302      	adds	r3, #2
 800b7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7a6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f003 0303 	and.w	r3, r3, #3
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	220f      	movs	r2, #15
 800b7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b7c2:	d025      	beq.n	800b810 <HAL_GPIO_DeInit+0x9c>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a5e      	ldr	r2, [pc, #376]	; (800b940 <HAL_GPIO_DeInit+0x1cc>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d01f      	beq.n	800b80c <HAL_GPIO_DeInit+0x98>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a5d      	ldr	r2, [pc, #372]	; (800b944 <HAL_GPIO_DeInit+0x1d0>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d019      	beq.n	800b808 <HAL_GPIO_DeInit+0x94>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a5c      	ldr	r2, [pc, #368]	; (800b948 <HAL_GPIO_DeInit+0x1d4>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d013      	beq.n	800b804 <HAL_GPIO_DeInit+0x90>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a5b      	ldr	r2, [pc, #364]	; (800b94c <HAL_GPIO_DeInit+0x1d8>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d00d      	beq.n	800b800 <HAL_GPIO_DeInit+0x8c>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a5a      	ldr	r2, [pc, #360]	; (800b950 <HAL_GPIO_DeInit+0x1dc>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d007      	beq.n	800b7fc <HAL_GPIO_DeInit+0x88>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a59      	ldr	r2, [pc, #356]	; (800b954 <HAL_GPIO_DeInit+0x1e0>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d101      	bne.n	800b7f8 <HAL_GPIO_DeInit+0x84>
 800b7f4:	2306      	movs	r3, #6
 800b7f6:	e00c      	b.n	800b812 <HAL_GPIO_DeInit+0x9e>
 800b7f8:	2307      	movs	r3, #7
 800b7fa:	e00a      	b.n	800b812 <HAL_GPIO_DeInit+0x9e>
 800b7fc:	2305      	movs	r3, #5
 800b7fe:	e008      	b.n	800b812 <HAL_GPIO_DeInit+0x9e>
 800b800:	2304      	movs	r3, #4
 800b802:	e006      	b.n	800b812 <HAL_GPIO_DeInit+0x9e>
 800b804:	2303      	movs	r3, #3
 800b806:	e004      	b.n	800b812 <HAL_GPIO_DeInit+0x9e>
 800b808:	2302      	movs	r3, #2
 800b80a:	e002      	b.n	800b812 <HAL_GPIO_DeInit+0x9e>
 800b80c:	2301      	movs	r3, #1
 800b80e:	e000      	b.n	800b812 <HAL_GPIO_DeInit+0x9e>
 800b810:	2300      	movs	r3, #0
 800b812:	697a      	ldr	r2, [r7, #20]
 800b814:	f002 0203 	and.w	r2, r2, #3
 800b818:	0092      	lsls	r2, r2, #2
 800b81a:	4093      	lsls	r3, r2
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d132      	bne.n	800b888 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800b822:	4b4d      	ldr	r3, [pc, #308]	; (800b958 <HAL_GPIO_DeInit+0x1e4>)
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	43db      	mvns	r3, r3
 800b82a:	494b      	ldr	r1, [pc, #300]	; (800b958 <HAL_GPIO_DeInit+0x1e4>)
 800b82c:	4013      	ands	r3, r2
 800b82e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800b830:	4b49      	ldr	r3, [pc, #292]	; (800b958 <HAL_GPIO_DeInit+0x1e4>)
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	43db      	mvns	r3, r3
 800b838:	4947      	ldr	r1, [pc, #284]	; (800b958 <HAL_GPIO_DeInit+0x1e4>)
 800b83a:	4013      	ands	r3, r2
 800b83c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800b83e:	4b46      	ldr	r3, [pc, #280]	; (800b958 <HAL_GPIO_DeInit+0x1e4>)
 800b840:	689a      	ldr	r2, [r3, #8]
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	43db      	mvns	r3, r3
 800b846:	4944      	ldr	r1, [pc, #272]	; (800b958 <HAL_GPIO_DeInit+0x1e4>)
 800b848:	4013      	ands	r3, r2
 800b84a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800b84c:	4b42      	ldr	r3, [pc, #264]	; (800b958 <HAL_GPIO_DeInit+0x1e4>)
 800b84e:	68da      	ldr	r2, [r3, #12]
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	43db      	mvns	r3, r3
 800b854:	4940      	ldr	r1, [pc, #256]	; (800b958 <HAL_GPIO_DeInit+0x1e4>)
 800b856:	4013      	ands	r3, r2
 800b858:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	f003 0303 	and.w	r3, r3, #3
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	220f      	movs	r2, #15
 800b864:	fa02 f303 	lsl.w	r3, r2, r3
 800b868:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800b86a:	4a34      	ldr	r2, [pc, #208]	; (800b93c <HAL_GPIO_DeInit+0x1c8>)
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	089b      	lsrs	r3, r3, #2
 800b870:	3302      	adds	r3, #2
 800b872:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	43da      	mvns	r2, r3
 800b87a:	4830      	ldr	r0, [pc, #192]	; (800b93c <HAL_GPIO_DeInit+0x1c8>)
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	089b      	lsrs	r3, r3, #2
 800b880:	400a      	ands	r2, r1
 800b882:	3302      	adds	r3, #2
 800b884:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	005b      	lsls	r3, r3, #1
 800b890:	2103      	movs	r1, #3
 800b892:	fa01 f303 	lsl.w	r3, r1, r3
 800b896:	431a      	orrs	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	08da      	lsrs	r2, r3, #3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	3208      	adds	r2, #8
 800b8a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f003 0307 	and.w	r3, r3, #7
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	220f      	movs	r2, #15
 800b8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b6:	43db      	mvns	r3, r3
 800b8b8:	697a      	ldr	r2, [r7, #20]
 800b8ba:	08d2      	lsrs	r2, r2, #3
 800b8bc:	4019      	ands	r1, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	3208      	adds	r2, #8
 800b8c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	689a      	ldr	r2, [r3, #8]
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	2103      	movs	r1, #3
 800b8d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8d4:	43db      	mvns	r3, r3
 800b8d6:	401a      	ands	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	685a      	ldr	r2, [r3, #4]
 800b8e0:	2101      	movs	r1, #1
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8e8:	43db      	mvns	r3, r3
 800b8ea:	401a      	ands	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68da      	ldr	r2, [r3, #12]
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	2103      	movs	r1, #3
 800b8fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b8fe:	43db      	mvns	r3, r3
 800b900:	401a      	ands	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b90a:	2101      	movs	r1, #1
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	fa01 f303 	lsl.w	r3, r1, r3
 800b912:	43db      	mvns	r3, r3
 800b914:	401a      	ands	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	3301      	adds	r3, #1
 800b91e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800b920:	683a      	ldr	r2, [r7, #0]
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	fa22 f303 	lsr.w	r3, r2, r3
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f47f af2b 	bne.w	800b784 <HAL_GPIO_DeInit+0x10>
  }
}
 800b92e:	bf00      	nop
 800b930:	bf00      	nop
 800b932:	371c      	adds	r7, #28
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	40010000 	.word	0x40010000
 800b940:	48000400 	.word	0x48000400
 800b944:	48000800 	.word	0x48000800
 800b948:	48000c00 	.word	0x48000c00
 800b94c:	48001000 	.word	0x48001000
 800b950:	48001400 	.word	0x48001400
 800b954:	48001800 	.word	0x48001800
 800b958:	40010400 	.word	0x40010400

0800b95c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	807b      	strh	r3, [r7, #2]
 800b968:	4613      	mov	r3, r2
 800b96a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b96c:	787b      	ldrb	r3, [r7, #1]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d003      	beq.n	800b97a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b972:	887a      	ldrh	r2, [r7, #2]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b978:	e002      	b.n	800b980 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b97a:	887a      	ldrh	r2, [r7, #2]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b99e:	887a      	ldrh	r2, [r7, #2]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	041a      	lsls	r2, r3, #16
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	43d9      	mvns	r1, r3
 800b9aa:	887b      	ldrh	r3, [r7, #2]
 800b9ac:	400b      	ands	r3, r1
 800b9ae:	431a      	orrs	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	619a      	str	r2, [r3, #24]
}
 800b9b4:	bf00      	nop
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b9ca:	4b08      	ldr	r3, [pc, #32]	; (800b9ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b9cc:	695a      	ldr	r2, [r3, #20]
 800b9ce:	88fb      	ldrh	r3, [r7, #6]
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d006      	beq.n	800b9e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b9d6:	4a05      	ldr	r2, [pc, #20]	; (800b9ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b9d8:	88fb      	ldrh	r3, [r7, #6]
 800b9da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b9dc:	88fb      	ldrh	r3, [r7, #6]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7f5 fee0 	bl	80017a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800b9e4:	bf00      	nop
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	40010400 	.word	0x40010400

0800b9f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e081      	b.n	800bb06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d106      	bne.n	800ba1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7f6 f984 	bl	8001d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2224      	movs	r2, #36	; 0x24
 800ba20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f022 0201 	bic.w	r2, r2, #1
 800ba32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ba40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	689a      	ldr	r2, [r3, #8]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d107      	bne.n	800ba6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689a      	ldr	r2, [r3, #8]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba66:	609a      	str	r2, [r3, #8]
 800ba68:	e006      	b.n	800ba78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	689a      	ldr	r2, [r3, #8]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ba76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d104      	bne.n	800ba8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	6812      	ldr	r2, [r2, #0]
 800ba94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ba98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68da      	ldr	r2, [r3, #12]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800baac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	691a      	ldr	r2, [r3, #16]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	ea42 0103 	orr.w	r1, r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	699b      	ldr	r3, [r3, #24]
 800babe:	021a      	lsls	r2, r3, #8
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	430a      	orrs	r2, r1
 800bac6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	69d9      	ldr	r1, [r3, #28]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a1a      	ldr	r2, [r3, #32]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	430a      	orrs	r2, r1
 800bad6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f042 0201 	orr.w	r2, r2, #1
 800bae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2220      	movs	r2, #32
 800baf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d101      	bne.n	800bb20 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e021      	b.n	800bb64 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2224      	movs	r2, #36	; 0x24
 800bb24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f022 0201 	bic.w	r2, r2, #1
 800bb36:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7f6 f951 	bl	8001de0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af02      	add	r7, sp, #8
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	607a      	str	r2, [r7, #4]
 800bb76:	461a      	mov	r2, r3
 800bb78:	460b      	mov	r3, r1
 800bb7a:	817b      	strh	r3, [r7, #10]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	2b20      	cmp	r3, #32
 800bb8a:	f040 80da 	bne.w	800bd42 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d101      	bne.n	800bb9c <HAL_I2C_Master_Transmit+0x30>
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e0d3      	b.n	800bd44 <HAL_I2C_Master_Transmit+0x1d8>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bba4:	f7ff fb2a 	bl	800b1fc <HAL_GetTick>
 800bba8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	2319      	movs	r3, #25
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f000 fcd6 	bl	800c568 <I2C_WaitOnFlagUntilTimeout>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e0be      	b.n	800bd44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2221      	movs	r2, #33	; 0x21
 800bbca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2210      	movs	r2, #16
 800bbd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	893a      	ldrh	r2, [r7, #8]
 800bbe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2200      	movs	r2, #0
 800bbec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	2bff      	cmp	r3, #255	; 0xff
 800bbf6:	d90e      	bls.n	800bc16 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	22ff      	movs	r2, #255	; 0xff
 800bbfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	8979      	ldrh	r1, [r7, #10]
 800bc06:	4b51      	ldr	r3, [pc, #324]	; (800bd4c <HAL_I2C_Master_Transmit+0x1e0>)
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f000 fe38 	bl	800c884 <I2C_TransferConfig>
 800bc14:	e06c      	b.n	800bcf0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	8979      	ldrh	r1, [r7, #10]
 800bc28:	4b48      	ldr	r3, [pc, #288]	; (800bd4c <HAL_I2C_Master_Transmit+0x1e0>)
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f000 fe27 	bl	800c884 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800bc36:	e05b      	b.n	800bcf0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	6a39      	ldr	r1, [r7, #32]
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f000 fcd3 	bl	800c5e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e07b      	b.n	800bd44 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	781a      	ldrb	r2, [r3, #0]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	1c5a      	adds	r2, r3, #1
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc74:	3b01      	subs	r3, #1
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d034      	beq.n	800bcf0 <HAL_I2C_Master_Transmit+0x184>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d130      	bne.n	800bcf0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	6a3b      	ldr	r3, [r7, #32]
 800bc94:	2200      	movs	r2, #0
 800bc96:	2180      	movs	r1, #128	; 0x80
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f000 fc65 	bl	800c568 <I2C_WaitOnFlagUntilTimeout>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	e04d      	b.n	800bd44 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	2bff      	cmp	r3, #255	; 0xff
 800bcb0:	d90e      	bls.n	800bcd0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	22ff      	movs	r2, #255	; 0xff
 800bcb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	8979      	ldrh	r1, [r7, #10]
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f000 fddb 	bl	800c884 <I2C_TransferConfig>
 800bcce:	e00f      	b.n	800bcf0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	8979      	ldrh	r1, [r7, #10]
 800bce2:	2300      	movs	r3, #0
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f000 fdca 	bl	800c884 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d19e      	bne.n	800bc38 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	6a39      	ldr	r1, [r7, #32]
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f000 fcb2 	bl	800c668 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e01a      	b.n	800bd44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2220      	movs	r2, #32
 800bd14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	6859      	ldr	r1, [r3, #4]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	4b0b      	ldr	r3, [pc, #44]	; (800bd50 <HAL_I2C_Master_Transmit+0x1e4>)
 800bd22:	400b      	ands	r3, r1
 800bd24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2220      	movs	r2, #32
 800bd2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e000      	b.n	800bd44 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800bd42:	2302      	movs	r3, #2
  }
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	80002000 	.word	0x80002000
 800bd50:	fe00e800 	.word	0xfe00e800

0800bd54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af02      	add	r7, sp, #8
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	607a      	str	r2, [r7, #4]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	460b      	mov	r3, r1
 800bd62:	817b      	strh	r3, [r7, #10]
 800bd64:	4613      	mov	r3, r2
 800bd66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	2b20      	cmp	r3, #32
 800bd72:	f040 80db 	bne.w	800bf2c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d101      	bne.n	800bd84 <HAL_I2C_Master_Receive+0x30>
 800bd80:	2302      	movs	r3, #2
 800bd82:	e0d4      	b.n	800bf2e <HAL_I2C_Master_Receive+0x1da>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bd8c:	f7ff fa36 	bl	800b1fc <HAL_GetTick>
 800bd90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	2319      	movs	r3, #25
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f000 fbe2 	bl	800c568 <I2C_WaitOnFlagUntilTimeout>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e0bf      	b.n	800bf2e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2222      	movs	r2, #34	; 0x22
 800bdb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2210      	movs	r2, #16
 800bdba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	893a      	ldrh	r2, [r7, #8]
 800bdce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	2bff      	cmp	r3, #255	; 0xff
 800bdde:	d90e      	bls.n	800bdfe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	22ff      	movs	r2, #255	; 0xff
 800bde4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	8979      	ldrh	r1, [r7, #10]
 800bdee:	4b52      	ldr	r3, [pc, #328]	; (800bf38 <HAL_I2C_Master_Receive+0x1e4>)
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f000 fd44 	bl	800c884 <I2C_TransferConfig>
 800bdfc:	e06d      	b.n	800beda <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be02:	b29a      	uxth	r2, r3
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	8979      	ldrh	r1, [r7, #10]
 800be10:	4b49      	ldr	r3, [pc, #292]	; (800bf38 <HAL_I2C_Master_Receive+0x1e4>)
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 fd33 	bl	800c884 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800be1e:	e05c      	b.n	800beda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be20:	697a      	ldr	r2, [r7, #20]
 800be22:	6a39      	ldr	r1, [r7, #32]
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f000 fc5b 	bl	800c6e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e07c      	b.n	800bf2e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3e:	b2d2      	uxtb	r2, r2
 800be40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be46:	1c5a      	adds	r2, r3, #1
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be50:	3b01      	subs	r3, #1
 800be52:	b29a      	uxth	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	3b01      	subs	r3, #1
 800be60:	b29a      	uxth	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d034      	beq.n	800beda <HAL_I2C_Master_Receive+0x186>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be74:	2b00      	cmp	r3, #0
 800be76:	d130      	bne.n	800beda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	6a3b      	ldr	r3, [r7, #32]
 800be7e:	2200      	movs	r2, #0
 800be80:	2180      	movs	r1, #128	; 0x80
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	f000 fb70 	bl	800c568 <I2C_WaitOnFlagUntilTimeout>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	e04d      	b.n	800bf2e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be96:	b29b      	uxth	r3, r3
 800be98:	2bff      	cmp	r3, #255	; 0xff
 800be9a:	d90e      	bls.n	800beba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	22ff      	movs	r2, #255	; 0xff
 800bea0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	8979      	ldrh	r1, [r7, #10]
 800beaa:	2300      	movs	r3, #0
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f000 fce6 	bl	800c884 <I2C_TransferConfig>
 800beb8:	e00f      	b.n	800beda <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bec8:	b2da      	uxtb	r2, r3
 800beca:	8979      	ldrh	r1, [r7, #10]
 800becc:	2300      	movs	r3, #0
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f000 fcd5 	bl	800c884 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bede:	b29b      	uxth	r3, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d19d      	bne.n	800be20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bee4:	697a      	ldr	r2, [r7, #20]
 800bee6:	6a39      	ldr	r1, [r7, #32]
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f000 fbbd 	bl	800c668 <I2C_WaitOnSTOPFlagUntilTimeout>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d001      	beq.n	800bef8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800bef4:	2301      	movs	r3, #1
 800bef6:	e01a      	b.n	800bf2e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2220      	movs	r2, #32
 800befe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6859      	ldr	r1, [r3, #4]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	4b0c      	ldr	r3, [pc, #48]	; (800bf3c <HAL_I2C_Master_Receive+0x1e8>)
 800bf0c:	400b      	ands	r3, r1
 800bf0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2220      	movs	r2, #32
 800bf14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	e000      	b.n	800bf2e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800bf2c:	2302      	movs	r3, #2
  }
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	80002400 	.word	0x80002400
 800bf3c:	fe00e800 	.word	0xfe00e800

0800bf40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af02      	add	r7, sp, #8
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	4608      	mov	r0, r1
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	4603      	mov	r3, r0
 800bf50:	817b      	strh	r3, [r7, #10]
 800bf52:	460b      	mov	r3, r1
 800bf54:	813b      	strh	r3, [r7, #8]
 800bf56:	4613      	mov	r3, r2
 800bf58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	2b20      	cmp	r3, #32
 800bf64:	f040 80f9 	bne.w	800c15a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf68:	6a3b      	ldr	r3, [r7, #32]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d002      	beq.n	800bf74 <HAL_I2C_Mem_Write+0x34>
 800bf6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d105      	bne.n	800bf80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e0ed      	b.n	800c15c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d101      	bne.n	800bf8e <HAL_I2C_Mem_Write+0x4e>
 800bf8a:	2302      	movs	r3, #2
 800bf8c:	e0e6      	b.n	800c15c <HAL_I2C_Mem_Write+0x21c>
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2201      	movs	r2, #1
 800bf92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bf96:	f7ff f931 	bl	800b1fc <HAL_GetTick>
 800bf9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	2319      	movs	r3, #25
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f000 fadd 	bl	800c568 <I2C_WaitOnFlagUntilTimeout>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e0d1      	b.n	800c15c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2221      	movs	r2, #33	; 0x21
 800bfbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2240      	movs	r2, #64	; 0x40
 800bfc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6a3a      	ldr	r2, [r7, #32]
 800bfd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bfd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bfe0:	88f8      	ldrh	r0, [r7, #6]
 800bfe2:	893a      	ldrh	r2, [r7, #8]
 800bfe4:	8979      	ldrh	r1, [r7, #10]
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	9301      	str	r3, [sp, #4]
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	4603      	mov	r3, r0
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f000 f9ed 	bl	800c3d0 <I2C_RequestMemoryWrite>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d005      	beq.n	800c008 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	e0a9      	b.n	800c15c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	2bff      	cmp	r3, #255	; 0xff
 800c010:	d90e      	bls.n	800c030 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	22ff      	movs	r2, #255	; 0xff
 800c016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	8979      	ldrh	r1, [r7, #10]
 800c020:	2300      	movs	r3, #0
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 fc2b 	bl	800c884 <I2C_TransferConfig>
 800c02e:	e00f      	b.n	800c050 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c034:	b29a      	uxth	r2, r3
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c03e:	b2da      	uxtb	r2, r3
 800c040:	8979      	ldrh	r1, [r7, #10]
 800c042:	2300      	movs	r3, #0
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f000 fc1a 	bl	800c884 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c050:	697a      	ldr	r2, [r7, #20]
 800c052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f000 fac7 	bl	800c5e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e07b      	b.n	800c15c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c068:	781a      	ldrb	r2, [r3, #0]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c074:	1c5a      	adds	r2, r3, #1
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c07e:	b29b      	uxth	r3, r3
 800c080:	3b01      	subs	r3, #1
 800c082:	b29a      	uxth	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c08c:	3b01      	subs	r3, #1
 800c08e:	b29a      	uxth	r2, r3
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c098:	b29b      	uxth	r3, r3
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d034      	beq.n	800c108 <HAL_I2C_Mem_Write+0x1c8>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d130      	bne.n	800c108 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	2180      	movs	r1, #128	; 0x80
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f000 fa59 	bl	800c568 <I2C_WaitOnFlagUntilTimeout>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d001      	beq.n	800c0c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e04d      	b.n	800c15c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	2bff      	cmp	r3, #255	; 0xff
 800c0c8:	d90e      	bls.n	800c0e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	22ff      	movs	r2, #255	; 0xff
 800c0ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	8979      	ldrh	r1, [r7, #10]
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f000 fbcf 	bl	800c884 <I2C_TransferConfig>
 800c0e6:	e00f      	b.n	800c108 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	8979      	ldrh	r1, [r7, #10]
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f000 fbbe 	bl	800c884 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d19e      	bne.n	800c050 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f000 faa6 	bl	800c668 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d001      	beq.n	800c126 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	e01a      	b.n	800c15c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2220      	movs	r2, #32
 800c12c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	6859      	ldr	r1, [r3, #4]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	4b0a      	ldr	r3, [pc, #40]	; (800c164 <HAL_I2C_Mem_Write+0x224>)
 800c13a:	400b      	ands	r3, r1
 800c13c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2220      	movs	r2, #32
 800c142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	e000      	b.n	800c15c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c15a:	2302      	movs	r3, #2
  }
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3718      	adds	r7, #24
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	fe00e800 	.word	0xfe00e800

0800c168 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b088      	sub	sp, #32
 800c16c:	af02      	add	r7, sp, #8
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	4608      	mov	r0, r1
 800c172:	4611      	mov	r1, r2
 800c174:	461a      	mov	r2, r3
 800c176:	4603      	mov	r3, r0
 800c178:	817b      	strh	r3, [r7, #10]
 800c17a:	460b      	mov	r3, r1
 800c17c:	813b      	strh	r3, [r7, #8]
 800c17e:	4613      	mov	r3, r2
 800c180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	2b20      	cmp	r3, #32
 800c18c:	f040 80fd 	bne.w	800c38a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c190:	6a3b      	ldr	r3, [r7, #32]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d002      	beq.n	800c19c <HAL_I2C_Mem_Read+0x34>
 800c196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d105      	bne.n	800c1a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e0f1      	b.n	800c38c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d101      	bne.n	800c1b6 <HAL_I2C_Mem_Read+0x4e>
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	e0ea      	b.n	800c38c <HAL_I2C_Mem_Read+0x224>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c1be:	f7ff f81d 	bl	800b1fc <HAL_GetTick>
 800c1c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	9300      	str	r3, [sp, #0]
 800c1c8:	2319      	movs	r3, #25
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f000 f9c9 	bl	800c568 <I2C_WaitOnFlagUntilTimeout>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d001      	beq.n	800c1e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e0d5      	b.n	800c38c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2222      	movs	r2, #34	; 0x22
 800c1e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2240      	movs	r2, #64	; 0x40
 800c1ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6a3a      	ldr	r2, [r7, #32]
 800c1fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c208:	88f8      	ldrh	r0, [r7, #6]
 800c20a:	893a      	ldrh	r2, [r7, #8]
 800c20c:	8979      	ldrh	r1, [r7, #10]
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	9301      	str	r3, [sp, #4]
 800c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	4603      	mov	r3, r0
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f000 f92d 	bl	800c478 <I2C_RequestMemoryRead>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d005      	beq.n	800c230 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e0ad      	b.n	800c38c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c234:	b29b      	uxth	r3, r3
 800c236:	2bff      	cmp	r3, #255	; 0xff
 800c238:	d90e      	bls.n	800c258 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	22ff      	movs	r2, #255	; 0xff
 800c23e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c244:	b2da      	uxtb	r2, r3
 800c246:	8979      	ldrh	r1, [r7, #10]
 800c248:	4b52      	ldr	r3, [pc, #328]	; (800c394 <HAL_I2C_Mem_Read+0x22c>)
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f000 fb17 	bl	800c884 <I2C_TransferConfig>
 800c256:	e00f      	b.n	800c278 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c266:	b2da      	uxtb	r2, r3
 800c268:	8979      	ldrh	r1, [r7, #10]
 800c26a:	4b4a      	ldr	r3, [pc, #296]	; (800c394 <HAL_I2C_Mem_Read+0x22c>)
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f000 fb06 	bl	800c884 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	2200      	movs	r2, #0
 800c280:	2104      	movs	r1, #4
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f000 f970 	bl	800c568 <I2C_WaitOnFlagUntilTimeout>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e07c      	b.n	800c38c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29c:	b2d2      	uxtb	r2, r2
 800c29e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a4:	1c5a      	adds	r2, r3, #1
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d034      	beq.n	800c338 <HAL_I2C_Mem_Read+0x1d0>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d130      	bne.n	800c338 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2dc:	2200      	movs	r2, #0
 800c2de:	2180      	movs	r1, #128	; 0x80
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f000 f941 	bl	800c568 <I2C_WaitOnFlagUntilTimeout>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e04d      	b.n	800c38c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	2bff      	cmp	r3, #255	; 0xff
 800c2f8:	d90e      	bls.n	800c318 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	22ff      	movs	r2, #255	; 0xff
 800c2fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c304:	b2da      	uxtb	r2, r3
 800c306:	8979      	ldrh	r1, [r7, #10]
 800c308:	2300      	movs	r3, #0
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f000 fab7 	bl	800c884 <I2C_TransferConfig>
 800c316:	e00f      	b.n	800c338 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c326:	b2da      	uxtb	r2, r3
 800c328:	8979      	ldrh	r1, [r7, #10]
 800c32a:	2300      	movs	r3, #0
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	f000 faa6 	bl	800c884 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d19a      	bne.n	800c278 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f000 f98e 	bl	800c668 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	e01a      	b.n	800c38c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2220      	movs	r2, #32
 800c35c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	6859      	ldr	r1, [r3, #4]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	4b0b      	ldr	r3, [pc, #44]	; (800c398 <HAL_I2C_Mem_Read+0x230>)
 800c36a:	400b      	ands	r3, r1
 800c36c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2220      	movs	r2, #32
 800c372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2200      	movs	r2, #0
 800c37a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	e000      	b.n	800c38c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c38a:	2302      	movs	r3, #2
  }
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3718      	adds	r7, #24
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	80002400 	.word	0x80002400
 800c398:	fe00e800 	.word	0xfe00e800

0800c39c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3aa:	b2db      	uxtb	r3, r3
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af02      	add	r7, sp, #8
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	4608      	mov	r0, r1
 800c3da:	4611      	mov	r1, r2
 800c3dc:	461a      	mov	r2, r3
 800c3de:	4603      	mov	r3, r0
 800c3e0:	817b      	strh	r3, [r7, #10]
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	813b      	strh	r3, [r7, #8]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c3ea:	88fb      	ldrh	r3, [r7, #6]
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	8979      	ldrh	r1, [r7, #10]
 800c3f0:	4b20      	ldr	r3, [pc, #128]	; (800c474 <I2C_RequestMemoryWrite+0xa4>)
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f000 fa43 	bl	800c884 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c3fe:	69fa      	ldr	r2, [r7, #28]
 800c400:	69b9      	ldr	r1, [r7, #24]
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f000 f8f0 	bl	800c5e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d001      	beq.n	800c412 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	e02c      	b.n	800c46c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c412:	88fb      	ldrh	r3, [r7, #6]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d105      	bne.n	800c424 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c418:	893b      	ldrh	r3, [r7, #8]
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	629a      	str	r2, [r3, #40]	; 0x28
 800c422:	e015      	b.n	800c450 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c424:	893b      	ldrh	r3, [r7, #8]
 800c426:	0a1b      	lsrs	r3, r3, #8
 800c428:	b29b      	uxth	r3, r3
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c432:	69fa      	ldr	r2, [r7, #28]
 800c434:	69b9      	ldr	r1, [r7, #24]
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f000 f8d6 	bl	800c5e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d001      	beq.n	800c446 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e012      	b.n	800c46c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c446:	893b      	ldrh	r3, [r7, #8]
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	2200      	movs	r2, #0
 800c458:	2180      	movs	r1, #128	; 0x80
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f000 f884 	bl	800c568 <I2C_WaitOnFlagUntilTimeout>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d001      	beq.n	800c46a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e000      	b.n	800c46c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3710      	adds	r7, #16
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	80002000 	.word	0x80002000

0800c478 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	4608      	mov	r0, r1
 800c482:	4611      	mov	r1, r2
 800c484:	461a      	mov	r2, r3
 800c486:	4603      	mov	r3, r0
 800c488:	817b      	strh	r3, [r7, #10]
 800c48a:	460b      	mov	r3, r1
 800c48c:	813b      	strh	r3, [r7, #8]
 800c48e:	4613      	mov	r3, r2
 800c490:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c492:	88fb      	ldrh	r3, [r7, #6]
 800c494:	b2da      	uxtb	r2, r3
 800c496:	8979      	ldrh	r1, [r7, #10]
 800c498:	4b20      	ldr	r3, [pc, #128]	; (800c51c <I2C_RequestMemoryRead+0xa4>)
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	2300      	movs	r3, #0
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	f000 f9f0 	bl	800c884 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c4a4:	69fa      	ldr	r2, [r7, #28]
 800c4a6:	69b9      	ldr	r1, [r7, #24]
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f000 f89d 	bl	800c5e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d001      	beq.n	800c4b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e02c      	b.n	800c512 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c4b8:	88fb      	ldrh	r3, [r7, #6]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d105      	bne.n	800c4ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c4be:	893b      	ldrh	r3, [r7, #8]
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	629a      	str	r2, [r3, #40]	; 0x28
 800c4c8:	e015      	b.n	800c4f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c4ca:	893b      	ldrh	r3, [r7, #8]
 800c4cc:	0a1b      	lsrs	r3, r3, #8
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c4d8:	69fa      	ldr	r2, [r7, #28]
 800c4da:	69b9      	ldr	r1, [r7, #24]
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f000 f883 	bl	800c5e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d001      	beq.n	800c4ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e012      	b.n	800c512 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c4ec:	893b      	ldrh	r3, [r7, #8]
 800c4ee:	b2da      	uxtb	r2, r3
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	2140      	movs	r1, #64	; 0x40
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f000 f831 	bl	800c568 <I2C_WaitOnFlagUntilTimeout>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c50c:	2301      	movs	r3, #1
 800c50e:	e000      	b.n	800c512 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c510:	2300      	movs	r3, #0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3710      	adds	r7, #16
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	80002000 	.word	0x80002000

0800c520 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	699b      	ldr	r3, [r3, #24]
 800c52e:	f003 0302 	and.w	r3, r3, #2
 800c532:	2b02      	cmp	r3, #2
 800c534:	d103      	bne.n	800c53e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2200      	movs	r2, #0
 800c53c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	699b      	ldr	r3, [r3, #24]
 800c544:	f003 0301 	and.w	r3, r3, #1
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d007      	beq.n	800c55c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	699a      	ldr	r2, [r3, #24]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f042 0201 	orr.w	r2, r2, #1
 800c55a:	619a      	str	r2, [r3, #24]
  }
}
 800c55c:	bf00      	nop
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	603b      	str	r3, [r7, #0]
 800c574:	4613      	mov	r3, r2
 800c576:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c578:	e022      	b.n	800c5c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c580:	d01e      	beq.n	800c5c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c582:	f7fe fe3b 	bl	800b1fc <HAL_GetTick>
 800c586:	4602      	mov	r2, r0
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	683a      	ldr	r2, [r7, #0]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d302      	bcc.n	800c598 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d113      	bne.n	800c5c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c59c:	f043 0220 	orr.w	r2, r3, #32
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2220      	movs	r2, #32
 800c5a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c5bc:	2301      	movs	r3, #1
 800c5be:	e00f      	b.n	800c5e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	699a      	ldr	r2, [r3, #24]
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	4013      	ands	r3, r2
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	bf0c      	ite	eq
 800c5d0:	2301      	moveq	r3, #1
 800c5d2:	2300      	movne	r3, #0
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	79fb      	ldrb	r3, [r7, #7]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d0cd      	beq.n	800c57a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c5f4:	e02c      	b.n	800c650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	68b9      	ldr	r1, [r7, #8]
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f000 f8dc 	bl	800c7b8 <I2C_IsAcknowledgeFailed>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	e02a      	b.n	800c660 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c610:	d01e      	beq.n	800c650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c612:	f7fe fdf3 	bl	800b1fc <HAL_GetTick>
 800c616:	4602      	mov	r2, r0
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	1ad3      	subs	r3, r2, r3
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d302      	bcc.n	800c628 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d113      	bne.n	800c650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c62c:	f043 0220 	orr.w	r2, r3, #32
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2220      	movs	r2, #32
 800c638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c64c:	2301      	movs	r3, #1
 800c64e:	e007      	b.n	800c660 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	699b      	ldr	r3, [r3, #24]
 800c656:	f003 0302 	and.w	r3, r3, #2
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d1cb      	bne.n	800c5f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c674:	e028      	b.n	800c6c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	68b9      	ldr	r1, [r7, #8]
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f000 f89c 	bl	800c7b8 <I2C_IsAcknowledgeFailed>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d001      	beq.n	800c68a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	e026      	b.n	800c6d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c68a:	f7fe fdb7 	bl	800b1fc <HAL_GetTick>
 800c68e:	4602      	mov	r2, r0
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	429a      	cmp	r2, r3
 800c698:	d302      	bcc.n	800c6a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d113      	bne.n	800c6c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6a4:	f043 0220 	orr.w	r2, r3, #32
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2220      	movs	r2, #32
 800c6b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e007      	b.n	800c6d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	699b      	ldr	r3, [r3, #24]
 800c6ce:	f003 0320 	and.w	r3, r3, #32
 800c6d2:	2b20      	cmp	r3, #32
 800c6d4:	d1cf      	bne.n	800c676 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c6ec:	e055      	b.n	800c79a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	68b9      	ldr	r1, [r7, #8]
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f000 f860 	bl	800c7b8 <I2C_IsAcknowledgeFailed>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	e053      	b.n	800c7aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	f003 0320 	and.w	r3, r3, #32
 800c70c:	2b20      	cmp	r3, #32
 800c70e:	d129      	bne.n	800c764 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	699b      	ldr	r3, [r3, #24]
 800c716:	f003 0304 	and.w	r3, r3, #4
 800c71a:	2b04      	cmp	r3, #4
 800c71c:	d105      	bne.n	800c72a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800c726:	2300      	movs	r3, #0
 800c728:	e03f      	b.n	800c7aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2220      	movs	r2, #32
 800c730:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6859      	ldr	r1, [r3, #4]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	4b1d      	ldr	r3, [pc, #116]	; (800c7b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800c73e:	400b      	ands	r3, r1
 800c740:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2200      	movs	r2, #0
 800c746:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2220      	movs	r2, #32
 800c74c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c760:	2301      	movs	r3, #1
 800c762:	e022      	b.n	800c7aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c764:	f7fe fd4a 	bl	800b1fc <HAL_GetTick>
 800c768:	4602      	mov	r2, r0
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	429a      	cmp	r2, r3
 800c772:	d302      	bcc.n	800c77a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10f      	bne.n	800c79a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c77e:	f043 0220 	orr.w	r2, r3, #32
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2220      	movs	r2, #32
 800c78a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	e007      	b.n	800c7aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	f003 0304 	and.w	r3, r3, #4
 800c7a4:	2b04      	cmp	r3, #4
 800c7a6:	d1a2      	bne.n	800c6ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3710      	adds	r7, #16
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	fe00e800 	.word	0xfe00e800

0800c7b8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	f003 0310 	and.w	r3, r3, #16
 800c7ce:	2b10      	cmp	r3, #16
 800c7d0:	d151      	bne.n	800c876 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c7d2:	e022      	b.n	800c81a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7da:	d01e      	beq.n	800c81a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7dc:	f7fe fd0e 	bl	800b1fc <HAL_GetTick>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d302      	bcc.n	800c7f2 <I2C_IsAcknowledgeFailed+0x3a>
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d113      	bne.n	800c81a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7f6:	f043 0220 	orr.w	r2, r3, #32
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2220      	movs	r2, #32
 800c802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c816:	2301      	movs	r3, #1
 800c818:	e02e      	b.n	800c878 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	f003 0320 	and.w	r3, r3, #32
 800c824:	2b20      	cmp	r3, #32
 800c826:	d1d5      	bne.n	800c7d4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2210      	movs	r2, #16
 800c82e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2220      	movs	r2, #32
 800c836:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f7ff fe71 	bl	800c520 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	6859      	ldr	r1, [r3, #4]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	4b0d      	ldr	r3, [pc, #52]	; (800c880 <I2C_IsAcknowledgeFailed+0xc8>)
 800c84a:	400b      	ands	r3, r1
 800c84c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c852:	f043 0204 	orr.w	r2, r3, #4
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2220      	movs	r2, #32
 800c85e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e000      	b.n	800c878 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	fe00e800 	.word	0xfe00e800

0800c884 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	607b      	str	r3, [r7, #4]
 800c88e:	460b      	mov	r3, r1
 800c890:	817b      	strh	r3, [r7, #10]
 800c892:	4613      	mov	r3, r2
 800c894:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	0d5b      	lsrs	r3, r3, #21
 800c8a0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c8a4:	4b0d      	ldr	r3, [pc, #52]	; (800c8dc <I2C_TransferConfig+0x58>)
 800c8a6:	430b      	orrs	r3, r1
 800c8a8:	43db      	mvns	r3, r3
 800c8aa:	ea02 0103 	and.w	r1, r2, r3
 800c8ae:	897b      	ldrh	r3, [r7, #10]
 800c8b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c8b4:	7a7b      	ldrb	r3, [r7, #9]
 800c8b6:	041b      	lsls	r3, r3, #16
 800c8b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c8bc:	431a      	orrs	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	431a      	orrs	r2, r3
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	431a      	orrs	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	430a      	orrs	r2, r1
 800c8cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c8ce:	bf00      	nop
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	03ff63ff 	.word	0x03ff63ff

0800c8e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b20      	cmp	r3, #32
 800c8f4:	d138      	bne.n	800c968 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d101      	bne.n	800c904 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c900:	2302      	movs	r3, #2
 800c902:	e032      	b.n	800c96a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2224      	movs	r2, #36	; 0x24
 800c910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f022 0201 	bic.w	r2, r2, #1
 800c922:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c932:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	6819      	ldr	r1, [r3, #0]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	683a      	ldr	r2, [r7, #0]
 800c940:	430a      	orrs	r2, r1
 800c942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f042 0201 	orr.w	r2, r2, #1
 800c952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2220      	movs	r2, #32
 800c958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	e000      	b.n	800c96a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c968:	2302      	movs	r3, #2
  }
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	370c      	adds	r7, #12
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c976:	b480      	push	{r7}
 800c978:	b085      	sub	sp, #20
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c986:	b2db      	uxtb	r3, r3
 800c988:	2b20      	cmp	r3, #32
 800c98a:	d139      	bne.n	800ca00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c992:	2b01      	cmp	r3, #1
 800c994:	d101      	bne.n	800c99a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c996:	2302      	movs	r3, #2
 800c998:	e033      	b.n	800ca02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2201      	movs	r2, #1
 800c99e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2224      	movs	r2, #36	; 0x24
 800c9a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f022 0201 	bic.w	r2, r2, #1
 800c9b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c9c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	021b      	lsls	r3, r3, #8
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f042 0201 	orr.w	r2, r2, #1
 800c9ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2220      	movs	r2, #32
 800c9f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e000      	b.n	800ca02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ca00:	2302      	movs	r3, #2
  }
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3714      	adds	r7, #20
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
	...

0800ca10 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ca10:	b480      	push	{r7}
 800ca12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca14:	4b05      	ldr	r3, [pc, #20]	; (800ca2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a04      	ldr	r2, [pc, #16]	; (800ca2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ca1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca1e:	6013      	str	r3, [r2, #0]
}
 800ca20:	bf00      	nop
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	40007000 	.word	0x40007000

0800ca30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ca30:	b480      	push	{r7}
 800ca32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ca34:	4b04      	ldr	r3, [pc, #16]	; (800ca48 <HAL_PWREx_GetVoltageRange+0x18>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	40007000 	.word	0x40007000

0800ca4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca5a:	d130      	bne.n	800cabe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ca5c:	4b23      	ldr	r3, [pc, #140]	; (800caec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ca64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca68:	d038      	beq.n	800cadc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ca6a:	4b20      	ldr	r3, [pc, #128]	; (800caec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ca72:	4a1e      	ldr	r2, [pc, #120]	; (800caec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ca74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ca7a:	4b1d      	ldr	r3, [pc, #116]	; (800caf0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2232      	movs	r2, #50	; 0x32
 800ca80:	fb02 f303 	mul.w	r3, r2, r3
 800ca84:	4a1b      	ldr	r2, [pc, #108]	; (800caf4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ca86:	fba2 2303 	umull	r2, r3, r2, r3
 800ca8a:	0c9b      	lsrs	r3, r3, #18
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ca90:	e002      	b.n	800ca98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	3b01      	subs	r3, #1
 800ca96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ca98:	4b14      	ldr	r3, [pc, #80]	; (800caec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ca9a:	695b      	ldr	r3, [r3, #20]
 800ca9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800caa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caa4:	d102      	bne.n	800caac <HAL_PWREx_ControlVoltageScaling+0x60>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1f2      	bne.n	800ca92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800caac:	4b0f      	ldr	r3, [pc, #60]	; (800caec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800caae:	695b      	ldr	r3, [r3, #20]
 800cab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cab8:	d110      	bne.n	800cadc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800caba:	2303      	movs	r3, #3
 800cabc:	e00f      	b.n	800cade <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800cabe:	4b0b      	ldr	r3, [pc, #44]	; (800caec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caca:	d007      	beq.n	800cadc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cacc:	4b07      	ldr	r3, [pc, #28]	; (800caec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cad4:	4a05      	ldr	r2, [pc, #20]	; (800caec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cada:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	40007000 	.word	0x40007000
 800caf0:	20000000 	.word	0x20000000
 800caf4:	431bde83 	.word	0x431bde83

0800caf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b088      	sub	sp, #32
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d101      	bne.n	800cb0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cb06:	2301      	movs	r3, #1
 800cb08:	e3d4      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb0a:	4ba1      	ldr	r3, [pc, #644]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	f003 030c 	and.w	r3, r3, #12
 800cb12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cb14:	4b9e      	ldr	r3, [pc, #632]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	f003 0303 	and.w	r3, r3, #3
 800cb1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f003 0310 	and.w	r3, r3, #16
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	f000 80e4 	beq.w	800ccf4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d007      	beq.n	800cb42 <HAL_RCC_OscConfig+0x4a>
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	2b0c      	cmp	r3, #12
 800cb36:	f040 808b 	bne.w	800cc50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	f040 8087 	bne.w	800cc50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800cb42:	4b93      	ldr	r3, [pc, #588]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f003 0302 	and.w	r3, r3, #2
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d005      	beq.n	800cb5a <HAL_RCC_OscConfig+0x62>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	699b      	ldr	r3, [r3, #24]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d101      	bne.n	800cb5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e3ac      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a1a      	ldr	r2, [r3, #32]
 800cb5e:	4b8c      	ldr	r3, [pc, #560]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f003 0308 	and.w	r3, r3, #8
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d004      	beq.n	800cb74 <HAL_RCC_OscConfig+0x7c>
 800cb6a:	4b89      	ldr	r3, [pc, #548]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb72:	e005      	b.n	800cb80 <HAL_RCC_OscConfig+0x88>
 800cb74:	4b86      	ldr	r3, [pc, #536]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cb76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb7a:	091b      	lsrs	r3, r3, #4
 800cb7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d223      	bcs.n	800cbcc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a1b      	ldr	r3, [r3, #32]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 fd73 	bl	800d674 <RCC_SetFlashLatencyFromMSIRange>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d001      	beq.n	800cb98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800cb94:	2301      	movs	r3, #1
 800cb96:	e38d      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cb98:	4b7d      	ldr	r3, [pc, #500]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a7c      	ldr	r2, [pc, #496]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cb9e:	f043 0308 	orr.w	r3, r3, #8
 800cba2:	6013      	str	r3, [r2, #0]
 800cba4:	4b7a      	ldr	r3, [pc, #488]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a1b      	ldr	r3, [r3, #32]
 800cbb0:	4977      	ldr	r1, [pc, #476]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cbb6:	4b76      	ldr	r3, [pc, #472]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	69db      	ldr	r3, [r3, #28]
 800cbc2:	021b      	lsls	r3, r3, #8
 800cbc4:	4972      	ldr	r1, [pc, #456]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	604b      	str	r3, [r1, #4]
 800cbca:	e025      	b.n	800cc18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cbcc:	4b70      	ldr	r3, [pc, #448]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a6f      	ldr	r2, [pc, #444]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cbd2:	f043 0308 	orr.w	r3, r3, #8
 800cbd6:	6013      	str	r3, [r2, #0]
 800cbd8:	4b6d      	ldr	r3, [pc, #436]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	496a      	ldr	r1, [pc, #424]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cbea:	4b69      	ldr	r3, [pc, #420]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	69db      	ldr	r3, [r3, #28]
 800cbf6:	021b      	lsls	r3, r3, #8
 800cbf8:	4965      	ldr	r1, [pc, #404]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d109      	bne.n	800cc18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a1b      	ldr	r3, [r3, #32]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 fd33 	bl	800d674 <RCC_SetFlashLatencyFromMSIRange>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d001      	beq.n	800cc18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	e34d      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cc18:	f000 fc36 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	4b5c      	ldr	r3, [pc, #368]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	091b      	lsrs	r3, r3, #4
 800cc24:	f003 030f 	and.w	r3, r3, #15
 800cc28:	495a      	ldr	r1, [pc, #360]	; (800cd94 <HAL_RCC_OscConfig+0x29c>)
 800cc2a:	5ccb      	ldrb	r3, [r1, r3]
 800cc2c:	f003 031f 	and.w	r3, r3, #31
 800cc30:	fa22 f303 	lsr.w	r3, r2, r3
 800cc34:	4a58      	ldr	r2, [pc, #352]	; (800cd98 <HAL_RCC_OscConfig+0x2a0>)
 800cc36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800cc38:	4b58      	ldr	r3, [pc, #352]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7f5 f9db 	bl	8001ff8 <HAL_InitTick>
 800cc42:	4603      	mov	r3, r0
 800cc44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800cc46:	7bfb      	ldrb	r3, [r7, #15]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d052      	beq.n	800ccf2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800cc4c:	7bfb      	ldrb	r3, [r7, #15]
 800cc4e:	e331      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	699b      	ldr	r3, [r3, #24]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d032      	beq.n	800ccbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800cc58:	4b4d      	ldr	r3, [pc, #308]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a4c      	ldr	r2, [pc, #304]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cc5e:	f043 0301 	orr.w	r3, r3, #1
 800cc62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800cc64:	f7fe faca 	bl	800b1fc <HAL_GetTick>
 800cc68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cc6a:	e008      	b.n	800cc7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cc6c:	f7fe fac6 	bl	800b1fc <HAL_GetTick>
 800cc70:	4602      	mov	r2, r0
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	2b02      	cmp	r3, #2
 800cc78:	d901      	bls.n	800cc7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	e31a      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cc7e:	4b44      	ldr	r3, [pc, #272]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f003 0302 	and.w	r3, r3, #2
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0f0      	beq.n	800cc6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cc8a:	4b41      	ldr	r3, [pc, #260]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a40      	ldr	r2, [pc, #256]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cc90:	f043 0308 	orr.w	r3, r3, #8
 800cc94:	6013      	str	r3, [r2, #0]
 800cc96:	4b3e      	ldr	r3, [pc, #248]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a1b      	ldr	r3, [r3, #32]
 800cca2:	493b      	ldr	r1, [pc, #236]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cca4:	4313      	orrs	r3, r2
 800cca6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cca8:	4b39      	ldr	r3, [pc, #228]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	69db      	ldr	r3, [r3, #28]
 800ccb4:	021b      	lsls	r3, r3, #8
 800ccb6:	4936      	ldr	r1, [pc, #216]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	604b      	str	r3, [r1, #4]
 800ccbc:	e01a      	b.n	800ccf4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ccbe:	4b34      	ldr	r3, [pc, #208]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a33      	ldr	r2, [pc, #204]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800ccc4:	f023 0301 	bic.w	r3, r3, #1
 800ccc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ccca:	f7fe fa97 	bl	800b1fc <HAL_GetTick>
 800ccce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ccd0:	e008      	b.n	800cce4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ccd2:	f7fe fa93 	bl	800b1fc <HAL_GetTick>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	1ad3      	subs	r3, r2, r3
 800ccdc:	2b02      	cmp	r3, #2
 800ccde:	d901      	bls.n	800cce4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800cce0:	2303      	movs	r3, #3
 800cce2:	e2e7      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800cce4:	4b2a      	ldr	r3, [pc, #168]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f003 0302 	and.w	r3, r3, #2
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d1f0      	bne.n	800ccd2 <HAL_RCC_OscConfig+0x1da>
 800ccf0:	e000      	b.n	800ccf4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ccf2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f003 0301 	and.w	r3, r3, #1
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d074      	beq.n	800cdea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	2b08      	cmp	r3, #8
 800cd04:	d005      	beq.n	800cd12 <HAL_RCC_OscConfig+0x21a>
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b0c      	cmp	r3, #12
 800cd0a:	d10e      	bne.n	800cd2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	2b03      	cmp	r3, #3
 800cd10:	d10b      	bne.n	800cd2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd12:	4b1f      	ldr	r3, [pc, #124]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d064      	beq.n	800cde8 <HAL_RCC_OscConfig+0x2f0>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d160      	bne.n	800cde8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e2c4      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd32:	d106      	bne.n	800cd42 <HAL_RCC_OscConfig+0x24a>
 800cd34:	4b16      	ldr	r3, [pc, #88]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a15      	ldr	r2, [pc, #84]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cd3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd3e:	6013      	str	r3, [r2, #0]
 800cd40:	e01d      	b.n	800cd7e <HAL_RCC_OscConfig+0x286>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd4a:	d10c      	bne.n	800cd66 <HAL_RCC_OscConfig+0x26e>
 800cd4c:	4b10      	ldr	r3, [pc, #64]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a0f      	ldr	r2, [pc, #60]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cd52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd56:	6013      	str	r3, [r2, #0]
 800cd58:	4b0d      	ldr	r3, [pc, #52]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a0c      	ldr	r2, [pc, #48]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cd5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd62:	6013      	str	r3, [r2, #0]
 800cd64:	e00b      	b.n	800cd7e <HAL_RCC_OscConfig+0x286>
 800cd66:	4b0a      	ldr	r3, [pc, #40]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a09      	ldr	r2, [pc, #36]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cd6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd70:	6013      	str	r3, [r2, #0]
 800cd72:	4b07      	ldr	r3, [pc, #28]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a06      	ldr	r2, [pc, #24]	; (800cd90 <HAL_RCC_OscConfig+0x298>)
 800cd78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d01c      	beq.n	800cdc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd86:	f7fe fa39 	bl	800b1fc <HAL_GetTick>
 800cd8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cd8c:	e011      	b.n	800cdb2 <HAL_RCC_OscConfig+0x2ba>
 800cd8e:	bf00      	nop
 800cd90:	40021000 	.word	0x40021000
 800cd94:	08016438 	.word	0x08016438
 800cd98:	20000000 	.word	0x20000000
 800cd9c:	20000504 	.word	0x20000504
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cda0:	f7fe fa2c 	bl	800b1fc <HAL_GetTick>
 800cda4:	4602      	mov	r2, r0
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	2b64      	cmp	r3, #100	; 0x64
 800cdac:	d901      	bls.n	800cdb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	e280      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cdb2:	4baf      	ldr	r3, [pc, #700]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d0f0      	beq.n	800cda0 <HAL_RCC_OscConfig+0x2a8>
 800cdbe:	e014      	b.n	800cdea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdc0:	f7fe fa1c 	bl	800b1fc <HAL_GetTick>
 800cdc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cdc6:	e008      	b.n	800cdda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cdc8:	f7fe fa18 	bl	800b1fc <HAL_GetTick>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	2b64      	cmp	r3, #100	; 0x64
 800cdd4:	d901      	bls.n	800cdda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	e26c      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cdda:	4ba5      	ldr	r3, [pc, #660]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1f0      	bne.n	800cdc8 <HAL_RCC_OscConfig+0x2d0>
 800cde6:	e000      	b.n	800cdea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cde8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f003 0302 	and.w	r3, r3, #2
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d060      	beq.n	800ceb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	2b04      	cmp	r3, #4
 800cdfa:	d005      	beq.n	800ce08 <HAL_RCC_OscConfig+0x310>
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	2b0c      	cmp	r3, #12
 800ce00:	d119      	bne.n	800ce36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d116      	bne.n	800ce36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ce08:	4b99      	ldr	r3, [pc, #612]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d005      	beq.n	800ce20 <HAL_RCC_OscConfig+0x328>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d101      	bne.n	800ce20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e249      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce20:	4b93      	ldr	r3, [pc, #588]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	061b      	lsls	r3, r3, #24
 800ce2e:	4990      	ldr	r1, [pc, #576]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ce30:	4313      	orrs	r3, r2
 800ce32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ce34:	e040      	b.n	800ceb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d023      	beq.n	800ce86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ce3e:	4b8c      	ldr	r3, [pc, #560]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a8b      	ldr	r2, [pc, #556]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ce44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce4a:	f7fe f9d7 	bl	800b1fc <HAL_GetTick>
 800ce4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ce50:	e008      	b.n	800ce64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce52:	f7fe f9d3 	bl	800b1fc <HAL_GetTick>
 800ce56:	4602      	mov	r2, r0
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d901      	bls.n	800ce64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ce60:	2303      	movs	r3, #3
 800ce62:	e227      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ce64:	4b82      	ldr	r3, [pc, #520]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d0f0      	beq.n	800ce52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce70:	4b7f      	ldr	r3, [pc, #508]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	691b      	ldr	r3, [r3, #16]
 800ce7c:	061b      	lsls	r3, r3, #24
 800ce7e:	497c      	ldr	r1, [pc, #496]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ce80:	4313      	orrs	r3, r2
 800ce82:	604b      	str	r3, [r1, #4]
 800ce84:	e018      	b.n	800ceb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce86:	4b7a      	ldr	r3, [pc, #488]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a79      	ldr	r2, [pc, #484]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ce8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce92:	f7fe f9b3 	bl	800b1fc <HAL_GetTick>
 800ce96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ce98:	e008      	b.n	800ceac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce9a:	f7fe f9af 	bl	800b1fc <HAL_GetTick>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d901      	bls.n	800ceac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800cea8:	2303      	movs	r3, #3
 800ceaa:	e203      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ceac:	4b70      	ldr	r3, [pc, #448]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1f0      	bne.n	800ce9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f003 0308 	and.w	r3, r3, #8
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d03c      	beq.n	800cf3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	695b      	ldr	r3, [r3, #20]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d01c      	beq.n	800cf06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cecc:	4b68      	ldr	r3, [pc, #416]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ced2:	4a67      	ldr	r2, [pc, #412]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800ced4:	f043 0301 	orr.w	r3, r3, #1
 800ced8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cedc:	f7fe f98e 	bl	800b1fc <HAL_GetTick>
 800cee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cee2:	e008      	b.n	800cef6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cee4:	f7fe f98a 	bl	800b1fc <HAL_GetTick>
 800cee8:	4602      	mov	r2, r0
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	1ad3      	subs	r3, r2, r3
 800ceee:	2b02      	cmp	r3, #2
 800cef0:	d901      	bls.n	800cef6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800cef2:	2303      	movs	r3, #3
 800cef4:	e1de      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cef6:	4b5e      	ldr	r3, [pc, #376]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cefc:	f003 0302 	and.w	r3, r3, #2
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d0ef      	beq.n	800cee4 <HAL_RCC_OscConfig+0x3ec>
 800cf04:	e01b      	b.n	800cf3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cf06:	4b5a      	ldr	r3, [pc, #360]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cf08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf0c:	4a58      	ldr	r2, [pc, #352]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cf0e:	f023 0301 	bic.w	r3, r3, #1
 800cf12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf16:	f7fe f971 	bl	800b1fc <HAL_GetTick>
 800cf1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cf1c:	e008      	b.n	800cf30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cf1e:	f7fe f96d 	bl	800b1fc <HAL_GetTick>
 800cf22:	4602      	mov	r2, r0
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	2b02      	cmp	r3, #2
 800cf2a:	d901      	bls.n	800cf30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	e1c1      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cf30:	4b4f      	ldr	r3, [pc, #316]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cf32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf36:	f003 0302 	and.w	r3, r3, #2
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1ef      	bne.n	800cf1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f003 0304 	and.w	r3, r3, #4
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 80a6 	beq.w	800d098 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800cf50:	4b47      	ldr	r3, [pc, #284]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cf52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10d      	bne.n	800cf78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf5c:	4b44      	ldr	r3, [pc, #272]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cf5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf60:	4a43      	ldr	r2, [pc, #268]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cf62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf66:	6593      	str	r3, [r2, #88]	; 0x58
 800cf68:	4b41      	ldr	r3, [pc, #260]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cf6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf70:	60bb      	str	r3, [r7, #8]
 800cf72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cf74:	2301      	movs	r3, #1
 800cf76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cf78:	4b3e      	ldr	r3, [pc, #248]	; (800d074 <HAL_RCC_OscConfig+0x57c>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d118      	bne.n	800cfb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cf84:	4b3b      	ldr	r3, [pc, #236]	; (800d074 <HAL_RCC_OscConfig+0x57c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a3a      	ldr	r2, [pc, #232]	; (800d074 <HAL_RCC_OscConfig+0x57c>)
 800cf8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf90:	f7fe f934 	bl	800b1fc <HAL_GetTick>
 800cf94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cf96:	e008      	b.n	800cfaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf98:	f7fe f930 	bl	800b1fc <HAL_GetTick>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	2b02      	cmp	r3, #2
 800cfa4:	d901      	bls.n	800cfaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800cfa6:	2303      	movs	r3, #3
 800cfa8:	e184      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cfaa:	4b32      	ldr	r3, [pc, #200]	; (800d074 <HAL_RCC_OscConfig+0x57c>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d0f0      	beq.n	800cf98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d108      	bne.n	800cfd0 <HAL_RCC_OscConfig+0x4d8>
 800cfbe:	4b2c      	ldr	r3, [pc, #176]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cfc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfc4:	4a2a      	ldr	r2, [pc, #168]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cfc6:	f043 0301 	orr.w	r3, r3, #1
 800cfca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cfce:	e024      	b.n	800d01a <HAL_RCC_OscConfig+0x522>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	2b05      	cmp	r3, #5
 800cfd6:	d110      	bne.n	800cffa <HAL_RCC_OscConfig+0x502>
 800cfd8:	4b25      	ldr	r3, [pc, #148]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cfda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfde:	4a24      	ldr	r2, [pc, #144]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cfe0:	f043 0304 	orr.w	r3, r3, #4
 800cfe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cfe8:	4b21      	ldr	r3, [pc, #132]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cfea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfee:	4a20      	ldr	r2, [pc, #128]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cff0:	f043 0301 	orr.w	r3, r3, #1
 800cff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cff8:	e00f      	b.n	800d01a <HAL_RCC_OscConfig+0x522>
 800cffa:	4b1d      	ldr	r3, [pc, #116]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800cffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d000:	4a1b      	ldr	r2, [pc, #108]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800d002:	f023 0301 	bic.w	r3, r3, #1
 800d006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d00a:	4b19      	ldr	r3, [pc, #100]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800d00c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d010:	4a17      	ldr	r2, [pc, #92]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800d012:	f023 0304 	bic.w	r3, r3, #4
 800d016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d016      	beq.n	800d050 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d022:	f7fe f8eb 	bl	800b1fc <HAL_GetTick>
 800d026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d028:	e00a      	b.n	800d040 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d02a:	f7fe f8e7 	bl	800b1fc <HAL_GetTick>
 800d02e:	4602      	mov	r2, r0
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	f241 3288 	movw	r2, #5000	; 0x1388
 800d038:	4293      	cmp	r3, r2
 800d03a:	d901      	bls.n	800d040 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800d03c:	2303      	movs	r3, #3
 800d03e:	e139      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d040:	4b0b      	ldr	r3, [pc, #44]	; (800d070 <HAL_RCC_OscConfig+0x578>)
 800d042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d046:	f003 0302 	and.w	r3, r3, #2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d0ed      	beq.n	800d02a <HAL_RCC_OscConfig+0x532>
 800d04e:	e01a      	b.n	800d086 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d050:	f7fe f8d4 	bl	800b1fc <HAL_GetTick>
 800d054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d056:	e00f      	b.n	800d078 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d058:	f7fe f8d0 	bl	800b1fc <HAL_GetTick>
 800d05c:	4602      	mov	r2, r0
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	f241 3288 	movw	r2, #5000	; 0x1388
 800d066:	4293      	cmp	r3, r2
 800d068:	d906      	bls.n	800d078 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800d06a:	2303      	movs	r3, #3
 800d06c:	e122      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
 800d06e:	bf00      	nop
 800d070:	40021000 	.word	0x40021000
 800d074:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d078:	4b90      	ldr	r3, [pc, #576]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d07e:	f003 0302 	and.w	r3, r3, #2
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1e8      	bne.n	800d058 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d086:	7ffb      	ldrb	r3, [r7, #31]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d105      	bne.n	800d098 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d08c:	4b8b      	ldr	r3, [pc, #556]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d08e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d090:	4a8a      	ldr	r2, [pc, #552]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d096:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f000 8108 	beq.w	800d2b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	f040 80d0 	bne.w	800d24c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800d0ac:	4b83      	ldr	r3, [pc, #524]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f003 0203 	and.w	r2, r3, #3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d130      	bne.n	800d122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d127      	bne.n	800d122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d11f      	bne.n	800d122 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d0ec:	2a07      	cmp	r2, #7
 800d0ee:	bf14      	ite	ne
 800d0f0:	2201      	movne	r2, #1
 800d0f2:	2200      	moveq	r2, #0
 800d0f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d113      	bne.n	800d122 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d104:	085b      	lsrs	r3, r3, #1
 800d106:	3b01      	subs	r3, #1
 800d108:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d109      	bne.n	800d122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d118:	085b      	lsrs	r3, r3, #1
 800d11a:	3b01      	subs	r3, #1
 800d11c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d11e:	429a      	cmp	r2, r3
 800d120:	d06e      	beq.n	800d200 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	2b0c      	cmp	r3, #12
 800d126:	d069      	beq.n	800d1fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d128:	4b64      	ldr	r3, [pc, #400]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d130:	2b00      	cmp	r3, #0
 800d132:	d105      	bne.n	800d140 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800d134:	4b61      	ldr	r3, [pc, #388]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	e0b7      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d144:	4b5d      	ldr	r3, [pc, #372]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a5c      	ldr	r2, [pc, #368]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d14a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d14e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d150:	f7fe f854 	bl	800b1fc <HAL_GetTick>
 800d154:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d156:	e008      	b.n	800d16a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d158:	f7fe f850 	bl	800b1fc <HAL_GetTick>
 800d15c:	4602      	mov	r2, r0
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	2b02      	cmp	r3, #2
 800d164:	d901      	bls.n	800d16a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800d166:	2303      	movs	r3, #3
 800d168:	e0a4      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d16a:	4b54      	ldr	r3, [pc, #336]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1f0      	bne.n	800d158 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d176:	4b51      	ldr	r3, [pc, #324]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d178:	68da      	ldr	r2, [r3, #12]
 800d17a:	4b51      	ldr	r3, [pc, #324]	; (800d2c0 <HAL_RCC_OscConfig+0x7c8>)
 800d17c:	4013      	ands	r3, r2
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d186:	3a01      	subs	r2, #1
 800d188:	0112      	lsls	r2, r2, #4
 800d18a:	4311      	orrs	r1, r2
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d190:	0212      	lsls	r2, r2, #8
 800d192:	4311      	orrs	r1, r2
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d198:	0852      	lsrs	r2, r2, #1
 800d19a:	3a01      	subs	r2, #1
 800d19c:	0552      	lsls	r2, r2, #21
 800d19e:	4311      	orrs	r1, r2
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d1a4:	0852      	lsrs	r2, r2, #1
 800d1a6:	3a01      	subs	r2, #1
 800d1a8:	0652      	lsls	r2, r2, #25
 800d1aa:	4311      	orrs	r1, r2
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d1b0:	0912      	lsrs	r2, r2, #4
 800d1b2:	0452      	lsls	r2, r2, #17
 800d1b4:	430a      	orrs	r2, r1
 800d1b6:	4941      	ldr	r1, [pc, #260]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d1bc:	4b3f      	ldr	r3, [pc, #252]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a3e      	ldr	r2, [pc, #248]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d1c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d1c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d1c8:	4b3c      	ldr	r3, [pc, #240]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d1ca:	68db      	ldr	r3, [r3, #12]
 800d1cc:	4a3b      	ldr	r2, [pc, #236]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d1ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d1d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d1d4:	f7fe f812 	bl	800b1fc <HAL_GetTick>
 800d1d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d1da:	e008      	b.n	800d1ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1dc:	f7fe f80e 	bl	800b1fc <HAL_GetTick>
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	2b02      	cmp	r3, #2
 800d1e8:	d901      	bls.n	800d1ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800d1ea:	2303      	movs	r3, #3
 800d1ec:	e062      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d1ee:	4b33      	ldr	r3, [pc, #204]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d0f0      	beq.n	800d1dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d1fa:	e05a      	b.n	800d2b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e059      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d200:	4b2e      	ldr	r3, [pc, #184]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d152      	bne.n	800d2b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d20c:	4b2b      	ldr	r3, [pc, #172]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a2a      	ldr	r2, [pc, #168]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d216:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d218:	4b28      	ldr	r3, [pc, #160]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d21a:	68db      	ldr	r3, [r3, #12]
 800d21c:	4a27      	ldr	r2, [pc, #156]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d21e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d222:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d224:	f7fd ffea 	bl	800b1fc <HAL_GetTick>
 800d228:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d22a:	e008      	b.n	800d23e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d22c:	f7fd ffe6 	bl	800b1fc <HAL_GetTick>
 800d230:	4602      	mov	r2, r0
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	1ad3      	subs	r3, r2, r3
 800d236:	2b02      	cmp	r3, #2
 800d238:	d901      	bls.n	800d23e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800d23a:	2303      	movs	r3, #3
 800d23c:	e03a      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d23e:	4b1f      	ldr	r3, [pc, #124]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d246:	2b00      	cmp	r3, #0
 800d248:	d0f0      	beq.n	800d22c <HAL_RCC_OscConfig+0x734>
 800d24a:	e032      	b.n	800d2b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	2b0c      	cmp	r3, #12
 800d250:	d02d      	beq.n	800d2ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d252:	4b1a      	ldr	r3, [pc, #104]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a19      	ldr	r2, [pc, #100]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d25c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800d25e:	4b17      	ldr	r3, [pc, #92]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800d266:	2b00      	cmp	r3, #0
 800d268:	d105      	bne.n	800d276 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d26a:	4b14      	ldr	r3, [pc, #80]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	4a13      	ldr	r2, [pc, #76]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d270:	f023 0303 	bic.w	r3, r3, #3
 800d274:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800d276:	4b11      	ldr	r3, [pc, #68]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	4a10      	ldr	r2, [pc, #64]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d27c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d284:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d286:	f7fd ffb9 	bl	800b1fc <HAL_GetTick>
 800d28a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d28c:	e008      	b.n	800d2a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d28e:	f7fd ffb5 	bl	800b1fc <HAL_GetTick>
 800d292:	4602      	mov	r2, r0
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	2b02      	cmp	r3, #2
 800d29a:	d901      	bls.n	800d2a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800d29c:	2303      	movs	r3, #3
 800d29e:	e009      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d2a0:	4b06      	ldr	r3, [pc, #24]	; (800d2bc <HAL_RCC_OscConfig+0x7c4>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1f0      	bne.n	800d28e <HAL_RCC_OscConfig+0x796>
 800d2ac:	e001      	b.n	800d2b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e000      	b.n	800d2b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800d2b2:	2300      	movs	r3, #0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3720      	adds	r7, #32
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	40021000 	.word	0x40021000
 800d2c0:	f99d808c 	.word	0xf99d808c

0800d2c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d101      	bne.n	800d2d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e0c8      	b.n	800d46a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d2d8:	4b66      	ldr	r3, [pc, #408]	; (800d474 <HAL_RCC_ClockConfig+0x1b0>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f003 0307 	and.w	r3, r3, #7
 800d2e0:	683a      	ldr	r2, [r7, #0]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d910      	bls.n	800d308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d2e6:	4b63      	ldr	r3, [pc, #396]	; (800d474 <HAL_RCC_ClockConfig+0x1b0>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f023 0207 	bic.w	r2, r3, #7
 800d2ee:	4961      	ldr	r1, [pc, #388]	; (800d474 <HAL_RCC_ClockConfig+0x1b0>)
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2f6:	4b5f      	ldr	r3, [pc, #380]	; (800d474 <HAL_RCC_ClockConfig+0x1b0>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	683a      	ldr	r2, [r7, #0]
 800d300:	429a      	cmp	r2, r3
 800d302:	d001      	beq.n	800d308 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d304:	2301      	movs	r3, #1
 800d306:	e0b0      	b.n	800d46a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f003 0301 	and.w	r3, r3, #1
 800d310:	2b00      	cmp	r3, #0
 800d312:	d04c      	beq.n	800d3ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	2b03      	cmp	r3, #3
 800d31a:	d107      	bne.n	800d32c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d31c:	4b56      	ldr	r3, [pc, #344]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d324:	2b00      	cmp	r3, #0
 800d326:	d121      	bne.n	800d36c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800d328:	2301      	movs	r3, #1
 800d32a:	e09e      	b.n	800d46a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	2b02      	cmp	r3, #2
 800d332:	d107      	bne.n	800d344 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d334:	4b50      	ldr	r3, [pc, #320]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d115      	bne.n	800d36c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800d340:	2301      	movs	r3, #1
 800d342:	e092      	b.n	800d46a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d107      	bne.n	800d35c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d34c:	4b4a      	ldr	r3, [pc, #296]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 0302 	and.w	r3, r3, #2
 800d354:	2b00      	cmp	r3, #0
 800d356:	d109      	bne.n	800d36c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800d358:	2301      	movs	r3, #1
 800d35a:	e086      	b.n	800d46a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d35c:	4b46      	ldr	r3, [pc, #280]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d364:	2b00      	cmp	r3, #0
 800d366:	d101      	bne.n	800d36c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800d368:	2301      	movs	r3, #1
 800d36a:	e07e      	b.n	800d46a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d36c:	4b42      	ldr	r3, [pc, #264]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	f023 0203 	bic.w	r2, r3, #3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	493f      	ldr	r1, [pc, #252]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d37a:	4313      	orrs	r3, r2
 800d37c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d37e:	f7fd ff3d 	bl	800b1fc <HAL_GetTick>
 800d382:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d384:	e00a      	b.n	800d39c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d386:	f7fd ff39 	bl	800b1fc <HAL_GetTick>
 800d38a:	4602      	mov	r2, r0
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	1ad3      	subs	r3, r2, r3
 800d390:	f241 3288 	movw	r2, #5000	; 0x1388
 800d394:	4293      	cmp	r3, r2
 800d396:	d901      	bls.n	800d39c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800d398:	2303      	movs	r3, #3
 800d39a:	e066      	b.n	800d46a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d39c:	4b36      	ldr	r3, [pc, #216]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	f003 020c 	and.w	r2, r3, #12
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d1eb      	bne.n	800d386 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 0302 	and.w	r3, r3, #2
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d008      	beq.n	800d3cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d3ba:	4b2f      	ldr	r3, [pc, #188]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	492c      	ldr	r1, [pc, #176]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d3cc:	4b29      	ldr	r3, [pc, #164]	; (800d474 <HAL_RCC_ClockConfig+0x1b0>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f003 0307 	and.w	r3, r3, #7
 800d3d4:	683a      	ldr	r2, [r7, #0]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d210      	bcs.n	800d3fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d3da:	4b26      	ldr	r3, [pc, #152]	; (800d474 <HAL_RCC_ClockConfig+0x1b0>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f023 0207 	bic.w	r2, r3, #7
 800d3e2:	4924      	ldr	r1, [pc, #144]	; (800d474 <HAL_RCC_ClockConfig+0x1b0>)
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d3ea:	4b22      	ldr	r3, [pc, #136]	; (800d474 <HAL_RCC_ClockConfig+0x1b0>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f003 0307 	and.w	r3, r3, #7
 800d3f2:	683a      	ldr	r2, [r7, #0]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d001      	beq.n	800d3fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e036      	b.n	800d46a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f003 0304 	and.w	r3, r3, #4
 800d404:	2b00      	cmp	r3, #0
 800d406:	d008      	beq.n	800d41a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d408:	4b1b      	ldr	r3, [pc, #108]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	4918      	ldr	r1, [pc, #96]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d416:	4313      	orrs	r3, r2
 800d418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f003 0308 	and.w	r3, r3, #8
 800d422:	2b00      	cmp	r3, #0
 800d424:	d009      	beq.n	800d43a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d426:	4b14      	ldr	r3, [pc, #80]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	00db      	lsls	r3, r3, #3
 800d434:	4910      	ldr	r1, [pc, #64]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d436:	4313      	orrs	r3, r2
 800d438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d43a:	f000 f825 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800d43e:	4602      	mov	r2, r0
 800d440:	4b0d      	ldr	r3, [pc, #52]	; (800d478 <HAL_RCC_ClockConfig+0x1b4>)
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	091b      	lsrs	r3, r3, #4
 800d446:	f003 030f 	and.w	r3, r3, #15
 800d44a:	490c      	ldr	r1, [pc, #48]	; (800d47c <HAL_RCC_ClockConfig+0x1b8>)
 800d44c:	5ccb      	ldrb	r3, [r1, r3]
 800d44e:	f003 031f 	and.w	r3, r3, #31
 800d452:	fa22 f303 	lsr.w	r3, r2, r3
 800d456:	4a0a      	ldr	r2, [pc, #40]	; (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d45a:	4b0a      	ldr	r3, [pc, #40]	; (800d484 <HAL_RCC_ClockConfig+0x1c0>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4618      	mov	r0, r3
 800d460:	f7f4 fdca 	bl	8001ff8 <HAL_InitTick>
 800d464:	4603      	mov	r3, r0
 800d466:	72fb      	strb	r3, [r7, #11]

  return status;
 800d468:	7afb      	ldrb	r3, [r7, #11]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3710      	adds	r7, #16
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	40022000 	.word	0x40022000
 800d478:	40021000 	.word	0x40021000
 800d47c:	08016438 	.word	0x08016438
 800d480:	20000000 	.word	0x20000000
 800d484:	20000504 	.word	0x20000504

0800d488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d488:	b480      	push	{r7}
 800d48a:	b089      	sub	sp, #36	; 0x24
 800d48c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d48e:	2300      	movs	r3, #0
 800d490:	61fb      	str	r3, [r7, #28]
 800d492:	2300      	movs	r3, #0
 800d494:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d496:	4b3e      	ldr	r3, [pc, #248]	; (800d590 <HAL_RCC_GetSysClockFreq+0x108>)
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	f003 030c 	and.w	r3, r3, #12
 800d49e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d4a0:	4b3b      	ldr	r3, [pc, #236]	; (800d590 <HAL_RCC_GetSysClockFreq+0x108>)
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	f003 0303 	and.w	r3, r3, #3
 800d4a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d005      	beq.n	800d4bc <HAL_RCC_GetSysClockFreq+0x34>
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	2b0c      	cmp	r3, #12
 800d4b4:	d121      	bne.n	800d4fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d11e      	bne.n	800d4fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d4bc:	4b34      	ldr	r3, [pc, #208]	; (800d590 <HAL_RCC_GetSysClockFreq+0x108>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f003 0308 	and.w	r3, r3, #8
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d107      	bne.n	800d4d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d4c8:	4b31      	ldr	r3, [pc, #196]	; (800d590 <HAL_RCC_GetSysClockFreq+0x108>)
 800d4ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d4ce:	0a1b      	lsrs	r3, r3, #8
 800d4d0:	f003 030f 	and.w	r3, r3, #15
 800d4d4:	61fb      	str	r3, [r7, #28]
 800d4d6:	e005      	b.n	800d4e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d4d8:	4b2d      	ldr	r3, [pc, #180]	; (800d590 <HAL_RCC_GetSysClockFreq+0x108>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	091b      	lsrs	r3, r3, #4
 800d4de:	f003 030f 	and.w	r3, r3, #15
 800d4e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d4e4:	4a2b      	ldr	r2, [pc, #172]	; (800d594 <HAL_RCC_GetSysClockFreq+0x10c>)
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10d      	bne.n	800d510 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d4f8:	e00a      	b.n	800d510 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	2b04      	cmp	r3, #4
 800d4fe:	d102      	bne.n	800d506 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d500:	4b25      	ldr	r3, [pc, #148]	; (800d598 <HAL_RCC_GetSysClockFreq+0x110>)
 800d502:	61bb      	str	r3, [r7, #24]
 800d504:	e004      	b.n	800d510 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	2b08      	cmp	r3, #8
 800d50a:	d101      	bne.n	800d510 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d50c:	4b23      	ldr	r3, [pc, #140]	; (800d59c <HAL_RCC_GetSysClockFreq+0x114>)
 800d50e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	2b0c      	cmp	r3, #12
 800d514:	d134      	bne.n	800d580 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d516:	4b1e      	ldr	r3, [pc, #120]	; (800d590 <HAL_RCC_GetSysClockFreq+0x108>)
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	f003 0303 	and.w	r3, r3, #3
 800d51e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	2b02      	cmp	r3, #2
 800d524:	d003      	beq.n	800d52e <HAL_RCC_GetSysClockFreq+0xa6>
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2b03      	cmp	r3, #3
 800d52a:	d003      	beq.n	800d534 <HAL_RCC_GetSysClockFreq+0xac>
 800d52c:	e005      	b.n	800d53a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d52e:	4b1a      	ldr	r3, [pc, #104]	; (800d598 <HAL_RCC_GetSysClockFreq+0x110>)
 800d530:	617b      	str	r3, [r7, #20]
      break;
 800d532:	e005      	b.n	800d540 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d534:	4b19      	ldr	r3, [pc, #100]	; (800d59c <HAL_RCC_GetSysClockFreq+0x114>)
 800d536:	617b      	str	r3, [r7, #20]
      break;
 800d538:	e002      	b.n	800d540 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	617b      	str	r3, [r7, #20]
      break;
 800d53e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d540:	4b13      	ldr	r3, [pc, #76]	; (800d590 <HAL_RCC_GetSysClockFreq+0x108>)
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	091b      	lsrs	r3, r3, #4
 800d546:	f003 0307 	and.w	r3, r3, #7
 800d54a:	3301      	adds	r3, #1
 800d54c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d54e:	4b10      	ldr	r3, [pc, #64]	; (800d590 <HAL_RCC_GetSysClockFreq+0x108>)
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	0a1b      	lsrs	r3, r3, #8
 800d554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d558:	697a      	ldr	r2, [r7, #20]
 800d55a:	fb02 f203 	mul.w	r2, r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	fbb2 f3f3 	udiv	r3, r2, r3
 800d564:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d566:	4b0a      	ldr	r3, [pc, #40]	; (800d590 <HAL_RCC_GetSysClockFreq+0x108>)
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	0e5b      	lsrs	r3, r3, #25
 800d56c:	f003 0303 	and.w	r3, r3, #3
 800d570:	3301      	adds	r3, #1
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d576:	697a      	ldr	r2, [r7, #20]
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d57e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d580:	69bb      	ldr	r3, [r7, #24]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3724      	adds	r7, #36	; 0x24
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	40021000 	.word	0x40021000
 800d594:	08016450 	.word	0x08016450
 800d598:	00f42400 	.word	0x00f42400
 800d59c:	007a1200 	.word	0x007a1200

0800d5a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d5a4:	4b03      	ldr	r3, [pc, #12]	; (800d5b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	20000000 	.word	0x20000000

0800d5b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d5bc:	f7ff fff0 	bl	800d5a0 <HAL_RCC_GetHCLKFreq>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	4b06      	ldr	r3, [pc, #24]	; (800d5dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	0a1b      	lsrs	r3, r3, #8
 800d5c8:	f003 0307 	and.w	r3, r3, #7
 800d5cc:	4904      	ldr	r1, [pc, #16]	; (800d5e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d5ce:	5ccb      	ldrb	r3, [r1, r3]
 800d5d0:	f003 031f 	and.w	r3, r3, #31
 800d5d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	40021000 	.word	0x40021000
 800d5e0:	08016448 	.word	0x08016448

0800d5e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d5e8:	f7ff ffda 	bl	800d5a0 <HAL_RCC_GetHCLKFreq>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	4b06      	ldr	r3, [pc, #24]	; (800d608 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	0adb      	lsrs	r3, r3, #11
 800d5f4:	f003 0307 	and.w	r3, r3, #7
 800d5f8:	4904      	ldr	r1, [pc, #16]	; (800d60c <HAL_RCC_GetPCLK2Freq+0x28>)
 800d5fa:	5ccb      	ldrb	r3, [r1, r3]
 800d5fc:	f003 031f 	and.w	r3, r3, #31
 800d600:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d604:	4618      	mov	r0, r3
 800d606:	bd80      	pop	{r7, pc}
 800d608:	40021000 	.word	0x40021000
 800d60c:	08016448 	.word	0x08016448

0800d610 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	220f      	movs	r2, #15
 800d61e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800d620:	4b12      	ldr	r3, [pc, #72]	; (800d66c <HAL_RCC_GetClockConfig+0x5c>)
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	f003 0203 	and.w	r2, r3, #3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800d62c:	4b0f      	ldr	r3, [pc, #60]	; (800d66c <HAL_RCC_GetClockConfig+0x5c>)
 800d62e:	689b      	ldr	r3, [r3, #8]
 800d630:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800d638:	4b0c      	ldr	r3, [pc, #48]	; (800d66c <HAL_RCC_GetClockConfig+0x5c>)
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800d644:	4b09      	ldr	r3, [pc, #36]	; (800d66c <HAL_RCC_GetClockConfig+0x5c>)
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	08db      	lsrs	r3, r3, #3
 800d64a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d652:	4b07      	ldr	r3, [pc, #28]	; (800d670 <HAL_RCC_GetClockConfig+0x60>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f003 0207 	and.w	r2, r3, #7
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	601a      	str	r2, [r3, #0]
}
 800d65e:	bf00      	nop
 800d660:	370c      	adds	r7, #12
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	40021000 	.word	0x40021000
 800d670:	40022000 	.word	0x40022000

0800d674 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b086      	sub	sp, #24
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d67c:	2300      	movs	r3, #0
 800d67e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d680:	4b2a      	ldr	r3, [pc, #168]	; (800d72c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d003      	beq.n	800d694 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d68c:	f7ff f9d0 	bl	800ca30 <HAL_PWREx_GetVoltageRange>
 800d690:	6178      	str	r0, [r7, #20]
 800d692:	e014      	b.n	800d6be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d694:	4b25      	ldr	r3, [pc, #148]	; (800d72c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d698:	4a24      	ldr	r2, [pc, #144]	; (800d72c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d69a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d69e:	6593      	str	r3, [r2, #88]	; 0x58
 800d6a0:	4b22      	ldr	r3, [pc, #136]	; (800d72c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d6a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6a8:	60fb      	str	r3, [r7, #12]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d6ac:	f7ff f9c0 	bl	800ca30 <HAL_PWREx_GetVoltageRange>
 800d6b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d6b2:	4b1e      	ldr	r3, [pc, #120]	; (800d72c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6b6:	4a1d      	ldr	r2, [pc, #116]	; (800d72c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d6b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6c4:	d10b      	bne.n	800d6de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b80      	cmp	r3, #128	; 0x80
 800d6ca:	d919      	bls.n	800d700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2ba0      	cmp	r3, #160	; 0xa0
 800d6d0:	d902      	bls.n	800d6d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	613b      	str	r3, [r7, #16]
 800d6d6:	e013      	b.n	800d700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d6d8:	2301      	movs	r3, #1
 800d6da:	613b      	str	r3, [r7, #16]
 800d6dc:	e010      	b.n	800d700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b80      	cmp	r3, #128	; 0x80
 800d6e2:	d902      	bls.n	800d6ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800d6e4:	2303      	movs	r3, #3
 800d6e6:	613b      	str	r3, [r7, #16]
 800d6e8:	e00a      	b.n	800d700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b80      	cmp	r3, #128	; 0x80
 800d6ee:	d102      	bne.n	800d6f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	613b      	str	r3, [r7, #16]
 800d6f4:	e004      	b.n	800d700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b70      	cmp	r3, #112	; 0x70
 800d6fa:	d101      	bne.n	800d700 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d700:	4b0b      	ldr	r3, [pc, #44]	; (800d730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f023 0207 	bic.w	r2, r3, #7
 800d708:	4909      	ldr	r1, [pc, #36]	; (800d730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d710:	4b07      	ldr	r3, [pc, #28]	; (800d730 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f003 0307 	and.w	r3, r3, #7
 800d718:	693a      	ldr	r2, [r7, #16]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d001      	beq.n	800d722 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800d71e:	2301      	movs	r3, #1
 800d720:	e000      	b.n	800d724 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800d722:	2300      	movs	r3, #0
}
 800d724:	4618      	mov	r0, r3
 800d726:	3718      	adds	r7, #24
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	40021000 	.word	0x40021000
 800d730:	40022000 	.word	0x40022000

0800d734 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b086      	sub	sp, #24
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d73c:	2300      	movs	r3, #0
 800d73e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d740:	2300      	movs	r3, #0
 800d742:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d041      	beq.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d754:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d758:	d02a      	beq.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800d75a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d75e:	d824      	bhi.n	800d7aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d764:	d008      	beq.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d76a:	d81e      	bhi.n	800d7aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00a      	beq.n	800d786 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d774:	d010      	beq.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d776:	e018      	b.n	800d7aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d778:	4b86      	ldr	r3, [pc, #536]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	4a85      	ldr	r2, [pc, #532]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d77e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d782:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d784:	e015      	b.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	3304      	adds	r3, #4
 800d78a:	2100      	movs	r1, #0
 800d78c:	4618      	mov	r0, r3
 800d78e:	f001 f835 	bl	800e7fc <RCCEx_PLLSAI1_Config>
 800d792:	4603      	mov	r3, r0
 800d794:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d796:	e00c      	b.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	3320      	adds	r3, #32
 800d79c:	2100      	movs	r1, #0
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f001 f920 	bl	800e9e4 <RCCEx_PLLSAI2_Config>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d7a8:	e003      	b.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	74fb      	strb	r3, [r7, #19]
      break;
 800d7ae:	e000      	b.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800d7b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d7b2:	7cfb      	ldrb	r3, [r7, #19]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10b      	bne.n	800d7d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d7b8:	4b76      	ldr	r3, [pc, #472]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7c6:	4973      	ldr	r1, [pc, #460]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d7ce:	e001      	b.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7d0:	7cfb      	ldrb	r3, [r7, #19]
 800d7d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d041      	beq.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d7e8:	d02a      	beq.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800d7ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d7ee:	d824      	bhi.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800d7f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d7f4:	d008      	beq.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d7f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d7fa:	d81e      	bhi.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d00a      	beq.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800d800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d804:	d010      	beq.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800d806:	e018      	b.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d808:	4b62      	ldr	r3, [pc, #392]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	4a61      	ldr	r2, [pc, #388]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d80e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d812:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d814:	e015      	b.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	3304      	adds	r3, #4
 800d81a:	2100      	movs	r1, #0
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 ffed 	bl	800e7fc <RCCEx_PLLSAI1_Config>
 800d822:	4603      	mov	r3, r0
 800d824:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d826:	e00c      	b.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	3320      	adds	r3, #32
 800d82c:	2100      	movs	r1, #0
 800d82e:	4618      	mov	r0, r3
 800d830:	f001 f8d8 	bl	800e9e4 <RCCEx_PLLSAI2_Config>
 800d834:	4603      	mov	r3, r0
 800d836:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d838:	e003      	b.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d83a:	2301      	movs	r3, #1
 800d83c:	74fb      	strb	r3, [r7, #19]
      break;
 800d83e:	e000      	b.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800d840:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d842:	7cfb      	ldrb	r3, [r7, #19]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d10b      	bne.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d848:	4b52      	ldr	r3, [pc, #328]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d84a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d84e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d856:	494f      	ldr	r1, [pc, #316]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d858:	4313      	orrs	r3, r2
 800d85a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d85e:	e001      	b.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d860:	7cfb      	ldrb	r3, [r7, #19]
 800d862:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f000 80a0 	beq.w	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d872:	2300      	movs	r3, #0
 800d874:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d876:	4b47      	ldr	r3, [pc, #284]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d87a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d101      	bne.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800d882:	2301      	movs	r3, #1
 800d884:	e000      	b.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800d886:	2300      	movs	r3, #0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00d      	beq.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d88c:	4b41      	ldr	r3, [pc, #260]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d88e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d890:	4a40      	ldr	r2, [pc, #256]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d896:	6593      	str	r3, [r2, #88]	; 0x58
 800d898:	4b3e      	ldr	r3, [pc, #248]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d89c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8a0:	60bb      	str	r3, [r7, #8]
 800d8a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d8a8:	4b3b      	ldr	r3, [pc, #236]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a3a      	ldr	r2, [pc, #232]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d8ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d8b4:	f7fd fca2 	bl	800b1fc <HAL_GetTick>
 800d8b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d8ba:	e009      	b.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8bc:	f7fd fc9e 	bl	800b1fc <HAL_GetTick>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d902      	bls.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	74fb      	strb	r3, [r7, #19]
        break;
 800d8ce:	e005      	b.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d8d0:	4b31      	ldr	r3, [pc, #196]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d0ef      	beq.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800d8dc:	7cfb      	ldrb	r3, [r7, #19]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d15c      	bne.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d8e2:	4b2c      	ldr	r3, [pc, #176]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d01f      	beq.n	800d934 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d019      	beq.n	800d934 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d900:	4b24      	ldr	r3, [pc, #144]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d90a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d90c:	4b21      	ldr	r3, [pc, #132]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d912:	4a20      	ldr	r2, [pc, #128]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d91c:	4b1d      	ldr	r3, [pc, #116]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d922:	4a1c      	ldr	r2, [pc, #112]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d92c:	4a19      	ldr	r2, [pc, #100]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d016      	beq.n	800d96c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d93e:	f7fd fc5d 	bl	800b1fc <HAL_GetTick>
 800d942:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d944:	e00b      	b.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d946:	f7fd fc59 	bl	800b1fc <HAL_GetTick>
 800d94a:	4602      	mov	r2, r0
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	f241 3288 	movw	r2, #5000	; 0x1388
 800d954:	4293      	cmp	r3, r2
 800d956:	d902      	bls.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800d958:	2303      	movs	r3, #3
 800d95a:	74fb      	strb	r3, [r7, #19]
            break;
 800d95c:	e006      	b.n	800d96c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d95e:	4b0d      	ldr	r3, [pc, #52]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d964:	f003 0302 	and.w	r3, r3, #2
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0ec      	beq.n	800d946 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800d96c:	7cfb      	ldrb	r3, [r7, #19]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d10c      	bne.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d972:	4b08      	ldr	r3, [pc, #32]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d982:	4904      	ldr	r1, [pc, #16]	; (800d994 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d984:	4313      	orrs	r3, r2
 800d986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d98a:	e009      	b.n	800d9a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d98c:	7cfb      	ldrb	r3, [r7, #19]
 800d98e:	74bb      	strb	r3, [r7, #18]
 800d990:	e006      	b.n	800d9a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800d992:	bf00      	nop
 800d994:	40021000 	.word	0x40021000
 800d998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d99c:	7cfb      	ldrb	r3, [r7, #19]
 800d99e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d9a0:	7c7b      	ldrb	r3, [r7, #17]
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d105      	bne.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9a6:	4b9e      	ldr	r3, [pc, #632]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9aa:	4a9d      	ldr	r2, [pc, #628]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00a      	beq.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d9be:	4b98      	ldr	r3, [pc, #608]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9c4:	f023 0203 	bic.w	r2, r3, #3
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9cc:	4994      	ldr	r1, [pc, #592]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f003 0302 	and.w	r3, r3, #2
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00a      	beq.n	800d9f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d9e0:	4b8f      	ldr	r3, [pc, #572]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9e6:	f023 020c 	bic.w	r2, r3, #12
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ee:	498c      	ldr	r1, [pc, #560]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f003 0304 	and.w	r3, r3, #4
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00a      	beq.n	800da18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800da02:	4b87      	ldr	r3, [pc, #540]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da10:	4983      	ldr	r1, [pc, #524]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da12:	4313      	orrs	r3, r2
 800da14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f003 0308 	and.w	r3, r3, #8
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00a      	beq.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800da24:	4b7e      	ldr	r3, [pc, #504]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da32:	497b      	ldr	r1, [pc, #492]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da34:	4313      	orrs	r3, r2
 800da36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f003 0310 	and.w	r3, r3, #16
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00a      	beq.n	800da5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800da46:	4b76      	ldr	r3, [pc, #472]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da54:	4972      	ldr	r1, [pc, #456]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da56:	4313      	orrs	r3, r2
 800da58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f003 0320 	and.w	r3, r3, #32
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00a      	beq.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800da68:	4b6d      	ldr	r3, [pc, #436]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da76:	496a      	ldr	r1, [pc, #424]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da78:	4313      	orrs	r3, r2
 800da7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da86:	2b00      	cmp	r3, #0
 800da88:	d00a      	beq.n	800daa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800da8a:	4b65      	ldr	r3, [pc, #404]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da98:	4961      	ldr	r1, [pc, #388]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800da9a:	4313      	orrs	r3, r2
 800da9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00a      	beq.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800daac:	4b5c      	ldr	r3, [pc, #368]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800daae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daba:	4959      	ldr	r1, [pc, #356]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dabc:	4313      	orrs	r3, r2
 800dabe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00a      	beq.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dace:	4b54      	ldr	r3, [pc, #336]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dad4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dadc:	4950      	ldr	r1, [pc, #320]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dade:	4313      	orrs	r3, r2
 800dae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00a      	beq.n	800db06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800daf0:	4b4b      	ldr	r3, [pc, #300]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800daf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daf6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dafe:	4948      	ldr	r1, [pc, #288]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800db00:	4313      	orrs	r3, r2
 800db02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00a      	beq.n	800db28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800db12:	4b43      	ldr	r3, [pc, #268]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800db14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db20:	493f      	ldr	r1, [pc, #252]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800db22:	4313      	orrs	r3, r2
 800db24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db30:	2b00      	cmp	r3, #0
 800db32:	d028      	beq.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800db34:	4b3a      	ldr	r3, [pc, #232]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800db36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db42:	4937      	ldr	r1, [pc, #220]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800db44:	4313      	orrs	r3, r2
 800db46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db52:	d106      	bne.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800db54:	4b32      	ldr	r3, [pc, #200]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	4a31      	ldr	r2, [pc, #196]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800db5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db5e:	60d3      	str	r3, [r2, #12]
 800db60:	e011      	b.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800db6a:	d10c      	bne.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	3304      	adds	r3, #4
 800db70:	2101      	movs	r1, #1
 800db72:	4618      	mov	r0, r3
 800db74:	f000 fe42 	bl	800e7fc <RCCEx_PLLSAI1_Config>
 800db78:	4603      	mov	r3, r0
 800db7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800db7c:	7cfb      	ldrb	r3, [r7, #19]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d001      	beq.n	800db86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800db82:	7cfb      	ldrb	r3, [r7, #19]
 800db84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d028      	beq.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800db92:	4b23      	ldr	r3, [pc, #140]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800db94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba0:	491f      	ldr	r1, [pc, #124]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dba2:	4313      	orrs	r3, r2
 800dba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dbb0:	d106      	bne.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dbb2:	4b1b      	ldr	r3, [pc, #108]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	4a1a      	ldr	r2, [pc, #104]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dbb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbbc:	60d3      	str	r3, [r2, #12]
 800dbbe:	e011      	b.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dbc8:	d10c      	bne.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	2101      	movs	r1, #1
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f000 fe13 	bl	800e7fc <RCCEx_PLLSAI1_Config>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800dbda:	7cfb      	ldrb	r3, [r7, #19]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800dbe0:	7cfb      	ldrb	r3, [r7, #19]
 800dbe2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d02b      	beq.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dbf0:	4b0b      	ldr	r3, [pc, #44]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dbf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbfe:	4908      	ldr	r1, [pc, #32]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dc00:	4313      	orrs	r3, r2
 800dc02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dc0e:	d109      	bne.n	800dc24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dc10:	4b03      	ldr	r3, [pc, #12]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	4a02      	ldr	r2, [pc, #8]	; (800dc20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dc16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc1a:	60d3      	str	r3, [r2, #12]
 800dc1c:	e014      	b.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800dc1e:	bf00      	nop
 800dc20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dc2c:	d10c      	bne.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	3304      	adds	r3, #4
 800dc32:	2101      	movs	r1, #1
 800dc34:	4618      	mov	r0, r3
 800dc36:	f000 fde1 	bl	800e7fc <RCCEx_PLLSAI1_Config>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800dc3e:	7cfb      	ldrb	r3, [r7, #19]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d001      	beq.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800dc44:	7cfb      	ldrb	r3, [r7, #19]
 800dc46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d02f      	beq.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800dc54:	4b2b      	ldr	r3, [pc, #172]	; (800dd04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dc56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc62:	4928      	ldr	r1, [pc, #160]	; (800dd04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dc64:	4313      	orrs	r3, r2
 800dc66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc72:	d10d      	bne.n	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	3304      	adds	r3, #4
 800dc78:	2102      	movs	r1, #2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f000 fdbe 	bl	800e7fc <RCCEx_PLLSAI1_Config>
 800dc80:	4603      	mov	r3, r0
 800dc82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800dc84:	7cfb      	ldrb	r3, [r7, #19]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d014      	beq.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800dc8a:	7cfb      	ldrb	r3, [r7, #19]
 800dc8c:	74bb      	strb	r3, [r7, #18]
 800dc8e:	e011      	b.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc98:	d10c      	bne.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	3320      	adds	r3, #32
 800dc9e:	2102      	movs	r1, #2
 800dca0:	4618      	mov	r0, r3
 800dca2:	f000 fe9f 	bl	800e9e4 <RCCEx_PLLSAI2_Config>
 800dca6:	4603      	mov	r3, r0
 800dca8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800dcaa:	7cfb      	ldrb	r3, [r7, #19]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d001      	beq.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800dcb0:	7cfb      	ldrb	r3, [r7, #19]
 800dcb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00a      	beq.n	800dcd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dcc0:	4b10      	ldr	r3, [pc, #64]	; (800dd04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dcc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcc6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcce:	490d      	ldr	r1, [pc, #52]	; (800dd04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d00b      	beq.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dce2:	4b08      	ldr	r3, [pc, #32]	; (800dd04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dce8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcf2:	4904      	ldr	r1, [pc, #16]	; (800dd04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800dcfa:	7cbb      	ldrb	r3, [r7, #18]
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3718      	adds	r7, #24
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	40021000 	.word	0x40021000

0800dd08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b088      	sub	sp, #32
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800dd10:	2300      	movs	r3, #0
 800dd12:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd1a:	d13e      	bne.n	800dd9a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800dd1c:	4bbe      	ldr	r3, [pc, #760]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800dd1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd26:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd2e:	d028      	beq.n	800dd82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd36:	f200 853e 	bhi.w	800e7b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd40:	d005      	beq.n	800dd4e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd48:	d00e      	beq.n	800dd68 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800dd4a:	f000 bd34 	b.w	800e7b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800dd4e:	4bb2      	ldr	r3, [pc, #712]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800dd50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd54:	f003 0302 	and.w	r3, r3, #2
 800dd58:	2b02      	cmp	r3, #2
 800dd5a:	f040 852e 	bne.w	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 800dd5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd62:	61fb      	str	r3, [r7, #28]
      break;
 800dd64:	f000 bd29 	b.w	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800dd68:	4bab      	ldr	r3, [pc, #684]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800dd6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dd6e:	f003 0302 	and.w	r3, r3, #2
 800dd72:	2b02      	cmp	r3, #2
 800dd74:	f040 8523 	bne.w	800e7be <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 800dd78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800dd7c:	61fb      	str	r3, [r7, #28]
      break;
 800dd7e:	f000 bd1e 	b.w	800e7be <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dd82:	4ba5      	ldr	r3, [pc, #660]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd8e:	f040 8518 	bne.w	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 800dd92:	4ba2      	ldr	r3, [pc, #648]	; (800e01c <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 800dd94:	61fb      	str	r3, [r7, #28]
      break;
 800dd96:	f000 bd14 	b.w	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dd9a:	4b9f      	ldr	r3, [pc, #636]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	f003 0303 	and.w	r3, r3, #3
 800dda2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d036      	beq.n	800de18 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	2b03      	cmp	r3, #3
 800ddae:	d840      	bhi.n	800de32 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d003      	beq.n	800ddbe <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	d020      	beq.n	800ddfe <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800ddbc:	e039      	b.n	800de32 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ddbe:	4b96      	ldr	r3, [pc, #600]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f003 0302 	and.w	r3, r3, #2
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d116      	bne.n	800ddf8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ddca:	4b93      	ldr	r3, [pc, #588]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f003 0308 	and.w	r3, r3, #8
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d005      	beq.n	800dde2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800ddd6:	4b90      	ldr	r3, [pc, #576]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	091b      	lsrs	r3, r3, #4
 800dddc:	f003 030f 	and.w	r3, r3, #15
 800dde0:	e005      	b.n	800ddee <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800dde2:	4b8d      	ldr	r3, [pc, #564]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800dde4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dde8:	0a1b      	lsrs	r3, r3, #8
 800ddea:	f003 030f 	and.w	r3, r3, #15
 800ddee:	4a8c      	ldr	r2, [pc, #560]	; (800e020 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 800ddf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800ddf6:	e01f      	b.n	800de38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	61bb      	str	r3, [r7, #24]
      break;
 800ddfc:	e01c      	b.n	800de38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ddfe:	4b86      	ldr	r3, [pc, #536]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de0a:	d102      	bne.n	800de12 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800de0c:	4b85      	ldr	r3, [pc, #532]	; (800e024 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 800de0e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800de10:	e012      	b.n	800de38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800de12:	2300      	movs	r3, #0
 800de14:	61bb      	str	r3, [r7, #24]
      break;
 800de16:	e00f      	b.n	800de38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800de18:	4b7f      	ldr	r3, [pc, #508]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de24:	d102      	bne.n	800de2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800de26:	4b80      	ldr	r3, [pc, #512]	; (800e028 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 800de28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800de2a:	e005      	b.n	800de38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800de2c:	2300      	movs	r3, #0
 800de2e:	61bb      	str	r3, [r7, #24]
      break;
 800de30:	e002      	b.n	800de38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800de32:	2300      	movs	r3, #0
 800de34:	61bb      	str	r3, [r7, #24]
      break;
 800de36:	bf00      	nop
    }

    switch(PeriphClk)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800de3e:	f000 80d2 	beq.w	800dfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800de48:	f200 84bd 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800de52:	f000 80c8 	beq.w	800dfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800de5c:	f200 84b3 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de66:	f000 835b 	beq.w	800e520 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de70:	f200 84a9 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de7a:	f000 847f 	beq.w	800e77c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de84:	f200 849f 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de8e:	f000 82ce 	beq.w	800e42e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de98:	f200 8495 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dea2:	f000 80a0 	beq.w	800dfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800deac:	f200 848b 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800deb6:	f000 808f 	beq.w	800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dec0:	f200 8481 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800deca:	d07e      	beq.n	800dfca <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ded2:	f200 8478 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dedc:	f000 8404 	beq.w	800e6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dee6:	f200 846e 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800def0:	f000 83b0 	beq.w	800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800defa:	f200 8464 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df04:	f000 837a 	beq.w	800e5fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df0e:	f200 845a 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2b80      	cmp	r3, #128	; 0x80
 800df16:	f000 8345 	beq.w	800e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2b80      	cmp	r3, #128	; 0x80
 800df1e:	f200 8452 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2b20      	cmp	r3, #32
 800df26:	d84b      	bhi.n	800dfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	f000 844b 	beq.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	3b01      	subs	r3, #1
 800df34:	2b1f      	cmp	r3, #31
 800df36:	f200 8446 	bhi.w	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800df3a:	a201      	add	r2, pc, #4	; (adr r2, 800df40 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 800df3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df40:	0800e12b 	.word	0x0800e12b
 800df44:	0800e19b 	.word	0x0800e19b
 800df48:	0800e7c7 	.word	0x0800e7c7
 800df4c:	0800e22f 	.word	0x0800e22f
 800df50:	0800e7c7 	.word	0x0800e7c7
 800df54:	0800e7c7 	.word	0x0800e7c7
 800df58:	0800e7c7 	.word	0x0800e7c7
 800df5c:	0800e2a7 	.word	0x0800e2a7
 800df60:	0800e7c7 	.word	0x0800e7c7
 800df64:	0800e7c7 	.word	0x0800e7c7
 800df68:	0800e7c7 	.word	0x0800e7c7
 800df6c:	0800e7c7 	.word	0x0800e7c7
 800df70:	0800e7c7 	.word	0x0800e7c7
 800df74:	0800e7c7 	.word	0x0800e7c7
 800df78:	0800e7c7 	.word	0x0800e7c7
 800df7c:	0800e32b 	.word	0x0800e32b
 800df80:	0800e7c7 	.word	0x0800e7c7
 800df84:	0800e7c7 	.word	0x0800e7c7
 800df88:	0800e7c7 	.word	0x0800e7c7
 800df8c:	0800e7c7 	.word	0x0800e7c7
 800df90:	0800e7c7 	.word	0x0800e7c7
 800df94:	0800e7c7 	.word	0x0800e7c7
 800df98:	0800e7c7 	.word	0x0800e7c7
 800df9c:	0800e7c7 	.word	0x0800e7c7
 800dfa0:	0800e7c7 	.word	0x0800e7c7
 800dfa4:	0800e7c7 	.word	0x0800e7c7
 800dfa8:	0800e7c7 	.word	0x0800e7c7
 800dfac:	0800e7c7 	.word	0x0800e7c7
 800dfb0:	0800e7c7 	.word	0x0800e7c7
 800dfb4:	0800e7c7 	.word	0x0800e7c7
 800dfb8:	0800e7c7 	.word	0x0800e7c7
 800dfbc:	0800e3ad 	.word	0x0800e3ad
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b40      	cmp	r3, #64	; 0x40
 800dfc4:	f000 82bd 	beq.w	800e542 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800dfc8:	e3fd      	b.n	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800dfca:	69b9      	ldr	r1, [r7, #24]
 800dfcc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800dfd0:	f000 fde6 	bl	800eba0 <RCCEx_GetSAIxPeriphCLKFreq>
 800dfd4:	61f8      	str	r0, [r7, #28]
      break;
 800dfd6:	e3f7      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800dfd8:	69b9      	ldr	r1, [r7, #24]
 800dfda:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800dfde:	f000 fddf 	bl	800eba0 <RCCEx_GetSAIxPeriphCLKFreq>
 800dfe2:	61f8      	str	r0, [r7, #28]
      break;
 800dfe4:	e3f0      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800dfe6:	4b0c      	ldr	r3, [pc, #48]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800dfe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfec:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800dff0:	613b      	str	r3, [r7, #16]
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800dff8:	d018      	beq.n	800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e000:	f200 808b 	bhi.w	800e11a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e00a:	d059      	beq.n	800e0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e012:	d028      	beq.n	800e066 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 800e014:	e081      	b.n	800e11a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800e016:	bf00      	nop
 800e018:	40021000 	.word	0x40021000
 800e01c:	0003d090 	.word	0x0003d090
 800e020:	08016450 	.word	0x08016450
 800e024:	00f42400 	.word	0x00f42400
 800e028:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800e02c:	4bae      	ldr	r3, [pc, #696]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f003 0302 	and.w	r3, r3, #2
 800e034:	2b02      	cmp	r3, #2
 800e036:	d172      	bne.n	800e11e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800e038:	4bab      	ldr	r3, [pc, #684]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f003 0308 	and.w	r3, r3, #8
 800e040:	2b00      	cmp	r3, #0
 800e042:	d005      	beq.n	800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 800e044:	4ba8      	ldr	r3, [pc, #672]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	091b      	lsrs	r3, r3, #4
 800e04a:	f003 030f 	and.w	r3, r3, #15
 800e04e:	e005      	b.n	800e05c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800e050:	4ba5      	ldr	r3, [pc, #660]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e056:	0a1b      	lsrs	r3, r3, #8
 800e058:	f003 030f 	and.w	r3, r3, #15
 800e05c:	4aa3      	ldr	r2, [pc, #652]	; (800e2ec <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800e05e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e062:	61fb      	str	r3, [r7, #28]
          break;
 800e064:	e05b      	b.n	800e11e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800e066:	4ba0      	ldr	r3, [pc, #640]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e06e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e072:	d156      	bne.n	800e122 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800e074:	4b9c      	ldr	r3, [pc, #624]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e07c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e080:	d14f      	bne.n	800e122 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e082:	4b99      	ldr	r3, [pc, #612]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	0a1b      	lsrs	r3, r3, #8
 800e088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e08c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	fb02 f203 	mul.w	r2, r2, r3
 800e096:	4b94      	ldr	r3, [pc, #592]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	091b      	lsrs	r3, r3, #4
 800e09c:	f003 0307 	and.w	r3, r3, #7
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0a6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800e0a8:	4b8f      	ldr	r3, [pc, #572]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	0d5b      	lsrs	r3, r3, #21
 800e0ae:	f003 0303 	and.w	r3, r3, #3
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	005b      	lsls	r3, r3, #1
 800e0b6:	69ba      	ldr	r2, [r7, #24]
 800e0b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0bc:	61fb      	str	r3, [r7, #28]
          break;
 800e0be:	e030      	b.n	800e122 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800e0c0:	4b89      	ldr	r3, [pc, #548]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0cc:	d12b      	bne.n	800e126 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800e0ce:	4b86      	ldr	r3, [pc, #536]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e0d0:	691b      	ldr	r3, [r3, #16]
 800e0d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e0d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0da:	d124      	bne.n	800e126 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800e0dc:	4b82      	ldr	r3, [pc, #520]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e0de:	691b      	ldr	r3, [r3, #16]
 800e0e0:	0a1b      	lsrs	r3, r3, #8
 800e0e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0e6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	68fa      	ldr	r2, [r7, #12]
 800e0ec:	fb02 f203 	mul.w	r2, r2, r3
 800e0f0:	4b7d      	ldr	r3, [pc, #500]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	091b      	lsrs	r3, r3, #4
 800e0f6:	f003 0307 	and.w	r3, r3, #7
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e100:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800e102:	4b79      	ldr	r3, [pc, #484]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e104:	691b      	ldr	r3, [r3, #16]
 800e106:	0d5b      	lsrs	r3, r3, #21
 800e108:	f003 0303 	and.w	r3, r3, #3
 800e10c:	3301      	adds	r3, #1
 800e10e:	005b      	lsls	r3, r3, #1
 800e110:	69ba      	ldr	r2, [r7, #24]
 800e112:	fbb2 f3f3 	udiv	r3, r2, r3
 800e116:	61fb      	str	r3, [r7, #28]
          break;
 800e118:	e005      	b.n	800e126 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 800e11a:	bf00      	nop
 800e11c:	e354      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e11e:	bf00      	nop
 800e120:	e352      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e122:	bf00      	nop
 800e124:	e350      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e126:	bf00      	nop
        break;
 800e128:	e34e      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800e12a:	4b6f      	ldr	r3, [pc, #444]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e130:	f003 0303 	and.w	r3, r3, #3
 800e134:	613b      	str	r3, [r7, #16]
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	2b03      	cmp	r3, #3
 800e13a:	d828      	bhi.n	800e18e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800e13c:	a201      	add	r2, pc, #4	; (adr r2, 800e144 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800e13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e142:	bf00      	nop
 800e144:	0800e155 	.word	0x0800e155
 800e148:	0800e15d 	.word	0x0800e15d
 800e14c:	0800e165 	.word	0x0800e165
 800e150:	0800e179 	.word	0x0800e179
          frequency = HAL_RCC_GetPCLK2Freq();
 800e154:	f7ff fa46 	bl	800d5e4 <HAL_RCC_GetPCLK2Freq>
 800e158:	61f8      	str	r0, [r7, #28]
          break;
 800e15a:	e01d      	b.n	800e198 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 800e15c:	f7ff f994 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800e160:	61f8      	str	r0, [r7, #28]
          break;
 800e162:	e019      	b.n	800e198 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e164:	4b60      	ldr	r3, [pc, #384]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e16c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e170:	d10f      	bne.n	800e192 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 800e172:	4b5f      	ldr	r3, [pc, #380]	; (800e2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800e174:	61fb      	str	r3, [r7, #28]
          break;
 800e176:	e00c      	b.n	800e192 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e178:	4b5b      	ldr	r3, [pc, #364]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e17e:	f003 0302 	and.w	r3, r3, #2
 800e182:	2b02      	cmp	r3, #2
 800e184:	d107      	bne.n	800e196 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 800e186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e18a:	61fb      	str	r3, [r7, #28]
          break;
 800e18c:	e003      	b.n	800e196 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 800e18e:	bf00      	nop
 800e190:	e31a      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e192:	bf00      	nop
 800e194:	e318      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e196:	bf00      	nop
        break;
 800e198:	e316      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800e19a:	4b53      	ldr	r3, [pc, #332]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1a0:	f003 030c 	and.w	r3, r3, #12
 800e1a4:	613b      	str	r3, [r7, #16]
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	2b0c      	cmp	r3, #12
 800e1aa:	d83a      	bhi.n	800e222 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 800e1ac:	a201      	add	r2, pc, #4	; (adr r2, 800e1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800e1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b2:	bf00      	nop
 800e1b4:	0800e1e9 	.word	0x0800e1e9
 800e1b8:	0800e223 	.word	0x0800e223
 800e1bc:	0800e223 	.word	0x0800e223
 800e1c0:	0800e223 	.word	0x0800e223
 800e1c4:	0800e1f1 	.word	0x0800e1f1
 800e1c8:	0800e223 	.word	0x0800e223
 800e1cc:	0800e223 	.word	0x0800e223
 800e1d0:	0800e223 	.word	0x0800e223
 800e1d4:	0800e1f9 	.word	0x0800e1f9
 800e1d8:	0800e223 	.word	0x0800e223
 800e1dc:	0800e223 	.word	0x0800e223
 800e1e0:	0800e223 	.word	0x0800e223
 800e1e4:	0800e20d 	.word	0x0800e20d
          frequency = HAL_RCC_GetPCLK1Freq();
 800e1e8:	f7ff f9e6 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800e1ec:	61f8      	str	r0, [r7, #28]
          break;
 800e1ee:	e01d      	b.n	800e22c <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 800e1f0:	f7ff f94a 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800e1f4:	61f8      	str	r0, [r7, #28]
          break;
 800e1f6:	e019      	b.n	800e22c <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e1f8:	4b3b      	ldr	r3, [pc, #236]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e204:	d10f      	bne.n	800e226 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 800e206:	4b3a      	ldr	r3, [pc, #232]	; (800e2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800e208:	61fb      	str	r3, [r7, #28]
          break;
 800e20a:	e00c      	b.n	800e226 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e20c:	4b36      	ldr	r3, [pc, #216]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e212:	f003 0302 	and.w	r3, r3, #2
 800e216:	2b02      	cmp	r3, #2
 800e218:	d107      	bne.n	800e22a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 800e21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e21e:	61fb      	str	r3, [r7, #28]
          break;
 800e220:	e003      	b.n	800e22a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 800e222:	bf00      	nop
 800e224:	e2d0      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e226:	bf00      	nop
 800e228:	e2ce      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e22a:	bf00      	nop
        break;
 800e22c:	e2cc      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800e22e:	4b2e      	ldr	r3, [pc, #184]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e234:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e238:	613b      	str	r3, [r7, #16]
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	2b30      	cmp	r3, #48	; 0x30
 800e23e:	d021      	beq.n	800e284 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	2b30      	cmp	r3, #48	; 0x30
 800e244:	d829      	bhi.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	2b20      	cmp	r3, #32
 800e24a:	d011      	beq.n	800e270 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	2b20      	cmp	r3, #32
 800e250:	d823      	bhi.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d003      	beq.n	800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	2b10      	cmp	r3, #16
 800e25c:	d004      	beq.n	800e268 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 800e25e:	e01c      	b.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e260:	f7ff f9aa 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800e264:	61f8      	str	r0, [r7, #28]
          break;
 800e266:	e01d      	b.n	800e2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 800e268:	f7ff f90e 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800e26c:	61f8      	str	r0, [r7, #28]
          break;
 800e26e:	e019      	b.n	800e2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e270:	4b1d      	ldr	r3, [pc, #116]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e27c:	d10f      	bne.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 800e27e:	4b1c      	ldr	r3, [pc, #112]	; (800e2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800e280:	61fb      	str	r3, [r7, #28]
          break;
 800e282:	e00c      	b.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e284:	4b18      	ldr	r3, [pc, #96]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e28a:	f003 0302 	and.w	r3, r3, #2
 800e28e:	2b02      	cmp	r3, #2
 800e290:	d107      	bne.n	800e2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 800e292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e296:	61fb      	str	r3, [r7, #28]
          break;
 800e298:	e003      	b.n	800e2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 800e29a:	bf00      	nop
 800e29c:	e294      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e29e:	bf00      	nop
 800e2a0:	e292      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e2a2:	bf00      	nop
        break;
 800e2a4:	e290      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800e2a6:	4b10      	ldr	r3, [pc, #64]	; (800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e2b0:	613b      	str	r3, [r7, #16]
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	2bc0      	cmp	r3, #192	; 0xc0
 800e2b6:	d027      	beq.n	800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	2bc0      	cmp	r3, #192	; 0xc0
 800e2bc:	d82f      	bhi.n	800e31e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	2b80      	cmp	r3, #128	; 0x80
 800e2c2:	d017      	beq.n	800e2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	2b80      	cmp	r3, #128	; 0x80
 800e2c8:	d829      	bhi.n	800e31e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d003      	beq.n	800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	2b40      	cmp	r3, #64	; 0x40
 800e2d4:	d004      	beq.n	800e2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 800e2d6:	e022      	b.n	800e31e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e2d8:	f7ff f96e 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800e2dc:	61f8      	str	r0, [r7, #28]
          break;
 800e2de:	e023      	b.n	800e328 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 800e2e0:	f7ff f8d2 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800e2e4:	61f8      	str	r0, [r7, #28]
          break;
 800e2e6:	e01f      	b.n	800e328 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 800e2e8:	40021000 	.word	0x40021000
 800e2ec:	08016450 	.word	0x08016450
 800e2f0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e2f4:	4ba9      	ldr	r3, [pc, #676]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e2fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e300:	d10f      	bne.n	800e322 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 800e302:	4ba7      	ldr	r3, [pc, #668]	; (800e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800e304:	61fb      	str	r3, [r7, #28]
          break;
 800e306:	e00c      	b.n	800e322 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e308:	4ba4      	ldr	r3, [pc, #656]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e30e:	f003 0302 	and.w	r3, r3, #2
 800e312:	2b02      	cmp	r3, #2
 800e314:	d107      	bne.n	800e326 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 800e316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e31a:	61fb      	str	r3, [r7, #28]
          break;
 800e31c:	e003      	b.n	800e326 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 800e31e:	bf00      	nop
 800e320:	e252      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e322:	bf00      	nop
 800e324:	e250      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e326:	bf00      	nop
        break;
 800e328:	e24e      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800e32a:	4b9c      	ldr	r3, [pc, #624]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e334:	613b      	str	r3, [r7, #16]
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e33c:	d025      	beq.n	800e38a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e344:	d82c      	bhi.n	800e3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e34c:	d013      	beq.n	800e376 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e354:	d824      	bhi.n	800e3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d004      	beq.n	800e366 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e362:	d004      	beq.n	800e36e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 800e364:	e01c      	b.n	800e3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e366:	f7ff f927 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800e36a:	61f8      	str	r0, [r7, #28]
          break;
 800e36c:	e01d      	b.n	800e3aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 800e36e:	f7ff f88b 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800e372:	61f8      	str	r0, [r7, #28]
          break;
 800e374:	e019      	b.n	800e3aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e376:	4b89      	ldr	r3, [pc, #548]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e37e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e382:	d10f      	bne.n	800e3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 800e384:	4b86      	ldr	r3, [pc, #536]	; (800e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800e386:	61fb      	str	r3, [r7, #28]
          break;
 800e388:	e00c      	b.n	800e3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e38a:	4b84      	ldr	r3, [pc, #528]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e390:	f003 0302 	and.w	r3, r3, #2
 800e394:	2b02      	cmp	r3, #2
 800e396:	d107      	bne.n	800e3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 800e398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e39c:	61fb      	str	r3, [r7, #28]
          break;
 800e39e:	e003      	b.n	800e3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 800e3a0:	bf00      	nop
 800e3a2:	e211      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e3a4:	bf00      	nop
 800e3a6:	e20f      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e3a8:	bf00      	nop
        break;
 800e3aa:	e20d      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800e3ac:	4b7b      	ldr	r3, [pc, #492]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e3b6:	613b      	str	r3, [r7, #16]
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e3be:	d025      	beq.n	800e40c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e3c6:	d82c      	bhi.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3ce:	d013      	beq.n	800e3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3d6:	d824      	bhi.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d004      	beq.n	800e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3e4:	d004      	beq.n	800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 800e3e6:	e01c      	b.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e3e8:	f7ff f8e6 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800e3ec:	61f8      	str	r0, [r7, #28]
          break;
 800e3ee:	e01d      	b.n	800e42c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 800e3f0:	f7ff f84a 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800e3f4:	61f8      	str	r0, [r7, #28]
          break;
 800e3f6:	e019      	b.n	800e42c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e3f8:	4b68      	ldr	r3, [pc, #416]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e404:	d10f      	bne.n	800e426 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 800e406:	4b66      	ldr	r3, [pc, #408]	; (800e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800e408:	61fb      	str	r3, [r7, #28]
          break;
 800e40a:	e00c      	b.n	800e426 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e40c:	4b63      	ldr	r3, [pc, #396]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e412:	f003 0302 	and.w	r3, r3, #2
 800e416:	2b02      	cmp	r3, #2
 800e418:	d107      	bne.n	800e42a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 800e41a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e41e:	61fb      	str	r3, [r7, #28]
          break;
 800e420:	e003      	b.n	800e42a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 800e422:	bf00      	nop
 800e424:	e1d0      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e426:	bf00      	nop
 800e428:	e1ce      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e42a:	bf00      	nop
        break;
 800e42c:	e1cc      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e42e:	4b5b      	ldr	r3, [pc, #364]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e438:	613b      	str	r3, [r7, #16]
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e440:	d00c      	beq.n	800e45c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e448:	d864      	bhi.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e450:	d008      	beq.n	800e464 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e458:	d030      	beq.n	800e4bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800e45a:	e05b      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 800e45c:	f7ff f814 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800e460:	61f8      	str	r0, [r7, #28]
          break;
 800e462:	e05c      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800e464:	4b4d      	ldr	r3, [pc, #308]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e46c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e470:	d152      	bne.n	800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 800e472:	4b4a      	ldr	r3, [pc, #296]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d04c      	beq.n	800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800e47e:	4b47      	ldr	r3, [pc, #284]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	0a1b      	lsrs	r3, r3, #8
 800e484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e488:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	fb02 f203 	mul.w	r2, r2, r3
 800e492:	4b42      	ldr	r3, [pc, #264]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	091b      	lsrs	r3, r3, #4
 800e498:	f003 0307 	and.w	r3, r3, #7
 800e49c:	3301      	adds	r3, #1
 800e49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4a2:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800e4a4:	4b3d      	ldr	r3, [pc, #244]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e4a6:	691b      	ldr	r3, [r3, #16]
 800e4a8:	0e5b      	lsrs	r3, r3, #25
 800e4aa:	f003 0303 	and.w	r3, r3, #3
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	005b      	lsls	r3, r3, #1
 800e4b2:	69ba      	ldr	r2, [r7, #24]
 800e4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4b8:	61fb      	str	r3, [r7, #28]
          break;
 800e4ba:	e02d      	b.n	800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800e4bc:	4b37      	ldr	r3, [pc, #220]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4c8:	d128      	bne.n	800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800e4ca:	4b34      	ldr	r3, [pc, #208]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e4cc:	695b      	ldr	r3, [r3, #20]
 800e4ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d022      	beq.n	800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800e4d6:	4b31      	ldr	r3, [pc, #196]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e4d8:	695b      	ldr	r3, [r3, #20]
 800e4da:	0a1b      	lsrs	r3, r3, #8
 800e4dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4e0:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	fb02 f203 	mul.w	r2, r2, r3
 800e4ea:	4b2c      	ldr	r3, [pc, #176]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	091b      	lsrs	r3, r3, #4
 800e4f0:	f003 0307 	and.w	r3, r3, #7
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4fa:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800e4fc:	4b27      	ldr	r3, [pc, #156]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e4fe:	695b      	ldr	r3, [r3, #20]
 800e500:	0e5b      	lsrs	r3, r3, #25
 800e502:	f003 0303 	and.w	r3, r3, #3
 800e506:	3301      	adds	r3, #1
 800e508:	005b      	lsls	r3, r3, #1
 800e50a:	69ba      	ldr	r2, [r7, #24]
 800e50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e510:	61fb      	str	r3, [r7, #28]
          break;
 800e512:	e003      	b.n	800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 800e514:	bf00      	nop
 800e516:	e157      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e518:	bf00      	nop
 800e51a:	e155      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e51c:	bf00      	nop
        break;
 800e51e:	e153      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800e520:	4b1e      	ldr	r3, [pc, #120]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e52a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d103      	bne.n	800e53a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 800e532:	f7ff f857 	bl	800d5e4 <HAL_RCC_GetPCLK2Freq>
 800e536:	61f8      	str	r0, [r7, #28]
        break;
 800e538:	e146      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 800e53a:	f7fe ffa5 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800e53e:	61f8      	str	r0, [r7, #28]
        break;
 800e540:	e142      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800e542:	4b16      	ldr	r3, [pc, #88]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e548:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e54c:	613b      	str	r3, [r7, #16]
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e554:	d013      	beq.n	800e57e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e55c:	d819      	bhi.n	800e592 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d004      	beq.n	800e56e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e56a:	d004      	beq.n	800e576 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800e56c:	e011      	b.n	800e592 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e56e:	f7ff f823 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800e572:	61f8      	str	r0, [r7, #28]
          break;
 800e574:	e010      	b.n	800e598 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 800e576:	f7fe ff87 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800e57a:	61f8      	str	r0, [r7, #28]
          break;
 800e57c:	e00c      	b.n	800e598 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e57e:	4b07      	ldr	r3, [pc, #28]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e58a:	d104      	bne.n	800e596 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 800e58c:	4b04      	ldr	r3, [pc, #16]	; (800e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800e58e:	61fb      	str	r3, [r7, #28]
          break;
 800e590:	e001      	b.n	800e596 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 800e592:	bf00      	nop
 800e594:	e118      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e596:	bf00      	nop
        break;
 800e598:	e116      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e59a:	bf00      	nop
 800e59c:	40021000 	.word	0x40021000
 800e5a0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800e5a4:	4b8b      	ldr	r3, [pc, #556]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e5a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e5ae:	613b      	str	r3, [r7, #16]
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5b6:	d013      	beq.n	800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5be:	d819      	bhi.n	800e5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d004      	beq.n	800e5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e5cc:	d004      	beq.n	800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 800e5ce:	e011      	b.n	800e5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e5d0:	f7fe fff2 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800e5d4:	61f8      	str	r0, [r7, #28]
          break;
 800e5d6:	e010      	b.n	800e5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800e5d8:	f7fe ff56 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800e5dc:	61f8      	str	r0, [r7, #28]
          break;
 800e5de:	e00c      	b.n	800e5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e5e0:	4b7c      	ldr	r3, [pc, #496]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5ec:	d104      	bne.n	800e5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800e5ee:	4b7a      	ldr	r3, [pc, #488]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800e5f0:	61fb      	str	r3, [r7, #28]
          break;
 800e5f2:	e001      	b.n	800e5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 800e5f4:	bf00      	nop
 800e5f6:	e0e7      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e5f8:	bf00      	nop
        break;
 800e5fa:	e0e5      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800e5fc:	4b75      	ldr	r3, [pc, #468]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e606:	613b      	str	r3, [r7, #16]
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e60e:	d013      	beq.n	800e638 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e616:	d819      	bhi.n	800e64c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d004      	beq.n	800e628 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e624:	d004      	beq.n	800e630 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 800e626:	e011      	b.n	800e64c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e628:	f7fe ffc6 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800e62c:	61f8      	str	r0, [r7, #28]
          break;
 800e62e:	e010      	b.n	800e652 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 800e630:	f7fe ff2a 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800e634:	61f8      	str	r0, [r7, #28]
          break;
 800e636:	e00c      	b.n	800e652 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e638:	4b66      	ldr	r3, [pc, #408]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e644:	d104      	bne.n	800e650 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 800e646:	4b64      	ldr	r3, [pc, #400]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800e648:	61fb      	str	r3, [r7, #28]
          break;
 800e64a:	e001      	b.n	800e650 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 800e64c:	bf00      	nop
 800e64e:	e0bb      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e650:	bf00      	nop
        break;
 800e652:	e0b9      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e654:	4b5f      	ldr	r3, [pc, #380]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e65a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800e65e:	613b      	str	r3, [r7, #16]
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e666:	d02c      	beq.n	800e6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e66e:	d833      	bhi.n	800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e676:	d01a      	beq.n	800e6ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e67e:	d82b      	bhi.n	800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d004      	beq.n	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e68c:	d004      	beq.n	800e698 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 800e68e:	e023      	b.n	800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e690:	f7fe ff92 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800e694:	61f8      	str	r0, [r7, #28]
          break;
 800e696:	e026      	b.n	800e6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800e698:	4b4e      	ldr	r3, [pc, #312]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e69a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e69e:	f003 0302 	and.w	r3, r3, #2
 800e6a2:	2b02      	cmp	r3, #2
 800e6a4:	d11a      	bne.n	800e6dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 800e6a6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e6aa:	61fb      	str	r3, [r7, #28]
          break;
 800e6ac:	e016      	b.n	800e6dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e6ae:	4b49      	ldr	r3, [pc, #292]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6ba:	d111      	bne.n	800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 800e6bc:	4b46      	ldr	r3, [pc, #280]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800e6be:	61fb      	str	r3, [r7, #28]
          break;
 800e6c0:	e00e      	b.n	800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e6c2:	4b44      	ldr	r3, [pc, #272]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6c8:	f003 0302 	and.w	r3, r3, #2
 800e6cc:	2b02      	cmp	r3, #2
 800e6ce:	d109      	bne.n	800e6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 800e6d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6d4:	61fb      	str	r3, [r7, #28]
          break;
 800e6d6:	e005      	b.n	800e6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800e6d8:	bf00      	nop
 800e6da:	e075      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e6dc:	bf00      	nop
 800e6de:	e073      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e6e0:	bf00      	nop
 800e6e2:	e071      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e6e4:	bf00      	nop
        break;
 800e6e6:	e06f      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e6e8:	4b3a      	ldr	r3, [pc, #232]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e6f2:	613b      	str	r3, [r7, #16]
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e6fa:	d02c      	beq.n	800e756 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e702:	d833      	bhi.n	800e76c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e70a:	d01a      	beq.n	800e742 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e712:	d82b      	bhi.n	800e76c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d004      	beq.n	800e724 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e720:	d004      	beq.n	800e72c <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800e722:	e023      	b.n	800e76c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e724:	f7fe ff48 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800e728:	61f8      	str	r0, [r7, #28]
          break;
 800e72a:	e026      	b.n	800e77a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800e72c:	4b29      	ldr	r3, [pc, #164]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e72e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e732:	f003 0302 	and.w	r3, r3, #2
 800e736:	2b02      	cmp	r3, #2
 800e738:	d11a      	bne.n	800e770 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800e73a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e73e:	61fb      	str	r3, [r7, #28]
          break;
 800e740:	e016      	b.n	800e770 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e742:	4b24      	ldr	r3, [pc, #144]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e74a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e74e:	d111      	bne.n	800e774 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800e750:	4b21      	ldr	r3, [pc, #132]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800e752:	61fb      	str	r3, [r7, #28]
          break;
 800e754:	e00e      	b.n	800e774 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e756:	4b1f      	ldr	r3, [pc, #124]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e75c:	f003 0302 	and.w	r3, r3, #2
 800e760:	2b02      	cmp	r3, #2
 800e762:	d109      	bne.n	800e778 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800e764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e768:	61fb      	str	r3, [r7, #28]
          break;
 800e76a:	e005      	b.n	800e778 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800e76c:	bf00      	nop
 800e76e:	e02b      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e770:	bf00      	nop
 800e772:	e029      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e774:	bf00      	nop
 800e776:	e027      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e778:	bf00      	nop
        break;
 800e77a:	e025      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800e77c:	4b15      	ldr	r3, [pc, #84]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e782:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e786:	613b      	str	r3, [r7, #16]
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d004      	beq.n	800e798 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e794:	d004      	beq.n	800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 800e796:	e00d      	b.n	800e7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e798:	f7fe ff0e 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800e79c:	61f8      	str	r0, [r7, #28]
          break;
 800e79e:	e009      	b.n	800e7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e7a0:	4b0c      	ldr	r3, [pc, #48]	; (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e7a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7ac:	d101      	bne.n	800e7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800e7ae:	4b0a      	ldr	r3, [pc, #40]	; (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800e7b0:	61fb      	str	r3, [r7, #28]
          break;
 800e7b2:	bf00      	nop
        break;
 800e7b4:	e008      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800e7b6:	bf00      	nop
 800e7b8:	e006      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800e7ba:	bf00      	nop
 800e7bc:	e004      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800e7be:	bf00      	nop
 800e7c0:	e002      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800e7c2:	bf00      	nop
 800e7c4:	e000      	b.n	800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800e7c6:	bf00      	nop
    }
  }

  return(frequency);
 800e7c8:	69fb      	ldr	r3, [r7, #28]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3720      	adds	r7, #32
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	40021000 	.word	0x40021000
 800e7d8:	00f42400 	.word	0x00f42400

0800e7dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800e7e0:	4b05      	ldr	r3, [pc, #20]	; (800e7f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a04      	ldr	r2, [pc, #16]	; (800e7f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800e7e6:	f043 0304 	orr.w	r3, r3, #4
 800e7ea:	6013      	str	r3, [r2, #0]
}
 800e7ec:	bf00      	nop
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	40021000 	.word	0x40021000

0800e7fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e806:	2300      	movs	r3, #0
 800e808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e80a:	4b75      	ldr	r3, [pc, #468]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	f003 0303 	and.w	r3, r3, #3
 800e812:	2b00      	cmp	r3, #0
 800e814:	d018      	beq.n	800e848 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800e816:	4b72      	ldr	r3, [pc, #456]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	f003 0203 	and.w	r2, r3, #3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	429a      	cmp	r2, r3
 800e824:	d10d      	bne.n	800e842 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
       ||
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d009      	beq.n	800e842 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800e82e:	4b6c      	ldr	r3, [pc, #432]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	091b      	lsrs	r3, r3, #4
 800e834:	f003 0307 	and.w	r3, r3, #7
 800e838:	1c5a      	adds	r2, r3, #1
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	685b      	ldr	r3, [r3, #4]
       ||
 800e83e:	429a      	cmp	r2, r3
 800e840:	d047      	beq.n	800e8d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800e842:	2301      	movs	r3, #1
 800e844:	73fb      	strb	r3, [r7, #15]
 800e846:	e044      	b.n	800e8d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2b03      	cmp	r3, #3
 800e84e:	d018      	beq.n	800e882 <RCCEx_PLLSAI1_Config+0x86>
 800e850:	2b03      	cmp	r3, #3
 800e852:	d825      	bhi.n	800e8a0 <RCCEx_PLLSAI1_Config+0xa4>
 800e854:	2b01      	cmp	r3, #1
 800e856:	d002      	beq.n	800e85e <RCCEx_PLLSAI1_Config+0x62>
 800e858:	2b02      	cmp	r3, #2
 800e85a:	d009      	beq.n	800e870 <RCCEx_PLLSAI1_Config+0x74>
 800e85c:	e020      	b.n	800e8a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e85e:	4b60      	ldr	r3, [pc, #384]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f003 0302 	and.w	r3, r3, #2
 800e866:	2b00      	cmp	r3, #0
 800e868:	d11d      	bne.n	800e8a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800e86a:	2301      	movs	r3, #1
 800e86c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e86e:	e01a      	b.n	800e8a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e870:	4b5b      	ldr	r3, [pc, #364]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d116      	bne.n	800e8aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800e87c:	2301      	movs	r3, #1
 800e87e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e880:	e013      	b.n	800e8aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e882:	4b57      	ldr	r3, [pc, #348]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d10f      	bne.n	800e8ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e88e:	4b54      	ldr	r3, [pc, #336]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e896:	2b00      	cmp	r3, #0
 800e898:	d109      	bne.n	800e8ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800e89a:	2301      	movs	r3, #1
 800e89c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e89e:	e006      	b.n	800e8ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	73fb      	strb	r3, [r7, #15]
      break;
 800e8a4:	e004      	b.n	800e8b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e8a6:	bf00      	nop
 800e8a8:	e002      	b.n	800e8b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e8aa:	bf00      	nop
 800e8ac:	e000      	b.n	800e8b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e8ae:	bf00      	nop
    }

    if(status == HAL_OK)
 800e8b0:	7bfb      	ldrb	r3, [r7, #15]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10d      	bne.n	800e8d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800e8b6:	4b4a      	ldr	r3, [pc, #296]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e8b8:	68db      	ldr	r3, [r3, #12]
 800e8ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6819      	ldr	r1, [r3, #0]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	011b      	lsls	r3, r3, #4
 800e8ca:	430b      	orrs	r3, r1
 800e8cc:	4944      	ldr	r1, [pc, #272]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800e8d2:	7bfb      	ldrb	r3, [r7, #15]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d17d      	bne.n	800e9d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800e8d8:	4b41      	ldr	r3, [pc, #260]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4a40      	ldr	r2, [pc, #256]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e8de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e8e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8e4:	f7fc fc8a 	bl	800b1fc <HAL_GetTick>
 800e8e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e8ea:	e009      	b.n	800e900 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e8ec:	f7fc fc86 	bl	800b1fc <HAL_GetTick>
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	1ad3      	subs	r3, r2, r3
 800e8f6:	2b02      	cmp	r3, #2
 800e8f8:	d902      	bls.n	800e900 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800e8fa:	2303      	movs	r3, #3
 800e8fc:	73fb      	strb	r3, [r7, #15]
        break;
 800e8fe:	e005      	b.n	800e90c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e900:	4b37      	ldr	r3, [pc, #220]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1ef      	bne.n	800e8ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800e90c:	7bfb      	ldrb	r3, [r7, #15]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d160      	bne.n	800e9d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d111      	bne.n	800e93c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e918:	4b31      	ldr	r3, [pc, #196]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e91a:	691b      	ldr	r3, [r3, #16]
 800e91c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800e920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	6892      	ldr	r2, [r2, #8]
 800e928:	0211      	lsls	r1, r2, #8
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	68d2      	ldr	r2, [r2, #12]
 800e92e:	0912      	lsrs	r2, r2, #4
 800e930:	0452      	lsls	r2, r2, #17
 800e932:	430a      	orrs	r2, r1
 800e934:	492a      	ldr	r1, [pc, #168]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e936:	4313      	orrs	r3, r2
 800e938:	610b      	str	r3, [r1, #16]
 800e93a:	e027      	b.n	800e98c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d112      	bne.n	800e968 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e942:	4b27      	ldr	r3, [pc, #156]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e944:	691b      	ldr	r3, [r3, #16]
 800e946:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800e94a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800e94e:	687a      	ldr	r2, [r7, #4]
 800e950:	6892      	ldr	r2, [r2, #8]
 800e952:	0211      	lsls	r1, r2, #8
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	6912      	ldr	r2, [r2, #16]
 800e958:	0852      	lsrs	r2, r2, #1
 800e95a:	3a01      	subs	r2, #1
 800e95c:	0552      	lsls	r2, r2, #21
 800e95e:	430a      	orrs	r2, r1
 800e960:	491f      	ldr	r1, [pc, #124]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e962:	4313      	orrs	r3, r2
 800e964:	610b      	str	r3, [r1, #16]
 800e966:	e011      	b.n	800e98c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e968:	4b1d      	ldr	r3, [pc, #116]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e96a:	691b      	ldr	r3, [r3, #16]
 800e96c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800e970:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	6892      	ldr	r2, [r2, #8]
 800e978:	0211      	lsls	r1, r2, #8
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	6952      	ldr	r2, [r2, #20]
 800e97e:	0852      	lsrs	r2, r2, #1
 800e980:	3a01      	subs	r2, #1
 800e982:	0652      	lsls	r2, r2, #25
 800e984:	430a      	orrs	r2, r1
 800e986:	4916      	ldr	r1, [pc, #88]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e988:	4313      	orrs	r3, r2
 800e98a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800e98c:	4b14      	ldr	r3, [pc, #80]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a13      	ldr	r2, [pc, #76]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e992:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e996:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e998:	f7fc fc30 	bl	800b1fc <HAL_GetTick>
 800e99c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e99e:	e009      	b.n	800e9b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e9a0:	f7fc fc2c 	bl	800b1fc <HAL_GetTick>
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	1ad3      	subs	r3, r2, r3
 800e9aa:	2b02      	cmp	r3, #2
 800e9ac:	d902      	bls.n	800e9b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800e9ae:	2303      	movs	r3, #3
 800e9b0:	73fb      	strb	r3, [r7, #15]
          break;
 800e9b2:	e005      	b.n	800e9c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e9b4:	4b0a      	ldr	r3, [pc, #40]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d0ef      	beq.n	800e9a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800e9c0:	7bfb      	ldrb	r3, [r7, #15]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d106      	bne.n	800e9d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800e9c6:	4b06      	ldr	r3, [pc, #24]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e9c8:	691a      	ldr	r2, [r3, #16]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	699b      	ldr	r3, [r3, #24]
 800e9ce:	4904      	ldr	r1, [pc, #16]	; (800e9e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800e9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3710      	adds	r7, #16
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	40021000 	.word	0x40021000

0800e9e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b084      	sub	sp, #16
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e9f2:	4b6a      	ldr	r3, [pc, #424]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800e9f4:	68db      	ldr	r3, [r3, #12]
 800e9f6:	f003 0303 	and.w	r3, r3, #3
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d018      	beq.n	800ea30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800e9fe:	4b67      	ldr	r3, [pc, #412]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	f003 0203 	and.w	r2, r3, #3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d10d      	bne.n	800ea2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
       ||
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d009      	beq.n	800ea2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800ea16:	4b61      	ldr	r3, [pc, #388]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	091b      	lsrs	r3, r3, #4
 800ea1c:	f003 0307 	and.w	r3, r3, #7
 800ea20:	1c5a      	adds	r2, r3, #1
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	685b      	ldr	r3, [r3, #4]
       ||
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d047      	beq.n	800eaba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	73fb      	strb	r3, [r7, #15]
 800ea2e:	e044      	b.n	800eaba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2b03      	cmp	r3, #3
 800ea36:	d018      	beq.n	800ea6a <RCCEx_PLLSAI2_Config+0x86>
 800ea38:	2b03      	cmp	r3, #3
 800ea3a:	d825      	bhi.n	800ea88 <RCCEx_PLLSAI2_Config+0xa4>
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d002      	beq.n	800ea46 <RCCEx_PLLSAI2_Config+0x62>
 800ea40:	2b02      	cmp	r3, #2
 800ea42:	d009      	beq.n	800ea58 <RCCEx_PLLSAI2_Config+0x74>
 800ea44:	e020      	b.n	800ea88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ea46:	4b55      	ldr	r3, [pc, #340]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f003 0302 	and.w	r3, r3, #2
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d11d      	bne.n	800ea8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800ea52:	2301      	movs	r3, #1
 800ea54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ea56:	e01a      	b.n	800ea8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ea58:	4b50      	ldr	r3, [pc, #320]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d116      	bne.n	800ea92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800ea64:	2301      	movs	r3, #1
 800ea66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ea68:	e013      	b.n	800ea92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ea6a:	4b4c      	ldr	r3, [pc, #304]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d10f      	bne.n	800ea96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ea76:	4b49      	ldr	r3, [pc, #292]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d109      	bne.n	800ea96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800ea82:	2301      	movs	r3, #1
 800ea84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ea86:	e006      	b.n	800ea96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea8c:	e004      	b.n	800ea98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ea8e:	bf00      	nop
 800ea90:	e002      	b.n	800ea98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ea92:	bf00      	nop
 800ea94:	e000      	b.n	800ea98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ea96:	bf00      	nop
    }

    if(status == HAL_OK)
 800ea98:	7bfb      	ldrb	r3, [r7, #15]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d10d      	bne.n	800eaba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ea9e:	4b3f      	ldr	r3, [pc, #252]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6819      	ldr	r1, [r3, #0]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	3b01      	subs	r3, #1
 800eab0:	011b      	lsls	r3, r3, #4
 800eab2:	430b      	orrs	r3, r1
 800eab4:	4939      	ldr	r1, [pc, #228]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eab6:	4313      	orrs	r3, r2
 800eab8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800eaba:	7bfb      	ldrb	r3, [r7, #15]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d167      	bne.n	800eb90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800eac0:	4b36      	ldr	r3, [pc, #216]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a35      	ldr	r2, [pc, #212]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eaca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eacc:	f7fc fb96 	bl	800b1fc <HAL_GetTick>
 800ead0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ead2:	e009      	b.n	800eae8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ead4:	f7fc fb92 	bl	800b1fc <HAL_GetTick>
 800ead8:	4602      	mov	r2, r0
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	1ad3      	subs	r3, r2, r3
 800eade:	2b02      	cmp	r3, #2
 800eae0:	d902      	bls.n	800eae8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800eae2:	2303      	movs	r3, #3
 800eae4:	73fb      	strb	r3, [r7, #15]
        break;
 800eae6:	e005      	b.n	800eaf4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800eae8:	4b2c      	ldr	r3, [pc, #176]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1ef      	bne.n	800ead4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800eaf4:	7bfb      	ldrb	r3, [r7, #15]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d14a      	bne.n	800eb90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d111      	bne.n	800eb24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800eb00:	4b26      	ldr	r3, [pc, #152]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eb02:	695b      	ldr	r3, [r3, #20]
 800eb04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800eb08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	6892      	ldr	r2, [r2, #8]
 800eb10:	0211      	lsls	r1, r2, #8
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	68d2      	ldr	r2, [r2, #12]
 800eb16:	0912      	lsrs	r2, r2, #4
 800eb18:	0452      	lsls	r2, r2, #17
 800eb1a:	430a      	orrs	r2, r1
 800eb1c:	491f      	ldr	r1, [pc, #124]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	614b      	str	r3, [r1, #20]
 800eb22:	e011      	b.n	800eb48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800eb24:	4b1d      	ldr	r3, [pc, #116]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eb26:	695b      	ldr	r3, [r3, #20]
 800eb28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800eb2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	6892      	ldr	r2, [r2, #8]
 800eb34:	0211      	lsls	r1, r2, #8
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	6912      	ldr	r2, [r2, #16]
 800eb3a:	0852      	lsrs	r2, r2, #1
 800eb3c:	3a01      	subs	r2, #1
 800eb3e:	0652      	lsls	r2, r2, #25
 800eb40:	430a      	orrs	r2, r1
 800eb42:	4916      	ldr	r1, [pc, #88]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eb44:	4313      	orrs	r3, r2
 800eb46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800eb48:	4b14      	ldr	r3, [pc, #80]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a13      	ldr	r2, [pc, #76]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eb4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb54:	f7fc fb52 	bl	800b1fc <HAL_GetTick>
 800eb58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800eb5a:	e009      	b.n	800eb70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800eb5c:	f7fc fb4e 	bl	800b1fc <HAL_GetTick>
 800eb60:	4602      	mov	r2, r0
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	1ad3      	subs	r3, r2, r3
 800eb66:	2b02      	cmp	r3, #2
 800eb68:	d902      	bls.n	800eb70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800eb6a:	2303      	movs	r3, #3
 800eb6c:	73fb      	strb	r3, [r7, #15]
          break;
 800eb6e:	e005      	b.n	800eb7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800eb70:	4b0a      	ldr	r3, [pc, #40]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d0ef      	beq.n	800eb5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800eb7c:	7bfb      	ldrb	r3, [r7, #15]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d106      	bne.n	800eb90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800eb82:	4b06      	ldr	r3, [pc, #24]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eb84:	695a      	ldr	r2, [r3, #20]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	695b      	ldr	r3, [r3, #20]
 800eb8a:	4904      	ldr	r1, [pc, #16]	; (800eb9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800eb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	40021000 	.word	0x40021000

0800eba0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b089      	sub	sp, #36	; 0x24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ebbc:	d10c      	bne.n	800ebd8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ebbe:	4b6e      	ldr	r3, [pc, #440]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ebc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebc4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ebc8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ebd0:	d112      	bne.n	800ebf8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ebd2:	4b6a      	ldr	r3, [pc, #424]	; (800ed7c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800ebd4:	61fb      	str	r3, [r7, #28]
 800ebd6:	e00f      	b.n	800ebf8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebde:	d10b      	bne.n	800ebf8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ebe0:	4b65      	ldr	r3, [pc, #404]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ebe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebe6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800ebea:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ebf2:	d101      	bne.n	800ebf8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800ebf4:	4b61      	ldr	r3, [pc, #388]	; (800ed7c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800ebf6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f040 80b4 	bne.w	800ed68 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ec0a:	d003      	beq.n	800ec14 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec12:	d135      	bne.n	800ec80 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ec14:	4b58      	ldr	r3, [pc, #352]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec20:	f040 80a1 	bne.w	800ed66 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800ec24:	4b54      	ldr	r3, [pc, #336]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	f000 809a 	beq.w	800ed66 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ec32:	4b51      	ldr	r3, [pc, #324]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	091b      	lsrs	r3, r3, #4
 800ec38:	f003 0307 	and.w	r3, r3, #7
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	693a      	ldr	r2, [r7, #16]
 800ec40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec44:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ec46:	4b4c      	ldr	r3, [pc, #304]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	0a1b      	lsrs	r3, r3, #8
 800ec4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec50:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d10a      	bne.n	800ec6e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800ec58:	4b47      	ldr	r3, [pc, #284]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d002      	beq.n	800ec6a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800ec64:	2311      	movs	r3, #17
 800ec66:	617b      	str	r3, [r7, #20]
 800ec68:	e001      	b.n	800ec6e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800ec6a:	2307      	movs	r3, #7
 800ec6c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	fb02 f203 	mul.w	r2, r2, r3
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec7c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ec7e:	e072      	b.n	800ed66 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d133      	bne.n	800ecee <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800ec86:	4b3c      	ldr	r3, [pc, #240]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ec8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ec92:	d169      	bne.n	800ed68 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800ec94:	4b38      	ldr	r3, [pc, #224]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ec96:	691b      	ldr	r3, [r3, #16]
 800ec98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d063      	beq.n	800ed68 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800eca0:	4b35      	ldr	r3, [pc, #212]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	091b      	lsrs	r3, r3, #4
 800eca6:	f003 0307 	and.w	r3, r3, #7
 800ecaa:	3301      	adds	r3, #1
 800ecac:	693a      	ldr	r2, [r7, #16]
 800ecae:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecb2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ecb4:	4b30      	ldr	r3, [pc, #192]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ecb6:	691b      	ldr	r3, [r3, #16]
 800ecb8:	0a1b      	lsrs	r3, r3, #8
 800ecba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecbe:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d10a      	bne.n	800ecdc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800ecc6:	4b2c      	ldr	r3, [pc, #176]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ecc8:	691b      	ldr	r3, [r3, #16]
 800ecca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d002      	beq.n	800ecd8 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800ecd2:	2311      	movs	r3, #17
 800ecd4:	617b      	str	r3, [r7, #20]
 800ecd6:	e001      	b.n	800ecdc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800ecd8:	2307      	movs	r3, #7
 800ecda:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	fb02 f203 	mul.w	r2, r2, r3
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecea:	61fb      	str	r3, [r7, #28]
 800ecec:	e03c      	b.n	800ed68 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ecf4:	d003      	beq.n	800ecfe <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ecfc:	d134      	bne.n	800ed68 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800ecfe:	4b1e      	ldr	r3, [pc, #120]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed0a:	d12d      	bne.n	800ed68 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800ed0c:	4b1a      	ldr	r3, [pc, #104]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ed0e:	695b      	ldr	r3, [r3, #20]
 800ed10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d027      	beq.n	800ed68 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ed18:	4b17      	ldr	r3, [pc, #92]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	091b      	lsrs	r3, r3, #4
 800ed1e:	f003 0307 	and.w	r3, r3, #7
 800ed22:	3301      	adds	r3, #1
 800ed24:	693a      	ldr	r2, [r7, #16]
 800ed26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed2a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800ed2c:	4b12      	ldr	r3, [pc, #72]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ed2e:	695b      	ldr	r3, [r3, #20]
 800ed30:	0a1b      	lsrs	r3, r3, #8
 800ed32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed36:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d10a      	bne.n	800ed54 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800ed3e:	4b0e      	ldr	r3, [pc, #56]	; (800ed78 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800ed40:	695b      	ldr	r3, [r3, #20]
 800ed42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d002      	beq.n	800ed50 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800ed4a:	2311      	movs	r3, #17
 800ed4c:	617b      	str	r3, [r7, #20]
 800ed4e:	e001      	b.n	800ed54 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800ed50:	2307      	movs	r3, #7
 800ed52:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	68fa      	ldr	r2, [r7, #12]
 800ed58:	fb02 f203 	mul.w	r2, r2, r3
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed62:	61fb      	str	r3, [r7, #28]
 800ed64:	e000      	b.n	800ed68 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ed66:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800ed68:	69fb      	ldr	r3, [r7, #28]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3724      	adds	r7, #36	; 0x24
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	40021000 	.word	0x40021000
 800ed7c:	001fff68 	.word	0x001fff68

0800ed80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d101      	bne.n	800ed92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e095      	b.n	800eebe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d108      	bne.n	800edac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eda2:	d009      	beq.n	800edb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	61da      	str	r2, [r3, #28]
 800edaa:	e005      	b.n	800edb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2200      	movs	r2, #0
 800edb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d106      	bne.n	800edd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7f3 f828 	bl	8001e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2202      	movs	r2, #2
 800eddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800edee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800edf8:	d902      	bls.n	800ee00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800edfa:	2300      	movs	r3, #0
 800edfc:	60fb      	str	r3, [r7, #12]
 800edfe:	e002      	b.n	800ee06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ee00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ee0e:	d007      	beq.n	800ee20 <HAL_SPI_Init+0xa0>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ee18:	d002      	beq.n	800ee20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ee30:	431a      	orrs	r2, r3
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	f003 0302 	and.w	r3, r3, #2
 800ee3a:	431a      	orrs	r2, r3
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	695b      	ldr	r3, [r3, #20]
 800ee40:	f003 0301 	and.w	r3, r3, #1
 800ee44:	431a      	orrs	r2, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ee4e:	431a      	orrs	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	69db      	ldr	r3, [r3, #28]
 800ee54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee58:	431a      	orrs	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee62:	ea42 0103 	orr.w	r1, r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	430a      	orrs	r2, r1
 800ee74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	699b      	ldr	r3, [r3, #24]
 800ee7a:	0c1b      	lsrs	r3, r3, #16
 800ee7c:	f003 0204 	and.w	r2, r3, #4
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee84:	f003 0310 	and.w	r3, r3, #16
 800ee88:	431a      	orrs	r2, r3
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee8e:	f003 0308 	and.w	r3, r3, #8
 800ee92:	431a      	orrs	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ee9c:	ea42 0103 	orr.w	r1, r2, r3
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	430a      	orrs	r2, r1
 800eeac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800eebc:	2300      	movs	r3, #0
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b082      	sub	sp, #8
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eed4:	2301      	movs	r3, #1
 800eed6:	e049      	b.n	800ef6c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d106      	bne.n	800eef2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f000 f841 	bl	800ef74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2202      	movs	r2, #2
 800eef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	3304      	adds	r3, #4
 800ef02:	4619      	mov	r1, r3
 800ef04:	4610      	mov	r0, r2
 800ef06:	f000 f9f7 	bl	800f2f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2201      	movs	r2, #1
 800ef16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2201      	movs	r2, #1
 800ef26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2201      	movs	r2, #1
 800ef2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2201      	movs	r2, #1
 800ef36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2201      	movs	r2, #1
 800ef46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2201      	movs	r2, #1
 800ef56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef6a:	2300      	movs	r3, #0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ef7c:	bf00      	nop
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d001      	beq.n	800efa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	e04f      	b.n	800f040 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2202      	movs	r2, #2
 800efa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	68da      	ldr	r2, [r3, #12]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f042 0201 	orr.w	r2, r2, #1
 800efb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	4a23      	ldr	r2, [pc, #140]	; (800f04c <HAL_TIM_Base_Start_IT+0xc4>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d01d      	beq.n	800effe <HAL_TIM_Base_Start_IT+0x76>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efca:	d018      	beq.n	800effe <HAL_TIM_Base_Start_IT+0x76>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4a1f      	ldr	r2, [pc, #124]	; (800f050 <HAL_TIM_Base_Start_IT+0xc8>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d013      	beq.n	800effe <HAL_TIM_Base_Start_IT+0x76>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	4a1e      	ldr	r2, [pc, #120]	; (800f054 <HAL_TIM_Base_Start_IT+0xcc>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d00e      	beq.n	800effe <HAL_TIM_Base_Start_IT+0x76>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a1c      	ldr	r2, [pc, #112]	; (800f058 <HAL_TIM_Base_Start_IT+0xd0>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d009      	beq.n	800effe <HAL_TIM_Base_Start_IT+0x76>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4a1b      	ldr	r2, [pc, #108]	; (800f05c <HAL_TIM_Base_Start_IT+0xd4>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d004      	beq.n	800effe <HAL_TIM_Base_Start_IT+0x76>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a19      	ldr	r2, [pc, #100]	; (800f060 <HAL_TIM_Base_Start_IT+0xd8>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d115      	bne.n	800f02a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	689a      	ldr	r2, [r3, #8]
 800f004:	4b17      	ldr	r3, [pc, #92]	; (800f064 <HAL_TIM_Base_Start_IT+0xdc>)
 800f006:	4013      	ands	r3, r2
 800f008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2b06      	cmp	r3, #6
 800f00e:	d015      	beq.n	800f03c <HAL_TIM_Base_Start_IT+0xb4>
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f016:	d011      	beq.n	800f03c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f042 0201 	orr.w	r2, r2, #1
 800f026:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f028:	e008      	b.n	800f03c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f042 0201 	orr.w	r2, r2, #1
 800f038:	601a      	str	r2, [r3, #0]
 800f03a:	e000      	b.n	800f03e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f03c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f03e:	2300      	movs	r3, #0
}
 800f040:	4618      	mov	r0, r3
 800f042:	3714      	adds	r7, #20
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr
 800f04c:	40012c00 	.word	0x40012c00
 800f050:	40000400 	.word	0x40000400
 800f054:	40000800 	.word	0x40000800
 800f058:	40000c00 	.word	0x40000c00
 800f05c:	40013400 	.word	0x40013400
 800f060:	40014000 	.word	0x40014000
 800f064:	00010007 	.word	0x00010007

0800f068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	691b      	ldr	r3, [r3, #16]
 800f076:	f003 0302 	and.w	r3, r3, #2
 800f07a:	2b02      	cmp	r3, #2
 800f07c:	d122      	bne.n	800f0c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	f003 0302 	and.w	r3, r3, #2
 800f088:	2b02      	cmp	r3, #2
 800f08a:	d11b      	bne.n	800f0c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f06f 0202 	mvn.w	r2, #2
 800f094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2201      	movs	r2, #1
 800f09a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	699b      	ldr	r3, [r3, #24]
 800f0a2:	f003 0303 	and.w	r3, r3, #3
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d003      	beq.n	800f0b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f000 f905 	bl	800f2ba <HAL_TIM_IC_CaptureCallback>
 800f0b0:	e005      	b.n	800f0be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 f8f7 	bl	800f2a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 f908 	bl	800f2ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	691b      	ldr	r3, [r3, #16]
 800f0ca:	f003 0304 	and.w	r3, r3, #4
 800f0ce:	2b04      	cmp	r3, #4
 800f0d0:	d122      	bne.n	800f118 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	f003 0304 	and.w	r3, r3, #4
 800f0dc:	2b04      	cmp	r3, #4
 800f0de:	d11b      	bne.n	800f118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f06f 0204 	mvn.w	r2, #4
 800f0e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2202      	movs	r2, #2
 800f0ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	699b      	ldr	r3, [r3, #24]
 800f0f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d003      	beq.n	800f106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f8db 	bl	800f2ba <HAL_TIM_IC_CaptureCallback>
 800f104:	e005      	b.n	800f112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 f8cd 	bl	800f2a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f000 f8de 	bl	800f2ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2200      	movs	r2, #0
 800f116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	691b      	ldr	r3, [r3, #16]
 800f11e:	f003 0308 	and.w	r3, r3, #8
 800f122:	2b08      	cmp	r3, #8
 800f124:	d122      	bne.n	800f16c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	f003 0308 	and.w	r3, r3, #8
 800f130:	2b08      	cmp	r3, #8
 800f132:	d11b      	bne.n	800f16c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f06f 0208 	mvn.w	r2, #8
 800f13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2204      	movs	r2, #4
 800f142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	69db      	ldr	r3, [r3, #28]
 800f14a:	f003 0303 	and.w	r3, r3, #3
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d003      	beq.n	800f15a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 f8b1 	bl	800f2ba <HAL_TIM_IC_CaptureCallback>
 800f158:	e005      	b.n	800f166 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 f8a3 	bl	800f2a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f8b4 	bl	800f2ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2200      	movs	r2, #0
 800f16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	691b      	ldr	r3, [r3, #16]
 800f172:	f003 0310 	and.w	r3, r3, #16
 800f176:	2b10      	cmp	r3, #16
 800f178:	d122      	bne.n	800f1c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	68db      	ldr	r3, [r3, #12]
 800f180:	f003 0310 	and.w	r3, r3, #16
 800f184:	2b10      	cmp	r3, #16
 800f186:	d11b      	bne.n	800f1c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f06f 0210 	mvn.w	r2, #16
 800f190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2208      	movs	r2, #8
 800f196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	69db      	ldr	r3, [r3, #28]
 800f19e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d003      	beq.n	800f1ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 f887 	bl	800f2ba <HAL_TIM_IC_CaptureCallback>
 800f1ac:	e005      	b.n	800f1ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 f879 	bl	800f2a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 f88a 	bl	800f2ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	691b      	ldr	r3, [r3, #16]
 800f1c6:	f003 0301 	and.w	r3, r3, #1
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	d10e      	bne.n	800f1ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	68db      	ldr	r3, [r3, #12]
 800f1d4:	f003 0301 	and.w	r3, r3, #1
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d107      	bne.n	800f1ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f06f 0201 	mvn.w	r2, #1
 800f1e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7f2 fd5c 	bl	8001ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	691b      	ldr	r3, [r3, #16]
 800f1f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1f6:	2b80      	cmp	r3, #128	; 0x80
 800f1f8:	d10e      	bne.n	800f218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f204:	2b80      	cmp	r3, #128	; 0x80
 800f206:	d107      	bne.n	800f218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 f914 	bl	800f440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f226:	d10e      	bne.n	800f246 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f232:	2b80      	cmp	r3, #128	; 0x80
 800f234:	d107      	bne.n	800f246 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f23e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 f907 	bl	800f454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	691b      	ldr	r3, [r3, #16]
 800f24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f250:	2b40      	cmp	r3, #64	; 0x40
 800f252:	d10e      	bne.n	800f272 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f25e:	2b40      	cmp	r3, #64	; 0x40
 800f260:	d107      	bne.n	800f272 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 f838 	bl	800f2e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	f003 0320 	and.w	r3, r3, #32
 800f27c:	2b20      	cmp	r3, #32
 800f27e:	d10e      	bne.n	800f29e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	f003 0320 	and.w	r3, r3, #32
 800f28a:	2b20      	cmp	r3, #32
 800f28c:	d107      	bne.n	800f29e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f06f 0220 	mvn.w	r2, #32
 800f296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 f8c7 	bl	800f42c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f29e:	bf00      	nop
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f2a6:	b480      	push	{r7}
 800f2a8:	b083      	sub	sp, #12
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f2ae:	bf00      	nop
 800f2b0:	370c      	adds	r7, #12
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr

0800f2ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2ba:	b480      	push	{r7}
 800f2bc:	b083      	sub	sp, #12
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f2c2:	bf00      	nop
 800f2c4:	370c      	adds	r7, #12
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr

0800f2ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2ce:	b480      	push	{r7}
 800f2d0:	b083      	sub	sp, #12
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2d6:	bf00      	nop
 800f2d8:	370c      	adds	r7, #12
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr

0800f2e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2e2:	b480      	push	{r7}
 800f2e4:	b083      	sub	sp, #12
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2ea:	bf00      	nop
 800f2ec:	370c      	adds	r7, #12
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr
	...

0800f2f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b085      	sub	sp, #20
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4a40      	ldr	r2, [pc, #256]	; (800f40c <TIM_Base_SetConfig+0x114>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d013      	beq.n	800f338 <TIM_Base_SetConfig+0x40>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f316:	d00f      	beq.n	800f338 <TIM_Base_SetConfig+0x40>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	4a3d      	ldr	r2, [pc, #244]	; (800f410 <TIM_Base_SetConfig+0x118>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d00b      	beq.n	800f338 <TIM_Base_SetConfig+0x40>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	4a3c      	ldr	r2, [pc, #240]	; (800f414 <TIM_Base_SetConfig+0x11c>)
 800f324:	4293      	cmp	r3, r2
 800f326:	d007      	beq.n	800f338 <TIM_Base_SetConfig+0x40>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4a3b      	ldr	r2, [pc, #236]	; (800f418 <TIM_Base_SetConfig+0x120>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d003      	beq.n	800f338 <TIM_Base_SetConfig+0x40>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	4a3a      	ldr	r2, [pc, #232]	; (800f41c <TIM_Base_SetConfig+0x124>)
 800f334:	4293      	cmp	r3, r2
 800f336:	d108      	bne.n	800f34a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f33e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	68fa      	ldr	r2, [r7, #12]
 800f346:	4313      	orrs	r3, r2
 800f348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4a2f      	ldr	r2, [pc, #188]	; (800f40c <TIM_Base_SetConfig+0x114>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d01f      	beq.n	800f392 <TIM_Base_SetConfig+0x9a>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f358:	d01b      	beq.n	800f392 <TIM_Base_SetConfig+0x9a>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4a2c      	ldr	r2, [pc, #176]	; (800f410 <TIM_Base_SetConfig+0x118>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d017      	beq.n	800f392 <TIM_Base_SetConfig+0x9a>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4a2b      	ldr	r2, [pc, #172]	; (800f414 <TIM_Base_SetConfig+0x11c>)
 800f366:	4293      	cmp	r3, r2
 800f368:	d013      	beq.n	800f392 <TIM_Base_SetConfig+0x9a>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4a2a      	ldr	r2, [pc, #168]	; (800f418 <TIM_Base_SetConfig+0x120>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d00f      	beq.n	800f392 <TIM_Base_SetConfig+0x9a>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	4a29      	ldr	r2, [pc, #164]	; (800f41c <TIM_Base_SetConfig+0x124>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d00b      	beq.n	800f392 <TIM_Base_SetConfig+0x9a>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4a28      	ldr	r2, [pc, #160]	; (800f420 <TIM_Base_SetConfig+0x128>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d007      	beq.n	800f392 <TIM_Base_SetConfig+0x9a>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4a27      	ldr	r2, [pc, #156]	; (800f424 <TIM_Base_SetConfig+0x12c>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d003      	beq.n	800f392 <TIM_Base_SetConfig+0x9a>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4a26      	ldr	r2, [pc, #152]	; (800f428 <TIM_Base_SetConfig+0x130>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d108      	bne.n	800f3a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	695b      	ldr	r3, [r3, #20]
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	689a      	ldr	r2, [r3, #8]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	681a      	ldr	r2, [r3, #0]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4a10      	ldr	r2, [pc, #64]	; (800f40c <TIM_Base_SetConfig+0x114>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d00f      	beq.n	800f3f0 <TIM_Base_SetConfig+0xf8>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4a12      	ldr	r2, [pc, #72]	; (800f41c <TIM_Base_SetConfig+0x124>)
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d00b      	beq.n	800f3f0 <TIM_Base_SetConfig+0xf8>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4a11      	ldr	r2, [pc, #68]	; (800f420 <TIM_Base_SetConfig+0x128>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d007      	beq.n	800f3f0 <TIM_Base_SetConfig+0xf8>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4a10      	ldr	r2, [pc, #64]	; (800f424 <TIM_Base_SetConfig+0x12c>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d003      	beq.n	800f3f0 <TIM_Base_SetConfig+0xf8>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a0f      	ldr	r2, [pc, #60]	; (800f428 <TIM_Base_SetConfig+0x130>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d103      	bne.n	800f3f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	691a      	ldr	r2, [r3, #16]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	615a      	str	r2, [r3, #20]
}
 800f3fe:	bf00      	nop
 800f400:	3714      	adds	r7, #20
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr
 800f40a:	bf00      	nop
 800f40c:	40012c00 	.word	0x40012c00
 800f410:	40000400 	.word	0x40000400
 800f414:	40000800 	.word	0x40000800
 800f418:	40000c00 	.word	0x40000c00
 800f41c:	40013400 	.word	0x40013400
 800f420:	40014000 	.word	0x40014000
 800f424:	40014400 	.word	0x40014400
 800f428:	40014800 	.word	0x40014800

0800f42c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f434:	bf00      	nop
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f448:	bf00      	nop
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f454:	b480      	push	{r7}
 800f456:	b083      	sub	sp, #12
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f45c:	bf00      	nop
 800f45e:	370c      	adds	r7, #12
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr

0800f468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d101      	bne.n	800f47a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f476:	2301      	movs	r3, #1
 800f478:	e040      	b.n	800f4fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d106      	bne.n	800f490 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2200      	movs	r2, #0
 800f486:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f7f2 fd10 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2224      	movs	r2, #36	; 0x24
 800f494:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f022 0201 	bic.w	r2, r2, #1
 800f4a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 f8c0 	bl	800f62c <UART_SetConfig>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d101      	bne.n	800f4b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e022      	b.n	800f4fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d002      	beq.n	800f4c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 fb3e 	bl	800fb40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	685a      	ldr	r2, [r3, #4]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f4d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	689a      	ldr	r2, [r3, #8]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f4e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f042 0201 	orr.w	r2, r2, #1
 800f4f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 fbc5 	bl	800fc84 <UART_CheckIdleState>
 800f4fa:	4603      	mov	r3, r0
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3708      	adds	r7, #8
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b08a      	sub	sp, #40	; 0x28
 800f508:	af02      	add	r7, sp, #8
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	603b      	str	r3, [r7, #0]
 800f510:	4613      	mov	r3, r2
 800f512:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f518:	2b20      	cmp	r3, #32
 800f51a:	f040 8082 	bne.w	800f622 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d002      	beq.n	800f52a <HAL_UART_Transmit+0x26>
 800f524:	88fb      	ldrh	r3, [r7, #6]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d101      	bne.n	800f52e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f52a:	2301      	movs	r3, #1
 800f52c:	e07a      	b.n	800f624 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f534:	2b01      	cmp	r3, #1
 800f536:	d101      	bne.n	800f53c <HAL_UART_Transmit+0x38>
 800f538:	2302      	movs	r3, #2
 800f53a:	e073      	b.n	800f624 <HAL_UART_Transmit+0x120>
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2201      	movs	r2, #1
 800f540:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2200      	movs	r2, #0
 800f548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2221      	movs	r2, #33	; 0x21
 800f550:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f552:	f7fb fe53 	bl	800b1fc <HAL_GetTick>
 800f556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	88fa      	ldrh	r2, [r7, #6]
 800f55c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	88fa      	ldrh	r2, [r7, #6]
 800f564:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	689b      	ldr	r3, [r3, #8]
 800f56c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f570:	d108      	bne.n	800f584 <HAL_UART_Transmit+0x80>
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	691b      	ldr	r3, [r3, #16]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d104      	bne.n	800f584 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800f57a:	2300      	movs	r3, #0
 800f57c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	61bb      	str	r3, [r7, #24]
 800f582:	e003      	b.n	800f58c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f588:	2300      	movs	r3, #0
 800f58a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2200      	movs	r2, #0
 800f590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800f594:	e02d      	b.n	800f5f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	9300      	str	r3, [sp, #0]
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	2200      	movs	r2, #0
 800f59e:	2180      	movs	r1, #128	; 0x80
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f000 fbb8 	bl	800fd16 <UART_WaitOnFlagUntilTimeout>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d001      	beq.n	800f5b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800f5ac:	2303      	movs	r3, #3
 800f5ae:	e039      	b.n	800f624 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d10b      	bne.n	800f5ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f5b6:	69bb      	ldr	r3, [r7, #24]
 800f5b8:	881a      	ldrh	r2, [r3, #0]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f5c2:	b292      	uxth	r2, r2
 800f5c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f5c6:	69bb      	ldr	r3, [r7, #24]
 800f5c8:	3302      	adds	r3, #2
 800f5ca:	61bb      	str	r3, [r7, #24]
 800f5cc:	e008      	b.n	800f5e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	781a      	ldrb	r2, [r3, #0]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	b292      	uxth	r2, r2
 800f5d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	3b01      	subs	r3, #1
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d1cb      	bne.n	800f596 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	9300      	str	r3, [sp, #0]
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	2200      	movs	r2, #0
 800f606:	2140      	movs	r1, #64	; 0x40
 800f608:	68f8      	ldr	r0, [r7, #12]
 800f60a:	f000 fb84 	bl	800fd16 <UART_WaitOnFlagUntilTimeout>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d001      	beq.n	800f618 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800f614:	2303      	movs	r3, #3
 800f616:	e005      	b.n	800f624 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2220      	movs	r2, #32
 800f61c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800f61e:	2300      	movs	r3, #0
 800f620:	e000      	b.n	800f624 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800f622:	2302      	movs	r3, #2
  }
}
 800f624:	4618      	mov	r0, r3
 800f626:	3720      	adds	r7, #32
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f62c:	b5b0      	push	{r4, r5, r7, lr}
 800f62e:	b088      	sub	sp, #32
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f634:	2300      	movs	r3, #0
 800f636:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	689a      	ldr	r2, [r3, #8]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	691b      	ldr	r3, [r3, #16]
 800f640:	431a      	orrs	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	695b      	ldr	r3, [r3, #20]
 800f646:	431a      	orrs	r2, r3
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	69db      	ldr	r3, [r3, #28]
 800f64c:	4313      	orrs	r3, r2
 800f64e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	4bad      	ldr	r3, [pc, #692]	; (800f90c <UART_SetConfig+0x2e0>)
 800f658:	4013      	ands	r3, r2
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	6812      	ldr	r2, [r2, #0]
 800f65e:	69f9      	ldr	r1, [r7, #28]
 800f660:	430b      	orrs	r3, r1
 800f662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	68da      	ldr	r2, [r3, #12]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	430a      	orrs	r2, r1
 800f678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	699b      	ldr	r3, [r3, #24]
 800f67e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4aa2      	ldr	r2, [pc, #648]	; (800f910 <UART_SetConfig+0x2e4>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d004      	beq.n	800f694 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6a1b      	ldr	r3, [r3, #32]
 800f68e:	69fa      	ldr	r2, [r7, #28]
 800f690:	4313      	orrs	r3, r2
 800f692:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	689b      	ldr	r3, [r3, #8]
 800f69a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	69fa      	ldr	r2, [r7, #28]
 800f6a4:	430a      	orrs	r2, r1
 800f6a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a99      	ldr	r2, [pc, #612]	; (800f914 <UART_SetConfig+0x2e8>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d121      	bne.n	800f6f6 <UART_SetConfig+0xca>
 800f6b2:	4b99      	ldr	r3, [pc, #612]	; (800f918 <UART_SetConfig+0x2ec>)
 800f6b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6b8:	f003 0303 	and.w	r3, r3, #3
 800f6bc:	2b03      	cmp	r3, #3
 800f6be:	d817      	bhi.n	800f6f0 <UART_SetConfig+0xc4>
 800f6c0:	a201      	add	r2, pc, #4	; (adr r2, 800f6c8 <UART_SetConfig+0x9c>)
 800f6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c6:	bf00      	nop
 800f6c8:	0800f6d9 	.word	0x0800f6d9
 800f6cc:	0800f6e5 	.word	0x0800f6e5
 800f6d0:	0800f6df 	.word	0x0800f6df
 800f6d4:	0800f6eb 	.word	0x0800f6eb
 800f6d8:	2301      	movs	r3, #1
 800f6da:	76fb      	strb	r3, [r7, #27]
 800f6dc:	e0e7      	b.n	800f8ae <UART_SetConfig+0x282>
 800f6de:	2302      	movs	r3, #2
 800f6e0:	76fb      	strb	r3, [r7, #27]
 800f6e2:	e0e4      	b.n	800f8ae <UART_SetConfig+0x282>
 800f6e4:	2304      	movs	r3, #4
 800f6e6:	76fb      	strb	r3, [r7, #27]
 800f6e8:	e0e1      	b.n	800f8ae <UART_SetConfig+0x282>
 800f6ea:	2308      	movs	r3, #8
 800f6ec:	76fb      	strb	r3, [r7, #27]
 800f6ee:	e0de      	b.n	800f8ae <UART_SetConfig+0x282>
 800f6f0:	2310      	movs	r3, #16
 800f6f2:	76fb      	strb	r3, [r7, #27]
 800f6f4:	e0db      	b.n	800f8ae <UART_SetConfig+0x282>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a88      	ldr	r2, [pc, #544]	; (800f91c <UART_SetConfig+0x2f0>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d132      	bne.n	800f766 <UART_SetConfig+0x13a>
 800f700:	4b85      	ldr	r3, [pc, #532]	; (800f918 <UART_SetConfig+0x2ec>)
 800f702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f706:	f003 030c 	and.w	r3, r3, #12
 800f70a:	2b0c      	cmp	r3, #12
 800f70c:	d828      	bhi.n	800f760 <UART_SetConfig+0x134>
 800f70e:	a201      	add	r2, pc, #4	; (adr r2, 800f714 <UART_SetConfig+0xe8>)
 800f710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f714:	0800f749 	.word	0x0800f749
 800f718:	0800f761 	.word	0x0800f761
 800f71c:	0800f761 	.word	0x0800f761
 800f720:	0800f761 	.word	0x0800f761
 800f724:	0800f755 	.word	0x0800f755
 800f728:	0800f761 	.word	0x0800f761
 800f72c:	0800f761 	.word	0x0800f761
 800f730:	0800f761 	.word	0x0800f761
 800f734:	0800f74f 	.word	0x0800f74f
 800f738:	0800f761 	.word	0x0800f761
 800f73c:	0800f761 	.word	0x0800f761
 800f740:	0800f761 	.word	0x0800f761
 800f744:	0800f75b 	.word	0x0800f75b
 800f748:	2300      	movs	r3, #0
 800f74a:	76fb      	strb	r3, [r7, #27]
 800f74c:	e0af      	b.n	800f8ae <UART_SetConfig+0x282>
 800f74e:	2302      	movs	r3, #2
 800f750:	76fb      	strb	r3, [r7, #27]
 800f752:	e0ac      	b.n	800f8ae <UART_SetConfig+0x282>
 800f754:	2304      	movs	r3, #4
 800f756:	76fb      	strb	r3, [r7, #27]
 800f758:	e0a9      	b.n	800f8ae <UART_SetConfig+0x282>
 800f75a:	2308      	movs	r3, #8
 800f75c:	76fb      	strb	r3, [r7, #27]
 800f75e:	e0a6      	b.n	800f8ae <UART_SetConfig+0x282>
 800f760:	2310      	movs	r3, #16
 800f762:	76fb      	strb	r3, [r7, #27]
 800f764:	e0a3      	b.n	800f8ae <UART_SetConfig+0x282>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4a6d      	ldr	r2, [pc, #436]	; (800f920 <UART_SetConfig+0x2f4>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d120      	bne.n	800f7b2 <UART_SetConfig+0x186>
 800f770:	4b69      	ldr	r3, [pc, #420]	; (800f918 <UART_SetConfig+0x2ec>)
 800f772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f776:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f77a:	2b30      	cmp	r3, #48	; 0x30
 800f77c:	d013      	beq.n	800f7a6 <UART_SetConfig+0x17a>
 800f77e:	2b30      	cmp	r3, #48	; 0x30
 800f780:	d814      	bhi.n	800f7ac <UART_SetConfig+0x180>
 800f782:	2b20      	cmp	r3, #32
 800f784:	d009      	beq.n	800f79a <UART_SetConfig+0x16e>
 800f786:	2b20      	cmp	r3, #32
 800f788:	d810      	bhi.n	800f7ac <UART_SetConfig+0x180>
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d002      	beq.n	800f794 <UART_SetConfig+0x168>
 800f78e:	2b10      	cmp	r3, #16
 800f790:	d006      	beq.n	800f7a0 <UART_SetConfig+0x174>
 800f792:	e00b      	b.n	800f7ac <UART_SetConfig+0x180>
 800f794:	2300      	movs	r3, #0
 800f796:	76fb      	strb	r3, [r7, #27]
 800f798:	e089      	b.n	800f8ae <UART_SetConfig+0x282>
 800f79a:	2302      	movs	r3, #2
 800f79c:	76fb      	strb	r3, [r7, #27]
 800f79e:	e086      	b.n	800f8ae <UART_SetConfig+0x282>
 800f7a0:	2304      	movs	r3, #4
 800f7a2:	76fb      	strb	r3, [r7, #27]
 800f7a4:	e083      	b.n	800f8ae <UART_SetConfig+0x282>
 800f7a6:	2308      	movs	r3, #8
 800f7a8:	76fb      	strb	r3, [r7, #27]
 800f7aa:	e080      	b.n	800f8ae <UART_SetConfig+0x282>
 800f7ac:	2310      	movs	r3, #16
 800f7ae:	76fb      	strb	r3, [r7, #27]
 800f7b0:	e07d      	b.n	800f8ae <UART_SetConfig+0x282>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	4a5b      	ldr	r2, [pc, #364]	; (800f924 <UART_SetConfig+0x2f8>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d120      	bne.n	800f7fe <UART_SetConfig+0x1d2>
 800f7bc:	4b56      	ldr	r3, [pc, #344]	; (800f918 <UART_SetConfig+0x2ec>)
 800f7be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f7c6:	2bc0      	cmp	r3, #192	; 0xc0
 800f7c8:	d013      	beq.n	800f7f2 <UART_SetConfig+0x1c6>
 800f7ca:	2bc0      	cmp	r3, #192	; 0xc0
 800f7cc:	d814      	bhi.n	800f7f8 <UART_SetConfig+0x1cc>
 800f7ce:	2b80      	cmp	r3, #128	; 0x80
 800f7d0:	d009      	beq.n	800f7e6 <UART_SetConfig+0x1ba>
 800f7d2:	2b80      	cmp	r3, #128	; 0x80
 800f7d4:	d810      	bhi.n	800f7f8 <UART_SetConfig+0x1cc>
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d002      	beq.n	800f7e0 <UART_SetConfig+0x1b4>
 800f7da:	2b40      	cmp	r3, #64	; 0x40
 800f7dc:	d006      	beq.n	800f7ec <UART_SetConfig+0x1c0>
 800f7de:	e00b      	b.n	800f7f8 <UART_SetConfig+0x1cc>
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	76fb      	strb	r3, [r7, #27]
 800f7e4:	e063      	b.n	800f8ae <UART_SetConfig+0x282>
 800f7e6:	2302      	movs	r3, #2
 800f7e8:	76fb      	strb	r3, [r7, #27]
 800f7ea:	e060      	b.n	800f8ae <UART_SetConfig+0x282>
 800f7ec:	2304      	movs	r3, #4
 800f7ee:	76fb      	strb	r3, [r7, #27]
 800f7f0:	e05d      	b.n	800f8ae <UART_SetConfig+0x282>
 800f7f2:	2308      	movs	r3, #8
 800f7f4:	76fb      	strb	r3, [r7, #27]
 800f7f6:	e05a      	b.n	800f8ae <UART_SetConfig+0x282>
 800f7f8:	2310      	movs	r3, #16
 800f7fa:	76fb      	strb	r3, [r7, #27]
 800f7fc:	e057      	b.n	800f8ae <UART_SetConfig+0x282>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	4a49      	ldr	r2, [pc, #292]	; (800f928 <UART_SetConfig+0x2fc>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d125      	bne.n	800f854 <UART_SetConfig+0x228>
 800f808:	4b43      	ldr	r3, [pc, #268]	; (800f918 <UART_SetConfig+0x2ec>)
 800f80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f80e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f816:	d017      	beq.n	800f848 <UART_SetConfig+0x21c>
 800f818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f81c:	d817      	bhi.n	800f84e <UART_SetConfig+0x222>
 800f81e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f822:	d00b      	beq.n	800f83c <UART_SetConfig+0x210>
 800f824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f828:	d811      	bhi.n	800f84e <UART_SetConfig+0x222>
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d003      	beq.n	800f836 <UART_SetConfig+0x20a>
 800f82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f832:	d006      	beq.n	800f842 <UART_SetConfig+0x216>
 800f834:	e00b      	b.n	800f84e <UART_SetConfig+0x222>
 800f836:	2300      	movs	r3, #0
 800f838:	76fb      	strb	r3, [r7, #27]
 800f83a:	e038      	b.n	800f8ae <UART_SetConfig+0x282>
 800f83c:	2302      	movs	r3, #2
 800f83e:	76fb      	strb	r3, [r7, #27]
 800f840:	e035      	b.n	800f8ae <UART_SetConfig+0x282>
 800f842:	2304      	movs	r3, #4
 800f844:	76fb      	strb	r3, [r7, #27]
 800f846:	e032      	b.n	800f8ae <UART_SetConfig+0x282>
 800f848:	2308      	movs	r3, #8
 800f84a:	76fb      	strb	r3, [r7, #27]
 800f84c:	e02f      	b.n	800f8ae <UART_SetConfig+0x282>
 800f84e:	2310      	movs	r3, #16
 800f850:	76fb      	strb	r3, [r7, #27]
 800f852:	e02c      	b.n	800f8ae <UART_SetConfig+0x282>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	4a2d      	ldr	r2, [pc, #180]	; (800f910 <UART_SetConfig+0x2e4>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d125      	bne.n	800f8aa <UART_SetConfig+0x27e>
 800f85e:	4b2e      	ldr	r3, [pc, #184]	; (800f918 <UART_SetConfig+0x2ec>)
 800f860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f86c:	d017      	beq.n	800f89e <UART_SetConfig+0x272>
 800f86e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f872:	d817      	bhi.n	800f8a4 <UART_SetConfig+0x278>
 800f874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f878:	d00b      	beq.n	800f892 <UART_SetConfig+0x266>
 800f87a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f87e:	d811      	bhi.n	800f8a4 <UART_SetConfig+0x278>
 800f880:	2b00      	cmp	r3, #0
 800f882:	d003      	beq.n	800f88c <UART_SetConfig+0x260>
 800f884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f888:	d006      	beq.n	800f898 <UART_SetConfig+0x26c>
 800f88a:	e00b      	b.n	800f8a4 <UART_SetConfig+0x278>
 800f88c:	2300      	movs	r3, #0
 800f88e:	76fb      	strb	r3, [r7, #27]
 800f890:	e00d      	b.n	800f8ae <UART_SetConfig+0x282>
 800f892:	2302      	movs	r3, #2
 800f894:	76fb      	strb	r3, [r7, #27]
 800f896:	e00a      	b.n	800f8ae <UART_SetConfig+0x282>
 800f898:	2304      	movs	r3, #4
 800f89a:	76fb      	strb	r3, [r7, #27]
 800f89c:	e007      	b.n	800f8ae <UART_SetConfig+0x282>
 800f89e:	2308      	movs	r3, #8
 800f8a0:	76fb      	strb	r3, [r7, #27]
 800f8a2:	e004      	b.n	800f8ae <UART_SetConfig+0x282>
 800f8a4:	2310      	movs	r3, #16
 800f8a6:	76fb      	strb	r3, [r7, #27]
 800f8a8:	e001      	b.n	800f8ae <UART_SetConfig+0x282>
 800f8aa:	2310      	movs	r3, #16
 800f8ac:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	4a17      	ldr	r2, [pc, #92]	; (800f910 <UART_SetConfig+0x2e4>)
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	f040 8087 	bne.w	800f9c8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f8ba:	7efb      	ldrb	r3, [r7, #27]
 800f8bc:	2b08      	cmp	r3, #8
 800f8be:	d837      	bhi.n	800f930 <UART_SetConfig+0x304>
 800f8c0:	a201      	add	r2, pc, #4	; (adr r2, 800f8c8 <UART_SetConfig+0x29c>)
 800f8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c6:	bf00      	nop
 800f8c8:	0800f8ed 	.word	0x0800f8ed
 800f8cc:	0800f931 	.word	0x0800f931
 800f8d0:	0800f8f5 	.word	0x0800f8f5
 800f8d4:	0800f931 	.word	0x0800f931
 800f8d8:	0800f8fb 	.word	0x0800f8fb
 800f8dc:	0800f931 	.word	0x0800f931
 800f8e0:	0800f931 	.word	0x0800f931
 800f8e4:	0800f931 	.word	0x0800f931
 800f8e8:	0800f903 	.word	0x0800f903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f8ec:	f7fd fe64 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800f8f0:	6178      	str	r0, [r7, #20]
        break;
 800f8f2:	e022      	b.n	800f93a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f8f4:	4b0d      	ldr	r3, [pc, #52]	; (800f92c <UART_SetConfig+0x300>)
 800f8f6:	617b      	str	r3, [r7, #20]
        break;
 800f8f8:	e01f      	b.n	800f93a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f8fa:	f7fd fdc5 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800f8fe:	6178      	str	r0, [r7, #20]
        break;
 800f900:	e01b      	b.n	800f93a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f906:	617b      	str	r3, [r7, #20]
        break;
 800f908:	e017      	b.n	800f93a <UART_SetConfig+0x30e>
 800f90a:	bf00      	nop
 800f90c:	efff69f3 	.word	0xefff69f3
 800f910:	40008000 	.word	0x40008000
 800f914:	40013800 	.word	0x40013800
 800f918:	40021000 	.word	0x40021000
 800f91c:	40004400 	.word	0x40004400
 800f920:	40004800 	.word	0x40004800
 800f924:	40004c00 	.word	0x40004c00
 800f928:	40005000 	.word	0x40005000
 800f92c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800f930:	2300      	movs	r3, #0
 800f932:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800f934:	2301      	movs	r3, #1
 800f936:	76bb      	strb	r3, [r7, #26]
        break;
 800f938:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f000 80f1 	beq.w	800fb24 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	685a      	ldr	r2, [r3, #4]
 800f946:	4613      	mov	r3, r2
 800f948:	005b      	lsls	r3, r3, #1
 800f94a:	4413      	add	r3, r2
 800f94c:	697a      	ldr	r2, [r7, #20]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d305      	bcc.n	800f95e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f958:	697a      	ldr	r2, [r7, #20]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d902      	bls.n	800f964 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800f95e:	2301      	movs	r3, #1
 800f960:	76bb      	strb	r3, [r7, #26]
 800f962:	e0df      	b.n	800fb24 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	4618      	mov	r0, r3
 800f968:	f04f 0100 	mov.w	r1, #0
 800f96c:	f04f 0200 	mov.w	r2, #0
 800f970:	f04f 0300 	mov.w	r3, #0
 800f974:	020b      	lsls	r3, r1, #8
 800f976:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f97a:	0202      	lsls	r2, r0, #8
 800f97c:	6879      	ldr	r1, [r7, #4]
 800f97e:	6849      	ldr	r1, [r1, #4]
 800f980:	0849      	lsrs	r1, r1, #1
 800f982:	4608      	mov	r0, r1
 800f984:	f04f 0100 	mov.w	r1, #0
 800f988:	1814      	adds	r4, r2, r0
 800f98a:	eb43 0501 	adc.w	r5, r3, r1
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	461a      	mov	r2, r3
 800f994:	f04f 0300 	mov.w	r3, #0
 800f998:	4620      	mov	r0, r4
 800f99a:	4629      	mov	r1, r5
 800f99c:	f7f1 f904 	bl	8000ba8 <__aeabi_uldivmod>
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	4613      	mov	r3, r2
 800f9a6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f9ae:	d308      	bcc.n	800f9c2 <UART_SetConfig+0x396>
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9b6:	d204      	bcs.n	800f9c2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	693a      	ldr	r2, [r7, #16]
 800f9be:	60da      	str	r2, [r3, #12]
 800f9c0:	e0b0      	b.n	800fb24 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	76bb      	strb	r3, [r7, #26]
 800f9c6:	e0ad      	b.n	800fb24 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	69db      	ldr	r3, [r3, #28]
 800f9cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9d0:	d15c      	bne.n	800fa8c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800f9d2:	7efb      	ldrb	r3, [r7, #27]
 800f9d4:	2b08      	cmp	r3, #8
 800f9d6:	d828      	bhi.n	800fa2a <UART_SetConfig+0x3fe>
 800f9d8:	a201      	add	r2, pc, #4	; (adr r2, 800f9e0 <UART_SetConfig+0x3b4>)
 800f9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9de:	bf00      	nop
 800f9e0:	0800fa05 	.word	0x0800fa05
 800f9e4:	0800fa0d 	.word	0x0800fa0d
 800f9e8:	0800fa15 	.word	0x0800fa15
 800f9ec:	0800fa2b 	.word	0x0800fa2b
 800f9f0:	0800fa1b 	.word	0x0800fa1b
 800f9f4:	0800fa2b 	.word	0x0800fa2b
 800f9f8:	0800fa2b 	.word	0x0800fa2b
 800f9fc:	0800fa2b 	.word	0x0800fa2b
 800fa00:	0800fa23 	.word	0x0800fa23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa04:	f7fd fdd8 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800fa08:	6178      	str	r0, [r7, #20]
        break;
 800fa0a:	e013      	b.n	800fa34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa0c:	f7fd fdea 	bl	800d5e4 <HAL_RCC_GetPCLK2Freq>
 800fa10:	6178      	str	r0, [r7, #20]
        break;
 800fa12:	e00f      	b.n	800fa34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fa14:	4b49      	ldr	r3, [pc, #292]	; (800fb3c <UART_SetConfig+0x510>)
 800fa16:	617b      	str	r3, [r7, #20]
        break;
 800fa18:	e00c      	b.n	800fa34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fa1a:	f7fd fd35 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800fa1e:	6178      	str	r0, [r7, #20]
        break;
 800fa20:	e008      	b.n	800fa34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa26:	617b      	str	r3, [r7, #20]
        break;
 800fa28:	e004      	b.n	800fa34 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	76bb      	strb	r3, [r7, #26]
        break;
 800fa32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d074      	beq.n	800fb24 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	005a      	lsls	r2, r3, #1
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	085b      	lsrs	r3, r3, #1
 800fa44:	441a      	add	r2, r3
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	2b0f      	cmp	r3, #15
 800fa56:	d916      	bls.n	800fa86 <UART_SetConfig+0x45a>
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa5e:	d212      	bcs.n	800fa86 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	f023 030f 	bic.w	r3, r3, #15
 800fa68:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	085b      	lsrs	r3, r3, #1
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	f003 0307 	and.w	r3, r3, #7
 800fa74:	b29a      	uxth	r2, r3
 800fa76:	89fb      	ldrh	r3, [r7, #14]
 800fa78:	4313      	orrs	r3, r2
 800fa7a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	89fa      	ldrh	r2, [r7, #14]
 800fa82:	60da      	str	r2, [r3, #12]
 800fa84:	e04e      	b.n	800fb24 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800fa86:	2301      	movs	r3, #1
 800fa88:	76bb      	strb	r3, [r7, #26]
 800fa8a:	e04b      	b.n	800fb24 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fa8c:	7efb      	ldrb	r3, [r7, #27]
 800fa8e:	2b08      	cmp	r3, #8
 800fa90:	d827      	bhi.n	800fae2 <UART_SetConfig+0x4b6>
 800fa92:	a201      	add	r2, pc, #4	; (adr r2, 800fa98 <UART_SetConfig+0x46c>)
 800fa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa98:	0800fabd 	.word	0x0800fabd
 800fa9c:	0800fac5 	.word	0x0800fac5
 800faa0:	0800facd 	.word	0x0800facd
 800faa4:	0800fae3 	.word	0x0800fae3
 800faa8:	0800fad3 	.word	0x0800fad3
 800faac:	0800fae3 	.word	0x0800fae3
 800fab0:	0800fae3 	.word	0x0800fae3
 800fab4:	0800fae3 	.word	0x0800fae3
 800fab8:	0800fadb 	.word	0x0800fadb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fabc:	f7fd fd7c 	bl	800d5b8 <HAL_RCC_GetPCLK1Freq>
 800fac0:	6178      	str	r0, [r7, #20]
        break;
 800fac2:	e013      	b.n	800faec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fac4:	f7fd fd8e 	bl	800d5e4 <HAL_RCC_GetPCLK2Freq>
 800fac8:	6178      	str	r0, [r7, #20]
        break;
 800faca:	e00f      	b.n	800faec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800facc:	4b1b      	ldr	r3, [pc, #108]	; (800fb3c <UART_SetConfig+0x510>)
 800face:	617b      	str	r3, [r7, #20]
        break;
 800fad0:	e00c      	b.n	800faec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fad2:	f7fd fcd9 	bl	800d488 <HAL_RCC_GetSysClockFreq>
 800fad6:	6178      	str	r0, [r7, #20]
        break;
 800fad8:	e008      	b.n	800faec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fade:	617b      	str	r3, [r7, #20]
        break;
 800fae0:	e004      	b.n	800faec <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800fae2:	2300      	movs	r3, #0
 800fae4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800fae6:	2301      	movs	r3, #1
 800fae8:	76bb      	strb	r3, [r7, #26]
        break;
 800faea:	bf00      	nop
    }

    if (pclk != 0U)
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d018      	beq.n	800fb24 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	085a      	lsrs	r2, r3, #1
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	441a      	add	r2, r3
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	2b0f      	cmp	r3, #15
 800fb0c:	d908      	bls.n	800fb20 <UART_SetConfig+0x4f4>
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb14:	d204      	bcs.n	800fb20 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	693a      	ldr	r2, [r7, #16]
 800fb1c:	60da      	str	r2, [r3, #12]
 800fb1e:	e001      	b.n	800fb24 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800fb20:	2301      	movs	r3, #1
 800fb22:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800fb30:	7ebb      	ldrb	r3, [r7, #26]
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3720      	adds	r7, #32
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bdb0      	pop	{r4, r5, r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	00f42400 	.word	0x00f42400

0800fb40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4c:	f003 0301 	and.w	r3, r3, #1
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00a      	beq.n	800fb6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	430a      	orrs	r2, r1
 800fb68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6e:	f003 0302 	and.w	r3, r3, #2
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d00a      	beq.n	800fb8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	430a      	orrs	r2, r1
 800fb8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb90:	f003 0304 	and.w	r3, r3, #4
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d00a      	beq.n	800fbae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	430a      	orrs	r2, r1
 800fbac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbb2:	f003 0308 	and.w	r3, r3, #8
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d00a      	beq.n	800fbd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	430a      	orrs	r2, r1
 800fbce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd4:	f003 0310 	and.w	r3, r3, #16
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00a      	beq.n	800fbf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	430a      	orrs	r2, r1
 800fbf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf6:	f003 0320 	and.w	r3, r3, #32
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d00a      	beq.n	800fc14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	430a      	orrs	r2, r1
 800fc12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d01a      	beq.n	800fc56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	430a      	orrs	r2, r1
 800fc34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc3e:	d10a      	bne.n	800fc56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	685b      	ldr	r3, [r3, #4]
 800fc46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	430a      	orrs	r2, r1
 800fc54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d00a      	beq.n	800fc78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	430a      	orrs	r2, r1
 800fc76:	605a      	str	r2, [r3, #4]
  }
}
 800fc78:	bf00      	nop
 800fc7a:	370c      	adds	r7, #12
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af02      	add	r7, sp, #8
 800fc8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc94:	f7fb fab2 	bl	800b1fc <HAL_GetTick>
 800fc98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f003 0308 	and.w	r3, r3, #8
 800fca4:	2b08      	cmp	r3, #8
 800fca6:	d10e      	bne.n	800fcc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f000 f82d 	bl	800fd16 <UART_WaitOnFlagUntilTimeout>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d001      	beq.n	800fcc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fcc2:	2303      	movs	r3, #3
 800fcc4:	e023      	b.n	800fd0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	f003 0304 	and.w	r3, r3, #4
 800fcd0:	2b04      	cmp	r3, #4
 800fcd2:	d10e      	bne.n	800fcf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fcd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 f817 	bl	800fd16 <UART_WaitOnFlagUntilTimeout>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d001      	beq.n	800fcf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fcee:	2303      	movs	r3, #3
 800fcf0:	e00d      	b.n	800fd0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2220      	movs	r2, #32
 800fcf6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2220      	movs	r2, #32
 800fcfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800fd0c:	2300      	movs	r3, #0
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3710      	adds	r7, #16
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}

0800fd16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b084      	sub	sp, #16
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	60f8      	str	r0, [r7, #12]
 800fd1e:	60b9      	str	r1, [r7, #8]
 800fd20:	603b      	str	r3, [r7, #0]
 800fd22:	4613      	mov	r3, r2
 800fd24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd26:	e05e      	b.n	800fde6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd28:	69bb      	ldr	r3, [r7, #24]
 800fd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd2e:	d05a      	beq.n	800fde6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd30:	f7fb fa64 	bl	800b1fc <HAL_GetTick>
 800fd34:	4602      	mov	r2, r0
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	69ba      	ldr	r2, [r7, #24]
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d302      	bcc.n	800fd46 <UART_WaitOnFlagUntilTimeout+0x30>
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d11b      	bne.n	800fd7e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fd54:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	689a      	ldr	r2, [r3, #8]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f022 0201 	bic.w	r2, r2, #1
 800fd64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2220      	movs	r2, #32
 800fd6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2220      	movs	r2, #32
 800fd70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800fd7a:	2303      	movs	r3, #3
 800fd7c:	e043      	b.n	800fe06 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f003 0304 	and.w	r3, r3, #4
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d02c      	beq.n	800fde6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	69db      	ldr	r3, [r3, #28]
 800fd92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd9a:	d124      	bne.n	800fde6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fda4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fdb4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	689a      	ldr	r2, [r3, #8]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f022 0201 	bic.w	r2, r2, #1
 800fdc4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2220      	movs	r2, #32
 800fdca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2220      	movs	r2, #32
 800fdd0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2220      	movs	r2, #32
 800fdd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2200      	movs	r2, #0
 800fdde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800fde2:	2303      	movs	r3, #3
 800fde4:	e00f      	b.n	800fe06 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	69da      	ldr	r2, [r3, #28]
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	4013      	ands	r3, r2
 800fdf0:	68ba      	ldr	r2, [r7, #8]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	bf0c      	ite	eq
 800fdf6:	2301      	moveq	r3, #1
 800fdf8:	2300      	movne	r3, #0
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	79fb      	ldrb	r3, [r7, #7]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d091      	beq.n	800fd28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe04:	2300      	movs	r3, #0
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3710      	adds	r7, #16
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fe0e:	b480      	push	{r7}
 800fe10:	b085      	sub	sp, #20
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	4603      	mov	r3, r0
 800fe16:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fe1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fe20:	2b84      	cmp	r3, #132	; 0x84
 800fe22:	d005      	beq.n	800fe30 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fe24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	3303      	adds	r3, #3
 800fe2e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fe30:	68fb      	ldr	r3, [r7, #12]
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3714      	adds	r7, #20
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr

0800fe3e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fe3e:	b480      	push	{r7}
 800fe40:	b083      	sub	sp, #12
 800fe42:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe44:	f3ef 8305 	mrs	r3, IPSR
 800fe48:	607b      	str	r3, [r7, #4]
  return(result);
 800fe4a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	bf14      	ite	ne
 800fe50:	2301      	movne	r3, #1
 800fe52:	2300      	moveq	r3, #0
 800fe54:	b2db      	uxtb	r3, r3
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	370c      	adds	r7, #12
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe60:	4770      	bx	lr

0800fe62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fe62:	b580      	push	{r7, lr}
 800fe64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fe66:	f001 f95f 	bl	8011128 <vTaskStartScheduler>
  
  return osOK;
 800fe6a:	2300      	movs	r3, #0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fe70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe72:	b089      	sub	sp, #36	; 0x24
 800fe74:	af04      	add	r7, sp, #16
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	695b      	ldr	r3, [r3, #20]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d020      	beq.n	800fec4 <osThreadCreate+0x54>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	699b      	ldr	r3, [r3, #24]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d01c      	beq.n	800fec4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	685c      	ldr	r4, [r3, #4]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681d      	ldr	r5, [r3, #0]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	691e      	ldr	r6, [r3, #16]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7ff ffb6 	bl	800fe0e <makeFreeRtosPriority>
 800fea2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	695b      	ldr	r3, [r3, #20]
 800fea8:	687a      	ldr	r2, [r7, #4]
 800feaa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800feac:	9202      	str	r2, [sp, #8]
 800feae:	9301      	str	r3, [sp, #4]
 800feb0:	9100      	str	r1, [sp, #0]
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	4632      	mov	r2, r6
 800feb6:	4629      	mov	r1, r5
 800feb8:	4620      	mov	r0, r4
 800feba:	f000 ff4f 	bl	8010d5c <xTaskCreateStatic>
 800febe:	4603      	mov	r3, r0
 800fec0:	60fb      	str	r3, [r7, #12]
 800fec2:	e01c      	b.n	800fefe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	685c      	ldr	r4, [r3, #4]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fed0:	b29e      	uxth	r6, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fed8:	4618      	mov	r0, r3
 800feda:	f7ff ff98 	bl	800fe0e <makeFreeRtosPriority>
 800fede:	4602      	mov	r2, r0
 800fee0:	f107 030c 	add.w	r3, r7, #12
 800fee4:	9301      	str	r3, [sp, #4]
 800fee6:	9200      	str	r2, [sp, #0]
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	4632      	mov	r2, r6
 800feec:	4629      	mov	r1, r5
 800feee:	4620      	mov	r0, r4
 800fef0:	f000 ff91 	bl	8010e16 <xTaskCreate>
 800fef4:	4603      	mov	r3, r0
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	d001      	beq.n	800fefe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800fefa:	2300      	movs	r3, #0
 800fefc:	e000      	b.n	800ff00 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800fefe:	68fb      	ldr	r3, [r7, #12]
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3714      	adds	r7, #20
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d001      	beq.n	800ff1e <osDelay+0x16>
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	e000      	b.n	800ff20 <osDelay+0x18>
 800ff1e:	2301      	movs	r3, #1
 800ff20:	4618      	mov	r0, r3
 800ff22:	f001 f8cd 	bl	80110c0 <vTaskDelay>
  
  return osOK;
 800ff26:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3710      	adds	r7, #16
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d007      	beq.n	800ff50 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	4619      	mov	r1, r3
 800ff46:	2001      	movs	r0, #1
 800ff48:	f000 faad 	bl	80104a6 <xQueueCreateMutexStatic>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	e003      	b.n	800ff58 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ff50:	2001      	movs	r0, #1
 800ff52:	f000 fa90 	bl	8010476 <xQueueCreateMutex>
 800ff56:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d101      	bne.n	800ff78 <osMutexWait+0x18>
    return osErrorParameter;
 800ff74:	2380      	movs	r3, #128	; 0x80
 800ff76:	e03a      	b.n	800ffee <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff82:	d103      	bne.n	800ff8c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ff84:	f04f 33ff 	mov.w	r3, #4294967295
 800ff88:	60fb      	str	r3, [r7, #12]
 800ff8a:	e009      	b.n	800ffa0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d006      	beq.n	800ffa0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d101      	bne.n	800ffa0 <osMutexWait+0x40>
      ticks = 1;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ffa0:	f7ff ff4d 	bl	800fe3e <inHandlerMode>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d017      	beq.n	800ffda <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ffaa:	f107 0308 	add.w	r3, r7, #8
 800ffae:	461a      	mov	r2, r3
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 fd2a 	bl	8010a0c <xQueueReceiveFromISR>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b01      	cmp	r3, #1
 800ffbc:	d001      	beq.n	800ffc2 <osMutexWait+0x62>
      return osErrorOS;
 800ffbe:	23ff      	movs	r3, #255	; 0xff
 800ffc0:	e015      	b.n	800ffee <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d011      	beq.n	800ffec <osMutexWait+0x8c>
 800ffc8:	4b0b      	ldr	r3, [pc, #44]	; (800fff8 <osMutexWait+0x98>)
 800ffca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffce:	601a      	str	r2, [r3, #0]
 800ffd0:	f3bf 8f4f 	dsb	sy
 800ffd4:	f3bf 8f6f 	isb	sy
 800ffd8:	e008      	b.n	800ffec <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ffda:	68f9      	ldr	r1, [r7, #12]
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f000 fc09 	bl	80107f4 <xQueueSemaphoreTake>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	d001      	beq.n	800ffec <osMutexWait+0x8c>
    return osErrorOS;
 800ffe8:	23ff      	movs	r3, #255	; 0xff
 800ffea:	e000      	b.n	800ffee <osMutexWait+0x8e>
  }
  
  return osOK;
 800ffec:	2300      	movs	r3, #0
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3710      	adds	r7, #16
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	e000ed04 	.word	0xe000ed04

0800fffc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010004:	2300      	movs	r3, #0
 8010006:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010008:	2300      	movs	r3, #0
 801000a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 801000c:	f7ff ff17 	bl	800fe3e <inHandlerMode>
 8010010:	4603      	mov	r3, r0
 8010012:	2b00      	cmp	r3, #0
 8010014:	d016      	beq.n	8010044 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8010016:	f107 0308 	add.w	r3, r7, #8
 801001a:	4619      	mov	r1, r3
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 fb5b 	bl	80106d8 <xQueueGiveFromISR>
 8010022:	4603      	mov	r3, r0
 8010024:	2b01      	cmp	r3, #1
 8010026:	d001      	beq.n	801002c <osMutexRelease+0x30>
      return osErrorOS;
 8010028:	23ff      	movs	r3, #255	; 0xff
 801002a:	e017      	b.n	801005c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d013      	beq.n	801005a <osMutexRelease+0x5e>
 8010032:	4b0c      	ldr	r3, [pc, #48]	; (8010064 <osMutexRelease+0x68>)
 8010034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010038:	601a      	str	r2, [r3, #0]
 801003a:	f3bf 8f4f 	dsb	sy
 801003e:	f3bf 8f6f 	isb	sy
 8010042:	e00a      	b.n	801005a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8010044:	2300      	movs	r3, #0
 8010046:	2200      	movs	r2, #0
 8010048:	2100      	movs	r1, #0
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 fa46 	bl	80104dc <xQueueGenericSend>
 8010050:	4603      	mov	r3, r0
 8010052:	2b01      	cmp	r3, #1
 8010054:	d001      	beq.n	801005a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8010056:	23ff      	movs	r3, #255	; 0xff
 8010058:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801005a:	68fb      	ldr	r3, [r7, #12]
}
 801005c:	4618      	mov	r0, r3
 801005e:	3710      	adds	r7, #16
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	e000ed04 	.word	0xe000ed04

08010068 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f103 0208 	add.w	r2, r3, #8
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f04f 32ff 	mov.w	r2, #4294967295
 8010080:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f103 0208 	add.w	r2, r3, #8
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f103 0208 	add.w	r2, r3, #8
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801009c:	bf00      	nop
 801009e:	370c      	adds	r7, #12
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr

080100a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2200      	movs	r2, #0
 80100b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80100b6:	bf00      	nop
 80100b8:	370c      	adds	r7, #12
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr

080100c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80100c2:	b480      	push	{r7}
 80100c4:	b085      	sub	sp, #20
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
 80100ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	689a      	ldr	r2, [r3, #8]
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	683a      	ldr	r2, [r7, #0]
 80100e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	683a      	ldr	r2, [r7, #0]
 80100ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	1c5a      	adds	r2, r3, #1
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	601a      	str	r2, [r3, #0]
}
 80100fe:	bf00      	nop
 8010100:	3714      	adds	r7, #20
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr

0801010a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801010a:	b480      	push	{r7}
 801010c:	b085      	sub	sp, #20
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
 8010112:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010120:	d103      	bne.n	801012a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	691b      	ldr	r3, [r3, #16]
 8010126:	60fb      	str	r3, [r7, #12]
 8010128:	e00c      	b.n	8010144 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	3308      	adds	r3, #8
 801012e:	60fb      	str	r3, [r7, #12]
 8010130:	e002      	b.n	8010138 <vListInsert+0x2e>
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	60fb      	str	r3, [r7, #12]
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	68ba      	ldr	r2, [r7, #8]
 8010140:	429a      	cmp	r2, r3
 8010142:	d2f6      	bcs.n	8010132 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	685a      	ldr	r2, [r3, #4]
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	683a      	ldr	r2, [r7, #0]
 8010152:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	68fa      	ldr	r2, [r7, #12]
 8010158:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	683a      	ldr	r2, [r7, #0]
 801015e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	1c5a      	adds	r2, r3, #1
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	601a      	str	r2, [r3, #0]
}
 8010170:	bf00      	nop
 8010172:	3714      	adds	r7, #20
 8010174:	46bd      	mov	sp, r7
 8010176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017a:	4770      	bx	lr

0801017c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801017c:	b480      	push	{r7}
 801017e:	b085      	sub	sp, #20
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	691b      	ldr	r3, [r3, #16]
 8010188:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	6892      	ldr	r2, [r2, #8]
 8010192:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	689b      	ldr	r3, [r3, #8]
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	6852      	ldr	r2, [r2, #4]
 801019c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d103      	bne.n	80101b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	689a      	ldr	r2, [r3, #8]
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2200      	movs	r2, #0
 80101b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	1e5a      	subs	r2, r3, #1
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	681b      	ldr	r3, [r3, #0]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3714      	adds	r7, #20
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr

080101d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10a      	bne.n	80101fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80101e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e8:	f383 8811 	msr	BASEPRI, r3
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80101f6:	bf00      	nop
 80101f8:	e7fe      	b.n	80101f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80101fa:	f001 ff03 	bl	8012004 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010206:	68f9      	ldr	r1, [r7, #12]
 8010208:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801020a:	fb01 f303 	mul.w	r3, r1, r3
 801020e:	441a      	add	r2, r3
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2200      	movs	r2, #0
 8010218:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681a      	ldr	r2, [r3, #0]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801022a:	3b01      	subs	r3, #1
 801022c:	68f9      	ldr	r1, [r7, #12]
 801022e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010230:	fb01 f303 	mul.w	r3, r1, r3
 8010234:	441a      	add	r2, r3
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	22ff      	movs	r2, #255	; 0xff
 801023e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	22ff      	movs	r2, #255	; 0xff
 8010246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d114      	bne.n	801027a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	691b      	ldr	r3, [r3, #16]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d01a      	beq.n	801028e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	3310      	adds	r3, #16
 801025c:	4618      	mov	r0, r3
 801025e:	f001 f9c5 	bl	80115ec <xTaskRemoveFromEventList>
 8010262:	4603      	mov	r3, r0
 8010264:	2b00      	cmp	r3, #0
 8010266:	d012      	beq.n	801028e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010268:	4b0c      	ldr	r3, [pc, #48]	; (801029c <xQueueGenericReset+0xcc>)
 801026a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801026e:	601a      	str	r2, [r3, #0]
 8010270:	f3bf 8f4f 	dsb	sy
 8010274:	f3bf 8f6f 	isb	sy
 8010278:	e009      	b.n	801028e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	3310      	adds	r3, #16
 801027e:	4618      	mov	r0, r3
 8010280:	f7ff fef2 	bl	8010068 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	3324      	adds	r3, #36	; 0x24
 8010288:	4618      	mov	r0, r3
 801028a:	f7ff feed 	bl	8010068 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801028e:	f001 fee9 	bl	8012064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010292:	2301      	movs	r3, #1
}
 8010294:	4618      	mov	r0, r3
 8010296:	3710      	adds	r7, #16
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	e000ed04 	.word	0xe000ed04

080102a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b08e      	sub	sp, #56	; 0x38
 80102a4:	af02      	add	r7, sp, #8
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	607a      	str	r2, [r7, #4]
 80102ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d10a      	bne.n	80102ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80102b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b8:	f383 8811 	msr	BASEPRI, r3
 80102bc:	f3bf 8f6f 	isb	sy
 80102c0:	f3bf 8f4f 	dsb	sy
 80102c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80102c6:	bf00      	nop
 80102c8:	e7fe      	b.n	80102c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d10a      	bne.n	80102e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80102d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d4:	f383 8811 	msr	BASEPRI, r3
 80102d8:	f3bf 8f6f 	isb	sy
 80102dc:	f3bf 8f4f 	dsb	sy
 80102e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80102e2:	bf00      	nop
 80102e4:	e7fe      	b.n	80102e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d002      	beq.n	80102f2 <xQueueGenericCreateStatic+0x52>
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d001      	beq.n	80102f6 <xQueueGenericCreateStatic+0x56>
 80102f2:	2301      	movs	r3, #1
 80102f4:	e000      	b.n	80102f8 <xQueueGenericCreateStatic+0x58>
 80102f6:	2300      	movs	r3, #0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d10a      	bne.n	8010312 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80102fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010300:	f383 8811 	msr	BASEPRI, r3
 8010304:	f3bf 8f6f 	isb	sy
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	623b      	str	r3, [r7, #32]
}
 801030e:	bf00      	nop
 8010310:	e7fe      	b.n	8010310 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d102      	bne.n	801031e <xQueueGenericCreateStatic+0x7e>
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d101      	bne.n	8010322 <xQueueGenericCreateStatic+0x82>
 801031e:	2301      	movs	r3, #1
 8010320:	e000      	b.n	8010324 <xQueueGenericCreateStatic+0x84>
 8010322:	2300      	movs	r3, #0
 8010324:	2b00      	cmp	r3, #0
 8010326:	d10a      	bne.n	801033e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801032c:	f383 8811 	msr	BASEPRI, r3
 8010330:	f3bf 8f6f 	isb	sy
 8010334:	f3bf 8f4f 	dsb	sy
 8010338:	61fb      	str	r3, [r7, #28]
}
 801033a:	bf00      	nop
 801033c:	e7fe      	b.n	801033c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801033e:	2348      	movs	r3, #72	; 0x48
 8010340:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	2b48      	cmp	r3, #72	; 0x48
 8010346:	d00a      	beq.n	801035e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801034c:	f383 8811 	msr	BASEPRI, r3
 8010350:	f3bf 8f6f 	isb	sy
 8010354:	f3bf 8f4f 	dsb	sy
 8010358:	61bb      	str	r3, [r7, #24]
}
 801035a:	bf00      	nop
 801035c:	e7fe      	b.n	801035c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801035e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00d      	beq.n	8010386 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801036a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801036c:	2201      	movs	r2, #1
 801036e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010372:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010378:	9300      	str	r3, [sp, #0]
 801037a:	4613      	mov	r3, r2
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	68b9      	ldr	r1, [r7, #8]
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f000 f83f 	bl	8010404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010388:	4618      	mov	r0, r3
 801038a:	3730      	adds	r7, #48	; 0x30
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010390:	b580      	push	{r7, lr}
 8010392:	b08a      	sub	sp, #40	; 0x28
 8010394:	af02      	add	r7, sp, #8
 8010396:	60f8      	str	r0, [r7, #12]
 8010398:	60b9      	str	r1, [r7, #8]
 801039a:	4613      	mov	r3, r2
 801039c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d10a      	bne.n	80103ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80103a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a8:	f383 8811 	msr	BASEPRI, r3
 80103ac:	f3bf 8f6f 	isb	sy
 80103b0:	f3bf 8f4f 	dsb	sy
 80103b4:	613b      	str	r3, [r7, #16]
}
 80103b6:	bf00      	nop
 80103b8:	e7fe      	b.n	80103b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	68ba      	ldr	r2, [r7, #8]
 80103be:	fb02 f303 	mul.w	r3, r2, r3
 80103c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	3348      	adds	r3, #72	; 0x48
 80103c8:	4618      	mov	r0, r3
 80103ca:	f001 ff3d 	bl	8012248 <pvPortMalloc>
 80103ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d011      	beq.n	80103fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	3348      	adds	r3, #72	; 0x48
 80103de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	2200      	movs	r2, #0
 80103e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80103e8:	79fa      	ldrb	r2, [r7, #7]
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	9300      	str	r3, [sp, #0]
 80103ee:	4613      	mov	r3, r2
 80103f0:	697a      	ldr	r2, [r7, #20]
 80103f2:	68b9      	ldr	r1, [r7, #8]
 80103f4:	68f8      	ldr	r0, [r7, #12]
 80103f6:	f000 f805 	bl	8010404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80103fa:	69bb      	ldr	r3, [r7, #24]
	}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3720      	adds	r7, #32
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b084      	sub	sp, #16
 8010408:	af00      	add	r7, sp, #0
 801040a:	60f8      	str	r0, [r7, #12]
 801040c:	60b9      	str	r1, [r7, #8]
 801040e:	607a      	str	r2, [r7, #4]
 8010410:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d103      	bne.n	8010420 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	69ba      	ldr	r2, [r7, #24]
 801041c:	601a      	str	r2, [r3, #0]
 801041e:	e002      	b.n	8010426 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	687a      	ldr	r2, [r7, #4]
 8010424:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	68ba      	ldr	r2, [r7, #8]
 8010430:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010432:	2101      	movs	r1, #1
 8010434:	69b8      	ldr	r0, [r7, #24]
 8010436:	f7ff fecb 	bl	80101d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801043a:	bf00      	nop
 801043c:	3710      	adds	r7, #16
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010442:	b580      	push	{r7, lr}
 8010444:	b082      	sub	sp, #8
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00e      	beq.n	801046e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2200      	movs	r2, #0
 8010454:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2200      	movs	r2, #0
 801045a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010462:	2300      	movs	r3, #0
 8010464:	2200      	movs	r2, #0
 8010466:	2100      	movs	r1, #0
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f000 f837 	bl	80104dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801046e:	bf00      	nop
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}

08010476 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010476:	b580      	push	{r7, lr}
 8010478:	b086      	sub	sp, #24
 801047a:	af00      	add	r7, sp, #0
 801047c:	4603      	mov	r3, r0
 801047e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010480:	2301      	movs	r3, #1
 8010482:	617b      	str	r3, [r7, #20]
 8010484:	2300      	movs	r3, #0
 8010486:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010488:	79fb      	ldrb	r3, [r7, #7]
 801048a:	461a      	mov	r2, r3
 801048c:	6939      	ldr	r1, [r7, #16]
 801048e:	6978      	ldr	r0, [r7, #20]
 8010490:	f7ff ff7e 	bl	8010390 <xQueueGenericCreate>
 8010494:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010496:	68f8      	ldr	r0, [r7, #12]
 8010498:	f7ff ffd3 	bl	8010442 <prvInitialiseMutex>

		return xNewQueue;
 801049c:	68fb      	ldr	r3, [r7, #12]
	}
 801049e:	4618      	mov	r0, r3
 80104a0:	3718      	adds	r7, #24
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b088      	sub	sp, #32
 80104aa:	af02      	add	r7, sp, #8
 80104ac:	4603      	mov	r3, r0
 80104ae:	6039      	str	r1, [r7, #0]
 80104b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80104b2:	2301      	movs	r3, #1
 80104b4:	617b      	str	r3, [r7, #20]
 80104b6:	2300      	movs	r3, #0
 80104b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80104ba:	79fb      	ldrb	r3, [r7, #7]
 80104bc:	9300      	str	r3, [sp, #0]
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	2200      	movs	r2, #0
 80104c2:	6939      	ldr	r1, [r7, #16]
 80104c4:	6978      	ldr	r0, [r7, #20]
 80104c6:	f7ff feeb 	bl	80102a0 <xQueueGenericCreateStatic>
 80104ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f7ff ffb8 	bl	8010442 <prvInitialiseMutex>

		return xNewQueue;
 80104d2:	68fb      	ldr	r3, [r7, #12]
	}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3718      	adds	r7, #24
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b08e      	sub	sp, #56	; 0x38
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
 80104e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80104ea:	2300      	movs	r3, #0
 80104ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80104f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d10a      	bne.n	801050e <xQueueGenericSend+0x32>
	__asm volatile
 80104f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104fc:	f383 8811 	msr	BASEPRI, r3
 8010500:	f3bf 8f6f 	isb	sy
 8010504:	f3bf 8f4f 	dsb	sy
 8010508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801050a:	bf00      	nop
 801050c:	e7fe      	b.n	801050c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d103      	bne.n	801051c <xQueueGenericSend+0x40>
 8010514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010518:	2b00      	cmp	r3, #0
 801051a:	d101      	bne.n	8010520 <xQueueGenericSend+0x44>
 801051c:	2301      	movs	r3, #1
 801051e:	e000      	b.n	8010522 <xQueueGenericSend+0x46>
 8010520:	2300      	movs	r3, #0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d10a      	bne.n	801053c <xQueueGenericSend+0x60>
	__asm volatile
 8010526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801052a:	f383 8811 	msr	BASEPRI, r3
 801052e:	f3bf 8f6f 	isb	sy
 8010532:	f3bf 8f4f 	dsb	sy
 8010536:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010538:	bf00      	nop
 801053a:	e7fe      	b.n	801053a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2b02      	cmp	r3, #2
 8010540:	d103      	bne.n	801054a <xQueueGenericSend+0x6e>
 8010542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010546:	2b01      	cmp	r3, #1
 8010548:	d101      	bne.n	801054e <xQueueGenericSend+0x72>
 801054a:	2301      	movs	r3, #1
 801054c:	e000      	b.n	8010550 <xQueueGenericSend+0x74>
 801054e:	2300      	movs	r3, #0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d10a      	bne.n	801056a <xQueueGenericSend+0x8e>
	__asm volatile
 8010554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010558:	f383 8811 	msr	BASEPRI, r3
 801055c:	f3bf 8f6f 	isb	sy
 8010560:	f3bf 8f4f 	dsb	sy
 8010564:	623b      	str	r3, [r7, #32]
}
 8010566:	bf00      	nop
 8010568:	e7fe      	b.n	8010568 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801056a:	f001 f9ff 	bl	801196c <xTaskGetSchedulerState>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d102      	bne.n	801057a <xQueueGenericSend+0x9e>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d101      	bne.n	801057e <xQueueGenericSend+0xa2>
 801057a:	2301      	movs	r3, #1
 801057c:	e000      	b.n	8010580 <xQueueGenericSend+0xa4>
 801057e:	2300      	movs	r3, #0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d10a      	bne.n	801059a <xQueueGenericSend+0xbe>
	__asm volatile
 8010584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010588:	f383 8811 	msr	BASEPRI, r3
 801058c:	f3bf 8f6f 	isb	sy
 8010590:	f3bf 8f4f 	dsb	sy
 8010594:	61fb      	str	r3, [r7, #28]
}
 8010596:	bf00      	nop
 8010598:	e7fe      	b.n	8010598 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801059a:	f001 fd33 	bl	8012004 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801059e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d302      	bcc.n	80105b0 <xQueueGenericSend+0xd4>
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	d129      	bne.n	8010604 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	68b9      	ldr	r1, [r7, #8]
 80105b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105b6:	f000 fac1 	bl	8010b3c <prvCopyDataToQueue>
 80105ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d010      	beq.n	80105e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c6:	3324      	adds	r3, #36	; 0x24
 80105c8:	4618      	mov	r0, r3
 80105ca:	f001 f80f 	bl	80115ec <xTaskRemoveFromEventList>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d013      	beq.n	80105fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80105d4:	4b3f      	ldr	r3, [pc, #252]	; (80106d4 <xQueueGenericSend+0x1f8>)
 80105d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105da:	601a      	str	r2, [r3, #0]
 80105dc:	f3bf 8f4f 	dsb	sy
 80105e0:	f3bf 8f6f 	isb	sy
 80105e4:	e00a      	b.n	80105fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80105e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d007      	beq.n	80105fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80105ec:	4b39      	ldr	r3, [pc, #228]	; (80106d4 <xQueueGenericSend+0x1f8>)
 80105ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105f2:	601a      	str	r2, [r3, #0]
 80105f4:	f3bf 8f4f 	dsb	sy
 80105f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80105fc:	f001 fd32 	bl	8012064 <vPortExitCritical>
				return pdPASS;
 8010600:	2301      	movs	r3, #1
 8010602:	e063      	b.n	80106cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d103      	bne.n	8010612 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801060a:	f001 fd2b 	bl	8012064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801060e:	2300      	movs	r3, #0
 8010610:	e05c      	b.n	80106cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010614:	2b00      	cmp	r3, #0
 8010616:	d106      	bne.n	8010626 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010618:	f107 0314 	add.w	r3, r7, #20
 801061c:	4618      	mov	r0, r3
 801061e:	f001 f847 	bl	80116b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010622:	2301      	movs	r3, #1
 8010624:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010626:	f001 fd1d 	bl	8012064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801062a:	f000 fde7 	bl	80111fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801062e:	f001 fce9 	bl	8012004 <vPortEnterCritical>
 8010632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010638:	b25b      	sxtb	r3, r3
 801063a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801063e:	d103      	bne.n	8010648 <xQueueGenericSend+0x16c>
 8010640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010642:	2200      	movs	r2, #0
 8010644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801064e:	b25b      	sxtb	r3, r3
 8010650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010654:	d103      	bne.n	801065e <xQueueGenericSend+0x182>
 8010656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010658:	2200      	movs	r2, #0
 801065a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801065e:	f001 fd01 	bl	8012064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010662:	1d3a      	adds	r2, r7, #4
 8010664:	f107 0314 	add.w	r3, r7, #20
 8010668:	4611      	mov	r1, r2
 801066a:	4618      	mov	r0, r3
 801066c:	f001 f836 	bl	80116dc <xTaskCheckForTimeOut>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	d124      	bne.n	80106c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010678:	f000 fb58 	bl	8010d2c <prvIsQueueFull>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d018      	beq.n	80106b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010684:	3310      	adds	r3, #16
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	4611      	mov	r1, r2
 801068a:	4618      	mov	r0, r3
 801068c:	f000 ff8a 	bl	80115a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010692:	f000 fae3 	bl	8010c5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010696:	f000 fdbf 	bl	8011218 <xTaskResumeAll>
 801069a:	4603      	mov	r3, r0
 801069c:	2b00      	cmp	r3, #0
 801069e:	f47f af7c 	bne.w	801059a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80106a2:	4b0c      	ldr	r3, [pc, #48]	; (80106d4 <xQueueGenericSend+0x1f8>)
 80106a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106a8:	601a      	str	r2, [r3, #0]
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	f3bf 8f6f 	isb	sy
 80106b2:	e772      	b.n	801059a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80106b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106b6:	f000 fad1 	bl	8010c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106ba:	f000 fdad 	bl	8011218 <xTaskResumeAll>
 80106be:	e76c      	b.n	801059a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80106c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106c2:	f000 facb 	bl	8010c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106c6:	f000 fda7 	bl	8011218 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80106ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3738      	adds	r7, #56	; 0x38
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	e000ed04 	.word	0xe000ed04

080106d8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b08e      	sub	sp, #56	; 0x38
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80106e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d10a      	bne.n	8010702 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80106ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f0:	f383 8811 	msr	BASEPRI, r3
 80106f4:	f3bf 8f6f 	isb	sy
 80106f8:	f3bf 8f4f 	dsb	sy
 80106fc:	623b      	str	r3, [r7, #32]
}
 80106fe:	bf00      	nop
 8010700:	e7fe      	b.n	8010700 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00a      	beq.n	8010720 <xQueueGiveFromISR+0x48>
	__asm volatile
 801070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801070e:	f383 8811 	msr	BASEPRI, r3
 8010712:	f3bf 8f6f 	isb	sy
 8010716:	f3bf 8f4f 	dsb	sy
 801071a:	61fb      	str	r3, [r7, #28]
}
 801071c:	bf00      	nop
 801071e:	e7fe      	b.n	801071e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d103      	bne.n	8010730 <xQueueGiveFromISR+0x58>
 8010728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072a:	689b      	ldr	r3, [r3, #8]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d101      	bne.n	8010734 <xQueueGiveFromISR+0x5c>
 8010730:	2301      	movs	r3, #1
 8010732:	e000      	b.n	8010736 <xQueueGiveFromISR+0x5e>
 8010734:	2300      	movs	r3, #0
 8010736:	2b00      	cmp	r3, #0
 8010738:	d10a      	bne.n	8010750 <xQueueGiveFromISR+0x78>
	__asm volatile
 801073a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073e:	f383 8811 	msr	BASEPRI, r3
 8010742:	f3bf 8f6f 	isb	sy
 8010746:	f3bf 8f4f 	dsb	sy
 801074a:	61bb      	str	r3, [r7, #24]
}
 801074c:	bf00      	nop
 801074e:	e7fe      	b.n	801074e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010750:	f001 fd3a 	bl	80121c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010754:	f3ef 8211 	mrs	r2, BASEPRI
 8010758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075c:	f383 8811 	msr	BASEPRI, r3
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	617a      	str	r2, [r7, #20]
 801076a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801076c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801076e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010774:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801077a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801077c:	429a      	cmp	r2, r3
 801077e:	d22b      	bcs.n	80107d8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801078a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801078c:	1c5a      	adds	r2, r3, #1
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010792:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801079a:	d112      	bne.n	80107c2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801079c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d016      	beq.n	80107d2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a6:	3324      	adds	r3, #36	; 0x24
 80107a8:	4618      	mov	r0, r3
 80107aa:	f000 ff1f 	bl	80115ec <xTaskRemoveFromEventList>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d00e      	beq.n	80107d2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d00b      	beq.n	80107d2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	2201      	movs	r2, #1
 80107be:	601a      	str	r2, [r3, #0]
 80107c0:	e007      	b.n	80107d2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80107c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107c6:	3301      	adds	r3, #1
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	b25a      	sxtb	r2, r3
 80107cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80107d2:	2301      	movs	r3, #1
 80107d4:	637b      	str	r3, [r7, #52]	; 0x34
 80107d6:	e001      	b.n	80107dc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80107d8:	2300      	movs	r3, #0
 80107da:	637b      	str	r3, [r7, #52]	; 0x34
 80107dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107de:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80107e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80107e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3738      	adds	r7, #56	; 0x38
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
	...

080107f4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b08e      	sub	sp, #56	; 0x38
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80107fe:	2300      	movs	r3, #0
 8010800:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010806:	2300      	movs	r3, #0
 8010808:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080c:	2b00      	cmp	r3, #0
 801080e:	d10a      	bne.n	8010826 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010814:	f383 8811 	msr	BASEPRI, r3
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	f3bf 8f4f 	dsb	sy
 8010820:	623b      	str	r3, [r7, #32]
}
 8010822:	bf00      	nop
 8010824:	e7fe      	b.n	8010824 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801082a:	2b00      	cmp	r3, #0
 801082c:	d00a      	beq.n	8010844 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801082e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010832:	f383 8811 	msr	BASEPRI, r3
 8010836:	f3bf 8f6f 	isb	sy
 801083a:	f3bf 8f4f 	dsb	sy
 801083e:	61fb      	str	r3, [r7, #28]
}
 8010840:	bf00      	nop
 8010842:	e7fe      	b.n	8010842 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010844:	f001 f892 	bl	801196c <xTaskGetSchedulerState>
 8010848:	4603      	mov	r3, r0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d102      	bne.n	8010854 <xQueueSemaphoreTake+0x60>
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d101      	bne.n	8010858 <xQueueSemaphoreTake+0x64>
 8010854:	2301      	movs	r3, #1
 8010856:	e000      	b.n	801085a <xQueueSemaphoreTake+0x66>
 8010858:	2300      	movs	r3, #0
 801085a:	2b00      	cmp	r3, #0
 801085c:	d10a      	bne.n	8010874 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801085e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010862:	f383 8811 	msr	BASEPRI, r3
 8010866:	f3bf 8f6f 	isb	sy
 801086a:	f3bf 8f4f 	dsb	sy
 801086e:	61bb      	str	r3, [r7, #24]
}
 8010870:	bf00      	nop
 8010872:	e7fe      	b.n	8010872 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010874:	f001 fbc6 	bl	8012004 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801087c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010880:	2b00      	cmp	r3, #0
 8010882:	d024      	beq.n	80108ce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010886:	1e5a      	subs	r2, r3, #1
 8010888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801088a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d104      	bne.n	801089e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010894:	f001 fa12 	bl	8011cbc <pvTaskIncrementMutexHeldCount>
 8010898:	4602      	mov	r2, r0
 801089a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801089e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a0:	691b      	ldr	r3, [r3, #16]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d00f      	beq.n	80108c6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a8:	3310      	adds	r3, #16
 80108aa:	4618      	mov	r0, r3
 80108ac:	f000 fe9e 	bl	80115ec <xTaskRemoveFromEventList>
 80108b0:	4603      	mov	r3, r0
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d007      	beq.n	80108c6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80108b6:	4b54      	ldr	r3, [pc, #336]	; (8010a08 <xQueueSemaphoreTake+0x214>)
 80108b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108bc:	601a      	str	r2, [r3, #0]
 80108be:	f3bf 8f4f 	dsb	sy
 80108c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80108c6:	f001 fbcd 	bl	8012064 <vPortExitCritical>
				return pdPASS;
 80108ca:	2301      	movs	r3, #1
 80108cc:	e097      	b.n	80109fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d111      	bne.n	80108f8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80108d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00a      	beq.n	80108f0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80108da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108de:	f383 8811 	msr	BASEPRI, r3
 80108e2:	f3bf 8f6f 	isb	sy
 80108e6:	f3bf 8f4f 	dsb	sy
 80108ea:	617b      	str	r3, [r7, #20]
}
 80108ec:	bf00      	nop
 80108ee:	e7fe      	b.n	80108ee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80108f0:	f001 fbb8 	bl	8012064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80108f4:	2300      	movs	r3, #0
 80108f6:	e082      	b.n	80109fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80108f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d106      	bne.n	801090c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108fe:	f107 030c 	add.w	r3, r7, #12
 8010902:	4618      	mov	r0, r3
 8010904:	f000 fed4 	bl	80116b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010908:	2301      	movs	r3, #1
 801090a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801090c:	f001 fbaa 	bl	8012064 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010910:	f000 fc74 	bl	80111fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010914:	f001 fb76 	bl	8012004 <vPortEnterCritical>
 8010918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801091e:	b25b      	sxtb	r3, r3
 8010920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010924:	d103      	bne.n	801092e <xQueueSemaphoreTake+0x13a>
 8010926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010928:	2200      	movs	r2, #0
 801092a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010934:	b25b      	sxtb	r3, r3
 8010936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801093a:	d103      	bne.n	8010944 <xQueueSemaphoreTake+0x150>
 801093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093e:	2200      	movs	r2, #0
 8010940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010944:	f001 fb8e 	bl	8012064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010948:	463a      	mov	r2, r7
 801094a:	f107 030c 	add.w	r3, r7, #12
 801094e:	4611      	mov	r1, r2
 8010950:	4618      	mov	r0, r3
 8010952:	f000 fec3 	bl	80116dc <xTaskCheckForTimeOut>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d132      	bne.n	80109c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801095c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801095e:	f000 f9cf 	bl	8010d00 <prvIsQueueEmpty>
 8010962:	4603      	mov	r3, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d026      	beq.n	80109b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d109      	bne.n	8010984 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010970:	f001 fb48 	bl	8012004 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010976:	689b      	ldr	r3, [r3, #8]
 8010978:	4618      	mov	r0, r3
 801097a:	f001 f815 	bl	80119a8 <xTaskPriorityInherit>
 801097e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010980:	f001 fb70 	bl	8012064 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010986:	3324      	adds	r3, #36	; 0x24
 8010988:	683a      	ldr	r2, [r7, #0]
 801098a:	4611      	mov	r1, r2
 801098c:	4618      	mov	r0, r3
 801098e:	f000 fe09 	bl	80115a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010994:	f000 f962 	bl	8010c5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010998:	f000 fc3e 	bl	8011218 <xTaskResumeAll>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	f47f af68 	bne.w	8010874 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80109a4:	4b18      	ldr	r3, [pc, #96]	; (8010a08 <xQueueSemaphoreTake+0x214>)
 80109a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109aa:	601a      	str	r2, [r3, #0]
 80109ac:	f3bf 8f4f 	dsb	sy
 80109b0:	f3bf 8f6f 	isb	sy
 80109b4:	e75e      	b.n	8010874 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80109b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109b8:	f000 f950 	bl	8010c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80109bc:	f000 fc2c 	bl	8011218 <xTaskResumeAll>
 80109c0:	e758      	b.n	8010874 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80109c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109c4:	f000 f94a 	bl	8010c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80109c8:	f000 fc26 	bl	8011218 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109ce:	f000 f997 	bl	8010d00 <prvIsQueueEmpty>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f43f af4d 	beq.w	8010874 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80109da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d00d      	beq.n	80109fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80109e0:	f001 fb10 	bl	8012004 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80109e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109e6:	f000 f891 	bl	8010b0c <prvGetDisinheritPriorityAfterTimeout>
 80109ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80109ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ee:	689b      	ldr	r3, [r3, #8]
 80109f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109f2:	4618      	mov	r0, r3
 80109f4:	f001 f8d4 	bl	8011ba0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80109f8:	f001 fb34 	bl	8012064 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80109fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3738      	adds	r7, #56	; 0x38
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	e000ed04 	.word	0xe000ed04

08010a0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b08e      	sub	sp, #56	; 0x38
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d10a      	bne.n	8010a38 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a26:	f383 8811 	msr	BASEPRI, r3
 8010a2a:	f3bf 8f6f 	isb	sy
 8010a2e:	f3bf 8f4f 	dsb	sy
 8010a32:	623b      	str	r3, [r7, #32]
}
 8010a34:	bf00      	nop
 8010a36:	e7fe      	b.n	8010a36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d103      	bne.n	8010a46 <xQueueReceiveFromISR+0x3a>
 8010a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d101      	bne.n	8010a4a <xQueueReceiveFromISR+0x3e>
 8010a46:	2301      	movs	r3, #1
 8010a48:	e000      	b.n	8010a4c <xQueueReceiveFromISR+0x40>
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d10a      	bne.n	8010a66 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a54:	f383 8811 	msr	BASEPRI, r3
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	61fb      	str	r3, [r7, #28]
}
 8010a62:	bf00      	nop
 8010a64:	e7fe      	b.n	8010a64 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a66:	f001 fbaf 	bl	80121c8 <vPortValidateInterruptPriority>
	__asm volatile
 8010a6a:	f3ef 8211 	mrs	r2, BASEPRI
 8010a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a72:	f383 8811 	msr	BASEPRI, r3
 8010a76:	f3bf 8f6f 	isb	sy
 8010a7a:	f3bf 8f4f 	dsb	sy
 8010a7e:	61ba      	str	r2, [r7, #24]
 8010a80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010a82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d02f      	beq.n	8010af2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010a9c:	68b9      	ldr	r1, [r7, #8]
 8010a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010aa0:	f000 f8b6 	bl	8010c10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa6:	1e5a      	subs	r2, r3, #1
 8010aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010aac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ab4:	d112      	bne.n	8010adc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab8:	691b      	ldr	r3, [r3, #16]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d016      	beq.n	8010aec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac0:	3310      	adds	r3, #16
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f000 fd92 	bl	80115ec <xTaskRemoveFromEventList>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d00e      	beq.n	8010aec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d00b      	beq.n	8010aec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	601a      	str	r2, [r3, #0]
 8010ada:	e007      	b.n	8010aec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	b25a      	sxtb	r2, r3
 8010ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010aec:	2301      	movs	r3, #1
 8010aee:	637b      	str	r3, [r7, #52]	; 0x34
 8010af0:	e001      	b.n	8010af6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010af2:	2300      	movs	r3, #0
 8010af4:	637b      	str	r3, [r7, #52]	; 0x34
 8010af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	f383 8811 	msr	BASEPRI, r3
}
 8010b00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	3738      	adds	r7, #56	; 0x38
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b085      	sub	sp, #20
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d006      	beq.n	8010b2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	f1c3 0307 	rsb	r3, r3, #7
 8010b26:	60fb      	str	r3, [r7, #12]
 8010b28:	e001      	b.n	8010b2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
	}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3714      	adds	r7, #20
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr

08010b3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	60f8      	str	r0, [r7, #12]
 8010b44:	60b9      	str	r1, [r7, #8]
 8010b46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d10d      	bne.n	8010b76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d14d      	bne.n	8010bfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	4618      	mov	r0, r3
 8010b68:	f000 ff94 	bl	8011a94 <xTaskPriorityDisinherit>
 8010b6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2200      	movs	r2, #0
 8010b72:	609a      	str	r2, [r3, #8]
 8010b74:	e043      	b.n	8010bfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d119      	bne.n	8010bb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6858      	ldr	r0, [r3, #4]
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b84:	461a      	mov	r2, r3
 8010b86:	68b9      	ldr	r1, [r7, #8]
 8010b88:	f001 fe6b 	bl	8012862 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	685a      	ldr	r2, [r3, #4]
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b94:	441a      	add	r2, r3
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	685a      	ldr	r2, [r3, #4]
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	689b      	ldr	r3, [r3, #8]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d32b      	bcc.n	8010bfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	605a      	str	r2, [r3, #4]
 8010bae:	e026      	b.n	8010bfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	68d8      	ldr	r0, [r3, #12]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bb8:	461a      	mov	r2, r3
 8010bba:	68b9      	ldr	r1, [r7, #8]
 8010bbc:	f001 fe51 	bl	8012862 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	68da      	ldr	r2, [r3, #12]
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bc8:	425b      	negs	r3, r3
 8010bca:	441a      	add	r2, r3
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	68da      	ldr	r2, [r3, #12]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d207      	bcs.n	8010bec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	689a      	ldr	r2, [r3, #8]
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010be4:	425b      	negs	r3, r3
 8010be6:	441a      	add	r2, r3
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2b02      	cmp	r3, #2
 8010bf0:	d105      	bne.n	8010bfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	3b01      	subs	r3, #1
 8010bfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	1c5a      	adds	r2, r3, #1
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010c06:	697b      	ldr	r3, [r7, #20]
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3718      	adds	r7, #24
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d018      	beq.n	8010c54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	68da      	ldr	r2, [r3, #12]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c2a:	441a      	add	r2, r3
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	68da      	ldr	r2, [r3, #12]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	689b      	ldr	r3, [r3, #8]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d303      	bcc.n	8010c44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	68d9      	ldr	r1, [r3, #12]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	6838      	ldr	r0, [r7, #0]
 8010c50:	f001 fe07 	bl	8012862 <memcpy>
	}
}
 8010c54:	bf00      	nop
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010c64:	f001 f9ce 	bl	8012004 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c70:	e011      	b.n	8010c96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d012      	beq.n	8010ca0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	3324      	adds	r3, #36	; 0x24
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f000 fcb4 	bl	80115ec <xTaskRemoveFromEventList>
 8010c84:	4603      	mov	r3, r0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d001      	beq.n	8010c8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010c8a:	f000 fd89 	bl	80117a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010c8e:	7bfb      	ldrb	r3, [r7, #15]
 8010c90:	3b01      	subs	r3, #1
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	dce9      	bgt.n	8010c72 <prvUnlockQueue+0x16>
 8010c9e:	e000      	b.n	8010ca2 <prvUnlockQueue+0x46>
					break;
 8010ca0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	22ff      	movs	r2, #255	; 0xff
 8010ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010caa:	f001 f9db 	bl	8012064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010cae:	f001 f9a9 	bl	8012004 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010cb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010cba:	e011      	b.n	8010ce0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	691b      	ldr	r3, [r3, #16]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d012      	beq.n	8010cea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	3310      	adds	r3, #16
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f000 fc8f 	bl	80115ec <xTaskRemoveFromEventList>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d001      	beq.n	8010cd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010cd4:	f000 fd64 	bl	80117a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010cd8:	7bbb      	ldrb	r3, [r7, #14]
 8010cda:	3b01      	subs	r3, #1
 8010cdc:	b2db      	uxtb	r3, r3
 8010cde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	dce9      	bgt.n	8010cbc <prvUnlockQueue+0x60>
 8010ce8:	e000      	b.n	8010cec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010cea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	22ff      	movs	r2, #255	; 0xff
 8010cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010cf4:	f001 f9b6 	bl	8012064 <vPortExitCritical>
}
 8010cf8:	bf00      	nop
 8010cfa:	3710      	adds	r7, #16
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d08:	f001 f97c 	bl	8012004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d102      	bne.n	8010d1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010d14:	2301      	movs	r3, #1
 8010d16:	60fb      	str	r3, [r7, #12]
 8010d18:	e001      	b.n	8010d1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d1e:	f001 f9a1 	bl	8012064 <vPortExitCritical>

	return xReturn;
 8010d22:	68fb      	ldr	r3, [r7, #12]
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3710      	adds	r7, #16
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d34:	f001 f966 	bl	8012004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d102      	bne.n	8010d4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010d44:	2301      	movs	r3, #1
 8010d46:	60fb      	str	r3, [r7, #12]
 8010d48:	e001      	b.n	8010d4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d4e:	f001 f989 	bl	8012064 <vPortExitCritical>

	return xReturn;
 8010d52:	68fb      	ldr	r3, [r7, #12]
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3710      	adds	r7, #16
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b08e      	sub	sp, #56	; 0x38
 8010d60:	af04      	add	r7, sp, #16
 8010d62:	60f8      	str	r0, [r7, #12]
 8010d64:	60b9      	str	r1, [r7, #8]
 8010d66:	607a      	str	r2, [r7, #4]
 8010d68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d10a      	bne.n	8010d86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d74:	f383 8811 	msr	BASEPRI, r3
 8010d78:	f3bf 8f6f 	isb	sy
 8010d7c:	f3bf 8f4f 	dsb	sy
 8010d80:	623b      	str	r3, [r7, #32]
}
 8010d82:	bf00      	nop
 8010d84:	e7fe      	b.n	8010d84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10a      	bne.n	8010da2 <xTaskCreateStatic+0x46>
	__asm volatile
 8010d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d90:	f383 8811 	msr	BASEPRI, r3
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	f3bf 8f4f 	dsb	sy
 8010d9c:	61fb      	str	r3, [r7, #28]
}
 8010d9e:	bf00      	nop
 8010da0:	e7fe      	b.n	8010da0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010da2:	23c4      	movs	r3, #196	; 0xc4
 8010da4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	2bc4      	cmp	r3, #196	; 0xc4
 8010daa:	d00a      	beq.n	8010dc2 <xTaskCreateStatic+0x66>
	__asm volatile
 8010dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db0:	f383 8811 	msr	BASEPRI, r3
 8010db4:	f3bf 8f6f 	isb	sy
 8010db8:	f3bf 8f4f 	dsb	sy
 8010dbc:	61bb      	str	r3, [r7, #24]
}
 8010dbe:	bf00      	nop
 8010dc0:	e7fe      	b.n	8010dc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010dc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d01e      	beq.n	8010e08 <xTaskCreateStatic+0xac>
 8010dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d01b      	beq.n	8010e08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010dd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ddc:	2202      	movs	r2, #2
 8010dde:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010de2:	2300      	movs	r3, #0
 8010de4:	9303      	str	r3, [sp, #12]
 8010de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de8:	9302      	str	r3, [sp, #8]
 8010dea:	f107 0314 	add.w	r3, r7, #20
 8010dee:	9301      	str	r3, [sp, #4]
 8010df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df2:	9300      	str	r3, [sp, #0]
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	68b9      	ldr	r1, [r7, #8]
 8010dfa:	68f8      	ldr	r0, [r7, #12]
 8010dfc:	f000 f850 	bl	8010ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e02:	f000 f8f3 	bl	8010fec <prvAddNewTaskToReadyList>
 8010e06:	e001      	b.n	8010e0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010e0c:	697b      	ldr	r3, [r7, #20]
	}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3728      	adds	r7, #40	; 0x28
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}

08010e16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010e16:	b580      	push	{r7, lr}
 8010e18:	b08c      	sub	sp, #48	; 0x30
 8010e1a:	af04      	add	r7, sp, #16
 8010e1c:	60f8      	str	r0, [r7, #12]
 8010e1e:	60b9      	str	r1, [r7, #8]
 8010e20:	603b      	str	r3, [r7, #0]
 8010e22:	4613      	mov	r3, r2
 8010e24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010e26:	88fb      	ldrh	r3, [r7, #6]
 8010e28:	009b      	lsls	r3, r3, #2
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f001 fa0c 	bl	8012248 <pvPortMalloc>
 8010e30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00e      	beq.n	8010e56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010e38:	20c4      	movs	r0, #196	; 0xc4
 8010e3a:	f001 fa05 	bl	8012248 <pvPortMalloc>
 8010e3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d003      	beq.n	8010e4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	697a      	ldr	r2, [r7, #20]
 8010e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8010e4c:	e005      	b.n	8010e5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010e4e:	6978      	ldr	r0, [r7, #20]
 8010e50:	f001 fac6 	bl	80123e0 <vPortFree>
 8010e54:	e001      	b.n	8010e5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010e56:	2300      	movs	r3, #0
 8010e58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010e5a:	69fb      	ldr	r3, [r7, #28]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d017      	beq.n	8010e90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010e60:	69fb      	ldr	r3, [r7, #28]
 8010e62:	2200      	movs	r2, #0
 8010e64:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010e68:	88fa      	ldrh	r2, [r7, #6]
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	9303      	str	r3, [sp, #12]
 8010e6e:	69fb      	ldr	r3, [r7, #28]
 8010e70:	9302      	str	r3, [sp, #8]
 8010e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e74:	9301      	str	r3, [sp, #4]
 8010e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e78:	9300      	str	r3, [sp, #0]
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	68b9      	ldr	r1, [r7, #8]
 8010e7e:	68f8      	ldr	r0, [r7, #12]
 8010e80:	f000 f80e 	bl	8010ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e84:	69f8      	ldr	r0, [r7, #28]
 8010e86:	f000 f8b1 	bl	8010fec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	61bb      	str	r3, [r7, #24]
 8010e8e:	e002      	b.n	8010e96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010e90:	f04f 33ff 	mov.w	r3, #4294967295
 8010e94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010e96:	69bb      	ldr	r3, [r7, #24]
	}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3720      	adds	r7, #32
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b088      	sub	sp, #32
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
 8010eac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	009b      	lsls	r3, r3, #2
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	21a5      	movs	r1, #165	; 0xa5
 8010eba:	f001 fce0 	bl	801287e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	4413      	add	r3, r2
 8010ece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010ed0:	69bb      	ldr	r3, [r7, #24]
 8010ed2:	f023 0307 	bic.w	r3, r3, #7
 8010ed6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010ed8:	69bb      	ldr	r3, [r7, #24]
 8010eda:	f003 0307 	and.w	r3, r3, #7
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00a      	beq.n	8010ef8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee6:	f383 8811 	msr	BASEPRI, r3
 8010eea:	f3bf 8f6f 	isb	sy
 8010eee:	f3bf 8f4f 	dsb	sy
 8010ef2:	617b      	str	r3, [r7, #20]
}
 8010ef4:	bf00      	nop
 8010ef6:	e7fe      	b.n	8010ef6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d01f      	beq.n	8010f3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010efe:	2300      	movs	r3, #0
 8010f00:	61fb      	str	r3, [r7, #28]
 8010f02:	e012      	b.n	8010f2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	4413      	add	r3, r2
 8010f0a:	7819      	ldrb	r1, [r3, #0]
 8010f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	4413      	add	r3, r2
 8010f12:	3334      	adds	r3, #52	; 0x34
 8010f14:	460a      	mov	r2, r1
 8010f16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010f18:	68ba      	ldr	r2, [r7, #8]
 8010f1a:	69fb      	ldr	r3, [r7, #28]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d006      	beq.n	8010f32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	3301      	adds	r3, #1
 8010f28:	61fb      	str	r3, [r7, #28]
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	2b1f      	cmp	r3, #31
 8010f2e:	d9e9      	bls.n	8010f04 <prvInitialiseNewTask+0x64>
 8010f30:	e000      	b.n	8010f34 <prvInitialiseNewTask+0x94>
			{
				break;
 8010f32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f36:	2200      	movs	r2, #0
 8010f38:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8010f3c:	e003      	b.n	8010f46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f40:	2200      	movs	r2, #0
 8010f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f48:	2b06      	cmp	r3, #6
 8010f4a:	d901      	bls.n	8010f50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010f4c:	2306      	movs	r3, #6
 8010f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f5a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8010f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5e:	2200      	movs	r2, #0
 8010f60:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f64:	3304      	adds	r3, #4
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7ff f89e 	bl	80100a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6e:	3318      	adds	r3, #24
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7ff f899 	bl	80100a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7e:	f1c3 0207 	rsb	r2, r3, #7
 8010f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f96:	2200      	movs	r2, #0
 8010f98:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f9e:	335c      	adds	r3, #92	; 0x5c
 8010fa0:	2260      	movs	r2, #96	; 0x60
 8010fa2:	2100      	movs	r1, #0
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f001 fc6a 	bl	801287e <memset>
 8010faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fac:	4a0c      	ldr	r2, [pc, #48]	; (8010fe0 <prvInitialiseNewTask+0x140>)
 8010fae:	661a      	str	r2, [r3, #96]	; 0x60
 8010fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb2:	4a0c      	ldr	r2, [pc, #48]	; (8010fe4 <prvInitialiseNewTask+0x144>)
 8010fb4:	665a      	str	r2, [r3, #100]	; 0x64
 8010fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb8:	4a0b      	ldr	r2, [pc, #44]	; (8010fe8 <prvInitialiseNewTask+0x148>)
 8010fba:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010fbc:	683a      	ldr	r2, [r7, #0]
 8010fbe:	68f9      	ldr	r1, [r7, #12]
 8010fc0:	69b8      	ldr	r0, [r7, #24]
 8010fc2:	f000 fef5 	bl	8011db0 <pxPortInitialiseStack>
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d002      	beq.n	8010fd8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010fd8:	bf00      	nop
 8010fda:	3720      	adds	r7, #32
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	080164a0 	.word	0x080164a0
 8010fe4:	080164c0 	.word	0x080164c0
 8010fe8:	08016480 	.word	0x08016480

08010fec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010ff4:	f001 f806 	bl	8012004 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010ff8:	4b2a      	ldr	r3, [pc, #168]	; (80110a4 <prvAddNewTaskToReadyList+0xb8>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	4a29      	ldr	r2, [pc, #164]	; (80110a4 <prvAddNewTaskToReadyList+0xb8>)
 8011000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011002:	4b29      	ldr	r3, [pc, #164]	; (80110a8 <prvAddNewTaskToReadyList+0xbc>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d109      	bne.n	801101e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801100a:	4a27      	ldr	r2, [pc, #156]	; (80110a8 <prvAddNewTaskToReadyList+0xbc>)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011010:	4b24      	ldr	r3, [pc, #144]	; (80110a4 <prvAddNewTaskToReadyList+0xb8>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	2b01      	cmp	r3, #1
 8011016:	d110      	bne.n	801103a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011018:	f000 fbe6 	bl	80117e8 <prvInitialiseTaskLists>
 801101c:	e00d      	b.n	801103a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801101e:	4b23      	ldr	r3, [pc, #140]	; (80110ac <prvAddNewTaskToReadyList+0xc0>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d109      	bne.n	801103a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011026:	4b20      	ldr	r3, [pc, #128]	; (80110a8 <prvAddNewTaskToReadyList+0xbc>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011030:	429a      	cmp	r2, r3
 8011032:	d802      	bhi.n	801103a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011034:	4a1c      	ldr	r2, [pc, #112]	; (80110a8 <prvAddNewTaskToReadyList+0xbc>)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801103a:	4b1d      	ldr	r3, [pc, #116]	; (80110b0 <prvAddNewTaskToReadyList+0xc4>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	3301      	adds	r3, #1
 8011040:	4a1b      	ldr	r2, [pc, #108]	; (80110b0 <prvAddNewTaskToReadyList+0xc4>)
 8011042:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011048:	2201      	movs	r2, #1
 801104a:	409a      	lsls	r2, r3
 801104c:	4b19      	ldr	r3, [pc, #100]	; (80110b4 <prvAddNewTaskToReadyList+0xc8>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	4313      	orrs	r3, r2
 8011052:	4a18      	ldr	r2, [pc, #96]	; (80110b4 <prvAddNewTaskToReadyList+0xc8>)
 8011054:	6013      	str	r3, [r2, #0]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801105a:	4613      	mov	r3, r2
 801105c:	009b      	lsls	r3, r3, #2
 801105e:	4413      	add	r3, r2
 8011060:	009b      	lsls	r3, r3, #2
 8011062:	4a15      	ldr	r2, [pc, #84]	; (80110b8 <prvAddNewTaskToReadyList+0xcc>)
 8011064:	441a      	add	r2, r3
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	3304      	adds	r3, #4
 801106a:	4619      	mov	r1, r3
 801106c:	4610      	mov	r0, r2
 801106e:	f7ff f828 	bl	80100c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011072:	f000 fff7 	bl	8012064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011076:	4b0d      	ldr	r3, [pc, #52]	; (80110ac <prvAddNewTaskToReadyList+0xc0>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00e      	beq.n	801109c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801107e:	4b0a      	ldr	r3, [pc, #40]	; (80110a8 <prvAddNewTaskToReadyList+0xbc>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011088:	429a      	cmp	r2, r3
 801108a:	d207      	bcs.n	801109c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801108c:	4b0b      	ldr	r3, [pc, #44]	; (80110bc <prvAddNewTaskToReadyList+0xd0>)
 801108e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011092:	601a      	str	r2, [r3, #0]
 8011094:	f3bf 8f4f 	dsb	sy
 8011098:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801109c:	bf00      	nop
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	20000d3c 	.word	0x20000d3c
 80110a8:	20000c3c 	.word	0x20000c3c
 80110ac:	20000d48 	.word	0x20000d48
 80110b0:	20000d58 	.word	0x20000d58
 80110b4:	20000d44 	.word	0x20000d44
 80110b8:	20000c40 	.word	0x20000c40
 80110bc:	e000ed04 	.word	0xe000ed04

080110c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b084      	sub	sp, #16
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80110c8:	2300      	movs	r3, #0
 80110ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d017      	beq.n	8011102 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80110d2:	4b13      	ldr	r3, [pc, #76]	; (8011120 <vTaskDelay+0x60>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d00a      	beq.n	80110f0 <vTaskDelay+0x30>
	__asm volatile
 80110da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110de:	f383 8811 	msr	BASEPRI, r3
 80110e2:	f3bf 8f6f 	isb	sy
 80110e6:	f3bf 8f4f 	dsb	sy
 80110ea:	60bb      	str	r3, [r7, #8]
}
 80110ec:	bf00      	nop
 80110ee:	e7fe      	b.n	80110ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80110f0:	f000 f884 	bl	80111fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80110f4:	2100      	movs	r1, #0
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 fdf4 	bl	8011ce4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80110fc:	f000 f88c 	bl	8011218 <xTaskResumeAll>
 8011100:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d107      	bne.n	8011118 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011108:	4b06      	ldr	r3, [pc, #24]	; (8011124 <vTaskDelay+0x64>)
 801110a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801110e:	601a      	str	r2, [r3, #0]
 8011110:	f3bf 8f4f 	dsb	sy
 8011114:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011118:	bf00      	nop
 801111a:	3710      	adds	r7, #16
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	20000d64 	.word	0x20000d64
 8011124:	e000ed04 	.word	0xe000ed04

08011128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b08a      	sub	sp, #40	; 0x28
 801112c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801112e:	2300      	movs	r3, #0
 8011130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011132:	2300      	movs	r3, #0
 8011134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011136:	463a      	mov	r2, r7
 8011138:	1d39      	adds	r1, r7, #4
 801113a:	f107 0308 	add.w	r3, r7, #8
 801113e:	4618      	mov	r0, r3
 8011140:	f7ef feae 	bl	8000ea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011144:	6839      	ldr	r1, [r7, #0]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	68ba      	ldr	r2, [r7, #8]
 801114a:	9202      	str	r2, [sp, #8]
 801114c:	9301      	str	r3, [sp, #4]
 801114e:	2300      	movs	r3, #0
 8011150:	9300      	str	r3, [sp, #0]
 8011152:	2300      	movs	r3, #0
 8011154:	460a      	mov	r2, r1
 8011156:	4921      	ldr	r1, [pc, #132]	; (80111dc <vTaskStartScheduler+0xb4>)
 8011158:	4821      	ldr	r0, [pc, #132]	; (80111e0 <vTaskStartScheduler+0xb8>)
 801115a:	f7ff fdff 	bl	8010d5c <xTaskCreateStatic>
 801115e:	4603      	mov	r3, r0
 8011160:	4a20      	ldr	r2, [pc, #128]	; (80111e4 <vTaskStartScheduler+0xbc>)
 8011162:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011164:	4b1f      	ldr	r3, [pc, #124]	; (80111e4 <vTaskStartScheduler+0xbc>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d002      	beq.n	8011172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801116c:	2301      	movs	r3, #1
 801116e:	617b      	str	r3, [r7, #20]
 8011170:	e001      	b.n	8011176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011172:	2300      	movs	r3, #0
 8011174:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	2b01      	cmp	r3, #1
 801117a:	d11b      	bne.n	80111b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 801117c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011180:	f383 8811 	msr	BASEPRI, r3
 8011184:	f3bf 8f6f 	isb	sy
 8011188:	f3bf 8f4f 	dsb	sy
 801118c:	613b      	str	r3, [r7, #16]
}
 801118e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011190:	4b15      	ldr	r3, [pc, #84]	; (80111e8 <vTaskStartScheduler+0xc0>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	335c      	adds	r3, #92	; 0x5c
 8011196:	4a15      	ldr	r2, [pc, #84]	; (80111ec <vTaskStartScheduler+0xc4>)
 8011198:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801119a:	4b15      	ldr	r3, [pc, #84]	; (80111f0 <vTaskStartScheduler+0xc8>)
 801119c:	f04f 32ff 	mov.w	r2, #4294967295
 80111a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80111a2:	4b14      	ldr	r3, [pc, #80]	; (80111f4 <vTaskStartScheduler+0xcc>)
 80111a4:	2201      	movs	r2, #1
 80111a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80111a8:	4b13      	ldr	r3, [pc, #76]	; (80111f8 <vTaskStartScheduler+0xd0>)
 80111aa:	2200      	movs	r2, #0
 80111ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80111ae:	f000 fe87 	bl	8011ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80111b2:	e00e      	b.n	80111d2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ba:	d10a      	bne.n	80111d2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80111bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c0:	f383 8811 	msr	BASEPRI, r3
 80111c4:	f3bf 8f6f 	isb	sy
 80111c8:	f3bf 8f4f 	dsb	sy
 80111cc:	60fb      	str	r3, [r7, #12]
}
 80111ce:	bf00      	nop
 80111d0:	e7fe      	b.n	80111d0 <vTaskStartScheduler+0xa8>
}
 80111d2:	bf00      	nop
 80111d4:	3718      	adds	r7, #24
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	08016430 	.word	0x08016430
 80111e0:	080117b9 	.word	0x080117b9
 80111e4:	20000d60 	.word	0x20000d60
 80111e8:	20000c3c 	.word	0x20000c3c
 80111ec:	20000510 	.word	0x20000510
 80111f0:	20000d5c 	.word	0x20000d5c
 80111f4:	20000d48 	.word	0x20000d48
 80111f8:	20000d40 	.word	0x20000d40

080111fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80111fc:	b480      	push	{r7}
 80111fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011200:	4b04      	ldr	r3, [pc, #16]	; (8011214 <vTaskSuspendAll+0x18>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	3301      	adds	r3, #1
 8011206:	4a03      	ldr	r2, [pc, #12]	; (8011214 <vTaskSuspendAll+0x18>)
 8011208:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801120a:	bf00      	nop
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr
 8011214:	20000d64 	.word	0x20000d64

08011218 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801121e:	2300      	movs	r3, #0
 8011220:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011222:	2300      	movs	r3, #0
 8011224:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011226:	4b41      	ldr	r3, [pc, #260]	; (801132c <xTaskResumeAll+0x114>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d10a      	bne.n	8011244 <xTaskResumeAll+0x2c>
	__asm volatile
 801122e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011232:	f383 8811 	msr	BASEPRI, r3
 8011236:	f3bf 8f6f 	isb	sy
 801123a:	f3bf 8f4f 	dsb	sy
 801123e:	603b      	str	r3, [r7, #0]
}
 8011240:	bf00      	nop
 8011242:	e7fe      	b.n	8011242 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011244:	f000 fede 	bl	8012004 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011248:	4b38      	ldr	r3, [pc, #224]	; (801132c <xTaskResumeAll+0x114>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	3b01      	subs	r3, #1
 801124e:	4a37      	ldr	r2, [pc, #220]	; (801132c <xTaskResumeAll+0x114>)
 8011250:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011252:	4b36      	ldr	r3, [pc, #216]	; (801132c <xTaskResumeAll+0x114>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d161      	bne.n	801131e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801125a:	4b35      	ldr	r3, [pc, #212]	; (8011330 <xTaskResumeAll+0x118>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d05d      	beq.n	801131e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011262:	e02e      	b.n	80112c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011264:	4b33      	ldr	r3, [pc, #204]	; (8011334 <xTaskResumeAll+0x11c>)
 8011266:	68db      	ldr	r3, [r3, #12]
 8011268:	68db      	ldr	r3, [r3, #12]
 801126a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	3318      	adds	r3, #24
 8011270:	4618      	mov	r0, r3
 8011272:	f7fe ff83 	bl	801017c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	3304      	adds	r3, #4
 801127a:	4618      	mov	r0, r3
 801127c:	f7fe ff7e 	bl	801017c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011284:	2201      	movs	r2, #1
 8011286:	409a      	lsls	r2, r3
 8011288:	4b2b      	ldr	r3, [pc, #172]	; (8011338 <xTaskResumeAll+0x120>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	4313      	orrs	r3, r2
 801128e:	4a2a      	ldr	r2, [pc, #168]	; (8011338 <xTaskResumeAll+0x120>)
 8011290:	6013      	str	r3, [r2, #0]
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011296:	4613      	mov	r3, r2
 8011298:	009b      	lsls	r3, r3, #2
 801129a:	4413      	add	r3, r2
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4a27      	ldr	r2, [pc, #156]	; (801133c <xTaskResumeAll+0x124>)
 80112a0:	441a      	add	r2, r3
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	3304      	adds	r3, #4
 80112a6:	4619      	mov	r1, r3
 80112a8:	4610      	mov	r0, r2
 80112aa:	f7fe ff0a 	bl	80100c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112b2:	4b23      	ldr	r3, [pc, #140]	; (8011340 <xTaskResumeAll+0x128>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d302      	bcc.n	80112c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80112bc:	4b21      	ldr	r3, [pc, #132]	; (8011344 <xTaskResumeAll+0x12c>)
 80112be:	2201      	movs	r2, #1
 80112c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80112c2:	4b1c      	ldr	r3, [pc, #112]	; (8011334 <xTaskResumeAll+0x11c>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d1cc      	bne.n	8011264 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d001      	beq.n	80112d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80112d0:	f000 fb2c 	bl	801192c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80112d4:	4b1c      	ldr	r3, [pc, #112]	; (8011348 <xTaskResumeAll+0x130>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d010      	beq.n	8011302 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80112e0:	f000 f846 	bl	8011370 <xTaskIncrementTick>
 80112e4:	4603      	mov	r3, r0
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d002      	beq.n	80112f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80112ea:	4b16      	ldr	r3, [pc, #88]	; (8011344 <xTaskResumeAll+0x12c>)
 80112ec:	2201      	movs	r2, #1
 80112ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	3b01      	subs	r3, #1
 80112f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1f1      	bne.n	80112e0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80112fc:	4b12      	ldr	r3, [pc, #72]	; (8011348 <xTaskResumeAll+0x130>)
 80112fe:	2200      	movs	r2, #0
 8011300:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011302:	4b10      	ldr	r3, [pc, #64]	; (8011344 <xTaskResumeAll+0x12c>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d009      	beq.n	801131e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801130a:	2301      	movs	r3, #1
 801130c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801130e:	4b0f      	ldr	r3, [pc, #60]	; (801134c <xTaskResumeAll+0x134>)
 8011310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011314:	601a      	str	r2, [r3, #0]
 8011316:	f3bf 8f4f 	dsb	sy
 801131a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801131e:	f000 fea1 	bl	8012064 <vPortExitCritical>

	return xAlreadyYielded;
 8011322:	68bb      	ldr	r3, [r7, #8]
}
 8011324:	4618      	mov	r0, r3
 8011326:	3710      	adds	r7, #16
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	20000d64 	.word	0x20000d64
 8011330:	20000d3c 	.word	0x20000d3c
 8011334:	20000cfc 	.word	0x20000cfc
 8011338:	20000d44 	.word	0x20000d44
 801133c:	20000c40 	.word	0x20000c40
 8011340:	20000c3c 	.word	0x20000c3c
 8011344:	20000d50 	.word	0x20000d50
 8011348:	20000d4c 	.word	0x20000d4c
 801134c:	e000ed04 	.word	0xe000ed04

08011350 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011350:	b480      	push	{r7}
 8011352:	b083      	sub	sp, #12
 8011354:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011356:	4b05      	ldr	r3, [pc, #20]	; (801136c <xTaskGetTickCount+0x1c>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801135c:	687b      	ldr	r3, [r7, #4]
}
 801135e:	4618      	mov	r0, r3
 8011360:	370c      	adds	r7, #12
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop
 801136c:	20000d40 	.word	0x20000d40

08011370 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b086      	sub	sp, #24
 8011374:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011376:	2300      	movs	r3, #0
 8011378:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801137a:	4b4e      	ldr	r3, [pc, #312]	; (80114b4 <xTaskIncrementTick+0x144>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	f040 808e 	bne.w	80114a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011384:	4b4c      	ldr	r3, [pc, #304]	; (80114b8 <xTaskIncrementTick+0x148>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	3301      	adds	r3, #1
 801138a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801138c:	4a4a      	ldr	r2, [pc, #296]	; (80114b8 <xTaskIncrementTick+0x148>)
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d120      	bne.n	80113da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011398:	4b48      	ldr	r3, [pc, #288]	; (80114bc <xTaskIncrementTick+0x14c>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d00a      	beq.n	80113b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80113a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a6:	f383 8811 	msr	BASEPRI, r3
 80113aa:	f3bf 8f6f 	isb	sy
 80113ae:	f3bf 8f4f 	dsb	sy
 80113b2:	603b      	str	r3, [r7, #0]
}
 80113b4:	bf00      	nop
 80113b6:	e7fe      	b.n	80113b6 <xTaskIncrementTick+0x46>
 80113b8:	4b40      	ldr	r3, [pc, #256]	; (80114bc <xTaskIncrementTick+0x14c>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	60fb      	str	r3, [r7, #12]
 80113be:	4b40      	ldr	r3, [pc, #256]	; (80114c0 <xTaskIncrementTick+0x150>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	4a3e      	ldr	r2, [pc, #248]	; (80114bc <xTaskIncrementTick+0x14c>)
 80113c4:	6013      	str	r3, [r2, #0]
 80113c6:	4a3e      	ldr	r2, [pc, #248]	; (80114c0 <xTaskIncrementTick+0x150>)
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	6013      	str	r3, [r2, #0]
 80113cc:	4b3d      	ldr	r3, [pc, #244]	; (80114c4 <xTaskIncrementTick+0x154>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	3301      	adds	r3, #1
 80113d2:	4a3c      	ldr	r2, [pc, #240]	; (80114c4 <xTaskIncrementTick+0x154>)
 80113d4:	6013      	str	r3, [r2, #0]
 80113d6:	f000 faa9 	bl	801192c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80113da:	4b3b      	ldr	r3, [pc, #236]	; (80114c8 <xTaskIncrementTick+0x158>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	693a      	ldr	r2, [r7, #16]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d348      	bcc.n	8011476 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113e4:	4b35      	ldr	r3, [pc, #212]	; (80114bc <xTaskIncrementTick+0x14c>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d104      	bne.n	80113f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113ee:	4b36      	ldr	r3, [pc, #216]	; (80114c8 <xTaskIncrementTick+0x158>)
 80113f0:	f04f 32ff 	mov.w	r2, #4294967295
 80113f4:	601a      	str	r2, [r3, #0]
					break;
 80113f6:	e03e      	b.n	8011476 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113f8:	4b30      	ldr	r3, [pc, #192]	; (80114bc <xTaskIncrementTick+0x14c>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	68db      	ldr	r3, [r3, #12]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011408:	693a      	ldr	r2, [r7, #16]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	429a      	cmp	r2, r3
 801140e:	d203      	bcs.n	8011418 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011410:	4a2d      	ldr	r2, [pc, #180]	; (80114c8 <xTaskIncrementTick+0x158>)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011416:	e02e      	b.n	8011476 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	3304      	adds	r3, #4
 801141c:	4618      	mov	r0, r3
 801141e:	f7fe fead 	bl	801017c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011426:	2b00      	cmp	r3, #0
 8011428:	d004      	beq.n	8011434 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	3318      	adds	r3, #24
 801142e:	4618      	mov	r0, r3
 8011430:	f7fe fea4 	bl	801017c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011438:	2201      	movs	r2, #1
 801143a:	409a      	lsls	r2, r3
 801143c:	4b23      	ldr	r3, [pc, #140]	; (80114cc <xTaskIncrementTick+0x15c>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	4313      	orrs	r3, r2
 8011442:	4a22      	ldr	r2, [pc, #136]	; (80114cc <xTaskIncrementTick+0x15c>)
 8011444:	6013      	str	r3, [r2, #0]
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801144a:	4613      	mov	r3, r2
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	4413      	add	r3, r2
 8011450:	009b      	lsls	r3, r3, #2
 8011452:	4a1f      	ldr	r2, [pc, #124]	; (80114d0 <xTaskIncrementTick+0x160>)
 8011454:	441a      	add	r2, r3
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	3304      	adds	r3, #4
 801145a:	4619      	mov	r1, r3
 801145c:	4610      	mov	r0, r2
 801145e:	f7fe fe30 	bl	80100c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011466:	4b1b      	ldr	r3, [pc, #108]	; (80114d4 <xTaskIncrementTick+0x164>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801146c:	429a      	cmp	r2, r3
 801146e:	d3b9      	bcc.n	80113e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011470:	2301      	movs	r3, #1
 8011472:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011474:	e7b6      	b.n	80113e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011476:	4b17      	ldr	r3, [pc, #92]	; (80114d4 <xTaskIncrementTick+0x164>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801147c:	4914      	ldr	r1, [pc, #80]	; (80114d0 <xTaskIncrementTick+0x160>)
 801147e:	4613      	mov	r3, r2
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	4413      	add	r3, r2
 8011484:	009b      	lsls	r3, r3, #2
 8011486:	440b      	add	r3, r1
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	2b01      	cmp	r3, #1
 801148c:	d901      	bls.n	8011492 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801148e:	2301      	movs	r3, #1
 8011490:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011492:	4b11      	ldr	r3, [pc, #68]	; (80114d8 <xTaskIncrementTick+0x168>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d007      	beq.n	80114aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801149a:	2301      	movs	r3, #1
 801149c:	617b      	str	r3, [r7, #20]
 801149e:	e004      	b.n	80114aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80114a0:	4b0e      	ldr	r3, [pc, #56]	; (80114dc <xTaskIncrementTick+0x16c>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	3301      	adds	r3, #1
 80114a6:	4a0d      	ldr	r2, [pc, #52]	; (80114dc <xTaskIncrementTick+0x16c>)
 80114a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80114aa:	697b      	ldr	r3, [r7, #20]
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3718      	adds	r7, #24
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	20000d64 	.word	0x20000d64
 80114b8:	20000d40 	.word	0x20000d40
 80114bc:	20000cf4 	.word	0x20000cf4
 80114c0:	20000cf8 	.word	0x20000cf8
 80114c4:	20000d54 	.word	0x20000d54
 80114c8:	20000d5c 	.word	0x20000d5c
 80114cc:	20000d44 	.word	0x20000d44
 80114d0:	20000c40 	.word	0x20000c40
 80114d4:	20000c3c 	.word	0x20000c3c
 80114d8:	20000d50 	.word	0x20000d50
 80114dc:	20000d4c 	.word	0x20000d4c

080114e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80114e0:	b480      	push	{r7}
 80114e2:	b087      	sub	sp, #28
 80114e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80114e6:	4b29      	ldr	r3, [pc, #164]	; (801158c <vTaskSwitchContext+0xac>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d003      	beq.n	80114f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80114ee:	4b28      	ldr	r3, [pc, #160]	; (8011590 <vTaskSwitchContext+0xb0>)
 80114f0:	2201      	movs	r2, #1
 80114f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80114f4:	e044      	b.n	8011580 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80114f6:	4b26      	ldr	r3, [pc, #152]	; (8011590 <vTaskSwitchContext+0xb0>)
 80114f8:	2200      	movs	r2, #0
 80114fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114fc:	4b25      	ldr	r3, [pc, #148]	; (8011594 <vTaskSwitchContext+0xb4>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	fab3 f383 	clz	r3, r3
 8011508:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801150a:	7afb      	ldrb	r3, [r7, #11]
 801150c:	f1c3 031f 	rsb	r3, r3, #31
 8011510:	617b      	str	r3, [r7, #20]
 8011512:	4921      	ldr	r1, [pc, #132]	; (8011598 <vTaskSwitchContext+0xb8>)
 8011514:	697a      	ldr	r2, [r7, #20]
 8011516:	4613      	mov	r3, r2
 8011518:	009b      	lsls	r3, r3, #2
 801151a:	4413      	add	r3, r2
 801151c:	009b      	lsls	r3, r3, #2
 801151e:	440b      	add	r3, r1
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d10a      	bne.n	801153c <vTaskSwitchContext+0x5c>
	__asm volatile
 8011526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801152a:	f383 8811 	msr	BASEPRI, r3
 801152e:	f3bf 8f6f 	isb	sy
 8011532:	f3bf 8f4f 	dsb	sy
 8011536:	607b      	str	r3, [r7, #4]
}
 8011538:	bf00      	nop
 801153a:	e7fe      	b.n	801153a <vTaskSwitchContext+0x5a>
 801153c:	697a      	ldr	r2, [r7, #20]
 801153e:	4613      	mov	r3, r2
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	4413      	add	r3, r2
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	4a14      	ldr	r2, [pc, #80]	; (8011598 <vTaskSwitchContext+0xb8>)
 8011548:	4413      	add	r3, r2
 801154a:	613b      	str	r3, [r7, #16]
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	685a      	ldr	r2, [r3, #4]
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	605a      	str	r2, [r3, #4]
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	685a      	ldr	r2, [r3, #4]
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	3308      	adds	r3, #8
 801155e:	429a      	cmp	r2, r3
 8011560:	d104      	bne.n	801156c <vTaskSwitchContext+0x8c>
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	685a      	ldr	r2, [r3, #4]
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	605a      	str	r2, [r3, #4]
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	4a0a      	ldr	r2, [pc, #40]	; (801159c <vTaskSwitchContext+0xbc>)
 8011574:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011576:	4b09      	ldr	r3, [pc, #36]	; (801159c <vTaskSwitchContext+0xbc>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	335c      	adds	r3, #92	; 0x5c
 801157c:	4a08      	ldr	r2, [pc, #32]	; (80115a0 <vTaskSwitchContext+0xc0>)
 801157e:	6013      	str	r3, [r2, #0]
}
 8011580:	bf00      	nop
 8011582:	371c      	adds	r7, #28
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr
 801158c:	20000d64 	.word	0x20000d64
 8011590:	20000d50 	.word	0x20000d50
 8011594:	20000d44 	.word	0x20000d44
 8011598:	20000c40 	.word	0x20000c40
 801159c:	20000c3c 	.word	0x20000c3c
 80115a0:	20000510 	.word	0x20000510

080115a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d10a      	bne.n	80115ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80115b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b8:	f383 8811 	msr	BASEPRI, r3
 80115bc:	f3bf 8f6f 	isb	sy
 80115c0:	f3bf 8f4f 	dsb	sy
 80115c4:	60fb      	str	r3, [r7, #12]
}
 80115c6:	bf00      	nop
 80115c8:	e7fe      	b.n	80115c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80115ca:	4b07      	ldr	r3, [pc, #28]	; (80115e8 <vTaskPlaceOnEventList+0x44>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	3318      	adds	r3, #24
 80115d0:	4619      	mov	r1, r3
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7fe fd99 	bl	801010a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80115d8:	2101      	movs	r1, #1
 80115da:	6838      	ldr	r0, [r7, #0]
 80115dc:	f000 fb82 	bl	8011ce4 <prvAddCurrentTaskToDelayedList>
}
 80115e0:	bf00      	nop
 80115e2:	3710      	adds	r7, #16
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}
 80115e8:	20000c3c 	.word	0x20000c3c

080115ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b086      	sub	sp, #24
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	68db      	ldr	r3, [r3, #12]
 80115f8:	68db      	ldr	r3, [r3, #12]
 80115fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80115fc:	693b      	ldr	r3, [r7, #16]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d10a      	bne.n	8011618 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011606:	f383 8811 	msr	BASEPRI, r3
 801160a:	f3bf 8f6f 	isb	sy
 801160e:	f3bf 8f4f 	dsb	sy
 8011612:	60fb      	str	r3, [r7, #12]
}
 8011614:	bf00      	nop
 8011616:	e7fe      	b.n	8011616 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	3318      	adds	r3, #24
 801161c:	4618      	mov	r0, r3
 801161e:	f7fe fdad 	bl	801017c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011622:	4b1d      	ldr	r3, [pc, #116]	; (8011698 <xTaskRemoveFromEventList+0xac>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d11c      	bne.n	8011664 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	3304      	adds	r3, #4
 801162e:	4618      	mov	r0, r3
 8011630:	f7fe fda4 	bl	801017c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011638:	2201      	movs	r2, #1
 801163a:	409a      	lsls	r2, r3
 801163c:	4b17      	ldr	r3, [pc, #92]	; (801169c <xTaskRemoveFromEventList+0xb0>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	4313      	orrs	r3, r2
 8011642:	4a16      	ldr	r2, [pc, #88]	; (801169c <xTaskRemoveFromEventList+0xb0>)
 8011644:	6013      	str	r3, [r2, #0]
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801164a:	4613      	mov	r3, r2
 801164c:	009b      	lsls	r3, r3, #2
 801164e:	4413      	add	r3, r2
 8011650:	009b      	lsls	r3, r3, #2
 8011652:	4a13      	ldr	r2, [pc, #76]	; (80116a0 <xTaskRemoveFromEventList+0xb4>)
 8011654:	441a      	add	r2, r3
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	3304      	adds	r3, #4
 801165a:	4619      	mov	r1, r3
 801165c:	4610      	mov	r0, r2
 801165e:	f7fe fd30 	bl	80100c2 <vListInsertEnd>
 8011662:	e005      	b.n	8011670 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	3318      	adds	r3, #24
 8011668:	4619      	mov	r1, r3
 801166a:	480e      	ldr	r0, [pc, #56]	; (80116a4 <xTaskRemoveFromEventList+0xb8>)
 801166c:	f7fe fd29 	bl	80100c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011674:	4b0c      	ldr	r3, [pc, #48]	; (80116a8 <xTaskRemoveFromEventList+0xbc>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801167a:	429a      	cmp	r2, r3
 801167c:	d905      	bls.n	801168a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801167e:	2301      	movs	r3, #1
 8011680:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011682:	4b0a      	ldr	r3, [pc, #40]	; (80116ac <xTaskRemoveFromEventList+0xc0>)
 8011684:	2201      	movs	r2, #1
 8011686:	601a      	str	r2, [r3, #0]
 8011688:	e001      	b.n	801168e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801168a:	2300      	movs	r3, #0
 801168c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801168e:	697b      	ldr	r3, [r7, #20]
}
 8011690:	4618      	mov	r0, r3
 8011692:	3718      	adds	r7, #24
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}
 8011698:	20000d64 	.word	0x20000d64
 801169c:	20000d44 	.word	0x20000d44
 80116a0:	20000c40 	.word	0x20000c40
 80116a4:	20000cfc 	.word	0x20000cfc
 80116a8:	20000c3c 	.word	0x20000c3c
 80116ac:	20000d50 	.word	0x20000d50

080116b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80116b0:	b480      	push	{r7}
 80116b2:	b083      	sub	sp, #12
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80116b8:	4b06      	ldr	r3, [pc, #24]	; (80116d4 <vTaskInternalSetTimeOutState+0x24>)
 80116ba:	681a      	ldr	r2, [r3, #0]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80116c0:	4b05      	ldr	r3, [pc, #20]	; (80116d8 <vTaskInternalSetTimeOutState+0x28>)
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	605a      	str	r2, [r3, #4]
}
 80116c8:	bf00      	nop
 80116ca:	370c      	adds	r7, #12
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr
 80116d4:	20000d54 	.word	0x20000d54
 80116d8:	20000d40 	.word	0x20000d40

080116dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b088      	sub	sp, #32
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d10a      	bne.n	8011702 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80116ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f0:	f383 8811 	msr	BASEPRI, r3
 80116f4:	f3bf 8f6f 	isb	sy
 80116f8:	f3bf 8f4f 	dsb	sy
 80116fc:	613b      	str	r3, [r7, #16]
}
 80116fe:	bf00      	nop
 8011700:	e7fe      	b.n	8011700 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d10a      	bne.n	801171e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170c:	f383 8811 	msr	BASEPRI, r3
 8011710:	f3bf 8f6f 	isb	sy
 8011714:	f3bf 8f4f 	dsb	sy
 8011718:	60fb      	str	r3, [r7, #12]
}
 801171a:	bf00      	nop
 801171c:	e7fe      	b.n	801171c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801171e:	f000 fc71 	bl	8012004 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011722:	4b1d      	ldr	r3, [pc, #116]	; (8011798 <xTaskCheckForTimeOut+0xbc>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	69ba      	ldr	r2, [r7, #24]
 801172e:	1ad3      	subs	r3, r2, r3
 8011730:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801173a:	d102      	bne.n	8011742 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801173c:	2300      	movs	r3, #0
 801173e:	61fb      	str	r3, [r7, #28]
 8011740:	e023      	b.n	801178a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681a      	ldr	r2, [r3, #0]
 8011746:	4b15      	ldr	r3, [pc, #84]	; (801179c <xTaskCheckForTimeOut+0xc0>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	429a      	cmp	r2, r3
 801174c:	d007      	beq.n	801175e <xTaskCheckForTimeOut+0x82>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	69ba      	ldr	r2, [r7, #24]
 8011754:	429a      	cmp	r2, r3
 8011756:	d302      	bcc.n	801175e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011758:	2301      	movs	r3, #1
 801175a:	61fb      	str	r3, [r7, #28]
 801175c:	e015      	b.n	801178a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	697a      	ldr	r2, [r7, #20]
 8011764:	429a      	cmp	r2, r3
 8011766:	d20b      	bcs.n	8011780 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	1ad2      	subs	r2, r2, r3
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f7ff ff9b 	bl	80116b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801177a:	2300      	movs	r3, #0
 801177c:	61fb      	str	r3, [r7, #28]
 801177e:	e004      	b.n	801178a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	2200      	movs	r2, #0
 8011784:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011786:	2301      	movs	r3, #1
 8011788:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801178a:	f000 fc6b 	bl	8012064 <vPortExitCritical>

	return xReturn;
 801178e:	69fb      	ldr	r3, [r7, #28]
}
 8011790:	4618      	mov	r0, r3
 8011792:	3720      	adds	r7, #32
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}
 8011798:	20000d40 	.word	0x20000d40
 801179c:	20000d54 	.word	0x20000d54

080117a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80117a0:	b480      	push	{r7}
 80117a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80117a4:	4b03      	ldr	r3, [pc, #12]	; (80117b4 <vTaskMissedYield+0x14>)
 80117a6:	2201      	movs	r2, #1
 80117a8:	601a      	str	r2, [r3, #0]
}
 80117aa:	bf00      	nop
 80117ac:	46bd      	mov	sp, r7
 80117ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b2:	4770      	bx	lr
 80117b4:	20000d50 	.word	0x20000d50

080117b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80117c0:	f000 f852 	bl	8011868 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80117c4:	4b06      	ldr	r3, [pc, #24]	; (80117e0 <prvIdleTask+0x28>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d9f9      	bls.n	80117c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80117cc:	4b05      	ldr	r3, [pc, #20]	; (80117e4 <prvIdleTask+0x2c>)
 80117ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117d2:	601a      	str	r2, [r3, #0]
 80117d4:	f3bf 8f4f 	dsb	sy
 80117d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80117dc:	e7f0      	b.n	80117c0 <prvIdleTask+0x8>
 80117de:	bf00      	nop
 80117e0:	20000c40 	.word	0x20000c40
 80117e4:	e000ed04 	.word	0xe000ed04

080117e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117ee:	2300      	movs	r3, #0
 80117f0:	607b      	str	r3, [r7, #4]
 80117f2:	e00c      	b.n	801180e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	4613      	mov	r3, r2
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	4413      	add	r3, r2
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	4a12      	ldr	r2, [pc, #72]	; (8011848 <prvInitialiseTaskLists+0x60>)
 8011800:	4413      	add	r3, r2
 8011802:	4618      	mov	r0, r3
 8011804:	f7fe fc30 	bl	8010068 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	3301      	adds	r3, #1
 801180c:	607b      	str	r3, [r7, #4]
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2b06      	cmp	r3, #6
 8011812:	d9ef      	bls.n	80117f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011814:	480d      	ldr	r0, [pc, #52]	; (801184c <prvInitialiseTaskLists+0x64>)
 8011816:	f7fe fc27 	bl	8010068 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801181a:	480d      	ldr	r0, [pc, #52]	; (8011850 <prvInitialiseTaskLists+0x68>)
 801181c:	f7fe fc24 	bl	8010068 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011820:	480c      	ldr	r0, [pc, #48]	; (8011854 <prvInitialiseTaskLists+0x6c>)
 8011822:	f7fe fc21 	bl	8010068 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011826:	480c      	ldr	r0, [pc, #48]	; (8011858 <prvInitialiseTaskLists+0x70>)
 8011828:	f7fe fc1e 	bl	8010068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801182c:	480b      	ldr	r0, [pc, #44]	; (801185c <prvInitialiseTaskLists+0x74>)
 801182e:	f7fe fc1b 	bl	8010068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011832:	4b0b      	ldr	r3, [pc, #44]	; (8011860 <prvInitialiseTaskLists+0x78>)
 8011834:	4a05      	ldr	r2, [pc, #20]	; (801184c <prvInitialiseTaskLists+0x64>)
 8011836:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011838:	4b0a      	ldr	r3, [pc, #40]	; (8011864 <prvInitialiseTaskLists+0x7c>)
 801183a:	4a05      	ldr	r2, [pc, #20]	; (8011850 <prvInitialiseTaskLists+0x68>)
 801183c:	601a      	str	r2, [r3, #0]
}
 801183e:	bf00      	nop
 8011840:	3708      	adds	r7, #8
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
 8011846:	bf00      	nop
 8011848:	20000c40 	.word	0x20000c40
 801184c:	20000ccc 	.word	0x20000ccc
 8011850:	20000ce0 	.word	0x20000ce0
 8011854:	20000cfc 	.word	0x20000cfc
 8011858:	20000d10 	.word	0x20000d10
 801185c:	20000d28 	.word	0x20000d28
 8011860:	20000cf4 	.word	0x20000cf4
 8011864:	20000cf8 	.word	0x20000cf8

08011868 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b082      	sub	sp, #8
 801186c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801186e:	e019      	b.n	80118a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011870:	f000 fbc8 	bl	8012004 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011874:	4b10      	ldr	r3, [pc, #64]	; (80118b8 <prvCheckTasksWaitingTermination+0x50>)
 8011876:	68db      	ldr	r3, [r3, #12]
 8011878:	68db      	ldr	r3, [r3, #12]
 801187a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	3304      	adds	r3, #4
 8011880:	4618      	mov	r0, r3
 8011882:	f7fe fc7b 	bl	801017c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011886:	4b0d      	ldr	r3, [pc, #52]	; (80118bc <prvCheckTasksWaitingTermination+0x54>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	3b01      	subs	r3, #1
 801188c:	4a0b      	ldr	r2, [pc, #44]	; (80118bc <prvCheckTasksWaitingTermination+0x54>)
 801188e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011890:	4b0b      	ldr	r3, [pc, #44]	; (80118c0 <prvCheckTasksWaitingTermination+0x58>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	3b01      	subs	r3, #1
 8011896:	4a0a      	ldr	r2, [pc, #40]	; (80118c0 <prvCheckTasksWaitingTermination+0x58>)
 8011898:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801189a:	f000 fbe3 	bl	8012064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f000 f810 	bl	80118c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80118a4:	4b06      	ldr	r3, [pc, #24]	; (80118c0 <prvCheckTasksWaitingTermination+0x58>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d1e1      	bne.n	8011870 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80118ac:	bf00      	nop
 80118ae:	bf00      	nop
 80118b0:	3708      	adds	r7, #8
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}
 80118b6:	bf00      	nop
 80118b8:	20000d10 	.word	0x20000d10
 80118bc:	20000d3c 	.word	0x20000d3c
 80118c0:	20000d24 	.word	0x20000d24

080118c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	335c      	adds	r3, #92	; 0x5c
 80118d0:	4618      	mov	r0, r3
 80118d2:	f001 fd25 	bl	8013320 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d108      	bne.n	80118f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118e4:	4618      	mov	r0, r3
 80118e6:	f000 fd7b 	bl	80123e0 <vPortFree>
				vPortFree( pxTCB );
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f000 fd78 	bl	80123e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80118f0:	e018      	b.n	8011924 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80118f8:	2b01      	cmp	r3, #1
 80118fa:	d103      	bne.n	8011904 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f000 fd6f 	bl	80123e0 <vPortFree>
	}
 8011902:	e00f      	b.n	8011924 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 801190a:	2b02      	cmp	r3, #2
 801190c:	d00a      	beq.n	8011924 <prvDeleteTCB+0x60>
	__asm volatile
 801190e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011912:	f383 8811 	msr	BASEPRI, r3
 8011916:	f3bf 8f6f 	isb	sy
 801191a:	f3bf 8f4f 	dsb	sy
 801191e:	60fb      	str	r3, [r7, #12]
}
 8011920:	bf00      	nop
 8011922:	e7fe      	b.n	8011922 <prvDeleteTCB+0x5e>
	}
 8011924:	bf00      	nop
 8011926:	3710      	adds	r7, #16
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}

0801192c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801192c:	b480      	push	{r7}
 801192e:	b083      	sub	sp, #12
 8011930:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011932:	4b0c      	ldr	r3, [pc, #48]	; (8011964 <prvResetNextTaskUnblockTime+0x38>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d104      	bne.n	8011946 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801193c:	4b0a      	ldr	r3, [pc, #40]	; (8011968 <prvResetNextTaskUnblockTime+0x3c>)
 801193e:	f04f 32ff 	mov.w	r2, #4294967295
 8011942:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011944:	e008      	b.n	8011958 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011946:	4b07      	ldr	r3, [pc, #28]	; (8011964 <prvResetNextTaskUnblockTime+0x38>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	68db      	ldr	r3, [r3, #12]
 801194c:	68db      	ldr	r3, [r3, #12]
 801194e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	4a04      	ldr	r2, [pc, #16]	; (8011968 <prvResetNextTaskUnblockTime+0x3c>)
 8011956:	6013      	str	r3, [r2, #0]
}
 8011958:	bf00      	nop
 801195a:	370c      	adds	r7, #12
 801195c:	46bd      	mov	sp, r7
 801195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011962:	4770      	bx	lr
 8011964:	20000cf4 	.word	0x20000cf4
 8011968:	20000d5c 	.word	0x20000d5c

0801196c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011972:	4b0b      	ldr	r3, [pc, #44]	; (80119a0 <xTaskGetSchedulerState+0x34>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d102      	bne.n	8011980 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801197a:	2301      	movs	r3, #1
 801197c:	607b      	str	r3, [r7, #4]
 801197e:	e008      	b.n	8011992 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011980:	4b08      	ldr	r3, [pc, #32]	; (80119a4 <xTaskGetSchedulerState+0x38>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d102      	bne.n	801198e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011988:	2302      	movs	r3, #2
 801198a:	607b      	str	r3, [r7, #4]
 801198c:	e001      	b.n	8011992 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801198e:	2300      	movs	r3, #0
 8011990:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011992:	687b      	ldr	r3, [r7, #4]
	}
 8011994:	4618      	mov	r0, r3
 8011996:	370c      	adds	r7, #12
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr
 80119a0:	20000d48 	.word	0x20000d48
 80119a4:	20000d64 	.word	0x20000d64

080119a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b084      	sub	sp, #16
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80119b4:	2300      	movs	r3, #0
 80119b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d05e      	beq.n	8011a7c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119c2:	4b31      	ldr	r3, [pc, #196]	; (8011a88 <xTaskPriorityInherit+0xe0>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d24e      	bcs.n	8011a6a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	699b      	ldr	r3, [r3, #24]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	db06      	blt.n	80119e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119d4:	4b2c      	ldr	r3, [pc, #176]	; (8011a88 <xTaskPriorityInherit+0xe0>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119da:	f1c3 0207 	rsb	r2, r3, #7
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	6959      	ldr	r1, [r3, #20]
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ea:	4613      	mov	r3, r2
 80119ec:	009b      	lsls	r3, r3, #2
 80119ee:	4413      	add	r3, r2
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	4a26      	ldr	r2, [pc, #152]	; (8011a8c <xTaskPriorityInherit+0xe4>)
 80119f4:	4413      	add	r3, r2
 80119f6:	4299      	cmp	r1, r3
 80119f8:	d12f      	bne.n	8011a5a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	3304      	adds	r3, #4
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fe fbbc 	bl	801017c <uxListRemove>
 8011a04:	4603      	mov	r3, r0
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d10a      	bne.n	8011a20 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a0e:	2201      	movs	r2, #1
 8011a10:	fa02 f303 	lsl.w	r3, r2, r3
 8011a14:	43da      	mvns	r2, r3
 8011a16:	4b1e      	ldr	r3, [pc, #120]	; (8011a90 <xTaskPriorityInherit+0xe8>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	4013      	ands	r3, r2
 8011a1c:	4a1c      	ldr	r2, [pc, #112]	; (8011a90 <xTaskPriorityInherit+0xe8>)
 8011a1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a20:	4b19      	ldr	r3, [pc, #100]	; (8011a88 <xTaskPriorityInherit+0xe0>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a2e:	2201      	movs	r2, #1
 8011a30:	409a      	lsls	r2, r3
 8011a32:	4b17      	ldr	r3, [pc, #92]	; (8011a90 <xTaskPriorityInherit+0xe8>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	4313      	orrs	r3, r2
 8011a38:	4a15      	ldr	r2, [pc, #84]	; (8011a90 <xTaskPriorityInherit+0xe8>)
 8011a3a:	6013      	str	r3, [r2, #0]
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a40:	4613      	mov	r3, r2
 8011a42:	009b      	lsls	r3, r3, #2
 8011a44:	4413      	add	r3, r2
 8011a46:	009b      	lsls	r3, r3, #2
 8011a48:	4a10      	ldr	r2, [pc, #64]	; (8011a8c <xTaskPriorityInherit+0xe4>)
 8011a4a:	441a      	add	r2, r3
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	3304      	adds	r3, #4
 8011a50:	4619      	mov	r1, r3
 8011a52:	4610      	mov	r0, r2
 8011a54:	f7fe fb35 	bl	80100c2 <vListInsertEnd>
 8011a58:	e004      	b.n	8011a64 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a5a:	4b0b      	ldr	r3, [pc, #44]	; (8011a88 <xTaskPriorityInherit+0xe0>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011a64:	2301      	movs	r3, #1
 8011a66:	60fb      	str	r3, [r7, #12]
 8011a68:	e008      	b.n	8011a7c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011a6e:	4b06      	ldr	r3, [pc, #24]	; (8011a88 <xTaskPriorityInherit+0xe0>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d201      	bcs.n	8011a7c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011a78:	2301      	movs	r3, #1
 8011a7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a7c:	68fb      	ldr	r3, [r7, #12]
	}
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3710      	adds	r7, #16
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	20000c3c 	.word	0x20000c3c
 8011a8c:	20000c40 	.word	0x20000c40
 8011a90:	20000d44 	.word	0x20000d44

08011a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b086      	sub	sp, #24
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d06e      	beq.n	8011b88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011aaa:	4b3a      	ldr	r3, [pc, #232]	; (8011b94 <xTaskPriorityDisinherit+0x100>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	693a      	ldr	r2, [r7, #16]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d00a      	beq.n	8011aca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab8:	f383 8811 	msr	BASEPRI, r3
 8011abc:	f3bf 8f6f 	isb	sy
 8011ac0:	f3bf 8f4f 	dsb	sy
 8011ac4:	60fb      	str	r3, [r7, #12]
}
 8011ac6:	bf00      	nop
 8011ac8:	e7fe      	b.n	8011ac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d10a      	bne.n	8011ae8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad6:	f383 8811 	msr	BASEPRI, r3
 8011ada:	f3bf 8f6f 	isb	sy
 8011ade:	f3bf 8f4f 	dsb	sy
 8011ae2:	60bb      	str	r3, [r7, #8]
}
 8011ae4:	bf00      	nop
 8011ae6:	e7fe      	b.n	8011ae6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011aec:	1e5a      	subs	r2, r3, #1
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d044      	beq.n	8011b88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d140      	bne.n	8011b88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	3304      	adds	r3, #4
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7fe fb36 	bl	801017c <uxListRemove>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d115      	bne.n	8011b42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b1a:	491f      	ldr	r1, [pc, #124]	; (8011b98 <xTaskPriorityDisinherit+0x104>)
 8011b1c:	4613      	mov	r3, r2
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	4413      	add	r3, r2
 8011b22:	009b      	lsls	r3, r3, #2
 8011b24:	440b      	add	r3, r1
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d10a      	bne.n	8011b42 <xTaskPriorityDisinherit+0xae>
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b30:	2201      	movs	r2, #1
 8011b32:	fa02 f303 	lsl.w	r3, r2, r3
 8011b36:	43da      	mvns	r2, r3
 8011b38:	4b18      	ldr	r3, [pc, #96]	; (8011b9c <xTaskPriorityDisinherit+0x108>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	4013      	ands	r3, r2
 8011b3e:	4a17      	ldr	r2, [pc, #92]	; (8011b9c <xTaskPriorityDisinherit+0x108>)
 8011b40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b4e:	f1c3 0207 	rsb	r2, r3, #7
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	409a      	lsls	r2, r3
 8011b5e:	4b0f      	ldr	r3, [pc, #60]	; (8011b9c <xTaskPriorityDisinherit+0x108>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	4313      	orrs	r3, r2
 8011b64:	4a0d      	ldr	r2, [pc, #52]	; (8011b9c <xTaskPriorityDisinherit+0x108>)
 8011b66:	6013      	str	r3, [r2, #0]
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b6c:	4613      	mov	r3, r2
 8011b6e:	009b      	lsls	r3, r3, #2
 8011b70:	4413      	add	r3, r2
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	4a08      	ldr	r2, [pc, #32]	; (8011b98 <xTaskPriorityDisinherit+0x104>)
 8011b76:	441a      	add	r2, r3
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	3304      	adds	r3, #4
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	4610      	mov	r0, r2
 8011b80:	f7fe fa9f 	bl	80100c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011b84:	2301      	movs	r3, #1
 8011b86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b88:	697b      	ldr	r3, [r7, #20]
	}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3718      	adds	r7, #24
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}
 8011b92:	bf00      	nop
 8011b94:	20000c3c 	.word	0x20000c3c
 8011b98:	20000c40 	.word	0x20000c40
 8011b9c:	20000d44 	.word	0x20000d44

08011ba0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b088      	sub	sp, #32
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011bae:	2301      	movs	r3, #1
 8011bb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d077      	beq.n	8011ca8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011bb8:	69bb      	ldr	r3, [r7, #24]
 8011bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d10a      	bne.n	8011bd6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bc4:	f383 8811 	msr	BASEPRI, r3
 8011bc8:	f3bf 8f6f 	isb	sy
 8011bcc:	f3bf 8f4f 	dsb	sy
 8011bd0:	60fb      	str	r3, [r7, #12]
}
 8011bd2:	bf00      	nop
 8011bd4:	e7fe      	b.n	8011bd4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011bd6:	69bb      	ldr	r3, [r7, #24]
 8011bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bda:	683a      	ldr	r2, [r7, #0]
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d902      	bls.n	8011be6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	61fb      	str	r3, [r7, #28]
 8011be4:	e002      	b.n	8011bec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011be6:	69bb      	ldr	r3, [r7, #24]
 8011be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011bec:	69bb      	ldr	r3, [r7, #24]
 8011bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bf0:	69fa      	ldr	r2, [r7, #28]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d058      	beq.n	8011ca8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bfa:	697a      	ldr	r2, [r7, #20]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d153      	bne.n	8011ca8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011c00:	4b2b      	ldr	r3, [pc, #172]	; (8011cb0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	69ba      	ldr	r2, [r7, #24]
 8011c06:	429a      	cmp	r2, r3
 8011c08:	d10a      	bne.n	8011c20 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0e:	f383 8811 	msr	BASEPRI, r3
 8011c12:	f3bf 8f6f 	isb	sy
 8011c16:	f3bf 8f4f 	dsb	sy
 8011c1a:	60bb      	str	r3, [r7, #8]
}
 8011c1c:	bf00      	nop
 8011c1e:	e7fe      	b.n	8011c1e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011c20:	69bb      	ldr	r3, [r7, #24]
 8011c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011c26:	69bb      	ldr	r3, [r7, #24]
 8011c28:	69fa      	ldr	r2, [r7, #28]
 8011c2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011c2c:	69bb      	ldr	r3, [r7, #24]
 8011c2e:	699b      	ldr	r3, [r3, #24]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	db04      	blt.n	8011c3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c34:	69fb      	ldr	r3, [r7, #28]
 8011c36:	f1c3 0207 	rsb	r2, r3, #7
 8011c3a:	69bb      	ldr	r3, [r7, #24]
 8011c3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011c3e:	69bb      	ldr	r3, [r7, #24]
 8011c40:	6959      	ldr	r1, [r3, #20]
 8011c42:	693a      	ldr	r2, [r7, #16]
 8011c44:	4613      	mov	r3, r2
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	4413      	add	r3, r2
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	4a19      	ldr	r2, [pc, #100]	; (8011cb4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011c4e:	4413      	add	r3, r2
 8011c50:	4299      	cmp	r1, r3
 8011c52:	d129      	bne.n	8011ca8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c54:	69bb      	ldr	r3, [r7, #24]
 8011c56:	3304      	adds	r3, #4
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7fe fa8f 	bl	801017c <uxListRemove>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d10a      	bne.n	8011c7a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011c64:	69bb      	ldr	r3, [r7, #24]
 8011c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c68:	2201      	movs	r2, #1
 8011c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c6e:	43da      	mvns	r2, r3
 8011c70:	4b11      	ldr	r3, [pc, #68]	; (8011cb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	4013      	ands	r3, r2
 8011c76:	4a10      	ldr	r2, [pc, #64]	; (8011cb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011c78:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011c7a:	69bb      	ldr	r3, [r7, #24]
 8011c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c7e:	2201      	movs	r2, #1
 8011c80:	409a      	lsls	r2, r3
 8011c82:	4b0d      	ldr	r3, [pc, #52]	; (8011cb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	4313      	orrs	r3, r2
 8011c88:	4a0b      	ldr	r2, [pc, #44]	; (8011cb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011c8a:	6013      	str	r3, [r2, #0]
 8011c8c:	69bb      	ldr	r3, [r7, #24]
 8011c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c90:	4613      	mov	r3, r2
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	4413      	add	r3, r2
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	4a06      	ldr	r2, [pc, #24]	; (8011cb4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011c9a:	441a      	add	r2, r3
 8011c9c:	69bb      	ldr	r3, [r7, #24]
 8011c9e:	3304      	adds	r3, #4
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	4610      	mov	r0, r2
 8011ca4:	f7fe fa0d 	bl	80100c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ca8:	bf00      	nop
 8011caa:	3720      	adds	r7, #32
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	20000c3c 	.word	0x20000c3c
 8011cb4:	20000c40 	.word	0x20000c40
 8011cb8:	20000d44 	.word	0x20000d44

08011cbc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011cbc:	b480      	push	{r7}
 8011cbe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011cc0:	4b07      	ldr	r3, [pc, #28]	; (8011ce0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d004      	beq.n	8011cd2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011cc8:	4b05      	ldr	r3, [pc, #20]	; (8011ce0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011cce:	3201      	adds	r2, #1
 8011cd0:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8011cd2:	4b03      	ldr	r3, [pc, #12]	; (8011ce0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
	}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr
 8011ce0:	20000c3c 	.word	0x20000c3c

08011ce4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011cee:	4b29      	ldr	r3, [pc, #164]	; (8011d94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cf4:	4b28      	ldr	r3, [pc, #160]	; (8011d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	3304      	adds	r3, #4
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7fe fa3e 	bl	801017c <uxListRemove>
 8011d00:	4603      	mov	r3, r0
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d10b      	bne.n	8011d1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011d06:	4b24      	ldr	r3, [pc, #144]	; (8011d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8011d12:	43da      	mvns	r2, r3
 8011d14:	4b21      	ldr	r3, [pc, #132]	; (8011d9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	4013      	ands	r3, r2
 8011d1a:	4a20      	ldr	r2, [pc, #128]	; (8011d9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011d1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d24:	d10a      	bne.n	8011d3c <prvAddCurrentTaskToDelayedList+0x58>
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d007      	beq.n	8011d3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d2c:	4b1a      	ldr	r3, [pc, #104]	; (8011d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	3304      	adds	r3, #4
 8011d32:	4619      	mov	r1, r3
 8011d34:	481a      	ldr	r0, [pc, #104]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011d36:	f7fe f9c4 	bl	80100c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011d3a:	e026      	b.n	8011d8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011d3c:	68fa      	ldr	r2, [r7, #12]
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	4413      	add	r3, r2
 8011d42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011d44:	4b14      	ldr	r3, [pc, #80]	; (8011d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	68ba      	ldr	r2, [r7, #8]
 8011d4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011d4c:	68ba      	ldr	r2, [r7, #8]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d209      	bcs.n	8011d68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d54:	4b13      	ldr	r3, [pc, #76]	; (8011da4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	4b0f      	ldr	r3, [pc, #60]	; (8011d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	4619      	mov	r1, r3
 8011d60:	4610      	mov	r0, r2
 8011d62:	f7fe f9d2 	bl	801010a <vListInsert>
}
 8011d66:	e010      	b.n	8011d8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d68:	4b0f      	ldr	r3, [pc, #60]	; (8011da8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011d6a:	681a      	ldr	r2, [r3, #0]
 8011d6c:	4b0a      	ldr	r3, [pc, #40]	; (8011d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	3304      	adds	r3, #4
 8011d72:	4619      	mov	r1, r3
 8011d74:	4610      	mov	r0, r2
 8011d76:	f7fe f9c8 	bl	801010a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011d7a:	4b0c      	ldr	r3, [pc, #48]	; (8011dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	68ba      	ldr	r2, [r7, #8]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d202      	bcs.n	8011d8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011d84:	4a09      	ldr	r2, [pc, #36]	; (8011dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	6013      	str	r3, [r2, #0]
}
 8011d8a:	bf00      	nop
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	20000d40 	.word	0x20000d40
 8011d98:	20000c3c 	.word	0x20000c3c
 8011d9c:	20000d44 	.word	0x20000d44
 8011da0:	20000d28 	.word	0x20000d28
 8011da4:	20000cf8 	.word	0x20000cf8
 8011da8:	20000cf4 	.word	0x20000cf4
 8011dac:	20000d5c 	.word	0x20000d5c

08011db0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011db0:	b480      	push	{r7}
 8011db2:	b085      	sub	sp, #20
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	3b04      	subs	r3, #4
 8011dc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	3b04      	subs	r3, #4
 8011dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	f023 0201 	bic.w	r2, r3, #1
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	3b04      	subs	r3, #4
 8011dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011de0:	4a0c      	ldr	r2, [pc, #48]	; (8011e14 <pxPortInitialiseStack+0x64>)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	3b14      	subs	r3, #20
 8011dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	3b04      	subs	r3, #4
 8011df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f06f 0202 	mvn.w	r2, #2
 8011dfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	3b20      	subs	r3, #32
 8011e04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011e06:	68fb      	ldr	r3, [r7, #12]
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3714      	adds	r7, #20
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr
 8011e14:	08011e19 	.word	0x08011e19

08011e18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011e18:	b480      	push	{r7}
 8011e1a:	b085      	sub	sp, #20
 8011e1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011e22:	4b12      	ldr	r3, [pc, #72]	; (8011e6c <prvTaskExitError+0x54>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e2a:	d00a      	beq.n	8011e42 <prvTaskExitError+0x2a>
	__asm volatile
 8011e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e30:	f383 8811 	msr	BASEPRI, r3
 8011e34:	f3bf 8f6f 	isb	sy
 8011e38:	f3bf 8f4f 	dsb	sy
 8011e3c:	60fb      	str	r3, [r7, #12]
}
 8011e3e:	bf00      	nop
 8011e40:	e7fe      	b.n	8011e40 <prvTaskExitError+0x28>
	__asm volatile
 8011e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e46:	f383 8811 	msr	BASEPRI, r3
 8011e4a:	f3bf 8f6f 	isb	sy
 8011e4e:	f3bf 8f4f 	dsb	sy
 8011e52:	60bb      	str	r3, [r7, #8]
}
 8011e54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011e56:	bf00      	nop
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d0fc      	beq.n	8011e58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011e5e:	bf00      	nop
 8011e60:	bf00      	nop
 8011e62:	3714      	adds	r7, #20
 8011e64:	46bd      	mov	sp, r7
 8011e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6a:	4770      	bx	lr
 8011e6c:	2000050c 	.word	0x2000050c

08011e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011e70:	4b07      	ldr	r3, [pc, #28]	; (8011e90 <pxCurrentTCBConst2>)
 8011e72:	6819      	ldr	r1, [r3, #0]
 8011e74:	6808      	ldr	r0, [r1, #0]
 8011e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7a:	f380 8809 	msr	PSP, r0
 8011e7e:	f3bf 8f6f 	isb	sy
 8011e82:	f04f 0000 	mov.w	r0, #0
 8011e86:	f380 8811 	msr	BASEPRI, r0
 8011e8a:	4770      	bx	lr
 8011e8c:	f3af 8000 	nop.w

08011e90 <pxCurrentTCBConst2>:
 8011e90:	20000c3c 	.word	0x20000c3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011e94:	bf00      	nop
 8011e96:	bf00      	nop

08011e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011e98:	4808      	ldr	r0, [pc, #32]	; (8011ebc <prvPortStartFirstTask+0x24>)
 8011e9a:	6800      	ldr	r0, [r0, #0]
 8011e9c:	6800      	ldr	r0, [r0, #0]
 8011e9e:	f380 8808 	msr	MSP, r0
 8011ea2:	f04f 0000 	mov.w	r0, #0
 8011ea6:	f380 8814 	msr	CONTROL, r0
 8011eaa:	b662      	cpsie	i
 8011eac:	b661      	cpsie	f
 8011eae:	f3bf 8f4f 	dsb	sy
 8011eb2:	f3bf 8f6f 	isb	sy
 8011eb6:	df00      	svc	0
 8011eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011eba:	bf00      	nop
 8011ebc:	e000ed08 	.word	0xe000ed08

08011ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011ec6:	4b46      	ldr	r3, [pc, #280]	; (8011fe0 <xPortStartScheduler+0x120>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	4a46      	ldr	r2, [pc, #280]	; (8011fe4 <xPortStartScheduler+0x124>)
 8011ecc:	4293      	cmp	r3, r2
 8011ece:	d10a      	bne.n	8011ee6 <xPortStartScheduler+0x26>
	__asm volatile
 8011ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ed4:	f383 8811 	msr	BASEPRI, r3
 8011ed8:	f3bf 8f6f 	isb	sy
 8011edc:	f3bf 8f4f 	dsb	sy
 8011ee0:	613b      	str	r3, [r7, #16]
}
 8011ee2:	bf00      	nop
 8011ee4:	e7fe      	b.n	8011ee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011ee6:	4b3e      	ldr	r3, [pc, #248]	; (8011fe0 <xPortStartScheduler+0x120>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	4a3f      	ldr	r2, [pc, #252]	; (8011fe8 <xPortStartScheduler+0x128>)
 8011eec:	4293      	cmp	r3, r2
 8011eee:	d10a      	bne.n	8011f06 <xPortStartScheduler+0x46>
	__asm volatile
 8011ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef4:	f383 8811 	msr	BASEPRI, r3
 8011ef8:	f3bf 8f6f 	isb	sy
 8011efc:	f3bf 8f4f 	dsb	sy
 8011f00:	60fb      	str	r3, [r7, #12]
}
 8011f02:	bf00      	nop
 8011f04:	e7fe      	b.n	8011f04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011f06:	4b39      	ldr	r3, [pc, #228]	; (8011fec <xPortStartScheduler+0x12c>)
 8011f08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	22ff      	movs	r2, #255	; 0xff
 8011f16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	781b      	ldrb	r3, [r3, #0]
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011f20:	78fb      	ldrb	r3, [r7, #3]
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	4b31      	ldr	r3, [pc, #196]	; (8011ff0 <xPortStartScheduler+0x130>)
 8011f2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011f2e:	4b31      	ldr	r3, [pc, #196]	; (8011ff4 <xPortStartScheduler+0x134>)
 8011f30:	2207      	movs	r2, #7
 8011f32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f34:	e009      	b.n	8011f4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011f36:	4b2f      	ldr	r3, [pc, #188]	; (8011ff4 <xPortStartScheduler+0x134>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	3b01      	subs	r3, #1
 8011f3c:	4a2d      	ldr	r2, [pc, #180]	; (8011ff4 <xPortStartScheduler+0x134>)
 8011f3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011f40:	78fb      	ldrb	r3, [r7, #3]
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	005b      	lsls	r3, r3, #1
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f4a:	78fb      	ldrb	r3, [r7, #3]
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f52:	2b80      	cmp	r3, #128	; 0x80
 8011f54:	d0ef      	beq.n	8011f36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011f56:	4b27      	ldr	r3, [pc, #156]	; (8011ff4 <xPortStartScheduler+0x134>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	f1c3 0307 	rsb	r3, r3, #7
 8011f5e:	2b04      	cmp	r3, #4
 8011f60:	d00a      	beq.n	8011f78 <xPortStartScheduler+0xb8>
	__asm volatile
 8011f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f66:	f383 8811 	msr	BASEPRI, r3
 8011f6a:	f3bf 8f6f 	isb	sy
 8011f6e:	f3bf 8f4f 	dsb	sy
 8011f72:	60bb      	str	r3, [r7, #8]
}
 8011f74:	bf00      	nop
 8011f76:	e7fe      	b.n	8011f76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011f78:	4b1e      	ldr	r3, [pc, #120]	; (8011ff4 <xPortStartScheduler+0x134>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	021b      	lsls	r3, r3, #8
 8011f7e:	4a1d      	ldr	r2, [pc, #116]	; (8011ff4 <xPortStartScheduler+0x134>)
 8011f80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011f82:	4b1c      	ldr	r3, [pc, #112]	; (8011ff4 <xPortStartScheduler+0x134>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011f8a:	4a1a      	ldr	r2, [pc, #104]	; (8011ff4 <xPortStartScheduler+0x134>)
 8011f8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	b2da      	uxtb	r2, r3
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011f96:	4b18      	ldr	r3, [pc, #96]	; (8011ff8 <xPortStartScheduler+0x138>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	4a17      	ldr	r2, [pc, #92]	; (8011ff8 <xPortStartScheduler+0x138>)
 8011f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011fa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011fa2:	4b15      	ldr	r3, [pc, #84]	; (8011ff8 <xPortStartScheduler+0x138>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	4a14      	ldr	r2, [pc, #80]	; (8011ff8 <xPortStartScheduler+0x138>)
 8011fa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011fac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011fae:	f000 f8dd 	bl	801216c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011fb2:	4b12      	ldr	r3, [pc, #72]	; (8011ffc <xPortStartScheduler+0x13c>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011fb8:	f000 f8fc 	bl	80121b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011fbc:	4b10      	ldr	r3, [pc, #64]	; (8012000 <xPortStartScheduler+0x140>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	4a0f      	ldr	r2, [pc, #60]	; (8012000 <xPortStartScheduler+0x140>)
 8011fc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011fc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011fc8:	f7ff ff66 	bl	8011e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011fcc:	f7ff fa88 	bl	80114e0 <vTaskSwitchContext>
	prvTaskExitError();
 8011fd0:	f7ff ff22 	bl	8011e18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011fd4:	2300      	movs	r3, #0
}
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3718      	adds	r7, #24
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	e000ed00 	.word	0xe000ed00
 8011fe4:	410fc271 	.word	0x410fc271
 8011fe8:	410fc270 	.word	0x410fc270
 8011fec:	e000e400 	.word	0xe000e400
 8011ff0:	20000d68 	.word	0x20000d68
 8011ff4:	20000d6c 	.word	0x20000d6c
 8011ff8:	e000ed20 	.word	0xe000ed20
 8011ffc:	2000050c 	.word	0x2000050c
 8012000:	e000ef34 	.word	0xe000ef34

08012004 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012004:	b480      	push	{r7}
 8012006:	b083      	sub	sp, #12
 8012008:	af00      	add	r7, sp, #0
	__asm volatile
 801200a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801200e:	f383 8811 	msr	BASEPRI, r3
 8012012:	f3bf 8f6f 	isb	sy
 8012016:	f3bf 8f4f 	dsb	sy
 801201a:	607b      	str	r3, [r7, #4]
}
 801201c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801201e:	4b0f      	ldr	r3, [pc, #60]	; (801205c <vPortEnterCritical+0x58>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	3301      	adds	r3, #1
 8012024:	4a0d      	ldr	r2, [pc, #52]	; (801205c <vPortEnterCritical+0x58>)
 8012026:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012028:	4b0c      	ldr	r3, [pc, #48]	; (801205c <vPortEnterCritical+0x58>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	2b01      	cmp	r3, #1
 801202e:	d10f      	bne.n	8012050 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012030:	4b0b      	ldr	r3, [pc, #44]	; (8012060 <vPortEnterCritical+0x5c>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	b2db      	uxtb	r3, r3
 8012036:	2b00      	cmp	r3, #0
 8012038:	d00a      	beq.n	8012050 <vPortEnterCritical+0x4c>
	__asm volatile
 801203a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203e:	f383 8811 	msr	BASEPRI, r3
 8012042:	f3bf 8f6f 	isb	sy
 8012046:	f3bf 8f4f 	dsb	sy
 801204a:	603b      	str	r3, [r7, #0]
}
 801204c:	bf00      	nop
 801204e:	e7fe      	b.n	801204e <vPortEnterCritical+0x4a>
	}
}
 8012050:	bf00      	nop
 8012052:	370c      	adds	r7, #12
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr
 801205c:	2000050c 	.word	0x2000050c
 8012060:	e000ed04 	.word	0xe000ed04

08012064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012064:	b480      	push	{r7}
 8012066:	b083      	sub	sp, #12
 8012068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801206a:	4b12      	ldr	r3, [pc, #72]	; (80120b4 <vPortExitCritical+0x50>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d10a      	bne.n	8012088 <vPortExitCritical+0x24>
	__asm volatile
 8012072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012076:	f383 8811 	msr	BASEPRI, r3
 801207a:	f3bf 8f6f 	isb	sy
 801207e:	f3bf 8f4f 	dsb	sy
 8012082:	607b      	str	r3, [r7, #4]
}
 8012084:	bf00      	nop
 8012086:	e7fe      	b.n	8012086 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012088:	4b0a      	ldr	r3, [pc, #40]	; (80120b4 <vPortExitCritical+0x50>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	3b01      	subs	r3, #1
 801208e:	4a09      	ldr	r2, [pc, #36]	; (80120b4 <vPortExitCritical+0x50>)
 8012090:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012092:	4b08      	ldr	r3, [pc, #32]	; (80120b4 <vPortExitCritical+0x50>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d105      	bne.n	80120a6 <vPortExitCritical+0x42>
 801209a:	2300      	movs	r3, #0
 801209c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	f383 8811 	msr	BASEPRI, r3
}
 80120a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80120a6:	bf00      	nop
 80120a8:	370c      	adds	r7, #12
 80120aa:	46bd      	mov	sp, r7
 80120ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	2000050c 	.word	0x2000050c
	...

080120c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80120c0:	f3ef 8009 	mrs	r0, PSP
 80120c4:	f3bf 8f6f 	isb	sy
 80120c8:	4b15      	ldr	r3, [pc, #84]	; (8012120 <pxCurrentTCBConst>)
 80120ca:	681a      	ldr	r2, [r3, #0]
 80120cc:	f01e 0f10 	tst.w	lr, #16
 80120d0:	bf08      	it	eq
 80120d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80120d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120da:	6010      	str	r0, [r2, #0]
 80120dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80120e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80120e4:	f380 8811 	msr	BASEPRI, r0
 80120e8:	f3bf 8f4f 	dsb	sy
 80120ec:	f3bf 8f6f 	isb	sy
 80120f0:	f7ff f9f6 	bl	80114e0 <vTaskSwitchContext>
 80120f4:	f04f 0000 	mov.w	r0, #0
 80120f8:	f380 8811 	msr	BASEPRI, r0
 80120fc:	bc09      	pop	{r0, r3}
 80120fe:	6819      	ldr	r1, [r3, #0]
 8012100:	6808      	ldr	r0, [r1, #0]
 8012102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012106:	f01e 0f10 	tst.w	lr, #16
 801210a:	bf08      	it	eq
 801210c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012110:	f380 8809 	msr	PSP, r0
 8012114:	f3bf 8f6f 	isb	sy
 8012118:	4770      	bx	lr
 801211a:	bf00      	nop
 801211c:	f3af 8000 	nop.w

08012120 <pxCurrentTCBConst>:
 8012120:	20000c3c 	.word	0x20000c3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012124:	bf00      	nop
 8012126:	bf00      	nop

08012128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
	__asm volatile
 801212e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012132:	f383 8811 	msr	BASEPRI, r3
 8012136:	f3bf 8f6f 	isb	sy
 801213a:	f3bf 8f4f 	dsb	sy
 801213e:	607b      	str	r3, [r7, #4]
}
 8012140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012142:	f7ff f915 	bl	8011370 <xTaskIncrementTick>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d003      	beq.n	8012154 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801214c:	4b06      	ldr	r3, [pc, #24]	; (8012168 <SysTick_Handler+0x40>)
 801214e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012152:	601a      	str	r2, [r3, #0]
 8012154:	2300      	movs	r3, #0
 8012156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	f383 8811 	msr	BASEPRI, r3
}
 801215e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012160:	bf00      	nop
 8012162:	3708      	adds	r7, #8
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	e000ed04 	.word	0xe000ed04

0801216c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801216c:	b480      	push	{r7}
 801216e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012170:	4b0b      	ldr	r3, [pc, #44]	; (80121a0 <vPortSetupTimerInterrupt+0x34>)
 8012172:	2200      	movs	r2, #0
 8012174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012176:	4b0b      	ldr	r3, [pc, #44]	; (80121a4 <vPortSetupTimerInterrupt+0x38>)
 8012178:	2200      	movs	r2, #0
 801217a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801217c:	4b0a      	ldr	r3, [pc, #40]	; (80121a8 <vPortSetupTimerInterrupt+0x3c>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	4a0a      	ldr	r2, [pc, #40]	; (80121ac <vPortSetupTimerInterrupt+0x40>)
 8012182:	fba2 2303 	umull	r2, r3, r2, r3
 8012186:	099b      	lsrs	r3, r3, #6
 8012188:	4a09      	ldr	r2, [pc, #36]	; (80121b0 <vPortSetupTimerInterrupt+0x44>)
 801218a:	3b01      	subs	r3, #1
 801218c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801218e:	4b04      	ldr	r3, [pc, #16]	; (80121a0 <vPortSetupTimerInterrupt+0x34>)
 8012190:	2207      	movs	r2, #7
 8012192:	601a      	str	r2, [r3, #0]
}
 8012194:	bf00      	nop
 8012196:	46bd      	mov	sp, r7
 8012198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219c:	4770      	bx	lr
 801219e:	bf00      	nop
 80121a0:	e000e010 	.word	0xe000e010
 80121a4:	e000e018 	.word	0xe000e018
 80121a8:	20000000 	.word	0x20000000
 80121ac:	10624dd3 	.word	0x10624dd3
 80121b0:	e000e014 	.word	0xe000e014

080121b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80121b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80121c4 <vPortEnableVFP+0x10>
 80121b8:	6801      	ldr	r1, [r0, #0]
 80121ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80121be:	6001      	str	r1, [r0, #0]
 80121c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80121c2:	bf00      	nop
 80121c4:	e000ed88 	.word	0xe000ed88

080121c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80121c8:	b480      	push	{r7}
 80121ca:	b085      	sub	sp, #20
 80121cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80121ce:	f3ef 8305 	mrs	r3, IPSR
 80121d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2b0f      	cmp	r3, #15
 80121d8:	d914      	bls.n	8012204 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80121da:	4a17      	ldr	r2, [pc, #92]	; (8012238 <vPortValidateInterruptPriority+0x70>)
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	4413      	add	r3, r2
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80121e4:	4b15      	ldr	r3, [pc, #84]	; (801223c <vPortValidateInterruptPriority+0x74>)
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	7afa      	ldrb	r2, [r7, #11]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d20a      	bcs.n	8012204 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80121ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f2:	f383 8811 	msr	BASEPRI, r3
 80121f6:	f3bf 8f6f 	isb	sy
 80121fa:	f3bf 8f4f 	dsb	sy
 80121fe:	607b      	str	r3, [r7, #4]
}
 8012200:	bf00      	nop
 8012202:	e7fe      	b.n	8012202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012204:	4b0e      	ldr	r3, [pc, #56]	; (8012240 <vPortValidateInterruptPriority+0x78>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801220c:	4b0d      	ldr	r3, [pc, #52]	; (8012244 <vPortValidateInterruptPriority+0x7c>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	429a      	cmp	r2, r3
 8012212:	d90a      	bls.n	801222a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012218:	f383 8811 	msr	BASEPRI, r3
 801221c:	f3bf 8f6f 	isb	sy
 8012220:	f3bf 8f4f 	dsb	sy
 8012224:	603b      	str	r3, [r7, #0]
}
 8012226:	bf00      	nop
 8012228:	e7fe      	b.n	8012228 <vPortValidateInterruptPriority+0x60>
	}
 801222a:	bf00      	nop
 801222c:	3714      	adds	r7, #20
 801222e:	46bd      	mov	sp, r7
 8012230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012234:	4770      	bx	lr
 8012236:	bf00      	nop
 8012238:	e000e3f0 	.word	0xe000e3f0
 801223c:	20000d68 	.word	0x20000d68
 8012240:	e000ed0c 	.word	0xe000ed0c
 8012244:	20000d6c 	.word	0x20000d6c

08012248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b08a      	sub	sp, #40	; 0x28
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012250:	2300      	movs	r3, #0
 8012252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012254:	f7fe ffd2 	bl	80111fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012258:	4b5b      	ldr	r3, [pc, #364]	; (80123c8 <pvPortMalloc+0x180>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d101      	bne.n	8012264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012260:	f000 f920 	bl	80124a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012264:	4b59      	ldr	r3, [pc, #356]	; (80123cc <pvPortMalloc+0x184>)
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	4013      	ands	r3, r2
 801226c:	2b00      	cmp	r3, #0
 801226e:	f040 8093 	bne.w	8012398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d01d      	beq.n	80122b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012278:	2208      	movs	r2, #8
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	4413      	add	r3, r2
 801227e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f003 0307 	and.w	r3, r3, #7
 8012286:	2b00      	cmp	r3, #0
 8012288:	d014      	beq.n	80122b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f023 0307 	bic.w	r3, r3, #7
 8012290:	3308      	adds	r3, #8
 8012292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f003 0307 	and.w	r3, r3, #7
 801229a:	2b00      	cmp	r3, #0
 801229c:	d00a      	beq.n	80122b4 <pvPortMalloc+0x6c>
	__asm volatile
 801229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a2:	f383 8811 	msr	BASEPRI, r3
 80122a6:	f3bf 8f6f 	isb	sy
 80122aa:	f3bf 8f4f 	dsb	sy
 80122ae:	617b      	str	r3, [r7, #20]
}
 80122b0:	bf00      	nop
 80122b2:	e7fe      	b.n	80122b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d06e      	beq.n	8012398 <pvPortMalloc+0x150>
 80122ba:	4b45      	ldr	r3, [pc, #276]	; (80123d0 <pvPortMalloc+0x188>)
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d869      	bhi.n	8012398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80122c4:	4b43      	ldr	r3, [pc, #268]	; (80123d4 <pvPortMalloc+0x18c>)
 80122c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80122c8:	4b42      	ldr	r3, [pc, #264]	; (80123d4 <pvPortMalloc+0x18c>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122ce:	e004      	b.n	80122da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80122d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80122d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	687a      	ldr	r2, [r7, #4]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d903      	bls.n	80122ec <pvPortMalloc+0xa4>
 80122e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d1f1      	bne.n	80122d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80122ec:	4b36      	ldr	r3, [pc, #216]	; (80123c8 <pvPortMalloc+0x180>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d050      	beq.n	8012398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80122f6:	6a3b      	ldr	r3, [r7, #32]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	2208      	movs	r2, #8
 80122fc:	4413      	add	r3, r2
 80122fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012302:	681a      	ldr	r2, [r3, #0]
 8012304:	6a3b      	ldr	r3, [r7, #32]
 8012306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230a:	685a      	ldr	r2, [r3, #4]
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	1ad2      	subs	r2, r2, r3
 8012310:	2308      	movs	r3, #8
 8012312:	005b      	lsls	r3, r3, #1
 8012314:	429a      	cmp	r2, r3
 8012316:	d91f      	bls.n	8012358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	4413      	add	r3, r2
 801231e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012320:	69bb      	ldr	r3, [r7, #24]
 8012322:	f003 0307 	and.w	r3, r3, #7
 8012326:	2b00      	cmp	r3, #0
 8012328:	d00a      	beq.n	8012340 <pvPortMalloc+0xf8>
	__asm volatile
 801232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801232e:	f383 8811 	msr	BASEPRI, r3
 8012332:	f3bf 8f6f 	isb	sy
 8012336:	f3bf 8f4f 	dsb	sy
 801233a:	613b      	str	r3, [r7, #16]
}
 801233c:	bf00      	nop
 801233e:	e7fe      	b.n	801233e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012342:	685a      	ldr	r2, [r3, #4]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	1ad2      	subs	r2, r2, r3
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234e:	687a      	ldr	r2, [r7, #4]
 8012350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012352:	69b8      	ldr	r0, [r7, #24]
 8012354:	f000 f908 	bl	8012568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012358:	4b1d      	ldr	r3, [pc, #116]	; (80123d0 <pvPortMalloc+0x188>)
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235e:	685b      	ldr	r3, [r3, #4]
 8012360:	1ad3      	subs	r3, r2, r3
 8012362:	4a1b      	ldr	r2, [pc, #108]	; (80123d0 <pvPortMalloc+0x188>)
 8012364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012366:	4b1a      	ldr	r3, [pc, #104]	; (80123d0 <pvPortMalloc+0x188>)
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	4b1b      	ldr	r3, [pc, #108]	; (80123d8 <pvPortMalloc+0x190>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	429a      	cmp	r2, r3
 8012370:	d203      	bcs.n	801237a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012372:	4b17      	ldr	r3, [pc, #92]	; (80123d0 <pvPortMalloc+0x188>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	4a18      	ldr	r2, [pc, #96]	; (80123d8 <pvPortMalloc+0x190>)
 8012378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237c:	685a      	ldr	r2, [r3, #4]
 801237e:	4b13      	ldr	r3, [pc, #76]	; (80123cc <pvPortMalloc+0x184>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	431a      	orrs	r2, r3
 8012384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238a:	2200      	movs	r2, #0
 801238c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801238e:	4b13      	ldr	r3, [pc, #76]	; (80123dc <pvPortMalloc+0x194>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	3301      	adds	r3, #1
 8012394:	4a11      	ldr	r2, [pc, #68]	; (80123dc <pvPortMalloc+0x194>)
 8012396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012398:	f7fe ff3e 	bl	8011218 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	f003 0307 	and.w	r3, r3, #7
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d00a      	beq.n	80123bc <pvPortMalloc+0x174>
	__asm volatile
 80123a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123aa:	f383 8811 	msr	BASEPRI, r3
 80123ae:	f3bf 8f6f 	isb	sy
 80123b2:	f3bf 8f4f 	dsb	sy
 80123b6:	60fb      	str	r3, [r7, #12]
}
 80123b8:	bf00      	nop
 80123ba:	e7fe      	b.n	80123ba <pvPortMalloc+0x172>
	return pvReturn;
 80123bc:	69fb      	ldr	r3, [r7, #28]
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3728      	adds	r7, #40	; 0x28
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	20010778 	.word	0x20010778
 80123cc:	2001078c 	.word	0x2001078c
 80123d0:	2001077c 	.word	0x2001077c
 80123d4:	20010770 	.word	0x20010770
 80123d8:	20010780 	.word	0x20010780
 80123dc:	20010784 	.word	0x20010784

080123e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b086      	sub	sp, #24
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d04d      	beq.n	801248e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80123f2:	2308      	movs	r3, #8
 80123f4:	425b      	negs	r3, r3
 80123f6:	697a      	ldr	r2, [r7, #20]
 80123f8:	4413      	add	r3, r2
 80123fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	685a      	ldr	r2, [r3, #4]
 8012404:	4b24      	ldr	r3, [pc, #144]	; (8012498 <vPortFree+0xb8>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	4013      	ands	r3, r2
 801240a:	2b00      	cmp	r3, #0
 801240c:	d10a      	bne.n	8012424 <vPortFree+0x44>
	__asm volatile
 801240e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012412:	f383 8811 	msr	BASEPRI, r3
 8012416:	f3bf 8f6f 	isb	sy
 801241a:	f3bf 8f4f 	dsb	sy
 801241e:	60fb      	str	r3, [r7, #12]
}
 8012420:	bf00      	nop
 8012422:	e7fe      	b.n	8012422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d00a      	beq.n	8012442 <vPortFree+0x62>
	__asm volatile
 801242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012430:	f383 8811 	msr	BASEPRI, r3
 8012434:	f3bf 8f6f 	isb	sy
 8012438:	f3bf 8f4f 	dsb	sy
 801243c:	60bb      	str	r3, [r7, #8]
}
 801243e:	bf00      	nop
 8012440:	e7fe      	b.n	8012440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012442:	693b      	ldr	r3, [r7, #16]
 8012444:	685a      	ldr	r2, [r3, #4]
 8012446:	4b14      	ldr	r3, [pc, #80]	; (8012498 <vPortFree+0xb8>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	4013      	ands	r3, r2
 801244c:	2b00      	cmp	r3, #0
 801244e:	d01e      	beq.n	801248e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d11a      	bne.n	801248e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012458:	693b      	ldr	r3, [r7, #16]
 801245a:	685a      	ldr	r2, [r3, #4]
 801245c:	4b0e      	ldr	r3, [pc, #56]	; (8012498 <vPortFree+0xb8>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	43db      	mvns	r3, r3
 8012462:	401a      	ands	r2, r3
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012468:	f7fe fec8 	bl	80111fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	685a      	ldr	r2, [r3, #4]
 8012470:	4b0a      	ldr	r3, [pc, #40]	; (801249c <vPortFree+0xbc>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	4413      	add	r3, r2
 8012476:	4a09      	ldr	r2, [pc, #36]	; (801249c <vPortFree+0xbc>)
 8012478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801247a:	6938      	ldr	r0, [r7, #16]
 801247c:	f000 f874 	bl	8012568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012480:	4b07      	ldr	r3, [pc, #28]	; (80124a0 <vPortFree+0xc0>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	3301      	adds	r3, #1
 8012486:	4a06      	ldr	r2, [pc, #24]	; (80124a0 <vPortFree+0xc0>)
 8012488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801248a:	f7fe fec5 	bl	8011218 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801248e:	bf00      	nop
 8012490:	3718      	adds	r7, #24
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	2001078c 	.word	0x2001078c
 801249c:	2001077c 	.word	0x2001077c
 80124a0:	20010788 	.word	0x20010788

080124a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80124a4:	b480      	push	{r7}
 80124a6:	b085      	sub	sp, #20
 80124a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80124aa:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 80124ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80124b0:	4b27      	ldr	r3, [pc, #156]	; (8012550 <prvHeapInit+0xac>)
 80124b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	f003 0307 	and.w	r3, r3, #7
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d00c      	beq.n	80124d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	3307      	adds	r3, #7
 80124c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	f023 0307 	bic.w	r3, r3, #7
 80124ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80124cc:	68ba      	ldr	r2, [r7, #8]
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	1ad3      	subs	r3, r2, r3
 80124d2:	4a1f      	ldr	r2, [pc, #124]	; (8012550 <prvHeapInit+0xac>)
 80124d4:	4413      	add	r3, r2
 80124d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80124dc:	4a1d      	ldr	r2, [pc, #116]	; (8012554 <prvHeapInit+0xb0>)
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80124e2:	4b1c      	ldr	r3, [pc, #112]	; (8012554 <prvHeapInit+0xb0>)
 80124e4:	2200      	movs	r2, #0
 80124e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	68ba      	ldr	r2, [r7, #8]
 80124ec:	4413      	add	r3, r2
 80124ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80124f0:	2208      	movs	r2, #8
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	1a9b      	subs	r3, r3, r2
 80124f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	f023 0307 	bic.w	r3, r3, #7
 80124fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	4a15      	ldr	r2, [pc, #84]	; (8012558 <prvHeapInit+0xb4>)
 8012504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012506:	4b14      	ldr	r3, [pc, #80]	; (8012558 <prvHeapInit+0xb4>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2200      	movs	r2, #0
 801250c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801250e:	4b12      	ldr	r3, [pc, #72]	; (8012558 <prvHeapInit+0xb4>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	2200      	movs	r2, #0
 8012514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	68fa      	ldr	r2, [r7, #12]
 801251e:	1ad2      	subs	r2, r2, r3
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012524:	4b0c      	ldr	r3, [pc, #48]	; (8012558 <prvHeapInit+0xb4>)
 8012526:	681a      	ldr	r2, [r3, #0]
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	4a0a      	ldr	r2, [pc, #40]	; (801255c <prvHeapInit+0xb8>)
 8012532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	4a09      	ldr	r2, [pc, #36]	; (8012560 <prvHeapInit+0xbc>)
 801253a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801253c:	4b09      	ldr	r3, [pc, #36]	; (8012564 <prvHeapInit+0xc0>)
 801253e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012542:	601a      	str	r2, [r3, #0]
}
 8012544:	bf00      	nop
 8012546:	3714      	adds	r7, #20
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr
 8012550:	20000d70 	.word	0x20000d70
 8012554:	20010770 	.word	0x20010770
 8012558:	20010778 	.word	0x20010778
 801255c:	20010780 	.word	0x20010780
 8012560:	2001077c 	.word	0x2001077c
 8012564:	2001078c 	.word	0x2001078c

08012568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012568:	b480      	push	{r7}
 801256a:	b085      	sub	sp, #20
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012570:	4b28      	ldr	r3, [pc, #160]	; (8012614 <prvInsertBlockIntoFreeList+0xac>)
 8012572:	60fb      	str	r3, [r7, #12]
 8012574:	e002      	b.n	801257c <prvInsertBlockIntoFreeList+0x14>
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	60fb      	str	r3, [r7, #12]
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	687a      	ldr	r2, [r7, #4]
 8012582:	429a      	cmp	r2, r3
 8012584:	d8f7      	bhi.n	8012576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	68ba      	ldr	r2, [r7, #8]
 8012590:	4413      	add	r3, r2
 8012592:	687a      	ldr	r2, [r7, #4]
 8012594:	429a      	cmp	r2, r3
 8012596:	d108      	bne.n	80125aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	685a      	ldr	r2, [r3, #4]
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	441a      	add	r2, r3
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	685b      	ldr	r3, [r3, #4]
 80125b2:	68ba      	ldr	r2, [r7, #8]
 80125b4:	441a      	add	r2, r3
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d118      	bne.n	80125f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	681a      	ldr	r2, [r3, #0]
 80125c2:	4b15      	ldr	r3, [pc, #84]	; (8012618 <prvInsertBlockIntoFreeList+0xb0>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d00d      	beq.n	80125e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	685a      	ldr	r2, [r3, #4]
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	441a      	add	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	601a      	str	r2, [r3, #0]
 80125e4:	e008      	b.n	80125f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80125e6:	4b0c      	ldr	r3, [pc, #48]	; (8012618 <prvInsertBlockIntoFreeList+0xb0>)
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	601a      	str	r2, [r3, #0]
 80125ee:	e003      	b.n	80125f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	681a      	ldr	r2, [r3, #0]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80125f8:	68fa      	ldr	r2, [r7, #12]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d002      	beq.n	8012606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012606:	bf00      	nop
 8012608:	3714      	adds	r7, #20
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr
 8012612:	bf00      	nop
 8012614:	20010770 	.word	0x20010770
 8012618:	20010778 	.word	0x20010778

0801261c <__errno>:
 801261c:	4b01      	ldr	r3, [pc, #4]	; (8012624 <__errno+0x8>)
 801261e:	6818      	ldr	r0, [r3, #0]
 8012620:	4770      	bx	lr
 8012622:	bf00      	nop
 8012624:	20000510 	.word	0x20000510

08012628 <std>:
 8012628:	2300      	movs	r3, #0
 801262a:	b510      	push	{r4, lr}
 801262c:	4604      	mov	r4, r0
 801262e:	e9c0 3300 	strd	r3, r3, [r0]
 8012632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012636:	6083      	str	r3, [r0, #8]
 8012638:	8181      	strh	r1, [r0, #12]
 801263a:	6643      	str	r3, [r0, #100]	; 0x64
 801263c:	81c2      	strh	r2, [r0, #14]
 801263e:	6183      	str	r3, [r0, #24]
 8012640:	4619      	mov	r1, r3
 8012642:	2208      	movs	r2, #8
 8012644:	305c      	adds	r0, #92	; 0x5c
 8012646:	f000 f91a 	bl	801287e <memset>
 801264a:	4b05      	ldr	r3, [pc, #20]	; (8012660 <std+0x38>)
 801264c:	6263      	str	r3, [r4, #36]	; 0x24
 801264e:	4b05      	ldr	r3, [pc, #20]	; (8012664 <std+0x3c>)
 8012650:	62a3      	str	r3, [r4, #40]	; 0x28
 8012652:	4b05      	ldr	r3, [pc, #20]	; (8012668 <std+0x40>)
 8012654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012656:	4b05      	ldr	r3, [pc, #20]	; (801266c <std+0x44>)
 8012658:	6224      	str	r4, [r4, #32]
 801265a:	6323      	str	r3, [r4, #48]	; 0x30
 801265c:	bd10      	pop	{r4, pc}
 801265e:	bf00      	nop
 8012660:	08013461 	.word	0x08013461
 8012664:	08013483 	.word	0x08013483
 8012668:	080134bb 	.word	0x080134bb
 801266c:	080134df 	.word	0x080134df

08012670 <_cleanup_r>:
 8012670:	4901      	ldr	r1, [pc, #4]	; (8012678 <_cleanup_r+0x8>)
 8012672:	f000 b8af 	b.w	80127d4 <_fwalk_reent>
 8012676:	bf00      	nop
 8012678:	080144bd 	.word	0x080144bd

0801267c <__sfmoreglue>:
 801267c:	b570      	push	{r4, r5, r6, lr}
 801267e:	1e4a      	subs	r2, r1, #1
 8012680:	2568      	movs	r5, #104	; 0x68
 8012682:	4355      	muls	r5, r2
 8012684:	460e      	mov	r6, r1
 8012686:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801268a:	f000 f901 	bl	8012890 <_malloc_r>
 801268e:	4604      	mov	r4, r0
 8012690:	b140      	cbz	r0, 80126a4 <__sfmoreglue+0x28>
 8012692:	2100      	movs	r1, #0
 8012694:	e9c0 1600 	strd	r1, r6, [r0]
 8012698:	300c      	adds	r0, #12
 801269a:	60a0      	str	r0, [r4, #8]
 801269c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80126a0:	f000 f8ed 	bl	801287e <memset>
 80126a4:	4620      	mov	r0, r4
 80126a6:	bd70      	pop	{r4, r5, r6, pc}

080126a8 <__sfp_lock_acquire>:
 80126a8:	4801      	ldr	r0, [pc, #4]	; (80126b0 <__sfp_lock_acquire+0x8>)
 80126aa:	f000 b8d8 	b.w	801285e <__retarget_lock_acquire_recursive>
 80126ae:	bf00      	nop
 80126b0:	20010b28 	.word	0x20010b28

080126b4 <__sfp_lock_release>:
 80126b4:	4801      	ldr	r0, [pc, #4]	; (80126bc <__sfp_lock_release+0x8>)
 80126b6:	f000 b8d3 	b.w	8012860 <__retarget_lock_release_recursive>
 80126ba:	bf00      	nop
 80126bc:	20010b28 	.word	0x20010b28

080126c0 <__sinit_lock_acquire>:
 80126c0:	4801      	ldr	r0, [pc, #4]	; (80126c8 <__sinit_lock_acquire+0x8>)
 80126c2:	f000 b8cc 	b.w	801285e <__retarget_lock_acquire_recursive>
 80126c6:	bf00      	nop
 80126c8:	20010b23 	.word	0x20010b23

080126cc <__sinit_lock_release>:
 80126cc:	4801      	ldr	r0, [pc, #4]	; (80126d4 <__sinit_lock_release+0x8>)
 80126ce:	f000 b8c7 	b.w	8012860 <__retarget_lock_release_recursive>
 80126d2:	bf00      	nop
 80126d4:	20010b23 	.word	0x20010b23

080126d8 <__sinit>:
 80126d8:	b510      	push	{r4, lr}
 80126da:	4604      	mov	r4, r0
 80126dc:	f7ff fff0 	bl	80126c0 <__sinit_lock_acquire>
 80126e0:	69a3      	ldr	r3, [r4, #24]
 80126e2:	b11b      	cbz	r3, 80126ec <__sinit+0x14>
 80126e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126e8:	f7ff bff0 	b.w	80126cc <__sinit_lock_release>
 80126ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80126f0:	6523      	str	r3, [r4, #80]	; 0x50
 80126f2:	4b13      	ldr	r3, [pc, #76]	; (8012740 <__sinit+0x68>)
 80126f4:	4a13      	ldr	r2, [pc, #76]	; (8012744 <__sinit+0x6c>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80126fa:	42a3      	cmp	r3, r4
 80126fc:	bf04      	itt	eq
 80126fe:	2301      	moveq	r3, #1
 8012700:	61a3      	streq	r3, [r4, #24]
 8012702:	4620      	mov	r0, r4
 8012704:	f000 f820 	bl	8012748 <__sfp>
 8012708:	6060      	str	r0, [r4, #4]
 801270a:	4620      	mov	r0, r4
 801270c:	f000 f81c 	bl	8012748 <__sfp>
 8012710:	60a0      	str	r0, [r4, #8]
 8012712:	4620      	mov	r0, r4
 8012714:	f000 f818 	bl	8012748 <__sfp>
 8012718:	2200      	movs	r2, #0
 801271a:	60e0      	str	r0, [r4, #12]
 801271c:	2104      	movs	r1, #4
 801271e:	6860      	ldr	r0, [r4, #4]
 8012720:	f7ff ff82 	bl	8012628 <std>
 8012724:	68a0      	ldr	r0, [r4, #8]
 8012726:	2201      	movs	r2, #1
 8012728:	2109      	movs	r1, #9
 801272a:	f7ff ff7d 	bl	8012628 <std>
 801272e:	68e0      	ldr	r0, [r4, #12]
 8012730:	2202      	movs	r2, #2
 8012732:	2112      	movs	r1, #18
 8012734:	f7ff ff78 	bl	8012628 <std>
 8012738:	2301      	movs	r3, #1
 801273a:	61a3      	str	r3, [r4, #24]
 801273c:	e7d2      	b.n	80126e4 <__sinit+0xc>
 801273e:	bf00      	nop
 8012740:	080164e0 	.word	0x080164e0
 8012744:	08012671 	.word	0x08012671

08012748 <__sfp>:
 8012748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801274a:	4607      	mov	r7, r0
 801274c:	f7ff ffac 	bl	80126a8 <__sfp_lock_acquire>
 8012750:	4b1e      	ldr	r3, [pc, #120]	; (80127cc <__sfp+0x84>)
 8012752:	681e      	ldr	r6, [r3, #0]
 8012754:	69b3      	ldr	r3, [r6, #24]
 8012756:	b913      	cbnz	r3, 801275e <__sfp+0x16>
 8012758:	4630      	mov	r0, r6
 801275a:	f7ff ffbd 	bl	80126d8 <__sinit>
 801275e:	3648      	adds	r6, #72	; 0x48
 8012760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012764:	3b01      	subs	r3, #1
 8012766:	d503      	bpl.n	8012770 <__sfp+0x28>
 8012768:	6833      	ldr	r3, [r6, #0]
 801276a:	b30b      	cbz	r3, 80127b0 <__sfp+0x68>
 801276c:	6836      	ldr	r6, [r6, #0]
 801276e:	e7f7      	b.n	8012760 <__sfp+0x18>
 8012770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012774:	b9d5      	cbnz	r5, 80127ac <__sfp+0x64>
 8012776:	4b16      	ldr	r3, [pc, #88]	; (80127d0 <__sfp+0x88>)
 8012778:	60e3      	str	r3, [r4, #12]
 801277a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801277e:	6665      	str	r5, [r4, #100]	; 0x64
 8012780:	f000 f86c 	bl	801285c <__retarget_lock_init_recursive>
 8012784:	f7ff ff96 	bl	80126b4 <__sfp_lock_release>
 8012788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801278c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012790:	6025      	str	r5, [r4, #0]
 8012792:	61a5      	str	r5, [r4, #24]
 8012794:	2208      	movs	r2, #8
 8012796:	4629      	mov	r1, r5
 8012798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801279c:	f000 f86f 	bl	801287e <memset>
 80127a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80127a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80127a8:	4620      	mov	r0, r4
 80127aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127ac:	3468      	adds	r4, #104	; 0x68
 80127ae:	e7d9      	b.n	8012764 <__sfp+0x1c>
 80127b0:	2104      	movs	r1, #4
 80127b2:	4638      	mov	r0, r7
 80127b4:	f7ff ff62 	bl	801267c <__sfmoreglue>
 80127b8:	4604      	mov	r4, r0
 80127ba:	6030      	str	r0, [r6, #0]
 80127bc:	2800      	cmp	r0, #0
 80127be:	d1d5      	bne.n	801276c <__sfp+0x24>
 80127c0:	f7ff ff78 	bl	80126b4 <__sfp_lock_release>
 80127c4:	230c      	movs	r3, #12
 80127c6:	603b      	str	r3, [r7, #0]
 80127c8:	e7ee      	b.n	80127a8 <__sfp+0x60>
 80127ca:	bf00      	nop
 80127cc:	080164e0 	.word	0x080164e0
 80127d0:	ffff0001 	.word	0xffff0001

080127d4 <_fwalk_reent>:
 80127d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127d8:	4606      	mov	r6, r0
 80127da:	4688      	mov	r8, r1
 80127dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80127e0:	2700      	movs	r7, #0
 80127e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80127e6:	f1b9 0901 	subs.w	r9, r9, #1
 80127ea:	d505      	bpl.n	80127f8 <_fwalk_reent+0x24>
 80127ec:	6824      	ldr	r4, [r4, #0]
 80127ee:	2c00      	cmp	r4, #0
 80127f0:	d1f7      	bne.n	80127e2 <_fwalk_reent+0xe>
 80127f2:	4638      	mov	r0, r7
 80127f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127f8:	89ab      	ldrh	r3, [r5, #12]
 80127fa:	2b01      	cmp	r3, #1
 80127fc:	d907      	bls.n	801280e <_fwalk_reent+0x3a>
 80127fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012802:	3301      	adds	r3, #1
 8012804:	d003      	beq.n	801280e <_fwalk_reent+0x3a>
 8012806:	4629      	mov	r1, r5
 8012808:	4630      	mov	r0, r6
 801280a:	47c0      	blx	r8
 801280c:	4307      	orrs	r7, r0
 801280e:	3568      	adds	r5, #104	; 0x68
 8012810:	e7e9      	b.n	80127e6 <_fwalk_reent+0x12>
	...

08012814 <__libc_init_array>:
 8012814:	b570      	push	{r4, r5, r6, lr}
 8012816:	4d0d      	ldr	r5, [pc, #52]	; (801284c <__libc_init_array+0x38>)
 8012818:	4c0d      	ldr	r4, [pc, #52]	; (8012850 <__libc_init_array+0x3c>)
 801281a:	1b64      	subs	r4, r4, r5
 801281c:	10a4      	asrs	r4, r4, #2
 801281e:	2600      	movs	r6, #0
 8012820:	42a6      	cmp	r6, r4
 8012822:	d109      	bne.n	8012838 <__libc_init_array+0x24>
 8012824:	4d0b      	ldr	r5, [pc, #44]	; (8012854 <__libc_init_array+0x40>)
 8012826:	4c0c      	ldr	r4, [pc, #48]	; (8012858 <__libc_init_array+0x44>)
 8012828:	f002 feee 	bl	8015608 <_init>
 801282c:	1b64      	subs	r4, r4, r5
 801282e:	10a4      	asrs	r4, r4, #2
 8012830:	2600      	movs	r6, #0
 8012832:	42a6      	cmp	r6, r4
 8012834:	d105      	bne.n	8012842 <__libc_init_array+0x2e>
 8012836:	bd70      	pop	{r4, r5, r6, pc}
 8012838:	f855 3b04 	ldr.w	r3, [r5], #4
 801283c:	4798      	blx	r3
 801283e:	3601      	adds	r6, #1
 8012840:	e7ee      	b.n	8012820 <__libc_init_array+0xc>
 8012842:	f855 3b04 	ldr.w	r3, [r5], #4
 8012846:	4798      	blx	r3
 8012848:	3601      	adds	r6, #1
 801284a:	e7f2      	b.n	8012832 <__libc_init_array+0x1e>
 801284c:	0801686c 	.word	0x0801686c
 8012850:	0801686c 	.word	0x0801686c
 8012854:	0801686c 	.word	0x0801686c
 8012858:	08016870 	.word	0x08016870

0801285c <__retarget_lock_init_recursive>:
 801285c:	4770      	bx	lr

0801285e <__retarget_lock_acquire_recursive>:
 801285e:	4770      	bx	lr

08012860 <__retarget_lock_release_recursive>:
 8012860:	4770      	bx	lr

08012862 <memcpy>:
 8012862:	440a      	add	r2, r1
 8012864:	4291      	cmp	r1, r2
 8012866:	f100 33ff 	add.w	r3, r0, #4294967295
 801286a:	d100      	bne.n	801286e <memcpy+0xc>
 801286c:	4770      	bx	lr
 801286e:	b510      	push	{r4, lr}
 8012870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012878:	4291      	cmp	r1, r2
 801287a:	d1f9      	bne.n	8012870 <memcpy+0xe>
 801287c:	bd10      	pop	{r4, pc}

0801287e <memset>:
 801287e:	4402      	add	r2, r0
 8012880:	4603      	mov	r3, r0
 8012882:	4293      	cmp	r3, r2
 8012884:	d100      	bne.n	8012888 <memset+0xa>
 8012886:	4770      	bx	lr
 8012888:	f803 1b01 	strb.w	r1, [r3], #1
 801288c:	e7f9      	b.n	8012882 <memset+0x4>
	...

08012890 <_malloc_r>:
 8012890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012892:	1ccd      	adds	r5, r1, #3
 8012894:	f025 0503 	bic.w	r5, r5, #3
 8012898:	3508      	adds	r5, #8
 801289a:	2d0c      	cmp	r5, #12
 801289c:	bf38      	it	cc
 801289e:	250c      	movcc	r5, #12
 80128a0:	2d00      	cmp	r5, #0
 80128a2:	4606      	mov	r6, r0
 80128a4:	db01      	blt.n	80128aa <_malloc_r+0x1a>
 80128a6:	42a9      	cmp	r1, r5
 80128a8:	d903      	bls.n	80128b2 <_malloc_r+0x22>
 80128aa:	230c      	movs	r3, #12
 80128ac:	6033      	str	r3, [r6, #0]
 80128ae:	2000      	movs	r0, #0
 80128b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128b2:	f001 fec1 	bl	8014638 <__malloc_lock>
 80128b6:	4921      	ldr	r1, [pc, #132]	; (801293c <_malloc_r+0xac>)
 80128b8:	680a      	ldr	r2, [r1, #0]
 80128ba:	4614      	mov	r4, r2
 80128bc:	b99c      	cbnz	r4, 80128e6 <_malloc_r+0x56>
 80128be:	4f20      	ldr	r7, [pc, #128]	; (8012940 <_malloc_r+0xb0>)
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	b923      	cbnz	r3, 80128ce <_malloc_r+0x3e>
 80128c4:	4621      	mov	r1, r4
 80128c6:	4630      	mov	r0, r6
 80128c8:	f000 fd86 	bl	80133d8 <_sbrk_r>
 80128cc:	6038      	str	r0, [r7, #0]
 80128ce:	4629      	mov	r1, r5
 80128d0:	4630      	mov	r0, r6
 80128d2:	f000 fd81 	bl	80133d8 <_sbrk_r>
 80128d6:	1c43      	adds	r3, r0, #1
 80128d8:	d123      	bne.n	8012922 <_malloc_r+0x92>
 80128da:	230c      	movs	r3, #12
 80128dc:	6033      	str	r3, [r6, #0]
 80128de:	4630      	mov	r0, r6
 80128e0:	f001 feb0 	bl	8014644 <__malloc_unlock>
 80128e4:	e7e3      	b.n	80128ae <_malloc_r+0x1e>
 80128e6:	6823      	ldr	r3, [r4, #0]
 80128e8:	1b5b      	subs	r3, r3, r5
 80128ea:	d417      	bmi.n	801291c <_malloc_r+0x8c>
 80128ec:	2b0b      	cmp	r3, #11
 80128ee:	d903      	bls.n	80128f8 <_malloc_r+0x68>
 80128f0:	6023      	str	r3, [r4, #0]
 80128f2:	441c      	add	r4, r3
 80128f4:	6025      	str	r5, [r4, #0]
 80128f6:	e004      	b.n	8012902 <_malloc_r+0x72>
 80128f8:	6863      	ldr	r3, [r4, #4]
 80128fa:	42a2      	cmp	r2, r4
 80128fc:	bf0c      	ite	eq
 80128fe:	600b      	streq	r3, [r1, #0]
 8012900:	6053      	strne	r3, [r2, #4]
 8012902:	4630      	mov	r0, r6
 8012904:	f001 fe9e 	bl	8014644 <__malloc_unlock>
 8012908:	f104 000b 	add.w	r0, r4, #11
 801290c:	1d23      	adds	r3, r4, #4
 801290e:	f020 0007 	bic.w	r0, r0, #7
 8012912:	1ac2      	subs	r2, r0, r3
 8012914:	d0cc      	beq.n	80128b0 <_malloc_r+0x20>
 8012916:	1a1b      	subs	r3, r3, r0
 8012918:	50a3      	str	r3, [r4, r2]
 801291a:	e7c9      	b.n	80128b0 <_malloc_r+0x20>
 801291c:	4622      	mov	r2, r4
 801291e:	6864      	ldr	r4, [r4, #4]
 8012920:	e7cc      	b.n	80128bc <_malloc_r+0x2c>
 8012922:	1cc4      	adds	r4, r0, #3
 8012924:	f024 0403 	bic.w	r4, r4, #3
 8012928:	42a0      	cmp	r0, r4
 801292a:	d0e3      	beq.n	80128f4 <_malloc_r+0x64>
 801292c:	1a21      	subs	r1, r4, r0
 801292e:	4630      	mov	r0, r6
 8012930:	f000 fd52 	bl	80133d8 <_sbrk_r>
 8012934:	3001      	adds	r0, #1
 8012936:	d1dd      	bne.n	80128f4 <_malloc_r+0x64>
 8012938:	e7cf      	b.n	80128da <_malloc_r+0x4a>
 801293a:	bf00      	nop
 801293c:	20010790 	.word	0x20010790
 8012940:	20010794 	.word	0x20010794

08012944 <__cvt>:
 8012944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012948:	ec55 4b10 	vmov	r4, r5, d0
 801294c:	2d00      	cmp	r5, #0
 801294e:	460e      	mov	r6, r1
 8012950:	4619      	mov	r1, r3
 8012952:	462b      	mov	r3, r5
 8012954:	bfbb      	ittet	lt
 8012956:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801295a:	461d      	movlt	r5, r3
 801295c:	2300      	movge	r3, #0
 801295e:	232d      	movlt	r3, #45	; 0x2d
 8012960:	700b      	strb	r3, [r1, #0]
 8012962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012964:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012968:	4691      	mov	r9, r2
 801296a:	f023 0820 	bic.w	r8, r3, #32
 801296e:	bfbc      	itt	lt
 8012970:	4622      	movlt	r2, r4
 8012972:	4614      	movlt	r4, r2
 8012974:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012978:	d005      	beq.n	8012986 <__cvt+0x42>
 801297a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801297e:	d100      	bne.n	8012982 <__cvt+0x3e>
 8012980:	3601      	adds	r6, #1
 8012982:	2102      	movs	r1, #2
 8012984:	e000      	b.n	8012988 <__cvt+0x44>
 8012986:	2103      	movs	r1, #3
 8012988:	ab03      	add	r3, sp, #12
 801298a:	9301      	str	r3, [sp, #4]
 801298c:	ab02      	add	r3, sp, #8
 801298e:	9300      	str	r3, [sp, #0]
 8012990:	ec45 4b10 	vmov	d0, r4, r5
 8012994:	4653      	mov	r3, sl
 8012996:	4632      	mov	r2, r6
 8012998:	f000 ff1e 	bl	80137d8 <_dtoa_r>
 801299c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80129a0:	4607      	mov	r7, r0
 80129a2:	d102      	bne.n	80129aa <__cvt+0x66>
 80129a4:	f019 0f01 	tst.w	r9, #1
 80129a8:	d022      	beq.n	80129f0 <__cvt+0xac>
 80129aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80129ae:	eb07 0906 	add.w	r9, r7, r6
 80129b2:	d110      	bne.n	80129d6 <__cvt+0x92>
 80129b4:	783b      	ldrb	r3, [r7, #0]
 80129b6:	2b30      	cmp	r3, #48	; 0x30
 80129b8:	d10a      	bne.n	80129d0 <__cvt+0x8c>
 80129ba:	2200      	movs	r2, #0
 80129bc:	2300      	movs	r3, #0
 80129be:	4620      	mov	r0, r4
 80129c0:	4629      	mov	r1, r5
 80129c2:	f7ee f881 	bl	8000ac8 <__aeabi_dcmpeq>
 80129c6:	b918      	cbnz	r0, 80129d0 <__cvt+0x8c>
 80129c8:	f1c6 0601 	rsb	r6, r6, #1
 80129cc:	f8ca 6000 	str.w	r6, [sl]
 80129d0:	f8da 3000 	ldr.w	r3, [sl]
 80129d4:	4499      	add	r9, r3
 80129d6:	2200      	movs	r2, #0
 80129d8:	2300      	movs	r3, #0
 80129da:	4620      	mov	r0, r4
 80129dc:	4629      	mov	r1, r5
 80129de:	f7ee f873 	bl	8000ac8 <__aeabi_dcmpeq>
 80129e2:	b108      	cbz	r0, 80129e8 <__cvt+0xa4>
 80129e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80129e8:	2230      	movs	r2, #48	; 0x30
 80129ea:	9b03      	ldr	r3, [sp, #12]
 80129ec:	454b      	cmp	r3, r9
 80129ee:	d307      	bcc.n	8012a00 <__cvt+0xbc>
 80129f0:	9b03      	ldr	r3, [sp, #12]
 80129f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80129f4:	1bdb      	subs	r3, r3, r7
 80129f6:	4638      	mov	r0, r7
 80129f8:	6013      	str	r3, [r2, #0]
 80129fa:	b004      	add	sp, #16
 80129fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a00:	1c59      	adds	r1, r3, #1
 8012a02:	9103      	str	r1, [sp, #12]
 8012a04:	701a      	strb	r2, [r3, #0]
 8012a06:	e7f0      	b.n	80129ea <__cvt+0xa6>

08012a08 <__exponent>:
 8012a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	2900      	cmp	r1, #0
 8012a0e:	bfb8      	it	lt
 8012a10:	4249      	neglt	r1, r1
 8012a12:	f803 2b02 	strb.w	r2, [r3], #2
 8012a16:	bfb4      	ite	lt
 8012a18:	222d      	movlt	r2, #45	; 0x2d
 8012a1a:	222b      	movge	r2, #43	; 0x2b
 8012a1c:	2909      	cmp	r1, #9
 8012a1e:	7042      	strb	r2, [r0, #1]
 8012a20:	dd2a      	ble.n	8012a78 <__exponent+0x70>
 8012a22:	f10d 0407 	add.w	r4, sp, #7
 8012a26:	46a4      	mov	ip, r4
 8012a28:	270a      	movs	r7, #10
 8012a2a:	46a6      	mov	lr, r4
 8012a2c:	460a      	mov	r2, r1
 8012a2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8012a32:	fb07 1516 	mls	r5, r7, r6, r1
 8012a36:	3530      	adds	r5, #48	; 0x30
 8012a38:	2a63      	cmp	r2, #99	; 0x63
 8012a3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8012a3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012a42:	4631      	mov	r1, r6
 8012a44:	dcf1      	bgt.n	8012a2a <__exponent+0x22>
 8012a46:	3130      	adds	r1, #48	; 0x30
 8012a48:	f1ae 0502 	sub.w	r5, lr, #2
 8012a4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012a50:	1c44      	adds	r4, r0, #1
 8012a52:	4629      	mov	r1, r5
 8012a54:	4561      	cmp	r1, ip
 8012a56:	d30a      	bcc.n	8012a6e <__exponent+0x66>
 8012a58:	f10d 0209 	add.w	r2, sp, #9
 8012a5c:	eba2 020e 	sub.w	r2, r2, lr
 8012a60:	4565      	cmp	r5, ip
 8012a62:	bf88      	it	hi
 8012a64:	2200      	movhi	r2, #0
 8012a66:	4413      	add	r3, r2
 8012a68:	1a18      	subs	r0, r3, r0
 8012a6a:	b003      	add	sp, #12
 8012a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012a76:	e7ed      	b.n	8012a54 <__exponent+0x4c>
 8012a78:	2330      	movs	r3, #48	; 0x30
 8012a7a:	3130      	adds	r1, #48	; 0x30
 8012a7c:	7083      	strb	r3, [r0, #2]
 8012a7e:	70c1      	strb	r1, [r0, #3]
 8012a80:	1d03      	adds	r3, r0, #4
 8012a82:	e7f1      	b.n	8012a68 <__exponent+0x60>

08012a84 <_printf_float>:
 8012a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a88:	ed2d 8b02 	vpush	{d8}
 8012a8c:	b08d      	sub	sp, #52	; 0x34
 8012a8e:	460c      	mov	r4, r1
 8012a90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012a94:	4616      	mov	r6, r2
 8012a96:	461f      	mov	r7, r3
 8012a98:	4605      	mov	r5, r0
 8012a9a:	f001 fd4b 	bl	8014534 <_localeconv_r>
 8012a9e:	f8d0 a000 	ldr.w	sl, [r0]
 8012aa2:	4650      	mov	r0, sl
 8012aa4:	f7ed fb94 	bl	80001d0 <strlen>
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8012aac:	6823      	ldr	r3, [r4, #0]
 8012aae:	9305      	str	r3, [sp, #20]
 8012ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8012ab4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012ab8:	3307      	adds	r3, #7
 8012aba:	f023 0307 	bic.w	r3, r3, #7
 8012abe:	f103 0208 	add.w	r2, r3, #8
 8012ac2:	f8c8 2000 	str.w	r2, [r8]
 8012ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012ace:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012ad2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012ad6:	9307      	str	r3, [sp, #28]
 8012ad8:	f8cd 8018 	str.w	r8, [sp, #24]
 8012adc:	ee08 0a10 	vmov	s16, r0
 8012ae0:	4b9f      	ldr	r3, [pc, #636]	; (8012d60 <_printf_float+0x2dc>)
 8012ae2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8012aea:	f7ee f81f 	bl	8000b2c <__aeabi_dcmpun>
 8012aee:	bb88      	cbnz	r0, 8012b54 <_printf_float+0xd0>
 8012af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012af4:	4b9a      	ldr	r3, [pc, #616]	; (8012d60 <_printf_float+0x2dc>)
 8012af6:	f04f 32ff 	mov.w	r2, #4294967295
 8012afa:	f7ed fff9 	bl	8000af0 <__aeabi_dcmple>
 8012afe:	bb48      	cbnz	r0, 8012b54 <_printf_float+0xd0>
 8012b00:	2200      	movs	r2, #0
 8012b02:	2300      	movs	r3, #0
 8012b04:	4640      	mov	r0, r8
 8012b06:	4649      	mov	r1, r9
 8012b08:	f7ed ffe8 	bl	8000adc <__aeabi_dcmplt>
 8012b0c:	b110      	cbz	r0, 8012b14 <_printf_float+0x90>
 8012b0e:	232d      	movs	r3, #45	; 0x2d
 8012b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b14:	4b93      	ldr	r3, [pc, #588]	; (8012d64 <_printf_float+0x2e0>)
 8012b16:	4894      	ldr	r0, [pc, #592]	; (8012d68 <_printf_float+0x2e4>)
 8012b18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012b1c:	bf94      	ite	ls
 8012b1e:	4698      	movls	r8, r3
 8012b20:	4680      	movhi	r8, r0
 8012b22:	2303      	movs	r3, #3
 8012b24:	6123      	str	r3, [r4, #16]
 8012b26:	9b05      	ldr	r3, [sp, #20]
 8012b28:	f023 0204 	bic.w	r2, r3, #4
 8012b2c:	6022      	str	r2, [r4, #0]
 8012b2e:	f04f 0900 	mov.w	r9, #0
 8012b32:	9700      	str	r7, [sp, #0]
 8012b34:	4633      	mov	r3, r6
 8012b36:	aa0b      	add	r2, sp, #44	; 0x2c
 8012b38:	4621      	mov	r1, r4
 8012b3a:	4628      	mov	r0, r5
 8012b3c:	f000 f9d8 	bl	8012ef0 <_printf_common>
 8012b40:	3001      	adds	r0, #1
 8012b42:	f040 8090 	bne.w	8012c66 <_printf_float+0x1e2>
 8012b46:	f04f 30ff 	mov.w	r0, #4294967295
 8012b4a:	b00d      	add	sp, #52	; 0x34
 8012b4c:	ecbd 8b02 	vpop	{d8}
 8012b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b54:	4642      	mov	r2, r8
 8012b56:	464b      	mov	r3, r9
 8012b58:	4640      	mov	r0, r8
 8012b5a:	4649      	mov	r1, r9
 8012b5c:	f7ed ffe6 	bl	8000b2c <__aeabi_dcmpun>
 8012b60:	b140      	cbz	r0, 8012b74 <_printf_float+0xf0>
 8012b62:	464b      	mov	r3, r9
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	bfbc      	itt	lt
 8012b68:	232d      	movlt	r3, #45	; 0x2d
 8012b6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012b6e:	487f      	ldr	r0, [pc, #508]	; (8012d6c <_printf_float+0x2e8>)
 8012b70:	4b7f      	ldr	r3, [pc, #508]	; (8012d70 <_printf_float+0x2ec>)
 8012b72:	e7d1      	b.n	8012b18 <_printf_float+0x94>
 8012b74:	6863      	ldr	r3, [r4, #4]
 8012b76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012b7a:	9206      	str	r2, [sp, #24]
 8012b7c:	1c5a      	adds	r2, r3, #1
 8012b7e:	d13f      	bne.n	8012c00 <_printf_float+0x17c>
 8012b80:	2306      	movs	r3, #6
 8012b82:	6063      	str	r3, [r4, #4]
 8012b84:	9b05      	ldr	r3, [sp, #20]
 8012b86:	6861      	ldr	r1, [r4, #4]
 8012b88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	9303      	str	r3, [sp, #12]
 8012b90:	ab0a      	add	r3, sp, #40	; 0x28
 8012b92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012b96:	ab09      	add	r3, sp, #36	; 0x24
 8012b98:	ec49 8b10 	vmov	d0, r8, r9
 8012b9c:	9300      	str	r3, [sp, #0]
 8012b9e:	6022      	str	r2, [r4, #0]
 8012ba0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	f7ff fecd 	bl	8012944 <__cvt>
 8012baa:	9b06      	ldr	r3, [sp, #24]
 8012bac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012bae:	2b47      	cmp	r3, #71	; 0x47
 8012bb0:	4680      	mov	r8, r0
 8012bb2:	d108      	bne.n	8012bc6 <_printf_float+0x142>
 8012bb4:	1cc8      	adds	r0, r1, #3
 8012bb6:	db02      	blt.n	8012bbe <_printf_float+0x13a>
 8012bb8:	6863      	ldr	r3, [r4, #4]
 8012bba:	4299      	cmp	r1, r3
 8012bbc:	dd41      	ble.n	8012c42 <_printf_float+0x1be>
 8012bbe:	f1ab 0b02 	sub.w	fp, fp, #2
 8012bc2:	fa5f fb8b 	uxtb.w	fp, fp
 8012bc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012bca:	d820      	bhi.n	8012c0e <_printf_float+0x18a>
 8012bcc:	3901      	subs	r1, #1
 8012bce:	465a      	mov	r2, fp
 8012bd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012bd4:	9109      	str	r1, [sp, #36]	; 0x24
 8012bd6:	f7ff ff17 	bl	8012a08 <__exponent>
 8012bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bdc:	1813      	adds	r3, r2, r0
 8012bde:	2a01      	cmp	r2, #1
 8012be0:	4681      	mov	r9, r0
 8012be2:	6123      	str	r3, [r4, #16]
 8012be4:	dc02      	bgt.n	8012bec <_printf_float+0x168>
 8012be6:	6822      	ldr	r2, [r4, #0]
 8012be8:	07d2      	lsls	r2, r2, #31
 8012bea:	d501      	bpl.n	8012bf0 <_printf_float+0x16c>
 8012bec:	3301      	adds	r3, #1
 8012bee:	6123      	str	r3, [r4, #16]
 8012bf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d09c      	beq.n	8012b32 <_printf_float+0xae>
 8012bf8:	232d      	movs	r3, #45	; 0x2d
 8012bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bfe:	e798      	b.n	8012b32 <_printf_float+0xae>
 8012c00:	9a06      	ldr	r2, [sp, #24]
 8012c02:	2a47      	cmp	r2, #71	; 0x47
 8012c04:	d1be      	bne.n	8012b84 <_printf_float+0x100>
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d1bc      	bne.n	8012b84 <_printf_float+0x100>
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	e7b9      	b.n	8012b82 <_printf_float+0xfe>
 8012c0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012c12:	d118      	bne.n	8012c46 <_printf_float+0x1c2>
 8012c14:	2900      	cmp	r1, #0
 8012c16:	6863      	ldr	r3, [r4, #4]
 8012c18:	dd0b      	ble.n	8012c32 <_printf_float+0x1ae>
 8012c1a:	6121      	str	r1, [r4, #16]
 8012c1c:	b913      	cbnz	r3, 8012c24 <_printf_float+0x1a0>
 8012c1e:	6822      	ldr	r2, [r4, #0]
 8012c20:	07d0      	lsls	r0, r2, #31
 8012c22:	d502      	bpl.n	8012c2a <_printf_float+0x1a6>
 8012c24:	3301      	adds	r3, #1
 8012c26:	440b      	add	r3, r1
 8012c28:	6123      	str	r3, [r4, #16]
 8012c2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8012c2c:	f04f 0900 	mov.w	r9, #0
 8012c30:	e7de      	b.n	8012bf0 <_printf_float+0x16c>
 8012c32:	b913      	cbnz	r3, 8012c3a <_printf_float+0x1b6>
 8012c34:	6822      	ldr	r2, [r4, #0]
 8012c36:	07d2      	lsls	r2, r2, #31
 8012c38:	d501      	bpl.n	8012c3e <_printf_float+0x1ba>
 8012c3a:	3302      	adds	r3, #2
 8012c3c:	e7f4      	b.n	8012c28 <_printf_float+0x1a4>
 8012c3e:	2301      	movs	r3, #1
 8012c40:	e7f2      	b.n	8012c28 <_printf_float+0x1a4>
 8012c42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c48:	4299      	cmp	r1, r3
 8012c4a:	db05      	blt.n	8012c58 <_printf_float+0x1d4>
 8012c4c:	6823      	ldr	r3, [r4, #0]
 8012c4e:	6121      	str	r1, [r4, #16]
 8012c50:	07d8      	lsls	r0, r3, #31
 8012c52:	d5ea      	bpl.n	8012c2a <_printf_float+0x1a6>
 8012c54:	1c4b      	adds	r3, r1, #1
 8012c56:	e7e7      	b.n	8012c28 <_printf_float+0x1a4>
 8012c58:	2900      	cmp	r1, #0
 8012c5a:	bfd4      	ite	le
 8012c5c:	f1c1 0202 	rsble	r2, r1, #2
 8012c60:	2201      	movgt	r2, #1
 8012c62:	4413      	add	r3, r2
 8012c64:	e7e0      	b.n	8012c28 <_printf_float+0x1a4>
 8012c66:	6823      	ldr	r3, [r4, #0]
 8012c68:	055a      	lsls	r2, r3, #21
 8012c6a:	d407      	bmi.n	8012c7c <_printf_float+0x1f8>
 8012c6c:	6923      	ldr	r3, [r4, #16]
 8012c6e:	4642      	mov	r2, r8
 8012c70:	4631      	mov	r1, r6
 8012c72:	4628      	mov	r0, r5
 8012c74:	47b8      	blx	r7
 8012c76:	3001      	adds	r0, #1
 8012c78:	d12c      	bne.n	8012cd4 <_printf_float+0x250>
 8012c7a:	e764      	b.n	8012b46 <_printf_float+0xc2>
 8012c7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012c80:	f240 80e0 	bls.w	8012e44 <_printf_float+0x3c0>
 8012c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012c88:	2200      	movs	r2, #0
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	f7ed ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	d034      	beq.n	8012cfe <_printf_float+0x27a>
 8012c94:	4a37      	ldr	r2, [pc, #220]	; (8012d74 <_printf_float+0x2f0>)
 8012c96:	2301      	movs	r3, #1
 8012c98:	4631      	mov	r1, r6
 8012c9a:	4628      	mov	r0, r5
 8012c9c:	47b8      	blx	r7
 8012c9e:	3001      	adds	r0, #1
 8012ca0:	f43f af51 	beq.w	8012b46 <_printf_float+0xc2>
 8012ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	db02      	blt.n	8012cb2 <_printf_float+0x22e>
 8012cac:	6823      	ldr	r3, [r4, #0]
 8012cae:	07d8      	lsls	r0, r3, #31
 8012cb0:	d510      	bpl.n	8012cd4 <_printf_float+0x250>
 8012cb2:	ee18 3a10 	vmov	r3, s16
 8012cb6:	4652      	mov	r2, sl
 8012cb8:	4631      	mov	r1, r6
 8012cba:	4628      	mov	r0, r5
 8012cbc:	47b8      	blx	r7
 8012cbe:	3001      	adds	r0, #1
 8012cc0:	f43f af41 	beq.w	8012b46 <_printf_float+0xc2>
 8012cc4:	f04f 0800 	mov.w	r8, #0
 8012cc8:	f104 091a 	add.w	r9, r4, #26
 8012ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cce:	3b01      	subs	r3, #1
 8012cd0:	4543      	cmp	r3, r8
 8012cd2:	dc09      	bgt.n	8012ce8 <_printf_float+0x264>
 8012cd4:	6823      	ldr	r3, [r4, #0]
 8012cd6:	079b      	lsls	r3, r3, #30
 8012cd8:	f100 8105 	bmi.w	8012ee6 <_printf_float+0x462>
 8012cdc:	68e0      	ldr	r0, [r4, #12]
 8012cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ce0:	4298      	cmp	r0, r3
 8012ce2:	bfb8      	it	lt
 8012ce4:	4618      	movlt	r0, r3
 8012ce6:	e730      	b.n	8012b4a <_printf_float+0xc6>
 8012ce8:	2301      	movs	r3, #1
 8012cea:	464a      	mov	r2, r9
 8012cec:	4631      	mov	r1, r6
 8012cee:	4628      	mov	r0, r5
 8012cf0:	47b8      	blx	r7
 8012cf2:	3001      	adds	r0, #1
 8012cf4:	f43f af27 	beq.w	8012b46 <_printf_float+0xc2>
 8012cf8:	f108 0801 	add.w	r8, r8, #1
 8012cfc:	e7e6      	b.n	8012ccc <_printf_float+0x248>
 8012cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	dc39      	bgt.n	8012d78 <_printf_float+0x2f4>
 8012d04:	4a1b      	ldr	r2, [pc, #108]	; (8012d74 <_printf_float+0x2f0>)
 8012d06:	2301      	movs	r3, #1
 8012d08:	4631      	mov	r1, r6
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	47b8      	blx	r7
 8012d0e:	3001      	adds	r0, #1
 8012d10:	f43f af19 	beq.w	8012b46 <_printf_float+0xc2>
 8012d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012d18:	4313      	orrs	r3, r2
 8012d1a:	d102      	bne.n	8012d22 <_printf_float+0x29e>
 8012d1c:	6823      	ldr	r3, [r4, #0]
 8012d1e:	07d9      	lsls	r1, r3, #31
 8012d20:	d5d8      	bpl.n	8012cd4 <_printf_float+0x250>
 8012d22:	ee18 3a10 	vmov	r3, s16
 8012d26:	4652      	mov	r2, sl
 8012d28:	4631      	mov	r1, r6
 8012d2a:	4628      	mov	r0, r5
 8012d2c:	47b8      	blx	r7
 8012d2e:	3001      	adds	r0, #1
 8012d30:	f43f af09 	beq.w	8012b46 <_printf_float+0xc2>
 8012d34:	f04f 0900 	mov.w	r9, #0
 8012d38:	f104 0a1a 	add.w	sl, r4, #26
 8012d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d3e:	425b      	negs	r3, r3
 8012d40:	454b      	cmp	r3, r9
 8012d42:	dc01      	bgt.n	8012d48 <_printf_float+0x2c4>
 8012d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d46:	e792      	b.n	8012c6e <_printf_float+0x1ea>
 8012d48:	2301      	movs	r3, #1
 8012d4a:	4652      	mov	r2, sl
 8012d4c:	4631      	mov	r1, r6
 8012d4e:	4628      	mov	r0, r5
 8012d50:	47b8      	blx	r7
 8012d52:	3001      	adds	r0, #1
 8012d54:	f43f aef7 	beq.w	8012b46 <_printf_float+0xc2>
 8012d58:	f109 0901 	add.w	r9, r9, #1
 8012d5c:	e7ee      	b.n	8012d3c <_printf_float+0x2b8>
 8012d5e:	bf00      	nop
 8012d60:	7fefffff 	.word	0x7fefffff
 8012d64:	080164e4 	.word	0x080164e4
 8012d68:	080164e8 	.word	0x080164e8
 8012d6c:	080164f0 	.word	0x080164f0
 8012d70:	080164ec 	.word	0x080164ec
 8012d74:	080164f4 	.word	0x080164f4
 8012d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	bfa8      	it	ge
 8012d80:	461a      	movge	r2, r3
 8012d82:	2a00      	cmp	r2, #0
 8012d84:	4691      	mov	r9, r2
 8012d86:	dc37      	bgt.n	8012df8 <_printf_float+0x374>
 8012d88:	f04f 0b00 	mov.w	fp, #0
 8012d8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d90:	f104 021a 	add.w	r2, r4, #26
 8012d94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012d96:	9305      	str	r3, [sp, #20]
 8012d98:	eba3 0309 	sub.w	r3, r3, r9
 8012d9c:	455b      	cmp	r3, fp
 8012d9e:	dc33      	bgt.n	8012e08 <_printf_float+0x384>
 8012da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012da4:	429a      	cmp	r2, r3
 8012da6:	db3b      	blt.n	8012e20 <_printf_float+0x39c>
 8012da8:	6823      	ldr	r3, [r4, #0]
 8012daa:	07da      	lsls	r2, r3, #31
 8012dac:	d438      	bmi.n	8012e20 <_printf_float+0x39c>
 8012dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012db0:	9b05      	ldr	r3, [sp, #20]
 8012db2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012db4:	1ad3      	subs	r3, r2, r3
 8012db6:	eba2 0901 	sub.w	r9, r2, r1
 8012dba:	4599      	cmp	r9, r3
 8012dbc:	bfa8      	it	ge
 8012dbe:	4699      	movge	r9, r3
 8012dc0:	f1b9 0f00 	cmp.w	r9, #0
 8012dc4:	dc35      	bgt.n	8012e32 <_printf_float+0x3ae>
 8012dc6:	f04f 0800 	mov.w	r8, #0
 8012dca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012dce:	f104 0a1a 	add.w	sl, r4, #26
 8012dd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012dd6:	1a9b      	subs	r3, r3, r2
 8012dd8:	eba3 0309 	sub.w	r3, r3, r9
 8012ddc:	4543      	cmp	r3, r8
 8012dde:	f77f af79 	ble.w	8012cd4 <_printf_float+0x250>
 8012de2:	2301      	movs	r3, #1
 8012de4:	4652      	mov	r2, sl
 8012de6:	4631      	mov	r1, r6
 8012de8:	4628      	mov	r0, r5
 8012dea:	47b8      	blx	r7
 8012dec:	3001      	adds	r0, #1
 8012dee:	f43f aeaa 	beq.w	8012b46 <_printf_float+0xc2>
 8012df2:	f108 0801 	add.w	r8, r8, #1
 8012df6:	e7ec      	b.n	8012dd2 <_printf_float+0x34e>
 8012df8:	4613      	mov	r3, r2
 8012dfa:	4631      	mov	r1, r6
 8012dfc:	4642      	mov	r2, r8
 8012dfe:	4628      	mov	r0, r5
 8012e00:	47b8      	blx	r7
 8012e02:	3001      	adds	r0, #1
 8012e04:	d1c0      	bne.n	8012d88 <_printf_float+0x304>
 8012e06:	e69e      	b.n	8012b46 <_printf_float+0xc2>
 8012e08:	2301      	movs	r3, #1
 8012e0a:	4631      	mov	r1, r6
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	9205      	str	r2, [sp, #20]
 8012e10:	47b8      	blx	r7
 8012e12:	3001      	adds	r0, #1
 8012e14:	f43f ae97 	beq.w	8012b46 <_printf_float+0xc2>
 8012e18:	9a05      	ldr	r2, [sp, #20]
 8012e1a:	f10b 0b01 	add.w	fp, fp, #1
 8012e1e:	e7b9      	b.n	8012d94 <_printf_float+0x310>
 8012e20:	ee18 3a10 	vmov	r3, s16
 8012e24:	4652      	mov	r2, sl
 8012e26:	4631      	mov	r1, r6
 8012e28:	4628      	mov	r0, r5
 8012e2a:	47b8      	blx	r7
 8012e2c:	3001      	adds	r0, #1
 8012e2e:	d1be      	bne.n	8012dae <_printf_float+0x32a>
 8012e30:	e689      	b.n	8012b46 <_printf_float+0xc2>
 8012e32:	9a05      	ldr	r2, [sp, #20]
 8012e34:	464b      	mov	r3, r9
 8012e36:	4442      	add	r2, r8
 8012e38:	4631      	mov	r1, r6
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	47b8      	blx	r7
 8012e3e:	3001      	adds	r0, #1
 8012e40:	d1c1      	bne.n	8012dc6 <_printf_float+0x342>
 8012e42:	e680      	b.n	8012b46 <_printf_float+0xc2>
 8012e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e46:	2a01      	cmp	r2, #1
 8012e48:	dc01      	bgt.n	8012e4e <_printf_float+0x3ca>
 8012e4a:	07db      	lsls	r3, r3, #31
 8012e4c:	d538      	bpl.n	8012ec0 <_printf_float+0x43c>
 8012e4e:	2301      	movs	r3, #1
 8012e50:	4642      	mov	r2, r8
 8012e52:	4631      	mov	r1, r6
 8012e54:	4628      	mov	r0, r5
 8012e56:	47b8      	blx	r7
 8012e58:	3001      	adds	r0, #1
 8012e5a:	f43f ae74 	beq.w	8012b46 <_printf_float+0xc2>
 8012e5e:	ee18 3a10 	vmov	r3, s16
 8012e62:	4652      	mov	r2, sl
 8012e64:	4631      	mov	r1, r6
 8012e66:	4628      	mov	r0, r5
 8012e68:	47b8      	blx	r7
 8012e6a:	3001      	adds	r0, #1
 8012e6c:	f43f ae6b 	beq.w	8012b46 <_printf_float+0xc2>
 8012e70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012e74:	2200      	movs	r2, #0
 8012e76:	2300      	movs	r3, #0
 8012e78:	f7ed fe26 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e7c:	b9d8      	cbnz	r0, 8012eb6 <_printf_float+0x432>
 8012e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e80:	f108 0201 	add.w	r2, r8, #1
 8012e84:	3b01      	subs	r3, #1
 8012e86:	4631      	mov	r1, r6
 8012e88:	4628      	mov	r0, r5
 8012e8a:	47b8      	blx	r7
 8012e8c:	3001      	adds	r0, #1
 8012e8e:	d10e      	bne.n	8012eae <_printf_float+0x42a>
 8012e90:	e659      	b.n	8012b46 <_printf_float+0xc2>
 8012e92:	2301      	movs	r3, #1
 8012e94:	4652      	mov	r2, sl
 8012e96:	4631      	mov	r1, r6
 8012e98:	4628      	mov	r0, r5
 8012e9a:	47b8      	blx	r7
 8012e9c:	3001      	adds	r0, #1
 8012e9e:	f43f ae52 	beq.w	8012b46 <_printf_float+0xc2>
 8012ea2:	f108 0801 	add.w	r8, r8, #1
 8012ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ea8:	3b01      	subs	r3, #1
 8012eaa:	4543      	cmp	r3, r8
 8012eac:	dcf1      	bgt.n	8012e92 <_printf_float+0x40e>
 8012eae:	464b      	mov	r3, r9
 8012eb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012eb4:	e6dc      	b.n	8012c70 <_printf_float+0x1ec>
 8012eb6:	f04f 0800 	mov.w	r8, #0
 8012eba:	f104 0a1a 	add.w	sl, r4, #26
 8012ebe:	e7f2      	b.n	8012ea6 <_printf_float+0x422>
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	4642      	mov	r2, r8
 8012ec4:	e7df      	b.n	8012e86 <_printf_float+0x402>
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	464a      	mov	r2, r9
 8012eca:	4631      	mov	r1, r6
 8012ecc:	4628      	mov	r0, r5
 8012ece:	47b8      	blx	r7
 8012ed0:	3001      	adds	r0, #1
 8012ed2:	f43f ae38 	beq.w	8012b46 <_printf_float+0xc2>
 8012ed6:	f108 0801 	add.w	r8, r8, #1
 8012eda:	68e3      	ldr	r3, [r4, #12]
 8012edc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012ede:	1a5b      	subs	r3, r3, r1
 8012ee0:	4543      	cmp	r3, r8
 8012ee2:	dcf0      	bgt.n	8012ec6 <_printf_float+0x442>
 8012ee4:	e6fa      	b.n	8012cdc <_printf_float+0x258>
 8012ee6:	f04f 0800 	mov.w	r8, #0
 8012eea:	f104 0919 	add.w	r9, r4, #25
 8012eee:	e7f4      	b.n	8012eda <_printf_float+0x456>

08012ef0 <_printf_common>:
 8012ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ef4:	4616      	mov	r6, r2
 8012ef6:	4699      	mov	r9, r3
 8012ef8:	688a      	ldr	r2, [r1, #8]
 8012efa:	690b      	ldr	r3, [r1, #16]
 8012efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f00:	4293      	cmp	r3, r2
 8012f02:	bfb8      	it	lt
 8012f04:	4613      	movlt	r3, r2
 8012f06:	6033      	str	r3, [r6, #0]
 8012f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f0c:	4607      	mov	r7, r0
 8012f0e:	460c      	mov	r4, r1
 8012f10:	b10a      	cbz	r2, 8012f16 <_printf_common+0x26>
 8012f12:	3301      	adds	r3, #1
 8012f14:	6033      	str	r3, [r6, #0]
 8012f16:	6823      	ldr	r3, [r4, #0]
 8012f18:	0699      	lsls	r1, r3, #26
 8012f1a:	bf42      	ittt	mi
 8012f1c:	6833      	ldrmi	r3, [r6, #0]
 8012f1e:	3302      	addmi	r3, #2
 8012f20:	6033      	strmi	r3, [r6, #0]
 8012f22:	6825      	ldr	r5, [r4, #0]
 8012f24:	f015 0506 	ands.w	r5, r5, #6
 8012f28:	d106      	bne.n	8012f38 <_printf_common+0x48>
 8012f2a:	f104 0a19 	add.w	sl, r4, #25
 8012f2e:	68e3      	ldr	r3, [r4, #12]
 8012f30:	6832      	ldr	r2, [r6, #0]
 8012f32:	1a9b      	subs	r3, r3, r2
 8012f34:	42ab      	cmp	r3, r5
 8012f36:	dc26      	bgt.n	8012f86 <_printf_common+0x96>
 8012f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012f3c:	1e13      	subs	r3, r2, #0
 8012f3e:	6822      	ldr	r2, [r4, #0]
 8012f40:	bf18      	it	ne
 8012f42:	2301      	movne	r3, #1
 8012f44:	0692      	lsls	r2, r2, #26
 8012f46:	d42b      	bmi.n	8012fa0 <_printf_common+0xb0>
 8012f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f4c:	4649      	mov	r1, r9
 8012f4e:	4638      	mov	r0, r7
 8012f50:	47c0      	blx	r8
 8012f52:	3001      	adds	r0, #1
 8012f54:	d01e      	beq.n	8012f94 <_printf_common+0xa4>
 8012f56:	6823      	ldr	r3, [r4, #0]
 8012f58:	68e5      	ldr	r5, [r4, #12]
 8012f5a:	6832      	ldr	r2, [r6, #0]
 8012f5c:	f003 0306 	and.w	r3, r3, #6
 8012f60:	2b04      	cmp	r3, #4
 8012f62:	bf08      	it	eq
 8012f64:	1aad      	subeq	r5, r5, r2
 8012f66:	68a3      	ldr	r3, [r4, #8]
 8012f68:	6922      	ldr	r2, [r4, #16]
 8012f6a:	bf0c      	ite	eq
 8012f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f70:	2500      	movne	r5, #0
 8012f72:	4293      	cmp	r3, r2
 8012f74:	bfc4      	itt	gt
 8012f76:	1a9b      	subgt	r3, r3, r2
 8012f78:	18ed      	addgt	r5, r5, r3
 8012f7a:	2600      	movs	r6, #0
 8012f7c:	341a      	adds	r4, #26
 8012f7e:	42b5      	cmp	r5, r6
 8012f80:	d11a      	bne.n	8012fb8 <_printf_common+0xc8>
 8012f82:	2000      	movs	r0, #0
 8012f84:	e008      	b.n	8012f98 <_printf_common+0xa8>
 8012f86:	2301      	movs	r3, #1
 8012f88:	4652      	mov	r2, sl
 8012f8a:	4649      	mov	r1, r9
 8012f8c:	4638      	mov	r0, r7
 8012f8e:	47c0      	blx	r8
 8012f90:	3001      	adds	r0, #1
 8012f92:	d103      	bne.n	8012f9c <_printf_common+0xac>
 8012f94:	f04f 30ff 	mov.w	r0, #4294967295
 8012f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f9c:	3501      	adds	r5, #1
 8012f9e:	e7c6      	b.n	8012f2e <_printf_common+0x3e>
 8012fa0:	18e1      	adds	r1, r4, r3
 8012fa2:	1c5a      	adds	r2, r3, #1
 8012fa4:	2030      	movs	r0, #48	; 0x30
 8012fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012faa:	4422      	add	r2, r4
 8012fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012fb4:	3302      	adds	r3, #2
 8012fb6:	e7c7      	b.n	8012f48 <_printf_common+0x58>
 8012fb8:	2301      	movs	r3, #1
 8012fba:	4622      	mov	r2, r4
 8012fbc:	4649      	mov	r1, r9
 8012fbe:	4638      	mov	r0, r7
 8012fc0:	47c0      	blx	r8
 8012fc2:	3001      	adds	r0, #1
 8012fc4:	d0e6      	beq.n	8012f94 <_printf_common+0xa4>
 8012fc6:	3601      	adds	r6, #1
 8012fc8:	e7d9      	b.n	8012f7e <_printf_common+0x8e>
	...

08012fcc <_printf_i>:
 8012fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012fd0:	460c      	mov	r4, r1
 8012fd2:	4691      	mov	r9, r2
 8012fd4:	7e27      	ldrb	r7, [r4, #24]
 8012fd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012fd8:	2f78      	cmp	r7, #120	; 0x78
 8012fda:	4680      	mov	r8, r0
 8012fdc:	469a      	mov	sl, r3
 8012fde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012fe2:	d807      	bhi.n	8012ff4 <_printf_i+0x28>
 8012fe4:	2f62      	cmp	r7, #98	; 0x62
 8012fe6:	d80a      	bhi.n	8012ffe <_printf_i+0x32>
 8012fe8:	2f00      	cmp	r7, #0
 8012fea:	f000 80d8 	beq.w	801319e <_printf_i+0x1d2>
 8012fee:	2f58      	cmp	r7, #88	; 0x58
 8012ff0:	f000 80a3 	beq.w	801313a <_printf_i+0x16e>
 8012ff4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012ffc:	e03a      	b.n	8013074 <_printf_i+0xa8>
 8012ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013002:	2b15      	cmp	r3, #21
 8013004:	d8f6      	bhi.n	8012ff4 <_printf_i+0x28>
 8013006:	a001      	add	r0, pc, #4	; (adr r0, 801300c <_printf_i+0x40>)
 8013008:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801300c:	08013065 	.word	0x08013065
 8013010:	08013079 	.word	0x08013079
 8013014:	08012ff5 	.word	0x08012ff5
 8013018:	08012ff5 	.word	0x08012ff5
 801301c:	08012ff5 	.word	0x08012ff5
 8013020:	08012ff5 	.word	0x08012ff5
 8013024:	08013079 	.word	0x08013079
 8013028:	08012ff5 	.word	0x08012ff5
 801302c:	08012ff5 	.word	0x08012ff5
 8013030:	08012ff5 	.word	0x08012ff5
 8013034:	08012ff5 	.word	0x08012ff5
 8013038:	08013185 	.word	0x08013185
 801303c:	080130a9 	.word	0x080130a9
 8013040:	08013167 	.word	0x08013167
 8013044:	08012ff5 	.word	0x08012ff5
 8013048:	08012ff5 	.word	0x08012ff5
 801304c:	080131a7 	.word	0x080131a7
 8013050:	08012ff5 	.word	0x08012ff5
 8013054:	080130a9 	.word	0x080130a9
 8013058:	08012ff5 	.word	0x08012ff5
 801305c:	08012ff5 	.word	0x08012ff5
 8013060:	0801316f 	.word	0x0801316f
 8013064:	680b      	ldr	r3, [r1, #0]
 8013066:	1d1a      	adds	r2, r3, #4
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	600a      	str	r2, [r1, #0]
 801306c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013074:	2301      	movs	r3, #1
 8013076:	e0a3      	b.n	80131c0 <_printf_i+0x1f4>
 8013078:	6825      	ldr	r5, [r4, #0]
 801307a:	6808      	ldr	r0, [r1, #0]
 801307c:	062e      	lsls	r6, r5, #24
 801307e:	f100 0304 	add.w	r3, r0, #4
 8013082:	d50a      	bpl.n	801309a <_printf_i+0xce>
 8013084:	6805      	ldr	r5, [r0, #0]
 8013086:	600b      	str	r3, [r1, #0]
 8013088:	2d00      	cmp	r5, #0
 801308a:	da03      	bge.n	8013094 <_printf_i+0xc8>
 801308c:	232d      	movs	r3, #45	; 0x2d
 801308e:	426d      	negs	r5, r5
 8013090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013094:	485e      	ldr	r0, [pc, #376]	; (8013210 <_printf_i+0x244>)
 8013096:	230a      	movs	r3, #10
 8013098:	e019      	b.n	80130ce <_printf_i+0x102>
 801309a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801309e:	6805      	ldr	r5, [r0, #0]
 80130a0:	600b      	str	r3, [r1, #0]
 80130a2:	bf18      	it	ne
 80130a4:	b22d      	sxthne	r5, r5
 80130a6:	e7ef      	b.n	8013088 <_printf_i+0xbc>
 80130a8:	680b      	ldr	r3, [r1, #0]
 80130aa:	6825      	ldr	r5, [r4, #0]
 80130ac:	1d18      	adds	r0, r3, #4
 80130ae:	6008      	str	r0, [r1, #0]
 80130b0:	0628      	lsls	r0, r5, #24
 80130b2:	d501      	bpl.n	80130b8 <_printf_i+0xec>
 80130b4:	681d      	ldr	r5, [r3, #0]
 80130b6:	e002      	b.n	80130be <_printf_i+0xf2>
 80130b8:	0669      	lsls	r1, r5, #25
 80130ba:	d5fb      	bpl.n	80130b4 <_printf_i+0xe8>
 80130bc:	881d      	ldrh	r5, [r3, #0]
 80130be:	4854      	ldr	r0, [pc, #336]	; (8013210 <_printf_i+0x244>)
 80130c0:	2f6f      	cmp	r7, #111	; 0x6f
 80130c2:	bf0c      	ite	eq
 80130c4:	2308      	moveq	r3, #8
 80130c6:	230a      	movne	r3, #10
 80130c8:	2100      	movs	r1, #0
 80130ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80130ce:	6866      	ldr	r6, [r4, #4]
 80130d0:	60a6      	str	r6, [r4, #8]
 80130d2:	2e00      	cmp	r6, #0
 80130d4:	bfa2      	ittt	ge
 80130d6:	6821      	ldrge	r1, [r4, #0]
 80130d8:	f021 0104 	bicge.w	r1, r1, #4
 80130dc:	6021      	strge	r1, [r4, #0]
 80130de:	b90d      	cbnz	r5, 80130e4 <_printf_i+0x118>
 80130e0:	2e00      	cmp	r6, #0
 80130e2:	d04d      	beq.n	8013180 <_printf_i+0x1b4>
 80130e4:	4616      	mov	r6, r2
 80130e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80130ea:	fb03 5711 	mls	r7, r3, r1, r5
 80130ee:	5dc7      	ldrb	r7, [r0, r7]
 80130f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80130f4:	462f      	mov	r7, r5
 80130f6:	42bb      	cmp	r3, r7
 80130f8:	460d      	mov	r5, r1
 80130fa:	d9f4      	bls.n	80130e6 <_printf_i+0x11a>
 80130fc:	2b08      	cmp	r3, #8
 80130fe:	d10b      	bne.n	8013118 <_printf_i+0x14c>
 8013100:	6823      	ldr	r3, [r4, #0]
 8013102:	07df      	lsls	r7, r3, #31
 8013104:	d508      	bpl.n	8013118 <_printf_i+0x14c>
 8013106:	6923      	ldr	r3, [r4, #16]
 8013108:	6861      	ldr	r1, [r4, #4]
 801310a:	4299      	cmp	r1, r3
 801310c:	bfde      	ittt	le
 801310e:	2330      	movle	r3, #48	; 0x30
 8013110:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013114:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013118:	1b92      	subs	r2, r2, r6
 801311a:	6122      	str	r2, [r4, #16]
 801311c:	f8cd a000 	str.w	sl, [sp]
 8013120:	464b      	mov	r3, r9
 8013122:	aa03      	add	r2, sp, #12
 8013124:	4621      	mov	r1, r4
 8013126:	4640      	mov	r0, r8
 8013128:	f7ff fee2 	bl	8012ef0 <_printf_common>
 801312c:	3001      	adds	r0, #1
 801312e:	d14c      	bne.n	80131ca <_printf_i+0x1fe>
 8013130:	f04f 30ff 	mov.w	r0, #4294967295
 8013134:	b004      	add	sp, #16
 8013136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801313a:	4835      	ldr	r0, [pc, #212]	; (8013210 <_printf_i+0x244>)
 801313c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013140:	6823      	ldr	r3, [r4, #0]
 8013142:	680e      	ldr	r6, [r1, #0]
 8013144:	061f      	lsls	r7, r3, #24
 8013146:	f856 5b04 	ldr.w	r5, [r6], #4
 801314a:	600e      	str	r6, [r1, #0]
 801314c:	d514      	bpl.n	8013178 <_printf_i+0x1ac>
 801314e:	07d9      	lsls	r1, r3, #31
 8013150:	bf44      	itt	mi
 8013152:	f043 0320 	orrmi.w	r3, r3, #32
 8013156:	6023      	strmi	r3, [r4, #0]
 8013158:	b91d      	cbnz	r5, 8013162 <_printf_i+0x196>
 801315a:	6823      	ldr	r3, [r4, #0]
 801315c:	f023 0320 	bic.w	r3, r3, #32
 8013160:	6023      	str	r3, [r4, #0]
 8013162:	2310      	movs	r3, #16
 8013164:	e7b0      	b.n	80130c8 <_printf_i+0xfc>
 8013166:	6823      	ldr	r3, [r4, #0]
 8013168:	f043 0320 	orr.w	r3, r3, #32
 801316c:	6023      	str	r3, [r4, #0]
 801316e:	2378      	movs	r3, #120	; 0x78
 8013170:	4828      	ldr	r0, [pc, #160]	; (8013214 <_printf_i+0x248>)
 8013172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013176:	e7e3      	b.n	8013140 <_printf_i+0x174>
 8013178:	065e      	lsls	r6, r3, #25
 801317a:	bf48      	it	mi
 801317c:	b2ad      	uxthmi	r5, r5
 801317e:	e7e6      	b.n	801314e <_printf_i+0x182>
 8013180:	4616      	mov	r6, r2
 8013182:	e7bb      	b.n	80130fc <_printf_i+0x130>
 8013184:	680b      	ldr	r3, [r1, #0]
 8013186:	6826      	ldr	r6, [r4, #0]
 8013188:	6960      	ldr	r0, [r4, #20]
 801318a:	1d1d      	adds	r5, r3, #4
 801318c:	600d      	str	r5, [r1, #0]
 801318e:	0635      	lsls	r5, r6, #24
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	d501      	bpl.n	8013198 <_printf_i+0x1cc>
 8013194:	6018      	str	r0, [r3, #0]
 8013196:	e002      	b.n	801319e <_printf_i+0x1d2>
 8013198:	0671      	lsls	r1, r6, #25
 801319a:	d5fb      	bpl.n	8013194 <_printf_i+0x1c8>
 801319c:	8018      	strh	r0, [r3, #0]
 801319e:	2300      	movs	r3, #0
 80131a0:	6123      	str	r3, [r4, #16]
 80131a2:	4616      	mov	r6, r2
 80131a4:	e7ba      	b.n	801311c <_printf_i+0x150>
 80131a6:	680b      	ldr	r3, [r1, #0]
 80131a8:	1d1a      	adds	r2, r3, #4
 80131aa:	600a      	str	r2, [r1, #0]
 80131ac:	681e      	ldr	r6, [r3, #0]
 80131ae:	6862      	ldr	r2, [r4, #4]
 80131b0:	2100      	movs	r1, #0
 80131b2:	4630      	mov	r0, r6
 80131b4:	f7ed f814 	bl	80001e0 <memchr>
 80131b8:	b108      	cbz	r0, 80131be <_printf_i+0x1f2>
 80131ba:	1b80      	subs	r0, r0, r6
 80131bc:	6060      	str	r0, [r4, #4]
 80131be:	6863      	ldr	r3, [r4, #4]
 80131c0:	6123      	str	r3, [r4, #16]
 80131c2:	2300      	movs	r3, #0
 80131c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131c8:	e7a8      	b.n	801311c <_printf_i+0x150>
 80131ca:	6923      	ldr	r3, [r4, #16]
 80131cc:	4632      	mov	r2, r6
 80131ce:	4649      	mov	r1, r9
 80131d0:	4640      	mov	r0, r8
 80131d2:	47d0      	blx	sl
 80131d4:	3001      	adds	r0, #1
 80131d6:	d0ab      	beq.n	8013130 <_printf_i+0x164>
 80131d8:	6823      	ldr	r3, [r4, #0]
 80131da:	079b      	lsls	r3, r3, #30
 80131dc:	d413      	bmi.n	8013206 <_printf_i+0x23a>
 80131de:	68e0      	ldr	r0, [r4, #12]
 80131e0:	9b03      	ldr	r3, [sp, #12]
 80131e2:	4298      	cmp	r0, r3
 80131e4:	bfb8      	it	lt
 80131e6:	4618      	movlt	r0, r3
 80131e8:	e7a4      	b.n	8013134 <_printf_i+0x168>
 80131ea:	2301      	movs	r3, #1
 80131ec:	4632      	mov	r2, r6
 80131ee:	4649      	mov	r1, r9
 80131f0:	4640      	mov	r0, r8
 80131f2:	47d0      	blx	sl
 80131f4:	3001      	adds	r0, #1
 80131f6:	d09b      	beq.n	8013130 <_printf_i+0x164>
 80131f8:	3501      	adds	r5, #1
 80131fa:	68e3      	ldr	r3, [r4, #12]
 80131fc:	9903      	ldr	r1, [sp, #12]
 80131fe:	1a5b      	subs	r3, r3, r1
 8013200:	42ab      	cmp	r3, r5
 8013202:	dcf2      	bgt.n	80131ea <_printf_i+0x21e>
 8013204:	e7eb      	b.n	80131de <_printf_i+0x212>
 8013206:	2500      	movs	r5, #0
 8013208:	f104 0619 	add.w	r6, r4, #25
 801320c:	e7f5      	b.n	80131fa <_printf_i+0x22e>
 801320e:	bf00      	nop
 8013210:	080164f6 	.word	0x080164f6
 8013214:	08016507 	.word	0x08016507

08013218 <_puts_r>:
 8013218:	b570      	push	{r4, r5, r6, lr}
 801321a:	460e      	mov	r6, r1
 801321c:	4605      	mov	r5, r0
 801321e:	b118      	cbz	r0, 8013228 <_puts_r+0x10>
 8013220:	6983      	ldr	r3, [r0, #24]
 8013222:	b90b      	cbnz	r3, 8013228 <_puts_r+0x10>
 8013224:	f7ff fa58 	bl	80126d8 <__sinit>
 8013228:	69ab      	ldr	r3, [r5, #24]
 801322a:	68ac      	ldr	r4, [r5, #8]
 801322c:	b913      	cbnz	r3, 8013234 <_puts_r+0x1c>
 801322e:	4628      	mov	r0, r5
 8013230:	f7ff fa52 	bl	80126d8 <__sinit>
 8013234:	4b2c      	ldr	r3, [pc, #176]	; (80132e8 <_puts_r+0xd0>)
 8013236:	429c      	cmp	r4, r3
 8013238:	d120      	bne.n	801327c <_puts_r+0x64>
 801323a:	686c      	ldr	r4, [r5, #4]
 801323c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801323e:	07db      	lsls	r3, r3, #31
 8013240:	d405      	bmi.n	801324e <_puts_r+0x36>
 8013242:	89a3      	ldrh	r3, [r4, #12]
 8013244:	0598      	lsls	r0, r3, #22
 8013246:	d402      	bmi.n	801324e <_puts_r+0x36>
 8013248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801324a:	f7ff fb08 	bl	801285e <__retarget_lock_acquire_recursive>
 801324e:	89a3      	ldrh	r3, [r4, #12]
 8013250:	0719      	lsls	r1, r3, #28
 8013252:	d51d      	bpl.n	8013290 <_puts_r+0x78>
 8013254:	6923      	ldr	r3, [r4, #16]
 8013256:	b1db      	cbz	r3, 8013290 <_puts_r+0x78>
 8013258:	3e01      	subs	r6, #1
 801325a:	68a3      	ldr	r3, [r4, #8]
 801325c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013260:	3b01      	subs	r3, #1
 8013262:	60a3      	str	r3, [r4, #8]
 8013264:	bb39      	cbnz	r1, 80132b6 <_puts_r+0x9e>
 8013266:	2b00      	cmp	r3, #0
 8013268:	da38      	bge.n	80132dc <_puts_r+0xc4>
 801326a:	4622      	mov	r2, r4
 801326c:	210a      	movs	r1, #10
 801326e:	4628      	mov	r0, r5
 8013270:	f000 f942 	bl	80134f8 <__swbuf_r>
 8013274:	3001      	adds	r0, #1
 8013276:	d011      	beq.n	801329c <_puts_r+0x84>
 8013278:	250a      	movs	r5, #10
 801327a:	e011      	b.n	80132a0 <_puts_r+0x88>
 801327c:	4b1b      	ldr	r3, [pc, #108]	; (80132ec <_puts_r+0xd4>)
 801327e:	429c      	cmp	r4, r3
 8013280:	d101      	bne.n	8013286 <_puts_r+0x6e>
 8013282:	68ac      	ldr	r4, [r5, #8]
 8013284:	e7da      	b.n	801323c <_puts_r+0x24>
 8013286:	4b1a      	ldr	r3, [pc, #104]	; (80132f0 <_puts_r+0xd8>)
 8013288:	429c      	cmp	r4, r3
 801328a:	bf08      	it	eq
 801328c:	68ec      	ldreq	r4, [r5, #12]
 801328e:	e7d5      	b.n	801323c <_puts_r+0x24>
 8013290:	4621      	mov	r1, r4
 8013292:	4628      	mov	r0, r5
 8013294:	f000 f994 	bl	80135c0 <__swsetup_r>
 8013298:	2800      	cmp	r0, #0
 801329a:	d0dd      	beq.n	8013258 <_puts_r+0x40>
 801329c:	f04f 35ff 	mov.w	r5, #4294967295
 80132a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132a2:	07da      	lsls	r2, r3, #31
 80132a4:	d405      	bmi.n	80132b2 <_puts_r+0x9a>
 80132a6:	89a3      	ldrh	r3, [r4, #12]
 80132a8:	059b      	lsls	r3, r3, #22
 80132aa:	d402      	bmi.n	80132b2 <_puts_r+0x9a>
 80132ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132ae:	f7ff fad7 	bl	8012860 <__retarget_lock_release_recursive>
 80132b2:	4628      	mov	r0, r5
 80132b4:	bd70      	pop	{r4, r5, r6, pc}
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	da04      	bge.n	80132c4 <_puts_r+0xac>
 80132ba:	69a2      	ldr	r2, [r4, #24]
 80132bc:	429a      	cmp	r2, r3
 80132be:	dc06      	bgt.n	80132ce <_puts_r+0xb6>
 80132c0:	290a      	cmp	r1, #10
 80132c2:	d004      	beq.n	80132ce <_puts_r+0xb6>
 80132c4:	6823      	ldr	r3, [r4, #0]
 80132c6:	1c5a      	adds	r2, r3, #1
 80132c8:	6022      	str	r2, [r4, #0]
 80132ca:	7019      	strb	r1, [r3, #0]
 80132cc:	e7c5      	b.n	801325a <_puts_r+0x42>
 80132ce:	4622      	mov	r2, r4
 80132d0:	4628      	mov	r0, r5
 80132d2:	f000 f911 	bl	80134f8 <__swbuf_r>
 80132d6:	3001      	adds	r0, #1
 80132d8:	d1bf      	bne.n	801325a <_puts_r+0x42>
 80132da:	e7df      	b.n	801329c <_puts_r+0x84>
 80132dc:	6823      	ldr	r3, [r4, #0]
 80132de:	250a      	movs	r5, #10
 80132e0:	1c5a      	adds	r2, r3, #1
 80132e2:	6022      	str	r2, [r4, #0]
 80132e4:	701d      	strb	r5, [r3, #0]
 80132e6:	e7db      	b.n	80132a0 <_puts_r+0x88>
 80132e8:	080164a0 	.word	0x080164a0
 80132ec:	080164c0 	.word	0x080164c0
 80132f0:	08016480 	.word	0x08016480

080132f4 <puts>:
 80132f4:	4b02      	ldr	r3, [pc, #8]	; (8013300 <puts+0xc>)
 80132f6:	4601      	mov	r1, r0
 80132f8:	6818      	ldr	r0, [r3, #0]
 80132fa:	f7ff bf8d 	b.w	8013218 <_puts_r>
 80132fe:	bf00      	nop
 8013300:	20000510 	.word	0x20000510

08013304 <cleanup_glue>:
 8013304:	b538      	push	{r3, r4, r5, lr}
 8013306:	460c      	mov	r4, r1
 8013308:	6809      	ldr	r1, [r1, #0]
 801330a:	4605      	mov	r5, r0
 801330c:	b109      	cbz	r1, 8013312 <cleanup_glue+0xe>
 801330e:	f7ff fff9 	bl	8013304 <cleanup_glue>
 8013312:	4621      	mov	r1, r4
 8013314:	4628      	mov	r0, r5
 8013316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801331a:	f001 bd27 	b.w	8014d6c <_free_r>
	...

08013320 <_reclaim_reent>:
 8013320:	4b2c      	ldr	r3, [pc, #176]	; (80133d4 <_reclaim_reent+0xb4>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4283      	cmp	r3, r0
 8013326:	b570      	push	{r4, r5, r6, lr}
 8013328:	4604      	mov	r4, r0
 801332a:	d051      	beq.n	80133d0 <_reclaim_reent+0xb0>
 801332c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801332e:	b143      	cbz	r3, 8013342 <_reclaim_reent+0x22>
 8013330:	68db      	ldr	r3, [r3, #12]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d14a      	bne.n	80133cc <_reclaim_reent+0xac>
 8013336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013338:	6819      	ldr	r1, [r3, #0]
 801333a:	b111      	cbz	r1, 8013342 <_reclaim_reent+0x22>
 801333c:	4620      	mov	r0, r4
 801333e:	f001 fd15 	bl	8014d6c <_free_r>
 8013342:	6961      	ldr	r1, [r4, #20]
 8013344:	b111      	cbz	r1, 801334c <_reclaim_reent+0x2c>
 8013346:	4620      	mov	r0, r4
 8013348:	f001 fd10 	bl	8014d6c <_free_r>
 801334c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801334e:	b111      	cbz	r1, 8013356 <_reclaim_reent+0x36>
 8013350:	4620      	mov	r0, r4
 8013352:	f001 fd0b 	bl	8014d6c <_free_r>
 8013356:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013358:	b111      	cbz	r1, 8013360 <_reclaim_reent+0x40>
 801335a:	4620      	mov	r0, r4
 801335c:	f001 fd06 	bl	8014d6c <_free_r>
 8013360:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013362:	b111      	cbz	r1, 801336a <_reclaim_reent+0x4a>
 8013364:	4620      	mov	r0, r4
 8013366:	f001 fd01 	bl	8014d6c <_free_r>
 801336a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801336c:	b111      	cbz	r1, 8013374 <_reclaim_reent+0x54>
 801336e:	4620      	mov	r0, r4
 8013370:	f001 fcfc 	bl	8014d6c <_free_r>
 8013374:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013376:	b111      	cbz	r1, 801337e <_reclaim_reent+0x5e>
 8013378:	4620      	mov	r0, r4
 801337a:	f001 fcf7 	bl	8014d6c <_free_r>
 801337e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013380:	b111      	cbz	r1, 8013388 <_reclaim_reent+0x68>
 8013382:	4620      	mov	r0, r4
 8013384:	f001 fcf2 	bl	8014d6c <_free_r>
 8013388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801338a:	b111      	cbz	r1, 8013392 <_reclaim_reent+0x72>
 801338c:	4620      	mov	r0, r4
 801338e:	f001 fced 	bl	8014d6c <_free_r>
 8013392:	69a3      	ldr	r3, [r4, #24]
 8013394:	b1e3      	cbz	r3, 80133d0 <_reclaim_reent+0xb0>
 8013396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013398:	4620      	mov	r0, r4
 801339a:	4798      	blx	r3
 801339c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801339e:	b1b9      	cbz	r1, 80133d0 <_reclaim_reent+0xb0>
 80133a0:	4620      	mov	r0, r4
 80133a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133a6:	f7ff bfad 	b.w	8013304 <cleanup_glue>
 80133aa:	5949      	ldr	r1, [r1, r5]
 80133ac:	b941      	cbnz	r1, 80133c0 <_reclaim_reent+0xa0>
 80133ae:	3504      	adds	r5, #4
 80133b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133b2:	2d80      	cmp	r5, #128	; 0x80
 80133b4:	68d9      	ldr	r1, [r3, #12]
 80133b6:	d1f8      	bne.n	80133aa <_reclaim_reent+0x8a>
 80133b8:	4620      	mov	r0, r4
 80133ba:	f001 fcd7 	bl	8014d6c <_free_r>
 80133be:	e7ba      	b.n	8013336 <_reclaim_reent+0x16>
 80133c0:	680e      	ldr	r6, [r1, #0]
 80133c2:	4620      	mov	r0, r4
 80133c4:	f001 fcd2 	bl	8014d6c <_free_r>
 80133c8:	4631      	mov	r1, r6
 80133ca:	e7ef      	b.n	80133ac <_reclaim_reent+0x8c>
 80133cc:	2500      	movs	r5, #0
 80133ce:	e7ef      	b.n	80133b0 <_reclaim_reent+0x90>
 80133d0:	bd70      	pop	{r4, r5, r6, pc}
 80133d2:	bf00      	nop
 80133d4:	20000510 	.word	0x20000510

080133d8 <_sbrk_r>:
 80133d8:	b538      	push	{r3, r4, r5, lr}
 80133da:	4d06      	ldr	r5, [pc, #24]	; (80133f4 <_sbrk_r+0x1c>)
 80133dc:	2300      	movs	r3, #0
 80133de:	4604      	mov	r4, r0
 80133e0:	4608      	mov	r0, r1
 80133e2:	602b      	str	r3, [r5, #0]
 80133e4:	f7ee ff1c 	bl	8002220 <_sbrk>
 80133e8:	1c43      	adds	r3, r0, #1
 80133ea:	d102      	bne.n	80133f2 <_sbrk_r+0x1a>
 80133ec:	682b      	ldr	r3, [r5, #0]
 80133ee:	b103      	cbz	r3, 80133f2 <_sbrk_r+0x1a>
 80133f0:	6023      	str	r3, [r4, #0]
 80133f2:	bd38      	pop	{r3, r4, r5, pc}
 80133f4:	20010b2c 	.word	0x20010b2c

080133f8 <sniprintf>:
 80133f8:	b40c      	push	{r2, r3}
 80133fa:	b530      	push	{r4, r5, lr}
 80133fc:	4b17      	ldr	r3, [pc, #92]	; (801345c <sniprintf+0x64>)
 80133fe:	1e0c      	subs	r4, r1, #0
 8013400:	681d      	ldr	r5, [r3, #0]
 8013402:	b09d      	sub	sp, #116	; 0x74
 8013404:	da08      	bge.n	8013418 <sniprintf+0x20>
 8013406:	238b      	movs	r3, #139	; 0x8b
 8013408:	602b      	str	r3, [r5, #0]
 801340a:	f04f 30ff 	mov.w	r0, #4294967295
 801340e:	b01d      	add	sp, #116	; 0x74
 8013410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013414:	b002      	add	sp, #8
 8013416:	4770      	bx	lr
 8013418:	f44f 7302 	mov.w	r3, #520	; 0x208
 801341c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013420:	bf14      	ite	ne
 8013422:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013426:	4623      	moveq	r3, r4
 8013428:	9304      	str	r3, [sp, #16]
 801342a:	9307      	str	r3, [sp, #28]
 801342c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013430:	9002      	str	r0, [sp, #8]
 8013432:	9006      	str	r0, [sp, #24]
 8013434:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013438:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801343a:	ab21      	add	r3, sp, #132	; 0x84
 801343c:	a902      	add	r1, sp, #8
 801343e:	4628      	mov	r0, r5
 8013440:	9301      	str	r3, [sp, #4]
 8013442:	f001 fd3f 	bl	8014ec4 <_svfiprintf_r>
 8013446:	1c43      	adds	r3, r0, #1
 8013448:	bfbc      	itt	lt
 801344a:	238b      	movlt	r3, #139	; 0x8b
 801344c:	602b      	strlt	r3, [r5, #0]
 801344e:	2c00      	cmp	r4, #0
 8013450:	d0dd      	beq.n	801340e <sniprintf+0x16>
 8013452:	9b02      	ldr	r3, [sp, #8]
 8013454:	2200      	movs	r2, #0
 8013456:	701a      	strb	r2, [r3, #0]
 8013458:	e7d9      	b.n	801340e <sniprintf+0x16>
 801345a:	bf00      	nop
 801345c:	20000510 	.word	0x20000510

08013460 <__sread>:
 8013460:	b510      	push	{r4, lr}
 8013462:	460c      	mov	r4, r1
 8013464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013468:	f001 fe2c 	bl	80150c4 <_read_r>
 801346c:	2800      	cmp	r0, #0
 801346e:	bfab      	itete	ge
 8013470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013472:	89a3      	ldrhlt	r3, [r4, #12]
 8013474:	181b      	addge	r3, r3, r0
 8013476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801347a:	bfac      	ite	ge
 801347c:	6563      	strge	r3, [r4, #84]	; 0x54
 801347e:	81a3      	strhlt	r3, [r4, #12]
 8013480:	bd10      	pop	{r4, pc}

08013482 <__swrite>:
 8013482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013486:	461f      	mov	r7, r3
 8013488:	898b      	ldrh	r3, [r1, #12]
 801348a:	05db      	lsls	r3, r3, #23
 801348c:	4605      	mov	r5, r0
 801348e:	460c      	mov	r4, r1
 8013490:	4616      	mov	r6, r2
 8013492:	d505      	bpl.n	80134a0 <__swrite+0x1e>
 8013494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013498:	2302      	movs	r3, #2
 801349a:	2200      	movs	r2, #0
 801349c:	f001 f84e 	bl	801453c <_lseek_r>
 80134a0:	89a3      	ldrh	r3, [r4, #12]
 80134a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80134aa:	81a3      	strh	r3, [r4, #12]
 80134ac:	4632      	mov	r2, r6
 80134ae:	463b      	mov	r3, r7
 80134b0:	4628      	mov	r0, r5
 80134b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134b6:	f000 b871 	b.w	801359c <_write_r>

080134ba <__sseek>:
 80134ba:	b510      	push	{r4, lr}
 80134bc:	460c      	mov	r4, r1
 80134be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134c2:	f001 f83b 	bl	801453c <_lseek_r>
 80134c6:	1c43      	adds	r3, r0, #1
 80134c8:	89a3      	ldrh	r3, [r4, #12]
 80134ca:	bf15      	itete	ne
 80134cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80134ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80134d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80134d6:	81a3      	strheq	r3, [r4, #12]
 80134d8:	bf18      	it	ne
 80134da:	81a3      	strhne	r3, [r4, #12]
 80134dc:	bd10      	pop	{r4, pc}

080134de <__sclose>:
 80134de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134e2:	f000 b8db 	b.w	801369c <_close_r>

080134e6 <strcpy>:
 80134e6:	4603      	mov	r3, r0
 80134e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134ec:	f803 2b01 	strb.w	r2, [r3], #1
 80134f0:	2a00      	cmp	r2, #0
 80134f2:	d1f9      	bne.n	80134e8 <strcpy+0x2>
 80134f4:	4770      	bx	lr
	...

080134f8 <__swbuf_r>:
 80134f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134fa:	460e      	mov	r6, r1
 80134fc:	4614      	mov	r4, r2
 80134fe:	4605      	mov	r5, r0
 8013500:	b118      	cbz	r0, 801350a <__swbuf_r+0x12>
 8013502:	6983      	ldr	r3, [r0, #24]
 8013504:	b90b      	cbnz	r3, 801350a <__swbuf_r+0x12>
 8013506:	f7ff f8e7 	bl	80126d8 <__sinit>
 801350a:	4b21      	ldr	r3, [pc, #132]	; (8013590 <__swbuf_r+0x98>)
 801350c:	429c      	cmp	r4, r3
 801350e:	d12b      	bne.n	8013568 <__swbuf_r+0x70>
 8013510:	686c      	ldr	r4, [r5, #4]
 8013512:	69a3      	ldr	r3, [r4, #24]
 8013514:	60a3      	str	r3, [r4, #8]
 8013516:	89a3      	ldrh	r3, [r4, #12]
 8013518:	071a      	lsls	r2, r3, #28
 801351a:	d52f      	bpl.n	801357c <__swbuf_r+0x84>
 801351c:	6923      	ldr	r3, [r4, #16]
 801351e:	b36b      	cbz	r3, 801357c <__swbuf_r+0x84>
 8013520:	6923      	ldr	r3, [r4, #16]
 8013522:	6820      	ldr	r0, [r4, #0]
 8013524:	1ac0      	subs	r0, r0, r3
 8013526:	6963      	ldr	r3, [r4, #20]
 8013528:	b2f6      	uxtb	r6, r6
 801352a:	4283      	cmp	r3, r0
 801352c:	4637      	mov	r7, r6
 801352e:	dc04      	bgt.n	801353a <__swbuf_r+0x42>
 8013530:	4621      	mov	r1, r4
 8013532:	4628      	mov	r0, r5
 8013534:	f000 ffc2 	bl	80144bc <_fflush_r>
 8013538:	bb30      	cbnz	r0, 8013588 <__swbuf_r+0x90>
 801353a:	68a3      	ldr	r3, [r4, #8]
 801353c:	3b01      	subs	r3, #1
 801353e:	60a3      	str	r3, [r4, #8]
 8013540:	6823      	ldr	r3, [r4, #0]
 8013542:	1c5a      	adds	r2, r3, #1
 8013544:	6022      	str	r2, [r4, #0]
 8013546:	701e      	strb	r6, [r3, #0]
 8013548:	6963      	ldr	r3, [r4, #20]
 801354a:	3001      	adds	r0, #1
 801354c:	4283      	cmp	r3, r0
 801354e:	d004      	beq.n	801355a <__swbuf_r+0x62>
 8013550:	89a3      	ldrh	r3, [r4, #12]
 8013552:	07db      	lsls	r3, r3, #31
 8013554:	d506      	bpl.n	8013564 <__swbuf_r+0x6c>
 8013556:	2e0a      	cmp	r6, #10
 8013558:	d104      	bne.n	8013564 <__swbuf_r+0x6c>
 801355a:	4621      	mov	r1, r4
 801355c:	4628      	mov	r0, r5
 801355e:	f000 ffad 	bl	80144bc <_fflush_r>
 8013562:	b988      	cbnz	r0, 8013588 <__swbuf_r+0x90>
 8013564:	4638      	mov	r0, r7
 8013566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013568:	4b0a      	ldr	r3, [pc, #40]	; (8013594 <__swbuf_r+0x9c>)
 801356a:	429c      	cmp	r4, r3
 801356c:	d101      	bne.n	8013572 <__swbuf_r+0x7a>
 801356e:	68ac      	ldr	r4, [r5, #8]
 8013570:	e7cf      	b.n	8013512 <__swbuf_r+0x1a>
 8013572:	4b09      	ldr	r3, [pc, #36]	; (8013598 <__swbuf_r+0xa0>)
 8013574:	429c      	cmp	r4, r3
 8013576:	bf08      	it	eq
 8013578:	68ec      	ldreq	r4, [r5, #12]
 801357a:	e7ca      	b.n	8013512 <__swbuf_r+0x1a>
 801357c:	4621      	mov	r1, r4
 801357e:	4628      	mov	r0, r5
 8013580:	f000 f81e 	bl	80135c0 <__swsetup_r>
 8013584:	2800      	cmp	r0, #0
 8013586:	d0cb      	beq.n	8013520 <__swbuf_r+0x28>
 8013588:	f04f 37ff 	mov.w	r7, #4294967295
 801358c:	e7ea      	b.n	8013564 <__swbuf_r+0x6c>
 801358e:	bf00      	nop
 8013590:	080164a0 	.word	0x080164a0
 8013594:	080164c0 	.word	0x080164c0
 8013598:	08016480 	.word	0x08016480

0801359c <_write_r>:
 801359c:	b538      	push	{r3, r4, r5, lr}
 801359e:	4d07      	ldr	r5, [pc, #28]	; (80135bc <_write_r+0x20>)
 80135a0:	4604      	mov	r4, r0
 80135a2:	4608      	mov	r0, r1
 80135a4:	4611      	mov	r1, r2
 80135a6:	2200      	movs	r2, #0
 80135a8:	602a      	str	r2, [r5, #0]
 80135aa:	461a      	mov	r2, r3
 80135ac:	f7ed fc92 	bl	8000ed4 <_write>
 80135b0:	1c43      	adds	r3, r0, #1
 80135b2:	d102      	bne.n	80135ba <_write_r+0x1e>
 80135b4:	682b      	ldr	r3, [r5, #0]
 80135b6:	b103      	cbz	r3, 80135ba <_write_r+0x1e>
 80135b8:	6023      	str	r3, [r4, #0]
 80135ba:	bd38      	pop	{r3, r4, r5, pc}
 80135bc:	20010b2c 	.word	0x20010b2c

080135c0 <__swsetup_r>:
 80135c0:	4b32      	ldr	r3, [pc, #200]	; (801368c <__swsetup_r+0xcc>)
 80135c2:	b570      	push	{r4, r5, r6, lr}
 80135c4:	681d      	ldr	r5, [r3, #0]
 80135c6:	4606      	mov	r6, r0
 80135c8:	460c      	mov	r4, r1
 80135ca:	b125      	cbz	r5, 80135d6 <__swsetup_r+0x16>
 80135cc:	69ab      	ldr	r3, [r5, #24]
 80135ce:	b913      	cbnz	r3, 80135d6 <__swsetup_r+0x16>
 80135d0:	4628      	mov	r0, r5
 80135d2:	f7ff f881 	bl	80126d8 <__sinit>
 80135d6:	4b2e      	ldr	r3, [pc, #184]	; (8013690 <__swsetup_r+0xd0>)
 80135d8:	429c      	cmp	r4, r3
 80135da:	d10f      	bne.n	80135fc <__swsetup_r+0x3c>
 80135dc:	686c      	ldr	r4, [r5, #4]
 80135de:	89a3      	ldrh	r3, [r4, #12]
 80135e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80135e4:	0719      	lsls	r1, r3, #28
 80135e6:	d42c      	bmi.n	8013642 <__swsetup_r+0x82>
 80135e8:	06dd      	lsls	r5, r3, #27
 80135ea:	d411      	bmi.n	8013610 <__swsetup_r+0x50>
 80135ec:	2309      	movs	r3, #9
 80135ee:	6033      	str	r3, [r6, #0]
 80135f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80135f4:	81a3      	strh	r3, [r4, #12]
 80135f6:	f04f 30ff 	mov.w	r0, #4294967295
 80135fa:	e03e      	b.n	801367a <__swsetup_r+0xba>
 80135fc:	4b25      	ldr	r3, [pc, #148]	; (8013694 <__swsetup_r+0xd4>)
 80135fe:	429c      	cmp	r4, r3
 8013600:	d101      	bne.n	8013606 <__swsetup_r+0x46>
 8013602:	68ac      	ldr	r4, [r5, #8]
 8013604:	e7eb      	b.n	80135de <__swsetup_r+0x1e>
 8013606:	4b24      	ldr	r3, [pc, #144]	; (8013698 <__swsetup_r+0xd8>)
 8013608:	429c      	cmp	r4, r3
 801360a:	bf08      	it	eq
 801360c:	68ec      	ldreq	r4, [r5, #12]
 801360e:	e7e6      	b.n	80135de <__swsetup_r+0x1e>
 8013610:	0758      	lsls	r0, r3, #29
 8013612:	d512      	bpl.n	801363a <__swsetup_r+0x7a>
 8013614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013616:	b141      	cbz	r1, 801362a <__swsetup_r+0x6a>
 8013618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801361c:	4299      	cmp	r1, r3
 801361e:	d002      	beq.n	8013626 <__swsetup_r+0x66>
 8013620:	4630      	mov	r0, r6
 8013622:	f001 fba3 	bl	8014d6c <_free_r>
 8013626:	2300      	movs	r3, #0
 8013628:	6363      	str	r3, [r4, #52]	; 0x34
 801362a:	89a3      	ldrh	r3, [r4, #12]
 801362c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013630:	81a3      	strh	r3, [r4, #12]
 8013632:	2300      	movs	r3, #0
 8013634:	6063      	str	r3, [r4, #4]
 8013636:	6923      	ldr	r3, [r4, #16]
 8013638:	6023      	str	r3, [r4, #0]
 801363a:	89a3      	ldrh	r3, [r4, #12]
 801363c:	f043 0308 	orr.w	r3, r3, #8
 8013640:	81a3      	strh	r3, [r4, #12]
 8013642:	6923      	ldr	r3, [r4, #16]
 8013644:	b94b      	cbnz	r3, 801365a <__swsetup_r+0x9a>
 8013646:	89a3      	ldrh	r3, [r4, #12]
 8013648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801364c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013650:	d003      	beq.n	801365a <__swsetup_r+0x9a>
 8013652:	4621      	mov	r1, r4
 8013654:	4630      	mov	r0, r6
 8013656:	f000 ffa7 	bl	80145a8 <__smakebuf_r>
 801365a:	89a0      	ldrh	r0, [r4, #12]
 801365c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013660:	f010 0301 	ands.w	r3, r0, #1
 8013664:	d00a      	beq.n	801367c <__swsetup_r+0xbc>
 8013666:	2300      	movs	r3, #0
 8013668:	60a3      	str	r3, [r4, #8]
 801366a:	6963      	ldr	r3, [r4, #20]
 801366c:	425b      	negs	r3, r3
 801366e:	61a3      	str	r3, [r4, #24]
 8013670:	6923      	ldr	r3, [r4, #16]
 8013672:	b943      	cbnz	r3, 8013686 <__swsetup_r+0xc6>
 8013674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013678:	d1ba      	bne.n	80135f0 <__swsetup_r+0x30>
 801367a:	bd70      	pop	{r4, r5, r6, pc}
 801367c:	0781      	lsls	r1, r0, #30
 801367e:	bf58      	it	pl
 8013680:	6963      	ldrpl	r3, [r4, #20]
 8013682:	60a3      	str	r3, [r4, #8]
 8013684:	e7f4      	b.n	8013670 <__swsetup_r+0xb0>
 8013686:	2000      	movs	r0, #0
 8013688:	e7f7      	b.n	801367a <__swsetup_r+0xba>
 801368a:	bf00      	nop
 801368c:	20000510 	.word	0x20000510
 8013690:	080164a0 	.word	0x080164a0
 8013694:	080164c0 	.word	0x080164c0
 8013698:	08016480 	.word	0x08016480

0801369c <_close_r>:
 801369c:	b538      	push	{r3, r4, r5, lr}
 801369e:	4d06      	ldr	r5, [pc, #24]	; (80136b8 <_close_r+0x1c>)
 80136a0:	2300      	movs	r3, #0
 80136a2:	4604      	mov	r4, r0
 80136a4:	4608      	mov	r0, r1
 80136a6:	602b      	str	r3, [r5, #0]
 80136a8:	f7ee fd85 	bl	80021b6 <_close>
 80136ac:	1c43      	adds	r3, r0, #1
 80136ae:	d102      	bne.n	80136b6 <_close_r+0x1a>
 80136b0:	682b      	ldr	r3, [r5, #0]
 80136b2:	b103      	cbz	r3, 80136b6 <_close_r+0x1a>
 80136b4:	6023      	str	r3, [r4, #0]
 80136b6:	bd38      	pop	{r3, r4, r5, pc}
 80136b8:	20010b2c 	.word	0x20010b2c

080136bc <quorem>:
 80136bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c0:	6903      	ldr	r3, [r0, #16]
 80136c2:	690c      	ldr	r4, [r1, #16]
 80136c4:	42a3      	cmp	r3, r4
 80136c6:	4607      	mov	r7, r0
 80136c8:	f2c0 8081 	blt.w	80137ce <quorem+0x112>
 80136cc:	3c01      	subs	r4, #1
 80136ce:	f101 0814 	add.w	r8, r1, #20
 80136d2:	f100 0514 	add.w	r5, r0, #20
 80136d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80136da:	9301      	str	r3, [sp, #4]
 80136dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80136e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80136e4:	3301      	adds	r3, #1
 80136e6:	429a      	cmp	r2, r3
 80136e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80136ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80136f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80136f4:	d331      	bcc.n	801375a <quorem+0x9e>
 80136f6:	f04f 0e00 	mov.w	lr, #0
 80136fa:	4640      	mov	r0, r8
 80136fc:	46ac      	mov	ip, r5
 80136fe:	46f2      	mov	sl, lr
 8013700:	f850 2b04 	ldr.w	r2, [r0], #4
 8013704:	b293      	uxth	r3, r2
 8013706:	fb06 e303 	mla	r3, r6, r3, lr
 801370a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801370e:	b29b      	uxth	r3, r3
 8013710:	ebaa 0303 	sub.w	r3, sl, r3
 8013714:	0c12      	lsrs	r2, r2, #16
 8013716:	f8dc a000 	ldr.w	sl, [ip]
 801371a:	fb06 e202 	mla	r2, r6, r2, lr
 801371e:	fa13 f38a 	uxtah	r3, r3, sl
 8013722:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013726:	fa1f fa82 	uxth.w	sl, r2
 801372a:	f8dc 2000 	ldr.w	r2, [ip]
 801372e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013732:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013736:	b29b      	uxth	r3, r3
 8013738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801373c:	4581      	cmp	r9, r0
 801373e:	f84c 3b04 	str.w	r3, [ip], #4
 8013742:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013746:	d2db      	bcs.n	8013700 <quorem+0x44>
 8013748:	f855 300b 	ldr.w	r3, [r5, fp]
 801374c:	b92b      	cbnz	r3, 801375a <quorem+0x9e>
 801374e:	9b01      	ldr	r3, [sp, #4]
 8013750:	3b04      	subs	r3, #4
 8013752:	429d      	cmp	r5, r3
 8013754:	461a      	mov	r2, r3
 8013756:	d32e      	bcc.n	80137b6 <quorem+0xfa>
 8013758:	613c      	str	r4, [r7, #16]
 801375a:	4638      	mov	r0, r7
 801375c:	f001 f9f6 	bl	8014b4c <__mcmp>
 8013760:	2800      	cmp	r0, #0
 8013762:	db24      	blt.n	80137ae <quorem+0xf2>
 8013764:	3601      	adds	r6, #1
 8013766:	4628      	mov	r0, r5
 8013768:	f04f 0c00 	mov.w	ip, #0
 801376c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013770:	f8d0 e000 	ldr.w	lr, [r0]
 8013774:	b293      	uxth	r3, r2
 8013776:	ebac 0303 	sub.w	r3, ip, r3
 801377a:	0c12      	lsrs	r2, r2, #16
 801377c:	fa13 f38e 	uxtah	r3, r3, lr
 8013780:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013788:	b29b      	uxth	r3, r3
 801378a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801378e:	45c1      	cmp	r9, r8
 8013790:	f840 3b04 	str.w	r3, [r0], #4
 8013794:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013798:	d2e8      	bcs.n	801376c <quorem+0xb0>
 801379a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801379e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80137a2:	b922      	cbnz	r2, 80137ae <quorem+0xf2>
 80137a4:	3b04      	subs	r3, #4
 80137a6:	429d      	cmp	r5, r3
 80137a8:	461a      	mov	r2, r3
 80137aa:	d30a      	bcc.n	80137c2 <quorem+0x106>
 80137ac:	613c      	str	r4, [r7, #16]
 80137ae:	4630      	mov	r0, r6
 80137b0:	b003      	add	sp, #12
 80137b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b6:	6812      	ldr	r2, [r2, #0]
 80137b8:	3b04      	subs	r3, #4
 80137ba:	2a00      	cmp	r2, #0
 80137bc:	d1cc      	bne.n	8013758 <quorem+0x9c>
 80137be:	3c01      	subs	r4, #1
 80137c0:	e7c7      	b.n	8013752 <quorem+0x96>
 80137c2:	6812      	ldr	r2, [r2, #0]
 80137c4:	3b04      	subs	r3, #4
 80137c6:	2a00      	cmp	r2, #0
 80137c8:	d1f0      	bne.n	80137ac <quorem+0xf0>
 80137ca:	3c01      	subs	r4, #1
 80137cc:	e7eb      	b.n	80137a6 <quorem+0xea>
 80137ce:	2000      	movs	r0, #0
 80137d0:	e7ee      	b.n	80137b0 <quorem+0xf4>
 80137d2:	0000      	movs	r0, r0
 80137d4:	0000      	movs	r0, r0
	...

080137d8 <_dtoa_r>:
 80137d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137dc:	ed2d 8b02 	vpush	{d8}
 80137e0:	ec57 6b10 	vmov	r6, r7, d0
 80137e4:	b095      	sub	sp, #84	; 0x54
 80137e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80137e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80137ec:	9105      	str	r1, [sp, #20]
 80137ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80137f2:	4604      	mov	r4, r0
 80137f4:	9209      	str	r2, [sp, #36]	; 0x24
 80137f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80137f8:	b975      	cbnz	r5, 8013818 <_dtoa_r+0x40>
 80137fa:	2010      	movs	r0, #16
 80137fc:	f000 ff14 	bl	8014628 <malloc>
 8013800:	4602      	mov	r2, r0
 8013802:	6260      	str	r0, [r4, #36]	; 0x24
 8013804:	b920      	cbnz	r0, 8013810 <_dtoa_r+0x38>
 8013806:	4bb2      	ldr	r3, [pc, #712]	; (8013ad0 <_dtoa_r+0x2f8>)
 8013808:	21ea      	movs	r1, #234	; 0xea
 801380a:	48b2      	ldr	r0, [pc, #712]	; (8013ad4 <_dtoa_r+0x2fc>)
 801380c:	f001 fc6c 	bl	80150e8 <__assert_func>
 8013810:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013814:	6005      	str	r5, [r0, #0]
 8013816:	60c5      	str	r5, [r0, #12]
 8013818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801381a:	6819      	ldr	r1, [r3, #0]
 801381c:	b151      	cbz	r1, 8013834 <_dtoa_r+0x5c>
 801381e:	685a      	ldr	r2, [r3, #4]
 8013820:	604a      	str	r2, [r1, #4]
 8013822:	2301      	movs	r3, #1
 8013824:	4093      	lsls	r3, r2
 8013826:	608b      	str	r3, [r1, #8]
 8013828:	4620      	mov	r0, r4
 801382a:	f000 ff51 	bl	80146d0 <_Bfree>
 801382e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013830:	2200      	movs	r2, #0
 8013832:	601a      	str	r2, [r3, #0]
 8013834:	1e3b      	subs	r3, r7, #0
 8013836:	bfb9      	ittee	lt
 8013838:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801383c:	9303      	strlt	r3, [sp, #12]
 801383e:	2300      	movge	r3, #0
 8013840:	f8c8 3000 	strge.w	r3, [r8]
 8013844:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013848:	4ba3      	ldr	r3, [pc, #652]	; (8013ad8 <_dtoa_r+0x300>)
 801384a:	bfbc      	itt	lt
 801384c:	2201      	movlt	r2, #1
 801384e:	f8c8 2000 	strlt.w	r2, [r8]
 8013852:	ea33 0309 	bics.w	r3, r3, r9
 8013856:	d11b      	bne.n	8013890 <_dtoa_r+0xb8>
 8013858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801385a:	f242 730f 	movw	r3, #9999	; 0x270f
 801385e:	6013      	str	r3, [r2, #0]
 8013860:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013864:	4333      	orrs	r3, r6
 8013866:	f000 857a 	beq.w	801435e <_dtoa_r+0xb86>
 801386a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801386c:	b963      	cbnz	r3, 8013888 <_dtoa_r+0xb0>
 801386e:	4b9b      	ldr	r3, [pc, #620]	; (8013adc <_dtoa_r+0x304>)
 8013870:	e024      	b.n	80138bc <_dtoa_r+0xe4>
 8013872:	4b9b      	ldr	r3, [pc, #620]	; (8013ae0 <_dtoa_r+0x308>)
 8013874:	9300      	str	r3, [sp, #0]
 8013876:	3308      	adds	r3, #8
 8013878:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801387a:	6013      	str	r3, [r2, #0]
 801387c:	9800      	ldr	r0, [sp, #0]
 801387e:	b015      	add	sp, #84	; 0x54
 8013880:	ecbd 8b02 	vpop	{d8}
 8013884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013888:	4b94      	ldr	r3, [pc, #592]	; (8013adc <_dtoa_r+0x304>)
 801388a:	9300      	str	r3, [sp, #0]
 801388c:	3303      	adds	r3, #3
 801388e:	e7f3      	b.n	8013878 <_dtoa_r+0xa0>
 8013890:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013894:	2200      	movs	r2, #0
 8013896:	ec51 0b17 	vmov	r0, r1, d7
 801389a:	2300      	movs	r3, #0
 801389c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80138a0:	f7ed f912 	bl	8000ac8 <__aeabi_dcmpeq>
 80138a4:	4680      	mov	r8, r0
 80138a6:	b158      	cbz	r0, 80138c0 <_dtoa_r+0xe8>
 80138a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80138aa:	2301      	movs	r3, #1
 80138ac:	6013      	str	r3, [r2, #0]
 80138ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	f000 8551 	beq.w	8014358 <_dtoa_r+0xb80>
 80138b6:	488b      	ldr	r0, [pc, #556]	; (8013ae4 <_dtoa_r+0x30c>)
 80138b8:	6018      	str	r0, [r3, #0]
 80138ba:	1e43      	subs	r3, r0, #1
 80138bc:	9300      	str	r3, [sp, #0]
 80138be:	e7dd      	b.n	801387c <_dtoa_r+0xa4>
 80138c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80138c4:	aa12      	add	r2, sp, #72	; 0x48
 80138c6:	a913      	add	r1, sp, #76	; 0x4c
 80138c8:	4620      	mov	r0, r4
 80138ca:	f001 f9e3 	bl	8014c94 <__d2b>
 80138ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80138d2:	4683      	mov	fp, r0
 80138d4:	2d00      	cmp	r5, #0
 80138d6:	d07c      	beq.n	80139d2 <_dtoa_r+0x1fa>
 80138d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80138de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80138e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80138ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80138ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80138f2:	4b7d      	ldr	r3, [pc, #500]	; (8013ae8 <_dtoa_r+0x310>)
 80138f4:	2200      	movs	r2, #0
 80138f6:	4630      	mov	r0, r6
 80138f8:	4639      	mov	r1, r7
 80138fa:	f7ec fcc5 	bl	8000288 <__aeabi_dsub>
 80138fe:	a36e      	add	r3, pc, #440	; (adr r3, 8013ab8 <_dtoa_r+0x2e0>)
 8013900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013904:	f7ec fe78 	bl	80005f8 <__aeabi_dmul>
 8013908:	a36d      	add	r3, pc, #436	; (adr r3, 8013ac0 <_dtoa_r+0x2e8>)
 801390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801390e:	f7ec fcbd 	bl	800028c <__adddf3>
 8013912:	4606      	mov	r6, r0
 8013914:	4628      	mov	r0, r5
 8013916:	460f      	mov	r7, r1
 8013918:	f7ec fe04 	bl	8000524 <__aeabi_i2d>
 801391c:	a36a      	add	r3, pc, #424	; (adr r3, 8013ac8 <_dtoa_r+0x2f0>)
 801391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013922:	f7ec fe69 	bl	80005f8 <__aeabi_dmul>
 8013926:	4602      	mov	r2, r0
 8013928:	460b      	mov	r3, r1
 801392a:	4630      	mov	r0, r6
 801392c:	4639      	mov	r1, r7
 801392e:	f7ec fcad 	bl	800028c <__adddf3>
 8013932:	4606      	mov	r6, r0
 8013934:	460f      	mov	r7, r1
 8013936:	f7ed f90f 	bl	8000b58 <__aeabi_d2iz>
 801393a:	2200      	movs	r2, #0
 801393c:	4682      	mov	sl, r0
 801393e:	2300      	movs	r3, #0
 8013940:	4630      	mov	r0, r6
 8013942:	4639      	mov	r1, r7
 8013944:	f7ed f8ca 	bl	8000adc <__aeabi_dcmplt>
 8013948:	b148      	cbz	r0, 801395e <_dtoa_r+0x186>
 801394a:	4650      	mov	r0, sl
 801394c:	f7ec fdea 	bl	8000524 <__aeabi_i2d>
 8013950:	4632      	mov	r2, r6
 8013952:	463b      	mov	r3, r7
 8013954:	f7ed f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8013958:	b908      	cbnz	r0, 801395e <_dtoa_r+0x186>
 801395a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801395e:	f1ba 0f16 	cmp.w	sl, #22
 8013962:	d854      	bhi.n	8013a0e <_dtoa_r+0x236>
 8013964:	4b61      	ldr	r3, [pc, #388]	; (8013aec <_dtoa_r+0x314>)
 8013966:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013972:	f7ed f8b3 	bl	8000adc <__aeabi_dcmplt>
 8013976:	2800      	cmp	r0, #0
 8013978:	d04b      	beq.n	8013a12 <_dtoa_r+0x23a>
 801397a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801397e:	2300      	movs	r3, #0
 8013980:	930e      	str	r3, [sp, #56]	; 0x38
 8013982:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013984:	1b5d      	subs	r5, r3, r5
 8013986:	1e6b      	subs	r3, r5, #1
 8013988:	9304      	str	r3, [sp, #16]
 801398a:	bf43      	ittte	mi
 801398c:	2300      	movmi	r3, #0
 801398e:	f1c5 0801 	rsbmi	r8, r5, #1
 8013992:	9304      	strmi	r3, [sp, #16]
 8013994:	f04f 0800 	movpl.w	r8, #0
 8013998:	f1ba 0f00 	cmp.w	sl, #0
 801399c:	db3b      	blt.n	8013a16 <_dtoa_r+0x23e>
 801399e:	9b04      	ldr	r3, [sp, #16]
 80139a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80139a4:	4453      	add	r3, sl
 80139a6:	9304      	str	r3, [sp, #16]
 80139a8:	2300      	movs	r3, #0
 80139aa:	9306      	str	r3, [sp, #24]
 80139ac:	9b05      	ldr	r3, [sp, #20]
 80139ae:	2b09      	cmp	r3, #9
 80139b0:	d869      	bhi.n	8013a86 <_dtoa_r+0x2ae>
 80139b2:	2b05      	cmp	r3, #5
 80139b4:	bfc4      	itt	gt
 80139b6:	3b04      	subgt	r3, #4
 80139b8:	9305      	strgt	r3, [sp, #20]
 80139ba:	9b05      	ldr	r3, [sp, #20]
 80139bc:	f1a3 0302 	sub.w	r3, r3, #2
 80139c0:	bfcc      	ite	gt
 80139c2:	2500      	movgt	r5, #0
 80139c4:	2501      	movle	r5, #1
 80139c6:	2b03      	cmp	r3, #3
 80139c8:	d869      	bhi.n	8013a9e <_dtoa_r+0x2c6>
 80139ca:	e8df f003 	tbb	[pc, r3]
 80139ce:	4e2c      	.short	0x4e2c
 80139d0:	5a4c      	.short	0x5a4c
 80139d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80139d6:	441d      	add	r5, r3
 80139d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80139dc:	2b20      	cmp	r3, #32
 80139de:	bfc1      	itttt	gt
 80139e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80139e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80139e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80139ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80139f0:	bfda      	itte	le
 80139f2:	f1c3 0320 	rsble	r3, r3, #32
 80139f6:	fa06 f003 	lslle.w	r0, r6, r3
 80139fa:	4318      	orrgt	r0, r3
 80139fc:	f7ec fd82 	bl	8000504 <__aeabi_ui2d>
 8013a00:	2301      	movs	r3, #1
 8013a02:	4606      	mov	r6, r0
 8013a04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013a08:	3d01      	subs	r5, #1
 8013a0a:	9310      	str	r3, [sp, #64]	; 0x40
 8013a0c:	e771      	b.n	80138f2 <_dtoa_r+0x11a>
 8013a0e:	2301      	movs	r3, #1
 8013a10:	e7b6      	b.n	8013980 <_dtoa_r+0x1a8>
 8013a12:	900e      	str	r0, [sp, #56]	; 0x38
 8013a14:	e7b5      	b.n	8013982 <_dtoa_r+0x1aa>
 8013a16:	f1ca 0300 	rsb	r3, sl, #0
 8013a1a:	9306      	str	r3, [sp, #24]
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	eba8 080a 	sub.w	r8, r8, sl
 8013a22:	930d      	str	r3, [sp, #52]	; 0x34
 8013a24:	e7c2      	b.n	80139ac <_dtoa_r+0x1d4>
 8013a26:	2300      	movs	r3, #0
 8013a28:	9308      	str	r3, [sp, #32]
 8013a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	dc39      	bgt.n	8013aa4 <_dtoa_r+0x2cc>
 8013a30:	f04f 0901 	mov.w	r9, #1
 8013a34:	f8cd 9004 	str.w	r9, [sp, #4]
 8013a38:	464b      	mov	r3, r9
 8013a3a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013a3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013a40:	2200      	movs	r2, #0
 8013a42:	6042      	str	r2, [r0, #4]
 8013a44:	2204      	movs	r2, #4
 8013a46:	f102 0614 	add.w	r6, r2, #20
 8013a4a:	429e      	cmp	r6, r3
 8013a4c:	6841      	ldr	r1, [r0, #4]
 8013a4e:	d92f      	bls.n	8013ab0 <_dtoa_r+0x2d8>
 8013a50:	4620      	mov	r0, r4
 8013a52:	f000 fdfd 	bl	8014650 <_Balloc>
 8013a56:	9000      	str	r0, [sp, #0]
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	d14b      	bne.n	8013af4 <_dtoa_r+0x31c>
 8013a5c:	4b24      	ldr	r3, [pc, #144]	; (8013af0 <_dtoa_r+0x318>)
 8013a5e:	4602      	mov	r2, r0
 8013a60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013a64:	e6d1      	b.n	801380a <_dtoa_r+0x32>
 8013a66:	2301      	movs	r3, #1
 8013a68:	e7de      	b.n	8013a28 <_dtoa_r+0x250>
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	9308      	str	r3, [sp, #32]
 8013a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a70:	eb0a 0903 	add.w	r9, sl, r3
 8013a74:	f109 0301 	add.w	r3, r9, #1
 8013a78:	2b01      	cmp	r3, #1
 8013a7a:	9301      	str	r3, [sp, #4]
 8013a7c:	bfb8      	it	lt
 8013a7e:	2301      	movlt	r3, #1
 8013a80:	e7dd      	b.n	8013a3e <_dtoa_r+0x266>
 8013a82:	2301      	movs	r3, #1
 8013a84:	e7f2      	b.n	8013a6c <_dtoa_r+0x294>
 8013a86:	2501      	movs	r5, #1
 8013a88:	2300      	movs	r3, #0
 8013a8a:	9305      	str	r3, [sp, #20]
 8013a8c:	9508      	str	r5, [sp, #32]
 8013a8e:	f04f 39ff 	mov.w	r9, #4294967295
 8013a92:	2200      	movs	r2, #0
 8013a94:	f8cd 9004 	str.w	r9, [sp, #4]
 8013a98:	2312      	movs	r3, #18
 8013a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8013a9c:	e7cf      	b.n	8013a3e <_dtoa_r+0x266>
 8013a9e:	2301      	movs	r3, #1
 8013aa0:	9308      	str	r3, [sp, #32]
 8013aa2:	e7f4      	b.n	8013a8e <_dtoa_r+0x2b6>
 8013aa4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013aa8:	f8cd 9004 	str.w	r9, [sp, #4]
 8013aac:	464b      	mov	r3, r9
 8013aae:	e7c6      	b.n	8013a3e <_dtoa_r+0x266>
 8013ab0:	3101      	adds	r1, #1
 8013ab2:	6041      	str	r1, [r0, #4]
 8013ab4:	0052      	lsls	r2, r2, #1
 8013ab6:	e7c6      	b.n	8013a46 <_dtoa_r+0x26e>
 8013ab8:	636f4361 	.word	0x636f4361
 8013abc:	3fd287a7 	.word	0x3fd287a7
 8013ac0:	8b60c8b3 	.word	0x8b60c8b3
 8013ac4:	3fc68a28 	.word	0x3fc68a28
 8013ac8:	509f79fb 	.word	0x509f79fb
 8013acc:	3fd34413 	.word	0x3fd34413
 8013ad0:	08016525 	.word	0x08016525
 8013ad4:	0801653c 	.word	0x0801653c
 8013ad8:	7ff00000 	.word	0x7ff00000
 8013adc:	08016521 	.word	0x08016521
 8013ae0:	08016518 	.word	0x08016518
 8013ae4:	080164f5 	.word	0x080164f5
 8013ae8:	3ff80000 	.word	0x3ff80000
 8013aec:	08016638 	.word	0x08016638
 8013af0:	0801659b 	.word	0x0801659b
 8013af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013af6:	9a00      	ldr	r2, [sp, #0]
 8013af8:	601a      	str	r2, [r3, #0]
 8013afa:	9b01      	ldr	r3, [sp, #4]
 8013afc:	2b0e      	cmp	r3, #14
 8013afe:	f200 80ad 	bhi.w	8013c5c <_dtoa_r+0x484>
 8013b02:	2d00      	cmp	r5, #0
 8013b04:	f000 80aa 	beq.w	8013c5c <_dtoa_r+0x484>
 8013b08:	f1ba 0f00 	cmp.w	sl, #0
 8013b0c:	dd36      	ble.n	8013b7c <_dtoa_r+0x3a4>
 8013b0e:	4ac3      	ldr	r2, [pc, #780]	; (8013e1c <_dtoa_r+0x644>)
 8013b10:	f00a 030f 	and.w	r3, sl, #15
 8013b14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013b18:	ed93 7b00 	vldr	d7, [r3]
 8013b1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013b20:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013b24:	eeb0 8a47 	vmov.f32	s16, s14
 8013b28:	eef0 8a67 	vmov.f32	s17, s15
 8013b2c:	d016      	beq.n	8013b5c <_dtoa_r+0x384>
 8013b2e:	4bbc      	ldr	r3, [pc, #752]	; (8013e20 <_dtoa_r+0x648>)
 8013b30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013b34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013b38:	f7ec fe88 	bl	800084c <__aeabi_ddiv>
 8013b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b40:	f007 070f 	and.w	r7, r7, #15
 8013b44:	2503      	movs	r5, #3
 8013b46:	4eb6      	ldr	r6, [pc, #728]	; (8013e20 <_dtoa_r+0x648>)
 8013b48:	b957      	cbnz	r7, 8013b60 <_dtoa_r+0x388>
 8013b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b4e:	ec53 2b18 	vmov	r2, r3, d8
 8013b52:	f7ec fe7b 	bl	800084c <__aeabi_ddiv>
 8013b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b5a:	e029      	b.n	8013bb0 <_dtoa_r+0x3d8>
 8013b5c:	2502      	movs	r5, #2
 8013b5e:	e7f2      	b.n	8013b46 <_dtoa_r+0x36e>
 8013b60:	07f9      	lsls	r1, r7, #31
 8013b62:	d508      	bpl.n	8013b76 <_dtoa_r+0x39e>
 8013b64:	ec51 0b18 	vmov	r0, r1, d8
 8013b68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b6c:	f7ec fd44 	bl	80005f8 <__aeabi_dmul>
 8013b70:	ec41 0b18 	vmov	d8, r0, r1
 8013b74:	3501      	adds	r5, #1
 8013b76:	107f      	asrs	r7, r7, #1
 8013b78:	3608      	adds	r6, #8
 8013b7a:	e7e5      	b.n	8013b48 <_dtoa_r+0x370>
 8013b7c:	f000 80a6 	beq.w	8013ccc <_dtoa_r+0x4f4>
 8013b80:	f1ca 0600 	rsb	r6, sl, #0
 8013b84:	4ba5      	ldr	r3, [pc, #660]	; (8013e1c <_dtoa_r+0x644>)
 8013b86:	4fa6      	ldr	r7, [pc, #664]	; (8013e20 <_dtoa_r+0x648>)
 8013b88:	f006 020f 	and.w	r2, r6, #15
 8013b8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013b98:	f7ec fd2e 	bl	80005f8 <__aeabi_dmul>
 8013b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ba0:	1136      	asrs	r6, r6, #4
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	2502      	movs	r5, #2
 8013ba6:	2e00      	cmp	r6, #0
 8013ba8:	f040 8085 	bne.w	8013cb6 <_dtoa_r+0x4de>
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d1d2      	bne.n	8013b56 <_dtoa_r+0x37e>
 8013bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	f000 808c 	beq.w	8013cd0 <_dtoa_r+0x4f8>
 8013bb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013bbc:	4b99      	ldr	r3, [pc, #612]	; (8013e24 <_dtoa_r+0x64c>)
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	4639      	mov	r1, r7
 8013bc4:	f7ec ff8a 	bl	8000adc <__aeabi_dcmplt>
 8013bc8:	2800      	cmp	r0, #0
 8013bca:	f000 8081 	beq.w	8013cd0 <_dtoa_r+0x4f8>
 8013bce:	9b01      	ldr	r3, [sp, #4]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d07d      	beq.n	8013cd0 <_dtoa_r+0x4f8>
 8013bd4:	f1b9 0f00 	cmp.w	r9, #0
 8013bd8:	dd3c      	ble.n	8013c54 <_dtoa_r+0x47c>
 8013bda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013bde:	9307      	str	r3, [sp, #28]
 8013be0:	2200      	movs	r2, #0
 8013be2:	4b91      	ldr	r3, [pc, #580]	; (8013e28 <_dtoa_r+0x650>)
 8013be4:	4630      	mov	r0, r6
 8013be6:	4639      	mov	r1, r7
 8013be8:	f7ec fd06 	bl	80005f8 <__aeabi_dmul>
 8013bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013bf0:	3501      	adds	r5, #1
 8013bf2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013bf6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	f7ec fc92 	bl	8000524 <__aeabi_i2d>
 8013c00:	4632      	mov	r2, r6
 8013c02:	463b      	mov	r3, r7
 8013c04:	f7ec fcf8 	bl	80005f8 <__aeabi_dmul>
 8013c08:	4b88      	ldr	r3, [pc, #544]	; (8013e2c <_dtoa_r+0x654>)
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	f7ec fb3e 	bl	800028c <__adddf3>
 8013c10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c18:	9303      	str	r3, [sp, #12]
 8013c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d15c      	bne.n	8013cda <_dtoa_r+0x502>
 8013c20:	4b83      	ldr	r3, [pc, #524]	; (8013e30 <_dtoa_r+0x658>)
 8013c22:	2200      	movs	r2, #0
 8013c24:	4630      	mov	r0, r6
 8013c26:	4639      	mov	r1, r7
 8013c28:	f7ec fb2e 	bl	8000288 <__aeabi_dsub>
 8013c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c30:	4606      	mov	r6, r0
 8013c32:	460f      	mov	r7, r1
 8013c34:	f7ec ff70 	bl	8000b18 <__aeabi_dcmpgt>
 8013c38:	2800      	cmp	r0, #0
 8013c3a:	f040 8296 	bne.w	801416a <_dtoa_r+0x992>
 8013c3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013c42:	4630      	mov	r0, r6
 8013c44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c48:	4639      	mov	r1, r7
 8013c4a:	f7ec ff47 	bl	8000adc <__aeabi_dcmplt>
 8013c4e:	2800      	cmp	r0, #0
 8013c50:	f040 8288 	bne.w	8014164 <_dtoa_r+0x98c>
 8013c54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013c58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	f2c0 8158 	blt.w	8013f14 <_dtoa_r+0x73c>
 8013c64:	f1ba 0f0e 	cmp.w	sl, #14
 8013c68:	f300 8154 	bgt.w	8013f14 <_dtoa_r+0x73c>
 8013c6c:	4b6b      	ldr	r3, [pc, #428]	; (8013e1c <_dtoa_r+0x644>)
 8013c6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013c72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	f280 80e3 	bge.w	8013e44 <_dtoa_r+0x66c>
 8013c7e:	9b01      	ldr	r3, [sp, #4]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	f300 80df 	bgt.w	8013e44 <_dtoa_r+0x66c>
 8013c86:	f040 826d 	bne.w	8014164 <_dtoa_r+0x98c>
 8013c8a:	4b69      	ldr	r3, [pc, #420]	; (8013e30 <_dtoa_r+0x658>)
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	4640      	mov	r0, r8
 8013c90:	4649      	mov	r1, r9
 8013c92:	f7ec fcb1 	bl	80005f8 <__aeabi_dmul>
 8013c96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c9a:	f7ec ff33 	bl	8000b04 <__aeabi_dcmpge>
 8013c9e:	9e01      	ldr	r6, [sp, #4]
 8013ca0:	4637      	mov	r7, r6
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	f040 8243 	bne.w	801412e <_dtoa_r+0x956>
 8013ca8:	9d00      	ldr	r5, [sp, #0]
 8013caa:	2331      	movs	r3, #49	; 0x31
 8013cac:	f805 3b01 	strb.w	r3, [r5], #1
 8013cb0:	f10a 0a01 	add.w	sl, sl, #1
 8013cb4:	e23f      	b.n	8014136 <_dtoa_r+0x95e>
 8013cb6:	07f2      	lsls	r2, r6, #31
 8013cb8:	d505      	bpl.n	8013cc6 <_dtoa_r+0x4ee>
 8013cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cbe:	f7ec fc9b 	bl	80005f8 <__aeabi_dmul>
 8013cc2:	3501      	adds	r5, #1
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	1076      	asrs	r6, r6, #1
 8013cc8:	3708      	adds	r7, #8
 8013cca:	e76c      	b.n	8013ba6 <_dtoa_r+0x3ce>
 8013ccc:	2502      	movs	r5, #2
 8013cce:	e76f      	b.n	8013bb0 <_dtoa_r+0x3d8>
 8013cd0:	9b01      	ldr	r3, [sp, #4]
 8013cd2:	f8cd a01c 	str.w	sl, [sp, #28]
 8013cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8013cd8:	e78d      	b.n	8013bf6 <_dtoa_r+0x41e>
 8013cda:	9900      	ldr	r1, [sp, #0]
 8013cdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013cde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ce0:	4b4e      	ldr	r3, [pc, #312]	; (8013e1c <_dtoa_r+0x644>)
 8013ce2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ce6:	4401      	add	r1, r0
 8013ce8:	9102      	str	r1, [sp, #8]
 8013cea:	9908      	ldr	r1, [sp, #32]
 8013cec:	eeb0 8a47 	vmov.f32	s16, s14
 8013cf0:	eef0 8a67 	vmov.f32	s17, s15
 8013cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013cf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013cfc:	2900      	cmp	r1, #0
 8013cfe:	d045      	beq.n	8013d8c <_dtoa_r+0x5b4>
 8013d00:	494c      	ldr	r1, [pc, #304]	; (8013e34 <_dtoa_r+0x65c>)
 8013d02:	2000      	movs	r0, #0
 8013d04:	f7ec fda2 	bl	800084c <__aeabi_ddiv>
 8013d08:	ec53 2b18 	vmov	r2, r3, d8
 8013d0c:	f7ec fabc 	bl	8000288 <__aeabi_dsub>
 8013d10:	9d00      	ldr	r5, [sp, #0]
 8013d12:	ec41 0b18 	vmov	d8, r0, r1
 8013d16:	4639      	mov	r1, r7
 8013d18:	4630      	mov	r0, r6
 8013d1a:	f7ec ff1d 	bl	8000b58 <__aeabi_d2iz>
 8013d1e:	900c      	str	r0, [sp, #48]	; 0x30
 8013d20:	f7ec fc00 	bl	8000524 <__aeabi_i2d>
 8013d24:	4602      	mov	r2, r0
 8013d26:	460b      	mov	r3, r1
 8013d28:	4630      	mov	r0, r6
 8013d2a:	4639      	mov	r1, r7
 8013d2c:	f7ec faac 	bl	8000288 <__aeabi_dsub>
 8013d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d32:	3330      	adds	r3, #48	; 0x30
 8013d34:	f805 3b01 	strb.w	r3, [r5], #1
 8013d38:	ec53 2b18 	vmov	r2, r3, d8
 8013d3c:	4606      	mov	r6, r0
 8013d3e:	460f      	mov	r7, r1
 8013d40:	f7ec fecc 	bl	8000adc <__aeabi_dcmplt>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	d165      	bne.n	8013e14 <_dtoa_r+0x63c>
 8013d48:	4632      	mov	r2, r6
 8013d4a:	463b      	mov	r3, r7
 8013d4c:	4935      	ldr	r1, [pc, #212]	; (8013e24 <_dtoa_r+0x64c>)
 8013d4e:	2000      	movs	r0, #0
 8013d50:	f7ec fa9a 	bl	8000288 <__aeabi_dsub>
 8013d54:	ec53 2b18 	vmov	r2, r3, d8
 8013d58:	f7ec fec0 	bl	8000adc <__aeabi_dcmplt>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	f040 80b9 	bne.w	8013ed4 <_dtoa_r+0x6fc>
 8013d62:	9b02      	ldr	r3, [sp, #8]
 8013d64:	429d      	cmp	r5, r3
 8013d66:	f43f af75 	beq.w	8013c54 <_dtoa_r+0x47c>
 8013d6a:	4b2f      	ldr	r3, [pc, #188]	; (8013e28 <_dtoa_r+0x650>)
 8013d6c:	ec51 0b18 	vmov	r0, r1, d8
 8013d70:	2200      	movs	r2, #0
 8013d72:	f7ec fc41 	bl	80005f8 <__aeabi_dmul>
 8013d76:	4b2c      	ldr	r3, [pc, #176]	; (8013e28 <_dtoa_r+0x650>)
 8013d78:	ec41 0b18 	vmov	d8, r0, r1
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	4630      	mov	r0, r6
 8013d80:	4639      	mov	r1, r7
 8013d82:	f7ec fc39 	bl	80005f8 <__aeabi_dmul>
 8013d86:	4606      	mov	r6, r0
 8013d88:	460f      	mov	r7, r1
 8013d8a:	e7c4      	b.n	8013d16 <_dtoa_r+0x53e>
 8013d8c:	ec51 0b17 	vmov	r0, r1, d7
 8013d90:	f7ec fc32 	bl	80005f8 <__aeabi_dmul>
 8013d94:	9b02      	ldr	r3, [sp, #8]
 8013d96:	9d00      	ldr	r5, [sp, #0]
 8013d98:	930c      	str	r3, [sp, #48]	; 0x30
 8013d9a:	ec41 0b18 	vmov	d8, r0, r1
 8013d9e:	4639      	mov	r1, r7
 8013da0:	4630      	mov	r0, r6
 8013da2:	f7ec fed9 	bl	8000b58 <__aeabi_d2iz>
 8013da6:	9011      	str	r0, [sp, #68]	; 0x44
 8013da8:	f7ec fbbc 	bl	8000524 <__aeabi_i2d>
 8013dac:	4602      	mov	r2, r0
 8013dae:	460b      	mov	r3, r1
 8013db0:	4630      	mov	r0, r6
 8013db2:	4639      	mov	r1, r7
 8013db4:	f7ec fa68 	bl	8000288 <__aeabi_dsub>
 8013db8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013dba:	3330      	adds	r3, #48	; 0x30
 8013dbc:	f805 3b01 	strb.w	r3, [r5], #1
 8013dc0:	9b02      	ldr	r3, [sp, #8]
 8013dc2:	429d      	cmp	r5, r3
 8013dc4:	4606      	mov	r6, r0
 8013dc6:	460f      	mov	r7, r1
 8013dc8:	f04f 0200 	mov.w	r2, #0
 8013dcc:	d134      	bne.n	8013e38 <_dtoa_r+0x660>
 8013dce:	4b19      	ldr	r3, [pc, #100]	; (8013e34 <_dtoa_r+0x65c>)
 8013dd0:	ec51 0b18 	vmov	r0, r1, d8
 8013dd4:	f7ec fa5a 	bl	800028c <__adddf3>
 8013dd8:	4602      	mov	r2, r0
 8013dda:	460b      	mov	r3, r1
 8013ddc:	4630      	mov	r0, r6
 8013dde:	4639      	mov	r1, r7
 8013de0:	f7ec fe9a 	bl	8000b18 <__aeabi_dcmpgt>
 8013de4:	2800      	cmp	r0, #0
 8013de6:	d175      	bne.n	8013ed4 <_dtoa_r+0x6fc>
 8013de8:	ec53 2b18 	vmov	r2, r3, d8
 8013dec:	4911      	ldr	r1, [pc, #68]	; (8013e34 <_dtoa_r+0x65c>)
 8013dee:	2000      	movs	r0, #0
 8013df0:	f7ec fa4a 	bl	8000288 <__aeabi_dsub>
 8013df4:	4602      	mov	r2, r0
 8013df6:	460b      	mov	r3, r1
 8013df8:	4630      	mov	r0, r6
 8013dfa:	4639      	mov	r1, r7
 8013dfc:	f7ec fe6e 	bl	8000adc <__aeabi_dcmplt>
 8013e00:	2800      	cmp	r0, #0
 8013e02:	f43f af27 	beq.w	8013c54 <_dtoa_r+0x47c>
 8013e06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013e08:	1e6b      	subs	r3, r5, #1
 8013e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8013e0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013e10:	2b30      	cmp	r3, #48	; 0x30
 8013e12:	d0f8      	beq.n	8013e06 <_dtoa_r+0x62e>
 8013e14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013e18:	e04a      	b.n	8013eb0 <_dtoa_r+0x6d8>
 8013e1a:	bf00      	nop
 8013e1c:	08016638 	.word	0x08016638
 8013e20:	08016610 	.word	0x08016610
 8013e24:	3ff00000 	.word	0x3ff00000
 8013e28:	40240000 	.word	0x40240000
 8013e2c:	401c0000 	.word	0x401c0000
 8013e30:	40140000 	.word	0x40140000
 8013e34:	3fe00000 	.word	0x3fe00000
 8013e38:	4baf      	ldr	r3, [pc, #700]	; (80140f8 <_dtoa_r+0x920>)
 8013e3a:	f7ec fbdd 	bl	80005f8 <__aeabi_dmul>
 8013e3e:	4606      	mov	r6, r0
 8013e40:	460f      	mov	r7, r1
 8013e42:	e7ac      	b.n	8013d9e <_dtoa_r+0x5c6>
 8013e44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013e48:	9d00      	ldr	r5, [sp, #0]
 8013e4a:	4642      	mov	r2, r8
 8013e4c:	464b      	mov	r3, r9
 8013e4e:	4630      	mov	r0, r6
 8013e50:	4639      	mov	r1, r7
 8013e52:	f7ec fcfb 	bl	800084c <__aeabi_ddiv>
 8013e56:	f7ec fe7f 	bl	8000b58 <__aeabi_d2iz>
 8013e5a:	9002      	str	r0, [sp, #8]
 8013e5c:	f7ec fb62 	bl	8000524 <__aeabi_i2d>
 8013e60:	4642      	mov	r2, r8
 8013e62:	464b      	mov	r3, r9
 8013e64:	f7ec fbc8 	bl	80005f8 <__aeabi_dmul>
 8013e68:	4602      	mov	r2, r0
 8013e6a:	460b      	mov	r3, r1
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	4639      	mov	r1, r7
 8013e70:	f7ec fa0a 	bl	8000288 <__aeabi_dsub>
 8013e74:	9e02      	ldr	r6, [sp, #8]
 8013e76:	9f01      	ldr	r7, [sp, #4]
 8013e78:	3630      	adds	r6, #48	; 0x30
 8013e7a:	f805 6b01 	strb.w	r6, [r5], #1
 8013e7e:	9e00      	ldr	r6, [sp, #0]
 8013e80:	1bae      	subs	r6, r5, r6
 8013e82:	42b7      	cmp	r7, r6
 8013e84:	4602      	mov	r2, r0
 8013e86:	460b      	mov	r3, r1
 8013e88:	d137      	bne.n	8013efa <_dtoa_r+0x722>
 8013e8a:	f7ec f9ff 	bl	800028c <__adddf3>
 8013e8e:	4642      	mov	r2, r8
 8013e90:	464b      	mov	r3, r9
 8013e92:	4606      	mov	r6, r0
 8013e94:	460f      	mov	r7, r1
 8013e96:	f7ec fe3f 	bl	8000b18 <__aeabi_dcmpgt>
 8013e9a:	b9c8      	cbnz	r0, 8013ed0 <_dtoa_r+0x6f8>
 8013e9c:	4642      	mov	r2, r8
 8013e9e:	464b      	mov	r3, r9
 8013ea0:	4630      	mov	r0, r6
 8013ea2:	4639      	mov	r1, r7
 8013ea4:	f7ec fe10 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ea8:	b110      	cbz	r0, 8013eb0 <_dtoa_r+0x6d8>
 8013eaa:	9b02      	ldr	r3, [sp, #8]
 8013eac:	07d9      	lsls	r1, r3, #31
 8013eae:	d40f      	bmi.n	8013ed0 <_dtoa_r+0x6f8>
 8013eb0:	4620      	mov	r0, r4
 8013eb2:	4659      	mov	r1, fp
 8013eb4:	f000 fc0c 	bl	80146d0 <_Bfree>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	702b      	strb	r3, [r5, #0]
 8013ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ebe:	f10a 0001 	add.w	r0, sl, #1
 8013ec2:	6018      	str	r0, [r3, #0]
 8013ec4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	f43f acd8 	beq.w	801387c <_dtoa_r+0xa4>
 8013ecc:	601d      	str	r5, [r3, #0]
 8013ece:	e4d5      	b.n	801387c <_dtoa_r+0xa4>
 8013ed0:	f8cd a01c 	str.w	sl, [sp, #28]
 8013ed4:	462b      	mov	r3, r5
 8013ed6:	461d      	mov	r5, r3
 8013ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013edc:	2a39      	cmp	r2, #57	; 0x39
 8013ede:	d108      	bne.n	8013ef2 <_dtoa_r+0x71a>
 8013ee0:	9a00      	ldr	r2, [sp, #0]
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d1f7      	bne.n	8013ed6 <_dtoa_r+0x6fe>
 8013ee6:	9a07      	ldr	r2, [sp, #28]
 8013ee8:	9900      	ldr	r1, [sp, #0]
 8013eea:	3201      	adds	r2, #1
 8013eec:	9207      	str	r2, [sp, #28]
 8013eee:	2230      	movs	r2, #48	; 0x30
 8013ef0:	700a      	strb	r2, [r1, #0]
 8013ef2:	781a      	ldrb	r2, [r3, #0]
 8013ef4:	3201      	adds	r2, #1
 8013ef6:	701a      	strb	r2, [r3, #0]
 8013ef8:	e78c      	b.n	8013e14 <_dtoa_r+0x63c>
 8013efa:	4b7f      	ldr	r3, [pc, #508]	; (80140f8 <_dtoa_r+0x920>)
 8013efc:	2200      	movs	r2, #0
 8013efe:	f7ec fb7b 	bl	80005f8 <__aeabi_dmul>
 8013f02:	2200      	movs	r2, #0
 8013f04:	2300      	movs	r3, #0
 8013f06:	4606      	mov	r6, r0
 8013f08:	460f      	mov	r7, r1
 8013f0a:	f7ec fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f0e:	2800      	cmp	r0, #0
 8013f10:	d09b      	beq.n	8013e4a <_dtoa_r+0x672>
 8013f12:	e7cd      	b.n	8013eb0 <_dtoa_r+0x6d8>
 8013f14:	9a08      	ldr	r2, [sp, #32]
 8013f16:	2a00      	cmp	r2, #0
 8013f18:	f000 80c4 	beq.w	80140a4 <_dtoa_r+0x8cc>
 8013f1c:	9a05      	ldr	r2, [sp, #20]
 8013f1e:	2a01      	cmp	r2, #1
 8013f20:	f300 80a8 	bgt.w	8014074 <_dtoa_r+0x89c>
 8013f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013f26:	2a00      	cmp	r2, #0
 8013f28:	f000 80a0 	beq.w	801406c <_dtoa_r+0x894>
 8013f2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013f30:	9e06      	ldr	r6, [sp, #24]
 8013f32:	4645      	mov	r5, r8
 8013f34:	9a04      	ldr	r2, [sp, #16]
 8013f36:	2101      	movs	r1, #1
 8013f38:	441a      	add	r2, r3
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	4498      	add	r8, r3
 8013f3e:	9204      	str	r2, [sp, #16]
 8013f40:	f000 fc82 	bl	8014848 <__i2b>
 8013f44:	4607      	mov	r7, r0
 8013f46:	2d00      	cmp	r5, #0
 8013f48:	dd0b      	ble.n	8013f62 <_dtoa_r+0x78a>
 8013f4a:	9b04      	ldr	r3, [sp, #16]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	dd08      	ble.n	8013f62 <_dtoa_r+0x78a>
 8013f50:	42ab      	cmp	r3, r5
 8013f52:	9a04      	ldr	r2, [sp, #16]
 8013f54:	bfa8      	it	ge
 8013f56:	462b      	movge	r3, r5
 8013f58:	eba8 0803 	sub.w	r8, r8, r3
 8013f5c:	1aed      	subs	r5, r5, r3
 8013f5e:	1ad3      	subs	r3, r2, r3
 8013f60:	9304      	str	r3, [sp, #16]
 8013f62:	9b06      	ldr	r3, [sp, #24]
 8013f64:	b1fb      	cbz	r3, 8013fa6 <_dtoa_r+0x7ce>
 8013f66:	9b08      	ldr	r3, [sp, #32]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	f000 809f 	beq.w	80140ac <_dtoa_r+0x8d4>
 8013f6e:	2e00      	cmp	r6, #0
 8013f70:	dd11      	ble.n	8013f96 <_dtoa_r+0x7be>
 8013f72:	4639      	mov	r1, r7
 8013f74:	4632      	mov	r2, r6
 8013f76:	4620      	mov	r0, r4
 8013f78:	f000 fd22 	bl	80149c0 <__pow5mult>
 8013f7c:	465a      	mov	r2, fp
 8013f7e:	4601      	mov	r1, r0
 8013f80:	4607      	mov	r7, r0
 8013f82:	4620      	mov	r0, r4
 8013f84:	f000 fc76 	bl	8014874 <__multiply>
 8013f88:	4659      	mov	r1, fp
 8013f8a:	9007      	str	r0, [sp, #28]
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	f000 fb9f 	bl	80146d0 <_Bfree>
 8013f92:	9b07      	ldr	r3, [sp, #28]
 8013f94:	469b      	mov	fp, r3
 8013f96:	9b06      	ldr	r3, [sp, #24]
 8013f98:	1b9a      	subs	r2, r3, r6
 8013f9a:	d004      	beq.n	8013fa6 <_dtoa_r+0x7ce>
 8013f9c:	4659      	mov	r1, fp
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	f000 fd0e 	bl	80149c0 <__pow5mult>
 8013fa4:	4683      	mov	fp, r0
 8013fa6:	2101      	movs	r1, #1
 8013fa8:	4620      	mov	r0, r4
 8013faa:	f000 fc4d 	bl	8014848 <__i2b>
 8013fae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	4606      	mov	r6, r0
 8013fb4:	dd7c      	ble.n	80140b0 <_dtoa_r+0x8d8>
 8013fb6:	461a      	mov	r2, r3
 8013fb8:	4601      	mov	r1, r0
 8013fba:	4620      	mov	r0, r4
 8013fbc:	f000 fd00 	bl	80149c0 <__pow5mult>
 8013fc0:	9b05      	ldr	r3, [sp, #20]
 8013fc2:	2b01      	cmp	r3, #1
 8013fc4:	4606      	mov	r6, r0
 8013fc6:	dd76      	ble.n	80140b6 <_dtoa_r+0x8de>
 8013fc8:	2300      	movs	r3, #0
 8013fca:	9306      	str	r3, [sp, #24]
 8013fcc:	6933      	ldr	r3, [r6, #16]
 8013fce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013fd2:	6918      	ldr	r0, [r3, #16]
 8013fd4:	f000 fbe8 	bl	80147a8 <__hi0bits>
 8013fd8:	f1c0 0020 	rsb	r0, r0, #32
 8013fdc:	9b04      	ldr	r3, [sp, #16]
 8013fde:	4418      	add	r0, r3
 8013fe0:	f010 001f 	ands.w	r0, r0, #31
 8013fe4:	f000 8086 	beq.w	80140f4 <_dtoa_r+0x91c>
 8013fe8:	f1c0 0320 	rsb	r3, r0, #32
 8013fec:	2b04      	cmp	r3, #4
 8013fee:	dd7f      	ble.n	80140f0 <_dtoa_r+0x918>
 8013ff0:	f1c0 001c 	rsb	r0, r0, #28
 8013ff4:	9b04      	ldr	r3, [sp, #16]
 8013ff6:	4403      	add	r3, r0
 8013ff8:	4480      	add	r8, r0
 8013ffa:	4405      	add	r5, r0
 8013ffc:	9304      	str	r3, [sp, #16]
 8013ffe:	f1b8 0f00 	cmp.w	r8, #0
 8014002:	dd05      	ble.n	8014010 <_dtoa_r+0x838>
 8014004:	4659      	mov	r1, fp
 8014006:	4642      	mov	r2, r8
 8014008:	4620      	mov	r0, r4
 801400a:	f000 fd33 	bl	8014a74 <__lshift>
 801400e:	4683      	mov	fp, r0
 8014010:	9b04      	ldr	r3, [sp, #16]
 8014012:	2b00      	cmp	r3, #0
 8014014:	dd05      	ble.n	8014022 <_dtoa_r+0x84a>
 8014016:	4631      	mov	r1, r6
 8014018:	461a      	mov	r2, r3
 801401a:	4620      	mov	r0, r4
 801401c:	f000 fd2a 	bl	8014a74 <__lshift>
 8014020:	4606      	mov	r6, r0
 8014022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014024:	2b00      	cmp	r3, #0
 8014026:	d069      	beq.n	80140fc <_dtoa_r+0x924>
 8014028:	4631      	mov	r1, r6
 801402a:	4658      	mov	r0, fp
 801402c:	f000 fd8e 	bl	8014b4c <__mcmp>
 8014030:	2800      	cmp	r0, #0
 8014032:	da63      	bge.n	80140fc <_dtoa_r+0x924>
 8014034:	2300      	movs	r3, #0
 8014036:	4659      	mov	r1, fp
 8014038:	220a      	movs	r2, #10
 801403a:	4620      	mov	r0, r4
 801403c:	f000 fb6a 	bl	8014714 <__multadd>
 8014040:	9b08      	ldr	r3, [sp, #32]
 8014042:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014046:	4683      	mov	fp, r0
 8014048:	2b00      	cmp	r3, #0
 801404a:	f000 818f 	beq.w	801436c <_dtoa_r+0xb94>
 801404e:	4639      	mov	r1, r7
 8014050:	2300      	movs	r3, #0
 8014052:	220a      	movs	r2, #10
 8014054:	4620      	mov	r0, r4
 8014056:	f000 fb5d 	bl	8014714 <__multadd>
 801405a:	f1b9 0f00 	cmp.w	r9, #0
 801405e:	4607      	mov	r7, r0
 8014060:	f300 808e 	bgt.w	8014180 <_dtoa_r+0x9a8>
 8014064:	9b05      	ldr	r3, [sp, #20]
 8014066:	2b02      	cmp	r3, #2
 8014068:	dc50      	bgt.n	801410c <_dtoa_r+0x934>
 801406a:	e089      	b.n	8014180 <_dtoa_r+0x9a8>
 801406c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801406e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014072:	e75d      	b.n	8013f30 <_dtoa_r+0x758>
 8014074:	9b01      	ldr	r3, [sp, #4]
 8014076:	1e5e      	subs	r6, r3, #1
 8014078:	9b06      	ldr	r3, [sp, #24]
 801407a:	42b3      	cmp	r3, r6
 801407c:	bfbf      	itttt	lt
 801407e:	9b06      	ldrlt	r3, [sp, #24]
 8014080:	9606      	strlt	r6, [sp, #24]
 8014082:	1af2      	sublt	r2, r6, r3
 8014084:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8014086:	bfb6      	itet	lt
 8014088:	189b      	addlt	r3, r3, r2
 801408a:	1b9e      	subge	r6, r3, r6
 801408c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801408e:	9b01      	ldr	r3, [sp, #4]
 8014090:	bfb8      	it	lt
 8014092:	2600      	movlt	r6, #0
 8014094:	2b00      	cmp	r3, #0
 8014096:	bfb5      	itete	lt
 8014098:	eba8 0503 	sublt.w	r5, r8, r3
 801409c:	9b01      	ldrge	r3, [sp, #4]
 801409e:	2300      	movlt	r3, #0
 80140a0:	4645      	movge	r5, r8
 80140a2:	e747      	b.n	8013f34 <_dtoa_r+0x75c>
 80140a4:	9e06      	ldr	r6, [sp, #24]
 80140a6:	9f08      	ldr	r7, [sp, #32]
 80140a8:	4645      	mov	r5, r8
 80140aa:	e74c      	b.n	8013f46 <_dtoa_r+0x76e>
 80140ac:	9a06      	ldr	r2, [sp, #24]
 80140ae:	e775      	b.n	8013f9c <_dtoa_r+0x7c4>
 80140b0:	9b05      	ldr	r3, [sp, #20]
 80140b2:	2b01      	cmp	r3, #1
 80140b4:	dc18      	bgt.n	80140e8 <_dtoa_r+0x910>
 80140b6:	9b02      	ldr	r3, [sp, #8]
 80140b8:	b9b3      	cbnz	r3, 80140e8 <_dtoa_r+0x910>
 80140ba:	9b03      	ldr	r3, [sp, #12]
 80140bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80140c0:	b9a3      	cbnz	r3, 80140ec <_dtoa_r+0x914>
 80140c2:	9b03      	ldr	r3, [sp, #12]
 80140c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80140c8:	0d1b      	lsrs	r3, r3, #20
 80140ca:	051b      	lsls	r3, r3, #20
 80140cc:	b12b      	cbz	r3, 80140da <_dtoa_r+0x902>
 80140ce:	9b04      	ldr	r3, [sp, #16]
 80140d0:	3301      	adds	r3, #1
 80140d2:	9304      	str	r3, [sp, #16]
 80140d4:	f108 0801 	add.w	r8, r8, #1
 80140d8:	2301      	movs	r3, #1
 80140da:	9306      	str	r3, [sp, #24]
 80140dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140de:	2b00      	cmp	r3, #0
 80140e0:	f47f af74 	bne.w	8013fcc <_dtoa_r+0x7f4>
 80140e4:	2001      	movs	r0, #1
 80140e6:	e779      	b.n	8013fdc <_dtoa_r+0x804>
 80140e8:	2300      	movs	r3, #0
 80140ea:	e7f6      	b.n	80140da <_dtoa_r+0x902>
 80140ec:	9b02      	ldr	r3, [sp, #8]
 80140ee:	e7f4      	b.n	80140da <_dtoa_r+0x902>
 80140f0:	d085      	beq.n	8013ffe <_dtoa_r+0x826>
 80140f2:	4618      	mov	r0, r3
 80140f4:	301c      	adds	r0, #28
 80140f6:	e77d      	b.n	8013ff4 <_dtoa_r+0x81c>
 80140f8:	40240000 	.word	0x40240000
 80140fc:	9b01      	ldr	r3, [sp, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	dc38      	bgt.n	8014174 <_dtoa_r+0x99c>
 8014102:	9b05      	ldr	r3, [sp, #20]
 8014104:	2b02      	cmp	r3, #2
 8014106:	dd35      	ble.n	8014174 <_dtoa_r+0x99c>
 8014108:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801410c:	f1b9 0f00 	cmp.w	r9, #0
 8014110:	d10d      	bne.n	801412e <_dtoa_r+0x956>
 8014112:	4631      	mov	r1, r6
 8014114:	464b      	mov	r3, r9
 8014116:	2205      	movs	r2, #5
 8014118:	4620      	mov	r0, r4
 801411a:	f000 fafb 	bl	8014714 <__multadd>
 801411e:	4601      	mov	r1, r0
 8014120:	4606      	mov	r6, r0
 8014122:	4658      	mov	r0, fp
 8014124:	f000 fd12 	bl	8014b4c <__mcmp>
 8014128:	2800      	cmp	r0, #0
 801412a:	f73f adbd 	bgt.w	8013ca8 <_dtoa_r+0x4d0>
 801412e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014130:	9d00      	ldr	r5, [sp, #0]
 8014132:	ea6f 0a03 	mvn.w	sl, r3
 8014136:	f04f 0800 	mov.w	r8, #0
 801413a:	4631      	mov	r1, r6
 801413c:	4620      	mov	r0, r4
 801413e:	f000 fac7 	bl	80146d0 <_Bfree>
 8014142:	2f00      	cmp	r7, #0
 8014144:	f43f aeb4 	beq.w	8013eb0 <_dtoa_r+0x6d8>
 8014148:	f1b8 0f00 	cmp.w	r8, #0
 801414c:	d005      	beq.n	801415a <_dtoa_r+0x982>
 801414e:	45b8      	cmp	r8, r7
 8014150:	d003      	beq.n	801415a <_dtoa_r+0x982>
 8014152:	4641      	mov	r1, r8
 8014154:	4620      	mov	r0, r4
 8014156:	f000 fabb 	bl	80146d0 <_Bfree>
 801415a:	4639      	mov	r1, r7
 801415c:	4620      	mov	r0, r4
 801415e:	f000 fab7 	bl	80146d0 <_Bfree>
 8014162:	e6a5      	b.n	8013eb0 <_dtoa_r+0x6d8>
 8014164:	2600      	movs	r6, #0
 8014166:	4637      	mov	r7, r6
 8014168:	e7e1      	b.n	801412e <_dtoa_r+0x956>
 801416a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801416c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014170:	4637      	mov	r7, r6
 8014172:	e599      	b.n	8013ca8 <_dtoa_r+0x4d0>
 8014174:	9b08      	ldr	r3, [sp, #32]
 8014176:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801417a:	2b00      	cmp	r3, #0
 801417c:	f000 80fd 	beq.w	801437a <_dtoa_r+0xba2>
 8014180:	2d00      	cmp	r5, #0
 8014182:	dd05      	ble.n	8014190 <_dtoa_r+0x9b8>
 8014184:	4639      	mov	r1, r7
 8014186:	462a      	mov	r2, r5
 8014188:	4620      	mov	r0, r4
 801418a:	f000 fc73 	bl	8014a74 <__lshift>
 801418e:	4607      	mov	r7, r0
 8014190:	9b06      	ldr	r3, [sp, #24]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d05c      	beq.n	8014250 <_dtoa_r+0xa78>
 8014196:	6879      	ldr	r1, [r7, #4]
 8014198:	4620      	mov	r0, r4
 801419a:	f000 fa59 	bl	8014650 <_Balloc>
 801419e:	4605      	mov	r5, r0
 80141a0:	b928      	cbnz	r0, 80141ae <_dtoa_r+0x9d6>
 80141a2:	4b80      	ldr	r3, [pc, #512]	; (80143a4 <_dtoa_r+0xbcc>)
 80141a4:	4602      	mov	r2, r0
 80141a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80141aa:	f7ff bb2e 	b.w	801380a <_dtoa_r+0x32>
 80141ae:	693a      	ldr	r2, [r7, #16]
 80141b0:	3202      	adds	r2, #2
 80141b2:	0092      	lsls	r2, r2, #2
 80141b4:	f107 010c 	add.w	r1, r7, #12
 80141b8:	300c      	adds	r0, #12
 80141ba:	f7fe fb52 	bl	8012862 <memcpy>
 80141be:	2201      	movs	r2, #1
 80141c0:	4629      	mov	r1, r5
 80141c2:	4620      	mov	r0, r4
 80141c4:	f000 fc56 	bl	8014a74 <__lshift>
 80141c8:	9b00      	ldr	r3, [sp, #0]
 80141ca:	3301      	adds	r3, #1
 80141cc:	9301      	str	r3, [sp, #4]
 80141ce:	9b00      	ldr	r3, [sp, #0]
 80141d0:	444b      	add	r3, r9
 80141d2:	9307      	str	r3, [sp, #28]
 80141d4:	9b02      	ldr	r3, [sp, #8]
 80141d6:	f003 0301 	and.w	r3, r3, #1
 80141da:	46b8      	mov	r8, r7
 80141dc:	9306      	str	r3, [sp, #24]
 80141de:	4607      	mov	r7, r0
 80141e0:	9b01      	ldr	r3, [sp, #4]
 80141e2:	4631      	mov	r1, r6
 80141e4:	3b01      	subs	r3, #1
 80141e6:	4658      	mov	r0, fp
 80141e8:	9302      	str	r3, [sp, #8]
 80141ea:	f7ff fa67 	bl	80136bc <quorem>
 80141ee:	4603      	mov	r3, r0
 80141f0:	3330      	adds	r3, #48	; 0x30
 80141f2:	9004      	str	r0, [sp, #16]
 80141f4:	4641      	mov	r1, r8
 80141f6:	4658      	mov	r0, fp
 80141f8:	9308      	str	r3, [sp, #32]
 80141fa:	f000 fca7 	bl	8014b4c <__mcmp>
 80141fe:	463a      	mov	r2, r7
 8014200:	4681      	mov	r9, r0
 8014202:	4631      	mov	r1, r6
 8014204:	4620      	mov	r0, r4
 8014206:	f000 fcbd 	bl	8014b84 <__mdiff>
 801420a:	68c2      	ldr	r2, [r0, #12]
 801420c:	9b08      	ldr	r3, [sp, #32]
 801420e:	4605      	mov	r5, r0
 8014210:	bb02      	cbnz	r2, 8014254 <_dtoa_r+0xa7c>
 8014212:	4601      	mov	r1, r0
 8014214:	4658      	mov	r0, fp
 8014216:	f000 fc99 	bl	8014b4c <__mcmp>
 801421a:	9b08      	ldr	r3, [sp, #32]
 801421c:	4602      	mov	r2, r0
 801421e:	4629      	mov	r1, r5
 8014220:	4620      	mov	r0, r4
 8014222:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014226:	f000 fa53 	bl	80146d0 <_Bfree>
 801422a:	9b05      	ldr	r3, [sp, #20]
 801422c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801422e:	9d01      	ldr	r5, [sp, #4]
 8014230:	ea43 0102 	orr.w	r1, r3, r2
 8014234:	9b06      	ldr	r3, [sp, #24]
 8014236:	430b      	orrs	r3, r1
 8014238:	9b08      	ldr	r3, [sp, #32]
 801423a:	d10d      	bne.n	8014258 <_dtoa_r+0xa80>
 801423c:	2b39      	cmp	r3, #57	; 0x39
 801423e:	d029      	beq.n	8014294 <_dtoa_r+0xabc>
 8014240:	f1b9 0f00 	cmp.w	r9, #0
 8014244:	dd01      	ble.n	801424a <_dtoa_r+0xa72>
 8014246:	9b04      	ldr	r3, [sp, #16]
 8014248:	3331      	adds	r3, #49	; 0x31
 801424a:	9a02      	ldr	r2, [sp, #8]
 801424c:	7013      	strb	r3, [r2, #0]
 801424e:	e774      	b.n	801413a <_dtoa_r+0x962>
 8014250:	4638      	mov	r0, r7
 8014252:	e7b9      	b.n	80141c8 <_dtoa_r+0x9f0>
 8014254:	2201      	movs	r2, #1
 8014256:	e7e2      	b.n	801421e <_dtoa_r+0xa46>
 8014258:	f1b9 0f00 	cmp.w	r9, #0
 801425c:	db06      	blt.n	801426c <_dtoa_r+0xa94>
 801425e:	9905      	ldr	r1, [sp, #20]
 8014260:	ea41 0909 	orr.w	r9, r1, r9
 8014264:	9906      	ldr	r1, [sp, #24]
 8014266:	ea59 0101 	orrs.w	r1, r9, r1
 801426a:	d120      	bne.n	80142ae <_dtoa_r+0xad6>
 801426c:	2a00      	cmp	r2, #0
 801426e:	ddec      	ble.n	801424a <_dtoa_r+0xa72>
 8014270:	4659      	mov	r1, fp
 8014272:	2201      	movs	r2, #1
 8014274:	4620      	mov	r0, r4
 8014276:	9301      	str	r3, [sp, #4]
 8014278:	f000 fbfc 	bl	8014a74 <__lshift>
 801427c:	4631      	mov	r1, r6
 801427e:	4683      	mov	fp, r0
 8014280:	f000 fc64 	bl	8014b4c <__mcmp>
 8014284:	2800      	cmp	r0, #0
 8014286:	9b01      	ldr	r3, [sp, #4]
 8014288:	dc02      	bgt.n	8014290 <_dtoa_r+0xab8>
 801428a:	d1de      	bne.n	801424a <_dtoa_r+0xa72>
 801428c:	07da      	lsls	r2, r3, #31
 801428e:	d5dc      	bpl.n	801424a <_dtoa_r+0xa72>
 8014290:	2b39      	cmp	r3, #57	; 0x39
 8014292:	d1d8      	bne.n	8014246 <_dtoa_r+0xa6e>
 8014294:	9a02      	ldr	r2, [sp, #8]
 8014296:	2339      	movs	r3, #57	; 0x39
 8014298:	7013      	strb	r3, [r2, #0]
 801429a:	462b      	mov	r3, r5
 801429c:	461d      	mov	r5, r3
 801429e:	3b01      	subs	r3, #1
 80142a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80142a4:	2a39      	cmp	r2, #57	; 0x39
 80142a6:	d050      	beq.n	801434a <_dtoa_r+0xb72>
 80142a8:	3201      	adds	r2, #1
 80142aa:	701a      	strb	r2, [r3, #0]
 80142ac:	e745      	b.n	801413a <_dtoa_r+0x962>
 80142ae:	2a00      	cmp	r2, #0
 80142b0:	dd03      	ble.n	80142ba <_dtoa_r+0xae2>
 80142b2:	2b39      	cmp	r3, #57	; 0x39
 80142b4:	d0ee      	beq.n	8014294 <_dtoa_r+0xabc>
 80142b6:	3301      	adds	r3, #1
 80142b8:	e7c7      	b.n	801424a <_dtoa_r+0xa72>
 80142ba:	9a01      	ldr	r2, [sp, #4]
 80142bc:	9907      	ldr	r1, [sp, #28]
 80142be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80142c2:	428a      	cmp	r2, r1
 80142c4:	d02a      	beq.n	801431c <_dtoa_r+0xb44>
 80142c6:	4659      	mov	r1, fp
 80142c8:	2300      	movs	r3, #0
 80142ca:	220a      	movs	r2, #10
 80142cc:	4620      	mov	r0, r4
 80142ce:	f000 fa21 	bl	8014714 <__multadd>
 80142d2:	45b8      	cmp	r8, r7
 80142d4:	4683      	mov	fp, r0
 80142d6:	f04f 0300 	mov.w	r3, #0
 80142da:	f04f 020a 	mov.w	r2, #10
 80142de:	4641      	mov	r1, r8
 80142e0:	4620      	mov	r0, r4
 80142e2:	d107      	bne.n	80142f4 <_dtoa_r+0xb1c>
 80142e4:	f000 fa16 	bl	8014714 <__multadd>
 80142e8:	4680      	mov	r8, r0
 80142ea:	4607      	mov	r7, r0
 80142ec:	9b01      	ldr	r3, [sp, #4]
 80142ee:	3301      	adds	r3, #1
 80142f0:	9301      	str	r3, [sp, #4]
 80142f2:	e775      	b.n	80141e0 <_dtoa_r+0xa08>
 80142f4:	f000 fa0e 	bl	8014714 <__multadd>
 80142f8:	4639      	mov	r1, r7
 80142fa:	4680      	mov	r8, r0
 80142fc:	2300      	movs	r3, #0
 80142fe:	220a      	movs	r2, #10
 8014300:	4620      	mov	r0, r4
 8014302:	f000 fa07 	bl	8014714 <__multadd>
 8014306:	4607      	mov	r7, r0
 8014308:	e7f0      	b.n	80142ec <_dtoa_r+0xb14>
 801430a:	f1b9 0f00 	cmp.w	r9, #0
 801430e:	9a00      	ldr	r2, [sp, #0]
 8014310:	bfcc      	ite	gt
 8014312:	464d      	movgt	r5, r9
 8014314:	2501      	movle	r5, #1
 8014316:	4415      	add	r5, r2
 8014318:	f04f 0800 	mov.w	r8, #0
 801431c:	4659      	mov	r1, fp
 801431e:	2201      	movs	r2, #1
 8014320:	4620      	mov	r0, r4
 8014322:	9301      	str	r3, [sp, #4]
 8014324:	f000 fba6 	bl	8014a74 <__lshift>
 8014328:	4631      	mov	r1, r6
 801432a:	4683      	mov	fp, r0
 801432c:	f000 fc0e 	bl	8014b4c <__mcmp>
 8014330:	2800      	cmp	r0, #0
 8014332:	dcb2      	bgt.n	801429a <_dtoa_r+0xac2>
 8014334:	d102      	bne.n	801433c <_dtoa_r+0xb64>
 8014336:	9b01      	ldr	r3, [sp, #4]
 8014338:	07db      	lsls	r3, r3, #31
 801433a:	d4ae      	bmi.n	801429a <_dtoa_r+0xac2>
 801433c:	462b      	mov	r3, r5
 801433e:	461d      	mov	r5, r3
 8014340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014344:	2a30      	cmp	r2, #48	; 0x30
 8014346:	d0fa      	beq.n	801433e <_dtoa_r+0xb66>
 8014348:	e6f7      	b.n	801413a <_dtoa_r+0x962>
 801434a:	9a00      	ldr	r2, [sp, #0]
 801434c:	429a      	cmp	r2, r3
 801434e:	d1a5      	bne.n	801429c <_dtoa_r+0xac4>
 8014350:	f10a 0a01 	add.w	sl, sl, #1
 8014354:	2331      	movs	r3, #49	; 0x31
 8014356:	e779      	b.n	801424c <_dtoa_r+0xa74>
 8014358:	4b13      	ldr	r3, [pc, #76]	; (80143a8 <_dtoa_r+0xbd0>)
 801435a:	f7ff baaf 	b.w	80138bc <_dtoa_r+0xe4>
 801435e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014360:	2b00      	cmp	r3, #0
 8014362:	f47f aa86 	bne.w	8013872 <_dtoa_r+0x9a>
 8014366:	4b11      	ldr	r3, [pc, #68]	; (80143ac <_dtoa_r+0xbd4>)
 8014368:	f7ff baa8 	b.w	80138bc <_dtoa_r+0xe4>
 801436c:	f1b9 0f00 	cmp.w	r9, #0
 8014370:	dc03      	bgt.n	801437a <_dtoa_r+0xba2>
 8014372:	9b05      	ldr	r3, [sp, #20]
 8014374:	2b02      	cmp	r3, #2
 8014376:	f73f aec9 	bgt.w	801410c <_dtoa_r+0x934>
 801437a:	9d00      	ldr	r5, [sp, #0]
 801437c:	4631      	mov	r1, r6
 801437e:	4658      	mov	r0, fp
 8014380:	f7ff f99c 	bl	80136bc <quorem>
 8014384:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014388:	f805 3b01 	strb.w	r3, [r5], #1
 801438c:	9a00      	ldr	r2, [sp, #0]
 801438e:	1aaa      	subs	r2, r5, r2
 8014390:	4591      	cmp	r9, r2
 8014392:	ddba      	ble.n	801430a <_dtoa_r+0xb32>
 8014394:	4659      	mov	r1, fp
 8014396:	2300      	movs	r3, #0
 8014398:	220a      	movs	r2, #10
 801439a:	4620      	mov	r0, r4
 801439c:	f000 f9ba 	bl	8014714 <__multadd>
 80143a0:	4683      	mov	fp, r0
 80143a2:	e7eb      	b.n	801437c <_dtoa_r+0xba4>
 80143a4:	0801659b 	.word	0x0801659b
 80143a8:	080164f4 	.word	0x080164f4
 80143ac:	08016518 	.word	0x08016518

080143b0 <__sflush_r>:
 80143b0:	898a      	ldrh	r2, [r1, #12]
 80143b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143b6:	4605      	mov	r5, r0
 80143b8:	0710      	lsls	r0, r2, #28
 80143ba:	460c      	mov	r4, r1
 80143bc:	d458      	bmi.n	8014470 <__sflush_r+0xc0>
 80143be:	684b      	ldr	r3, [r1, #4]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	dc05      	bgt.n	80143d0 <__sflush_r+0x20>
 80143c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	dc02      	bgt.n	80143d0 <__sflush_r+0x20>
 80143ca:	2000      	movs	r0, #0
 80143cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80143d2:	2e00      	cmp	r6, #0
 80143d4:	d0f9      	beq.n	80143ca <__sflush_r+0x1a>
 80143d6:	2300      	movs	r3, #0
 80143d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80143dc:	682f      	ldr	r7, [r5, #0]
 80143de:	602b      	str	r3, [r5, #0]
 80143e0:	d032      	beq.n	8014448 <__sflush_r+0x98>
 80143e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80143e4:	89a3      	ldrh	r3, [r4, #12]
 80143e6:	075a      	lsls	r2, r3, #29
 80143e8:	d505      	bpl.n	80143f6 <__sflush_r+0x46>
 80143ea:	6863      	ldr	r3, [r4, #4]
 80143ec:	1ac0      	subs	r0, r0, r3
 80143ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143f0:	b10b      	cbz	r3, 80143f6 <__sflush_r+0x46>
 80143f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80143f4:	1ac0      	subs	r0, r0, r3
 80143f6:	2300      	movs	r3, #0
 80143f8:	4602      	mov	r2, r0
 80143fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80143fc:	6a21      	ldr	r1, [r4, #32]
 80143fe:	4628      	mov	r0, r5
 8014400:	47b0      	blx	r6
 8014402:	1c43      	adds	r3, r0, #1
 8014404:	89a3      	ldrh	r3, [r4, #12]
 8014406:	d106      	bne.n	8014416 <__sflush_r+0x66>
 8014408:	6829      	ldr	r1, [r5, #0]
 801440a:	291d      	cmp	r1, #29
 801440c:	d82c      	bhi.n	8014468 <__sflush_r+0xb8>
 801440e:	4a2a      	ldr	r2, [pc, #168]	; (80144b8 <__sflush_r+0x108>)
 8014410:	40ca      	lsrs	r2, r1
 8014412:	07d6      	lsls	r6, r2, #31
 8014414:	d528      	bpl.n	8014468 <__sflush_r+0xb8>
 8014416:	2200      	movs	r2, #0
 8014418:	6062      	str	r2, [r4, #4]
 801441a:	04d9      	lsls	r1, r3, #19
 801441c:	6922      	ldr	r2, [r4, #16]
 801441e:	6022      	str	r2, [r4, #0]
 8014420:	d504      	bpl.n	801442c <__sflush_r+0x7c>
 8014422:	1c42      	adds	r2, r0, #1
 8014424:	d101      	bne.n	801442a <__sflush_r+0x7a>
 8014426:	682b      	ldr	r3, [r5, #0]
 8014428:	b903      	cbnz	r3, 801442c <__sflush_r+0x7c>
 801442a:	6560      	str	r0, [r4, #84]	; 0x54
 801442c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801442e:	602f      	str	r7, [r5, #0]
 8014430:	2900      	cmp	r1, #0
 8014432:	d0ca      	beq.n	80143ca <__sflush_r+0x1a>
 8014434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014438:	4299      	cmp	r1, r3
 801443a:	d002      	beq.n	8014442 <__sflush_r+0x92>
 801443c:	4628      	mov	r0, r5
 801443e:	f000 fc95 	bl	8014d6c <_free_r>
 8014442:	2000      	movs	r0, #0
 8014444:	6360      	str	r0, [r4, #52]	; 0x34
 8014446:	e7c1      	b.n	80143cc <__sflush_r+0x1c>
 8014448:	6a21      	ldr	r1, [r4, #32]
 801444a:	2301      	movs	r3, #1
 801444c:	4628      	mov	r0, r5
 801444e:	47b0      	blx	r6
 8014450:	1c41      	adds	r1, r0, #1
 8014452:	d1c7      	bne.n	80143e4 <__sflush_r+0x34>
 8014454:	682b      	ldr	r3, [r5, #0]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d0c4      	beq.n	80143e4 <__sflush_r+0x34>
 801445a:	2b1d      	cmp	r3, #29
 801445c:	d001      	beq.n	8014462 <__sflush_r+0xb2>
 801445e:	2b16      	cmp	r3, #22
 8014460:	d101      	bne.n	8014466 <__sflush_r+0xb6>
 8014462:	602f      	str	r7, [r5, #0]
 8014464:	e7b1      	b.n	80143ca <__sflush_r+0x1a>
 8014466:	89a3      	ldrh	r3, [r4, #12]
 8014468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801446c:	81a3      	strh	r3, [r4, #12]
 801446e:	e7ad      	b.n	80143cc <__sflush_r+0x1c>
 8014470:	690f      	ldr	r7, [r1, #16]
 8014472:	2f00      	cmp	r7, #0
 8014474:	d0a9      	beq.n	80143ca <__sflush_r+0x1a>
 8014476:	0793      	lsls	r3, r2, #30
 8014478:	680e      	ldr	r6, [r1, #0]
 801447a:	bf08      	it	eq
 801447c:	694b      	ldreq	r3, [r1, #20]
 801447e:	600f      	str	r7, [r1, #0]
 8014480:	bf18      	it	ne
 8014482:	2300      	movne	r3, #0
 8014484:	eba6 0807 	sub.w	r8, r6, r7
 8014488:	608b      	str	r3, [r1, #8]
 801448a:	f1b8 0f00 	cmp.w	r8, #0
 801448e:	dd9c      	ble.n	80143ca <__sflush_r+0x1a>
 8014490:	6a21      	ldr	r1, [r4, #32]
 8014492:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014494:	4643      	mov	r3, r8
 8014496:	463a      	mov	r2, r7
 8014498:	4628      	mov	r0, r5
 801449a:	47b0      	blx	r6
 801449c:	2800      	cmp	r0, #0
 801449e:	dc06      	bgt.n	80144ae <__sflush_r+0xfe>
 80144a0:	89a3      	ldrh	r3, [r4, #12]
 80144a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144a6:	81a3      	strh	r3, [r4, #12]
 80144a8:	f04f 30ff 	mov.w	r0, #4294967295
 80144ac:	e78e      	b.n	80143cc <__sflush_r+0x1c>
 80144ae:	4407      	add	r7, r0
 80144b0:	eba8 0800 	sub.w	r8, r8, r0
 80144b4:	e7e9      	b.n	801448a <__sflush_r+0xda>
 80144b6:	bf00      	nop
 80144b8:	20400001 	.word	0x20400001

080144bc <_fflush_r>:
 80144bc:	b538      	push	{r3, r4, r5, lr}
 80144be:	690b      	ldr	r3, [r1, #16]
 80144c0:	4605      	mov	r5, r0
 80144c2:	460c      	mov	r4, r1
 80144c4:	b913      	cbnz	r3, 80144cc <_fflush_r+0x10>
 80144c6:	2500      	movs	r5, #0
 80144c8:	4628      	mov	r0, r5
 80144ca:	bd38      	pop	{r3, r4, r5, pc}
 80144cc:	b118      	cbz	r0, 80144d6 <_fflush_r+0x1a>
 80144ce:	6983      	ldr	r3, [r0, #24]
 80144d0:	b90b      	cbnz	r3, 80144d6 <_fflush_r+0x1a>
 80144d2:	f7fe f901 	bl	80126d8 <__sinit>
 80144d6:	4b14      	ldr	r3, [pc, #80]	; (8014528 <_fflush_r+0x6c>)
 80144d8:	429c      	cmp	r4, r3
 80144da:	d11b      	bne.n	8014514 <_fflush_r+0x58>
 80144dc:	686c      	ldr	r4, [r5, #4]
 80144de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d0ef      	beq.n	80144c6 <_fflush_r+0xa>
 80144e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80144e8:	07d0      	lsls	r0, r2, #31
 80144ea:	d404      	bmi.n	80144f6 <_fflush_r+0x3a>
 80144ec:	0599      	lsls	r1, r3, #22
 80144ee:	d402      	bmi.n	80144f6 <_fflush_r+0x3a>
 80144f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144f2:	f7fe f9b4 	bl	801285e <__retarget_lock_acquire_recursive>
 80144f6:	4628      	mov	r0, r5
 80144f8:	4621      	mov	r1, r4
 80144fa:	f7ff ff59 	bl	80143b0 <__sflush_r>
 80144fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014500:	07da      	lsls	r2, r3, #31
 8014502:	4605      	mov	r5, r0
 8014504:	d4e0      	bmi.n	80144c8 <_fflush_r+0xc>
 8014506:	89a3      	ldrh	r3, [r4, #12]
 8014508:	059b      	lsls	r3, r3, #22
 801450a:	d4dd      	bmi.n	80144c8 <_fflush_r+0xc>
 801450c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801450e:	f7fe f9a7 	bl	8012860 <__retarget_lock_release_recursive>
 8014512:	e7d9      	b.n	80144c8 <_fflush_r+0xc>
 8014514:	4b05      	ldr	r3, [pc, #20]	; (801452c <_fflush_r+0x70>)
 8014516:	429c      	cmp	r4, r3
 8014518:	d101      	bne.n	801451e <_fflush_r+0x62>
 801451a:	68ac      	ldr	r4, [r5, #8]
 801451c:	e7df      	b.n	80144de <_fflush_r+0x22>
 801451e:	4b04      	ldr	r3, [pc, #16]	; (8014530 <_fflush_r+0x74>)
 8014520:	429c      	cmp	r4, r3
 8014522:	bf08      	it	eq
 8014524:	68ec      	ldreq	r4, [r5, #12]
 8014526:	e7da      	b.n	80144de <_fflush_r+0x22>
 8014528:	080164a0 	.word	0x080164a0
 801452c:	080164c0 	.word	0x080164c0
 8014530:	08016480 	.word	0x08016480

08014534 <_localeconv_r>:
 8014534:	4800      	ldr	r0, [pc, #0]	; (8014538 <_localeconv_r+0x4>)
 8014536:	4770      	bx	lr
 8014538:	20000664 	.word	0x20000664

0801453c <_lseek_r>:
 801453c:	b538      	push	{r3, r4, r5, lr}
 801453e:	4d07      	ldr	r5, [pc, #28]	; (801455c <_lseek_r+0x20>)
 8014540:	4604      	mov	r4, r0
 8014542:	4608      	mov	r0, r1
 8014544:	4611      	mov	r1, r2
 8014546:	2200      	movs	r2, #0
 8014548:	602a      	str	r2, [r5, #0]
 801454a:	461a      	mov	r2, r3
 801454c:	f7ed fe5a 	bl	8002204 <_lseek>
 8014550:	1c43      	adds	r3, r0, #1
 8014552:	d102      	bne.n	801455a <_lseek_r+0x1e>
 8014554:	682b      	ldr	r3, [r5, #0]
 8014556:	b103      	cbz	r3, 801455a <_lseek_r+0x1e>
 8014558:	6023      	str	r3, [r4, #0]
 801455a:	bd38      	pop	{r3, r4, r5, pc}
 801455c:	20010b2c 	.word	0x20010b2c

08014560 <__swhatbuf_r>:
 8014560:	b570      	push	{r4, r5, r6, lr}
 8014562:	460e      	mov	r6, r1
 8014564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014568:	2900      	cmp	r1, #0
 801456a:	b096      	sub	sp, #88	; 0x58
 801456c:	4614      	mov	r4, r2
 801456e:	461d      	mov	r5, r3
 8014570:	da07      	bge.n	8014582 <__swhatbuf_r+0x22>
 8014572:	2300      	movs	r3, #0
 8014574:	602b      	str	r3, [r5, #0]
 8014576:	89b3      	ldrh	r3, [r6, #12]
 8014578:	061a      	lsls	r2, r3, #24
 801457a:	d410      	bmi.n	801459e <__swhatbuf_r+0x3e>
 801457c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014580:	e00e      	b.n	80145a0 <__swhatbuf_r+0x40>
 8014582:	466a      	mov	r2, sp
 8014584:	f000 fde0 	bl	8015148 <_fstat_r>
 8014588:	2800      	cmp	r0, #0
 801458a:	dbf2      	blt.n	8014572 <__swhatbuf_r+0x12>
 801458c:	9a01      	ldr	r2, [sp, #4]
 801458e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014592:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014596:	425a      	negs	r2, r3
 8014598:	415a      	adcs	r2, r3
 801459a:	602a      	str	r2, [r5, #0]
 801459c:	e7ee      	b.n	801457c <__swhatbuf_r+0x1c>
 801459e:	2340      	movs	r3, #64	; 0x40
 80145a0:	2000      	movs	r0, #0
 80145a2:	6023      	str	r3, [r4, #0]
 80145a4:	b016      	add	sp, #88	; 0x58
 80145a6:	bd70      	pop	{r4, r5, r6, pc}

080145a8 <__smakebuf_r>:
 80145a8:	898b      	ldrh	r3, [r1, #12]
 80145aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145ac:	079d      	lsls	r5, r3, #30
 80145ae:	4606      	mov	r6, r0
 80145b0:	460c      	mov	r4, r1
 80145b2:	d507      	bpl.n	80145c4 <__smakebuf_r+0x1c>
 80145b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145b8:	6023      	str	r3, [r4, #0]
 80145ba:	6123      	str	r3, [r4, #16]
 80145bc:	2301      	movs	r3, #1
 80145be:	6163      	str	r3, [r4, #20]
 80145c0:	b002      	add	sp, #8
 80145c2:	bd70      	pop	{r4, r5, r6, pc}
 80145c4:	ab01      	add	r3, sp, #4
 80145c6:	466a      	mov	r2, sp
 80145c8:	f7ff ffca 	bl	8014560 <__swhatbuf_r>
 80145cc:	9900      	ldr	r1, [sp, #0]
 80145ce:	4605      	mov	r5, r0
 80145d0:	4630      	mov	r0, r6
 80145d2:	f7fe f95d 	bl	8012890 <_malloc_r>
 80145d6:	b948      	cbnz	r0, 80145ec <__smakebuf_r+0x44>
 80145d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145dc:	059a      	lsls	r2, r3, #22
 80145de:	d4ef      	bmi.n	80145c0 <__smakebuf_r+0x18>
 80145e0:	f023 0303 	bic.w	r3, r3, #3
 80145e4:	f043 0302 	orr.w	r3, r3, #2
 80145e8:	81a3      	strh	r3, [r4, #12]
 80145ea:	e7e3      	b.n	80145b4 <__smakebuf_r+0xc>
 80145ec:	4b0d      	ldr	r3, [pc, #52]	; (8014624 <__smakebuf_r+0x7c>)
 80145ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80145f0:	89a3      	ldrh	r3, [r4, #12]
 80145f2:	6020      	str	r0, [r4, #0]
 80145f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145f8:	81a3      	strh	r3, [r4, #12]
 80145fa:	9b00      	ldr	r3, [sp, #0]
 80145fc:	6163      	str	r3, [r4, #20]
 80145fe:	9b01      	ldr	r3, [sp, #4]
 8014600:	6120      	str	r0, [r4, #16]
 8014602:	b15b      	cbz	r3, 801461c <__smakebuf_r+0x74>
 8014604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014608:	4630      	mov	r0, r6
 801460a:	f000 fdaf 	bl	801516c <_isatty_r>
 801460e:	b128      	cbz	r0, 801461c <__smakebuf_r+0x74>
 8014610:	89a3      	ldrh	r3, [r4, #12]
 8014612:	f023 0303 	bic.w	r3, r3, #3
 8014616:	f043 0301 	orr.w	r3, r3, #1
 801461a:	81a3      	strh	r3, [r4, #12]
 801461c:	89a0      	ldrh	r0, [r4, #12]
 801461e:	4305      	orrs	r5, r0
 8014620:	81a5      	strh	r5, [r4, #12]
 8014622:	e7cd      	b.n	80145c0 <__smakebuf_r+0x18>
 8014624:	08012671 	.word	0x08012671

08014628 <malloc>:
 8014628:	4b02      	ldr	r3, [pc, #8]	; (8014634 <malloc+0xc>)
 801462a:	4601      	mov	r1, r0
 801462c:	6818      	ldr	r0, [r3, #0]
 801462e:	f7fe b92f 	b.w	8012890 <_malloc_r>
 8014632:	bf00      	nop
 8014634:	20000510 	.word	0x20000510

08014638 <__malloc_lock>:
 8014638:	4801      	ldr	r0, [pc, #4]	; (8014640 <__malloc_lock+0x8>)
 801463a:	f7fe b910 	b.w	801285e <__retarget_lock_acquire_recursive>
 801463e:	bf00      	nop
 8014640:	20010b24 	.word	0x20010b24

08014644 <__malloc_unlock>:
 8014644:	4801      	ldr	r0, [pc, #4]	; (801464c <__malloc_unlock+0x8>)
 8014646:	f7fe b90b 	b.w	8012860 <__retarget_lock_release_recursive>
 801464a:	bf00      	nop
 801464c:	20010b24 	.word	0x20010b24

08014650 <_Balloc>:
 8014650:	b570      	push	{r4, r5, r6, lr}
 8014652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014654:	4604      	mov	r4, r0
 8014656:	460d      	mov	r5, r1
 8014658:	b976      	cbnz	r6, 8014678 <_Balloc+0x28>
 801465a:	2010      	movs	r0, #16
 801465c:	f7ff ffe4 	bl	8014628 <malloc>
 8014660:	4602      	mov	r2, r0
 8014662:	6260      	str	r0, [r4, #36]	; 0x24
 8014664:	b920      	cbnz	r0, 8014670 <_Balloc+0x20>
 8014666:	4b18      	ldr	r3, [pc, #96]	; (80146c8 <_Balloc+0x78>)
 8014668:	4818      	ldr	r0, [pc, #96]	; (80146cc <_Balloc+0x7c>)
 801466a:	2166      	movs	r1, #102	; 0x66
 801466c:	f000 fd3c 	bl	80150e8 <__assert_func>
 8014670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014674:	6006      	str	r6, [r0, #0]
 8014676:	60c6      	str	r6, [r0, #12]
 8014678:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801467a:	68f3      	ldr	r3, [r6, #12]
 801467c:	b183      	cbz	r3, 80146a0 <_Balloc+0x50>
 801467e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014680:	68db      	ldr	r3, [r3, #12]
 8014682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014686:	b9b8      	cbnz	r0, 80146b8 <_Balloc+0x68>
 8014688:	2101      	movs	r1, #1
 801468a:	fa01 f605 	lsl.w	r6, r1, r5
 801468e:	1d72      	adds	r2, r6, #5
 8014690:	0092      	lsls	r2, r2, #2
 8014692:	4620      	mov	r0, r4
 8014694:	f000 fb5a 	bl	8014d4c <_calloc_r>
 8014698:	b160      	cbz	r0, 80146b4 <_Balloc+0x64>
 801469a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801469e:	e00e      	b.n	80146be <_Balloc+0x6e>
 80146a0:	2221      	movs	r2, #33	; 0x21
 80146a2:	2104      	movs	r1, #4
 80146a4:	4620      	mov	r0, r4
 80146a6:	f000 fb51 	bl	8014d4c <_calloc_r>
 80146aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80146ac:	60f0      	str	r0, [r6, #12]
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d1e4      	bne.n	801467e <_Balloc+0x2e>
 80146b4:	2000      	movs	r0, #0
 80146b6:	bd70      	pop	{r4, r5, r6, pc}
 80146b8:	6802      	ldr	r2, [r0, #0]
 80146ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80146be:	2300      	movs	r3, #0
 80146c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80146c4:	e7f7      	b.n	80146b6 <_Balloc+0x66>
 80146c6:	bf00      	nop
 80146c8:	08016525 	.word	0x08016525
 80146cc:	080165ac 	.word	0x080165ac

080146d0 <_Bfree>:
 80146d0:	b570      	push	{r4, r5, r6, lr}
 80146d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80146d4:	4605      	mov	r5, r0
 80146d6:	460c      	mov	r4, r1
 80146d8:	b976      	cbnz	r6, 80146f8 <_Bfree+0x28>
 80146da:	2010      	movs	r0, #16
 80146dc:	f7ff ffa4 	bl	8014628 <malloc>
 80146e0:	4602      	mov	r2, r0
 80146e2:	6268      	str	r0, [r5, #36]	; 0x24
 80146e4:	b920      	cbnz	r0, 80146f0 <_Bfree+0x20>
 80146e6:	4b09      	ldr	r3, [pc, #36]	; (801470c <_Bfree+0x3c>)
 80146e8:	4809      	ldr	r0, [pc, #36]	; (8014710 <_Bfree+0x40>)
 80146ea:	218a      	movs	r1, #138	; 0x8a
 80146ec:	f000 fcfc 	bl	80150e8 <__assert_func>
 80146f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80146f4:	6006      	str	r6, [r0, #0]
 80146f6:	60c6      	str	r6, [r0, #12]
 80146f8:	b13c      	cbz	r4, 801470a <_Bfree+0x3a>
 80146fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80146fc:	6862      	ldr	r2, [r4, #4]
 80146fe:	68db      	ldr	r3, [r3, #12]
 8014700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014704:	6021      	str	r1, [r4, #0]
 8014706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801470a:	bd70      	pop	{r4, r5, r6, pc}
 801470c:	08016525 	.word	0x08016525
 8014710:	080165ac 	.word	0x080165ac

08014714 <__multadd>:
 8014714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014718:	690e      	ldr	r6, [r1, #16]
 801471a:	4607      	mov	r7, r0
 801471c:	4698      	mov	r8, r3
 801471e:	460c      	mov	r4, r1
 8014720:	f101 0014 	add.w	r0, r1, #20
 8014724:	2300      	movs	r3, #0
 8014726:	6805      	ldr	r5, [r0, #0]
 8014728:	b2a9      	uxth	r1, r5
 801472a:	fb02 8101 	mla	r1, r2, r1, r8
 801472e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014732:	0c2d      	lsrs	r5, r5, #16
 8014734:	fb02 c505 	mla	r5, r2, r5, ip
 8014738:	b289      	uxth	r1, r1
 801473a:	3301      	adds	r3, #1
 801473c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014740:	429e      	cmp	r6, r3
 8014742:	f840 1b04 	str.w	r1, [r0], #4
 8014746:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801474a:	dcec      	bgt.n	8014726 <__multadd+0x12>
 801474c:	f1b8 0f00 	cmp.w	r8, #0
 8014750:	d022      	beq.n	8014798 <__multadd+0x84>
 8014752:	68a3      	ldr	r3, [r4, #8]
 8014754:	42b3      	cmp	r3, r6
 8014756:	dc19      	bgt.n	801478c <__multadd+0x78>
 8014758:	6861      	ldr	r1, [r4, #4]
 801475a:	4638      	mov	r0, r7
 801475c:	3101      	adds	r1, #1
 801475e:	f7ff ff77 	bl	8014650 <_Balloc>
 8014762:	4605      	mov	r5, r0
 8014764:	b928      	cbnz	r0, 8014772 <__multadd+0x5e>
 8014766:	4602      	mov	r2, r0
 8014768:	4b0d      	ldr	r3, [pc, #52]	; (80147a0 <__multadd+0x8c>)
 801476a:	480e      	ldr	r0, [pc, #56]	; (80147a4 <__multadd+0x90>)
 801476c:	21b5      	movs	r1, #181	; 0xb5
 801476e:	f000 fcbb 	bl	80150e8 <__assert_func>
 8014772:	6922      	ldr	r2, [r4, #16]
 8014774:	3202      	adds	r2, #2
 8014776:	f104 010c 	add.w	r1, r4, #12
 801477a:	0092      	lsls	r2, r2, #2
 801477c:	300c      	adds	r0, #12
 801477e:	f7fe f870 	bl	8012862 <memcpy>
 8014782:	4621      	mov	r1, r4
 8014784:	4638      	mov	r0, r7
 8014786:	f7ff ffa3 	bl	80146d0 <_Bfree>
 801478a:	462c      	mov	r4, r5
 801478c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014790:	3601      	adds	r6, #1
 8014792:	f8c3 8014 	str.w	r8, [r3, #20]
 8014796:	6126      	str	r6, [r4, #16]
 8014798:	4620      	mov	r0, r4
 801479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801479e:	bf00      	nop
 80147a0:	0801659b 	.word	0x0801659b
 80147a4:	080165ac 	.word	0x080165ac

080147a8 <__hi0bits>:
 80147a8:	0c03      	lsrs	r3, r0, #16
 80147aa:	041b      	lsls	r3, r3, #16
 80147ac:	b9d3      	cbnz	r3, 80147e4 <__hi0bits+0x3c>
 80147ae:	0400      	lsls	r0, r0, #16
 80147b0:	2310      	movs	r3, #16
 80147b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80147b6:	bf04      	itt	eq
 80147b8:	0200      	lsleq	r0, r0, #8
 80147ba:	3308      	addeq	r3, #8
 80147bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80147c0:	bf04      	itt	eq
 80147c2:	0100      	lsleq	r0, r0, #4
 80147c4:	3304      	addeq	r3, #4
 80147c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80147ca:	bf04      	itt	eq
 80147cc:	0080      	lsleq	r0, r0, #2
 80147ce:	3302      	addeq	r3, #2
 80147d0:	2800      	cmp	r0, #0
 80147d2:	db05      	blt.n	80147e0 <__hi0bits+0x38>
 80147d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80147d8:	f103 0301 	add.w	r3, r3, #1
 80147dc:	bf08      	it	eq
 80147de:	2320      	moveq	r3, #32
 80147e0:	4618      	mov	r0, r3
 80147e2:	4770      	bx	lr
 80147e4:	2300      	movs	r3, #0
 80147e6:	e7e4      	b.n	80147b2 <__hi0bits+0xa>

080147e8 <__lo0bits>:
 80147e8:	6803      	ldr	r3, [r0, #0]
 80147ea:	f013 0207 	ands.w	r2, r3, #7
 80147ee:	4601      	mov	r1, r0
 80147f0:	d00b      	beq.n	801480a <__lo0bits+0x22>
 80147f2:	07da      	lsls	r2, r3, #31
 80147f4:	d424      	bmi.n	8014840 <__lo0bits+0x58>
 80147f6:	0798      	lsls	r0, r3, #30
 80147f8:	bf49      	itett	mi
 80147fa:	085b      	lsrmi	r3, r3, #1
 80147fc:	089b      	lsrpl	r3, r3, #2
 80147fe:	2001      	movmi	r0, #1
 8014800:	600b      	strmi	r3, [r1, #0]
 8014802:	bf5c      	itt	pl
 8014804:	600b      	strpl	r3, [r1, #0]
 8014806:	2002      	movpl	r0, #2
 8014808:	4770      	bx	lr
 801480a:	b298      	uxth	r0, r3
 801480c:	b9b0      	cbnz	r0, 801483c <__lo0bits+0x54>
 801480e:	0c1b      	lsrs	r3, r3, #16
 8014810:	2010      	movs	r0, #16
 8014812:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014816:	bf04      	itt	eq
 8014818:	0a1b      	lsreq	r3, r3, #8
 801481a:	3008      	addeq	r0, #8
 801481c:	071a      	lsls	r2, r3, #28
 801481e:	bf04      	itt	eq
 8014820:	091b      	lsreq	r3, r3, #4
 8014822:	3004      	addeq	r0, #4
 8014824:	079a      	lsls	r2, r3, #30
 8014826:	bf04      	itt	eq
 8014828:	089b      	lsreq	r3, r3, #2
 801482a:	3002      	addeq	r0, #2
 801482c:	07da      	lsls	r2, r3, #31
 801482e:	d403      	bmi.n	8014838 <__lo0bits+0x50>
 8014830:	085b      	lsrs	r3, r3, #1
 8014832:	f100 0001 	add.w	r0, r0, #1
 8014836:	d005      	beq.n	8014844 <__lo0bits+0x5c>
 8014838:	600b      	str	r3, [r1, #0]
 801483a:	4770      	bx	lr
 801483c:	4610      	mov	r0, r2
 801483e:	e7e8      	b.n	8014812 <__lo0bits+0x2a>
 8014840:	2000      	movs	r0, #0
 8014842:	4770      	bx	lr
 8014844:	2020      	movs	r0, #32
 8014846:	4770      	bx	lr

08014848 <__i2b>:
 8014848:	b510      	push	{r4, lr}
 801484a:	460c      	mov	r4, r1
 801484c:	2101      	movs	r1, #1
 801484e:	f7ff feff 	bl	8014650 <_Balloc>
 8014852:	4602      	mov	r2, r0
 8014854:	b928      	cbnz	r0, 8014862 <__i2b+0x1a>
 8014856:	4b05      	ldr	r3, [pc, #20]	; (801486c <__i2b+0x24>)
 8014858:	4805      	ldr	r0, [pc, #20]	; (8014870 <__i2b+0x28>)
 801485a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801485e:	f000 fc43 	bl	80150e8 <__assert_func>
 8014862:	2301      	movs	r3, #1
 8014864:	6144      	str	r4, [r0, #20]
 8014866:	6103      	str	r3, [r0, #16]
 8014868:	bd10      	pop	{r4, pc}
 801486a:	bf00      	nop
 801486c:	0801659b 	.word	0x0801659b
 8014870:	080165ac 	.word	0x080165ac

08014874 <__multiply>:
 8014874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014878:	4614      	mov	r4, r2
 801487a:	690a      	ldr	r2, [r1, #16]
 801487c:	6923      	ldr	r3, [r4, #16]
 801487e:	429a      	cmp	r2, r3
 8014880:	bfb8      	it	lt
 8014882:	460b      	movlt	r3, r1
 8014884:	460d      	mov	r5, r1
 8014886:	bfbc      	itt	lt
 8014888:	4625      	movlt	r5, r4
 801488a:	461c      	movlt	r4, r3
 801488c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014890:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014894:	68ab      	ldr	r3, [r5, #8]
 8014896:	6869      	ldr	r1, [r5, #4]
 8014898:	eb0a 0709 	add.w	r7, sl, r9
 801489c:	42bb      	cmp	r3, r7
 801489e:	b085      	sub	sp, #20
 80148a0:	bfb8      	it	lt
 80148a2:	3101      	addlt	r1, #1
 80148a4:	f7ff fed4 	bl	8014650 <_Balloc>
 80148a8:	b930      	cbnz	r0, 80148b8 <__multiply+0x44>
 80148aa:	4602      	mov	r2, r0
 80148ac:	4b42      	ldr	r3, [pc, #264]	; (80149b8 <__multiply+0x144>)
 80148ae:	4843      	ldr	r0, [pc, #268]	; (80149bc <__multiply+0x148>)
 80148b0:	f240 115d 	movw	r1, #349	; 0x15d
 80148b4:	f000 fc18 	bl	80150e8 <__assert_func>
 80148b8:	f100 0614 	add.w	r6, r0, #20
 80148bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80148c0:	4633      	mov	r3, r6
 80148c2:	2200      	movs	r2, #0
 80148c4:	4543      	cmp	r3, r8
 80148c6:	d31e      	bcc.n	8014906 <__multiply+0x92>
 80148c8:	f105 0c14 	add.w	ip, r5, #20
 80148cc:	f104 0314 	add.w	r3, r4, #20
 80148d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80148d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80148d8:	9202      	str	r2, [sp, #8]
 80148da:	ebac 0205 	sub.w	r2, ip, r5
 80148de:	3a15      	subs	r2, #21
 80148e0:	f022 0203 	bic.w	r2, r2, #3
 80148e4:	3204      	adds	r2, #4
 80148e6:	f105 0115 	add.w	r1, r5, #21
 80148ea:	458c      	cmp	ip, r1
 80148ec:	bf38      	it	cc
 80148ee:	2204      	movcc	r2, #4
 80148f0:	9201      	str	r2, [sp, #4]
 80148f2:	9a02      	ldr	r2, [sp, #8]
 80148f4:	9303      	str	r3, [sp, #12]
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d808      	bhi.n	801490c <__multiply+0x98>
 80148fa:	2f00      	cmp	r7, #0
 80148fc:	dc55      	bgt.n	80149aa <__multiply+0x136>
 80148fe:	6107      	str	r7, [r0, #16]
 8014900:	b005      	add	sp, #20
 8014902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014906:	f843 2b04 	str.w	r2, [r3], #4
 801490a:	e7db      	b.n	80148c4 <__multiply+0x50>
 801490c:	f8b3 a000 	ldrh.w	sl, [r3]
 8014910:	f1ba 0f00 	cmp.w	sl, #0
 8014914:	d020      	beq.n	8014958 <__multiply+0xe4>
 8014916:	f105 0e14 	add.w	lr, r5, #20
 801491a:	46b1      	mov	r9, r6
 801491c:	2200      	movs	r2, #0
 801491e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014922:	f8d9 b000 	ldr.w	fp, [r9]
 8014926:	b2a1      	uxth	r1, r4
 8014928:	fa1f fb8b 	uxth.w	fp, fp
 801492c:	fb0a b101 	mla	r1, sl, r1, fp
 8014930:	4411      	add	r1, r2
 8014932:	f8d9 2000 	ldr.w	r2, [r9]
 8014936:	0c24      	lsrs	r4, r4, #16
 8014938:	0c12      	lsrs	r2, r2, #16
 801493a:	fb0a 2404 	mla	r4, sl, r4, r2
 801493e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014942:	b289      	uxth	r1, r1
 8014944:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014948:	45f4      	cmp	ip, lr
 801494a:	f849 1b04 	str.w	r1, [r9], #4
 801494e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014952:	d8e4      	bhi.n	801491e <__multiply+0xaa>
 8014954:	9901      	ldr	r1, [sp, #4]
 8014956:	5072      	str	r2, [r6, r1]
 8014958:	9a03      	ldr	r2, [sp, #12]
 801495a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801495e:	3304      	adds	r3, #4
 8014960:	f1b9 0f00 	cmp.w	r9, #0
 8014964:	d01f      	beq.n	80149a6 <__multiply+0x132>
 8014966:	6834      	ldr	r4, [r6, #0]
 8014968:	f105 0114 	add.w	r1, r5, #20
 801496c:	46b6      	mov	lr, r6
 801496e:	f04f 0a00 	mov.w	sl, #0
 8014972:	880a      	ldrh	r2, [r1, #0]
 8014974:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014978:	fb09 b202 	mla	r2, r9, r2, fp
 801497c:	4492      	add	sl, r2
 801497e:	b2a4      	uxth	r4, r4
 8014980:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014984:	f84e 4b04 	str.w	r4, [lr], #4
 8014988:	f851 4b04 	ldr.w	r4, [r1], #4
 801498c:	f8be 2000 	ldrh.w	r2, [lr]
 8014990:	0c24      	lsrs	r4, r4, #16
 8014992:	fb09 2404 	mla	r4, r9, r4, r2
 8014996:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801499a:	458c      	cmp	ip, r1
 801499c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80149a0:	d8e7      	bhi.n	8014972 <__multiply+0xfe>
 80149a2:	9a01      	ldr	r2, [sp, #4]
 80149a4:	50b4      	str	r4, [r6, r2]
 80149a6:	3604      	adds	r6, #4
 80149a8:	e7a3      	b.n	80148f2 <__multiply+0x7e>
 80149aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d1a5      	bne.n	80148fe <__multiply+0x8a>
 80149b2:	3f01      	subs	r7, #1
 80149b4:	e7a1      	b.n	80148fa <__multiply+0x86>
 80149b6:	bf00      	nop
 80149b8:	0801659b 	.word	0x0801659b
 80149bc:	080165ac 	.word	0x080165ac

080149c0 <__pow5mult>:
 80149c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149c4:	4615      	mov	r5, r2
 80149c6:	f012 0203 	ands.w	r2, r2, #3
 80149ca:	4606      	mov	r6, r0
 80149cc:	460f      	mov	r7, r1
 80149ce:	d007      	beq.n	80149e0 <__pow5mult+0x20>
 80149d0:	4c25      	ldr	r4, [pc, #148]	; (8014a68 <__pow5mult+0xa8>)
 80149d2:	3a01      	subs	r2, #1
 80149d4:	2300      	movs	r3, #0
 80149d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80149da:	f7ff fe9b 	bl	8014714 <__multadd>
 80149de:	4607      	mov	r7, r0
 80149e0:	10ad      	asrs	r5, r5, #2
 80149e2:	d03d      	beq.n	8014a60 <__pow5mult+0xa0>
 80149e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80149e6:	b97c      	cbnz	r4, 8014a08 <__pow5mult+0x48>
 80149e8:	2010      	movs	r0, #16
 80149ea:	f7ff fe1d 	bl	8014628 <malloc>
 80149ee:	4602      	mov	r2, r0
 80149f0:	6270      	str	r0, [r6, #36]	; 0x24
 80149f2:	b928      	cbnz	r0, 8014a00 <__pow5mult+0x40>
 80149f4:	4b1d      	ldr	r3, [pc, #116]	; (8014a6c <__pow5mult+0xac>)
 80149f6:	481e      	ldr	r0, [pc, #120]	; (8014a70 <__pow5mult+0xb0>)
 80149f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80149fc:	f000 fb74 	bl	80150e8 <__assert_func>
 8014a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014a04:	6004      	str	r4, [r0, #0]
 8014a06:	60c4      	str	r4, [r0, #12]
 8014a08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014a10:	b94c      	cbnz	r4, 8014a26 <__pow5mult+0x66>
 8014a12:	f240 2171 	movw	r1, #625	; 0x271
 8014a16:	4630      	mov	r0, r6
 8014a18:	f7ff ff16 	bl	8014848 <__i2b>
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014a22:	4604      	mov	r4, r0
 8014a24:	6003      	str	r3, [r0, #0]
 8014a26:	f04f 0900 	mov.w	r9, #0
 8014a2a:	07eb      	lsls	r3, r5, #31
 8014a2c:	d50a      	bpl.n	8014a44 <__pow5mult+0x84>
 8014a2e:	4639      	mov	r1, r7
 8014a30:	4622      	mov	r2, r4
 8014a32:	4630      	mov	r0, r6
 8014a34:	f7ff ff1e 	bl	8014874 <__multiply>
 8014a38:	4639      	mov	r1, r7
 8014a3a:	4680      	mov	r8, r0
 8014a3c:	4630      	mov	r0, r6
 8014a3e:	f7ff fe47 	bl	80146d0 <_Bfree>
 8014a42:	4647      	mov	r7, r8
 8014a44:	106d      	asrs	r5, r5, #1
 8014a46:	d00b      	beq.n	8014a60 <__pow5mult+0xa0>
 8014a48:	6820      	ldr	r0, [r4, #0]
 8014a4a:	b938      	cbnz	r0, 8014a5c <__pow5mult+0x9c>
 8014a4c:	4622      	mov	r2, r4
 8014a4e:	4621      	mov	r1, r4
 8014a50:	4630      	mov	r0, r6
 8014a52:	f7ff ff0f 	bl	8014874 <__multiply>
 8014a56:	6020      	str	r0, [r4, #0]
 8014a58:	f8c0 9000 	str.w	r9, [r0]
 8014a5c:	4604      	mov	r4, r0
 8014a5e:	e7e4      	b.n	8014a2a <__pow5mult+0x6a>
 8014a60:	4638      	mov	r0, r7
 8014a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a66:	bf00      	nop
 8014a68:	08016700 	.word	0x08016700
 8014a6c:	08016525 	.word	0x08016525
 8014a70:	080165ac 	.word	0x080165ac

08014a74 <__lshift>:
 8014a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a78:	460c      	mov	r4, r1
 8014a7a:	6849      	ldr	r1, [r1, #4]
 8014a7c:	6923      	ldr	r3, [r4, #16]
 8014a7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014a82:	68a3      	ldr	r3, [r4, #8]
 8014a84:	4607      	mov	r7, r0
 8014a86:	4691      	mov	r9, r2
 8014a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014a8c:	f108 0601 	add.w	r6, r8, #1
 8014a90:	42b3      	cmp	r3, r6
 8014a92:	db0b      	blt.n	8014aac <__lshift+0x38>
 8014a94:	4638      	mov	r0, r7
 8014a96:	f7ff fddb 	bl	8014650 <_Balloc>
 8014a9a:	4605      	mov	r5, r0
 8014a9c:	b948      	cbnz	r0, 8014ab2 <__lshift+0x3e>
 8014a9e:	4602      	mov	r2, r0
 8014aa0:	4b28      	ldr	r3, [pc, #160]	; (8014b44 <__lshift+0xd0>)
 8014aa2:	4829      	ldr	r0, [pc, #164]	; (8014b48 <__lshift+0xd4>)
 8014aa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014aa8:	f000 fb1e 	bl	80150e8 <__assert_func>
 8014aac:	3101      	adds	r1, #1
 8014aae:	005b      	lsls	r3, r3, #1
 8014ab0:	e7ee      	b.n	8014a90 <__lshift+0x1c>
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	f100 0114 	add.w	r1, r0, #20
 8014ab8:	f100 0210 	add.w	r2, r0, #16
 8014abc:	4618      	mov	r0, r3
 8014abe:	4553      	cmp	r3, sl
 8014ac0:	db33      	blt.n	8014b2a <__lshift+0xb6>
 8014ac2:	6920      	ldr	r0, [r4, #16]
 8014ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014ac8:	f104 0314 	add.w	r3, r4, #20
 8014acc:	f019 091f 	ands.w	r9, r9, #31
 8014ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014ad4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014ad8:	d02b      	beq.n	8014b32 <__lshift+0xbe>
 8014ada:	f1c9 0e20 	rsb	lr, r9, #32
 8014ade:	468a      	mov	sl, r1
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	6818      	ldr	r0, [r3, #0]
 8014ae4:	fa00 f009 	lsl.w	r0, r0, r9
 8014ae8:	4302      	orrs	r2, r0
 8014aea:	f84a 2b04 	str.w	r2, [sl], #4
 8014aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8014af2:	459c      	cmp	ip, r3
 8014af4:	fa22 f20e 	lsr.w	r2, r2, lr
 8014af8:	d8f3      	bhi.n	8014ae2 <__lshift+0x6e>
 8014afa:	ebac 0304 	sub.w	r3, ip, r4
 8014afe:	3b15      	subs	r3, #21
 8014b00:	f023 0303 	bic.w	r3, r3, #3
 8014b04:	3304      	adds	r3, #4
 8014b06:	f104 0015 	add.w	r0, r4, #21
 8014b0a:	4584      	cmp	ip, r0
 8014b0c:	bf38      	it	cc
 8014b0e:	2304      	movcc	r3, #4
 8014b10:	50ca      	str	r2, [r1, r3]
 8014b12:	b10a      	cbz	r2, 8014b18 <__lshift+0xa4>
 8014b14:	f108 0602 	add.w	r6, r8, #2
 8014b18:	3e01      	subs	r6, #1
 8014b1a:	4638      	mov	r0, r7
 8014b1c:	612e      	str	r6, [r5, #16]
 8014b1e:	4621      	mov	r1, r4
 8014b20:	f7ff fdd6 	bl	80146d0 <_Bfree>
 8014b24:	4628      	mov	r0, r5
 8014b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014b2e:	3301      	adds	r3, #1
 8014b30:	e7c5      	b.n	8014abe <__lshift+0x4a>
 8014b32:	3904      	subs	r1, #4
 8014b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b38:	f841 2f04 	str.w	r2, [r1, #4]!
 8014b3c:	459c      	cmp	ip, r3
 8014b3e:	d8f9      	bhi.n	8014b34 <__lshift+0xc0>
 8014b40:	e7ea      	b.n	8014b18 <__lshift+0xa4>
 8014b42:	bf00      	nop
 8014b44:	0801659b 	.word	0x0801659b
 8014b48:	080165ac 	.word	0x080165ac

08014b4c <__mcmp>:
 8014b4c:	b530      	push	{r4, r5, lr}
 8014b4e:	6902      	ldr	r2, [r0, #16]
 8014b50:	690c      	ldr	r4, [r1, #16]
 8014b52:	1b12      	subs	r2, r2, r4
 8014b54:	d10e      	bne.n	8014b74 <__mcmp+0x28>
 8014b56:	f100 0314 	add.w	r3, r0, #20
 8014b5a:	3114      	adds	r1, #20
 8014b5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014b60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014b64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014b68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014b6c:	42a5      	cmp	r5, r4
 8014b6e:	d003      	beq.n	8014b78 <__mcmp+0x2c>
 8014b70:	d305      	bcc.n	8014b7e <__mcmp+0x32>
 8014b72:	2201      	movs	r2, #1
 8014b74:	4610      	mov	r0, r2
 8014b76:	bd30      	pop	{r4, r5, pc}
 8014b78:	4283      	cmp	r3, r0
 8014b7a:	d3f3      	bcc.n	8014b64 <__mcmp+0x18>
 8014b7c:	e7fa      	b.n	8014b74 <__mcmp+0x28>
 8014b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b82:	e7f7      	b.n	8014b74 <__mcmp+0x28>

08014b84 <__mdiff>:
 8014b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b88:	460c      	mov	r4, r1
 8014b8a:	4606      	mov	r6, r0
 8014b8c:	4611      	mov	r1, r2
 8014b8e:	4620      	mov	r0, r4
 8014b90:	4617      	mov	r7, r2
 8014b92:	f7ff ffdb 	bl	8014b4c <__mcmp>
 8014b96:	1e05      	subs	r5, r0, #0
 8014b98:	d110      	bne.n	8014bbc <__mdiff+0x38>
 8014b9a:	4629      	mov	r1, r5
 8014b9c:	4630      	mov	r0, r6
 8014b9e:	f7ff fd57 	bl	8014650 <_Balloc>
 8014ba2:	b930      	cbnz	r0, 8014bb2 <__mdiff+0x2e>
 8014ba4:	4b39      	ldr	r3, [pc, #228]	; (8014c8c <__mdiff+0x108>)
 8014ba6:	4602      	mov	r2, r0
 8014ba8:	f240 2132 	movw	r1, #562	; 0x232
 8014bac:	4838      	ldr	r0, [pc, #224]	; (8014c90 <__mdiff+0x10c>)
 8014bae:	f000 fa9b 	bl	80150e8 <__assert_func>
 8014bb2:	2301      	movs	r3, #1
 8014bb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014bb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bbc:	bfa4      	itt	ge
 8014bbe:	463b      	movge	r3, r7
 8014bc0:	4627      	movge	r7, r4
 8014bc2:	4630      	mov	r0, r6
 8014bc4:	6879      	ldr	r1, [r7, #4]
 8014bc6:	bfa6      	itte	ge
 8014bc8:	461c      	movge	r4, r3
 8014bca:	2500      	movge	r5, #0
 8014bcc:	2501      	movlt	r5, #1
 8014bce:	f7ff fd3f 	bl	8014650 <_Balloc>
 8014bd2:	b920      	cbnz	r0, 8014bde <__mdiff+0x5a>
 8014bd4:	4b2d      	ldr	r3, [pc, #180]	; (8014c8c <__mdiff+0x108>)
 8014bd6:	4602      	mov	r2, r0
 8014bd8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014bdc:	e7e6      	b.n	8014bac <__mdiff+0x28>
 8014bde:	693e      	ldr	r6, [r7, #16]
 8014be0:	60c5      	str	r5, [r0, #12]
 8014be2:	6925      	ldr	r5, [r4, #16]
 8014be4:	f107 0114 	add.w	r1, r7, #20
 8014be8:	f104 0914 	add.w	r9, r4, #20
 8014bec:	f100 0e14 	add.w	lr, r0, #20
 8014bf0:	f107 0210 	add.w	r2, r7, #16
 8014bf4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014bf8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014bfc:	46f2      	mov	sl, lr
 8014bfe:	2700      	movs	r7, #0
 8014c00:	f859 3b04 	ldr.w	r3, [r9], #4
 8014c04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014c08:	fa1f f883 	uxth.w	r8, r3
 8014c0c:	fa17 f78b 	uxtah	r7, r7, fp
 8014c10:	0c1b      	lsrs	r3, r3, #16
 8014c12:	eba7 0808 	sub.w	r8, r7, r8
 8014c16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014c1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014c1e:	fa1f f888 	uxth.w	r8, r8
 8014c22:	141f      	asrs	r7, r3, #16
 8014c24:	454d      	cmp	r5, r9
 8014c26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014c2a:	f84a 3b04 	str.w	r3, [sl], #4
 8014c2e:	d8e7      	bhi.n	8014c00 <__mdiff+0x7c>
 8014c30:	1b2b      	subs	r3, r5, r4
 8014c32:	3b15      	subs	r3, #21
 8014c34:	f023 0303 	bic.w	r3, r3, #3
 8014c38:	3304      	adds	r3, #4
 8014c3a:	3415      	adds	r4, #21
 8014c3c:	42a5      	cmp	r5, r4
 8014c3e:	bf38      	it	cc
 8014c40:	2304      	movcc	r3, #4
 8014c42:	4419      	add	r1, r3
 8014c44:	4473      	add	r3, lr
 8014c46:	469e      	mov	lr, r3
 8014c48:	460d      	mov	r5, r1
 8014c4a:	4565      	cmp	r5, ip
 8014c4c:	d30e      	bcc.n	8014c6c <__mdiff+0xe8>
 8014c4e:	f10c 0203 	add.w	r2, ip, #3
 8014c52:	1a52      	subs	r2, r2, r1
 8014c54:	f022 0203 	bic.w	r2, r2, #3
 8014c58:	3903      	subs	r1, #3
 8014c5a:	458c      	cmp	ip, r1
 8014c5c:	bf38      	it	cc
 8014c5e:	2200      	movcc	r2, #0
 8014c60:	441a      	add	r2, r3
 8014c62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014c66:	b17b      	cbz	r3, 8014c88 <__mdiff+0x104>
 8014c68:	6106      	str	r6, [r0, #16]
 8014c6a:	e7a5      	b.n	8014bb8 <__mdiff+0x34>
 8014c6c:	f855 8b04 	ldr.w	r8, [r5], #4
 8014c70:	fa17 f488 	uxtah	r4, r7, r8
 8014c74:	1422      	asrs	r2, r4, #16
 8014c76:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014c7a:	b2a4      	uxth	r4, r4
 8014c7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014c80:	f84e 4b04 	str.w	r4, [lr], #4
 8014c84:	1417      	asrs	r7, r2, #16
 8014c86:	e7e0      	b.n	8014c4a <__mdiff+0xc6>
 8014c88:	3e01      	subs	r6, #1
 8014c8a:	e7ea      	b.n	8014c62 <__mdiff+0xde>
 8014c8c:	0801659b 	.word	0x0801659b
 8014c90:	080165ac 	.word	0x080165ac

08014c94 <__d2b>:
 8014c94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014c98:	4689      	mov	r9, r1
 8014c9a:	2101      	movs	r1, #1
 8014c9c:	ec57 6b10 	vmov	r6, r7, d0
 8014ca0:	4690      	mov	r8, r2
 8014ca2:	f7ff fcd5 	bl	8014650 <_Balloc>
 8014ca6:	4604      	mov	r4, r0
 8014ca8:	b930      	cbnz	r0, 8014cb8 <__d2b+0x24>
 8014caa:	4602      	mov	r2, r0
 8014cac:	4b25      	ldr	r3, [pc, #148]	; (8014d44 <__d2b+0xb0>)
 8014cae:	4826      	ldr	r0, [pc, #152]	; (8014d48 <__d2b+0xb4>)
 8014cb0:	f240 310a 	movw	r1, #778	; 0x30a
 8014cb4:	f000 fa18 	bl	80150e8 <__assert_func>
 8014cb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014cbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014cc0:	bb35      	cbnz	r5, 8014d10 <__d2b+0x7c>
 8014cc2:	2e00      	cmp	r6, #0
 8014cc4:	9301      	str	r3, [sp, #4]
 8014cc6:	d028      	beq.n	8014d1a <__d2b+0x86>
 8014cc8:	4668      	mov	r0, sp
 8014cca:	9600      	str	r6, [sp, #0]
 8014ccc:	f7ff fd8c 	bl	80147e8 <__lo0bits>
 8014cd0:	9900      	ldr	r1, [sp, #0]
 8014cd2:	b300      	cbz	r0, 8014d16 <__d2b+0x82>
 8014cd4:	9a01      	ldr	r2, [sp, #4]
 8014cd6:	f1c0 0320 	rsb	r3, r0, #32
 8014cda:	fa02 f303 	lsl.w	r3, r2, r3
 8014cde:	430b      	orrs	r3, r1
 8014ce0:	40c2      	lsrs	r2, r0
 8014ce2:	6163      	str	r3, [r4, #20]
 8014ce4:	9201      	str	r2, [sp, #4]
 8014ce6:	9b01      	ldr	r3, [sp, #4]
 8014ce8:	61a3      	str	r3, [r4, #24]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	bf14      	ite	ne
 8014cee:	2202      	movne	r2, #2
 8014cf0:	2201      	moveq	r2, #1
 8014cf2:	6122      	str	r2, [r4, #16]
 8014cf4:	b1d5      	cbz	r5, 8014d2c <__d2b+0x98>
 8014cf6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014cfa:	4405      	add	r5, r0
 8014cfc:	f8c9 5000 	str.w	r5, [r9]
 8014d00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014d04:	f8c8 0000 	str.w	r0, [r8]
 8014d08:	4620      	mov	r0, r4
 8014d0a:	b003      	add	sp, #12
 8014d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d14:	e7d5      	b.n	8014cc2 <__d2b+0x2e>
 8014d16:	6161      	str	r1, [r4, #20]
 8014d18:	e7e5      	b.n	8014ce6 <__d2b+0x52>
 8014d1a:	a801      	add	r0, sp, #4
 8014d1c:	f7ff fd64 	bl	80147e8 <__lo0bits>
 8014d20:	9b01      	ldr	r3, [sp, #4]
 8014d22:	6163      	str	r3, [r4, #20]
 8014d24:	2201      	movs	r2, #1
 8014d26:	6122      	str	r2, [r4, #16]
 8014d28:	3020      	adds	r0, #32
 8014d2a:	e7e3      	b.n	8014cf4 <__d2b+0x60>
 8014d2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014d30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014d34:	f8c9 0000 	str.w	r0, [r9]
 8014d38:	6918      	ldr	r0, [r3, #16]
 8014d3a:	f7ff fd35 	bl	80147a8 <__hi0bits>
 8014d3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014d42:	e7df      	b.n	8014d04 <__d2b+0x70>
 8014d44:	0801659b 	.word	0x0801659b
 8014d48:	080165ac 	.word	0x080165ac

08014d4c <_calloc_r>:
 8014d4c:	b513      	push	{r0, r1, r4, lr}
 8014d4e:	434a      	muls	r2, r1
 8014d50:	4611      	mov	r1, r2
 8014d52:	9201      	str	r2, [sp, #4]
 8014d54:	f7fd fd9c 	bl	8012890 <_malloc_r>
 8014d58:	4604      	mov	r4, r0
 8014d5a:	b118      	cbz	r0, 8014d64 <_calloc_r+0x18>
 8014d5c:	9a01      	ldr	r2, [sp, #4]
 8014d5e:	2100      	movs	r1, #0
 8014d60:	f7fd fd8d 	bl	801287e <memset>
 8014d64:	4620      	mov	r0, r4
 8014d66:	b002      	add	sp, #8
 8014d68:	bd10      	pop	{r4, pc}
	...

08014d6c <_free_r>:
 8014d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d6e:	2900      	cmp	r1, #0
 8014d70:	d048      	beq.n	8014e04 <_free_r+0x98>
 8014d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d76:	9001      	str	r0, [sp, #4]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8014d7e:	bfb8      	it	lt
 8014d80:	18e4      	addlt	r4, r4, r3
 8014d82:	f7ff fc59 	bl	8014638 <__malloc_lock>
 8014d86:	4a20      	ldr	r2, [pc, #128]	; (8014e08 <_free_r+0x9c>)
 8014d88:	9801      	ldr	r0, [sp, #4]
 8014d8a:	6813      	ldr	r3, [r2, #0]
 8014d8c:	4615      	mov	r5, r2
 8014d8e:	b933      	cbnz	r3, 8014d9e <_free_r+0x32>
 8014d90:	6063      	str	r3, [r4, #4]
 8014d92:	6014      	str	r4, [r2, #0]
 8014d94:	b003      	add	sp, #12
 8014d96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d9a:	f7ff bc53 	b.w	8014644 <__malloc_unlock>
 8014d9e:	42a3      	cmp	r3, r4
 8014da0:	d90b      	bls.n	8014dba <_free_r+0x4e>
 8014da2:	6821      	ldr	r1, [r4, #0]
 8014da4:	1862      	adds	r2, r4, r1
 8014da6:	4293      	cmp	r3, r2
 8014da8:	bf04      	itt	eq
 8014daa:	681a      	ldreq	r2, [r3, #0]
 8014dac:	685b      	ldreq	r3, [r3, #4]
 8014dae:	6063      	str	r3, [r4, #4]
 8014db0:	bf04      	itt	eq
 8014db2:	1852      	addeq	r2, r2, r1
 8014db4:	6022      	streq	r2, [r4, #0]
 8014db6:	602c      	str	r4, [r5, #0]
 8014db8:	e7ec      	b.n	8014d94 <_free_r+0x28>
 8014dba:	461a      	mov	r2, r3
 8014dbc:	685b      	ldr	r3, [r3, #4]
 8014dbe:	b10b      	cbz	r3, 8014dc4 <_free_r+0x58>
 8014dc0:	42a3      	cmp	r3, r4
 8014dc2:	d9fa      	bls.n	8014dba <_free_r+0x4e>
 8014dc4:	6811      	ldr	r1, [r2, #0]
 8014dc6:	1855      	adds	r5, r2, r1
 8014dc8:	42a5      	cmp	r5, r4
 8014dca:	d10b      	bne.n	8014de4 <_free_r+0x78>
 8014dcc:	6824      	ldr	r4, [r4, #0]
 8014dce:	4421      	add	r1, r4
 8014dd0:	1854      	adds	r4, r2, r1
 8014dd2:	42a3      	cmp	r3, r4
 8014dd4:	6011      	str	r1, [r2, #0]
 8014dd6:	d1dd      	bne.n	8014d94 <_free_r+0x28>
 8014dd8:	681c      	ldr	r4, [r3, #0]
 8014dda:	685b      	ldr	r3, [r3, #4]
 8014ddc:	6053      	str	r3, [r2, #4]
 8014dde:	4421      	add	r1, r4
 8014de0:	6011      	str	r1, [r2, #0]
 8014de2:	e7d7      	b.n	8014d94 <_free_r+0x28>
 8014de4:	d902      	bls.n	8014dec <_free_r+0x80>
 8014de6:	230c      	movs	r3, #12
 8014de8:	6003      	str	r3, [r0, #0]
 8014dea:	e7d3      	b.n	8014d94 <_free_r+0x28>
 8014dec:	6825      	ldr	r5, [r4, #0]
 8014dee:	1961      	adds	r1, r4, r5
 8014df0:	428b      	cmp	r3, r1
 8014df2:	bf04      	itt	eq
 8014df4:	6819      	ldreq	r1, [r3, #0]
 8014df6:	685b      	ldreq	r3, [r3, #4]
 8014df8:	6063      	str	r3, [r4, #4]
 8014dfa:	bf04      	itt	eq
 8014dfc:	1949      	addeq	r1, r1, r5
 8014dfe:	6021      	streq	r1, [r4, #0]
 8014e00:	6054      	str	r4, [r2, #4]
 8014e02:	e7c7      	b.n	8014d94 <_free_r+0x28>
 8014e04:	b003      	add	sp, #12
 8014e06:	bd30      	pop	{r4, r5, pc}
 8014e08:	20010790 	.word	0x20010790

08014e0c <__ssputs_r>:
 8014e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e10:	688e      	ldr	r6, [r1, #8]
 8014e12:	429e      	cmp	r6, r3
 8014e14:	4682      	mov	sl, r0
 8014e16:	460c      	mov	r4, r1
 8014e18:	4690      	mov	r8, r2
 8014e1a:	461f      	mov	r7, r3
 8014e1c:	d838      	bhi.n	8014e90 <__ssputs_r+0x84>
 8014e1e:	898a      	ldrh	r2, [r1, #12]
 8014e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014e24:	d032      	beq.n	8014e8c <__ssputs_r+0x80>
 8014e26:	6825      	ldr	r5, [r4, #0]
 8014e28:	6909      	ldr	r1, [r1, #16]
 8014e2a:	eba5 0901 	sub.w	r9, r5, r1
 8014e2e:	6965      	ldr	r5, [r4, #20]
 8014e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014e38:	3301      	adds	r3, #1
 8014e3a:	444b      	add	r3, r9
 8014e3c:	106d      	asrs	r5, r5, #1
 8014e3e:	429d      	cmp	r5, r3
 8014e40:	bf38      	it	cc
 8014e42:	461d      	movcc	r5, r3
 8014e44:	0553      	lsls	r3, r2, #21
 8014e46:	d531      	bpl.n	8014eac <__ssputs_r+0xa0>
 8014e48:	4629      	mov	r1, r5
 8014e4a:	f7fd fd21 	bl	8012890 <_malloc_r>
 8014e4e:	4606      	mov	r6, r0
 8014e50:	b950      	cbnz	r0, 8014e68 <__ssputs_r+0x5c>
 8014e52:	230c      	movs	r3, #12
 8014e54:	f8ca 3000 	str.w	r3, [sl]
 8014e58:	89a3      	ldrh	r3, [r4, #12]
 8014e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e5e:	81a3      	strh	r3, [r4, #12]
 8014e60:	f04f 30ff 	mov.w	r0, #4294967295
 8014e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e68:	6921      	ldr	r1, [r4, #16]
 8014e6a:	464a      	mov	r2, r9
 8014e6c:	f7fd fcf9 	bl	8012862 <memcpy>
 8014e70:	89a3      	ldrh	r3, [r4, #12]
 8014e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e7a:	81a3      	strh	r3, [r4, #12]
 8014e7c:	6126      	str	r6, [r4, #16]
 8014e7e:	6165      	str	r5, [r4, #20]
 8014e80:	444e      	add	r6, r9
 8014e82:	eba5 0509 	sub.w	r5, r5, r9
 8014e86:	6026      	str	r6, [r4, #0]
 8014e88:	60a5      	str	r5, [r4, #8]
 8014e8a:	463e      	mov	r6, r7
 8014e8c:	42be      	cmp	r6, r7
 8014e8e:	d900      	bls.n	8014e92 <__ssputs_r+0x86>
 8014e90:	463e      	mov	r6, r7
 8014e92:	4632      	mov	r2, r6
 8014e94:	6820      	ldr	r0, [r4, #0]
 8014e96:	4641      	mov	r1, r8
 8014e98:	f000 f98a 	bl	80151b0 <memmove>
 8014e9c:	68a3      	ldr	r3, [r4, #8]
 8014e9e:	6822      	ldr	r2, [r4, #0]
 8014ea0:	1b9b      	subs	r3, r3, r6
 8014ea2:	4432      	add	r2, r6
 8014ea4:	60a3      	str	r3, [r4, #8]
 8014ea6:	6022      	str	r2, [r4, #0]
 8014ea8:	2000      	movs	r0, #0
 8014eaa:	e7db      	b.n	8014e64 <__ssputs_r+0x58>
 8014eac:	462a      	mov	r2, r5
 8014eae:	f000 f999 	bl	80151e4 <_realloc_r>
 8014eb2:	4606      	mov	r6, r0
 8014eb4:	2800      	cmp	r0, #0
 8014eb6:	d1e1      	bne.n	8014e7c <__ssputs_r+0x70>
 8014eb8:	6921      	ldr	r1, [r4, #16]
 8014eba:	4650      	mov	r0, sl
 8014ebc:	f7ff ff56 	bl	8014d6c <_free_r>
 8014ec0:	e7c7      	b.n	8014e52 <__ssputs_r+0x46>
	...

08014ec4 <_svfiprintf_r>:
 8014ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec8:	4698      	mov	r8, r3
 8014eca:	898b      	ldrh	r3, [r1, #12]
 8014ecc:	061b      	lsls	r3, r3, #24
 8014ece:	b09d      	sub	sp, #116	; 0x74
 8014ed0:	4607      	mov	r7, r0
 8014ed2:	460d      	mov	r5, r1
 8014ed4:	4614      	mov	r4, r2
 8014ed6:	d50e      	bpl.n	8014ef6 <_svfiprintf_r+0x32>
 8014ed8:	690b      	ldr	r3, [r1, #16]
 8014eda:	b963      	cbnz	r3, 8014ef6 <_svfiprintf_r+0x32>
 8014edc:	2140      	movs	r1, #64	; 0x40
 8014ede:	f7fd fcd7 	bl	8012890 <_malloc_r>
 8014ee2:	6028      	str	r0, [r5, #0]
 8014ee4:	6128      	str	r0, [r5, #16]
 8014ee6:	b920      	cbnz	r0, 8014ef2 <_svfiprintf_r+0x2e>
 8014ee8:	230c      	movs	r3, #12
 8014eea:	603b      	str	r3, [r7, #0]
 8014eec:	f04f 30ff 	mov.w	r0, #4294967295
 8014ef0:	e0d1      	b.n	8015096 <_svfiprintf_r+0x1d2>
 8014ef2:	2340      	movs	r3, #64	; 0x40
 8014ef4:	616b      	str	r3, [r5, #20]
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8014efa:	2320      	movs	r3, #32
 8014efc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f04:	2330      	movs	r3, #48	; 0x30
 8014f06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80150b0 <_svfiprintf_r+0x1ec>
 8014f0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f0e:	f04f 0901 	mov.w	r9, #1
 8014f12:	4623      	mov	r3, r4
 8014f14:	469a      	mov	sl, r3
 8014f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f1a:	b10a      	cbz	r2, 8014f20 <_svfiprintf_r+0x5c>
 8014f1c:	2a25      	cmp	r2, #37	; 0x25
 8014f1e:	d1f9      	bne.n	8014f14 <_svfiprintf_r+0x50>
 8014f20:	ebba 0b04 	subs.w	fp, sl, r4
 8014f24:	d00b      	beq.n	8014f3e <_svfiprintf_r+0x7a>
 8014f26:	465b      	mov	r3, fp
 8014f28:	4622      	mov	r2, r4
 8014f2a:	4629      	mov	r1, r5
 8014f2c:	4638      	mov	r0, r7
 8014f2e:	f7ff ff6d 	bl	8014e0c <__ssputs_r>
 8014f32:	3001      	adds	r0, #1
 8014f34:	f000 80aa 	beq.w	801508c <_svfiprintf_r+0x1c8>
 8014f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f3a:	445a      	add	r2, fp
 8014f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8014f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	f000 80a2 	beq.w	801508c <_svfiprintf_r+0x1c8>
 8014f48:	2300      	movs	r3, #0
 8014f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8014f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f52:	f10a 0a01 	add.w	sl, sl, #1
 8014f56:	9304      	str	r3, [sp, #16]
 8014f58:	9307      	str	r3, [sp, #28]
 8014f5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f5e:	931a      	str	r3, [sp, #104]	; 0x68
 8014f60:	4654      	mov	r4, sl
 8014f62:	2205      	movs	r2, #5
 8014f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f68:	4851      	ldr	r0, [pc, #324]	; (80150b0 <_svfiprintf_r+0x1ec>)
 8014f6a:	f7eb f939 	bl	80001e0 <memchr>
 8014f6e:	9a04      	ldr	r2, [sp, #16]
 8014f70:	b9d8      	cbnz	r0, 8014faa <_svfiprintf_r+0xe6>
 8014f72:	06d0      	lsls	r0, r2, #27
 8014f74:	bf44      	itt	mi
 8014f76:	2320      	movmi	r3, #32
 8014f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f7c:	0711      	lsls	r1, r2, #28
 8014f7e:	bf44      	itt	mi
 8014f80:	232b      	movmi	r3, #43	; 0x2b
 8014f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f86:	f89a 3000 	ldrb.w	r3, [sl]
 8014f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8014f8c:	d015      	beq.n	8014fba <_svfiprintf_r+0xf6>
 8014f8e:	9a07      	ldr	r2, [sp, #28]
 8014f90:	4654      	mov	r4, sl
 8014f92:	2000      	movs	r0, #0
 8014f94:	f04f 0c0a 	mov.w	ip, #10
 8014f98:	4621      	mov	r1, r4
 8014f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f9e:	3b30      	subs	r3, #48	; 0x30
 8014fa0:	2b09      	cmp	r3, #9
 8014fa2:	d94e      	bls.n	8015042 <_svfiprintf_r+0x17e>
 8014fa4:	b1b0      	cbz	r0, 8014fd4 <_svfiprintf_r+0x110>
 8014fa6:	9207      	str	r2, [sp, #28]
 8014fa8:	e014      	b.n	8014fd4 <_svfiprintf_r+0x110>
 8014faa:	eba0 0308 	sub.w	r3, r0, r8
 8014fae:	fa09 f303 	lsl.w	r3, r9, r3
 8014fb2:	4313      	orrs	r3, r2
 8014fb4:	9304      	str	r3, [sp, #16]
 8014fb6:	46a2      	mov	sl, r4
 8014fb8:	e7d2      	b.n	8014f60 <_svfiprintf_r+0x9c>
 8014fba:	9b03      	ldr	r3, [sp, #12]
 8014fbc:	1d19      	adds	r1, r3, #4
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	9103      	str	r1, [sp, #12]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	bfbb      	ittet	lt
 8014fc6:	425b      	neglt	r3, r3
 8014fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8014fcc:	9307      	strge	r3, [sp, #28]
 8014fce:	9307      	strlt	r3, [sp, #28]
 8014fd0:	bfb8      	it	lt
 8014fd2:	9204      	strlt	r2, [sp, #16]
 8014fd4:	7823      	ldrb	r3, [r4, #0]
 8014fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8014fd8:	d10c      	bne.n	8014ff4 <_svfiprintf_r+0x130>
 8014fda:	7863      	ldrb	r3, [r4, #1]
 8014fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8014fde:	d135      	bne.n	801504c <_svfiprintf_r+0x188>
 8014fe0:	9b03      	ldr	r3, [sp, #12]
 8014fe2:	1d1a      	adds	r2, r3, #4
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	9203      	str	r2, [sp, #12]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	bfb8      	it	lt
 8014fec:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ff0:	3402      	adds	r4, #2
 8014ff2:	9305      	str	r3, [sp, #20]
 8014ff4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80150c0 <_svfiprintf_r+0x1fc>
 8014ff8:	7821      	ldrb	r1, [r4, #0]
 8014ffa:	2203      	movs	r2, #3
 8014ffc:	4650      	mov	r0, sl
 8014ffe:	f7eb f8ef 	bl	80001e0 <memchr>
 8015002:	b140      	cbz	r0, 8015016 <_svfiprintf_r+0x152>
 8015004:	2340      	movs	r3, #64	; 0x40
 8015006:	eba0 000a 	sub.w	r0, r0, sl
 801500a:	fa03 f000 	lsl.w	r0, r3, r0
 801500e:	9b04      	ldr	r3, [sp, #16]
 8015010:	4303      	orrs	r3, r0
 8015012:	3401      	adds	r4, #1
 8015014:	9304      	str	r3, [sp, #16]
 8015016:	f814 1b01 	ldrb.w	r1, [r4], #1
 801501a:	4826      	ldr	r0, [pc, #152]	; (80150b4 <_svfiprintf_r+0x1f0>)
 801501c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015020:	2206      	movs	r2, #6
 8015022:	f7eb f8dd 	bl	80001e0 <memchr>
 8015026:	2800      	cmp	r0, #0
 8015028:	d038      	beq.n	801509c <_svfiprintf_r+0x1d8>
 801502a:	4b23      	ldr	r3, [pc, #140]	; (80150b8 <_svfiprintf_r+0x1f4>)
 801502c:	bb1b      	cbnz	r3, 8015076 <_svfiprintf_r+0x1b2>
 801502e:	9b03      	ldr	r3, [sp, #12]
 8015030:	3307      	adds	r3, #7
 8015032:	f023 0307 	bic.w	r3, r3, #7
 8015036:	3308      	adds	r3, #8
 8015038:	9303      	str	r3, [sp, #12]
 801503a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801503c:	4433      	add	r3, r6
 801503e:	9309      	str	r3, [sp, #36]	; 0x24
 8015040:	e767      	b.n	8014f12 <_svfiprintf_r+0x4e>
 8015042:	fb0c 3202 	mla	r2, ip, r2, r3
 8015046:	460c      	mov	r4, r1
 8015048:	2001      	movs	r0, #1
 801504a:	e7a5      	b.n	8014f98 <_svfiprintf_r+0xd4>
 801504c:	2300      	movs	r3, #0
 801504e:	3401      	adds	r4, #1
 8015050:	9305      	str	r3, [sp, #20]
 8015052:	4619      	mov	r1, r3
 8015054:	f04f 0c0a 	mov.w	ip, #10
 8015058:	4620      	mov	r0, r4
 801505a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801505e:	3a30      	subs	r2, #48	; 0x30
 8015060:	2a09      	cmp	r2, #9
 8015062:	d903      	bls.n	801506c <_svfiprintf_r+0x1a8>
 8015064:	2b00      	cmp	r3, #0
 8015066:	d0c5      	beq.n	8014ff4 <_svfiprintf_r+0x130>
 8015068:	9105      	str	r1, [sp, #20]
 801506a:	e7c3      	b.n	8014ff4 <_svfiprintf_r+0x130>
 801506c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015070:	4604      	mov	r4, r0
 8015072:	2301      	movs	r3, #1
 8015074:	e7f0      	b.n	8015058 <_svfiprintf_r+0x194>
 8015076:	ab03      	add	r3, sp, #12
 8015078:	9300      	str	r3, [sp, #0]
 801507a:	462a      	mov	r2, r5
 801507c:	4b0f      	ldr	r3, [pc, #60]	; (80150bc <_svfiprintf_r+0x1f8>)
 801507e:	a904      	add	r1, sp, #16
 8015080:	4638      	mov	r0, r7
 8015082:	f7fd fcff 	bl	8012a84 <_printf_float>
 8015086:	1c42      	adds	r2, r0, #1
 8015088:	4606      	mov	r6, r0
 801508a:	d1d6      	bne.n	801503a <_svfiprintf_r+0x176>
 801508c:	89ab      	ldrh	r3, [r5, #12]
 801508e:	065b      	lsls	r3, r3, #25
 8015090:	f53f af2c 	bmi.w	8014eec <_svfiprintf_r+0x28>
 8015094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015096:	b01d      	add	sp, #116	; 0x74
 8015098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801509c:	ab03      	add	r3, sp, #12
 801509e:	9300      	str	r3, [sp, #0]
 80150a0:	462a      	mov	r2, r5
 80150a2:	4b06      	ldr	r3, [pc, #24]	; (80150bc <_svfiprintf_r+0x1f8>)
 80150a4:	a904      	add	r1, sp, #16
 80150a6:	4638      	mov	r0, r7
 80150a8:	f7fd ff90 	bl	8012fcc <_printf_i>
 80150ac:	e7eb      	b.n	8015086 <_svfiprintf_r+0x1c2>
 80150ae:	bf00      	nop
 80150b0:	0801670c 	.word	0x0801670c
 80150b4:	08016716 	.word	0x08016716
 80150b8:	08012a85 	.word	0x08012a85
 80150bc:	08014e0d 	.word	0x08014e0d
 80150c0:	08016712 	.word	0x08016712

080150c4 <_read_r>:
 80150c4:	b538      	push	{r3, r4, r5, lr}
 80150c6:	4d07      	ldr	r5, [pc, #28]	; (80150e4 <_read_r+0x20>)
 80150c8:	4604      	mov	r4, r0
 80150ca:	4608      	mov	r0, r1
 80150cc:	4611      	mov	r1, r2
 80150ce:	2200      	movs	r2, #0
 80150d0:	602a      	str	r2, [r5, #0]
 80150d2:	461a      	mov	r2, r3
 80150d4:	f7ed f852 	bl	800217c <_read>
 80150d8:	1c43      	adds	r3, r0, #1
 80150da:	d102      	bne.n	80150e2 <_read_r+0x1e>
 80150dc:	682b      	ldr	r3, [r5, #0]
 80150de:	b103      	cbz	r3, 80150e2 <_read_r+0x1e>
 80150e0:	6023      	str	r3, [r4, #0]
 80150e2:	bd38      	pop	{r3, r4, r5, pc}
 80150e4:	20010b2c 	.word	0x20010b2c

080150e8 <__assert_func>:
 80150e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80150ea:	4614      	mov	r4, r2
 80150ec:	461a      	mov	r2, r3
 80150ee:	4b09      	ldr	r3, [pc, #36]	; (8015114 <__assert_func+0x2c>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	4605      	mov	r5, r0
 80150f4:	68d8      	ldr	r0, [r3, #12]
 80150f6:	b14c      	cbz	r4, 801510c <__assert_func+0x24>
 80150f8:	4b07      	ldr	r3, [pc, #28]	; (8015118 <__assert_func+0x30>)
 80150fa:	9100      	str	r1, [sp, #0]
 80150fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015100:	4906      	ldr	r1, [pc, #24]	; (801511c <__assert_func+0x34>)
 8015102:	462b      	mov	r3, r5
 8015104:	f000 f80e 	bl	8015124 <fiprintf>
 8015108:	f000 f9f9 	bl	80154fe <abort>
 801510c:	4b04      	ldr	r3, [pc, #16]	; (8015120 <__assert_func+0x38>)
 801510e:	461c      	mov	r4, r3
 8015110:	e7f3      	b.n	80150fa <__assert_func+0x12>
 8015112:	bf00      	nop
 8015114:	20000510 	.word	0x20000510
 8015118:	0801671d 	.word	0x0801671d
 801511c:	0801672a 	.word	0x0801672a
 8015120:	08016758 	.word	0x08016758

08015124 <fiprintf>:
 8015124:	b40e      	push	{r1, r2, r3}
 8015126:	b503      	push	{r0, r1, lr}
 8015128:	4601      	mov	r1, r0
 801512a:	ab03      	add	r3, sp, #12
 801512c:	4805      	ldr	r0, [pc, #20]	; (8015144 <fiprintf+0x20>)
 801512e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015132:	6800      	ldr	r0, [r0, #0]
 8015134:	9301      	str	r3, [sp, #4]
 8015136:	f000 f8a5 	bl	8015284 <_vfiprintf_r>
 801513a:	b002      	add	sp, #8
 801513c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015140:	b003      	add	sp, #12
 8015142:	4770      	bx	lr
 8015144:	20000510 	.word	0x20000510

08015148 <_fstat_r>:
 8015148:	b538      	push	{r3, r4, r5, lr}
 801514a:	4d07      	ldr	r5, [pc, #28]	; (8015168 <_fstat_r+0x20>)
 801514c:	2300      	movs	r3, #0
 801514e:	4604      	mov	r4, r0
 8015150:	4608      	mov	r0, r1
 8015152:	4611      	mov	r1, r2
 8015154:	602b      	str	r3, [r5, #0]
 8015156:	f7ed f83a 	bl	80021ce <_fstat>
 801515a:	1c43      	adds	r3, r0, #1
 801515c:	d102      	bne.n	8015164 <_fstat_r+0x1c>
 801515e:	682b      	ldr	r3, [r5, #0]
 8015160:	b103      	cbz	r3, 8015164 <_fstat_r+0x1c>
 8015162:	6023      	str	r3, [r4, #0]
 8015164:	bd38      	pop	{r3, r4, r5, pc}
 8015166:	bf00      	nop
 8015168:	20010b2c 	.word	0x20010b2c

0801516c <_isatty_r>:
 801516c:	b538      	push	{r3, r4, r5, lr}
 801516e:	4d06      	ldr	r5, [pc, #24]	; (8015188 <_isatty_r+0x1c>)
 8015170:	2300      	movs	r3, #0
 8015172:	4604      	mov	r4, r0
 8015174:	4608      	mov	r0, r1
 8015176:	602b      	str	r3, [r5, #0]
 8015178:	f7ed f839 	bl	80021ee <_isatty>
 801517c:	1c43      	adds	r3, r0, #1
 801517e:	d102      	bne.n	8015186 <_isatty_r+0x1a>
 8015180:	682b      	ldr	r3, [r5, #0]
 8015182:	b103      	cbz	r3, 8015186 <_isatty_r+0x1a>
 8015184:	6023      	str	r3, [r4, #0]
 8015186:	bd38      	pop	{r3, r4, r5, pc}
 8015188:	20010b2c 	.word	0x20010b2c

0801518c <__ascii_mbtowc>:
 801518c:	b082      	sub	sp, #8
 801518e:	b901      	cbnz	r1, 8015192 <__ascii_mbtowc+0x6>
 8015190:	a901      	add	r1, sp, #4
 8015192:	b142      	cbz	r2, 80151a6 <__ascii_mbtowc+0x1a>
 8015194:	b14b      	cbz	r3, 80151aa <__ascii_mbtowc+0x1e>
 8015196:	7813      	ldrb	r3, [r2, #0]
 8015198:	600b      	str	r3, [r1, #0]
 801519a:	7812      	ldrb	r2, [r2, #0]
 801519c:	1e10      	subs	r0, r2, #0
 801519e:	bf18      	it	ne
 80151a0:	2001      	movne	r0, #1
 80151a2:	b002      	add	sp, #8
 80151a4:	4770      	bx	lr
 80151a6:	4610      	mov	r0, r2
 80151a8:	e7fb      	b.n	80151a2 <__ascii_mbtowc+0x16>
 80151aa:	f06f 0001 	mvn.w	r0, #1
 80151ae:	e7f8      	b.n	80151a2 <__ascii_mbtowc+0x16>

080151b0 <memmove>:
 80151b0:	4288      	cmp	r0, r1
 80151b2:	b510      	push	{r4, lr}
 80151b4:	eb01 0402 	add.w	r4, r1, r2
 80151b8:	d902      	bls.n	80151c0 <memmove+0x10>
 80151ba:	4284      	cmp	r4, r0
 80151bc:	4623      	mov	r3, r4
 80151be:	d807      	bhi.n	80151d0 <memmove+0x20>
 80151c0:	1e43      	subs	r3, r0, #1
 80151c2:	42a1      	cmp	r1, r4
 80151c4:	d008      	beq.n	80151d8 <memmove+0x28>
 80151c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151ce:	e7f8      	b.n	80151c2 <memmove+0x12>
 80151d0:	4402      	add	r2, r0
 80151d2:	4601      	mov	r1, r0
 80151d4:	428a      	cmp	r2, r1
 80151d6:	d100      	bne.n	80151da <memmove+0x2a>
 80151d8:	bd10      	pop	{r4, pc}
 80151da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80151de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80151e2:	e7f7      	b.n	80151d4 <memmove+0x24>

080151e4 <_realloc_r>:
 80151e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151e6:	4607      	mov	r7, r0
 80151e8:	4614      	mov	r4, r2
 80151ea:	460e      	mov	r6, r1
 80151ec:	b921      	cbnz	r1, 80151f8 <_realloc_r+0x14>
 80151ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80151f2:	4611      	mov	r1, r2
 80151f4:	f7fd bb4c 	b.w	8012890 <_malloc_r>
 80151f8:	b922      	cbnz	r2, 8015204 <_realloc_r+0x20>
 80151fa:	f7ff fdb7 	bl	8014d6c <_free_r>
 80151fe:	4625      	mov	r5, r4
 8015200:	4628      	mov	r0, r5
 8015202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015204:	f000 f982 	bl	801550c <_malloc_usable_size_r>
 8015208:	42a0      	cmp	r0, r4
 801520a:	d20f      	bcs.n	801522c <_realloc_r+0x48>
 801520c:	4621      	mov	r1, r4
 801520e:	4638      	mov	r0, r7
 8015210:	f7fd fb3e 	bl	8012890 <_malloc_r>
 8015214:	4605      	mov	r5, r0
 8015216:	2800      	cmp	r0, #0
 8015218:	d0f2      	beq.n	8015200 <_realloc_r+0x1c>
 801521a:	4631      	mov	r1, r6
 801521c:	4622      	mov	r2, r4
 801521e:	f7fd fb20 	bl	8012862 <memcpy>
 8015222:	4631      	mov	r1, r6
 8015224:	4638      	mov	r0, r7
 8015226:	f7ff fda1 	bl	8014d6c <_free_r>
 801522a:	e7e9      	b.n	8015200 <_realloc_r+0x1c>
 801522c:	4635      	mov	r5, r6
 801522e:	e7e7      	b.n	8015200 <_realloc_r+0x1c>

08015230 <__sfputc_r>:
 8015230:	6893      	ldr	r3, [r2, #8]
 8015232:	3b01      	subs	r3, #1
 8015234:	2b00      	cmp	r3, #0
 8015236:	b410      	push	{r4}
 8015238:	6093      	str	r3, [r2, #8]
 801523a:	da08      	bge.n	801524e <__sfputc_r+0x1e>
 801523c:	6994      	ldr	r4, [r2, #24]
 801523e:	42a3      	cmp	r3, r4
 8015240:	db01      	blt.n	8015246 <__sfputc_r+0x16>
 8015242:	290a      	cmp	r1, #10
 8015244:	d103      	bne.n	801524e <__sfputc_r+0x1e>
 8015246:	f85d 4b04 	ldr.w	r4, [sp], #4
 801524a:	f7fe b955 	b.w	80134f8 <__swbuf_r>
 801524e:	6813      	ldr	r3, [r2, #0]
 8015250:	1c58      	adds	r0, r3, #1
 8015252:	6010      	str	r0, [r2, #0]
 8015254:	7019      	strb	r1, [r3, #0]
 8015256:	4608      	mov	r0, r1
 8015258:	f85d 4b04 	ldr.w	r4, [sp], #4
 801525c:	4770      	bx	lr

0801525e <__sfputs_r>:
 801525e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015260:	4606      	mov	r6, r0
 8015262:	460f      	mov	r7, r1
 8015264:	4614      	mov	r4, r2
 8015266:	18d5      	adds	r5, r2, r3
 8015268:	42ac      	cmp	r4, r5
 801526a:	d101      	bne.n	8015270 <__sfputs_r+0x12>
 801526c:	2000      	movs	r0, #0
 801526e:	e007      	b.n	8015280 <__sfputs_r+0x22>
 8015270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015274:	463a      	mov	r2, r7
 8015276:	4630      	mov	r0, r6
 8015278:	f7ff ffda 	bl	8015230 <__sfputc_r>
 801527c:	1c43      	adds	r3, r0, #1
 801527e:	d1f3      	bne.n	8015268 <__sfputs_r+0xa>
 8015280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015284 <_vfiprintf_r>:
 8015284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015288:	460d      	mov	r5, r1
 801528a:	b09d      	sub	sp, #116	; 0x74
 801528c:	4614      	mov	r4, r2
 801528e:	4698      	mov	r8, r3
 8015290:	4606      	mov	r6, r0
 8015292:	b118      	cbz	r0, 801529c <_vfiprintf_r+0x18>
 8015294:	6983      	ldr	r3, [r0, #24]
 8015296:	b90b      	cbnz	r3, 801529c <_vfiprintf_r+0x18>
 8015298:	f7fd fa1e 	bl	80126d8 <__sinit>
 801529c:	4b89      	ldr	r3, [pc, #548]	; (80154c4 <_vfiprintf_r+0x240>)
 801529e:	429d      	cmp	r5, r3
 80152a0:	d11b      	bne.n	80152da <_vfiprintf_r+0x56>
 80152a2:	6875      	ldr	r5, [r6, #4]
 80152a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80152a6:	07d9      	lsls	r1, r3, #31
 80152a8:	d405      	bmi.n	80152b6 <_vfiprintf_r+0x32>
 80152aa:	89ab      	ldrh	r3, [r5, #12]
 80152ac:	059a      	lsls	r2, r3, #22
 80152ae:	d402      	bmi.n	80152b6 <_vfiprintf_r+0x32>
 80152b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152b2:	f7fd fad4 	bl	801285e <__retarget_lock_acquire_recursive>
 80152b6:	89ab      	ldrh	r3, [r5, #12]
 80152b8:	071b      	lsls	r3, r3, #28
 80152ba:	d501      	bpl.n	80152c0 <_vfiprintf_r+0x3c>
 80152bc:	692b      	ldr	r3, [r5, #16]
 80152be:	b9eb      	cbnz	r3, 80152fc <_vfiprintf_r+0x78>
 80152c0:	4629      	mov	r1, r5
 80152c2:	4630      	mov	r0, r6
 80152c4:	f7fe f97c 	bl	80135c0 <__swsetup_r>
 80152c8:	b1c0      	cbz	r0, 80152fc <_vfiprintf_r+0x78>
 80152ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80152cc:	07dc      	lsls	r4, r3, #31
 80152ce:	d50e      	bpl.n	80152ee <_vfiprintf_r+0x6a>
 80152d0:	f04f 30ff 	mov.w	r0, #4294967295
 80152d4:	b01d      	add	sp, #116	; 0x74
 80152d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152da:	4b7b      	ldr	r3, [pc, #492]	; (80154c8 <_vfiprintf_r+0x244>)
 80152dc:	429d      	cmp	r5, r3
 80152de:	d101      	bne.n	80152e4 <_vfiprintf_r+0x60>
 80152e0:	68b5      	ldr	r5, [r6, #8]
 80152e2:	e7df      	b.n	80152a4 <_vfiprintf_r+0x20>
 80152e4:	4b79      	ldr	r3, [pc, #484]	; (80154cc <_vfiprintf_r+0x248>)
 80152e6:	429d      	cmp	r5, r3
 80152e8:	bf08      	it	eq
 80152ea:	68f5      	ldreq	r5, [r6, #12]
 80152ec:	e7da      	b.n	80152a4 <_vfiprintf_r+0x20>
 80152ee:	89ab      	ldrh	r3, [r5, #12]
 80152f0:	0598      	lsls	r0, r3, #22
 80152f2:	d4ed      	bmi.n	80152d0 <_vfiprintf_r+0x4c>
 80152f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152f6:	f7fd fab3 	bl	8012860 <__retarget_lock_release_recursive>
 80152fa:	e7e9      	b.n	80152d0 <_vfiprintf_r+0x4c>
 80152fc:	2300      	movs	r3, #0
 80152fe:	9309      	str	r3, [sp, #36]	; 0x24
 8015300:	2320      	movs	r3, #32
 8015302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015306:	f8cd 800c 	str.w	r8, [sp, #12]
 801530a:	2330      	movs	r3, #48	; 0x30
 801530c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80154d0 <_vfiprintf_r+0x24c>
 8015310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015314:	f04f 0901 	mov.w	r9, #1
 8015318:	4623      	mov	r3, r4
 801531a:	469a      	mov	sl, r3
 801531c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015320:	b10a      	cbz	r2, 8015326 <_vfiprintf_r+0xa2>
 8015322:	2a25      	cmp	r2, #37	; 0x25
 8015324:	d1f9      	bne.n	801531a <_vfiprintf_r+0x96>
 8015326:	ebba 0b04 	subs.w	fp, sl, r4
 801532a:	d00b      	beq.n	8015344 <_vfiprintf_r+0xc0>
 801532c:	465b      	mov	r3, fp
 801532e:	4622      	mov	r2, r4
 8015330:	4629      	mov	r1, r5
 8015332:	4630      	mov	r0, r6
 8015334:	f7ff ff93 	bl	801525e <__sfputs_r>
 8015338:	3001      	adds	r0, #1
 801533a:	f000 80aa 	beq.w	8015492 <_vfiprintf_r+0x20e>
 801533e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015340:	445a      	add	r2, fp
 8015342:	9209      	str	r2, [sp, #36]	; 0x24
 8015344:	f89a 3000 	ldrb.w	r3, [sl]
 8015348:	2b00      	cmp	r3, #0
 801534a:	f000 80a2 	beq.w	8015492 <_vfiprintf_r+0x20e>
 801534e:	2300      	movs	r3, #0
 8015350:	f04f 32ff 	mov.w	r2, #4294967295
 8015354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015358:	f10a 0a01 	add.w	sl, sl, #1
 801535c:	9304      	str	r3, [sp, #16]
 801535e:	9307      	str	r3, [sp, #28]
 8015360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015364:	931a      	str	r3, [sp, #104]	; 0x68
 8015366:	4654      	mov	r4, sl
 8015368:	2205      	movs	r2, #5
 801536a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801536e:	4858      	ldr	r0, [pc, #352]	; (80154d0 <_vfiprintf_r+0x24c>)
 8015370:	f7ea ff36 	bl	80001e0 <memchr>
 8015374:	9a04      	ldr	r2, [sp, #16]
 8015376:	b9d8      	cbnz	r0, 80153b0 <_vfiprintf_r+0x12c>
 8015378:	06d1      	lsls	r1, r2, #27
 801537a:	bf44      	itt	mi
 801537c:	2320      	movmi	r3, #32
 801537e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015382:	0713      	lsls	r3, r2, #28
 8015384:	bf44      	itt	mi
 8015386:	232b      	movmi	r3, #43	; 0x2b
 8015388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801538c:	f89a 3000 	ldrb.w	r3, [sl]
 8015390:	2b2a      	cmp	r3, #42	; 0x2a
 8015392:	d015      	beq.n	80153c0 <_vfiprintf_r+0x13c>
 8015394:	9a07      	ldr	r2, [sp, #28]
 8015396:	4654      	mov	r4, sl
 8015398:	2000      	movs	r0, #0
 801539a:	f04f 0c0a 	mov.w	ip, #10
 801539e:	4621      	mov	r1, r4
 80153a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80153a4:	3b30      	subs	r3, #48	; 0x30
 80153a6:	2b09      	cmp	r3, #9
 80153a8:	d94e      	bls.n	8015448 <_vfiprintf_r+0x1c4>
 80153aa:	b1b0      	cbz	r0, 80153da <_vfiprintf_r+0x156>
 80153ac:	9207      	str	r2, [sp, #28]
 80153ae:	e014      	b.n	80153da <_vfiprintf_r+0x156>
 80153b0:	eba0 0308 	sub.w	r3, r0, r8
 80153b4:	fa09 f303 	lsl.w	r3, r9, r3
 80153b8:	4313      	orrs	r3, r2
 80153ba:	9304      	str	r3, [sp, #16]
 80153bc:	46a2      	mov	sl, r4
 80153be:	e7d2      	b.n	8015366 <_vfiprintf_r+0xe2>
 80153c0:	9b03      	ldr	r3, [sp, #12]
 80153c2:	1d19      	adds	r1, r3, #4
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	9103      	str	r1, [sp, #12]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	bfbb      	ittet	lt
 80153cc:	425b      	neglt	r3, r3
 80153ce:	f042 0202 	orrlt.w	r2, r2, #2
 80153d2:	9307      	strge	r3, [sp, #28]
 80153d4:	9307      	strlt	r3, [sp, #28]
 80153d6:	bfb8      	it	lt
 80153d8:	9204      	strlt	r2, [sp, #16]
 80153da:	7823      	ldrb	r3, [r4, #0]
 80153dc:	2b2e      	cmp	r3, #46	; 0x2e
 80153de:	d10c      	bne.n	80153fa <_vfiprintf_r+0x176>
 80153e0:	7863      	ldrb	r3, [r4, #1]
 80153e2:	2b2a      	cmp	r3, #42	; 0x2a
 80153e4:	d135      	bne.n	8015452 <_vfiprintf_r+0x1ce>
 80153e6:	9b03      	ldr	r3, [sp, #12]
 80153e8:	1d1a      	adds	r2, r3, #4
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	9203      	str	r2, [sp, #12]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	bfb8      	it	lt
 80153f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80153f6:	3402      	adds	r4, #2
 80153f8:	9305      	str	r3, [sp, #20]
 80153fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80154e0 <_vfiprintf_r+0x25c>
 80153fe:	7821      	ldrb	r1, [r4, #0]
 8015400:	2203      	movs	r2, #3
 8015402:	4650      	mov	r0, sl
 8015404:	f7ea feec 	bl	80001e0 <memchr>
 8015408:	b140      	cbz	r0, 801541c <_vfiprintf_r+0x198>
 801540a:	2340      	movs	r3, #64	; 0x40
 801540c:	eba0 000a 	sub.w	r0, r0, sl
 8015410:	fa03 f000 	lsl.w	r0, r3, r0
 8015414:	9b04      	ldr	r3, [sp, #16]
 8015416:	4303      	orrs	r3, r0
 8015418:	3401      	adds	r4, #1
 801541a:	9304      	str	r3, [sp, #16]
 801541c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015420:	482c      	ldr	r0, [pc, #176]	; (80154d4 <_vfiprintf_r+0x250>)
 8015422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015426:	2206      	movs	r2, #6
 8015428:	f7ea feda 	bl	80001e0 <memchr>
 801542c:	2800      	cmp	r0, #0
 801542e:	d03f      	beq.n	80154b0 <_vfiprintf_r+0x22c>
 8015430:	4b29      	ldr	r3, [pc, #164]	; (80154d8 <_vfiprintf_r+0x254>)
 8015432:	bb1b      	cbnz	r3, 801547c <_vfiprintf_r+0x1f8>
 8015434:	9b03      	ldr	r3, [sp, #12]
 8015436:	3307      	adds	r3, #7
 8015438:	f023 0307 	bic.w	r3, r3, #7
 801543c:	3308      	adds	r3, #8
 801543e:	9303      	str	r3, [sp, #12]
 8015440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015442:	443b      	add	r3, r7
 8015444:	9309      	str	r3, [sp, #36]	; 0x24
 8015446:	e767      	b.n	8015318 <_vfiprintf_r+0x94>
 8015448:	fb0c 3202 	mla	r2, ip, r2, r3
 801544c:	460c      	mov	r4, r1
 801544e:	2001      	movs	r0, #1
 8015450:	e7a5      	b.n	801539e <_vfiprintf_r+0x11a>
 8015452:	2300      	movs	r3, #0
 8015454:	3401      	adds	r4, #1
 8015456:	9305      	str	r3, [sp, #20]
 8015458:	4619      	mov	r1, r3
 801545a:	f04f 0c0a 	mov.w	ip, #10
 801545e:	4620      	mov	r0, r4
 8015460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015464:	3a30      	subs	r2, #48	; 0x30
 8015466:	2a09      	cmp	r2, #9
 8015468:	d903      	bls.n	8015472 <_vfiprintf_r+0x1ee>
 801546a:	2b00      	cmp	r3, #0
 801546c:	d0c5      	beq.n	80153fa <_vfiprintf_r+0x176>
 801546e:	9105      	str	r1, [sp, #20]
 8015470:	e7c3      	b.n	80153fa <_vfiprintf_r+0x176>
 8015472:	fb0c 2101 	mla	r1, ip, r1, r2
 8015476:	4604      	mov	r4, r0
 8015478:	2301      	movs	r3, #1
 801547a:	e7f0      	b.n	801545e <_vfiprintf_r+0x1da>
 801547c:	ab03      	add	r3, sp, #12
 801547e:	9300      	str	r3, [sp, #0]
 8015480:	462a      	mov	r2, r5
 8015482:	4b16      	ldr	r3, [pc, #88]	; (80154dc <_vfiprintf_r+0x258>)
 8015484:	a904      	add	r1, sp, #16
 8015486:	4630      	mov	r0, r6
 8015488:	f7fd fafc 	bl	8012a84 <_printf_float>
 801548c:	4607      	mov	r7, r0
 801548e:	1c78      	adds	r0, r7, #1
 8015490:	d1d6      	bne.n	8015440 <_vfiprintf_r+0x1bc>
 8015492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015494:	07d9      	lsls	r1, r3, #31
 8015496:	d405      	bmi.n	80154a4 <_vfiprintf_r+0x220>
 8015498:	89ab      	ldrh	r3, [r5, #12]
 801549a:	059a      	lsls	r2, r3, #22
 801549c:	d402      	bmi.n	80154a4 <_vfiprintf_r+0x220>
 801549e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80154a0:	f7fd f9de 	bl	8012860 <__retarget_lock_release_recursive>
 80154a4:	89ab      	ldrh	r3, [r5, #12]
 80154a6:	065b      	lsls	r3, r3, #25
 80154a8:	f53f af12 	bmi.w	80152d0 <_vfiprintf_r+0x4c>
 80154ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154ae:	e711      	b.n	80152d4 <_vfiprintf_r+0x50>
 80154b0:	ab03      	add	r3, sp, #12
 80154b2:	9300      	str	r3, [sp, #0]
 80154b4:	462a      	mov	r2, r5
 80154b6:	4b09      	ldr	r3, [pc, #36]	; (80154dc <_vfiprintf_r+0x258>)
 80154b8:	a904      	add	r1, sp, #16
 80154ba:	4630      	mov	r0, r6
 80154bc:	f7fd fd86 	bl	8012fcc <_printf_i>
 80154c0:	e7e4      	b.n	801548c <_vfiprintf_r+0x208>
 80154c2:	bf00      	nop
 80154c4:	080164a0 	.word	0x080164a0
 80154c8:	080164c0 	.word	0x080164c0
 80154cc:	08016480 	.word	0x08016480
 80154d0:	0801670c 	.word	0x0801670c
 80154d4:	08016716 	.word	0x08016716
 80154d8:	08012a85 	.word	0x08012a85
 80154dc:	0801525f 	.word	0x0801525f
 80154e0:	08016712 	.word	0x08016712

080154e4 <__ascii_wctomb>:
 80154e4:	b149      	cbz	r1, 80154fa <__ascii_wctomb+0x16>
 80154e6:	2aff      	cmp	r2, #255	; 0xff
 80154e8:	bf85      	ittet	hi
 80154ea:	238a      	movhi	r3, #138	; 0x8a
 80154ec:	6003      	strhi	r3, [r0, #0]
 80154ee:	700a      	strbls	r2, [r1, #0]
 80154f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80154f4:	bf98      	it	ls
 80154f6:	2001      	movls	r0, #1
 80154f8:	4770      	bx	lr
 80154fa:	4608      	mov	r0, r1
 80154fc:	4770      	bx	lr

080154fe <abort>:
 80154fe:	b508      	push	{r3, lr}
 8015500:	2006      	movs	r0, #6
 8015502:	f000 f833 	bl	801556c <raise>
 8015506:	2001      	movs	r0, #1
 8015508:	f7ec fe2e 	bl	8002168 <_exit>

0801550c <_malloc_usable_size_r>:
 801550c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015510:	1f18      	subs	r0, r3, #4
 8015512:	2b00      	cmp	r3, #0
 8015514:	bfbc      	itt	lt
 8015516:	580b      	ldrlt	r3, [r1, r0]
 8015518:	18c0      	addlt	r0, r0, r3
 801551a:	4770      	bx	lr

0801551c <_raise_r>:
 801551c:	291f      	cmp	r1, #31
 801551e:	b538      	push	{r3, r4, r5, lr}
 8015520:	4604      	mov	r4, r0
 8015522:	460d      	mov	r5, r1
 8015524:	d904      	bls.n	8015530 <_raise_r+0x14>
 8015526:	2316      	movs	r3, #22
 8015528:	6003      	str	r3, [r0, #0]
 801552a:	f04f 30ff 	mov.w	r0, #4294967295
 801552e:	bd38      	pop	{r3, r4, r5, pc}
 8015530:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015532:	b112      	cbz	r2, 801553a <_raise_r+0x1e>
 8015534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015538:	b94b      	cbnz	r3, 801554e <_raise_r+0x32>
 801553a:	4620      	mov	r0, r4
 801553c:	f000 f830 	bl	80155a0 <_getpid_r>
 8015540:	462a      	mov	r2, r5
 8015542:	4601      	mov	r1, r0
 8015544:	4620      	mov	r0, r4
 8015546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801554a:	f000 b817 	b.w	801557c <_kill_r>
 801554e:	2b01      	cmp	r3, #1
 8015550:	d00a      	beq.n	8015568 <_raise_r+0x4c>
 8015552:	1c59      	adds	r1, r3, #1
 8015554:	d103      	bne.n	801555e <_raise_r+0x42>
 8015556:	2316      	movs	r3, #22
 8015558:	6003      	str	r3, [r0, #0]
 801555a:	2001      	movs	r0, #1
 801555c:	e7e7      	b.n	801552e <_raise_r+0x12>
 801555e:	2400      	movs	r4, #0
 8015560:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015564:	4628      	mov	r0, r5
 8015566:	4798      	blx	r3
 8015568:	2000      	movs	r0, #0
 801556a:	e7e0      	b.n	801552e <_raise_r+0x12>

0801556c <raise>:
 801556c:	4b02      	ldr	r3, [pc, #8]	; (8015578 <raise+0xc>)
 801556e:	4601      	mov	r1, r0
 8015570:	6818      	ldr	r0, [r3, #0]
 8015572:	f7ff bfd3 	b.w	801551c <_raise_r>
 8015576:	bf00      	nop
 8015578:	20000510 	.word	0x20000510

0801557c <_kill_r>:
 801557c:	b538      	push	{r3, r4, r5, lr}
 801557e:	4d07      	ldr	r5, [pc, #28]	; (801559c <_kill_r+0x20>)
 8015580:	2300      	movs	r3, #0
 8015582:	4604      	mov	r4, r0
 8015584:	4608      	mov	r0, r1
 8015586:	4611      	mov	r1, r2
 8015588:	602b      	str	r3, [r5, #0]
 801558a:	f7ec fddd 	bl	8002148 <_kill>
 801558e:	1c43      	adds	r3, r0, #1
 8015590:	d102      	bne.n	8015598 <_kill_r+0x1c>
 8015592:	682b      	ldr	r3, [r5, #0]
 8015594:	b103      	cbz	r3, 8015598 <_kill_r+0x1c>
 8015596:	6023      	str	r3, [r4, #0]
 8015598:	bd38      	pop	{r3, r4, r5, pc}
 801559a:	bf00      	nop
 801559c:	20010b2c 	.word	0x20010b2c

080155a0 <_getpid_r>:
 80155a0:	f7ec bdca 	b.w	8002138 <_getpid>

080155a4 <trunc>:
 80155a4:	ec51 0b10 	vmov	r0, r1, d0
 80155a8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80155ac:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80155b0:	2b13      	cmp	r3, #19
 80155b2:	b5d0      	push	{r4, r6, r7, lr}
 80155b4:	460c      	mov	r4, r1
 80155b6:	dc10      	bgt.n	80155da <trunc+0x36>
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	bfa5      	ittet	ge
 80155bc:	4a11      	ldrge	r2, [pc, #68]	; (8015604 <trunc+0x60>)
 80155be:	fa42 f303 	asrge.w	r3, r2, r3
 80155c2:	2100      	movlt	r1, #0
 80155c4:	2100      	movge	r1, #0
 80155c6:	bfb9      	ittee	lt
 80155c8:	2000      	movlt	r0, #0
 80155ca:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 80155ce:	2000      	movge	r0, #0
 80155d0:	ea24 0103 	bicge.w	r1, r4, r3
 80155d4:	ec41 0b10 	vmov	d0, r0, r1
 80155d8:	bdd0      	pop	{r4, r6, r7, pc}
 80155da:	2b33      	cmp	r3, #51	; 0x33
 80155dc:	dd08      	ble.n	80155f0 <trunc+0x4c>
 80155de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80155e2:	d1f7      	bne.n	80155d4 <trunc+0x30>
 80155e4:	ee10 2a10 	vmov	r2, s0
 80155e8:	460b      	mov	r3, r1
 80155ea:	f7ea fe4f 	bl	800028c <__adddf3>
 80155ee:	e7f1      	b.n	80155d4 <trunc+0x30>
 80155f0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80155f4:	f04f 33ff 	mov.w	r3, #4294967295
 80155f8:	fa23 f202 	lsr.w	r2, r3, r2
 80155fc:	ea20 0602 	bic.w	r6, r0, r2
 8015600:	4630      	mov	r0, r6
 8015602:	e7e7      	b.n	80155d4 <trunc+0x30>
 8015604:	000fffff 	.word	0x000fffff

08015608 <_init>:
 8015608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801560a:	bf00      	nop
 801560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801560e:	bc08      	pop	{r3}
 8015610:	469e      	mov	lr, r3
 8015612:	4770      	bx	lr

08015614 <_fini>:
 8015614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015616:	bf00      	nop
 8015618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801561a:	bc08      	pop	{r3}
 801561c:	469e      	mov	lr, r3
 801561e:	4770      	bx	lr
