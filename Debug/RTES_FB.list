
RTES_FB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ba0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  08014d30  08014d30  00024d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015abc  08015abc  00030764  2**0
                  CONTENTS
  4 .ARM          00000008  08015abc  08015abc  00025abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015ac4  08015ac4  00030764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ac4  08015ac4  00025ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015ac8  08015ac8  00025ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000764  20000000  08015acc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000108d4  20000764  08016230  00030764  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011038  08016230  00031038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030764  2**0
                  CONTENTS, READONLY
 12 .debug_info   000507bf  00000000  00000000  00030794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074da  00000000  00000000  00080f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003788  00000000  00000000  00088430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000034d0  00000000  00000000  0008bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030ab2  00000000  00000000  0008f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035f10  00000000  00000000  000bfb3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a746  00000000  00000000  000f5a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00210190  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010098  00000000  00000000  002101e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000764 	.word	0x20000764
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014d18 	.word	0x08014d18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000768 	.word	0x20000768
 80001cc:	08014d18 	.word	0x08014d18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x30>)
 8000eb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000780 	.word	0x20000780
 8000ed0:	20000844 	.word	0x20000844

08000ed4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,10);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	230a      	movs	r3, #10
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <_write+0x24>)
 8000eea:	f00e fd9b 	bl	800fa24 <HAL_UART_Transmit>
return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20010dcc 	.word	0x20010dcc

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b0b2      	sub	sp, #200	; 0xc8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f02:	f00a f8b5 	bl	800b070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f06:	f000 f8ef 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0a:	f000 fab9 	bl	8001480 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f0e:	f000 f94d 	bl	80011ac <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f12:	f000 f983 	bl	800121c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f16:	f000 f9c1 	bl	800129c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f1a:	f000 f9e5 	bl	80012e8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f1e:	f000 fa21 	bl	8001364 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f22:	f000 fa4f 	bl	80013c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f26:	f000 fa7d 	bl	8001424 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  	//User button
  	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f001 fa55 	bl	80023dc <BSP_PB_Init>

	//Temperature
	BSP_TSENSOR_Init();
 8000f32:	f002 fb4d 	bl	80035d0 <BSP_TSENSOR_Init>
	printf(tmpSensorMsg);
 8000f36:	485a      	ldr	r0, [pc, #360]	; (80010a0 <main+0x1a4>)
 8000f38:	f011 fcde 	bl	80128f8 <iprintf>
	//HAL_UART_Transmit(&huart1,tmpSensorMsg,sizeof(tmpSensorMsg),1000);

//	//Humidity
	BSP_HSENSOR_Init();
 8000f3c:	f002 f8f6 	bl	800312c <BSP_HSENSOR_Init>
	printf(hmdSensorMsg);
 8000f40:	4858      	ldr	r0, [pc, #352]	; (80010a4 <main+0x1a8>)
 8000f42:	f011 fcd9 	bl	80128f8 <iprintf>
	//HAL_UART_Transmit(&huart1,hmdSensorMsg,sizeof(hmdSensorMsg),1000);

//	//Pressure
	BSP_PSENSOR_Init();
 8000f46:	f002 fb15 	bl	8003574 <BSP_PSENSOR_Init>
	printf(prsSensorMsg);
 8000f4a:	4857      	ldr	r0, [pc, #348]	; (80010a8 <main+0x1ac>)
 8000f4c:	f011 fcd4 	bl	80128f8 <iprintf>
	//HAL_UART_Transmit(&huart1,prsSensorMsg,sizeof(prsSensorMsg),1000);

	//Motion sensors

	BSP_MOTION_SENSOR_Init(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_GYRO);
 8000f50:	2101      	movs	r1, #1
 8000f52:	2000      	movs	r0, #0
 8000f54:	f002 f918 	bl	8003188 <BSP_MOTION_SENSOR_Init>
	BSP_MOTION_SENSOR_Init(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO);
 8000f58:	2102      	movs	r1, #2
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f002 f914 	bl	8003188 <BSP_MOTION_SENSOR_Init>

	BSP_MOTION_SENSOR_Enable(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_GYRO);
 8000f60:	2101      	movs	r1, #1
 8000f62:	2000      	movs	r0, #0
 8000f64:	f002 f960 	bl	8003228 <BSP_MOTION_SENSOR_Enable>
	BSP_MOTION_SENSOR_Enable(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO);
 8000f68:	2102      	movs	r1, #2
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f002 f95c 	bl	8003228 <BSP_MOTION_SENSOR_Enable>

	//Proximity

	VL53L0X_PROXIMITY_Init();
 8000f70:	f009 ff46 	bl	800ae00 <VL53L0X_PROXIMITY_Init>

	//Struct elements initialization

	sensors.humidity_value = 0;
 8000f74:	4b4d      	ldr	r3, [pc, #308]	; (80010ac <main+0x1b0>)
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
	sensors.pressure_value = 0;
 8000f7c:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <main+0x1b0>)
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
	sensors.temperature_value = 0;
 8000f84:	4b49      	ldr	r3, [pc, #292]	; (80010ac <main+0x1b0>)
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
	sensors.proximity = 0;
 8000f8c:	4b47      	ldr	r3, [pc, #284]	; (80010ac <main+0x1b0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	849a      	strh	r2, [r3, #36]	; 0x24
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <main+0x1b4>)
 8000f94:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000f98:	461d      	mov	r5, r3
 8000f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fa6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f00f fc46 	bl	801083e <osThreadCreate>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a3f      	ldr	r2, [pc, #252]	; (80010b4 <main+0x1b8>)
 8000fb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of tempSensorTask */
  osThreadDef(tempSensorTask, startTempSensorTask, osPriorityNormal, 0, 128);
 8000fb8:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <main+0x1bc>)
 8000fba:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000fbe:	461d      	mov	r5, r3
 8000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tempSensorTaskHandle = osThreadCreate(osThread(tempSensorTask), NULL);
 8000fcc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f00f fc33 	bl	801083e <osThreadCreate>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a38      	ldr	r2, [pc, #224]	; (80010bc <main+0x1c0>)
 8000fdc:	6013      	str	r3, [r2, #0]

  /* definition and creation of serialLogTask */
  osThreadDef(serialLogTask, startSerialLogTask, osPriorityNormal, 0, 128);
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <main+0x1c4>)
 8000fe0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  serialLogTaskHandle = osThreadCreate(osThread(serialLogTask), NULL);
 8000ff2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00f fc20 	bl	801083e <osThreadCreate>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <main+0x1c8>)
 8001002:	6013      	str	r3, [r2, #0]

  /* definition and creation of humiditySensorT */
  osThreadDef(humiditySensorT, startHumiditySensorTask, osPriorityNormal, 0, 128);
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <main+0x1cc>)
 8001006:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800100a:	461d      	mov	r5, r3
 800100c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001010:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  humiditySensorTHandle = osThreadCreate(osThread(humiditySensorT), NULL);
 8001018:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f00f fc0d 	bl	801083e <osThreadCreate>
 8001024:	4603      	mov	r3, r0
 8001026:	4a29      	ldr	r2, [pc, #164]	; (80010cc <main+0x1d0>)
 8001028:	6013      	str	r3, [r2, #0]

  /* definition and creation of pressureSensorT */
  osThreadDef(pressureSensorT, startPressureSensorTask, osPriorityNormal, 0, 128);
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <main+0x1d4>)
 800102c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001030:	461d      	mov	r5, r3
 8001032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001036:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureSensorTHandle = osThreadCreate(osThread(pressureSensorT), NULL);
 800103e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f00f fbfa 	bl	801083e <osThreadCreate>
 800104a:	4603      	mov	r3, r0
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <main+0x1d8>)
 800104e:	6013      	str	r3, [r2, #0]

  /* definition and creation of nfcTagTask */
  osThreadDef(nfcTagTask, startNfcTagTask, osPriorityNormal, 0, 128);
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <main+0x1dc>)
 8001052:	f107 0420 	add.w	r4, r7, #32
 8001056:	461d      	mov	r5, r3
 8001058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001060:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  nfcTagTaskHandle = osThreadCreate(osThread(nfcTagTask), NULL);
 8001064:	f107 0320 	add.w	r3, r7, #32
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f00f fbe7 	bl	801083e <osThreadCreate>
 8001070:	4603      	mov	r3, r0
 8001072:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <main+0x1e0>)
 8001074:	6013      	str	r3, [r2, #0]

  /* definition and creation of userButtonTask */
  osThreadDef(userButtonTask, startUserButtonTask, osPriorityAboveNormal, 0, 128);
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <main+0x1e4>)
 8001078:	1d3c      	adds	r4, r7, #4
 800107a:	461d      	mov	r5, r3
 800107c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  userButtonTaskHandle = osThreadCreate(osThread(userButtonTask), NULL);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f00f fbd6 	bl	801083e <osThreadCreate>
 8001092:	4603      	mov	r3, r0
 8001094:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <main+0x1e8>)
 8001096:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001098:	f00f fbca 	bl	8010830 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800109c:	e7fe      	b.n	800109c <main+0x1a0>
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000030 	.word	0x20000030
 80010a8:	2000005c 	.word	0x2000005c
 80010ac:	20010e5c 	.word	0x20010e5c
 80010b0:	08014d98 	.word	0x08014d98
 80010b4:	20010884 	.word	0x20010884
 80010b8:	08014db4 	.word	0x08014db4
 80010bc:	20010e54 	.word	0x20010e54
 80010c0:	08014dd0 	.word	0x08014dd0
 80010c4:	20010dc4 	.word	0x20010dc4
 80010c8:	08014dec 	.word	0x08014dec
 80010cc:	20010880 	.word	0x20010880
 80010d0:	08014e08 	.word	0x08014e08
 80010d4:	20010e50 	.word	0x20010e50
 80010d8:	08014e24 	.word	0x08014e24
 80010dc:	20010e58 	.word	0x20010e58
 80010e0:	08014e40 	.word	0x08014e40
 80010e4:	20010dc8 	.word	0x20010dc8

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b096      	sub	sp, #88	; 0x58
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	2244      	movs	r2, #68	; 0x44
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f010 ff31 	bl	8011f5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800110a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800110e:	f00b fe61 	bl	800cdd4 <HAL_PWREx_ControlVoltageScaling>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001118:	f000 fcde 	bl	8001ad8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800111c:	f00b fe3c 	bl	800cd98 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <SystemClock_Config+0xc0>)
 8001122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001126:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <SystemClock_Config+0xc0>)
 8001128:	f023 0318 	bic.w	r3, r3, #24
 800112c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001130:	2314      	movs	r3, #20
 8001132:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001140:	2360      	movs	r3, #96	; 0x60
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001148:	2301      	movs	r3, #1
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800114c:	2301      	movs	r3, #1
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001150:	2328      	movs	r3, #40	; 0x28
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001154:	2307      	movs	r3, #7
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001158:	2302      	movs	r3, #2
 800115a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800115c:	2302      	movs	r3, #2
 800115e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4618      	mov	r0, r3
 8001166:	f00b ff57 	bl	800d018 <HAL_RCC_OscConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001170:	f000 fcb2 	bl	8001ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001174:	230f      	movs	r3, #15
 8001176:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001178:	2303      	movs	r3, #3
 800117a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	2104      	movs	r1, #4
 800118c:	4618      	mov	r0, r3
 800118e:	f00c fb29 	bl	800d7e4 <HAL_RCC_ClockConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001198:	f000 fc9e 	bl	8001ad8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800119c:	f00d fdae 	bl	800ecfc <HAL_RCCEx_EnableMSIPLLMode>
}
 80011a0:	bf00      	nop
 80011a2:	3758      	adds	r7, #88	; 0x58
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000

080011ac <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011b2:	4a19      	ldr	r2, [pc, #100]	; (8001218 <MX_DFSDM1_Init+0x6c>)
 80011b4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011e4:	2204      	movs	r2, #4
 80011e6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_DFSDM1_Init+0x68>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_DFSDM1_Init+0x68>)
 8001202:	f00a f873 	bl	800b2ec <HAL_DFSDM_ChannelInit>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800120c:	f000 fc64 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20010848 	.word	0x20010848
 8001218:	40016020 	.word	0x40016020

0800121c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_I2C2_Init+0x74>)
 8001222:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <MX_I2C2_Init+0x78>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_I2C2_Init+0x74>)
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <MX_I2C2_Init+0x7c>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_I2C2_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_I2C2_Init+0x74>)
 8001234:	2201      	movs	r2, #1
 8001236:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_I2C2_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_I2C2_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_I2C2_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_I2C2_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_I2C2_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001256:	480e      	ldr	r0, [pc, #56]	; (8001290 <MX_I2C2_Init+0x74>)
 8001258:	f00a fc45 	bl	800bae6 <HAL_I2C_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001262:	f000 fc39 	bl	8001ad8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <MX_I2C2_Init+0x74>)
 800126a:	f00b fbb5 	bl	800c9d8 <HAL_I2CEx_ConfigAnalogFilter>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001274:	f000 fc30 	bl	8001ad8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001278:	2100      	movs	r1, #0
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_I2C2_Init+0x74>)
 800127c:	f00b fbf7 	bl	800ca6e <HAL_I2CEx_ConfigDigitalFilter>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001286:	f000 fc27 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20010d14 	.word	0x20010d14
 8001294:	40005800 	.word	0x40005800
 8001298:	10909cec 	.word	0x10909cec

0800129c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_QUADSPI_Init+0x44>)
 80012a2:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <MX_QUADSPI_Init+0x48>)
 80012a4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_QUADSPI_Init+0x44>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_QUADSPI_Init+0x44>)
 80012ae:	2204      	movs	r2, #4
 80012b0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_QUADSPI_Init+0x44>)
 80012b4:	2210      	movs	r2, #16
 80012b6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_QUADSPI_Init+0x44>)
 80012ba:	2217      	movs	r2, #23
 80012bc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_QUADSPI_Init+0x44>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_QUADSPI_Init+0x44>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_QUADSPI_Init+0x44>)
 80012cc:	f00b fde8 	bl	800cea0 <HAL_QSPI_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80012d6:	f000 fbff 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20010e84 	.word	0x20010e84
 80012e4:	a0001000 	.word	0xa0001000

080012e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_SPI3_Init+0x74>)
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <MX_SPI3_Init+0x78>)
 80012f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_SPI3_Init+0x74>)
 80012f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_SPI3_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_SPI3_Init+0x74>)
 8001302:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001306:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_SPI3_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_SPI3_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_SPI3_Init+0x74>)
 8001316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_SPI3_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_SPI3_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_SPI3_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_SPI3_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_SPI3_Init+0x74>)
 8001336:	2207      	movs	r2, #7
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_SPI3_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_SPI3_Init+0x74>)
 8001342:	2208      	movs	r2, #8
 8001344:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_SPI3_Init+0x74>)
 8001348:	f00d ffaa 	bl	800f2a0 <HAL_SPI_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001352:	f000 fbc1 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20010d60 	.word	0x20010d60
 8001360:	40003c00 	.word	0x40003c00

08001364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_USART1_UART_Init+0x58>)
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <MX_USART1_UART_Init+0x5c>)
 800136c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_USART1_UART_Init+0x58>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_USART1_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_USART1_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_USART1_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_USART1_UART_Init+0x58>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_USART1_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_USART1_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_USART1_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_USART1_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_USART1_UART_Init+0x58>)
 80013a8:	f00e faee 	bl	800f988 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013b2:	f000 fb91 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20010dcc 	.word	0x20010dcc
 80013c0:	40013800 	.word	0x40013800

080013c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013ca:	4a15      	ldr	r2, [pc, #84]	; (8001420 <MX_USART3_UART_Init+0x5c>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_USART3_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_USART3_UART_Init+0x58>)
 8001408:	f00e fabe 	bl	800f988 <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001412:	f000 fb61 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20010888 	.word	0x20010888
 8001420:	40004800 	.word	0x40004800

08001424 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800142e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001432:	2206      	movs	r2, #6
 8001434:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001438:	2202      	movs	r2, #2
 800143a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143e:	2202      	movs	r2, #2
 8001440:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001468:	f00b fb4d 	bl	800cb06 <HAL_PCD_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001472:	f000 fb31 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2001090c 	.word	0x2001090c

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	4bba      	ldr	r3, [pc, #744]	; (8001780 <MX_GPIO_Init+0x300>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4ab9      	ldr	r2, [pc, #740]	; (8001780 <MX_GPIO_Init+0x300>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4bb7      	ldr	r3, [pc, #732]	; (8001780 <MX_GPIO_Init+0x300>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	4bb4      	ldr	r3, [pc, #720]	; (8001780 <MX_GPIO_Init+0x300>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4ab3      	ldr	r2, [pc, #716]	; (8001780 <MX_GPIO_Init+0x300>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4bb1      	ldr	r3, [pc, #708]	; (8001780 <MX_GPIO_Init+0x300>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4bae      	ldr	r3, [pc, #696]	; (8001780 <MX_GPIO_Init+0x300>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	4aad      	ldr	r2, [pc, #692]	; (8001780 <MX_GPIO_Init+0x300>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d2:	4bab      	ldr	r3, [pc, #684]	; (8001780 <MX_GPIO_Init+0x300>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4ba8      	ldr	r3, [pc, #672]	; (8001780 <MX_GPIO_Init+0x300>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4aa7      	ldr	r2, [pc, #668]	; (8001780 <MX_GPIO_Init+0x300>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4ba5      	ldr	r3, [pc, #660]	; (8001780 <MX_GPIO_Init+0x300>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f6:	4ba2      	ldr	r3, [pc, #648]	; (8001780 <MX_GPIO_Init+0x300>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4aa1      	ldr	r2, [pc, #644]	; (8001780 <MX_GPIO_Init+0x300>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b9f      	ldr	r3, [pc, #636]	; (8001780 <MX_GPIO_Init+0x300>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001514:	489b      	ldr	r0, [pc, #620]	; (8001784 <MX_GPIO_Init+0x304>)
 8001516:	f00a faab 	bl	800ba70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f248 1104 	movw	r1, #33028	; 0x8104
 8001520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001524:	f00a faa4 	bl	800ba70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001528:	2200      	movs	r2, #0
 800152a:	f24f 0114 	movw	r1, #61460	; 0xf014
 800152e:	4896      	ldr	r0, [pc, #600]	; (8001788 <MX_GPIO_Init+0x308>)
 8001530:	f00a fa9e 	bl	800ba70 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f241 0181 	movw	r1, #4225	; 0x1081
 800153a:	4894      	ldr	r0, [pc, #592]	; (800178c <MX_GPIO_Init+0x30c>)
 800153c:	f00a fa98 	bl	800ba70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001546:	4891      	ldr	r0, [pc, #580]	; (800178c <MX_GPIO_Init+0x30c>)
 8001548:	f00a fa92 	bl	800ba70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001552:	488f      	ldr	r0, [pc, #572]	; (8001790 <MX_GPIO_Init+0x310>)
 8001554:	f00a fa8c 	bl	800ba70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2120      	movs	r1, #32
 800155c:	488a      	ldr	r0, [pc, #552]	; (8001788 <MX_GPIO_Init+0x308>)
 800155e:	f00a fa87 	bl	800ba70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2101      	movs	r1, #1
 8001566:	4887      	ldr	r0, [pc, #540]	; (8001784 <MX_GPIO_Init+0x304>)
 8001568:	f00a fa82 	bl	800ba70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800156c:	f240 1315 	movw	r3, #277	; 0x115
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	487f      	ldr	r0, [pc, #508]	; (8001784 <MX_GPIO_Init+0x304>)
 8001586:	f009 ffbd 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800158a:	236a      	movs	r3, #106	; 0x6a
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800158e:	4b81      	ldr	r3, [pc, #516]	; (8001794 <MX_GPIO_Init+0x314>)
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4879      	ldr	r0, [pc, #484]	; (8001784 <MX_GPIO_Init+0x304>)
 800159e:	f009 ffb1 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80015a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a8:	4b7b      	ldr	r3, [pc, #492]	; (8001798 <MX_GPIO_Init+0x318>)
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	4876      	ldr	r0, [pc, #472]	; (8001790 <MX_GPIO_Init+0x310>)
 80015b8:	f009 ffa4 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80015bc:	233f      	movs	r3, #63	; 0x3f
 80015be:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015c0:	230b      	movs	r3, #11
 80015c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4870      	ldr	r0, [pc, #448]	; (8001790 <MX_GPIO_Init+0x310>)
 80015d0:	f009 ff98 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80015d4:	2303      	movs	r3, #3
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015e4:	2308      	movs	r3, #8
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f009 ff87 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80015f6:	f248 1304 	movw	r3, #33028	; 0x8104
 80015fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001612:	f009 ff77 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001616:	2308      	movs	r3, #8
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001626:	2301      	movs	r3, #1
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001634:	f009 ff66 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001638:	2310      	movs	r3, #16
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800163c:	230b      	movs	r3, #11
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f009 ff59 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001652:	23e0      	movs	r3, #224	; 0xe0
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001662:	2305      	movs	r3, #5
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f009 ff48 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001674:	2301      	movs	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001678:	4b46      	ldr	r3, [pc, #280]	; (8001794 <MX_GPIO_Init+0x314>)
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4840      	ldr	r0, [pc, #256]	; (8001788 <MX_GPIO_Init+0x308>)
 8001688:	f009 ff3c 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800168c:	2302      	movs	r3, #2
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001690:	230b      	movs	r3, #11
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	483a      	ldr	r0, [pc, #232]	; (8001788 <MX_GPIO_Init+0x308>)
 80016a0:	f009 ff30 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016a4:	f24f 0334 	movw	r3, #61492	; 0xf034
 80016a8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4832      	ldr	r0, [pc, #200]	; (8001788 <MX_GPIO_Init+0x308>)
 80016be:	f009 ff21 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80016c2:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80016c6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <MX_GPIO_Init+0x314>)
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	482d      	ldr	r0, [pc, #180]	; (800178c <MX_GPIO_Init+0x30c>)
 80016d8:	f009 ff14 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80016dc:	f243 0381 	movw	r3, #12417	; 0x3081
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4825      	ldr	r0, [pc, #148]	; (800178c <MX_GPIO_Init+0x30c>)
 80016f6:	f009 ff05 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80016fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	481f      	ldr	r0, [pc, #124]	; (8001790 <MX_GPIO_Init+0x310>)
 8001714:	f009 fef6 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001718:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_GPIO_Init+0x314>)
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4818      	ldr	r0, [pc, #96]	; (8001790 <MX_GPIO_Init+0x310>)
 800172e:	f009 fee9 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001732:	2302      	movs	r3, #2
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001742:	2305      	movs	r3, #5
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	480f      	ldr	r0, [pc, #60]	; (800178c <MX_GPIO_Init+0x30c>)
 800174e:	f009 fed9 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001752:	2378      	movs	r3, #120	; 0x78
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001762:	2307      	movs	r3, #7
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4807      	ldr	r0, [pc, #28]	; (800178c <MX_GPIO_Init+0x30c>)
 800176e:	f009 fec9 	bl	800b504 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001772:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001778:	2312      	movs	r3, #18
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	e00d      	b.n	800179c <MX_GPIO_Init+0x31c>
 8001780:	40021000 	.word	0x40021000
 8001784:	48001000 	.word	0x48001000
 8001788:	48000400 	.word	0x48000400
 800178c:	48000c00 	.word	0x48000c00
 8001790:	48000800 	.word	0x48000800
 8001794:	10110000 	.word	0x10110000
 8001798:	10210000 	.word	0x10210000
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a2:	2304      	movs	r3, #4
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <MX_GPIO_Init+0x35c>)
 80017ae:	f009 fea9 	bl	800b504 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2105      	movs	r1, #5
 80017b6:	2017      	movs	r0, #23
 80017b8:	f009 fd6e 	bl	800b298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017bc:	2017      	movs	r0, #23
 80017be:	f009 fd87 	bl	800b2d0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2105      	movs	r1, #5
 80017c6:	2028      	movs	r0, #40	; 0x28
 80017c8:	f009 fd66 	bl	800b298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017cc:	2028      	movs	r0, #40	; 0x28
 80017ce:	f009 fd7f 	bl	800b2d0 <HAL_NVIC_EnableIRQ>

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	48000400 	.word	0x48000400

080017e0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		//TEST

		//BSP_LED_Toggle(LED2);
		BSP_MOTION_SENSOR_Axes_t  acc_value = {0, 0, 0};
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		BSP_MOTION_SENSOR_Axes_t  gyr_value = {0, 0, 0};
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
		BSP_MOTION_SENSOR_Axes_t  mag_value = {0, 0, 0};
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

		BSP_MOTION_SENSOR_GetAxes(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO, &acc_value);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	461a      	mov	r2, r3
 8001812:	2102      	movs	r1, #2
 8001814:	2000      	movs	r0, #0
 8001816:	f001 fd67 	bl	80032e8 <BSP_MOTION_SENSOR_GetAxes>
		BSP_MOTION_SENSOR_GetAxes(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_GYRO, &gyr_value);
 800181a:	f107 0318 	add.w	r3, r7, #24
 800181e:	461a      	mov	r2, r3
 8001820:	2101      	movs	r1, #1
 8001822:	2000      	movs	r0, #0
 8001824:	f001 fd60 	bl	80032e8 <BSP_MOTION_SENSOR_GetAxes>

		sensors.acc_value = acc_value;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <StartDefaultTask+0x70>)
 800182a:	330c      	adds	r3, #12
 800182c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001830:	ca07      	ldmia	r2, {r0, r1, r2}
 8001832:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		sensors.gyr_value = gyr_value;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <StartDefaultTask+0x70>)
 8001838:	3318      	adds	r3, #24
 800183a:	f107 0218 	add.w	r2, r7, #24
 800183e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001840:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//
//		proximity_value = VL53L0X_PROXIMITY_GetDistance();
////
//		sensors.proximity = proximity_value;

		osDelay(1000);
 8001844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001848:	f00f f845 	bl	80108d6 <osDelay>
	{
 800184c:	e7cc      	b.n	80017e8 <StartDefaultTask+0x8>
 800184e:	bf00      	nop
 8001850:	20010e5c 	.word	0x20010e5c

08001854 <startTempSensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTempSensorTask */
void startTempSensorTask(void const * argument)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTempSensorTask */
	/* Infinite loop */
	for(;;)
	{
		//TODO: Access sensors data struct mutual exclusion
		sensors.temperature_value = BSP_TSENSOR_ReadTemp();
 800185c:	f001 fed4 	bl	8003608 <BSP_TSENSOR_ReadTemp>
 8001860:	eef0 7a40 	vmov.f32	s15, s0
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <startTempSensorTask+0x20>)
 8001866:	edc3 7a00 	vstr	s15, [r3]
		osDelay(1000);
 800186a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800186e:	f00f f832 	bl	80108d6 <osDelay>
		sensors.temperature_value = BSP_TSENSOR_ReadTemp();
 8001872:	e7f3      	b.n	800185c <startTempSensorTask+0x8>
 8001874:	20010e5c 	.word	0x20010e5c

08001878 <startSerialLogTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSerialLogTask */
void startSerialLogTask(void const * argument)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08e      	sub	sp, #56	; 0x38
 800187c:	af02      	add	r7, sp, #8
 800187e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		//TODO: Access sensors data struct in mutual exclusion

		printf("***** New sensors values ***** \n\r");
 8001880:	484b      	ldr	r0, [pc, #300]	; (80019b0 <startSerialLogTask+0x138>)
 8001882:	f011 f839 	bl	80128f8 <iprintf>

		//Pressure

		int normalized = sensors.pressure_value;
 8001886:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <startSerialLogTask+0x13c>)
 8001888:	edd3 7a02 	vldr	s15, [r3, #8]
 800188c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001890:	ee17 3a90 	vmov	r3, s15
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
		//printf(" PRESSURE PRINT TEST: %d \r\n", normalized);
		snprintf(str_prs,100," PRESSURE = %d mBar \n\r", normalized);
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	4a47      	ldr	r2, [pc, #284]	; (80019b8 <startSerialLogTask+0x140>)
 800189a:	2164      	movs	r1, #100	; 0x64
 800189c:	4847      	ldr	r0, [pc, #284]	; (80019bc <startSerialLogTask+0x144>)
 800189e:	f011 f933 	bl	8012b08 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_prs,sizeof(str_prs),1000);
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	2264      	movs	r2, #100	; 0x64
 80018a8:	4944      	ldr	r1, [pc, #272]	; (80019bc <startSerialLogTask+0x144>)
 80018aa:	4845      	ldr	r0, [pc, #276]	; (80019c0 <startSerialLogTask+0x148>)
 80018ac:	f00e f8ba 	bl	800fa24 <HAL_UART_Transmit>

		//Temperature

		float temp_value = sensors.temperature_value;
 80018b0:	4b40      	ldr	r3, [pc, #256]	; (80019b4 <startSerialLogTask+0x13c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
		int tmpInt1 = temp_value;
 80018b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018be:	ee17 3a90 	vmov	r3, s15
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
		float tmpFrac = temp_value - tmpInt1;
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80018d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d6:	edc7 7a08 	vstr	s15, [r7, #32]
		int tmpInt2 = trunc(tmpFrac * 100);
 80018da:	edd7 7a08 	vldr	s15, [r7, #32]
 80018de:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80019c4 <startSerialLogTask+0x14c>
 80018e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e6:	ee17 0a90 	vmov	r0, s15
 80018ea:	f7fe fe2d 	bl	8000548 <__aeabi_f2d>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	ec43 2b10 	vmov	d0, r2, r3
 80018f6:	f013 f9dd 	bl	8014cb4 <trunc>
 80018fa:	ec53 2b10 	vmov	r2, r3, d0
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f929 	bl	8000b58 <__aeabi_d2iz>
 8001906:	4603      	mov	r3, r0
 8001908:	61fb      	str	r3, [r7, #28]
		//printf(" TEMPERATURE = %d.%02d C\r\n", tmpInt1, tmpInt2);
		snprintf(str_tmp,100," TEMPERATURE = %d.%02d C\n\r", tmpInt1, tmpInt2);
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	4a2d      	ldr	r2, [pc, #180]	; (80019c8 <startSerialLogTask+0x150>)
 8001912:	2164      	movs	r1, #100	; 0x64
 8001914:	482d      	ldr	r0, [pc, #180]	; (80019cc <startSerialLogTask+0x154>)
 8001916:	f011 f8f7 	bl	8012b08 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	2264      	movs	r2, #100	; 0x64
 8001920:	492a      	ldr	r1, [pc, #168]	; (80019cc <startSerialLogTask+0x154>)
 8001922:	4827      	ldr	r0, [pc, #156]	; (80019c0 <startSerialLogTask+0x148>)
 8001924:	f00e f87e 	bl	800fa24 <HAL_UART_Transmit>

		//Humidity

		int hmd = sensors.humidity_value;
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <startSerialLogTask+0x13c>)
 800192a:	edd3 7a01 	vldr	s15, [r3, #4]
 800192e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001932:	ee17 3a90 	vmov	r3, s15
 8001936:	61bb      	str	r3, [r7, #24]
		//printf(" HUMIDITY = %d %%\r\n", hmd);
		snprintf(str_hmd,100," HUMIDITY = %d %%\n\r", hmd);
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <startSerialLogTask+0x158>)
 800193c:	2164      	movs	r1, #100	; 0x64
 800193e:	4825      	ldr	r0, [pc, #148]	; (80019d4 <startSerialLogTask+0x15c>)
 8001940:	f011 f8e2 	bl	8012b08 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_hmd,sizeof(str_hmd),1000);
 8001944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001948:	2264      	movs	r2, #100	; 0x64
 800194a:	4922      	ldr	r1, [pc, #136]	; (80019d4 <startSerialLogTask+0x15c>)
 800194c:	481c      	ldr	r0, [pc, #112]	; (80019c0 <startSerialLogTask+0x148>)
 800194e:	f00e f869 	bl	800fa24 <HAL_UART_Transmit>

		//Gyroscope

		BSP_MOTION_SENSOR_Axes_t gyro = sensors.gyr_value;
 8001952:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <startSerialLogTask+0x13c>)
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	3218      	adds	r2, #24
 800195a:	ca07      	ldmia	r2, {r0, r1, r2}
 800195c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		//printf(" HUMIDITY = %d %%\r\n", hmd);
		snprintf(str_gyro,100, "GYR-X\": %d, \"GYR-Y\": %d, \"GYR-Z\": %d,", gyro.x, gyro.y, gyro.z);
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	9201      	str	r2, [sp, #4]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	460b      	mov	r3, r1
 800196c:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <startSerialLogTask+0x160>)
 800196e:	2164      	movs	r1, #100	; 0x64
 8001970:	481a      	ldr	r0, [pc, #104]	; (80019dc <startSerialLogTask+0x164>)
 8001972:	f011 f8c9 	bl	8012b08 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),1000);
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	2264      	movs	r2, #100	; 0x64
 800197c:	4917      	ldr	r1, [pc, #92]	; (80019dc <startSerialLogTask+0x164>)
 800197e:	4810      	ldr	r0, [pc, #64]	; (80019c0 <startSerialLogTask+0x148>)
 8001980:	f00e f850 	bl	800fa24 <HAL_UART_Transmit>

		//printf(" HUMIDITY = %d %%\r\n", hmd);
		snprintf(str_gyro,100, "DISTANCE = %d \n\r,", sensors.proximity);
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <startSerialLogTask+0x13c>)
 8001986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001988:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <startSerialLogTask+0x168>)
 800198a:	2164      	movs	r1, #100	; 0x64
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <startSerialLogTask+0x164>)
 800198e:	f011 f8bb 	bl	8012b08 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),1000);
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	2264      	movs	r2, #100	; 0x64
 8001998:	4910      	ldr	r1, [pc, #64]	; (80019dc <startSerialLogTask+0x164>)
 800199a:	4809      	ldr	r0, [pc, #36]	; (80019c0 <startSerialLogTask+0x148>)
 800199c:	f00e f842 	bl	800fa24 <HAL_UART_Transmit>

		printf("\n\r");
 80019a0:	4810      	ldr	r0, [pc, #64]	; (80019e4 <startSerialLogTask+0x16c>)
 80019a2:	f010 ffa9 	bl	80128f8 <iprintf>

		osDelay(3000);
 80019a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019aa:	f00e ff94 	bl	80108d6 <osDelay>
	{
 80019ae:	e767      	b.n	8001880 <startSerialLogTask+0x8>
 80019b0:	08014e5c 	.word	0x08014e5c
 80019b4:	20010e5c 	.word	0x20010e5c
 80019b8:	08014e80 	.word	0x08014e80
 80019bc:	20000b0c 	.word	0x20000b0c
 80019c0:	20010dcc 	.word	0x20010dcc
 80019c4:	42c80000 	.word	0x42c80000
 80019c8:	08014e98 	.word	0x08014e98
 80019cc:	20000a44 	.word	0x20000a44
 80019d0:	08014eb4 	.word	0x08014eb4
 80019d4:	20000aa8 	.word	0x20000aa8
 80019d8:	08014ec8 	.word	0x08014ec8
 80019dc:	20000b70 	.word	0x20000b70
 80019e0:	08014ef0 	.word	0x08014ef0
 80019e4:	08014f04 	.word	0x08014f04

080019e8 <startHumiditySensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startHumiditySensorTask */
void startHumiditySensorTask(void const * argument)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startHumiditySensorTask */
	/* Infinite loop */
	for(;;)
	{
		//TODO: Access sensors data struct in mutual exclusion
		sensors.humidity_value = BSP_HSENSOR_ReadHumidity();
 80019f0:	f001 fbbc 	bl	800316c <BSP_HSENSOR_ReadHumidity>
 80019f4:	eef0 7a40 	vmov.f32	s15, s0
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <startHumiditySensorTask+0x20>)
 80019fa:	edc3 7a01 	vstr	s15, [r3, #4]
		osDelay(1000);
 80019fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a02:	f00e ff68 	bl	80108d6 <osDelay>
		sensors.humidity_value = BSP_HSENSOR_ReadHumidity();
 8001a06:	e7f3      	b.n	80019f0 <startHumiditySensorTask+0x8>
 8001a08:	20010e5c 	.word	0x20010e5c

08001a0c <startPressureSensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startPressureSensorTask */
void startPressureSensorTask(void const * argument)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		//TODO: Access sensors data struct in mutual exclusion
		sensors.pressure_value = BSP_PSENSOR_ReadPressure();
 8001a14:	f001 fdce 	bl	80035b4 <BSP_PSENSOR_ReadPressure>
 8001a18:	eef0 7a40 	vmov.f32	s15, s0
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <startPressureSensorTask+0x20>)
 8001a1e:	edc3 7a02 	vstr	s15, [r3, #8]
		osDelay(1000);
 8001a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a26:	f00e ff56 	bl	80108d6 <osDelay>
		sensors.pressure_value = BSP_PSENSOR_ReadPressure();
 8001a2a:	e7f3      	b.n	8001a14 <startPressureSensorTask+0x8>
 8001a2c:	20010e5c 	.word	0x20010e5c

08001a30 <startNfcTagTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startNfcTagTask */
void startNfcTagTask(void const * argument)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNfcTagTask */
	/* Infinite loop */
	for(;;)
 8001a38:	e7fe      	b.n	8001a38 <startNfcTagTask+0x8>
	...

08001a3c <startUserButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUserButtonTask */
void startUserButtonTask(void const * argument)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUserButtonTask */
  /* Infinite loop */
  for(;;)
  {
	if (isReadingActivated == 0) {
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <startUserButtonTask+0x68>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d11b      	bne.n	8001a84 <startUserButtonTask+0x48>

		printf("Press the USER button to activate the weather station \n\r");
 8001a4c:	4816      	ldr	r0, [pc, #88]	; (8001aa8 <startUserButtonTask+0x6c>)
 8001a4e:	f010 ff53 	bl	80128f8 <iprintf>
		while(BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET);
 8001a52:	bf00      	nop
 8001a54:	2000      	movs	r0, #0
 8001a56:	f000 fd17 	bl	8002488 <BSP_PB_GetState>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f9      	beq.n	8001a54 <startUserButtonTask+0x18>
		while(BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_SET);
 8001a60:	bf00      	nop
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 fd10 	bl	8002488 <BSP_PB_GetState>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d0f9      	beq.n	8001a62 <startUserButtonTask+0x26>
		printf("Button pressed, starting sensors readings \n\r");
 8001a6e:	480f      	ldr	r0, [pc, #60]	; (8001aac <startUserButtonTask+0x70>)
 8001a70:	f010 ff42 	bl	80128f8 <iprintf>
		isReadingActivated = 1;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <startUserButtonTask+0x68>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
		//osThreadSetPriority(userButtonTaskHandle, osPriorityIdle);
		osDelay(1000);
 8001a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a7e:	f00e ff2a 	bl	80108d6 <osDelay>
 8001a82:	e7df      	b.n	8001a44 <startUserButtonTask+0x8>

	} else {

		if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) { //For detecting a long press
 8001a84:	2000      	movs	r0, #0
 8001a86:	f000 fcff 	bl	8002488 <BSP_PB_GetState>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <startUserButtonTask+0x60>

			printf("Detected a button in reset state, preempting sensor tasks \n\r");
 8001a90:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <startUserButtonTask+0x74>)
 8001a92:	f010 ff31 	bl	80128f8 <iprintf>
			isReadingActivated = 0;
 8001a96:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <startUserButtonTask+0x68>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
		}

		osDelay(1);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f00e ff1a 	bl	80108d6 <osDelay>
	if (isReadingActivated == 0) {
 8001aa2:	e7cf      	b.n	8001a44 <startUserButtonTask+0x8>
 8001aa4:	20000bd4 	.word	0x20000bd4
 8001aa8:	08014f08 	.word	0x08014f08
 8001aac:	08014f44 	.word	0x08014f44
 8001ab0:	08014f74 	.word	0x08014f74

08001ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ac6:	f009 faeb 	bl	800b0a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40001000 	.word	0x40001000

08001ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <Error_Handler+0x8>
	...

08001ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_MspInit+0x4c>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_MspInit+0x4c>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6613      	str	r3, [r2, #96]	; 0x60
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_MspInit+0x4c>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	210f      	movs	r1, #15
 8001b1e:	f06f 0001 	mvn.w	r0, #1
 8001b22:	f009 fbb9 	bl	800b298 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0ac      	sub	sp, #176	; 0xb0
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2288      	movs	r2, #136	; 0x88
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f010 fa02 	bl	8011f5e <memset>
  if(DFSDM1_Init == 0)
 8001b5a:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d142      	bne.n	8001be8 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00c f86e 	bl	800dc54 <HAL_RCCEx_PeriphCLKConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001b7e:	f7ff ffab 	bl	8001ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b86:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ba0:	f043 0310 	orr.w	r3, r3, #16
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001bb2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001bcc:	2306      	movs	r3, #6
 8001bce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4807      	ldr	r0, [pc, #28]	; (8001bf8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001bda:	f009 fc93 	bl	800b504 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	4a02      	ldr	r2, [pc, #8]	; (8001bf0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001be6:	6013      	str	r3, [r2, #0]
  }

}
 8001be8:	bf00      	nop
 8001bea:	37b0      	adds	r7, #176	; 0xb0
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000bd8 	.word	0x20000bd8
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48001000 	.word	0x48001000

08001bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b0ac      	sub	sp, #176	; 0xb0
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2288      	movs	r2, #136	; 0x88
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f010 f99e 	bl	8011f5e <memset>
  if(hi2c->Instance==I2C2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a21      	ldr	r2, [pc, #132]	; (8001cac <HAL_I2C_MspInit+0xb0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d13b      	bne.n	8001ca4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00c f80b 	bl	800dc54 <HAL_RCCEx_PeriphCLKConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c44:	f7ff ff48 	bl	8001ad8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_I2C_MspInit+0xb4>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_I2C_MspInit+0xb4>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_I2C_MspInit+0xb4>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001c60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c68:	2312      	movs	r3, #18
 8001c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c84:	4619      	mov	r1, r3
 8001c86:	480b      	ldr	r0, [pc, #44]	; (8001cb4 <HAL_I2C_MspInit+0xb8>)
 8001c88:	f009 fc3c 	bl	800b504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_I2C_MspInit+0xb4>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <HAL_I2C_MspInit+0xb4>)
 8001c92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c96:	6593      	str	r3, [r2, #88]	; 0x58
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_I2C_MspInit+0xb4>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	37b0      	adds	r7, #176	; 0xb0
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40005800 	.word	0x40005800
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	48000400 	.word	0x48000400

08001cb8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <HAL_I2C_MspDeInit+0x3c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10f      	bne.n	8001cea <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_I2C_MspDeInit+0x40>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_I2C_MspDeInit+0x40>)
 8001cd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cd4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cda:	4808      	ldr	r0, [pc, #32]	; (8001cfc <HAL_I2C_MspDeInit+0x44>)
 8001cdc:	f009 fdbc 	bl	800b858 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001ce0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <HAL_I2C_MspDeInit+0x44>)
 8001ce6:	f009 fdb7 	bl	800b858 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40005800 	.word	0x40005800
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	48000400 	.word	0x48000400

08001d00 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <HAL_QSPI_MspInit+0x7c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d128      	bne.n	8001d74 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <HAL_QSPI_MspInit+0x80>)
 8001d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d26:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <HAL_QSPI_MspInit+0x80>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6513      	str	r3, [r2, #80]	; 0x50
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_QSPI_MspInit+0x80>)
 8001d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_QSPI_MspInit+0x80>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_QSPI_MspInit+0x80>)
 8001d40:	f043 0310 	orr.w	r3, r3, #16
 8001d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_QSPI_MspInit+0x80>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001d52:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001d56:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d64:	230a      	movs	r3, #10
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <HAL_QSPI_MspInit+0x84>)
 8001d70:	f009 fbc8 	bl	800b504 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	a0001000 	.word	0xa0001000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48001000 	.word	0x48001000

08001d88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_SPI_MspInit+0x7c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d128      	bne.n	8001dfc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_SPI_MspInit+0x80>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_SPI_MspInit+0x80>)
 8001db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db4:	6593      	str	r3, [r2, #88]	; 0x58
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_SPI_MspInit+0x80>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_SPI_MspInit+0x80>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <HAL_SPI_MspInit+0x80>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_SPI_MspInit+0x80>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001dda:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dec:	2306      	movs	r3, #6
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4619      	mov	r1, r3
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <HAL_SPI_MspInit+0x84>)
 8001df8:	f009 fb84 	bl	800b504 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40003c00 	.word	0x40003c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	48000800 	.word	0x48000800

08001e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0ae      	sub	sp, #184	; 0xb8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	2288      	movs	r2, #136	; 0x88
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f010 f894 	bl	8011f5e <memset>
  if(huart->Instance==USART1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a42      	ldr	r2, [pc, #264]	; (8001f44 <HAL_UART_MspInit+0x134>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d13b      	bne.n	8001eb8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e40:	2301      	movs	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e44:	2300      	movs	r3, #0
 8001e46:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f00b ff01 	bl	800dc54 <HAL_RCCEx_PeriphCLKConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e58:	f7ff fe3e 	bl	8001ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e60:	4a39      	ldr	r2, [pc, #228]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e66:	6613      	str	r3, [r2, #96]	; 0x60
 8001e68:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e78:	4a33      	ldr	r2, [pc, #204]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001e8c:	23c0      	movs	r3, #192	; 0xc0
 8001e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4826      	ldr	r0, [pc, #152]	; (8001f4c <HAL_UART_MspInit+0x13c>)
 8001eb2:	f009 fb27 	bl	800b504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eb6:	e040      	b.n	8001f3a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <HAL_UART_MspInit+0x140>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d13b      	bne.n	8001f3a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f00b fec0 	bl	800dc54 <HAL_RCCEx_PeriphCLKConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001eda:	f7ff fdfd 	bl	8001ad8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001f0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f28:	2307      	movs	r3, #7
 8001f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4807      	ldr	r0, [pc, #28]	; (8001f54 <HAL_UART_MspInit+0x144>)
 8001f36:	f009 fae5 	bl	800b504 <HAL_GPIO_Init>
}
 8001f3a:	bf00      	nop
 8001f3c:	37b8      	adds	r7, #184	; 0xb8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40013800 	.word	0x40013800
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	48000400 	.word	0x48000400
 8001f50:	40004800 	.word	0x40004800
 8001f54:	48000c00 	.word	0x48000c00

08001f58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0ac      	sub	sp, #176	; 0xb0
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2288      	movs	r2, #136	; 0x88
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f00f fff0 	bl	8011f5e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f86:	d17c      	bne.n	8002082 <HAL_PCD_MspInit+0x12a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001f8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001f9e:	2318      	movs	r3, #24
 8001fa0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001fa2:	2307      	movs	r3, #7
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001faa:	2302      	movs	r3, #2
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001fae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00b fe4b 	bl	800dc54 <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001fc4:	f7ff fd88 	bl	8001ad8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_PCD_MspInit+0x134>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	4a2f      	ldr	r2, [pc, #188]	; (800208c <HAL_PCD_MspInit+0x134>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_PCD_MspInit+0x134>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffe:	f009 fa81 	bl	800b504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002002:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800201c:	230a      	movs	r3, #10
 800201e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202c:	f009 fa6a 	bl	800b504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_PCD_MspInit+0x134>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_PCD_MspInit+0x134>)
 8002036:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800203a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_PCD_MspInit+0x134>)
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_PCD_MspInit+0x134>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d114      	bne.n	800207e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_PCD_MspInit+0x134>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	4a0c      	ldr	r2, [pc, #48]	; (800208c <HAL_PCD_MspInit+0x134>)
 800205a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205e:	6593      	str	r3, [r2, #88]	; 0x58
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_PCD_MspInit+0x134>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800206c:	f00a ff08 	bl	800ce80 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_PCD_MspInit+0x134>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	4a05      	ldr	r2, [pc, #20]	; (800208c <HAL_PCD_MspInit+0x134>)
 8002076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800207c:	e001      	b.n	8002082 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800207e:	f00a feff 	bl	800ce80 <HAL_PWREx_EnableVddUSB>
}
 8002082:	bf00      	nop
 8002084:	37b0      	adds	r7, #176	; 0xb0
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	2036      	movs	r0, #54	; 0x36
 80020a6:	f009 f8f7 	bl	800b298 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020aa:	2036      	movs	r0, #54	; 0x36
 80020ac:	f009 f910 	bl	800b2d0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_InitTick+0x9c>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_InitTick+0x9c>)
 80020b6:	f043 0310 	orr.w	r3, r3, #16
 80020ba:	6593      	str	r3, [r2, #88]	; 0x58
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_InitTick+0x9c>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020c8:	f107 0210 	add.w	r2, r7, #16
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f00b fd2c 	bl	800db30 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020d8:	f00b fcfe 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 80020dc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	4a13      	ldr	r2, [pc, #76]	; (8002130 <HAL_InitTick+0xa0>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9b      	lsrs	r3, r3, #18
 80020e8:	3b01      	subs	r3, #1
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_InitTick+0xa4>)
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <HAL_InitTick+0xa8>)
 80020f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_InitTick+0xa4>)
 80020f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_InitTick+0xa4>)
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_InitTick+0xa4>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_InitTick+0xa4>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800210c:	4809      	ldr	r0, [pc, #36]	; (8002134 <HAL_InitTick+0xa4>)
 800210e:	f00d f96a 	bl	800f3e6 <HAL_TIM_Base_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d104      	bne.n	8002122 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002118:	4806      	ldr	r0, [pc, #24]	; (8002134 <HAL_InitTick+0xa4>)
 800211a:	f00d f9c5 	bl	800f4a8 <HAL_TIM_Base_Start_IT>
 800211e:	4603      	mov	r3, r0
 8002120:	e000      	b.n	8002124 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	3730      	adds	r7, #48	; 0x30
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	431bde83 	.word	0x431bde83
 8002134:	20010ec8 	.word	0x20010ec8
 8002138:	40001000 	.word	0x40001000

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <NMI_Handler+0x4>

08002142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <HardFault_Handler+0x4>

08002148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <MemManage_Handler+0x4>

0800214e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <UsageFault_Handler+0x4>

0800215a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800216c:	2020      	movs	r0, #32
 800216e:	f009 fc97 	bl	800baa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002172:	2040      	movs	r0, #64	; 0x40
 8002174:	f009 fc94 	bl	800baa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002178:	2080      	movs	r0, #128	; 0x80
 800217a:	f009 fc91 	bl	800baa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800217e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002182:	f009 fc8d 	bl	800baa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}

0800218a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800218e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002192:	f009 fc85 	bl	800baa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002196:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800219a:	f009 fc81 	bl	800baa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800219e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021a2:	f009 fc7d 	bl	800baa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021aa:	f009 fc79 	bl	800baa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80021ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021b2:	f009 fc75 	bl	800baa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <TIM6_DAC_IRQHandler+0x10>)
 80021c2:	f00d f9e1 	bl	800f588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20010ec8 	.word	0x20010ec8

080021d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
	return 1;
 80021d4:	2301      	movs	r3, #1
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_kill>:

int _kill(int pid, int sig)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021ea:	f00f fd87 	bl	8011cfc <__errno>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2216      	movs	r2, #22
 80021f2:	601a      	str	r2, [r3, #0]
	return -1;
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_exit>:

void _exit (int status)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002208:	f04f 31ff 	mov.w	r1, #4294967295
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ffe7 	bl	80021e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002212:	e7fe      	b.n	8002212 <_exit+0x12>

08002214 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e00a      	b.n	800223c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002226:	f3af 8000 	nop.w
 800222a:	4601      	mov	r1, r0
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	60ba      	str	r2, [r7, #8]
 8002232:	b2ca      	uxtb	r2, r1
 8002234:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3301      	adds	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	dbf0      	blt.n	8002226 <_read+0x12>
	}

return len;
 8002244:	687b      	ldr	r3, [r7, #4]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_close>:
	}
	return len;
}

int _close(int file)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	return -1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002276:	605a      	str	r2, [r3, #4]
	return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_isatty>:

int _isatty(int file)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
	return 1;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
	return 0;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <_sbrk+0x5c>)
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <_sbrk+0x60>)
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <_sbrk+0x64>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <_sbrk+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d207      	bcs.n	80022f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e8:	f00f fd08 	bl	8011cfc <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	220c      	movs	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	e009      	b.n	800230c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <_sbrk+0x64>)
 8002308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20018000 	.word	0x20018000
 8002318:	00000400 	.word	0x00000400
 800231c:	20000bdc 	.word	0x20000bdc
 8002320:	20011038 	.word	0x20011038

08002324 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <SystemInit+0x5c>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	4a14      	ldr	r2, [pc, #80]	; (8002380 <SystemInit+0x5c>)
 8002330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <SystemInit+0x60>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <SystemInit+0x60>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <SystemInit+0x60>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <SystemInit+0x60>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <SystemInit+0x60>)
 8002350:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002354:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002358:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <SystemInit+0x60>)
 800235c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002360:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <SystemInit+0x60>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <SystemInit+0x60>)
 8002368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <SystemInit+0x60>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00
 8002384:	40021000 	.word	0x40021000

08002388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800238c:	f7ff ffca 	bl	8002324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002390:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002392:	e003      	b.n	800239c <LoopCopyDataInit>

08002394 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002396:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002398:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800239a:	3104      	adds	r1, #4

0800239c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800239c:	480a      	ldr	r0, [pc, #40]	; (80023c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <LoopForever+0xe>)
	adds	r2, r0, r1
 80023a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023a4:	d3f6      	bcc.n	8002394 <CopyDataInit>
	ldr	r2, =_sbss
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80023a8:	e002      	b.n	80023b0 <LoopFillZerobss>

080023aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023ac:	f842 3b04 	str.w	r3, [r2], #4

080023b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <LoopForever+0x16>)
	cmp	r2, r3
 80023b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023b4:	d3f9      	bcc.n	80023aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023b6:	f00f fd9d 	bl	8011ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ba:	f7fe fd9f 	bl	8000efc <main>

080023be <LoopForever>:

LoopForever:
    b LoopForever
 80023be:	e7fe      	b.n	80023be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023c0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80023c4:	08015acc 	.word	0x08015acc
	ldr	r0, =_sdata
 80023c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023cc:	20000764 	.word	0x20000764
	ldr	r2, =_sbss
 80023d0:	20000764 	.word	0x20000764
	ldr	r3, = _ebss
 80023d4:	20011038 	.word	0x20011038

080023d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d8:	e7fe      	b.n	80023d8 <ADC1_2_IRQHandler>
	...

080023dc <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	460a      	mov	r2, r1
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <BSP_PB_Init+0xa0>)
 80023ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <BSP_PB_Init+0xa0>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f8:	4b20      	ldr	r3, [pc, #128]	; (800247c <BSP_PB_Init+0xa0>)
 80023fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002404:	79bb      	ldrb	r3, [r7, #6]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d112      	bne.n	8002430 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800240a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800240e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002414:	2301      	movs	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002418:	2302      	movs	r3, #2
 800241a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	4a18      	ldr	r2, [pc, #96]	; (8002480 <BSP_PB_Init+0xa4>)
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	f107 020c 	add.w	r2, r7, #12
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f009 f86a 	bl	800b504 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d11e      	bne.n	8002474 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800243c:	2301      	movs	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <BSP_PB_Init+0xa8>)
 8002446:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <BSP_PB_Init+0xa4>)
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	f107 020c 	add.w	r2, r7, #12
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f009 f854 	bl	800b504 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800245c:	2328      	movs	r3, #40	; 0x28
 800245e:	b25b      	sxtb	r3, r3
 8002460:	2200      	movs	r2, #0
 8002462:	210f      	movs	r1, #15
 8002464:	4618      	mov	r0, r3
 8002466:	f008 ff17 	bl	800b298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800246a:	2328      	movs	r3, #40	; 0x28
 800246c:	b25b      	sxtb	r3, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f008 ff2e 	bl	800b2d0 <HAL_NVIC_EnableIRQ>
  }
}
 8002474:	bf00      	nop
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	2000008c 	.word	0x2000008c
 8002484:	10110000 	.word	0x10110000

08002488 <BSP_PB_GetState>:
  *                 This parameter can be one of the following values:
  *                   @arg  BUTTON_USER  User Push Button 
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <BSP_PB_GetState+0x28>)
 8002496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f009 facd 	bl	800ba40 <HAL_GPIO_ReadPin>
 80024a6:	4603      	mov	r3, r0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	2000008c 	.word	0x2000008c

080024b4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <I2Cx_MspInit+0xa8>)
 80024be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c0:	4a26      	ldr	r2, [pc, #152]	; (800255c <I2Cx_MspInit+0xa8>)
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c8:	4b24      	ldr	r3, [pc, #144]	; (800255c <I2Cx_MspInit+0xa8>)
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80024d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80024da:	2312      	movs	r3, #18
 80024dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80024de:	2301      	movs	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80024e6:	2304      	movs	r3, #4
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	481b      	ldr	r0, [pc, #108]	; (8002560 <I2Cx_MspInit+0xac>)
 80024f2:	f009 f807 	bl	800b504 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	4818      	ldr	r0, [pc, #96]	; (8002560 <I2Cx_MspInit+0xac>)
 80024fe:	f009 f801 	bl	800b504 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <I2Cx_MspInit+0xa8>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	4a15      	ldr	r2, [pc, #84]	; (800255c <I2Cx_MspInit+0xa8>)
 8002508:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800250c:	6593      	str	r3, [r2, #88]	; 0x58
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <I2Cx_MspInit+0xa8>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <I2Cx_MspInit+0xa8>)
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	4a0f      	ldr	r2, [pc, #60]	; (800255c <I2Cx_MspInit+0xa8>)
 8002520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002524:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <I2Cx_MspInit+0xa8>)
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	4a0c      	ldr	r2, [pc, #48]	; (800255c <I2Cx_MspInit+0xa8>)
 800252c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002530:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	210f      	movs	r1, #15
 8002536:	2021      	movs	r0, #33	; 0x21
 8002538:	f008 feae 	bl	800b298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800253c:	2021      	movs	r0, #33	; 0x21
 800253e:	f008 fec7 	bl	800b2d0 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	210f      	movs	r1, #15
 8002546:	2022      	movs	r0, #34	; 0x22
 8002548:	f008 fea6 	bl	800b298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800254c:	2022      	movs	r0, #34	; 0x22
 800254e:	f008 febf 	bl	800b2d0 <HAL_NVIC_EnableIRQ>
}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	; 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	48000400 	.word	0x48000400

08002564 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <I2Cx_Init+0x54>)
 8002570:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a11      	ldr	r2, [pc, #68]	; (80025bc <I2Cx_Init+0x58>)
 8002576:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff89 	bl	80024b4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f009 fa9f 	bl	800bae6 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80025a8:	2100      	movs	r1, #0
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f00a fa14 	bl	800c9d8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40005800 	.word	0x40005800
 80025bc:	00702681 	.word	0x00702681

080025c0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af04      	add	r7, sp, #16
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	72fb      	strb	r3, [r7, #11]
 80025d2:	460b      	mov	r3, r1
 80025d4:	813b      	strh	r3, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80025de:	7afb      	ldrb	r3, [r7, #11]
 80025e0:	b299      	uxth	r1, r3
 80025e2:	88f8      	ldrh	r0, [r7, #6]
 80025e4:	893a      	ldrh	r2, [r7, #8]
 80025e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ea:	9302      	str	r3, [sp, #8]
 80025ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4603      	mov	r3, r0
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f009 fe32 	bl	800c260 <HAL_I2C_Mem_Read>
 80025fc:	4603      	mov	r3, r0
 80025fe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002606:	7afb      	ldrb	r3, [r7, #11]
 8002608:	4619      	mov	r1, r3
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f832 	bl	8002674 <I2Cx_Error>
  }
  return status;
 8002610:	7dfb      	ldrb	r3, [r7, #23]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b08a      	sub	sp, #40	; 0x28
 800261e:	af04      	add	r7, sp, #16
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	4608      	mov	r0, r1
 8002624:	4611      	mov	r1, r2
 8002626:	461a      	mov	r2, r3
 8002628:	4603      	mov	r3, r0
 800262a:	72fb      	strb	r3, [r7, #11]
 800262c:	460b      	mov	r3, r1
 800262e:	813b      	strh	r3, [r7, #8]
 8002630:	4613      	mov	r3, r2
 8002632:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002638:	7afb      	ldrb	r3, [r7, #11]
 800263a:	b299      	uxth	r1, r3
 800263c:	88f8      	ldrh	r0, [r7, #6]
 800263e:	893a      	ldrh	r2, [r7, #8]
 8002640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002644:	9302      	str	r3, [sp, #8]
 8002646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	4603      	mov	r3, r0
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f009 fcf1 	bl	800c038 <HAL_I2C_Mem_Write>
 8002656:	4603      	mov	r3, r0
 8002658:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002660:	7afb      	ldrb	r3, [r7, #11]
 8002662:	4619      	mov	r1, r3
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f805 	bl	8002674 <I2Cx_Error>
  }
  return status;
 800266a:	7dfb      	ldrb	r3, [r7, #23]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f009 fabf 	bl	800bc04 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ff6c 	bl	8002564 <I2Cx_Init>
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <SENSOR_IO_Init+0x10>)
 800269a:	f7ff ff63 	bl	8002564 <I2Cx_Init>
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20010f98 	.word	0x20010f98

080026a8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
 80026b2:	460b      	mov	r3, r1
 80026b4:	71bb      	strb	r3, [r7, #6]
 80026b6:	4613      	mov	r3, r2
 80026b8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80026ba:	79bb      	ldrb	r3, [r7, #6]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	79f9      	ldrb	r1, [r7, #7]
 80026c0:	2301      	movs	r3, #1
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	1d7b      	adds	r3, r7, #5
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	2301      	movs	r3, #1
 80026ca:	4803      	ldr	r0, [pc, #12]	; (80026d8 <SENSOR_IO_Write+0x30>)
 80026cc:	f7ff ffa5 	bl	800261a <I2Cx_WriteMultiple>
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20010f98 	.word	0x20010f98

080026dc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	4603      	mov	r3, r0
 80026e4:	460a      	mov	r2, r1
 80026e6:	71fb      	strb	r3, [r7, #7]
 80026e8:	4613      	mov	r3, r2
 80026ea:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80026f0:	79bb      	ldrb	r3, [r7, #6]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	79f9      	ldrb	r1, [r7, #7]
 80026f6:	2301      	movs	r3, #1
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	f107 030f 	add.w	r3, r7, #15
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2301      	movs	r3, #1
 8002702:	4804      	ldr	r0, [pc, #16]	; (8002714 <SENSOR_IO_Read+0x38>)
 8002704:	f7ff ff5c 	bl	80025c0 <I2Cx_ReadMultiple>

  return read_value;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20010f98 	.word	0x20010f98

08002718 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af02      	add	r7, sp, #8
 800271e:	603a      	str	r2, [r7, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
 8002726:	460b      	mov	r3, r1
 8002728:	71bb      	strb	r3, [r7, #6]
 800272a:	4613      	mov	r3, r2
 800272c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800272e:	79bb      	ldrb	r3, [r7, #6]
 8002730:	b29a      	uxth	r2, r3
 8002732:	79f9      	ldrb	r1, [r7, #7]
 8002734:	88bb      	ldrh	r3, [r7, #4]
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2301      	movs	r3, #1
 800273e:	4804      	ldr	r0, [pc, #16]	; (8002750 <SENSOR_IO_ReadMultiple+0x38>)
 8002740:	f7ff ff3e 	bl	80025c0 <I2Cx_ReadMultiple>
 8002744:	4603      	mov	r3, r0
 8002746:	b29b      	uxth	r3, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20010f98 	.word	0x20010f98

08002754 <BSP_I2C2_Init>:
/**
  * @brief  Initialize BSP I2C2.
  * @retval BSP status.
  */
int32_t BSP_I2C2_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 800275e:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <BSP_I2C2_Init+0x70>)
 8002760:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <BSP_I2C2_Init+0x74>)
 8002762:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <BSP_I2C2_Init+0x78>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d11b      	bne.n	80027a4 <BSP_I2C2_Init+0x50>
  {
    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 800276c:	4815      	ldr	r0, [pc, #84]	; (80027c4 <BSP_I2C2_Init+0x70>)
 800276e:	f009 fe91 	bl	800c494 <HAL_I2C_GetState>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d115      	bne.n	80027a4 <BSP_I2C2_Init+0x50>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8002778:	4812      	ldr	r0, [pc, #72]	; (80027c4 <BSP_I2C2_Init+0x70>)
 800277a:	f000 f8b3 	bl	80028e4 <I2C2_MspInit>

      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2C2), BUS_I2C2_FREQUENCY)) != HAL_OK)
 800277e:	2080      	movs	r0, #128	; 0x80
 8002780:	f00b fd52 	bl	800e228 <HAL_RCCEx_GetPeriphCLKFreq>
 8002784:	4603      	mov	r3, r0
 8002786:	4912      	ldr	r1, [pc, #72]	; (80027d0 <BSP_I2C2_Init+0x7c>)
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f9c7 	bl	8002b1c <I2C_GetTiming>
 800278e:	4603      	mov	r3, r0
 8002790:	4619      	mov	r1, r3
 8002792:	480c      	ldr	r0, [pc, #48]	; (80027c4 <BSP_I2C2_Init+0x70>)
 8002794:	f000 f876 	bl	8002884 <MX_I2C2_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <BSP_I2C2_Init+0x50>
      {
        status = BSP_ERROR_BUS_FAILURE;
 800279e:	f06f 0307 	mvn.w	r3, #7
 80027a2:	607b      	str	r3, [r7, #4]
        }
      }
#endif
    }
  }
  if (I2c2InitCounter < 0xFFFFFFFFU)
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <BSP_I2C2_Init+0x78>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d004      	beq.n	80027b8 <BSP_I2C2_Init+0x64>
  {
    I2c2InitCounter++;
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <BSP_I2C2_Init+0x78>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	4a05      	ldr	r2, [pc, #20]	; (80027cc <BSP_I2C2_Init+0x78>)
 80027b6:	6013      	str	r3, [r2, #0]
  }
  return status;
 80027b8:	687b      	ldr	r3, [r7, #4]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000be4 	.word	0x20000be4
 80027c8:	40005800 	.word	0x40005800
 80027cc:	20000be0 	.word	0x20000be0
 80027d0:	000186a0 	.word	0x000186a0

080027d4 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize BSP I2C2.
  * @retval BSP status.
  */
int32_t BSP_I2C2_DeInit(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]

  if (I2c2InitCounter > 0U)
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <BSP_I2C2_DeInit+0x48>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d014      	beq.n	8002810 <BSP_I2C2_DeInit+0x3c>
  {
    I2c2InitCounter--;
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <BSP_I2C2_DeInit+0x48>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	4a0b      	ldr	r2, [pc, #44]	; (800281c <BSP_I2C2_DeInit+0x48>)
 80027ee:	6013      	str	r3, [r2, #0]
    if (I2c2InitCounter == 0U)
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <BSP_I2C2_DeInit+0x48>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <BSP_I2C2_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C2_MspDeInit(&hbus_i2c2);
 80027f8:	4809      	ldr	r0, [pc, #36]	; (8002820 <BSP_I2C2_DeInit+0x4c>)
 80027fa:	f000 f8cb 	bl	8002994 <I2C2_MspDeInit>
#endif

      /* De-Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 80027fe:	4808      	ldr	r0, [pc, #32]	; (8002820 <BSP_I2C2_DeInit+0x4c>)
 8002800:	f009 fa00 	bl	800bc04 <HAL_I2C_DeInit>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <BSP_I2C2_DeInit+0x3c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 800280a:	f06f 0303 	mvn.w	r3, #3
 800280e:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return status;
 8002810:	687b      	ldr	r3, [r7, #4]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000be0 	.word	0x20000be0
 8002820:	20000be4 	.word	0x20000be4

08002824 <BSP_I2C2_WriteReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af02      	add	r7, sp, #8
 800282a:	60ba      	str	r2, [r7, #8]
 800282c:	461a      	mov	r2, r3
 800282e:	4603      	mov	r3, r0
 8002830:	81fb      	strh	r3, [r7, #14]
 8002832:	460b      	mov	r3, r1
 8002834:	81bb      	strh	r3, [r7, #12]
 8002836:	4613      	mov	r3, r2
 8002838:	80fb      	strh	r3, [r7, #6]
  return I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 800283a:	89b9      	ldrh	r1, [r7, #12]
 800283c:	89f8      	ldrh	r0, [r7, #14]
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2201      	movs	r2, #1
 8002846:	f000 f8c1 	bl	80029cc <I2C2_WriteReg>
 800284a:	4603      	mov	r3, r0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af02      	add	r7, sp, #8
 800285a:	60ba      	str	r2, [r7, #8]
 800285c:	461a      	mov	r2, r3
 800285e:	4603      	mov	r3, r0
 8002860:	81fb      	strh	r3, [r7, #14]
 8002862:	460b      	mov	r3, r1
 8002864:	81bb      	strh	r3, [r7, #12]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 800286a:	89b9      	ldrh	r1, [r7, #12]
 800286c:	89f8      	ldrh	r0, [r7, #14]
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2201      	movs	r2, #1
 8002876:	f000 f8fd 	bl	8002a74 <I2C2_ReadReg>
 800287a:	4603      	mov	r3, r0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <MX_I2C2_Init>:
  * @param  hI2c I2C handle.
  * @param  timing I2C timing.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  hI2c->Init.Timing           = timing;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	621a      	str	r2, [r3, #32]

  return HAL_I2C_Init(hI2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f009 f911 	bl	800bae6 <HAL_I2C_Init>
 80028c4:	4603      	mov	r3, r0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <BSP_GetTick>:
/**
  * @brief  Provide a tick value in millisecond.
  * @retval Tick value.
  */
int32_t BSP_GetTick(void)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
  uint32_t ret;
  ret = HAL_GetTick();
 80028d4:	f008 fbf8 	bl	800b0c8 <HAL_GetTick>
 80028d8:	6078      	str	r0, [r7, #4]
  return (int32_t)ret;
 80028da:	687b      	ldr	r3, [r7, #4]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2C2_MspInit>:
  * @brief  Initialize I2C2 MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <I2C2_MspInit+0xa8>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	4a26      	ldr	r2, [pc, #152]	; (800298c <I2C2_MspInit+0xa8>)
 80028f2:	f043 0302 	orr.w	r3, r3, #2
 80028f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f8:	4b24      	ldr	r3, [pc, #144]	; (800298c <I2C2_MspInit+0xa8>)
 80028fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8002904:	4b21      	ldr	r3, [pc, #132]	; (800298c <I2C2_MspInit+0xa8>)
 8002906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002908:	4a20      	ldr	r2, [pc, #128]	; (800298c <I2C2_MspInit+0xa8>)
 800290a:	f043 0302 	orr.w	r3, r3, #2
 800290e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002910:	4b1e      	ldr	r3, [pc, #120]	; (800298c <I2C2_MspInit+0xa8>)
 8002912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C2_SCL_GPIO_PIN;
 800291c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002920:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002922:	2312      	movs	r3, #18
 8002924:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800292a:	2302      	movs	r3, #2
 800292c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800292e:	2304      	movs	r3, #4
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	4815      	ldr	r0, [pc, #84]	; (8002990 <I2C2_MspInit+0xac>)
 800293a:	f008 fde3 	bl	800b504 <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C2_SDA_GPIO_PIN;
 800293e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002942:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002944:	2304      	movs	r3, #4
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	4619      	mov	r1, r3
 800294e:	4810      	ldr	r0, [pc, #64]	; (8002990 <I2C2_MspInit+0xac>)
 8002950:	f008 fdd8 	bl	800b504 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <I2C2_MspInit+0xa8>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	4a0c      	ldr	r2, [pc, #48]	; (800298c <I2C2_MspInit+0xa8>)
 800295a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800295e:	6593      	str	r3, [r2, #88]	; 0x58
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <I2C2_MspInit+0xa8>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <I2C2_MspInit+0xa8>)
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	4a06      	ldr	r2, [pc, #24]	; (800298c <I2C2_MspInit+0xa8>)
 8002972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002976:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <I2C2_MspInit+0xa8>)
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	4a03      	ldr	r2, [pc, #12]	; (800298c <I2C2_MspInit+0xa8>)
 800297e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002982:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002984:	bf00      	nop
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	48000400 	.word	0x48000400

08002994 <I2C2_MspDeInit>:
  * @brief  DeInitialize I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* De-initialiaze I2C SCL and SDA */
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 800299c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029a0:	4808      	ldr	r0, [pc, #32]	; (80029c4 <I2C2_MspDeInit+0x30>)
 80029a2:	f008 ff59 	bl	800b858 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 80029a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029aa:	4806      	ldr	r0, [pc, #24]	; (80029c4 <I2C2_MspDeInit+0x30>)
 80029ac:	f008 ff54 	bl	800b858 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <I2C2_MspDeInit+0x34>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <I2C2_MspDeInit+0x34>)
 80029b6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029ba:	6593      	str	r3, [r2, #88]	; 0x58
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	48000400 	.word	0x48000400
 80029c8:	40021000 	.word	0x40021000

080029cc <I2C2_WriteReg>:
  * @param  pData      The target register values to be written.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af04      	add	r7, sp, #16
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	4603      	mov	r3, r0
 80029d6:	81fb      	strh	r3, [r7, #14]
 80029d8:	460b      	mov	r3, r1
 80029da:	81bb      	strh	r3, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C2_TIMEOUT) != HAL_OK)
 80029e4:	8978      	ldrh	r0, [r7, #10]
 80029e6:	89ba      	ldrh	r2, [r7, #12]
 80029e8:	89f9      	ldrh	r1, [r7, #14]
 80029ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80029ee:	9302      	str	r3, [sp, #8]
 80029f0:	8c3b      	ldrh	r3, [r7, #32]
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	4603      	mov	r3, r0
 80029fa:	481d      	ldr	r0, [pc, #116]	; (8002a70 <I2C2_WriteReg+0xa4>)
 80029fc:	f009 fb1c 	bl	800c038 <HAL_I2C_Mem_Write>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d02f      	beq.n	8002a66 <I2C2_WriteReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c2);
 8002a06:	481a      	ldr	r0, [pc, #104]	; (8002a70 <I2C2_WriteReg+0xa4>)
 8002a08:	f009 fd52 	bl	800c4b0 <HAL_I2C_GetError>
 8002a0c:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <I2C2_WriteReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 8002a18:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e022      	b.n	8002a66 <I2C2_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <I2C2_WriteReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 8002a2a:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e019      	b.n	8002a66 <I2C2_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <I2C2_WriteReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002a3c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e010      	b.n	8002a66 <I2C2_WriteReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d104      	bne.n	8002a58 <I2C2_WriteReg+0x8c>
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <I2C2_WriteReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 8002a58:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e002      	b.n	8002a66 <I2C2_WriteReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8002a60:	f06f 0303 	mvn.w	r3, #3
 8002a64:	617b      	str	r3, [r7, #20]
    }    
  }

  return status;
 8002a66:	697b      	ldr	r3, [r7, #20]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000be4 	.word	0x20000be4

08002a74 <I2C2_ReadReg>:
  * @param  pData      The target register values to be read.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af04      	add	r7, sp, #16
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	81fb      	strh	r3, [r7, #14]
 8002a80:	460b      	mov	r3, r1
 8002a82:	81bb      	strh	r3, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C2_TIMEOUT) != HAL_OK)
 8002a8c:	8978      	ldrh	r0, [r7, #10]
 8002a8e:	89ba      	ldrh	r2, [r7, #12]
 8002a90:	89f9      	ldrh	r1, [r7, #14]
 8002a92:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a96:	9302      	str	r3, [sp, #8]
 8002a98:	8c3b      	ldrh	r3, [r7, #32]
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	481d      	ldr	r0, [pc, #116]	; (8002b18 <I2C2_ReadReg+0xa4>)
 8002aa4:	f009 fbdc 	bl	800c260 <HAL_I2C_Mem_Read>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d02f      	beq.n	8002b0e <I2C2_ReadReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c2);
 8002aae:	481a      	ldr	r0, [pc, #104]	; (8002b18 <I2C2_ReadReg+0xa4>)
 8002ab0:	f009 fcfe 	bl	800c4b0 <HAL_I2C_GetError>
 8002ab4:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <I2C2_ReadReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 8002ac0:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e022      	b.n	8002b0e <I2C2_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <I2C2_ReadReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 8002ad2:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	e019      	b.n	8002b0e <I2C2_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <I2C2_ReadReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002ae4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	e010      	b.n	8002b0e <I2C2_ReadReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d104      	bne.n	8002b00 <I2C2_ReadReg+0x8c>
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <I2C2_ReadReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 8002b00:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e002      	b.n	8002b0e <I2C2_ReadReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8002b08:	f06f 0303 	mvn.w	r3, #3
 8002b0c:	617b      	str	r3, [r7, #20]
    }    
  }

  return status;
 8002b0e:	697b      	ldr	r3, [r7, #20]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000be4 	.word	0x20000be4

08002b1c <I2C_GetTiming>:
  * @param  clock_src_hz I2C clock source in Hz.
  * @param  i2cfreq_hz Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_hz, uint32_t i2cfreq_hz)
{
 8002b1c:	b5b0      	push	{r4, r5, r7, lr}
 8002b1e:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	6018      	str	r0, [r3, #0]
 8002b28:	463b      	mov	r3, r7
 8002b2a:	6019      	str	r1, [r3, #0]
  uint32_t ret = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  uint32_t speed;
  uint32_t is_valid_speed = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
  uint32_t p_prev = PRESC_MAX;
 8002b38:	2310      	movs	r3, #16
 8002b3a:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
  int32_t  sdadel_min, sdadel_max;
  int32_t  scldel_min;
  struct   i2c_timings_s *s;
  struct   i2c_timings_s valid_timing[VALID_PRESC_NBR];
  uint16_t p, l, a, h;
  uint32_t valid_timing_nbr = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec

  const struct i2c_specs_s i2c_specs[3] =
 8002b44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b48:	4ad1      	ldr	r2, [pc, #836]	; (8002e90 <I2C_GetTiming+0x374>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	2378      	movs	r3, #120	; 0x78
 8002b50:	461a      	mov	r2, r3
 8002b52:	f00f f9f6 	bl	8011f42 <memcpy>
      .sudat_min = 50,
      .l_min = 500,
      .h_min = 260,
    }
  };
  const struct i2c_setup_s i2c_user_setup[3] =
 8002b56:	f107 030c 	add.w	r3, r7, #12
 8002b5a:	4ace      	ldr	r2, [pc, #824]	; (8002e94 <I2C_GetTiming+0x378>)
 8002b5c:	461c      	mov	r4, r3
 8002b5e:	4615      	mov	r5, r2
 8002b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      .dnf = 0,
      .analog_filter = 1
    }
  };

  for (speed = 0; speed <= (uint32_t) I2C_SPEED_FAST_PLUS; speed++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8002b76:	e026      	b.n	8002bc6 <I2C_GetTiming+0xaa>
  {
    if ((i2cfreq_hz >= i2c_specs[speed].rate_min) && (i2cfreq_hz <= i2c_specs[speed].rate_max))
 8002b78:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002b7c:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	440b      	add	r3, r1
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	463a      	mov	r2, r7
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d312      	bcc.n	8002bbc <I2C_GetTiming+0xa0>
 8002b96:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002b9a:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3308      	adds	r3, #8
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	463a      	mov	r2, r7
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d803      	bhi.n	8002bbc <I2C_GetTiming+0xa0>
    {
      is_valid_speed = 1;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
      break;
 8002bba:	e008      	b.n	8002bce <I2C_GetTiming+0xb2>
  for (speed = 0; speed <= (uint32_t) I2C_SPEED_FAST_PLUS; speed++)
 8002bbc:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8002bc6:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d9d4      	bls.n	8002b78 <I2C_GetTiming+0x5c>
    }
  }

  if ((is_valid_speed != 0U) && (speed  <= (uint32_t) I2C_SPEED_FAST_PLUS))
 8002bce:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 82a1 	beq.w	800311a <I2C_GetTiming+0x5fe>
 8002bd8:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	f200 829c 	bhi.w	800311a <I2C_GetTiming+0x5fe>
  {
    i2cclk = DIV_ROUND_CLOSEST(NSEC_PER_SEC, clock_src_hz);
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	085a      	lsrs	r2, r3, #1
 8002be8:	4bab      	ldr	r3, [pc, #684]	; (8002e98 <I2C_GetTiming+0x37c>)
 8002bea:	4413      	add	r3, r2
 8002bec:	1d3a      	adds	r2, r7, #4
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bf4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    i2cspeed = DIV_ROUND_CLOSEST(NSEC_PER_SEC, i2cfreq_hz);
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	085a      	lsrs	r2, r3, #1
 8002bfe:	4ba6      	ldr	r3, [pc, #664]	; (8002e98 <I2C_GetTiming+0x37c>)
 8002c00:	4413      	add	r3, r2
 8002c02:	463a      	mov	r2, r7
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c0a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    clk_error_prev = i2cspeed;
 8002c0e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8002c12:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304

    /* Analog and Digital Filters */
    af_delay_min = (i2c_user_setup[speed].analog_filter == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8002c16:	f107 020c 	add.w	r2, r7, #12
 8002c1a:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	4413      	add	r3, r2
 8002c22:	330c      	adds	r3, #12
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <I2C_GetTiming+0x112>
 8002c2a:	2332      	movs	r3, #50	; 0x32
 8002c2c:	e000      	b.n	8002c30 <I2C_GetTiming+0x114>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
    af_delay_max = (i2c_user_setup[speed].analog_filter == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8002c34:	f107 020c 	add.w	r2, r7, #12
 8002c38:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	330c      	adds	r3, #12
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d102      	bne.n	8002c4e <I2C_GetTiming+0x132>
 8002c48:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002c4c:	e000      	b.n	8002c50 <I2C_GetTiming+0x134>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
    dnf_delay    = i2c_user_setup[speed].dnf * i2cclk;
 8002c54:	f107 020c 	add.w	r2, r7, #12
 8002c58:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	4413      	add	r3, r2
 8002c60:	3308      	adds	r3, #8
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    sdadel_min   = (int32_t) i2c_user_setup[speed].fall_time - (int32_t) i2c_specs[speed].hddat_min - (int32_t) af_delay_min - (((int32_t) i2c_user_setup[speed].dnf + 3) * (int32_t) i2cclk);
 8002c70:	f107 020c 	add.w	r2, r7, #12
 8002c74:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002c86:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	3314      	adds	r3, #20
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	1ac2      	subs	r2, r0, r3
 8002c9a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	f107 010c 	add.w	r1, r7, #12
 8002ca4:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	440b      	add	r3, r1
 8002cac:	3308      	adds	r3, #8
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3303      	adds	r3, #3
 8002cb2:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    sdadel_max   = (int32_t) i2c_specs[speed].vddat_max - (int32_t) i2c_user_setup[speed].rise_time - (int32_t) af_delay_max - (((int32_t) i2c_user_setup[speed].dnf + 4) * (int32_t) i2cclk);
 8002cc0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002cc4:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3318      	adds	r3, #24
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f107 020c 	add.w	r2, r7, #12
 8002cdc:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	4413      	add	r3, r2
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	1aca      	subs	r2, r1, r3
 8002ce8:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8002cec:	1ad2      	subs	r2, r2, r3
 8002cee:	f107 010c 	add.w	r1, r7, #12
 8002cf2:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    scldel_min   = (int32_t) i2c_user_setup[speed].rise_time + (int32_t) i2c_specs[speed].sudat_min;
 8002d0e:	f107 020c 	add.w	r2, r7, #12
 8002d12:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	4413      	add	r3, r2
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002d22:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	331c      	adds	r3, #28
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4403      	add	r3, r0
 8002d36:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
    if (sdadel_min < 0)
 8002d3a:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da02      	bge.n	8002d48 <I2C_GetTiming+0x22c>
    {
      sdadel_min = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    }
    if (sdadel_max < 0)
 8002d48:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	da02      	bge.n	8002d56 <I2C_GetTiming+0x23a>
    {
      sdadel_max = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    }

    /* Compute possible values for PRESC, SCLDEL and SDADEL */
    for (p = 0; p < PRESC_MAX; p++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8a7 32f6 	strh.w	r3, [r7, #758]	; 0x2f6
 8002d5c:	e08b      	b.n	8002e76 <I2C_GetTiming+0x35a>
    {
      for (l = 0; l < SCLDEL_MAX; l++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 8002d64:	e07d      	b.n	8002e62 <I2C_GetTiming+0x346>
      {
        int32_t scldel = ((int32_t) l + 1) * ((int32_t) p + 1) * (int32_t) i2cclk;
 8002d66:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f8b7 22f6 	ldrh.w	r2, [r7, #758]	; 0x2f6
 8002d70:	3201      	adds	r2, #1
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
        if (scldel < scldel_min)
 8002d82:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8002d86:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	db63      	blt.n	8002e56 <I2C_GetTiming+0x33a>
        {
          continue;
        }
        for (a = 0; a < SDADEL_MAX; a++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
 8002d94:	e05a      	b.n	8002e4c <I2C_GetTiming+0x330>
        {
          int32_t sdadel = (((int32_t) a * ((int32_t) p + 1)) + 1) * (int32_t) i2cclk;
 8002d96:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002d9a:	f8b7 22f6 	ldrh.w	r2, [r7, #758]	; 0x2f6
 8002d9e:	3201      	adds	r2, #1
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
          if (((sdadel >= sdadel_min) && (sdadel <= sdadel_max))&& (p != p_prev))
 8002db2:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8002db6:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	db41      	blt.n	8002e42 <I2C_GetTiming+0x326>
 8002dbe:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8002dc2:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	dc3b      	bgt.n	8002e42 <I2C_GetTiming+0x326>
 8002dca:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002dce:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d035      	beq.n	8002e42 <I2C_GetTiming+0x326>
          {
            valid_timing[valid_timing_nbr].presc = (uint8_t) p;
 8002dd6:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002dda:	b2d8      	uxtb	r0, r3
 8002ddc:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002de0:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	440b      	add	r3, r1
 8002dec:	4602      	mov	r2, r0
 8002dee:	701a      	strb	r2, [r3, #0]
            valid_timing[valid_timing_nbr].scldel = (uint8_t) l;
 8002df0:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002df4:	b2d8      	uxtb	r0, r3
 8002df6:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002dfa:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	440b      	add	r3, r1
 8002e06:	3301      	adds	r3, #1
 8002e08:	4602      	mov	r2, r0
 8002e0a:	701a      	strb	r2, [r3, #0]
            valid_timing[valid_timing_nbr].sdadel = (uint8_t) a;
 8002e0c:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002e10:	b2d8      	uxtb	r0, r3
 8002e12:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002e16:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	3302      	adds	r3, #2
 8002e24:	4602      	mov	r2, r0
 8002e26:	701a      	strb	r2, [r3, #0]
            p_prev = p;
 8002e28:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002e2c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
            valid_timing_nbr ++;
 8002e30:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002e34:	3301      	adds	r3, #1
 8002e36:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
            if(valid_timing_nbr >= VALID_PRESC_NBR)
 8002e3a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002e3e:	2b63      	cmp	r3, #99	; 0x63
 8002e40:	d824      	bhi.n	8002e8c <I2C_GetTiming+0x370>
        for (a = 0; a < SDADEL_MAX; a++)
 8002e42:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002e46:	3301      	adds	r3, #1
 8002e48:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
 8002e4c:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002e50:	2b0f      	cmp	r3, #15
 8002e52:	d9a0      	bls.n	8002d96 <I2C_GetTiming+0x27a>
 8002e54:	e000      	b.n	8002e58 <I2C_GetTiming+0x33c>
          continue;
 8002e56:	bf00      	nop
      for (l = 0; l < SCLDEL_MAX; l++)
 8002e58:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 8002e62:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002e66:	2b0f      	cmp	r3, #15
 8002e68:	f67f af7d 	bls.w	8002d66 <I2C_GetTiming+0x24a>
    for (p = 0; p < PRESC_MAX; p++)
 8002e6c:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002e70:	3301      	adds	r3, #1
 8002e72:	f8a7 32f6 	strh.w	r3, [r7, #758]	; 0x2f6
 8002e76:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002e7a:	2b0f      	cmp	r3, #15
 8002e7c:	f67f af6f 	bls.w	8002d5e <I2C_GetTiming+0x242>
          }
        }
      }
    }

    if (valid_timing_nbr == 0U)
 8002e80:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <I2C_GetTiming+0x380>
    {
      return 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e148      	b.n	800311e <I2C_GetTiming+0x602>
              goto Compute_scll_sclh;
 8002e8c:	bf00      	nop
 8002e8e:	e006      	b.n	8002e9e <I2C_GetTiming+0x382>
 8002e90:	08014fb4 	.word	0x08014fb4
 8002e94:	0801502c 	.word	0x0801502c
 8002e98:	3b9aca00 	.word	0x3b9aca00
    }

Compute_scll_sclh:
 8002e9c:	bf00      	nop
    tsync = af_delay_min + dnf_delay + (2U * i2cclk);
 8002e9e:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8002ea2:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002ea6:	441a      	add	r2, r3
 8002ea8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    s = NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
    clk_max = NSEC_PER_SEC / i2c_specs[speed].rate_min;
 8002eba:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002ebe:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	3304      	adds	r3, #4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a95      	ldr	r2, [pc, #596]	; (8003128 <I2C_GetTiming+0x60c>)
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    clk_min = NSEC_PER_SEC / i2c_specs[speed].rate_max;
 8002eda:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002ede:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	3308      	adds	r3, #8
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a8d      	ldr	r2, [pc, #564]	; (8003128 <I2C_GetTiming+0x60c>)
 8002ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef6:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
    *   (SCL Low Period - Analog/Digital filters) / 4.
    * - SCL High Period has to be lower than High Period of the SCL Clock
    *   defined by I2C Specification
    * - I2C Clock has to be lower than SCL High Period
    */
    for (uint32_t count = 0; count < valid_timing_nbr; count++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8002f00:	e0e1      	b.n	80030c6 <I2C_GetTiming+0x5aa>
    {
      uint32_t prescaler = ((uint32_t) valid_timing[count].presc + 1U) * i2cclk;
 8002f02:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002f06:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	440b      	add	r3, r1
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
      for (l = 0; l < SCLL_MAX; l++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 8002f28:	e0c3      	b.n	80030b2 <I2C_GetTiming+0x596>
      {
        uint32_t tscl_l = (((uint32_t) l + 1U) * prescaler) + tsync;
 8002f2a:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8002f34:	fb02 f303 	mul.w	r3, r2, r3
 8002f38:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
        if ((tscl_l < i2c_specs[speed].l_min) || (i2cclk >= ((tscl_l - af_delay_min - dnf_delay) / 4U)))
 8002f42:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002f46:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	440b      	add	r3, r1
 8002f54:	3320      	adds	r3, #32
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	f0c0 80a2 	bcc.w	80030a6 <I2C_GetTiming+0x58a>
 8002f62:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8002f66:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8002f6a:	1ad2      	subs	r2, r2, r3
 8002f6c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	f080 8094 	bcs.w	80030a6 <I2C_GetTiming+0x58a>
        {
          continue;
        }
        for (h = 0; h < SCLH_MAX; h++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f8a7 32f0 	strh.w	r3, [r7, #752]	; 0x2f0
 8002f84:	e089      	b.n	800309a <I2C_GetTiming+0x57e>
        {
          uint32_t tscl_h = (((uint32_t) h + 1U) * prescaler) + tsync;
 8002f86:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8002f98:	4413      	add	r3, r2
 8002f9a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
          uint32_t tscl = tscl_l + tscl_h + i2c_user_setup[speed].rise_time + i2c_user_setup[speed].fall_time;
 8002f9e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8002fa2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002fa6:	441a      	add	r2, r3
 8002fa8:	f107 010c 	add.w	r1, r7, #12
 8002fac:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	440b      	add	r3, r1
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	441a      	add	r2, r3
 8002fb8:	f107 010c 	add.w	r1, r7, #12
 8002fbc:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= i2c_specs[speed].h_min) && (i2cclk < tscl_h))
 8002fce:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002fd2:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d35a      	bcc.n	8003090 <I2C_GetTiming+0x574>
 8002fda:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002fde:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d854      	bhi.n	8003090 <I2C_GetTiming+0x574>
 8002fe6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002fea:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3324      	adds	r3, #36	; 0x24
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8003000:	429a      	cmp	r2, r3
 8003002:	d345      	bcc.n	8003090 <I2C_GetTiming+0x574>
 8003004:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8003008:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800300c:	429a      	cmp	r2, r3
 800300e:	d23f      	bcs.n	8003090 <I2C_GetTiming+0x574>
          {
            int32_t clk_error = (int32_t) tscl - (int32_t) i2cspeed;
 8003010:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8003014:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            if (clk_error < 0)
 800301e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8003022:	2b00      	cmp	r3, #0
 8003024:	da04      	bge.n	8003030 <I2C_GetTiming+0x514>
            {
              clk_error = -clk_error;
 8003026:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800302a:	425b      	negs	r3, r3
 800302c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            }
            /* save the solution with the lowest clock error */
            if (clk_error < (int32_t) clk_error_prev)
 8003030:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8003034:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8003038:	429a      	cmp	r2, r3
 800303a:	da29      	bge.n	8003090 <I2C_GetTiming+0x574>
            {
              clk_error_prev = (uint32_t) clk_error;
 800303c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8003040:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
              valid_timing[count].scll = (uint8_t) l;
 8003044:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8003048:	b2d8      	uxtb	r0, r3
 800304a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800304e:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	440b      	add	r3, r1
 800305a:	3304      	adds	r3, #4
 800305c:	4602      	mov	r2, r0
 800305e:	701a      	strb	r2, [r3, #0]
              valid_timing[count].sclh = (uint8_t) h;
 8003060:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 8003064:	b2d8      	uxtb	r0, r3
 8003066:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800306a:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	440b      	add	r3, r1
 8003076:	3303      	adds	r3, #3
 8003078:	4602      	mov	r2, r0
 800307a:	701a      	strb	r2, [r3, #0]
              s = &valid_timing[count];
 800307c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8003080:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	440b      	add	r3, r1
 800308c:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
        for (h = 0; h < SCLH_MAX; h++)
 8003090:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 8003094:	3301      	adds	r3, #1
 8003096:	f8a7 32f0 	strh.w	r3, [r7, #752]	; 0x2f0
 800309a:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 800309e:	2bff      	cmp	r3, #255	; 0xff
 80030a0:	f67f af71 	bls.w	8002f86 <I2C_GetTiming+0x46a>
 80030a4:	e000      	b.n	80030a8 <I2C_GetTiming+0x58c>
          continue;
 80030a6:	bf00      	nop
      for (l = 0; l < SCLL_MAX; l++)
 80030a8:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 80030ac:	3301      	adds	r3, #1
 80030ae:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 80030b2:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 80030b6:	2bff      	cmp	r3, #255	; 0xff
 80030b8:	f67f af37 	bls.w	8002f2a <I2C_GetTiming+0x40e>
    for (uint32_t count = 0; count < valid_timing_nbr; count++)
 80030bc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80030c0:	3301      	adds	r3, #1
 80030c2:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80030c6:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80030ca:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80030ce:	429a      	cmp	r2, r3
 80030d0:	f4ff af17 	bcc.w	8002f02 <I2C_GetTiming+0x3e6>
            }
          }
        }
      }
    }
    if (s == NULL)
 80030d4:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <I2C_GetTiming+0x5c4>
    {
      return 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	e01e      	b.n	800311e <I2C_GetTiming+0x602>
    }
    ret = (((uint32_t) s->presc & 0xFU) << 28) | (((uint32_t) s->scldel & 0xFU) << 20) | (((uint32_t) s->sdadel & 0xFU) << 16) | (((uint32_t) s->sclh & 0xFFU) << 8) | (((uint32_t) s->scll & 0xFFU) << 0);
 80030e0:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	071a      	lsls	r2, r3, #28
 80030e8:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 80030ec:	785b      	ldrb	r3, [r3, #1]
 80030ee:	051b      	lsls	r3, r3, #20
 80030f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80030f4:	431a      	orrs	r2, r3
 80030f6:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 80030fa:	789b      	ldrb	r3, [r3, #2]
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003102:	431a      	orrs	r2, r3
 8003104:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8003108:	78db      	ldrb	r3, [r3, #3]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	4313      	orrs	r3, r2
 800310e:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8003112:	7912      	ldrb	r2, [r2, #4]
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  }
  
  return ret;
 800311a:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
}
 800311e:	4618      	mov	r0, r3
 8003120:	f507 7746 	add.w	r7, r7, #792	; 0x318
 8003124:	46bd      	mov	sp, r7
 8003126:	bdb0      	pop	{r4, r5, r7, pc}
 8003128:	3b9aca00 	.word	0x3b9aca00

0800312c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <BSP_HSENSOR_Init+0x38>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	20be      	movs	r0, #190	; 0xbe
 8003138:	4798      	blx	r3
 800313a:	4603      	mov	r3, r0
 800313c:	2bbc      	cmp	r3, #188	; 0xbc
 800313e:	d002      	beq.n	8003146 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	e009      	b.n	800315a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <BSP_HSENSOR_Init+0x3c>)
 8003148:	4a06      	ldr	r2, [pc, #24]	; (8003164 <BSP_HSENSOR_Init+0x38>)
 800314a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <BSP_HSENSOR_Init+0x3c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	20be      	movs	r0, #190	; 0xbe
 8003154:	4798      	blx	r3
    ret = HSENSOR_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800315a:	687b      	ldr	r3, [r7, #4]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000090 	.word	0x20000090
 8003168:	20000c30 	.word	0x20000c30

0800316c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <BSP_HSENSOR_ReadHumidity+0x18>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	20be      	movs	r0, #190	; 0xbe
 8003178:	4798      	blx	r3
 800317a:	eef0 7a40 	vmov.f32	s15, s0
}
 800317e:	eeb0 0a67 	vmov.f32	s0, s15
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000c30 	.word	0x20000c30

08003188 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d903      	bls.n	80031a4 <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800319c:	f06f 0301 	mvn.w	r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	e03a      	b.n	800321a <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d108      	bne.n	80031bc <BSP_MOTION_SENSOR_Init+0x34>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <BSP_MOTION_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80031b4:	f06f 030a 	mvn.w	r3, #10
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	e02e      	b.n	800321a <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d108      	bne.n	80031d4 <BSP_MOTION_SENSOR_Init+0x4c>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <BSP_MOTION_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80031cc:	f06f 030a 	mvn.w	r3, #10
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e022      	b.n	800321a <BSP_MOTION_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <BSP_MOTION_SENSOR_Init+0x66>
    {
      if (LSM6DSL_Probe(Functions) != BSP_ERROR_NONE)
 80031da:	6838      	ldr	r0, [r7, #0]
 80031dc:	f000 f8e8 	bl	80033b0 <LSM6DSL_Probe>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 80031e6:	f06f 0304 	mvn.w	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e008      	b.n	8003200 <BSP_MOTION_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      if (LIS3MDL_Probe(Functions) != BSP_ERROR_NONE)
 80031ee:	6838      	ldr	r0, [r7, #0]
 80031f0:	f000 f954 	bl	800349c <LIS3MDL_Probe>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 80031fa:	f06f 0304 	mvn.w	r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]
      }
    }
    
    if (status == BSP_ERROR_NONE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <BSP_MOTION_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 8003206:	4a07      	ldr	r2, [pc, #28]	; (8003224 <BSP_MOTION_SENSOR_Init+0x9c>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	431a      	orrs	r2, r3
 8003212:	4904      	ldr	r1, [pc, #16]	; (8003224 <BSP_MOTION_SENSOR_Init+0x9c>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000c34 	.word	0x20000c34

08003228 <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d903      	bls.n	8003244 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800323c:	f06f 0301 	mvn.w	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	e045      	b.n	80032d0 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d108      	bne.n	800325c <BSP_MOTION_SENSOR_Enable+0x34>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <BSP_MOTION_SENSOR_Enable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003254:	f06f 030a 	mvn.w	r3, #10
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	e039      	b.n	80032d0 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d108      	bne.n	8003274 <BSP_MOTION_SENSOR_Enable+0x4c>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <BSP_MOTION_SENSOR_Enable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800326c:	f06f 030a 	mvn.w	r3, #10
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e02d      	b.n	80032d0 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <BSP_MOTION_SENSOR_Enable+0xb4>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d103      	bne.n	800328c <BSP_MOTION_SENSOR_Enable+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	e021      	b.n	80032d0 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GyroIdx : ((Function == MOTION_ACCELERO) ? AcceleroIdx : MagnetoIdx);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d006      	beq.n	80032a0 <BSP_MOTION_SENSOR_Enable+0x78>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d101      	bne.n	800329c <BSP_MOTION_SENSOR_Enable+0x74>
 8003298:	2301      	movs	r3, #1
 800329a:	e002      	b.n	80032a2 <BSP_MOTION_SENSOR_Enable+0x7a>
 800329c:	2302      	movs	r3, #2
 800329e:	e000      	b.n	80032a2 <BSP_MOTION_SENSOR_Enable+0x7a>
 80032a0:	2300      	movs	r3, #0
 80032a2:	72fb      	strb	r3, [r7, #11]
    if(Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 80032a4:	7af9      	ldrb	r1, [r7, #11]
 80032a6:	480e      	ldr	r0, [pc, #56]	; (80032e0 <BSP_MOTION_SENSOR_Enable+0xb8>)
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	440b      	add	r3, r1
 80032b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	490a      	ldr	r1, [pc, #40]	; (80032e4 <BSP_MOTION_SENSOR_Enable+0xbc>)
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80032c0:	4610      	mov	r0, r2
 80032c2:	4798      	blx	r3
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	da02      	bge.n	80032d0 <BSP_MOTION_SENSOR_Enable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80032ca:	f06f 0304 	mvn.w	r3, #4
 80032ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80032d0:	68fb      	ldr	r3, [r7, #12]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000c34 	.word	0x20000c34
 80032e0:	20000c4c 	.word	0x20000c4c
 80032e4:	20000c3c 	.word	0x20000c3c

080032e8 <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d802      	bhi.n	8003304 <BSP_MOTION_SENSOR_GetAxes+0x1c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d103      	bne.n	800330c <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003304:	f06f 0301 	mvn.w	r3, #1
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e046      	b.n	800339a <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <BSP_MOTION_SENSOR_GetAxes+0x3c>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <BSP_MOTION_SENSOR_GetAxes+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800331c:	f06f 030a 	mvn.w	r3, #10
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e03a      	b.n	800339a <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d108      	bne.n	800333c <BSP_MOTION_SENSOR_GetAxes+0x54>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <BSP_MOTION_SENSOR_GetAxes+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003334:	f06f 030a 	mvn.w	r3, #10
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e02e      	b.n	800339a <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 800333c:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d103      	bne.n	8003354 <BSP_MOTION_SENSOR_GetAxes+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 800334c:	f04f 33ff 	mov.w	r3, #4294967295
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	e022      	b.n	800339a <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GyroIdx : ((Function == MOTION_ACCELERO) ? AcceleroIdx : MagnetoIdx);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d006      	beq.n	8003368 <BSP_MOTION_SENSOR_GetAxes+0x80>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d101      	bne.n	8003364 <BSP_MOTION_SENSOR_GetAxes+0x7c>
 8003360:	2301      	movs	r3, #1
 8003362:	e002      	b.n	800336a <BSP_MOTION_SENSOR_GetAxes+0x82>
 8003364:	2302      	movs	r3, #2
 8003366:	e000      	b.n	800336a <BSP_MOTION_SENSOR_GetAxes+0x82>
 8003368:	2300      	movs	r3, #0
 800336a:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 800336c:	7cf9      	ldrb	r1, [r7, #19]
 800336e:	480e      	ldr	r0, [pc, #56]	; (80033a8 <BSP_MOTION_SENSOR_GetAxes+0xc0>)
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	440b      	add	r3, r1
 800337a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	490a      	ldr	r1, [pc, #40]	; (80033ac <BSP_MOTION_SENSOR_GetAxes+0xc4>)
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4610      	mov	r0, r2
 800338c:	4798      	blx	r3
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	da02      	bge.n	800339a <BSP_MOTION_SENSOR_GetAxes+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003394:	f06f 0304 	mvn.w	r3, #4
 8003398:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800339a:	697b      	ldr	r3, [r7, #20]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000c34 	.word	0x20000c34
 80033a8:	20000c4c 	.word	0x20000c4c
 80033ac:	20000c3c 	.word	0x20000c3c

080033b0 <LSM6DSL_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t LSM6DSL_Probe(uint32_t Functions)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08c      	sub	sp, #48	; 0x30
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  LSM6DSL_IO_t            IOCtx;
  uint8_t                 lsm6dsl_id;
  static LSM6DSL_Object_t LSM6DSL_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = LSM6DSL_I2C_BUS;
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = LSM6DSL_I2C_ADD_L;
 80033c0:	23d5      	movs	r3, #213	; 0xd5
 80033c2:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 80033c4:	4b29      	ldr	r3, [pc, #164]	; (800346c <LSM6DSL_Probe+0xbc>)
 80033c6:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <LSM6DSL_Probe+0xc0>)
 80033ca:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 80033cc:	4b29      	ldr	r3, [pc, #164]	; (8003474 <LSM6DSL_Probe+0xc4>)
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 80033d0:	4b29      	ldr	r3, [pc, #164]	; (8003478 <LSM6DSL_Probe+0xc8>)
 80033d2:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 80033d4:	4b29      	ldr	r3, [pc, #164]	; (800347c <LSM6DSL_Probe+0xcc>)
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LSM6DSL_RegisterBusIO(&LSM6DSL_Obj, &IOCtx) != LSM6DSL_OK)
 80033d8:	f107 0310 	add.w	r3, r7, #16
 80033dc:	4619      	mov	r1, r3
 80033de:	4828      	ldr	r0, [pc, #160]	; (8003480 <LSM6DSL_Probe+0xd0>)
 80033e0:	f001 fa3a 	bl	8004858 <LSM6DSL_RegisterBusIO>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <LSM6DSL_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 80033ea:	f06f 0307 	mvn.w	r3, #7
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f0:	e037      	b.n	8003462 <LSM6DSL_Probe+0xb2>
  }
  else if (LSM6DSL_ReadID(&LSM6DSL_Obj, &lsm6dsl_id) != LSM6DSL_OK)
 80033f2:	f107 030f 	add.w	r3, r7, #15
 80033f6:	4619      	mov	r1, r3
 80033f8:	4821      	ldr	r0, [pc, #132]	; (8003480 <LSM6DSL_Probe+0xd0>)
 80033fa:	f001 fb23 	bl	8004a44 <LSM6DSL_ReadID>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <LSM6DSL_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8003404:	f06f 0304 	mvn.w	r3, #4
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340a:	e02a      	b.n	8003462 <LSM6DSL_Probe+0xb2>
  }
  else if (lsm6dsl_id != LSM6DSL_ID)
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b6a      	cmp	r3, #106	; 0x6a
 8003410:	d003      	beq.n	800341a <LSM6DSL_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8003412:	f06f 0306 	mvn.w	r3, #6
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003418:	e023      	b.n	8003462 <LSM6DSL_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &LSM6DSL_Obj;
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <LSM6DSL_Probe+0xd4>)
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <LSM6DSL_Probe+0xd0>)
 800341e:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &LSM6DSL_COMMON_Driver;
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <LSM6DSL_Probe+0xd8>)
 8003422:	4a1a      	ldr	r2, [pc, #104]	; (800348c <LSM6DSL_Probe+0xdc>)
 8003424:	601a      	str	r2, [r3, #0]
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <LSM6DSL_Probe+0xd8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a15      	ldr	r2, [pc, #84]	; (8003484 <LSM6DSL_Probe+0xd4>)
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	4610      	mov	r0, r2
 8003432:	4798      	blx	r3
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	da03      	bge.n	8003442 <LSM6DSL_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800343a:	f06f 0304 	mvn.w	r3, #4
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003440:	e00f      	b.n	8003462 <LSM6DSL_Probe+0xb2>
    }
    else
    {
      if ((Functions & MOTION_GYRO) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <LSM6DSL_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GyroIdx] = (MOTION_SENSOR_FuncDrv_t *) &LSM6DSL_GYRO_Driver;
 800344c:	4b10      	ldr	r3, [pc, #64]	; (8003490 <LSM6DSL_Probe+0xe0>)
 800344e:	4a11      	ldr	r2, [pc, #68]	; (8003494 <LSM6DSL_Probe+0xe4>)
 8003450:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <LSM6DSL_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][AcceleroIdx] = (MOTION_SENSOR_FuncDrv_t *) &LSM6DSL_ACC_Driver;
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <LSM6DSL_Probe+0xe0>)
 800345e:	4a0e      	ldr	r2, [pc, #56]	; (8003498 <LSM6DSL_Probe+0xe8>)
 8003460:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003464:	4618      	mov	r0, r3
 8003466:	3730      	adds	r7, #48	; 0x30
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	08002755 	.word	0x08002755
 8003470:	080027d5 	.word	0x080027d5
 8003474:	08002855 	.word	0x08002855
 8003478:	08002825 	.word	0x08002825
 800347c:	080028cf 	.word	0x080028cf
 8003480:	20000c64 	.word	0x20000c64
 8003484:	20000c3c 	.word	0x20000c3c
 8003488:	20000c44 	.word	0x20000c44
 800348c:	200000ec 	.word	0x200000ec
 8003490:	20000c4c 	.word	0x20000c4c
 8003494:	20000120 	.word	0x20000120
 8003498:	200000fc 	.word	0x200000fc

0800349c <LIS3MDL_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t LIS3MDL_Probe(uint32_t Functions)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	; 0x30
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LIS3MDL_IO_t            IOCtx;
  uint8_t                 lis3mdl_id;
  static LIS3MDL_Object_t LIS3MDL_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = LIS3MDL_I2C_BUS;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = LIS3MDL_I2C_ADD_H;
 80034ac:	233d      	movs	r3, #61	; 0x3d
 80034ae:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <LIS3MDL_Probe+0xac>)
 80034b2:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <LIS3MDL_Probe+0xb0>)
 80034b6:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 80034b8:	4b25      	ldr	r3, [pc, #148]	; (8003550 <LIS3MDL_Probe+0xb4>)
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <LIS3MDL_Probe+0xb8>)
 80034be:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <LIS3MDL_Probe+0xbc>)
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS3MDL_RegisterBusIO(&LIS3MDL_Obj, &IOCtx) != LIS3MDL_OK)
 80034c4:	f107 0310 	add.w	r3, r7, #16
 80034c8:	4619      	mov	r1, r3
 80034ca:	4824      	ldr	r0, [pc, #144]	; (800355c <LIS3MDL_Probe+0xc0>)
 80034cc:	f000 fa3c 	bl	8003948 <LIS3MDL_RegisterBusIO>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <LIS3MDL_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 80034d6:	f06f 0307 	mvn.w	r3, #7
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034dc:	e02f      	b.n	800353e <LIS3MDL_Probe+0xa2>
  }
  else if (LIS3MDL_ReadID(&LIS3MDL_Obj, &lis3mdl_id) != LIS3MDL_OK)
 80034de:	f107 030f 	add.w	r3, r7, #15
 80034e2:	4619      	mov	r1, r3
 80034e4:	481d      	ldr	r0, [pc, #116]	; (800355c <LIS3MDL_Probe+0xc0>)
 80034e6:	f000 fae7 	bl	8003ab8 <LIS3MDL_ReadID>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <LIS3MDL_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 80034f0:	f06f 0304 	mvn.w	r3, #4
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f6:	e022      	b.n	800353e <LIS3MDL_Probe+0xa2>
  }
  else if (lis3mdl_id != LIS3MDL_ID)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b3d      	cmp	r3, #61	; 0x3d
 80034fc:	d003      	beq.n	8003506 <LIS3MDL_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 80034fe:	f06f 0306 	mvn.w	r3, #6
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003504:	e01b      	b.n	800353e <LIS3MDL_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &LIS3MDL_Obj;
 8003506:	4b16      	ldr	r3, [pc, #88]	; (8003560 <LIS3MDL_Probe+0xc4>)
 8003508:	4a14      	ldr	r2, [pc, #80]	; (800355c <LIS3MDL_Probe+0xc0>)
 800350a:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &LIS3MDL_COMMON_Driver;
 800350c:	4b15      	ldr	r3, [pc, #84]	; (8003564 <LIS3MDL_Probe+0xc8>)
 800350e:	4a16      	ldr	r2, [pc, #88]	; (8003568 <LIS3MDL_Probe+0xcc>)
 8003510:	605a      	str	r2, [r3, #4]
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <LIS3MDL_Probe+0xc8>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a11      	ldr	r2, [pc, #68]	; (8003560 <LIS3MDL_Probe+0xc4>)
 800351a:	6852      	ldr	r2, [r2, #4]
 800351c:	4610      	mov	r0, r2
 800351e:	4798      	blx	r3
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	da03      	bge.n	800352e <LIS3MDL_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003526:	f06f 0304 	mvn.w	r3, #4
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352c:	e007      	b.n	800353e <LIS3MDL_Probe+0xa2>
    }
    else
    {
      if ((Functions & MOTION_MAGNETO) != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <LIS3MDL_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MagnetoIdx] = (MOTION_SENSOR_FuncDrv_t *) &LIS3MDL_MAG_Driver;
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <LIS3MDL_Probe+0xd0>)
 800353a:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <LIS3MDL_Probe+0xd4>)
 800353c:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003540:	4618      	mov	r0, r3
 8003542:	3730      	adds	r7, #48	; 0x30
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	08002755 	.word	0x08002755
 800354c:	080027d5 	.word	0x080027d5
 8003550:	08002855 	.word	0x08002855
 8003554:	08002825 	.word	0x08002825
 8003558:	080028cf 	.word	0x080028cf
 800355c:	20000c94 	.word	0x20000c94
 8003560:	20000c3c 	.word	0x20000c3c
 8003564:	20000c44 	.word	0x20000c44
 8003568:	200000ac 	.word	0x200000ac
 800356c:	20000c4c 	.word	0x20000c4c
 8003570:	200000bc 	.word	0x200000bc

08003574 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800357a:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <BSP_PSENSOR_Init+0x38>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	20ba      	movs	r0, #186	; 0xba
 8003580:	4798      	blx	r3
 8003582:	4603      	mov	r3, r0
 8003584:	2bb1      	cmp	r3, #177	; 0xb1
 8003586:	d002      	beq.n	800358e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	e009      	b.n	80035a2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <BSP_PSENSOR_Init+0x3c>)
 8003590:	4a06      	ldr	r2, [pc, #24]	; (80035ac <BSP_PSENSOR_Init+0x38>)
 8003592:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <BSP_PSENSOR_Init+0x3c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	20ba      	movs	r0, #186	; 0xba
 800359c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80035a2:	687b      	ldr	r3, [r7, #4]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200000e0 	.word	0x200000e0
 80035b0:	20000cc0 	.word	0x20000cc0

080035b4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <BSP_PSENSOR_ReadPressure+0x18>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	20ba      	movs	r0, #186	; 0xba
 80035c0:	4798      	blx	r3
 80035c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80035c6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000cc0 	.word	0x20000cc0

080035d0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <BSP_TSENSOR_Init+0x30>)
 80035dc:	4a09      	ldr	r2, [pc, #36]	; (8003604 <BSP_TSENSOR_Init+0x34>)
 80035de:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80035e0:	f7ff f858 	bl	8002694 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <BSP_TSENSOR_Init+0x30>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2100      	movs	r1, #0
 80035ec:	20be      	movs	r0, #190	; 0xbe
 80035ee:	4798      	blx	r3

  ret = TSENSOR_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80035f4:	79fb      	ldrb	r3, [r7, #7]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000cc4 	.word	0x20000cc4
 8003604:	2000009c 	.word	0x2000009c

08003608 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <BSP_TSENSOR_ReadTemp+0x18>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	20be      	movs	r0, #190	; 0xbe
 8003614:	4798      	blx	r3
 8003616:	eef0 7a40 	vmov.f32	s15, s0
}
 800361a:	eeb0 0a67 	vmov.f32	s0, s15
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000cc4 	.word	0x20000cc4

08003624 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2120      	movs	r1, #32
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff f851 	bl	80026dc <SENSOR_IO_Read>
 800363a:	4603      	mov	r3, r0
 800363c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	f023 0303 	bic.w	r3, r3, #3
 8003654:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003664:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	2120      	movs	r1, #32
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff f81a 	bl	80026a8 <SENSOR_IO_Write>
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800368a:	f7ff f803 	bl	8002694 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	210f      	movs	r1, #15
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff f821 	bl	80026dc <SENSOR_IO_Read>
 800369a:	4603      	mov	r3, r0
 800369c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	b2d8      	uxtb	r0, r3
 80036b6:	f107 020c 	add.w	r2, r7, #12
 80036ba:	2302      	movs	r3, #2
 80036bc:	21b0      	movs	r1, #176	; 0xb0
 80036be:	f7ff f82b 	bl	8002718 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80036c2:	7b3b      	ldrb	r3, [r7, #12]
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80036ca:	7b7b      	ldrb	r3, [r7, #13]
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	b2d8      	uxtb	r0, r3
 80036d6:	f107 020c 	add.w	r2, r7, #12
 80036da:	2302      	movs	r3, #2
 80036dc:	21b6      	movs	r1, #182	; 0xb6
 80036de:	f7ff f81b 	bl	8002718 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80036e2:	7b7b      	ldrb	r3, [r7, #13]
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	b21a      	sxth	r2, r3
 80036e8:	7b3b      	ldrb	r3, [r7, #12]
 80036ea:	b21b      	sxth	r3, r3
 80036ec:	4313      	orrs	r3, r2
 80036ee:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	b2d8      	uxtb	r0, r3
 80036f4:	f107 020c 	add.w	r2, r7, #12
 80036f8:	2302      	movs	r3, #2
 80036fa:	21ba      	movs	r1, #186	; 0xba
 80036fc:	f7ff f80c 	bl	8002718 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003700:	7b7b      	ldrb	r3, [r7, #13]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	b21a      	sxth	r2, r3
 8003706:	7b3b      	ldrb	r3, [r7, #12]
 8003708:	b21b      	sxth	r3, r3
 800370a:	4313      	orrs	r3, r2
 800370c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	b2d8      	uxtb	r0, r3
 8003712:	f107 020c 	add.w	r2, r7, #12
 8003716:	2302      	movs	r3, #2
 8003718:	21a8      	movs	r1, #168	; 0xa8
 800371a:	f7fe fffd 	bl	8002718 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800371e:	7b7b      	ldrb	r3, [r7, #13]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	b21a      	sxth	r2, r3
 8003724:	7b3b      	ldrb	r3, [r7, #12]
 8003726:	b21b      	sxth	r3, r3
 8003728:	4313      	orrs	r3, r2
 800372a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800372c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003730:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800373e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003742:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003750:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003754:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003758:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800377e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003782:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800378a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800378e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003792:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80037d8 <HTS221_H_ReadHumidity+0x130>
 8003796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800379a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379e:	dd01      	ble.n	80037a4 <HTS221_H_ReadHumidity+0xfc>
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HTS221_H_ReadHumidity+0x134>)
 80037a2:	e00a      	b.n	80037ba <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80037a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80037a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	d502      	bpl.n	80037b8 <HTS221_H_ReadHumidity+0x110>
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	e000      	b.n	80037ba <HTS221_H_ReadHumidity+0x112>
 80037b8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80037ba:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80037bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80037c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80037c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037c8:	eef0 7a66 	vmov.f32	s15, s13
}
 80037cc:	eeb0 0a67 	vmov.f32	s0, s15
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	447a0000 	.word	0x447a0000
 80037dc:	447a0000 	.word	0x447a0000

080037e0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	6039      	str	r1, [r7, #0]
 80037ea:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2120      	movs	r1, #32
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe ff72 	bl	80026dc <SENSOR_IO_Read>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	f023 0303 	bic.w	r3, r3, #3
 8003812:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003822:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	7bfa      	ldrb	r2, [r7, #15]
 800382a:	2120      	movs	r1, #32
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe ff3b 	bl	80026a8 <SENSOR_IO_Write>
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b088      	sub	sp, #32
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	b2d8      	uxtb	r0, r3
 8003848:	f107 0208 	add.w	r2, r7, #8
 800384c:	2302      	movs	r3, #2
 800384e:	21b2      	movs	r1, #178	; 0xb2
 8003850:	f7fe ff62 	bl	8002718 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2135      	movs	r1, #53	; 0x35
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe ff3e 	bl	80026dc <SENSOR_IO_Read>
 8003860:	4603      	mov	r3, r0
 8003862:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003864:	7ffb      	ldrb	r3, [r7, #31]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	b21b      	sxth	r3, r3
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	b21a      	sxth	r2, r3
 8003870:	7a3b      	ldrb	r3, [r7, #8]
 8003872:	b21b      	sxth	r3, r3
 8003874:	4313      	orrs	r3, r2
 8003876:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003878:	7ffb      	ldrb	r3, [r7, #31]
 800387a:	019b      	lsls	r3, r3, #6
 800387c:	b21b      	sxth	r3, r3
 800387e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003882:	b21a      	sxth	r2, r3
 8003884:	7a7b      	ldrb	r3, [r7, #9]
 8003886:	b21b      	sxth	r3, r3
 8003888:	4313      	orrs	r3, r2
 800388a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800388c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003890:	10db      	asrs	r3, r3, #3
 8003892:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003894:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003898:	10db      	asrs	r3, r3, #3
 800389a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	b2d8      	uxtb	r0, r3
 80038a0:	f107 0208 	add.w	r2, r7, #8
 80038a4:	2304      	movs	r3, #4
 80038a6:	21bc      	movs	r1, #188	; 0xbc
 80038a8:	f7fe ff36 	bl	8002718 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80038ac:	7a7b      	ldrb	r3, [r7, #9]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	b21a      	sxth	r2, r3
 80038b2:	7a3b      	ldrb	r3, [r7, #8]
 80038b4:	b21b      	sxth	r3, r3
 80038b6:	4313      	orrs	r3, r2
 80038b8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80038ba:	7afb      	ldrb	r3, [r7, #11]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	b21a      	sxth	r2, r3
 80038c0:	7abb      	ldrb	r3, [r7, #10]
 80038c2:	b21b      	sxth	r3, r3
 80038c4:	4313      	orrs	r3, r2
 80038c6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	b2d8      	uxtb	r0, r3
 80038cc:	f107 0208 	add.w	r2, r7, #8
 80038d0:	2302      	movs	r3, #2
 80038d2:	21aa      	movs	r1, #170	; 0xaa
 80038d4:	f7fe ff20 	bl	8002718 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80038d8:	7a7b      	ldrb	r3, [r7, #9]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	b21a      	sxth	r2, r3
 80038de:	7a3b      	ldrb	r3, [r7, #8]
 80038e0:	b21b      	sxth	r3, r3
 80038e2:	4313      	orrs	r3, r2
 80038e4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80038e6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80038ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80038fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800390a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800390e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003912:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	ee07 3a90 	vmov	s15, r3
 800391c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003924:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003934:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	ee07 3a90 	vmov	s15, r3
}
 800393e:	eeb0 0a67 	vmov.f32	s0, s15
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <LIS3MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_RegisterBusIO(LIS3MDL_Object_t *pObj, LIS3MDL_IO_t *pIO)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3MDL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <LIS3MDL_RegisterBusIO+0x1c>
  {
    ret = LIS3MDL_ERROR;
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e04d      	b.n	8003a00 <LIS3MDL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	7b1a      	ldrb	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	699a      	ldr	r2, [r3, #24]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <LIS3MDL_RegisterBusIO+0xc4>)
 80039a0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <LIS3MDL_RegisterBusIO+0xc8>)
 80039a6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <LIS3MDL_RegisterBusIO+0x76>
    {
      ret = LIS3MDL_ERROR;
 80039b6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	e020      	b.n	8003a00 <LIS3MDL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS3MDL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4798      	blx	r3
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <LIS3MDL_RegisterBusIO+0x8a>
    {
      ret = LIS3MDL_ERROR;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	e016      	b.n	8003a00 <LIS3MDL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS3MDL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d112      	bne.n	8003a00 <LIS3MDL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10d      	bne.n	8003a00 <LIS3MDL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x07;
 80039e4:	2307      	movs	r3, #7
 80039e6:	72fb      	strb	r3, [r7, #11]

          if (LIS3MDL_Write_Reg(pObj, LIS3MDL_CTRL_REG3, data) != LIS3MDL_OK)
 80039e8:	7afb      	ldrb	r3, [r7, #11]
 80039ea:	461a      	mov	r2, r3
 80039ec:	2122      	movs	r1, #34	; 0x22
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fb51 	bl	8004096 <LIS3MDL_Write_Reg>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <LIS3MDL_RegisterBusIO+0xb8>
          {
            ret = LIS3MDL_ERROR;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295
 80039fe:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 8003a00:	68fb      	ldr	r3, [r7, #12]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	080040cd 	.word	0x080040cd
 8003a10:	0800412f 	.word	0x0800412f

08003a14 <LIS3MDL_Init>:
  * @brief  Component initialization
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_Init(LIS3MDL_Object_t *pObj)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Operating mode selection - power down */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_POWER_DOWN) != LIS3MDL_OK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	331c      	adds	r3, #28
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fdac 	bl	8004580 <lis3mdl_operating_mode_set>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <LIS3MDL_Init+0x20>
  {
    return LIS3MDL_ERROR;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a32:	e025      	b.n	8003a80 <LIS3MDL_Init+0x6c>
  }

  /* Enable BDU */
  if (lis3mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS3MDL_OK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	331c      	adds	r3, #28
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fdc6 	bl	80045cc <lis3mdl_block_data_update_set>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <LIS3MDL_Init+0x38>
  {
    return LIS3MDL_ERROR;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4a:	e019      	b.n	8003a80 <LIS3MDL_Init+0x6c>
  }

  /* Set Output data rate. */
  if (LIS3MDL_MAG_SetOutputDataRate(pObj, 80.0f) != LIS3MDL_OK)
 8003a4c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8003a88 <LIS3MDL_Init+0x74>
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f9db 	bl	8003e0c <LIS3MDL_MAG_SetOutputDataRate>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <LIS3MDL_Init+0x4e>
  {
    return LIS3MDL_ERROR;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	e00e      	b.n	8003a80 <LIS3MDL_Init+0x6c>
  }

  /* Full scale selection. */
  if (LIS3MDL_MAG_SetFullScale(pObj, 4) != LIS3MDL_OK)
 8003a62:	2104      	movs	r1, #4
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fa73 	bl	8003f50 <LIS3MDL_MAG_SetFullScale>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <LIS3MDL_Init+0x62>
  {
    return LIS3MDL_ERROR;
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295
 8003a74:	e004      	b.n	8003a80 <LIS3MDL_Init+0x6c>
  }

  pObj->is_initialized = 1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS3MDL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	42a00000 	.word	0x42a00000

08003a8c <LIS3MDL_DeInit>:
 * @brief Deinitialize the LIS3MDL sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_DeInit(LIS3MDL_Object_t *pObj)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS3MDL_MAG_Disable(pObj) != LIS3MDL_OK)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f873 	bl	8003b80 <LIS3MDL_MAG_Disable>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <LIS3MDL_DeInit+0x1a>
  {
    return LIS3MDL_ERROR;
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa4:	e004      	b.n	8003ab0 <LIS3MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS3MDL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <LIS3MDL_ReadID>:
  * @param  pObj pointer to Component object
  * @param  Id pointer to Component ID
  * @retval Component status
  */
int32_t LIS3MDL_ReadID(LIS3MDL_Object_t *pObj, uint8_t *Id)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  if (lis3mdl_device_id_get(&(pObj->Ctx), Id) != LIS3MDL_OK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	331c      	adds	r3, #28
 8003ac6:	6839      	ldr	r1, [r7, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fdf0 	bl	80046ae <lis3mdl_device_id_get>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <LIS3MDL_ReadID+0x22>
  {
    return LIS3MDL_ERROR;
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	e000      	b.n	8003adc <LIS3MDL_ReadID+0x24>
  }

  return LIS3MDL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <LIS3MDL_GetCapabilities>:
  * @param  pObj pointer to Component object
  * @param  Capabilities pointer to LIS3MDL sensor capabilities
  * @retval Component status
  */
int32_t LIS3MDL_GetCapabilities(LIS3MDL_Object_t *pObj, LIS3MDL_Capabilities_t *Capabilities)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2201      	movs	r2, #1
 8003afe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2200      	movs	r2, #0
 8003b04:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 16;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2210      	movs	r2, #16
 8003b16:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 80.0f;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <LIS3MDL_GetCapabilities+0x58>)
 8003b2c:	619a      	str	r2, [r3, #24]
  return LIS3MDL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	42a00000 	.word	0x42a00000

08003b40 <LIS3MDL_MAG_Enable>:
 * @brief Enable the LIS3MDL accelerometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_Enable(LIS3MDL_Object_t *pObj)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <LIS3MDL_MAG_Enable+0x16>
  {
    return LIS3MDL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e010      	b.n	8003b78 <LIS3MDL_MAG_Enable+0x38>
  }

  /* Operating mode selection - continuous */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_CONTINUOUS_MODE) != LIS3MDL_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	331c      	adds	r3, #28
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fd0f 	bl	8004580 <lis3mdl_operating_mode_set>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <LIS3MDL_MAG_Enable+0x2e>
  {
    return LIS3MDL_ERROR;
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6c:	e004      	b.n	8003b78 <LIS3MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3MDL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <LIS3MDL_MAG_Disable>:
 * @brief Disable the LIS3MDL accelerometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_Disable(LIS3MDL_Object_t *pObj)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <LIS3MDL_MAG_Disable+0x16>
  {
    return LIS3MDL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e010      	b.n	8003bb8 <LIS3MDL_MAG_Disable+0x38>
  }

  /* Operating mode selection - power down */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_POWER_DOWN) != LIS3MDL_OK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	331c      	adds	r3, #28
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fcef 	bl	8004580 <lis3mdl_operating_mode_set>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <LIS3MDL_MAG_Disable+0x2e>
  {
    return LIS3MDL_ERROR;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	e004      	b.n	8003bb8 <LIS3MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3MDL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <LIS3MDL_MAG_GetSensitivity>:
 * @param pObj the device pObj
 * @param Sensitivity pointer to Sensitivity value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetSensitivity(LIS3MDL_Object_t *pObj, float *Sensitivity)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lis3mdl_full_scale_get(&(pObj->Ctx), &full_scale) != LIS3MDL_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	331c      	adds	r3, #28
 8003bce:	f107 020f 	add.w	r2, r7, #15
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fc9b 	bl	8004510 <lis3mdl_full_scale_get>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <LIS3MDL_MAG_GetSensitivity+0x26>
  {
    return LIS3MDL_ERROR;
 8003be0:	f04f 33ff 	mov.w	r3, #4294967295
 8003be4:	e020      	b.n	8003c28 <LIS3MDL_MAG_GetSensitivity+0x68>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d81b      	bhi.n	8003c24 <LIS3MDL_MAG_GetSensitivity+0x64>
 8003bec:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <LIS3MDL_MAG_GetSensitivity+0x34>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c0d 	.word	0x08003c0d
 8003bfc:	08003c15 	.word	0x08003c15
 8003c00:	08003c1d 	.word	0x08003c1d
  {
    case LIS3MDL_4_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_4GAUSS;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <LIS3MDL_MAG_GetSensitivity+0x70>)
 8003c08:	601a      	str	r2, [r3, #0]
      break;
 8003c0a:	e00c      	b.n	8003c26 <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_8_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_8GAUSS;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <LIS3MDL_MAG_GetSensitivity+0x74>)
 8003c10:	601a      	str	r2, [r3, #0]
      break;
 8003c12:	e008      	b.n	8003c26 <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_12_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_12GAUSS;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <LIS3MDL_MAG_GetSensitivity+0x78>)
 8003c18:	601a      	str	r2, [r3, #0]
      break;
 8003c1a:	e004      	b.n	8003c26 <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_16_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_16GAUSS;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4a07      	ldr	r2, [pc, #28]	; (8003c3c <LIS3MDL_MAG_GetSensitivity+0x7c>)
 8003c20:	601a      	str	r2, [r3, #0]
      break;
 8003c22:	e000      	b.n	8003c26 <LIS3MDL_MAG_GetSensitivity+0x66>
    default:
      break;
 8003c24:	bf00      	nop
  }

  return LIS3MDL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	3e158106 	.word	0x3e158106
 8003c34:	3e958106 	.word	0x3e958106
 8003c38:	3ee04189 	.word	0x3ee04189
 8003c3c:	3f158106 	.word	0x3f158106

08003c40 <LIS3MDL_MAG_GetOutputDataRate>:
 * @param pObj the device pObj
 * @param Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetOutputDataRate(LIS3MDL_Object_t *pObj, float *Odr)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  lis3mdl_om_t odr_low_level;

  /* Get current output data rate. */
  if (lis3mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS3MDL_OK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	331c      	adds	r3, #28
 8003c4e:	f107 020f 	add.w	r2, r7, #15
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fb11 	bl	800427c <lis3mdl_data_rate_get>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <LIS3MDL_MAG_GetOutputDataRate+0x26>
  {
    return LIS3MDL_ERROR;
 8003c60:	f04f 33ff 	mov.w	r3, #4294967295
 8003c64:	e0b6      	b.n	8003dd4 <LIS3MDL_MAG_GetOutputDataRate+0x194>
  }

  switch (odr_low_level)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b3e      	cmp	r3, #62	; 0x3e
 8003c6a:	f200 80b1 	bhi.w	8003dd0 <LIS3MDL_MAG_GetOutputDataRate+0x190>
 8003c6e:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <LIS3MDL_MAG_GetOutputDataRate+0x34>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003d71 	.word	0x08003d71
 8003c78:	08003dc9 	.word	0x08003dc9
 8003c7c:	08003d79 	.word	0x08003d79
 8003c80:	08003dd1 	.word	0x08003dd1
 8003c84:	08003d81 	.word	0x08003d81
 8003c88:	08003dd1 	.word	0x08003dd1
 8003c8c:	08003d89 	.word	0x08003d89
 8003c90:	08003dd1 	.word	0x08003dd1
 8003c94:	08003d91 	.word	0x08003d91
 8003c98:	08003dd1 	.word	0x08003dd1
 8003c9c:	08003d99 	.word	0x08003d99
 8003ca0:	08003dd1 	.word	0x08003dd1
 8003ca4:	08003da1 	.word	0x08003da1
 8003ca8:	08003dd1 	.word	0x08003dd1
 8003cac:	08003da9 	.word	0x08003da9
 8003cb0:	08003dd1 	.word	0x08003dd1
 8003cb4:	08003dd1 	.word	0x08003dd1
 8003cb8:	08003dc1 	.word	0x08003dc1
 8003cbc:	08003d79 	.word	0x08003d79
 8003cc0:	08003dd1 	.word	0x08003dd1
 8003cc4:	08003d81 	.word	0x08003d81
 8003cc8:	08003dd1 	.word	0x08003dd1
 8003ccc:	08003d89 	.word	0x08003d89
 8003cd0:	08003dd1 	.word	0x08003dd1
 8003cd4:	08003d91 	.word	0x08003d91
 8003cd8:	08003dd1 	.word	0x08003dd1
 8003cdc:	08003d99 	.word	0x08003d99
 8003ce0:	08003dd1 	.word	0x08003dd1
 8003ce4:	08003da1 	.word	0x08003da1
 8003ce8:	08003dd1 	.word	0x08003dd1
 8003cec:	08003da9 	.word	0x08003da9
 8003cf0:	08003dd1 	.word	0x08003dd1
 8003cf4:	08003dd1 	.word	0x08003dd1
 8003cf8:	08003db9 	.word	0x08003db9
 8003cfc:	08003d79 	.word	0x08003d79
 8003d00:	08003dd1 	.word	0x08003dd1
 8003d04:	08003d81 	.word	0x08003d81
 8003d08:	08003dd1 	.word	0x08003dd1
 8003d0c:	08003d89 	.word	0x08003d89
 8003d10:	08003dd1 	.word	0x08003dd1
 8003d14:	08003d91 	.word	0x08003d91
 8003d18:	08003dd1 	.word	0x08003dd1
 8003d1c:	08003d99 	.word	0x08003d99
 8003d20:	08003dd1 	.word	0x08003dd1
 8003d24:	08003da1 	.word	0x08003da1
 8003d28:	08003dd1 	.word	0x08003dd1
 8003d2c:	08003da9 	.word	0x08003da9
 8003d30:	08003dd1 	.word	0x08003dd1
 8003d34:	08003dd1 	.word	0x08003dd1
 8003d38:	08003db1 	.word	0x08003db1
 8003d3c:	08003d79 	.word	0x08003d79
 8003d40:	08003dd1 	.word	0x08003dd1
 8003d44:	08003d81 	.word	0x08003d81
 8003d48:	08003dd1 	.word	0x08003dd1
 8003d4c:	08003d89 	.word	0x08003d89
 8003d50:	08003dd1 	.word	0x08003dd1
 8003d54:	08003d91 	.word	0x08003d91
 8003d58:	08003dd1 	.word	0x08003dd1
 8003d5c:	08003d99 	.word	0x08003d99
 8003d60:	08003dd1 	.word	0x08003dd1
 8003d64:	08003da1 	.word	0x08003da1
 8003d68:	08003dd1 	.word	0x08003dd1
 8003d6c:	08003da9 	.word	0x08003da9
  {
    case LIS3MDL_LP_Hz625:
      *Odr = 0.625f;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4a1a      	ldr	r2, [pc, #104]	; (8003ddc <LIS3MDL_MAG_GetOutputDataRate+0x19c>)
 8003d74:	601a      	str	r2, [r3, #0]
      break;
 8003d76:	e02c      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1Hz25:
    case LIS3MDL_MP_1Hz25:
    case LIS3MDL_HP_1Hz25:
    case LIS3MDL_UHP_1Hz25:
      *Odr = 1.250f;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <LIS3MDL_MAG_GetOutputDataRate+0x1a0>)
 8003d7c:	601a      	str	r2, [r3, #0]
      break;
 8003d7e:	e028      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_2Hz5:
    case LIS3MDL_MP_2Hz5:
    case LIS3MDL_HP_2Hz5:
    case LIS3MDL_UHP_2Hz5:
      *Odr = 2.500f;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <LIS3MDL_MAG_GetOutputDataRate+0x1a4>)
 8003d84:	601a      	str	r2, [r3, #0]
      break;
 8003d86:	e024      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_5Hz:
    case LIS3MDL_MP_5Hz:
    case LIS3MDL_HP_5Hz:
    case LIS3MDL_UHP_5Hz:
      *Odr = 5.000f;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <LIS3MDL_MAG_GetOutputDataRate+0x1a8>)
 8003d8c:	601a      	str	r2, [r3, #0]
      break;
 8003d8e:	e020      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_10Hz:
    case LIS3MDL_MP_10Hz:
    case LIS3MDL_HP_10Hz:
    case LIS3MDL_UHP_10Hz:
      *Odr = 10.000f;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4a16      	ldr	r2, [pc, #88]	; (8003dec <LIS3MDL_MAG_GetOutputDataRate+0x1ac>)
 8003d94:	601a      	str	r2, [r3, #0]
      break;
 8003d96:	e01c      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_20Hz:
    case LIS3MDL_MP_20Hz:
    case LIS3MDL_HP_20Hz:
    case LIS3MDL_UHP_20Hz:
      *Odr = 20.000f;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <LIS3MDL_MAG_GetOutputDataRate+0x1b0>)
 8003d9c:	601a      	str	r2, [r3, #0]
      break;
 8003d9e:	e018      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_40Hz:
    case LIS3MDL_MP_40Hz:
    case LIS3MDL_HP_40Hz:
    case LIS3MDL_UHP_40Hz:
      *Odr = 40.000f;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <LIS3MDL_MAG_GetOutputDataRate+0x1b4>)
 8003da4:	601a      	str	r2, [r3, #0]
      break;
 8003da6:	e014      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_80Hz:
    case LIS3MDL_MP_80Hz:
    case LIS3MDL_HP_80Hz:
    case LIS3MDL_UHP_80Hz:
      *Odr = 80.000f;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <LIS3MDL_MAG_GetOutputDataRate+0x1b8>)
 8003dac:	601a      	str	r2, [r3, #0]
      break;
 8003dae:	e010      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_UHP_155Hz:
      *Odr = 155.000f;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <LIS3MDL_MAG_GetOutputDataRate+0x1bc>)
 8003db4:	601a      	str	r2, [r3, #0]
      break;
 8003db6:	e00c      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_HP_300Hz:
      *Odr = 300.000f;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <LIS3MDL_MAG_GetOutputDataRate+0x1c0>)
 8003dbc:	601a      	str	r2, [r3, #0]
      break;
 8003dbe:	e008      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_MP_560Hz:
      *Odr = 560.000f;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4a10      	ldr	r2, [pc, #64]	; (8003e04 <LIS3MDL_MAG_GetOutputDataRate+0x1c4>)
 8003dc4:	601a      	str	r2, [r3, #0]
      break;
 8003dc6:	e004      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1kHz:
      *Odr = 1000.000f;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	4a0f      	ldr	r2, [pc, #60]	; (8003e08 <LIS3MDL_MAG_GetOutputDataRate+0x1c8>)
 8003dcc:	601a      	str	r2, [r3, #0]
      break;
 8003dce:	e000      	b.n	8003dd2 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    default:
      break;
 8003dd0:	bf00      	nop
  }

  return LIS3MDL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	3f200000 	.word	0x3f200000
 8003de0:	3fa00000 	.word	0x3fa00000
 8003de4:	40200000 	.word	0x40200000
 8003de8:	40a00000 	.word	0x40a00000
 8003dec:	41200000 	.word	0x41200000
 8003df0:	41a00000 	.word	0x41a00000
 8003df4:	42200000 	.word	0x42200000
 8003df8:	42a00000 	.word	0x42a00000
 8003dfc:	431b0000 	.word	0x431b0000
 8003e00:	43960000 	.word	0x43960000
 8003e04:	440c0000 	.word	0x440c0000
 8003e08:	447a0000 	.word	0x447a0000

08003e0c <LIS3MDL_MAG_SetOutputDataRate>:
 * @param pObj the device pObj
 * @param Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_SetOutputDataRate(LIS3MDL_Object_t *pObj, float Odr)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	ed87 0a00 	vstr	s0, [r7]
  lis3mdl_om_t new_odr;

  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
            : (Odr <=  1.250f) ? LIS3MDL_LP_1Hz25
 8003e18:	edd7 7a00 	vldr	s15, [r7]
 8003e1c:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 8003e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e28:	d801      	bhi.n	8003e2e <LIS3MDL_MAG_SetOutputDataRate+0x22>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e042      	b.n	8003eb4 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003e2e:	edd7 7a00 	vldr	s15, [r7]
 8003e32:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8003e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3e:	d801      	bhi.n	8003e44 <LIS3MDL_MAG_SetOutputDataRate+0x38>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e037      	b.n	8003eb4 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003e44:	edd7 7a00 	vldr	s15, [r7]
 8003e48:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e54:	d801      	bhi.n	8003e5a <LIS3MDL_MAG_SetOutputDataRate+0x4e>
 8003e56:	2304      	movs	r3, #4
 8003e58:	e02c      	b.n	8003eb4 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003e5a:	edd7 7a00 	vldr	s15, [r7]
 8003e5e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6a:	d801      	bhi.n	8003e70 <LIS3MDL_MAG_SetOutputDataRate+0x64>
 8003e6c:	2306      	movs	r3, #6
 8003e6e:	e021      	b.n	8003eb4 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003e70:	edd7 7a00 	vldr	s15, [r7]
 8003e74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e80:	d801      	bhi.n	8003e86 <LIS3MDL_MAG_SetOutputDataRate+0x7a>
 8003e82:	2308      	movs	r3, #8
 8003e84:	e016      	b.n	8003eb4 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003e86:	edd7 7a00 	vldr	s15, [r7]
 8003e8a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e96:	d801      	bhi.n	8003e9c <LIS3MDL_MAG_SetOutputDataRate+0x90>
 8003e98:	230a      	movs	r3, #10
 8003e9a:	e00b      	b.n	8003eb4 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003e9c:	edd7 7a00 	vldr	s15, [r7]
 8003ea0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003edc <LIS3MDL_MAG_SetOutputDataRate+0xd0>
 8003ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eac:	d801      	bhi.n	8003eb2 <LIS3MDL_MAG_SetOutputDataRate+0xa6>
 8003eae:	230c      	movs	r3, #12
 8003eb0:	e000      	b.n	8003eb4 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003eb2:	230e      	movs	r3, #14
  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
 8003eb4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 10.000f) ? LIS3MDL_LP_10Hz
            : (Odr <= 20.000f) ? LIS3MDL_LP_20Hz
            : (Odr <= 40.000f) ? LIS3MDL_LP_40Hz
            :                      LIS3MDL_LP_80Hz;

  if (lis3mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS3MDL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	331c      	adds	r3, #28
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f996 	bl	80041f0 <lis3mdl_data_rate_set>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <LIS3MDL_MAG_SetOutputDataRate+0xc4>
  {
    return LIS3MDL_ERROR;
 8003eca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ece:	e000      	b.n	8003ed2 <LIS3MDL_MAG_SetOutputDataRate+0xc6>
  }

  return LIS3MDL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	42200000 	.word	0x42200000

08003ee0 <LIS3MDL_MAG_GetFullScale>:
 * @param pObj the device pObj
 * @param FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetFullScale(LIS3MDL_Object_t *pObj, int32_t  *FullScale)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis3mdl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS3MDL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	331c      	adds	r3, #28
 8003eee:	f107 020f 	add.w	r2, r7, #15
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fb0b 	bl	8004510 <lis3mdl_full_scale_get>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <LIS3MDL_MAG_GetFullScale+0x26>
  {
    return LIS3MDL_ERROR;
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
 8003f04:	e020      	b.n	8003f48 <LIS3MDL_MAG_GetFullScale+0x68>
  }

  switch (fs_low_level)
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d81b      	bhi.n	8003f44 <LIS3MDL_MAG_GetFullScale+0x64>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <LIS3MDL_MAG_GetFullScale+0x34>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f2d 	.word	0x08003f2d
 8003f1c:	08003f35 	.word	0x08003f35
 8003f20:	08003f3d 	.word	0x08003f3d
  {
    case LIS3MDL_4_GAUSS:
      *FullScale = 4;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2204      	movs	r2, #4
 8003f28:	601a      	str	r2, [r3, #0]
      break;
 8003f2a:	e00c      	b.n	8003f46 <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_8_GAUSS:
      *FullScale = 8;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2208      	movs	r2, #8
 8003f30:	601a      	str	r2, [r3, #0]
      break;
 8003f32:	e008      	b.n	8003f46 <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_12_GAUSS:
      *FullScale = 12;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	220c      	movs	r2, #12
 8003f38:	601a      	str	r2, [r3, #0]
      break;
 8003f3a:	e004      	b.n	8003f46 <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_16_GAUSS:
      *FullScale = 16;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2210      	movs	r2, #16
 8003f40:	601a      	str	r2, [r3, #0]
      break;
 8003f42:	e000      	b.n	8003f46 <LIS3MDL_MAG_GetFullScale+0x66>
    default:
      break;
 8003f44:	bf00      	nop
  }

  return LIS3MDL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <LIS3MDL_MAG_SetFullScale>:
 * @param pObj the device pObj
 * @param FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_SetFullScale(LIS3MDL_Object_t *pObj, int32_t FullScale)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t new_fs;

  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
           : (FullScale <= 8) ? LIS3MDL_8_GAUSS
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	dd0b      	ble.n	8003f78 <LIS3MDL_MAG_SetFullScale+0x28>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	dd06      	ble.n	8003f74 <LIS3MDL_MAG_SetFullScale+0x24>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	dc01      	bgt.n	8003f70 <LIS3MDL_MAG_SetFullScale+0x20>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e004      	b.n	8003f7a <LIS3MDL_MAG_SetFullScale+0x2a>
 8003f70:	2303      	movs	r3, #3
 8003f72:	e002      	b.n	8003f7a <LIS3MDL_MAG_SetFullScale+0x2a>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <LIS3MDL_MAG_SetFullScale+0x2a>
 8003f78:	2300      	movs	r3, #0
  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
 8003f7a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 12) ? LIS3MDL_12_GAUSS
           :                       LIS3MDL_16_GAUSS;

  if (lis3mdl_full_scale_set(&(pObj->Ctx), new_fs) != LIS3MDL_OK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	331c      	adds	r3, #28
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fa9d 	bl	80044c4 <lis3mdl_full_scale_set>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <LIS3MDL_MAG_SetFullScale+0x46>
  {
    return LIS3MDL_ERROR;
 8003f90:	f04f 33ff 	mov.w	r3, #4294967295
 8003f94:	e000      	b.n	8003f98 <LIS3MDL_MAG_SetFullScale+0x48>
  }

  return LIS3MDL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <LIS3MDL_MAG_GetAxesRaw>:
 * @param pObj the device pObj
 * @param Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetAxesRaw(LIS3MDL_Object_t *pObj, LIS3MDL_AxesRaw_t *Value)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  lis3mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis3mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3MDL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	331c      	adds	r3, #28
 8003fae:	f107 0208 	add.w	r2, r7, #8
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fb2f 	bl	8004618 <lis3mdl_magnetic_raw_get>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <LIS3MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS3MDL_ERROR;
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc4:	e00c      	b.n	8003fe0 <LIS3MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003fc6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003fce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003fd6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	809a      	strh	r2, [r3, #4]

  return LIS3MDL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <LIS3MDL_MAG_GetAxes>:
 * @param pObj the device pObj
 * @param MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetAxes(LIS3MDL_Object_t *pObj, LIS3MDL_Axes_t *MagneticField)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  lis3mdl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lis3mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3MDL_OK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	331c      	adds	r3, #28
 8003ffc:	f107 0210 	add.w	r2, r7, #16
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fb08 	bl	8004618 <lis3mdl_magnetic_raw_get>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <LIS3MDL_MAG_GetAxes+0x2c>
  {
    return LIS3MDL_ERROR;
 800400e:	f04f 33ff 	mov.w	r3, #4294967295
 8004012:	e03c      	b.n	800408e <LIS3MDL_MAG_GetAxes+0xa6>
  }

  /* Get LIS3MDL actual sensitivity. */
  if (LIS3MDL_MAG_GetSensitivity(pObj, &sensitivity) != LIS3MDL_OK)
 8004014:	f107 030c 	add.w	r3, r7, #12
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fdd0 	bl	8003bc0 <LIS3MDL_MAG_GetSensitivity>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <LIS3MDL_MAG_GetAxes+0x44>
  {
    return LIS3MDL_ERROR;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	e030      	b.n	800408e <LIS3MDL_MAG_GetAxes+0xa6>
  }

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800402c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004038:	edd7 7a03 	vldr	s15, [r7, #12]
 800403c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004044:	ee17 2a90 	vmov	r2, s15
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800404c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004058:	edd7 7a03 	vldr	s15, [r7, #12]
 800405c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004064:	ee17 2a90 	vmov	r2, s15
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800406c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004078:	edd7 7a03 	vldr	s15, [r7, #12]
 800407c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004084:	ee17 2a90 	vmov	r2, s15
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	609a      	str	r2, [r3, #8]

  return LIS3MDL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <LIS3MDL_Write_Reg>:
 * @param Reg address to be written
 * @param Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_Write_Reg(LIS3MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	70fb      	strb	r3, [r7, #3]
 80040a2:	4613      	mov	r3, r2
 80040a4:	70bb      	strb	r3, [r7, #2]
  if (lis3mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS3MDL_OK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f103 001c 	add.w	r0, r3, #28
 80040ac:	1cba      	adds	r2, r7, #2
 80040ae:	78f9      	ldrb	r1, [r7, #3]
 80040b0:	2301      	movs	r3, #1
 80040b2:	f000 f885 	bl	80041c0 <lis3mdl_write_reg>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <LIS3MDL_Write_Reg+0x2c>
  {
    return LIS3MDL_ERROR;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
 80040c0:	e000      	b.n	80040c4 <LIS3MDL_Write_Reg+0x2e>
  }

  return LIS3MDL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <ReadRegWrap>:
  * @brief  Wrap Read register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	461a      	mov	r2, r3
 80040d8:	460b      	mov	r3, r1
 80040da:	72fb      	strb	r3, [r7, #11]
 80040dc:	4613      	mov	r3, r2
 80040de:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10e      	bne.n	800410a <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	695c      	ldr	r4, [r3, #20]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	7b1b      	ldrb	r3, [r3, #12]
 80040f4:	b298      	uxth	r0, r3
 80040f6:	7afb      	ldrb	r3, [r7, #11]
 80040f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	b299      	uxth	r1, r3
 8004100:	893b      	ldrh	r3, [r7, #8]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	47a0      	blx	r4
 8004106:	4603      	mov	r3, r0
 8004108:	e00d      	b.n	8004126 <ReadRegWrap+0x5a>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	695c      	ldr	r4, [r3, #20]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	7b1b      	ldrb	r3, [r3, #12]
 8004112:	b298      	uxth	r0, r3
 8004114:	7afb      	ldrb	r3, [r7, #11]
 8004116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800411a:	b2db      	uxtb	r3, r3
 800411c:	b299      	uxth	r1, r3
 800411e:	893b      	ldrh	r3, [r7, #8]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	47a0      	blx	r4
 8004124:	4603      	mov	r3, r0
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	bd90      	pop	{r4, r7, pc}

0800412e <WriteRegWrap>:
  * @brief  Wrap Write register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800412e:	b590      	push	{r4, r7, lr}
 8004130:	b087      	sub	sp, #28
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	461a      	mov	r2, r3
 800413a:	460b      	mov	r3, r1
 800413c:	72fb      	strb	r3, [r7, #11]
 800413e:	4613      	mov	r3, r2
 8004140:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10e      	bne.n	800416c <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	691c      	ldr	r4, [r3, #16]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	7b1b      	ldrb	r3, [r3, #12]
 8004156:	b298      	uxth	r0, r3
 8004158:	7afb      	ldrb	r3, [r7, #11]
 800415a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800415e:	b2db      	uxtb	r3, r3
 8004160:	b299      	uxth	r1, r3
 8004162:	893b      	ldrh	r3, [r7, #8]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	47a0      	blx	r4
 8004168:	4603      	mov	r3, r0
 800416a:	e00d      	b.n	8004188 <WriteRegWrap+0x5a>
  }
  else   /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	691c      	ldr	r4, [r3, #16]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	7b1b      	ldrb	r3, [r3, #12]
 8004174:	b298      	uxth	r0, r3
 8004176:	7afb      	ldrb	r3, [r7, #11]
 8004178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800417c:	b2db      	uxtb	r3, r3
 800417e:	b299      	uxth	r1, r3
 8004180:	893b      	ldrh	r3, [r7, #8]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	47a0      	blx	r4
 8004186:	4603      	mov	r3, r0
  }
}
 8004188:	4618      	mov	r0, r3
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	bd90      	pop	{r4, r7, pc}

08004190 <lis3mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	461a      	mov	r2, r3
 800419c:	460b      	mov	r3, r1
 800419e:	72fb      	strb	r3, [r7, #11]
 80041a0:	4613      	mov	r3, r2
 80041a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685c      	ldr	r4, [r3, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6898      	ldr	r0, [r3, #8]
 80041ac:	893b      	ldrh	r3, [r7, #8]
 80041ae:	7af9      	ldrb	r1, [r7, #11]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	47a0      	blx	r4
 80041b4:	6178      	str	r0, [r7, #20]
  return ret;
 80041b6:	697b      	ldr	r3, [r7, #20]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd90      	pop	{r4, r7, pc}

080041c0 <lis3mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	461a      	mov	r2, r3
 80041cc:	460b      	mov	r3, r1
 80041ce:	72fb      	strb	r3, [r7, #11]
 80041d0:	4613      	mov	r3, r2
 80041d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681c      	ldr	r4, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6898      	ldr	r0, [r3, #8]
 80041dc:	893b      	ldrh	r3, [r7, #8]
 80041de:	7af9      	ldrb	r1, [r7, #11]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	47a0      	blx	r4
 80041e4:	6178      	str	r0, [r7, #20]
  return ret;
 80041e6:	697b      	ldr	r3, [r7, #20]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}

080041f0 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80041fc:	f107 0210 	add.w	r2, r7, #16
 8004200:	2301      	movs	r3, #1
 8004202:	2120      	movs	r1, #32
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ffc3 	bl	8004190 <lis3mdl_read_reg>
 800420a:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004218:	b2da      	uxtb	r2, r3
 800421a:	7c3b      	ldrb	r3, [r7, #16]
 800421c:	f362 0346 	bfi	r3, r2, #1, #6
 8004220:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004222:	f107 0210 	add.w	r2, r7, #16
 8004226:	2301      	movs	r3, #1
 8004228:	2120      	movs	r1, #32
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff ffc8 	bl	80041c0 <lis3mdl_write_reg>
 8004230:	6178      	str	r0, [r7, #20]
  }
  
  if (ret == 0)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8004238:	f107 020c 	add.w	r2, r7, #12
 800423c:	2301      	movs	r3, #1
 800423e:	2123      	movs	r1, #35	; 0x23
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ffa5 	bl	8004190 <lis3mdl_read_reg>
 8004246:	6178      	str	r0, [r7, #20]
  }
  
  if (ret == 0)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d111      	bne.n	8004272 <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	b2da      	uxtb	r2, r3
 800425a:	7b3b      	ldrb	r3, [r7, #12]
 800425c:	f362 0383 	bfi	r3, r2, #2, #2
 8004260:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 8004262:	f107 020c 	add.w	r2, r7, #12
 8004266:	2301      	movs	r3, #1
 8004268:	2123      	movs	r1, #35	; 0x23
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff ffa8 	bl	80041c0 <lis3mdl_write_reg>
 8004270:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg4, 1);
  }

  return ret;
 8004272:	697b      	ldr	r3, [r7, #20]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <lis3mdl_data_rate_get>:
  * @param  val      Get the values of om in reg CTRL_REG1(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_get(stmdev_ctx_t *ctx, lis3mdl_om_t *val)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  /* z axis, ctrl_reg4 -> omz is aligned with x/y axis ctrl_reg1 -> om*/
  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004286:	f107 0208 	add.w	r2, r7, #8
 800428a:	2301      	movs	r3, #1
 800428c:	2120      	movs	r1, #32
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff ff7e 	bl	8004190 <lis3mdl_read_reg>
 8004294:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.om)
 8004296:	7a3b      	ldrb	r3, [r7, #8]
 8004298:	f3c3 0345 	ubfx	r3, r3, #1, #6
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b3e      	cmp	r3, #62	; 0x3e
 80042a0:	f200 8106 	bhi.w	80044b0 <lis3mdl_data_rate_get+0x234>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <lis3mdl_data_rate_get+0x30>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080043a9 	.word	0x080043a9
 80042b0:	080043b1 	.word	0x080043b1
 80042b4:	080043d1 	.word	0x080043d1
 80042b8:	080044b1 	.word	0x080044b1
 80042bc:	080043d9 	.word	0x080043d9
 80042c0:	080044b1 	.word	0x080044b1
 80042c4:	080043e1 	.word	0x080043e1
 80042c8:	080044b1 	.word	0x080044b1
 80042cc:	080043e9 	.word	0x080043e9
 80042d0:	080044b1 	.word	0x080044b1
 80042d4:	080043f1 	.word	0x080043f1
 80042d8:	080044b1 	.word	0x080044b1
 80042dc:	080043f9 	.word	0x080043f9
 80042e0:	080044b1 	.word	0x080044b1
 80042e4:	08004401 	.word	0x08004401
 80042e8:	080044b1 	.word	0x080044b1
 80042ec:	080044b1 	.word	0x080044b1
 80042f0:	080043b9 	.word	0x080043b9
 80042f4:	08004409 	.word	0x08004409
 80042f8:	080044b1 	.word	0x080044b1
 80042fc:	08004411 	.word	0x08004411
 8004300:	080044b1 	.word	0x080044b1
 8004304:	08004419 	.word	0x08004419
 8004308:	080044b1 	.word	0x080044b1
 800430c:	08004421 	.word	0x08004421
 8004310:	080044b1 	.word	0x080044b1
 8004314:	08004429 	.word	0x08004429
 8004318:	080044b1 	.word	0x080044b1
 800431c:	08004431 	.word	0x08004431
 8004320:	080044b1 	.word	0x080044b1
 8004324:	08004439 	.word	0x08004439
 8004328:	080044b1 	.word	0x080044b1
 800432c:	080044b1 	.word	0x080044b1
 8004330:	080043c1 	.word	0x080043c1
 8004334:	08004441 	.word	0x08004441
 8004338:	080044b1 	.word	0x080044b1
 800433c:	08004449 	.word	0x08004449
 8004340:	080044b1 	.word	0x080044b1
 8004344:	08004451 	.word	0x08004451
 8004348:	080044b1 	.word	0x080044b1
 800434c:	08004459 	.word	0x08004459
 8004350:	080044b1 	.word	0x080044b1
 8004354:	08004461 	.word	0x08004461
 8004358:	080044b1 	.word	0x080044b1
 800435c:	08004469 	.word	0x08004469
 8004360:	080044b1 	.word	0x080044b1
 8004364:	08004471 	.word	0x08004471
 8004368:	080044b1 	.word	0x080044b1
 800436c:	080044b1 	.word	0x080044b1
 8004370:	080043c9 	.word	0x080043c9
 8004374:	08004479 	.word	0x08004479
 8004378:	080044b1 	.word	0x080044b1
 800437c:	08004481 	.word	0x08004481
 8004380:	080044b1 	.word	0x080044b1
 8004384:	08004489 	.word	0x08004489
 8004388:	080044b1 	.word	0x080044b1
 800438c:	08004491 	.word	0x08004491
 8004390:	080044b1 	.word	0x080044b1
 8004394:	08004499 	.word	0x08004499
 8004398:	080044b1 	.word	0x080044b1
 800439c:	080044a1 	.word	0x080044a1
 80043a0:	080044b1 	.word	0x080044b1
 80043a4:	080044a9 	.word	0x080044a9
  {
    case LIS3MDL_LP_Hz625:
      *val = LIS3MDL_LP_Hz625;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
      break;
 80043ae:	e083      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_1kHz:
      *val = LIS3MDL_LP_1kHz;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
      break;
 80043b6:	e07f      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_560Hz:
      *val = LIS3MDL_MP_560Hz;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2211      	movs	r2, #17
 80043bc:	701a      	strb	r2, [r3, #0]
      break;
 80043be:	e07b      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_300Hz:
      *val = LIS3MDL_HP_300Hz;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2221      	movs	r2, #33	; 0x21
 80043c4:	701a      	strb	r2, [r3, #0]
      break;
 80043c6:	e077      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_155Hz:
      *val = LIS3MDL_UHP_155Hz;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2231      	movs	r2, #49	; 0x31
 80043cc:	701a      	strb	r2, [r3, #0]
      break;
 80043ce:	e073      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_1Hz25:
      *val = LIS3MDL_LP_1Hz25;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2202      	movs	r2, #2
 80043d4:	701a      	strb	r2, [r3, #0]
      break;
 80043d6:	e06f      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_2Hz5:
      *val = LIS3MDL_LP_2Hz5;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2204      	movs	r2, #4
 80043dc:	701a      	strb	r2, [r3, #0]
      break;
 80043de:	e06b      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_5Hz:
      *val = LIS3MDL_LP_5Hz;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2206      	movs	r2, #6
 80043e4:	701a      	strb	r2, [r3, #0]
      break;
 80043e6:	e067      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_10Hz:
      *val = LIS3MDL_LP_10Hz;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2208      	movs	r2, #8
 80043ec:	701a      	strb	r2, [r3, #0]
      break;
 80043ee:	e063      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_20Hz:
      *val = LIS3MDL_LP_20Hz;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	220a      	movs	r2, #10
 80043f4:	701a      	strb	r2, [r3, #0]
      break;
 80043f6:	e05f      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_40Hz:
      *val = LIS3MDL_LP_40Hz;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	220c      	movs	r2, #12
 80043fc:	701a      	strb	r2, [r3, #0]
      break;
 80043fe:	e05b      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_80Hz:
      *val = LIS3MDL_LP_80Hz;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	220e      	movs	r2, #14
 8004404:	701a      	strb	r2, [r3, #0]
      break;
 8004406:	e057      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_1Hz25:
      *val = LIS3MDL_MP_1Hz25;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2212      	movs	r2, #18
 800440c:	701a      	strb	r2, [r3, #0]
      break;
 800440e:	e053      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_2Hz5:
      *val = LIS3MDL_MP_2Hz5;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2214      	movs	r2, #20
 8004414:	701a      	strb	r2, [r3, #0]
      break;
 8004416:	e04f      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_5Hz:
      *val = LIS3MDL_MP_5Hz;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2216      	movs	r2, #22
 800441c:	701a      	strb	r2, [r3, #0]
      break;
 800441e:	e04b      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_10Hz:
      *val = LIS3MDL_MP_10Hz;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2218      	movs	r2, #24
 8004424:	701a      	strb	r2, [r3, #0]
      break;
 8004426:	e047      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_20Hz:
      *val = LIS3MDL_MP_20Hz;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	221a      	movs	r2, #26
 800442c:	701a      	strb	r2, [r3, #0]
      break;
 800442e:	e043      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_40Hz:
      *val = LIS3MDL_MP_40Hz;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	221c      	movs	r2, #28
 8004434:	701a      	strb	r2, [r3, #0]
      break;
 8004436:	e03f      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_80Hz:
      *val = LIS3MDL_MP_80Hz;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	221e      	movs	r2, #30
 800443c:	701a      	strb	r2, [r3, #0]
      break;
 800443e:	e03b      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_1Hz25:
      *val = LIS3MDL_HP_1Hz25;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2222      	movs	r2, #34	; 0x22
 8004444:	701a      	strb	r2, [r3, #0]
      break;
 8004446:	e037      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_2Hz5:
      *val = LIS3MDL_HP_2Hz5;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2224      	movs	r2, #36	; 0x24
 800444c:	701a      	strb	r2, [r3, #0]
      break;
 800444e:	e033      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_5Hz:
      *val = LIS3MDL_HP_5Hz;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2226      	movs	r2, #38	; 0x26
 8004454:	701a      	strb	r2, [r3, #0]
      break;
 8004456:	e02f      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_10Hz:
      *val = LIS3MDL_HP_10Hz;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2228      	movs	r2, #40	; 0x28
 800445c:	701a      	strb	r2, [r3, #0]
      break;
 800445e:	e02b      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_20Hz:
      *val = LIS3MDL_HP_20Hz;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	222a      	movs	r2, #42	; 0x2a
 8004464:	701a      	strb	r2, [r3, #0]
      break;
 8004466:	e027      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_40Hz:
      *val = LIS3MDL_HP_40Hz;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	222c      	movs	r2, #44	; 0x2c
 800446c:	701a      	strb	r2, [r3, #0]
      break;
 800446e:	e023      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_80Hz:
      *val = LIS3MDL_HP_80Hz;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	222e      	movs	r2, #46	; 0x2e
 8004474:	701a      	strb	r2, [r3, #0]
      break;
 8004476:	e01f      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_1Hz25:
      *val = LIS3MDL_UHP_1Hz25;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2232      	movs	r2, #50	; 0x32
 800447c:	701a      	strb	r2, [r3, #0]
      break;
 800447e:	e01b      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_2Hz5:
      *val = LIS3MDL_UHP_2Hz5;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2234      	movs	r2, #52	; 0x34
 8004484:	701a      	strb	r2, [r3, #0]
      break;
 8004486:	e017      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_5Hz:
      *val = LIS3MDL_UHP_5Hz;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2236      	movs	r2, #54	; 0x36
 800448c:	701a      	strb	r2, [r3, #0]
      break;
 800448e:	e013      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_10Hz:
      *val = LIS3MDL_UHP_10Hz;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2238      	movs	r2, #56	; 0x38
 8004494:	701a      	strb	r2, [r3, #0]
      break;
 8004496:	e00f      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_20Hz:
      *val = LIS3MDL_UHP_20Hz;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	223a      	movs	r2, #58	; 0x3a
 800449c:	701a      	strb	r2, [r3, #0]
      break;
 800449e:	e00b      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_40Hz:
      *val = LIS3MDL_UHP_40Hz;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	223c      	movs	r2, #60	; 0x3c
 80044a4:	701a      	strb	r2, [r3, #0]
      break;
 80044a6:	e007      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_80Hz:
      *val = LIS3MDL_UHP_80Hz;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	223e      	movs	r2, #62	; 0x3e
 80044ac:	701a      	strb	r2, [r3, #0]
      break;
 80044ae:	e003      	b.n	80044b8 <lis3mdl_data_rate_get+0x23c>
    default:
      *val = LIS3MDL_UHP_80Hz;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	223e      	movs	r2, #62	; 0x3e
 80044b4:	701a      	strb	r2, [r3, #0]
      break;
 80044b6:	bf00      	nop
  }

  return ret;
 80044b8:	68fb      	ldr	r3, [r7, #12]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop

080044c4 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80044d0:	f107 0208 	add.w	r2, r7, #8
 80044d4:	2301      	movs	r3, #1
 80044d6:	2121      	movs	r1, #33	; 0x21
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fe59 	bl	8004190 <lis3mdl_read_reg>
 80044de:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10f      	bne.n	8004506 <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	7a3b      	ldrb	r3, [r7, #8]
 80044f0:	f362 1346 	bfi	r3, r2, #5, #2
 80044f4:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80044f6:	f107 0208 	add.w	r2, r7, #8
 80044fa:	2301      	movs	r3, #1
 80044fc:	2121      	movs	r1, #33	; 0x21
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fe5e 	bl	80041c0 <lis3mdl_write_reg>
 8004504:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004506:	68fb      	ldr	r3, [r7, #12]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <lis3mdl_full_scale_get>:
  * @param  val      get the values of fs in reg CTRL_REG2(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_get(stmdev_ctx_t *ctx, lis3mdl_fs_t *val)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800451a:	f107 0208 	add.w	r2, r7, #8
 800451e:	2301      	movs	r3, #1
 8004520:	2121      	movs	r1, #33	; 0x21
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fe34 	bl	8004190 <lis3mdl_read_reg>
 8004528:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg2.fs)
 800452a:	7a3b      	ldrb	r3, [r7, #8]
 800452c:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b03      	cmp	r3, #3
 8004534:	d81a      	bhi.n	800456c <lis3mdl_full_scale_get+0x5c>
 8004536:	a201      	add	r2, pc, #4	; (adr r2, 800453c <lis3mdl_full_scale_get+0x2c>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	0800454d 	.word	0x0800454d
 8004540:	08004555 	.word	0x08004555
 8004544:	0800455d 	.word	0x0800455d
 8004548:	08004565 	.word	0x08004565
  {
    case LIS3MDL_4_GAUSS:
      *val = LIS3MDL_4_GAUSS;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
      break;
 8004552:	e00f      	b.n	8004574 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_8_GAUSS:
      *val = LIS3MDL_8_GAUSS;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2201      	movs	r2, #1
 8004558:	701a      	strb	r2, [r3, #0]
      break;
 800455a:	e00b      	b.n	8004574 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_12_GAUSS:
      *val = LIS3MDL_12_GAUSS;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2202      	movs	r2, #2
 8004560:	701a      	strb	r2, [r3, #0]
      break;
 8004562:	e007      	b.n	8004574 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_16_GAUSS:
      *val = LIS3MDL_16_GAUSS;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2203      	movs	r2, #3
 8004568:	701a      	strb	r2, [r3, #0]
      break;
 800456a:	e003      	b.n	8004574 <lis3mdl_full_scale_get+0x64>
    default:
      *val = LIS3MDL_4_GAUSS;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2200      	movs	r2, #0
 8004570:	701a      	strb	r2, [r3, #0]
      break;
 8004572:	bf00      	nop
  }

  return ret;
 8004574:	68fb      	ldr	r3, [r7, #12]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop

08004580 <lis3mdl_operating_mode_set>:
  * @param  val      change the values of md in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx, lis3mdl_md_t val)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 800458c:	f107 0208 	add.w	r2, r7, #8
 8004590:	2301      	movs	r3, #1
 8004592:	2122      	movs	r1, #34	; 0x22
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fdfb 	bl	8004190 <lis3mdl_read_reg>
 800459a:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10f      	bne.n	80045c2 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	7a3b      	ldrb	r3, [r7, #8]
 80045ac:	f362 0301 	bfi	r3, r2, #0, #2
 80045b0:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 80045b2:	f107 0208 	add.w	r2, r7, #8
 80045b6:	2301      	movs	r3, #1
 80045b8:	2122      	movs	r1, #34	; 0x22
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff fe00 	bl	80041c0 <lis3mdl_write_reg>
 80045c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 80045d8:	f107 0208 	add.w	r2, r7, #8
 80045dc:	2301      	movs	r3, #1
 80045de:	2124      	movs	r1, #36	; 0x24
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff fdd5 	bl	8004190 <lis3mdl_read_reg>
 80045e6:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10f      	bne.n	800460e <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	7a3b      	ldrb	r3, [r7, #8]
 80045f8:	f362 1386 	bfi	r3, r2, #6, #1
 80045fc:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 80045fe:	f107 0208 	add.w	r2, r7, #8
 8004602:	2301      	movs	r3, #1
 8004604:	2124      	movs	r1, #36	; 0x24
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fdda 	bl	80041c0 <lis3mdl_write_reg>
 800460c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800460e:	68fb      	ldr	r3, [r7, #12]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t*) buff, 6);
 8004622:	f107 020c 	add.w	r2, r7, #12
 8004626:	2306      	movs	r3, #6
 8004628:	2128      	movs	r1, #40	; 0x28
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff fdb0 	bl	8004190 <lis3mdl_read_reg>
 8004630:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004632:	7b7b      	ldrb	r3, [r7, #13]
 8004634:	b21a      	sxth	r2, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004640:	b29b      	uxth	r3, r3
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	b29a      	uxth	r2, r3
 8004646:	7b3b      	ldrb	r3, [r7, #12]
 8004648:	b29b      	uxth	r3, r3
 800464a:	4413      	add	r3, r2
 800464c:	b29b      	uxth	r3, r3
 800464e:	b21a      	sxth	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004654:	7bfa      	ldrb	r2, [r7, #15]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	3302      	adds	r3, #2
 800465a:	b212      	sxth	r2, r2
 800465c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	3302      	adds	r3, #2
 8004662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004666:	b29b      	uxth	r3, r3
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	b29a      	uxth	r2, r3
 800466c:	7bbb      	ldrb	r3, [r7, #14]
 800466e:	b29b      	uxth	r3, r3
 8004670:	4413      	add	r3, r2
 8004672:	b29a      	uxth	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	3302      	adds	r3, #2
 8004678:	b212      	sxth	r2, r2
 800467a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800467c:	7c7a      	ldrb	r2, [r7, #17]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	3304      	adds	r3, #4
 8004682:	b212      	sxth	r2, r2
 8004684:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	3304      	adds	r3, #4
 800468a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800468e:	b29b      	uxth	r3, r3
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	b29a      	uxth	r2, r3
 8004694:	7c3b      	ldrb	r3, [r7, #16]
 8004696:	b29b      	uxth	r3, r3
 8004698:	4413      	add	r3, r2
 800469a:	b29a      	uxth	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	3304      	adds	r3, #4
 80046a0:	b212      	sxth	r2, r2
 80046a2:	801a      	strh	r2, [r3, #0]

  return ret;
 80046a4:	697b      	ldr	r3, [r7, #20]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  int32_t ret;  
  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t*) buff, 1);
 80046b8:	2301      	movs	r3, #1
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	210f      	movs	r1, #15
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff fd66 	bl	8004190 <lis3mdl_read_reg>
 80046c4:	60f8      	str	r0, [r7, #12]
  return ret;
 80046c6:	68fb      	ldr	r3, [r7, #12]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f87b 	bl	80047d8 <LPS22HB_Init>
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	4603      	mov	r3, r0
 80046f2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80046f8:	f7fd ffcc 	bl	8002694 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	210f      	movs	r1, #15
 8004702:	4618      	mov	r0, r3
 8004704:	f7fd ffea 	bl	80026dc <SENSOR_IO_Read>
 8004708:	4603      	mov	r3, r0
 800470a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8004726:	2300      	movs	r3, #0
 8004728:	74fb      	strb	r3, [r7, #19]
 800472a:	e013      	b.n	8004754 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	3328      	adds	r3, #40	; 0x28
 8004734:	b2db      	uxtb	r3, r3
 8004736:	7cfc      	ldrb	r4, [r7, #19]
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f7fd ffce 	bl	80026dc <SENSOR_IO_Read>
 8004740:	4603      	mov	r3, r0
 8004742:	461a      	mov	r2, r3
 8004744:	f107 0318 	add.w	r3, r7, #24
 8004748:	4423      	add	r3, r4
 800474a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800474e:	7cfb      	ldrb	r3, [r7, #19]
 8004750:	3301      	adds	r3, #1
 8004752:	74fb      	strb	r3, [r7, #19]
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d9e8      	bls.n	800472c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800475a:	2300      	movs	r3, #0
 800475c:	74fb      	strb	r3, [r7, #19]
 800475e:	e010      	b.n	8004782 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	f107 0218 	add.w	r2, r7, #24
 8004766:	4413      	add	r3, r2
 8004768:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800476c:	461a      	mov	r2, r3
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	3301      	adds	r3, #1
 8004780:	74fb      	strb	r3, [r7, #19]
 8004782:	7cfb      	ldrb	r3, [r7, #19]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d9eb      	bls.n	8004760 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004798:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2264      	movs	r2, #100	; 0x64
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da01      	bge.n	80047ae <LPS22HB_P_ReadPressure+0x96>
 80047aa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80047ae:	131b      	asrs	r3, r3, #12
 80047b0:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047bc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80047d4 <LPS22HB_P_ReadPressure+0xbc>
 80047c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047c4:	eef0 7a66 	vmov.f32	s15, s13
}
 80047c8:	eeb0 0a67 	vmov.f32	s0, s15
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd90      	pop	{r4, r7, pc}
 80047d2:	bf00      	nop
 80047d4:	42c80000 	.word	0x42c80000

080047d8 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	211a      	movs	r1, #26
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fd ff77 	bl	80026dc <SENSOR_IO_Read>
 80047ee:	4603      	mov	r3, r0
 80047f0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	7bfa      	ldrb	r2, [r7, #15]
 8004808:	211a      	movs	r1, #26
 800480a:	4618      	mov	r0, r3
 800480c:	f7fd ff4c 	bl	80026a8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8004810:	88fb      	ldrh	r3, [r7, #6]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2110      	movs	r1, #16
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd ff60 	bl	80026dc <SENSOR_IO_Read>
 800481c:	4603      	mov	r3, r0
 800481e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800482e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	f023 0302 	bic.w	r3, r3, #2
 8004836:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	f043 0302 	orr.w	r3, r3, #2
 800483e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	7bfa      	ldrb	r2, [r7, #15]
 8004846:	2110      	movs	r1, #16
 8004848:	4618      	mov	r0, r3
 800484a:	f7fd ff2d 	bl	80026a8 <SENSOR_IO_Write>
}  
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d103      	bne.n	8004874 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 800486c:	f04f 33ff 	mov.w	r3, #4294967295
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e04d      	b.n	8004910 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	7b1a      	ldrb	r2, [r3, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a1b      	ldr	r2, [pc, #108]	; (800491c <LSM6DSL_RegisterBusIO+0xc4>)
 80048b0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a1a      	ldr	r2, [pc, #104]	; (8004920 <LSM6DSL_RegisterBusIO+0xc8>)
 80048b6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 80048c6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e020      	b.n	8004910 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4798      	blx	r3
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 80048da:	f04f 33ff 	mov.w	r3, #4294967295
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e016      	b.n	8004910 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d112      	bne.n	8004910 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10d      	bne.n	8004910 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80048f4:	230c      	movs	r3, #12
 80048f6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80048f8:	7afb      	ldrb	r3, [r7, #11]
 80048fa:	461a      	mov	r2, r3
 80048fc:	2112      	movs	r1, #18
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fd2d 	bl	800535e <LSM6DSL_Write_Reg>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295
 800490e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	080057cd 	.word	0x080057cd
 8004920:	08005803 	.word	0x08005803

08004924 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	331c      	adds	r3, #28
 8004930:	2101      	movs	r1, #1
 8004932:	4618      	mov	r0, r3
 8004934:	f001 f9e5 	bl	8005d02 <lsm6dsl_auto_increment_set>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800493e:	f04f 33ff 	mov.w	r3, #4294967295
 8004942:	e054      	b.n	80049ee <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	331c      	adds	r3, #28
 8004948:	2101      	movs	r1, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f001 f980 	bl	8005c50 <lsm6dsl_block_data_update_set>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8004956:	f04f 33ff 	mov.w	r3, #4294967295
 800495a:	e048      	b.n	80049ee <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	331c      	adds	r3, #28
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f001 f9f3 	bl	8005d4e <lsm6dsl_fifo_mode_set>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800496e:	f04f 33ff 	mov.w	r3, #4294967295
 8004972:	e03c      	b.n	80049ee <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2204      	movs	r2, #4
 8004978:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	331c      	adds	r3, #28
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f000 ffe6 	bl	8005954 <lsm6dsl_xl_data_rate_set>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800498e:	f04f 33ff 	mov.w	r3, #4294967295
 8004992:	e02c      	b.n	80049ee <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	331c      	adds	r3, #28
 8004998:	2100      	movs	r1, #0
 800499a:	4618      	mov	r0, r3
 800499c:	f000 ff7c 	bl	8005898 <lsm6dsl_xl_full_scale_set>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	e020      	b.n	80049ee <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2204      	movs	r2, #4
 80049b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	331c      	adds	r3, #28
 80049b8:	2100      	movs	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f001 f8c0 	bl	8005b40 <lsm6dsl_gy_data_rate_set>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ca:	e010      	b.n	80049ee <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	331c      	adds	r3, #28
 80049d0:	2106      	movs	r1, #6
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 f84c 	bl	8005a70 <lsm6dsl_gy_full_scale_set>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80049de:	f04f 33ff 	mov.w	r3, #4294967295
 80049e2:	e004      	b.n	80049ee <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f888 	bl	8004b14 <LSM6DSL_ACC_Disable>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8004a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0e:	e015      	b.n	8004a3c <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fa9a 	bl	8004f4a <LSM6DSL_GYRO_Disable>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a20:	e00c      	b.n	8004a3c <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	331c      	adds	r3, #28
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 f943 	bl	8005ce0 <lsm6dsl_device_id_get>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004a60:	f04f 33ff 	mov.w	r3, #4294967295
 8004a64:	e000      	b.n	8004a68 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a98:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	4a07      	ldr	r2, [pc, #28]	; (8004ac8 <LSM6DSL_GetCapabilities+0x58>)
 8004aaa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	4a06      	ldr	r2, [pc, #24]	; (8004ac8 <LSM6DSL_GetCapabilities+0x58>)
 8004ab0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	45d02000 	.word	0x45d02000

08004acc <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e014      	b.n	8004b0c <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f103 021c 	add.w	r2, r3, #28
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f000 ff2f 	bl	8005954 <lsm6dsl_xl_data_rate_set>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004afc:	f04f 33ff 	mov.w	r3, #4294967295
 8004b00:	e004      	b.n	8004b0c <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	e01f      	b.n	8004b6a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f103 021c 	add.w	r2, r3, #28
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	332b      	adds	r3, #43	; 0x2b
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f000 ff32 	bl	80059a0 <lsm6dsl_xl_data_rate_get>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004b42:	f04f 33ff 	mov.w	r3, #4294967295
 8004b46:	e010      	b.n	8004b6a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	331c      	adds	r3, #28
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 ff00 	bl	8005954 <lsm6dsl_xl_data_rate_set>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5e:	e004      	b.n	8004b6a <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	331c      	adds	r3, #28
 8004b86:	f107 020b 	add.w	r2, r7, #11
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fea9 	bl	80058e4 <lsm6dsl_xl_full_scale_get>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004b98:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9c:	e023      	b.n	8004be6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004b9e:	7afb      	ldrb	r3, [r7, #11]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d81b      	bhi.n	8004bdc <LSM6DSL_ACC_GetSensitivity+0x68>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	08004bcd 	.word	0x08004bcd
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	4a0c      	ldr	r2, [pc, #48]	; (8004bf0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004bc0:	601a      	str	r2, [r3, #0]
      break;
 8004bc2:	e00f      	b.n	8004be4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	4a0b      	ldr	r2, [pc, #44]	; (8004bf4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004bc8:	601a      	str	r2, [r3, #0]
      break;
 8004bca:	e00b      	b.n	8004be4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4a0a      	ldr	r2, [pc, #40]	; (8004bf8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004bd0:	601a      	str	r2, [r3, #0]
      break;
 8004bd2:	e007      	b.n	8004be4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004bd8:	601a      	str	r2, [r3, #0]
      break;
 8004bda:	e003      	b.n	8004be4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004be0:	60fb      	str	r3, [r7, #12]
      break;
 8004be2:	bf00      	nop
  }

  return ret;
 8004be4:	68fb      	ldr	r3, [r7, #12]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	3d79db23 	.word	0x3d79db23
 8004bf4:	3df9db23 	.word	0x3df9db23
 8004bf8:	3e79db23 	.word	0x3e79db23
 8004bfc:	3ef9db23 	.word	0x3ef9db23

08004c00 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	331c      	adds	r3, #28
 8004c12:	f107 020b 	add.w	r2, r7, #11
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fec1 	bl	80059a0 <lsm6dsl_xl_data_rate_get>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295
 8004c28:	e054      	b.n	8004cd4 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004c2a:	7afb      	ldrb	r3, [r7, #11]
 8004c2c:	2b0b      	cmp	r3, #11
 8004c2e:	d84c      	bhi.n	8004cca <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004c30:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c69 	.word	0x08004c69
 8004c3c:	08004c7b 	.word	0x08004c7b
 8004c40:	08004c83 	.word	0x08004c83
 8004c44:	08004c8b 	.word	0x08004c8b
 8004c48:	08004c93 	.word	0x08004c93
 8004c4c:	08004c9b 	.word	0x08004c9b
 8004c50:	08004ca3 	.word	0x08004ca3
 8004c54:	08004cab 	.word	0x08004cab
 8004c58:	08004cb3 	.word	0x08004cb3
 8004c5c:	08004cbb 	.word	0x08004cbb
 8004c60:	08004cc3 	.word	0x08004cc3
 8004c64:	08004c73 	.word	0x08004c73
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
      break;
 8004c70:	e02f      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004c76:	601a      	str	r2, [r3, #0]
      break;
 8004c78:	e02b      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004c7e:	601a      	str	r2, [r3, #0]
      break;
 8004c80:	e027      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004c86:	601a      	str	r2, [r3, #0]
      break;
 8004c88:	e023      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	4a16      	ldr	r2, [pc, #88]	; (8004ce8 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8004c8e:	601a      	str	r2, [r3, #0]
      break;
 8004c90:	e01f      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	4a15      	ldr	r2, [pc, #84]	; (8004cec <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004c96:	601a      	str	r2, [r3, #0]
      break;
 8004c98:	e01b      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	4a14      	ldr	r2, [pc, #80]	; (8004cf0 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004c9e:	601a      	str	r2, [r3, #0]
      break;
 8004ca0:	e017      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004ca6:	601a      	str	r2, [r3, #0]
      break;
 8004ca8:	e013      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004cae:	601a      	str	r2, [r3, #0]
      break;
 8004cb0:	e00f      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	4a11      	ldr	r2, [pc, #68]	; (8004cfc <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004cb6:	601a      	str	r2, [r3, #0]
      break;
 8004cb8:	e00b      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	4a10      	ldr	r2, [pc, #64]	; (8004d00 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8004cbe:	601a      	str	r2, [r3, #0]
      break;
 8004cc0:	e007      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004cc6:	601a      	str	r2, [r3, #0]
      break;
 8004cc8:	e003      	b.n	8004cd2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	60fb      	str	r3, [r7, #12]
      break;
 8004cd0:	bf00      	nop
  }

  return ret;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	3fcccccd 	.word	0x3fcccccd
 8004ce0:	41480000 	.word	0x41480000
 8004ce4:	41d00000 	.word	0x41d00000
 8004ce8:	42500000 	.word	0x42500000
 8004cec:	42d00000 	.word	0x42d00000
 8004cf0:	43500000 	.word	0x43500000
 8004cf4:	43d00000 	.word	0x43d00000
 8004cf8:	44504000 	.word	0x44504000
 8004cfc:	44cf8000 	.word	0x44cf8000
 8004d00:	45502000 	.word	0x45502000
 8004d04:	45d02000 	.word	0x45d02000

08004d08 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d106      	bne.n	8004d2c <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004d1e:	ed97 0a00 	vldr	s0, [r7]
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fb36 	bl	8005394 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	e005      	b.n	8004d38 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004d2c:	ed97 0a00 	vldr	s0, [r7]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fbbb 	bl	80054ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8004d36:	4603      	mov	r3, r0
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	331c      	adds	r3, #28
 8004d52:	f107 020b 	add.w	r2, r7, #11
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fdc3 	bl	80058e4 <lsm6dsl_xl_full_scale_get>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004d64:	f04f 33ff 	mov.w	r3, #4294967295
 8004d68:	e023      	b.n	8004db2 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004d6a:	7afb      	ldrb	r3, [r7, #11]
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d81b      	bhi.n	8004da8 <LSM6DSL_ACC_GetFullScale+0x68>
 8004d70:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <LSM6DSL_ACC_GetFullScale+0x38>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004d89 	.word	0x08004d89
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004d91 	.word	0x08004d91
 8004d84:	08004d99 	.word	0x08004d99
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	601a      	str	r2, [r3, #0]
      break;
 8004d8e:	e00f      	b.n	8004db0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2204      	movs	r2, #4
 8004d94:	601a      	str	r2, [r3, #0]
      break;
 8004d96:	e00b      	b.n	8004db0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2208      	movs	r2, #8
 8004d9c:	601a      	str	r2, [r3, #0]
      break;
 8004d9e:	e007      	b.n	8004db0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2210      	movs	r2, #16
 8004da4:	601a      	str	r2, [r3, #0]
      break;
 8004da6:	e003      	b.n	8004db0 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dac:	60fb      	str	r3, [r7, #12]
      break;
 8004dae:	bf00      	nop
  }

  return ret;
 8004db0:	68fb      	ldr	r3, [r7, #12]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop

08004dbc <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	dd0b      	ble.n	8004de4 <LSM6DSL_ACC_SetFullScale+0x28>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	dd06      	ble.n	8004de0 <LSM6DSL_ACC_SetFullScale+0x24>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	dc01      	bgt.n	8004ddc <LSM6DSL_ACC_SetFullScale+0x20>
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e004      	b.n	8004de6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e002      	b.n	8004de6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e000      	b.n	8004de6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004de4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004de6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	331c      	adds	r3, #28
 8004dec:	7bfa      	ldrb	r2, [r7, #15]
 8004dee:	4611      	mov	r1, r2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fd51 	bl	8005898 <lsm6dsl_xl_full_scale_set>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004e00:	e000      	b.n	8004e04 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	331c      	adds	r3, #28
 8004e1a:	f107 0208 	add.w	r2, r7, #8
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 ff4c 	bl	8005cbe <lsm6dsl_acceleration_raw_get>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e30:	e00c      	b.n	8004e4c <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004e32:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004e3a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004e42:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	331c      	adds	r3, #28
 8004e68:	f107 0210 	add.w	r2, r7, #16
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 ff25 	bl	8005cbe <lsm6dsl_acceleration_raw_get>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7e:	e03c      	b.n	8004efa <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004e80:	f107 030c 	add.w	r3, r7, #12
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fe74 	bl	8004b74 <LSM6DSL_ACC_GetSensitivity>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004e92:	f04f 33ff 	mov.w	r3, #4294967295
 8004e96:	e030      	b.n	8004efa <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004e98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e9c:	ee07 3a90 	vmov	s15, r3
 8004ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ea4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eb0:	ee17 2a90 	vmov	r2, s15
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004eb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ed0:	ee17 2a90 	vmov	r2, s15
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004ed8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ef0:	ee17 2a90 	vmov	r2, s15
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e014      	b.n	8004f42 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f103 021c 	add.w	r2, r3, #28
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f000 fe0a 	bl	8005b40 <lsm6dsl_gy_data_rate_set>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	e004      	b.n	8004f42 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e01f      	b.n	8004fa0 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f103 021c 	add.w	r2, r3, #28
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	332c      	adds	r3, #44	; 0x2c
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f000 fe0d 	bl	8005b8c <lsm6dsl_gy_data_rate_get>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7c:	e010      	b.n	8004fa0 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	331c      	adds	r3, #28
 8004f82:	2100      	movs	r1, #0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fddb 	bl	8005b40 <lsm6dsl_gy_data_rate_set>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
 8004f94:	e004      	b.n	8004fa0 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	331c      	adds	r3, #28
 8004fba:	f107 020b 	add.w	r2, r7, #11
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fd7b 	bl	8005abc <lsm6dsl_gy_full_scale_get>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd0:	e02d      	b.n	800502e <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004fd2:	7afb      	ldrb	r3, [r7, #11]
 8004fd4:	2b06      	cmp	r3, #6
 8004fd6:	d825      	bhi.n	8005024 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	08004ffd 	.word	0x08004ffd
 8004fe8:	0800500d 	.word	0x0800500d
 8004fec:	08005025 	.word	0x08005025
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	08005025 	.word	0x08005025
 8004ff8:	0800501d 	.word	0x0800501d
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	4a0e      	ldr	r2, [pc, #56]	; (8005038 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8005000:	601a      	str	r2, [r3, #0]
      break;
 8005002:	e013      	b.n	800502c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	4a0d      	ldr	r2, [pc, #52]	; (800503c <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8005008:	601a      	str	r2, [r3, #0]
      break;
 800500a:	e00f      	b.n	800502c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	4a0c      	ldr	r2, [pc, #48]	; (8005040 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8005010:	601a      	str	r2, [r3, #0]
      break;
 8005012:	e00b      	b.n	800502c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	4a0b      	ldr	r2, [pc, #44]	; (8005044 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8005018:	601a      	str	r2, [r3, #0]
      break;
 800501a:	e007      	b.n	800502c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8005020:	601a      	str	r2, [r3, #0]
      break;
 8005022:	e003      	b.n	800502c <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8005024:	f04f 33ff 	mov.w	r3, #4294967295
 8005028:	60fb      	str	r3, [r7, #12]
      break;
 800502a:	bf00      	nop
  }

  return ret;
 800502c:	68fb      	ldr	r3, [r7, #12]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	408c0000 	.word	0x408c0000
 800503c:	410c0000 	.word	0x410c0000
 8005040:	418c0000 	.word	0x418c0000
 8005044:	420c0000 	.word	0x420c0000
 8005048:	428c0000 	.word	0x428c0000

0800504c <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	331c      	adds	r3, #28
 800505e:	f107 020b 	add.w	r2, r7, #11
 8005062:	4611      	mov	r1, r2
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fd91 	bl	8005b8c <lsm6dsl_gy_data_rate_get>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8005070:	f04f 33ff 	mov.w	r3, #4294967295
 8005074:	e04e      	b.n	8005114 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8005076:	7afb      	ldrb	r3, [r7, #11]
 8005078:	2b0a      	cmp	r3, #10
 800507a:	d846      	bhi.n	800510a <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	080050b1 	.word	0x080050b1
 8005088:	080050bb 	.word	0x080050bb
 800508c:	080050c3 	.word	0x080050c3
 8005090:	080050cb 	.word	0x080050cb
 8005094:	080050d3 	.word	0x080050d3
 8005098:	080050db 	.word	0x080050db
 800509c:	080050e3 	.word	0x080050e3
 80050a0:	080050eb 	.word	0x080050eb
 80050a4:	080050f3 	.word	0x080050f3
 80050a8:	080050fb 	.word	0x080050fb
 80050ac:	08005103 	.word	0x08005103
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
      break;
 80050b8:	e02b      	b.n	8005112 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	4a17      	ldr	r2, [pc, #92]	; (800511c <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 80050be:	601a      	str	r2, [r3, #0]
      break;
 80050c0:	e027      	b.n	8005112 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	4a16      	ldr	r2, [pc, #88]	; (8005120 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 80050c6:	601a      	str	r2, [r3, #0]
      break;
 80050c8:	e023      	b.n	8005112 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	4a15      	ldr	r2, [pc, #84]	; (8005124 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 80050ce:	601a      	str	r2, [r3, #0]
      break;
 80050d0:	e01f      	b.n	8005112 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	4a14      	ldr	r2, [pc, #80]	; (8005128 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80050d6:	601a      	str	r2, [r3, #0]
      break;
 80050d8:	e01b      	b.n	8005112 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	4a13      	ldr	r2, [pc, #76]	; (800512c <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 80050de:	601a      	str	r2, [r3, #0]
      break;
 80050e0:	e017      	b.n	8005112 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	4a12      	ldr	r2, [pc, #72]	; (8005130 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80050e6:	601a      	str	r2, [r3, #0]
      break;
 80050e8:	e013      	b.n	8005112 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	4a11      	ldr	r2, [pc, #68]	; (8005134 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 80050ee:	601a      	str	r2, [r3, #0]
      break;
 80050f0:	e00f      	b.n	8005112 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	4a10      	ldr	r2, [pc, #64]	; (8005138 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 80050f6:	601a      	str	r2, [r3, #0]
      break;
 80050f8:	e00b      	b.n	8005112 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	4a0f      	ldr	r2, [pc, #60]	; (800513c <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80050fe:	601a      	str	r2, [r3, #0]
      break;
 8005100:	e007      	b.n	8005112 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	4a0e      	ldr	r2, [pc, #56]	; (8005140 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8005106:	601a      	str	r2, [r3, #0]
      break;
 8005108:	e003      	b.n	8005112 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800510a:	f04f 33ff 	mov.w	r3, #4294967295
 800510e:	60fb      	str	r3, [r7, #12]
      break;
 8005110:	bf00      	nop
  }

  return ret;
 8005112:	68fb      	ldr	r3, [r7, #12]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	41480000 	.word	0x41480000
 8005120:	41d00000 	.word	0x41d00000
 8005124:	42500000 	.word	0x42500000
 8005128:	42d00000 	.word	0x42d00000
 800512c:	43500000 	.word	0x43500000
 8005130:	43d00000 	.word	0x43d00000
 8005134:	44504000 	.word	0x44504000
 8005138:	44cf8000 	.word	0x44cf8000
 800513c:	45502000 	.word	0x45502000
 8005140:	45d02000 	.word	0x45d02000

08005144 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005156:	2b01      	cmp	r3, #1
 8005158:	d106      	bne.n	8005168 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800515a:	ed97 0a00 	vldr	s0, [r7]
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fa26 	bl	80055b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8005164:	4603      	mov	r3, r0
 8005166:	e005      	b.n	8005174 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005168:	ed97 0a00 	vldr	s0, [r7]
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 faab 	bl	80056c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8005172:	4603      	mov	r3, r0
  }
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	331c      	adds	r3, #28
 800518e:	f107 020b 	add.w	r2, r7, #11
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fc91 	bl	8005abc <lsm6dsl_gy_full_scale_get>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
 80051a4:	e030      	b.n	8005208 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80051a6:	7afb      	ldrb	r3, [r7, #11]
 80051a8:	2b06      	cmp	r3, #6
 80051aa:	d828      	bhi.n	80051fe <LSM6DSL_GYRO_GetFullScale+0x82>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <LSM6DSL_GYRO_GetFullScale+0x38>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051d1 	.word	0x080051d1
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051ff 	.word	0x080051ff
 80051c4:	080051eb 	.word	0x080051eb
 80051c8:	080051ff 	.word	0x080051ff
 80051cc:	080051f5 	.word	0x080051f5
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	227d      	movs	r2, #125	; 0x7d
 80051d4:	601a      	str	r2, [r3, #0]
      break;
 80051d6:	e016      	b.n	8005206 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	22fa      	movs	r2, #250	; 0xfa
 80051dc:	601a      	str	r2, [r3, #0]
      break;
 80051de:	e012      	b.n	8005206 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80051e6:	601a      	str	r2, [r3, #0]
      break;
 80051e8:	e00d      	b.n	8005206 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051f0:	601a      	str	r2, [r3, #0]
      break;
 80051f2:	e008      	b.n	8005206 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80051fa:	601a      	str	r2, [r3, #0]
      break;
 80051fc:	e003      	b.n	8005206 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005202:	60fb      	str	r3, [r7, #12]
      break;
 8005204:	bf00      	nop
  }

  return ret;
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b7d      	cmp	r3, #125	; 0x7d
 800521e:	dd12      	ble.n	8005246 <LSM6DSL_GYRO_SetFullScale+0x36>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2bfa      	cmp	r3, #250	; 0xfa
 8005224:	dd0d      	ble.n	8005242 <LSM6DSL_GYRO_SetFullScale+0x32>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800522c:	dd07      	ble.n	800523e <LSM6DSL_GYRO_SetFullScale+0x2e>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005234:	dc01      	bgt.n	800523a <LSM6DSL_GYRO_SetFullScale+0x2a>
 8005236:	2304      	movs	r3, #4
 8005238:	e006      	b.n	8005248 <LSM6DSL_GYRO_SetFullScale+0x38>
 800523a:	2306      	movs	r3, #6
 800523c:	e004      	b.n	8005248 <LSM6DSL_GYRO_SetFullScale+0x38>
 800523e:	2302      	movs	r3, #2
 8005240:	e002      	b.n	8005248 <LSM6DSL_GYRO_SetFullScale+0x38>
 8005242:	2300      	movs	r3, #0
 8005244:	e000      	b.n	8005248 <LSM6DSL_GYRO_SetFullScale+0x38>
 8005246:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8005248:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	331c      	adds	r3, #28
 800524e:	7bfa      	ldrb	r2, [r7, #15]
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fc0c 	bl	8005a70 <lsm6dsl_gy_full_scale_set>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 800525e:	f04f 33ff 	mov.w	r3, #4294967295
 8005262:	e000      	b.n	8005266 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	331c      	adds	r3, #28
 800527c:	f107 0208 	add.w	r2, r7, #8
 8005280:	4611      	mov	r1, r2
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fd0a 	bl	8005c9c <lsm6dsl_angular_rate_raw_get>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295
 8005292:	e00c      	b.n	80052ae <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005294:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800529c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80052a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b086      	sub	sp, #24
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	331c      	adds	r3, #28
 80052c4:	f107 0210 	add.w	r2, r7, #16
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fce6 	bl	8005c9c <lsm6dsl_angular_rate_raw_get>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80052d6:	f04f 33ff 	mov.w	r3, #4294967295
 80052da:	e03c      	b.n	8005356 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80052dc:	f107 030c 	add.w	r3, r7, #12
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fe60 	bl	8004fa8 <LSM6DSL_GYRO_GetSensitivity>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295
 80052f2:	e030      	b.n	8005356 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80052f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80052f8:	ee07 3a90 	vmov	s15, r3
 80052fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005300:	edd7 7a03 	vldr	s15, [r7, #12]
 8005304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800530c:	ee17 2a90 	vmov	r2, s15
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005314:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005320:	edd7 7a03 	vldr	s15, [r7, #12]
 8005324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800532c:	ee17 2a90 	vmov	r2, s15
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005334:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005340:	edd7 7a03 	vldr	s15, [r7, #12]
 8005344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800534c:	ee17 2a90 	vmov	r2, s15
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
 800536a:	4613      	mov	r3, r2
 800536c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f103 001c 	add.w	r0, r3, #28
 8005374:	1cba      	adds	r2, r7, #2
 8005376:	78f9      	ldrb	r1, [r7, #3]
 8005378:	2301      	movs	r3, #1
 800537a:	f000 fa75 	bl	8005868 <lsm6dsl_write_reg>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8005384:	f04f 33ff 	mov.w	r3, #4294967295
 8005388:	e000      	b.n	800538c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80053a0:	edd7 7a00 	vldr	s15, [r7]
 80053a4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80053a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b0:	d801      	bhi.n	80053b6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e058      	b.n	8005468 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80053b6:	edd7 7a00 	vldr	s15, [r7]
 80053ba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80053be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c6:	d801      	bhi.n	80053cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e04d      	b.n	8005468 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80053cc:	edd7 7a00 	vldr	s15, [r7]
 80053d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005490 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80053d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053dc:	d801      	bhi.n	80053e2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80053de:	2303      	movs	r3, #3
 80053e0:	e042      	b.n	8005468 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80053e2:	edd7 7a00 	vldr	s15, [r7]
 80053e6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005494 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80053ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f2:	d801      	bhi.n	80053f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80053f4:	2304      	movs	r3, #4
 80053f6:	e037      	b.n	8005468 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80053f8:	edd7 7a00 	vldr	s15, [r7]
 80053fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005498 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005408:	d801      	bhi.n	800540e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800540a:	2305      	movs	r3, #5
 800540c:	e02c      	b.n	8005468 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800540e:	edd7 7a00 	vldr	s15, [r7]
 8005412:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800549c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8005416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541e:	d801      	bhi.n	8005424 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005420:	2306      	movs	r3, #6
 8005422:	e021      	b.n	8005468 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005424:	edd7 7a00 	vldr	s15, [r7]
 8005428:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80054a0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800542c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005434:	d801      	bhi.n	800543a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005436:	2307      	movs	r3, #7
 8005438:	e016      	b.n	8005468 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800543a:	edd7 7a00 	vldr	s15, [r7]
 800543e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80054a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544a:	d801      	bhi.n	8005450 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800544c:	2308      	movs	r3, #8
 800544e:	e00b      	b.n	8005468 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005450:	edd7 7a00 	vldr	s15, [r7]
 8005454:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80054a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800545c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005460:	d801      	bhi.n	8005466 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005462:	2309      	movs	r3, #9
 8005464:	e000      	b.n	8005468 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005466:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005468:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	331c      	adds	r3, #28
 800546e:	7bfa      	ldrb	r2, [r7, #15]
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fa6e 	bl	8005954 <lsm6dsl_xl_data_rate_set>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800547e:	f04f 33ff 	mov.w	r3, #4294967295
 8005482:	e000      	b.n	8005486 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	42500000 	.word	0x42500000
 8005494:	42d00000 	.word	0x42d00000
 8005498:	43500000 	.word	0x43500000
 800549c:	43d00000 	.word	0x43d00000
 80054a0:	44504000 	.word	0x44504000
 80054a4:	44cf8000 	.word	0x44cf8000
 80054a8:	45502000 	.word	0x45502000

080054ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80054b8:	edd7 7a00 	vldr	s15, [r7]
 80054bc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80054c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c8:	d801      	bhi.n	80054ce <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e058      	b.n	8005580 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80054ce:	edd7 7a00 	vldr	s15, [r7]
 80054d2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80054d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	d801      	bhi.n	80054e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e04d      	b.n	8005580 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80054e4:	edd7 7a00 	vldr	s15, [r7]
 80054e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005594 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80054ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f4:	d801      	bhi.n	80054fa <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80054f6:	2303      	movs	r3, #3
 80054f8:	e042      	b.n	8005580 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80054fa:	edd7 7a00 	vldr	s15, [r7]
 80054fe:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005598 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	d801      	bhi.n	8005510 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800550c:	2304      	movs	r3, #4
 800550e:	e037      	b.n	8005580 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005510:	edd7 7a00 	vldr	s15, [r7]
 8005514:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800559c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005520:	d801      	bhi.n	8005526 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005522:	2305      	movs	r3, #5
 8005524:	e02c      	b.n	8005580 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005526:	edd7 7a00 	vldr	s15, [r7]
 800552a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80055a0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800552e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005536:	d801      	bhi.n	800553c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005538:	2306      	movs	r3, #6
 800553a:	e021      	b.n	8005580 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800553c:	edd7 7a00 	vldr	s15, [r7]
 8005540:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80055a4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8005544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554c:	d801      	bhi.n	8005552 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800554e:	2307      	movs	r3, #7
 8005550:	e016      	b.n	8005580 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005552:	edd7 7a00 	vldr	s15, [r7]
 8005556:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80055a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800555a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800555e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005562:	d801      	bhi.n	8005568 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005564:	2308      	movs	r3, #8
 8005566:	e00b      	b.n	8005580 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005568:	edd7 7a00 	vldr	s15, [r7]
 800556c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80055ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005578:	d801      	bhi.n	800557e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800557a:	2309      	movs	r3, #9
 800557c:	e000      	b.n	8005580 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800557e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	42500000 	.word	0x42500000
 8005598:	42d00000 	.word	0x42d00000
 800559c:	43500000 	.word	0x43500000
 80055a0:	43d00000 	.word	0x43d00000
 80055a4:	44504000 	.word	0x44504000
 80055a8:	44cf8000 	.word	0x44cf8000
 80055ac:	45502000 	.word	0x45502000

080055b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80055bc:	edd7 7a00 	vldr	s15, [r7]
 80055c0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80055c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055cc:	d801      	bhi.n	80055d2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e058      	b.n	8005684 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80055d2:	edd7 7a00 	vldr	s15, [r7]
 80055d6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80055da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e2:	d801      	bhi.n	80055e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e04d      	b.n	8005684 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80055e8:	edd7 7a00 	vldr	s15, [r7]
 80055ec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80056ac <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80055f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f8:	d801      	bhi.n	80055fe <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80055fa:	2303      	movs	r3, #3
 80055fc:	e042      	b.n	8005684 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80055fe:	edd7 7a00 	vldr	s15, [r7]
 8005602:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80056b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560e:	d801      	bhi.n	8005614 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005610:	2304      	movs	r3, #4
 8005612:	e037      	b.n	8005684 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005614:	edd7 7a00 	vldr	s15, [r7]
 8005618:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80056b4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800561c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005624:	d801      	bhi.n	800562a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005626:	2305      	movs	r3, #5
 8005628:	e02c      	b.n	8005684 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800562a:	edd7 7a00 	vldr	s15, [r7]
 800562e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80056b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563a:	d801      	bhi.n	8005640 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800563c:	2306      	movs	r3, #6
 800563e:	e021      	b.n	8005684 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005640:	edd7 7a00 	vldr	s15, [r7]
 8005644:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80056bc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800564c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005650:	d801      	bhi.n	8005656 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005652:	2307      	movs	r3, #7
 8005654:	e016      	b.n	8005684 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005656:	edd7 7a00 	vldr	s15, [r7]
 800565a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80056c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800565e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005666:	d801      	bhi.n	800566c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005668:	2308      	movs	r3, #8
 800566a:	e00b      	b.n	8005684 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800566c:	edd7 7a00 	vldr	s15, [r7]
 8005670:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80056c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567c:	d801      	bhi.n	8005682 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800567e:	2309      	movs	r3, #9
 8005680:	e000      	b.n	8005684 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005682:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005684:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	331c      	adds	r3, #28
 800568a:	7bfa      	ldrb	r2, [r7, #15]
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fa56 	bl	8005b40 <lsm6dsl_gy_data_rate_set>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800569a:	f04f 33ff 	mov.w	r3, #4294967295
 800569e:	e000      	b.n	80056a2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	42500000 	.word	0x42500000
 80056b0:	42d00000 	.word	0x42d00000
 80056b4:	43500000 	.word	0x43500000
 80056b8:	43d00000 	.word	0x43d00000
 80056bc:	44504000 	.word	0x44504000
 80056c0:	44cf8000 	.word	0x44cf8000
 80056c4:	45502000 	.word	0x45502000

080056c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80056d4:	edd7 7a00 	vldr	s15, [r7]
 80056d8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80056dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e4:	d801      	bhi.n	80056ea <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e058      	b.n	800579c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80056ea:	edd7 7a00 	vldr	s15, [r7]
 80056ee:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80056f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fa:	d801      	bhi.n	8005700 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e04d      	b.n	800579c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005700:	edd7 7a00 	vldr	s15, [r7]
 8005704:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80057b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005710:	d801      	bhi.n	8005716 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005712:	2303      	movs	r3, #3
 8005714:	e042      	b.n	800579c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005716:	edd7 7a00 	vldr	s15, [r7]
 800571a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80057b4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800571e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005726:	d801      	bhi.n	800572c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005728:	2304      	movs	r3, #4
 800572a:	e037      	b.n	800579c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800572c:	edd7 7a00 	vldr	s15, [r7]
 8005730:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80057b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573c:	d801      	bhi.n	8005742 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800573e:	2305      	movs	r3, #5
 8005740:	e02c      	b.n	800579c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005742:	edd7 7a00 	vldr	s15, [r7]
 8005746:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80057bc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800574a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800574e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005752:	d801      	bhi.n	8005758 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005754:	2306      	movs	r3, #6
 8005756:	e021      	b.n	800579c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005758:	edd7 7a00 	vldr	s15, [r7]
 800575c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80057c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005768:	d801      	bhi.n	800576e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800576a:	2307      	movs	r3, #7
 800576c:	e016      	b.n	800579c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800576e:	edd7 7a00 	vldr	s15, [r7]
 8005772:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80057c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800577a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577e:	d801      	bhi.n	8005784 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005780:	2308      	movs	r3, #8
 8005782:	e00b      	b.n	800579c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005784:	edd7 7a00 	vldr	s15, [r7]
 8005788:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80057c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800578c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005794:	d801      	bhi.n	800579a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005796:	2309      	movs	r3, #9
 8005798:	e000      	b.n	800579c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800579a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	42500000 	.word	0x42500000
 80057b4:	42d00000 	.word	0x42d00000
 80057b8:	43500000 	.word	0x43500000
 80057bc:	43d00000 	.word	0x43d00000
 80057c0:	44504000 	.word	0x44504000
 80057c4:	44cf8000 	.word	0x44cf8000
 80057c8:	45502000 	.word	0x45502000

080057cc <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80057cc:	b590      	push	{r4, r7, lr}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	461a      	mov	r2, r3
 80057d8:	460b      	mov	r3, r1
 80057da:	72fb      	strb	r3, [r7, #11]
 80057dc:	4613      	mov	r3, r2
 80057de:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	695c      	ldr	r4, [r3, #20]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	7b1b      	ldrb	r3, [r3, #12]
 80057ec:	b298      	uxth	r0, r3
 80057ee:	7afb      	ldrb	r3, [r7, #11]
 80057f0:	b299      	uxth	r1, r3
 80057f2:	893b      	ldrh	r3, [r7, #8]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	47a0      	blx	r4
 80057f8:	4603      	mov	r3, r0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd90      	pop	{r4, r7, pc}

08005802 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005802:	b590      	push	{r4, r7, lr}
 8005804:	b087      	sub	sp, #28
 8005806:	af00      	add	r7, sp, #0
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	461a      	mov	r2, r3
 800580e:	460b      	mov	r3, r1
 8005810:	72fb      	strb	r3, [r7, #11]
 8005812:	4613      	mov	r3, r2
 8005814:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	691c      	ldr	r4, [r3, #16]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	7b1b      	ldrb	r3, [r3, #12]
 8005822:	b298      	uxth	r0, r3
 8005824:	7afb      	ldrb	r3, [r7, #11]
 8005826:	b299      	uxth	r1, r3
 8005828:	893b      	ldrh	r3, [r7, #8]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	47a0      	blx	r4
 800582e:	4603      	mov	r3, r0
}
 8005830:	4618      	mov	r0, r3
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	bd90      	pop	{r4, r7, pc}

08005838 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	461a      	mov	r2, r3
 8005844:	460b      	mov	r3, r1
 8005846:	72fb      	strb	r3, [r7, #11]
 8005848:	4613      	mov	r3, r2
 800584a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685c      	ldr	r4, [r3, #4]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6898      	ldr	r0, [r3, #8]
 8005854:	893b      	ldrh	r3, [r7, #8]
 8005856:	7af9      	ldrb	r1, [r7, #11]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	47a0      	blx	r4
 800585c:	6178      	str	r0, [r7, #20]
  return ret;
 800585e:	697b      	ldr	r3, [r7, #20]
}
 8005860:	4618      	mov	r0, r3
 8005862:	371c      	adds	r7, #28
 8005864:	46bd      	mov	sp, r7
 8005866:	bd90      	pop	{r4, r7, pc}

08005868 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	461a      	mov	r2, r3
 8005874:	460b      	mov	r3, r1
 8005876:	72fb      	strb	r3, [r7, #11]
 8005878:	4613      	mov	r3, r2
 800587a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681c      	ldr	r4, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6898      	ldr	r0, [r3, #8]
 8005884:	893b      	ldrh	r3, [r7, #8]
 8005886:	7af9      	ldrb	r1, [r7, #11]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	47a0      	blx	r4
 800588c:	6178      	str	r0, [r7, #20]
  return ret;
 800588e:	697b      	ldr	r3, [r7, #20]
}
 8005890:	4618      	mov	r0, r3
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	bd90      	pop	{r4, r7, pc}

08005898 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80058a4:	f107 0208 	add.w	r2, r7, #8
 80058a8:	2301      	movs	r3, #1
 80058aa:	2110      	movs	r1, #16
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff ffc3 	bl	8005838 <lsm6dsl_read_reg>
 80058b2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10f      	bne.n	80058da <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	7a3b      	ldrb	r3, [r7, #8]
 80058c4:	f362 0383 	bfi	r3, r2, #2, #2
 80058c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80058ca:	f107 0208 	add.w	r2, r7, #8
 80058ce:	2301      	movs	r3, #1
 80058d0:	2110      	movs	r1, #16
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff ffc8 	bl	8005868 <lsm6dsl_write_reg>
 80058d8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80058da:	68fb      	ldr	r3, [r7, #12]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80058ee:	f107 0208 	add.w	r2, r7, #8
 80058f2:	2301      	movs	r3, #1
 80058f4:	2110      	movs	r1, #16
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff ff9e 	bl	8005838 <lsm6dsl_read_reg>
 80058fc:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 80058fe:	7a3b      	ldrb	r3, [r7, #8]
 8005900:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b03      	cmp	r3, #3
 8005908:	d81a      	bhi.n	8005940 <lsm6dsl_xl_full_scale_get+0x5c>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <lsm6dsl_xl_full_scale_get+0x2c>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005921 	.word	0x08005921
 8005914:	08005929 	.word	0x08005929
 8005918:	08005931 	.word	0x08005931
 800591c:	08005939 	.word	0x08005939
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
      break;
 8005926:	e00f      	b.n	8005948 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2201      	movs	r2, #1
 800592c:	701a      	strb	r2, [r3, #0]
      break;
 800592e:	e00b      	b.n	8005948 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2202      	movs	r2, #2
 8005934:	701a      	strb	r2, [r3, #0]
      break;
 8005936:	e007      	b.n	8005948 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2203      	movs	r2, #3
 800593c:	701a      	strb	r2, [r3, #0]
      break;
 800593e:	e003      	b.n	8005948 <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2204      	movs	r2, #4
 8005944:	701a      	strb	r2, [r3, #0]
      break;
 8005946:	bf00      	nop
  }

  return ret;
 8005948:	68fb      	ldr	r3, [r7, #12]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop

08005954 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005960:	f107 0208 	add.w	r2, r7, #8
 8005964:	2301      	movs	r3, #1
 8005966:	2110      	movs	r1, #16
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ff65 	bl	8005838 <lsm6dsl_read_reg>
 800596e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10f      	bne.n	8005996 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	b2da      	uxtb	r2, r3
 800597e:	7a3b      	ldrb	r3, [r7, #8]
 8005980:	f362 1307 	bfi	r3, r2, #4, #4
 8005984:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005986:	f107 0208 	add.w	r2, r7, #8
 800598a:	2301      	movs	r3, #1
 800598c:	2110      	movs	r1, #16
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff ff6a 	bl	8005868 <lsm6dsl_write_reg>
 8005994:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80059aa:	f107 0208 	add.w	r2, r7, #8
 80059ae:	2301      	movs	r3, #1
 80059b0:	2110      	movs	r1, #16
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff ff40 	bl	8005838 <lsm6dsl_read_reg>
 80059b8:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 80059ba:	7a3b      	ldrb	r3, [r7, #8]
 80059bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b0b      	cmp	r3, #11
 80059c4:	d84a      	bhi.n	8005a5c <lsm6dsl_xl_data_rate_get+0xbc>
 80059c6:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <lsm6dsl_xl_data_rate_get+0x2c>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	080059fd 	.word	0x080059fd
 80059d0:	08005a05 	.word	0x08005a05
 80059d4:	08005a0d 	.word	0x08005a0d
 80059d8:	08005a15 	.word	0x08005a15
 80059dc:	08005a1d 	.word	0x08005a1d
 80059e0:	08005a25 	.word	0x08005a25
 80059e4:	08005a2d 	.word	0x08005a2d
 80059e8:	08005a35 	.word	0x08005a35
 80059ec:	08005a3d 	.word	0x08005a3d
 80059f0:	08005a45 	.word	0x08005a45
 80059f4:	08005a4d 	.word	0x08005a4d
 80059f8:	08005a55 	.word	0x08005a55
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
      break;
 8005a02:	e02f      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
      break;
 8005a0a:	e02b      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	701a      	strb	r2, [r3, #0]
      break;
 8005a12:	e027      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2203      	movs	r2, #3
 8005a18:	701a      	strb	r2, [r3, #0]
      break;
 8005a1a:	e023      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2204      	movs	r2, #4
 8005a20:	701a      	strb	r2, [r3, #0]
      break;
 8005a22:	e01f      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2205      	movs	r2, #5
 8005a28:	701a      	strb	r2, [r3, #0]
      break;
 8005a2a:	e01b      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2206      	movs	r2, #6
 8005a30:	701a      	strb	r2, [r3, #0]
      break;
 8005a32:	e017      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2207      	movs	r2, #7
 8005a38:	701a      	strb	r2, [r3, #0]
      break;
 8005a3a:	e013      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2208      	movs	r2, #8
 8005a40:	701a      	strb	r2, [r3, #0]
      break;
 8005a42:	e00f      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2209      	movs	r2, #9
 8005a48:	701a      	strb	r2, [r3, #0]
      break;
 8005a4a:	e00b      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	220a      	movs	r2, #10
 8005a50:	701a      	strb	r2, [r3, #0]
      break;
 8005a52:	e007      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	220b      	movs	r2, #11
 8005a58:	701a      	strb	r2, [r3, #0]
      break;
 8005a5a:	e003      	b.n	8005a64 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	220c      	movs	r2, #12
 8005a60:	701a      	strb	r2, [r3, #0]
      break;
 8005a62:	bf00      	nop
  }

  return ret;
 8005a64:	68fb      	ldr	r3, [r7, #12]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop

08005a70 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005a7c:	f107 0208 	add.w	r2, r7, #8
 8005a80:	2301      	movs	r3, #1
 8005a82:	2111      	movs	r1, #17
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff fed7 	bl	8005838 <lsm6dsl_read_reg>
 8005a8a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10f      	bne.n	8005ab2 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	7a3b      	ldrb	r3, [r7, #8]
 8005a9c:	f362 0343 	bfi	r3, r2, #1, #3
 8005aa0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005aa2:	f107 0208 	add.w	r2, r7, #8
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	2111      	movs	r1, #17
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fedc 	bl	8005868 <lsm6dsl_write_reg>
 8005ab0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005ac6:	f107 0208 	add.w	r2, r7, #8
 8005aca:	2301      	movs	r3, #1
 8005acc:	2111      	movs	r1, #17
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff feb2 	bl	8005838 <lsm6dsl_read_reg>
 8005ad4:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8005ad6:	7a3b      	ldrb	r3, [r7, #8]
 8005ad8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b06      	cmp	r3, #6
 8005ae0:	d824      	bhi.n	8005b2c <lsm6dsl_gy_full_scale_get+0x70>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <lsm6dsl_gy_full_scale_get+0x2c>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005b05 	.word	0x08005b05
 8005aec:	08005b0d 	.word	0x08005b0d
 8005af0:	08005b15 	.word	0x08005b15
 8005af4:	08005b2d 	.word	0x08005b2d
 8005af8:	08005b1d 	.word	0x08005b1d
 8005afc:	08005b2d 	.word	0x08005b2d
 8005b00:	08005b25 	.word	0x08005b25
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
      break;
 8005b0a:	e013      	b.n	8005b34 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
      break;
 8005b12:	e00f      	b.n	8005b34 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2202      	movs	r2, #2
 8005b18:	701a      	strb	r2, [r3, #0]
      break;
 8005b1a:	e00b      	b.n	8005b34 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2204      	movs	r2, #4
 8005b20:	701a      	strb	r2, [r3, #0]
      break;
 8005b22:	e007      	b.n	8005b34 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2206      	movs	r2, #6
 8005b28:	701a      	strb	r2, [r3, #0]
      break;
 8005b2a:	e003      	b.n	8005b34 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2207      	movs	r2, #7
 8005b30:	701a      	strb	r2, [r3, #0]
      break;
 8005b32:	bf00      	nop
  }

  return ret;
 8005b34:	68fb      	ldr	r3, [r7, #12]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop

08005b40 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005b4c:	f107 0208 	add.w	r2, r7, #8
 8005b50:	2301      	movs	r3, #1
 8005b52:	2111      	movs	r1, #17
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff fe6f 	bl	8005838 <lsm6dsl_read_reg>
 8005b5a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10f      	bne.n	8005b82 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	7a3b      	ldrb	r3, [r7, #8]
 8005b6c:	f362 1307 	bfi	r3, r2, #4, #4
 8005b70:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005b72:	f107 0208 	add.w	r2, r7, #8
 8005b76:	2301      	movs	r3, #1
 8005b78:	2111      	movs	r1, #17
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff fe74 	bl	8005868 <lsm6dsl_write_reg>
 8005b80:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005b82:	68fb      	ldr	r3, [r7, #12]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005b96:	f107 0208 	add.w	r2, r7, #8
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	2111      	movs	r1, #17
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff fe4a 	bl	8005838 <lsm6dsl_read_reg>
 8005ba4:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8005ba6:	7a3b      	ldrb	r3, [r7, #8]
 8005ba8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b0a      	cmp	r3, #10
 8005bb0:	d844      	bhi.n	8005c3c <lsm6dsl_gy_data_rate_get+0xb0>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <lsm6dsl_gy_data_rate_get+0x2c>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005be5 	.word	0x08005be5
 8005bbc:	08005bed 	.word	0x08005bed
 8005bc0:	08005bf5 	.word	0x08005bf5
 8005bc4:	08005bfd 	.word	0x08005bfd
 8005bc8:	08005c05 	.word	0x08005c05
 8005bcc:	08005c0d 	.word	0x08005c0d
 8005bd0:	08005c15 	.word	0x08005c15
 8005bd4:	08005c1d 	.word	0x08005c1d
 8005bd8:	08005c25 	.word	0x08005c25
 8005bdc:	08005c2d 	.word	0x08005c2d
 8005be0:	08005c35 	.word	0x08005c35
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
      break;
 8005bea:	e02b      	b.n	8005c44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]
      break;
 8005bf2:	e027      	b.n	8005c44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	701a      	strb	r2, [r3, #0]
      break;
 8005bfa:	e023      	b.n	8005c44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2203      	movs	r2, #3
 8005c00:	701a      	strb	r2, [r3, #0]
      break;
 8005c02:	e01f      	b.n	8005c44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2204      	movs	r2, #4
 8005c08:	701a      	strb	r2, [r3, #0]
      break;
 8005c0a:	e01b      	b.n	8005c44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2205      	movs	r2, #5
 8005c10:	701a      	strb	r2, [r3, #0]
      break;
 8005c12:	e017      	b.n	8005c44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2206      	movs	r2, #6
 8005c18:	701a      	strb	r2, [r3, #0]
      break;
 8005c1a:	e013      	b.n	8005c44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2207      	movs	r2, #7
 8005c20:	701a      	strb	r2, [r3, #0]
      break;
 8005c22:	e00f      	b.n	8005c44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2208      	movs	r2, #8
 8005c28:	701a      	strb	r2, [r3, #0]
      break;
 8005c2a:	e00b      	b.n	8005c44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2209      	movs	r2, #9
 8005c30:	701a      	strb	r2, [r3, #0]
      break;
 8005c32:	e007      	b.n	8005c44 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	220a      	movs	r2, #10
 8005c38:	701a      	strb	r2, [r3, #0]
      break;
 8005c3a:	e003      	b.n	8005c44 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	220b      	movs	r2, #11
 8005c40:	701a      	strb	r2, [r3, #0]
      break;
 8005c42:	bf00      	nop
  }

  return ret;
 8005c44:	68fb      	ldr	r3, [r7, #12]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop

08005c50 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005c5c:	f107 0208 	add.w	r2, r7, #8
 8005c60:	2301      	movs	r3, #1
 8005c62:	2112      	movs	r1, #18
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fde7 	bl	8005838 <lsm6dsl_read_reg>
 8005c6a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10f      	bne.n	8005c92 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	7a3b      	ldrb	r3, [r7, #8]
 8005c7c:	f362 1386 	bfi	r3, r2, #6, #1
 8005c80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005c82:	f107 0208 	add.w	r2, r7, #8
 8005c86:	2301      	movs	r3, #1
 8005c88:	2112      	movs	r1, #18
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff fdec 	bl	8005868 <lsm6dsl_write_reg>
 8005c90:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005c92:	68fb      	ldr	r3, [r7, #12]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005ca6:	2306      	movs	r3, #6
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	2122      	movs	r1, #34	; 0x22
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff fdc3 	bl	8005838 <lsm6dsl_read_reg>
 8005cb2:	60f8      	str	r0, [r7, #12]
  return ret;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8005cc8:	2306      	movs	r3, #6
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	2128      	movs	r1, #40	; 0x28
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff fdb2 	bl	8005838 <lsm6dsl_read_reg>
 8005cd4:	60f8      	str	r0, [r7, #12]
  return ret;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005cea:	2301      	movs	r3, #1
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	210f      	movs	r1, #15
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff fda1 	bl	8005838 <lsm6dsl_read_reg>
 8005cf6:	60f8      	str	r0, [r7, #12]
  return ret;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005d0e:	f107 0208 	add.w	r2, r7, #8
 8005d12:	2301      	movs	r3, #1
 8005d14:	2112      	movs	r1, #18
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff fd8e 	bl	8005838 <lsm6dsl_read_reg>
 8005d1c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10f      	bne.n	8005d44 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	7a3b      	ldrb	r3, [r7, #8]
 8005d2e:	f362 0382 	bfi	r3, r2, #2, #1
 8005d32:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005d34:	f107 0208 	add.w	r2, r7, #8
 8005d38:	2301      	movs	r3, #1
 8005d3a:	2112      	movs	r1, #18
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff fd93 	bl	8005868 <lsm6dsl_write_reg>
 8005d42:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005d44:	68fb      	ldr	r3, [r7, #12]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	460b      	mov	r3, r1
 8005d58:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8005d5a:	f107 0208 	add.w	r2, r7, #8
 8005d5e:	2301      	movs	r3, #1
 8005d60:	210a      	movs	r1, #10
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff fd68 	bl	8005838 <lsm6dsl_read_reg>
 8005d68:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10f      	bne.n	8005d90 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	7a3b      	ldrb	r3, [r7, #8]
 8005d7a:	f362 0302 	bfi	r3, r2, #0, #3
 8005d7e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8005d80:	f107 0208 	add.w	r2, r7, #8
 8005d84:	2301      	movs	r3, #1
 8005d86:	210a      	movs	r1, #10
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fd6d 	bl	8005868 <lsm6dsl_write_reg>
 8005d8e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005d90:	68fb      	ldr	r3, [r7, #12]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f004 fdd6 	bl	800a95c <VL53L0X_get_device_info>
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 fc54 	bl	800767e <VL53L0X_get_offset_calibration_data_micro_meter>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005de8:	b5b0      	push	{r4, r5, r7, lr}
 8005dea:	b094      	sub	sp, #80	; 0x50
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005df6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d107      	bne.n	8005e0e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2188      	movs	r1, #136	; 0x88
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f004 ff6a 	bl	800acdc <VL53L0X_WrByte>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e1c:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005e26:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a71      	ldr	r2, [pc, #452]	; (8005ff4 <VL53L0X_DataInit+0x20c>)
 8005e2e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a70      	ldr	r2, [pc, #448]	; (8005ff8 <VL53L0X_DataInit+0x210>)
 8005e36:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005e40:	f107 0308 	add.w	r3, r7, #8
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa5a 	bl	8006300 <VL53L0X_GetDeviceParameters>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 8005e52:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d112      	bne.n	8005e80 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f103 0410 	add.w	r4, r3, #16
 8005e68:	f107 0508 	add.w	r5, r7, #8
 8005e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005e7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2264      	movs	r2, #100	; 0x64
 8005e84:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005e8e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005e98:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005ea2:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005eae:	2300      	movs	r3, #0
 8005eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb2:	e014      	b.n	8005ede <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8005eb4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d114      	bne.n	8005ee6 <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fd67 	bl	8006998 <VL53L0X_SetLimitCheckEnable>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eda:	3301      	adds	r3, #1
 8005edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee0:	2b05      	cmp	r3, #5
 8005ee2:	dde7      	ble.n	8005eb4 <VL53L0X_DataInit+0xcc>
 8005ee4:	e000      	b.n	8005ee8 <VL53L0X_DataInit+0x100>
		else
			break;
 8005ee6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005ee8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d107      	bne.n	8005f00 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2102      	movs	r1, #2
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fd4f 	bl	8006998 <VL53L0X_SetLimitCheckEnable>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005f00:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d107      	bne.n	8005f18 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2103      	movs	r1, #3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fd43 	bl	8006998 <VL53L0X_SetLimitCheckEnable>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005f18:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d107      	bne.n	8005f30 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005f20:	2200      	movs	r2, #0
 8005f22:	2104      	movs	r1, #4
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fd37 	bl	8006998 <VL53L0X_SetLimitCheckEnable>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005f30:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d107      	bne.n	8005f48 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2105      	movs	r1, #5
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fd2b 	bl	8006998 <VL53L0X_SetLimitCheckEnable>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005f48:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d108      	bne.n	8005f62 <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f50:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005f54:	2100      	movs	r1, #0
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fdce 	bl	8006af8 <VL53L0X_SetLimitCheckValue>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005f62:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d108      	bne.n	8005f7c <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f6e:	2101      	movs	r1, #1
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fdc1 	bl	8006af8 <VL53L0X_SetLimitCheckValue>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f7c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d108      	bne.n	8005f96 <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f84:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005f88:	2102      	movs	r1, #2
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fdb4 	bl	8006af8 <VL53L0X_SetLimitCheckValue>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f96:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d107      	bne.n	8005fae <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2103      	movs	r1, #3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fda8 	bl	8006af8 <VL53L0X_SetLimitCheckValue>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005fae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10f      	bne.n	8005fd6 <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	22ff      	movs	r2, #255	; 0xff
 8005fba:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005fbe:	22ff      	movs	r2, #255	; 0xff
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f004 fe8a 	bl	800acdc <VL53L0X_WrByte>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005fd6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005fe6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3750      	adds	r7, #80	; 0x50
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	00016b85 	.word	0x00016b85
 8005ff8:	000970a4 	.word	0x000970a4

08005ffc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005ffc:	b5b0      	push	{r4, r5, r7, lr}
 8005ffe:	b09e      	sub	sp, #120	; 0x78
 8006000:	af02      	add	r7, sp, #8
 8006002:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006004:	2300      	movs	r3, #0
 8006006:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800600a:	f107 031c 	add.w	r3, r7, #28
 800600e:	2240      	movs	r2, #64	; 0x40
 8006010:	2100      	movs	r1, #0
 8006012:	4618      	mov	r0, r3
 8006014:	f00b ffa3 	bl	8011f5e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006038:	2101      	movs	r1, #1
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f002 fa72 	bl	8008524 <VL53L0X_get_info_from_device>
 8006040:	4603      	mov	r3, r0
 8006042:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800604c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006058:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800605c:	2b01      	cmp	r3, #1
 800605e:	d80d      	bhi.n	800607c <VL53L0X_StaticInit+0x80>
 8006060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006064:	2b01      	cmp	r3, #1
 8006066:	d102      	bne.n	800606e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800606a:	2b20      	cmp	r3, #32
 800606c:	d806      	bhi.n	800607c <VL53L0X_StaticInit+0x80>
 800606e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10e      	bne.n	8006094 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d90b      	bls.n	8006094 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800607c:	f107 0218 	add.w	r2, r7, #24
 8006080:	f107 0314 	add.w	r3, r7, #20
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 fcf4 	bl	8007a74 <VL53L0X_perform_ref_spad_management>
 800608c:	4603      	mov	r3, r0
 800608e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006092:	e009      	b.n	80060a8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006094:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006098:	461a      	mov	r2, r3
 800609a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fef5 	bl	8007e8c <VL53L0X_set_reference_spads>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80060a8:	4b94      	ldr	r3, [pc, #592]	; (80062fc <VL53L0X_StaticInit+0x300>)
 80060aa:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80060ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10f      	bne.n	80060d4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80060ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80060be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d104      	bne.n	80060d0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80060cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ce:	e001      	b.n	80060d4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80060d0:	4b8a      	ldr	r3, [pc, #552]	; (80062fc <VL53L0X_StaticInit+0x300>)
 80060d2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80060d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d106      	bne.n	80060ea <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80060dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f003 fdca 	bl	8009c78 <VL53L0X_load_tuning_settings>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80060ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80060f2:	2300      	movs	r3, #0
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	2304      	movs	r3, #4
 80060f8:	2200      	movs	r2, #0
 80060fa:	2100      	movs	r1, #0
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 f8ed 	bl	80072dc <VL53L0X_SetGpioConfig>
 8006102:	4603      	mov	r3, r0
 8006104:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006108:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800610c:	2b00      	cmp	r3, #0
 800610e:	d121      	bne.n	8006154 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006110:	2201      	movs	r2, #1
 8006112:	21ff      	movs	r1, #255	; 0xff
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f004 fde1 	bl	800acdc <VL53L0X_WrByte>
 800611a:	4603      	mov	r3, r0
 800611c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006120:	f107 031a 	add.w	r3, r7, #26
 8006124:	461a      	mov	r2, r3
 8006126:	2184      	movs	r1, #132	; 0x84
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f004 fd63 	bl	800abf4 <VL53L0X_RdWord>
 800612e:	4603      	mov	r3, r0
 8006130:	461a      	mov	r2, r3
 8006132:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006136:	4313      	orrs	r3, r2
 8006138:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800613c:	2200      	movs	r2, #0
 800613e:	21ff      	movs	r1, #255	; 0xff
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f004 fdcb 	bl	800acdc <VL53L0X_WrByte>
 8006146:	4603      	mov	r3, r0
 8006148:	461a      	mov	r2, r3
 800614a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800614e:	4313      	orrs	r3, r2
 8006150:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006154:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006158:	2b00      	cmp	r3, #0
 800615a:	d105      	bne.n	8006168 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800615c:	8b7b      	ldrh	r3, [r7, #26]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	461a      	mov	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006168:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800616c:	2b00      	cmp	r3, #0
 800616e:	d108      	bne.n	8006182 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006170:	f107 031c 	add.w	r3, r7, #28
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8c2 	bl	8006300 <VL53L0X_GetDeviceParameters>
 800617c:	4603      	mov	r3, r0
 800617e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006182:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006186:	2b00      	cmp	r3, #0
 8006188:	d110      	bne.n	80061ac <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800618a:	f107 0319 	add.w	r3, r7, #25
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f984 	bl	800649e <VL53L0X_GetFractionEnable>
 8006196:	4603      	mov	r3, r0
 8006198:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800619c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80061a4:	7e7a      	ldrb	r2, [r7, #25]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80061ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10e      	bne.n	80061d2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f103 0410 	add.w	r4, r3, #16
 80061ba:	f107 051c 	add.w	r5, r7, #28
 80061be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80061ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80061d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d111      	bne.n	80061fe <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80061da:	f107 0319 	add.w	r3, r7, #25
 80061de:	461a      	mov	r2, r3
 80061e0:	2101      	movs	r1, #1
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f004 fc7f 	bl	800aae6 <VL53L0X_RdByte>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80061ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80061f6:	7e7a      	ldrb	r2, [r7, #25]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80061fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006202:	2b00      	cmp	r3, #0
 8006204:	d107      	bne.n	8006216 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006206:	2200      	movs	r2, #0
 8006208:	2100      	movs	r1, #0
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f9bc 	bl	8006588 <VL53L0X_SetSequenceStepEnable>
 8006210:	4603      	mov	r3, r0
 8006212:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006216:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800621a:	2b00      	cmp	r3, #0
 800621c:	d107      	bne.n	800622e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800621e:	2200      	movs	r2, #0
 8006220:	2102      	movs	r1, #2
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f9b0 	bl	8006588 <VL53L0X_SetSequenceStepEnable>
 8006228:	4603      	mov	r3, r0
 800622a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800622e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2203      	movs	r2, #3
 800623a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800623e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006242:	2b00      	cmp	r3, #0
 8006244:	d109      	bne.n	800625a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006246:	f107 0313 	add.w	r3, r7, #19
 800624a:	461a      	mov	r2, r3
 800624c:	2100      	movs	r1, #0
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f982 	bl	8006558 <VL53L0X_GetVcselPulsePeriod>
 8006254:	4603      	mov	r3, r0
 8006256:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800625a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006262:	7cfa      	ldrb	r2, [r7, #19]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800626a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006272:	f107 0313 	add.w	r3, r7, #19
 8006276:	461a      	mov	r2, r3
 8006278:	2101      	movs	r1, #1
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f96c 	bl	8006558 <VL53L0X_GetVcselPulsePeriod>
 8006280:	4603      	mov	r3, r0
 8006282:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006286:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800628e:	7cfa      	ldrb	r2, [r7, #19]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006296:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 800629e:	f107 030c 	add.w	r3, r7, #12
 80062a2:	461a      	mov	r2, r3
 80062a4:	2103      	movs	r1, #3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 faba 	bl	8006820 <VL53L0X_GetSequenceStepTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80062b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d103      	bne.n	80062c2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80062c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 80062ca:	f107 030c 	add.w	r3, r7, #12
 80062ce:	461a      	mov	r2, r3
 80062d0:	2104      	movs	r1, #4
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 faa4 	bl	8006820 <VL53L0X_GetSequenceStepTimeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80062de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d103      	bne.n	80062ee <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3770      	adds	r7, #112	; 0x70
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bdb0      	pop	{r4, r5, r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000144 	.word	0x20000144

08006300 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f8b0 	bl	8006478 <VL53L0X_GetDeviceMode>
 8006318:	4603      	mov	r3, r0
 800631a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800631c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d107      	bne.n	8006334 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fab8 	bl	80068a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006330:	4603      	mov	r3, r0
 8006332:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d107      	bne.n	800635a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	3310      	adds	r3, #16
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 faee 	bl	8006932 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8006356:	4603      	mov	r3, r0
 8006358:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800635a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d107      	bne.n	8006372 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	3314      	adds	r3, #20
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff fd29 	bl	8005dc0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800636e:	4603      	mov	r3, r0
 8006370:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d134      	bne.n	80063e4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	e02a      	b.n	80063d6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d12a      	bne.n	80063de <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	b299      	uxth	r1, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	3308      	adds	r3, #8
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	4413      	add	r3, r2
 8006396:	3304      	adds	r3, #4
 8006398:	461a      	mov	r2, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fc0e 	bl	8006bbc <VL53L0X_GetLimitCheckValue>
 80063a0:	4603      	mov	r3, r0
 80063a2:	461a      	mov	r2, r3
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80063aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d117      	bne.n	80063e2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	b299      	uxth	r1, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	3318      	adds	r3, #24
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	4413      	add	r3, r2
 80063be:	461a      	mov	r2, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fb75 	bl	8006ab0 <VL53L0X_GetLimitCheckEnable>
 80063c6:	4603      	mov	r3, r0
 80063c8:	461a      	mov	r2, r3
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	3301      	adds	r3, #1
 80063d4:	60bb      	str	r3, [r7, #8]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b05      	cmp	r3, #5
 80063da:	ddd1      	ble.n	8006380 <VL53L0X_GetDeviceParameters+0x80>
 80063dc:	e002      	b.n	80063e4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80063de:	bf00      	nop
 80063e0:	e000      	b.n	80063e4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80063e2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80063e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d107      	bne.n	80063fc <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	333c      	adds	r3, #60	; 0x3c
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fc70 	bl	8006cd8 <VL53L0X_GetWrapAroundCheckEnable>
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80063fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d107      	bne.n	8006414 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f879 	bl	8006502 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006410:	4603      	mov	r3, r0
 8006412:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006414:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	2b15      	cmp	r3, #21
 8006434:	bf8c      	ite	hi
 8006436:	2201      	movhi	r2, #1
 8006438:	2200      	movls	r2, #0
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	2a00      	cmp	r2, #0
 800643e:	d10e      	bne.n	800645e <VL53L0X_SetDeviceMode+0x3e>
 8006440:	2201      	movs	r2, #1
 8006442:	409a      	lsls	r2, r3
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <VL53L0X_SetDeviceMode+0x54>)
 8006446:	4013      	ands	r3, r2
 8006448:	2b00      	cmp	r3, #0
 800644a:	bf14      	ite	ne
 800644c:	2301      	movne	r3, #1
 800644e:	2300      	moveq	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	741a      	strb	r2, [r3, #16]
		break;
 800645c:	e001      	b.n	8006462 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800645e:	23f8      	movs	r3, #248	; 0xf8
 8006460:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006462:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	0030000b 	.word	0x0030000b

08006478 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	7c1a      	ldrb	r2, [r3, #16]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800648e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	2109      	movs	r1, #9
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f004 fb18 	bl	800aae6 <VL53L0X_RdByte>
 80064b6:	4603      	mov	r3, r0
 80064b8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80064ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80064d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f003 fa32 	bl	8009956 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80064f2:	4603      	mov	r3, r0
 80064f4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80064f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f003 faff 	bl	8009b16 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800651c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
 8006534:	4613      	mov	r3, r2
 8006536:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800653c:	78ba      	ldrb	r2, [r7, #2]
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f002 ff47 	bl	80093d6 <VL53L0X_set_vcsel_pulse_period>
 8006548:	4603      	mov	r3, r0
 800654a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800654c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	460b      	mov	r3, r1
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006566:	2300      	movs	r3, #0
 8006568:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800656a:	7afb      	ldrb	r3, [r7, #11]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	4619      	mov	r1, r3
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f003 f9b9 	bl	80098e8 <VL53L0X_get_vcsel_pulse_period>
 8006576:	4603      	mov	r3, r0
 8006578:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800657a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
 8006594:	4613      	mov	r3, r2
 8006596:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006598:	2300      	movs	r3, #0
 800659a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80065a4:	f107 030f 	add.w	r3, r7, #15
 80065a8:	461a      	mov	r2, r3
 80065aa:	2101      	movs	r1, #1
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f004 fa9a 	bl	800aae6 <VL53L0X_RdByte>
 80065b2:	4603      	mov	r3, r0
 80065b4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80065ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d15a      	bne.n	8006678 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80065c2:	78bb      	ldrb	r3, [r7, #2]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d12b      	bne.n	8006620 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d825      	bhi.n	800661a <VL53L0X_SetSequenceStepEnable+0x92>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065e9 	.word	0x080065e9
 80065d8:	080065f3 	.word	0x080065f3
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	08006607 	.word	0x08006607
 80065e4:	08006611 	.word	0x08006611
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80065e8:	7dbb      	ldrb	r3, [r7, #22]
 80065ea:	f043 0310 	orr.w	r3, r3, #16
 80065ee:	75bb      	strb	r3, [r7, #22]
				break;
 80065f0:	e043      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80065f2:	7dbb      	ldrb	r3, [r7, #22]
 80065f4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80065f8:	75bb      	strb	r3, [r7, #22]
				break;
 80065fa:	e03e      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80065fc:	7dbb      	ldrb	r3, [r7, #22]
 80065fe:	f043 0304 	orr.w	r3, r3, #4
 8006602:	75bb      	strb	r3, [r7, #22]
				break;
 8006604:	e039      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006606:	7dbb      	ldrb	r3, [r7, #22]
 8006608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800660c:	75bb      	strb	r3, [r7, #22]
				break;
 800660e:	e034      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006610:	7dbb      	ldrb	r3, [r7, #22]
 8006612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006616:	75bb      	strb	r3, [r7, #22]
				break;
 8006618:	e02f      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800661a:	23fc      	movs	r3, #252	; 0xfc
 800661c:	75fb      	strb	r3, [r7, #23]
 800661e:	e02c      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	2b04      	cmp	r3, #4
 8006624:	d825      	bhi.n	8006672 <VL53L0X_SetSequenceStepEnable+0xea>
 8006626:	a201      	add	r2, pc, #4	; (adr r2, 800662c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	08006641 	.word	0x08006641
 8006630:	0800664b 	.word	0x0800664b
 8006634:	08006655 	.word	0x08006655
 8006638:	0800665f 	.word	0x0800665f
 800663c:	08006669 	.word	0x08006669
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006640:	7dbb      	ldrb	r3, [r7, #22]
 8006642:	f023 0310 	bic.w	r3, r3, #16
 8006646:	75bb      	strb	r3, [r7, #22]
				break;
 8006648:	e017      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800664a:	7dbb      	ldrb	r3, [r7, #22]
 800664c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006650:	75bb      	strb	r3, [r7, #22]
				break;
 8006652:	e012      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006654:	7dbb      	ldrb	r3, [r7, #22]
 8006656:	f023 0304 	bic.w	r3, r3, #4
 800665a:	75bb      	strb	r3, [r7, #22]
				break;
 800665c:	e00d      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800665e:	7dbb      	ldrb	r3, [r7, #22]
 8006660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006664:	75bb      	strb	r3, [r7, #22]
				break;
 8006666:	e008      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006668:	7dbb      	ldrb	r3, [r7, #22]
 800666a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666e:	75bb      	strb	r3, [r7, #22]
				break;
 8006670:	e003      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006672:	23fc      	movs	r3, #252	; 0xfc
 8006674:	75fb      	strb	r3, [r7, #23]
 8006676:	e000      	b.n	800667a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006678:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	7dba      	ldrb	r2, [r7, #22]
 800667e:	429a      	cmp	r2, r3
 8006680:	d01e      	beq.n	80066c0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006682:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d107      	bne.n	800669a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800668a:	7dbb      	ldrb	r3, [r7, #22]
 800668c:	461a      	mov	r2, r3
 800668e:	2101      	movs	r1, #1
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f004 fb23 	bl	800acdc <VL53L0X_WrByte>
 8006696:	4603      	mov	r3, r0
 8006698:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800669a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d103      	bne.n	80066aa <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	7dba      	ldrb	r2, [r7, #22]
 80066a6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80066aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80066b8:	6939      	ldr	r1, [r7, #16]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff ff0e 	bl	80064dc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80066c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	607b      	str	r3, [r7, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	72fb      	strb	r3, [r7, #11]
 80066da:	4613      	mov	r3, r2
 80066dc:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066de:	2300      	movs	r3, #0
 80066e0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80066e8:	7afb      	ldrb	r3, [r7, #11]
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d836      	bhi.n	800675c <sequence_step_enabled+0x90>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <sequence_step_enabled+0x28>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006709 	.word	0x08006709
 80066f8:	0800671b 	.word	0x0800671b
 80066fc:	0800672d 	.word	0x0800672d
 8006700:	0800673f 	.word	0x0800673f
 8006704:	08006751 	.word	0x08006751
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006708:	7abb      	ldrb	r3, [r7, #10]
 800670a:	111b      	asrs	r3, r3, #4
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	b2da      	uxtb	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	701a      	strb	r2, [r3, #0]
		break;
 8006718:	e022      	b.n	8006760 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800671a:	7abb      	ldrb	r3, [r7, #10]
 800671c:	10db      	asrs	r3, r3, #3
 800671e:	b2db      	uxtb	r3, r3
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	b2da      	uxtb	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	701a      	strb	r2, [r3, #0]
		break;
 800672a:	e019      	b.n	8006760 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800672c:	7abb      	ldrb	r3, [r7, #10]
 800672e:	109b      	asrs	r3, r3, #2
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	b2da      	uxtb	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	701a      	strb	r2, [r3, #0]
		break;
 800673c:	e010      	b.n	8006760 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800673e:	7abb      	ldrb	r3, [r7, #10]
 8006740:	119b      	asrs	r3, r3, #6
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	b2da      	uxtb	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	701a      	strb	r2, [r3, #0]
		break;
 800674e:	e007      	b.n	8006760 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006750:	7abb      	ldrb	r3, [r7, #10]
 8006752:	09db      	lsrs	r3, r3, #7
 8006754:	b2da      	uxtb	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	701a      	strb	r2, [r3, #0]
		break;
 800675a:	e001      	b.n	8006760 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800675c:	23fc      	movs	r3, #252	; 0xfc
 800675e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006760:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006764:	4618      	mov	r0, r3
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006782:	f107 030e 	add.w	r3, r7, #14
 8006786:	461a      	mov	r2, r3
 8006788:	2101      	movs	r1, #1
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f004 f9ab 	bl	800aae6 <VL53L0X_RdByte>
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d107      	bne.n	80067ac <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800679c:	7bba      	ldrb	r2, [r7, #14]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2100      	movs	r1, #0
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff ff92 	bl	80066cc <sequence_step_enabled>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80067ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d108      	bne.n	80067c6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80067b4:	7bba      	ldrb	r2, [r7, #14]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	3302      	adds	r3, #2
 80067ba:	2101      	movs	r1, #1
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff ff85 	bl	80066cc <sequence_step_enabled>
 80067c2:	4603      	mov	r3, r0
 80067c4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80067c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d108      	bne.n	80067e0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80067ce:	7bba      	ldrb	r2, [r7, #14]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	2102      	movs	r1, #2
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff ff78 	bl	80066cc <sequence_step_enabled>
 80067dc:	4603      	mov	r3, r0
 80067de:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80067e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d108      	bne.n	80067fa <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80067e8:	7bba      	ldrb	r2, [r7, #14]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	3303      	adds	r3, #3
 80067ee:	2103      	movs	r1, #3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ff6b 	bl	80066cc <sequence_step_enabled>
 80067f6:	4603      	mov	r3, r0
 80067f8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80067fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d108      	bne.n	8006814 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006802:	7bba      	ldrb	r2, [r7, #14]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	3304      	adds	r3, #4
 8006808:	2104      	movs	r1, #4
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff ff5e 	bl	80066cc <sequence_step_enabled>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	460b      	mov	r3, r1
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800682e:	2300      	movs	r3, #0
 8006830:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 800683a:	f107 0210 	add.w	r2, r7, #16
 800683e:	7afb      	ldrb	r3, [r7, #11]
 8006840:	4619      	mov	r1, r3
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f002 fbf2 	bl	800902c <get_sequence_step_timeout>
 8006848:	4603      	mov	r3, r0
 800684a:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 800684c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d11c      	bne.n	800688e <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4a11      	ldr	r2, [pc, #68]	; (800689c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8006858:	fba2 2303 	umull	r2, r3, r2, r3
 800685c:	099b      	lsrs	r3, r3, #6
 800685e:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4613      	mov	r3, r2
 8006878:	041b      	lsls	r3, r3, #16
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006880:	4a06      	ldr	r2, [pc, #24]	; (800689c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800688e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	10624dd3 	.word	0x10624dd3

080068a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80068ae:	f107 030c 	add.w	r3, r7, #12
 80068b2:	461a      	mov	r2, r3
 80068b4:	21f8      	movs	r1, #248	; 0xf8
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f004 f99c 	bl	800abf4 <VL53L0X_RdWord>
 80068bc:	4603      	mov	r3, r0
 80068be:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80068c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d108      	bne.n	80068da <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80068c8:	f107 0308 	add.w	r3, r7, #8
 80068cc:	461a      	mov	r2, r3
 80068ce:	2104      	movs	r1, #4
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f004 f9c7 	bl	800ac64 <VL53L0X_RdDWord>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10c      	bne.n	80068fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80068e2:	89bb      	ldrh	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	89ba      	ldrh	r2, [r7, #12]
 80068ec:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	7f1b      	ldrb	r3, [r3, #28]
 800691a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	7bba      	ldrb	r2, [r7, #14]
 8006920:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b086      	sub	sp, #24
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800693c:	2300      	movs	r3, #0
 800693e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006940:	f107 030e 	add.w	r3, r7, #14
 8006944:	461a      	mov	r2, r3
 8006946:	2120      	movs	r1, #32
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f004 f953 	bl	800abf4 <VL53L0X_RdWord>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006952:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d118      	bne.n	800698c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800695a:	89fb      	ldrh	r3, [r7, #14]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d109      	bne.n	8006974 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	771a      	strb	r2, [r3, #28]
 8006972:	e00b      	b.n	800698c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006974:	89fb      	ldrh	r3, [r7, #14]
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800698c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	807b      	strh	r3, [r7, #2]
 80069a4:	4613      	mov	r3, r2
 80069a6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069a8:	2300      	movs	r3, #0
 80069aa:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80069b8:	887b      	ldrh	r3, [r7, #2]
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	d902      	bls.n	80069c4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80069be:	23fc      	movs	r3, #252	; 0xfc
 80069c0:	75fb      	strb	r3, [r7, #23]
 80069c2:	e05b      	b.n	8006a7c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80069c4:	787b      	ldrb	r3, [r7, #1]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80069d2:	2301      	movs	r3, #1
 80069d4:	73bb      	strb	r3, [r7, #14]
 80069d6:	e00a      	b.n	80069ee <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80069d8:	887b      	ldrh	r3, [r7, #2]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	330c      	adds	r3, #12
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80069ea:	2301      	movs	r3, #1
 80069ec:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80069ee:	887b      	ldrh	r3, [r7, #2]
 80069f0:	2b05      	cmp	r3, #5
 80069f2:	d841      	bhi.n	8006a78 <VL53L0X_SetLimitCheckEnable+0xe0>
 80069f4:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <VL53L0X_SetLimitCheckEnable+0x64>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006a15 	.word	0x08006a15
 8006a00:	08006a1f 	.word	0x08006a1f
 8006a04:	08006a35 	.word	0x08006a35
 8006a08:	08006a3f 	.word	0x08006a3f
 8006a0c:	08006a49 	.word	0x08006a49
 8006a10:	08006a61 	.word	0x08006a61

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	7bfa      	ldrb	r2, [r7, #15]
 8006a18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006a1c:	e02e      	b.n	8006a7c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	2144      	movs	r1, #68	; 0x44
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f004 f97b 	bl	800ad24 <VL53L0X_WrWord>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	75fb      	strb	r3, [r7, #23]

			break;
 8006a32:	e023      	b.n	8006a7c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	7bfa      	ldrb	r2, [r7, #15]
 8006a38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006a3c:	e01e      	b.n	8006a7c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	7bfa      	ldrb	r2, [r7, #15]
 8006a42:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006a46:	e019      	b.n	8006a7c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006a4e:	7b7b      	ldrb	r3, [r7, #13]
 8006a50:	22fe      	movs	r2, #254	; 0xfe
 8006a52:	2160      	movs	r1, #96	; 0x60
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f004 f98f 	bl	800ad78 <VL53L0X_UpdateByte>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006a5e:	e00d      	b.n	8006a7c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006a66:	7b7b      	ldrb	r3, [r7, #13]
 8006a68:	22ef      	movs	r2, #239	; 0xef
 8006a6a:	2160      	movs	r1, #96	; 0x60
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f004 f983 	bl	800ad78 <VL53L0X_UpdateByte>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006a76:	e001      	b.n	8006a7c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a78:	23fc      	movs	r3, #252	; 0xfc
 8006a7a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10f      	bne.n	8006aa4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006a84:	787b      	ldrb	r3, [r7, #1]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a8a:	887b      	ldrh	r3, [r7, #2]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006a96:	e005      	b.n	8006aa4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a98:	887b      	ldrh	r3, [r7, #2]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006ac2:	897b      	ldrh	r3, [r7, #10]
 8006ac4:	2b05      	cmp	r3, #5
 8006ac6:	d905      	bls.n	8006ad4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ac8:	23fc      	movs	r3, #252	; 0xfc
 8006aca:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	e008      	b.n	8006ae6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006ad4:	897b      	ldrh	r3, [r7, #10]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ade:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	7dba      	ldrb	r2, [r7, #22]
 8006ae4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
	...

08006af8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	460b      	mov	r3, r1
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b06:	2300      	movs	r3, #0
 8006b08:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006b0a:	897b      	ldrh	r3, [r7, #10]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b14:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8006b16:	7dbb      	ldrb	r3, [r7, #22]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d107      	bne.n	8006b2c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b1c:	897b      	ldrh	r3, [r7, #10]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	330c      	adds	r3, #12
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	605a      	str	r2, [r3, #4]
 8006b2a:	e040      	b.n	8006bae <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006b2c:	897b      	ldrh	r3, [r7, #10]
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d830      	bhi.n	8006b94 <VL53L0X_SetLimitCheckValue+0x9c>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <VL53L0X_SetLimitCheckValue+0x40>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b51 	.word	0x08006b51
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	08006b6f 	.word	0x08006b6f
 8006b44:	08006b77 	.word	0x08006b77
 8006b48:	08006b7f 	.word	0x08006b7f
 8006b4c:	08006b7f 	.word	0x08006b7f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006b56:	e01f      	b.n	8006b98 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	461a      	mov	r2, r3
 8006b60:	2144      	movs	r1, #68	; 0x44
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f004 f8de 	bl	800ad24 <VL53L0X_WrWord>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006b6c:	e014      	b.n	8006b98 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006b74:	e010      	b.n	8006b98 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006b7c:	e00c      	b.n	8006b98 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	2164      	movs	r1, #100	; 0x64
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f004 f8cb 	bl	800ad24 <VL53L0X_WrWord>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006b92:	e001      	b.n	8006b98 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b94:	23fc      	movs	r3, #252	; 0xfc
 8006b96:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006ba0:	897b      	ldrh	r3, [r7, #10]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	330c      	adds	r3, #12
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop

08006bbc <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006bd2:	897b      	ldrh	r3, [r7, #10]
 8006bd4:	2b05      	cmp	r3, #5
 8006bd6:	d847      	bhi.n	8006c68 <VL53L0X_GetLimitCheckValue+0xac>
 8006bd8:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <VL53L0X_GetLimitCheckValue+0x24>)
 8006bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bde:	bf00      	nop
 8006be0:	08006bf9 	.word	0x08006bf9
 8006be4:	08006c05 	.word	0x08006c05
 8006be8:	08006c2b 	.word	0x08006c2b
 8006bec:	08006c37 	.word	0x08006c37
 8006bf0:	08006c43 	.word	0x08006c43
 8006bf4:	08006c43 	.word	0x08006c43

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	77bb      	strb	r3, [r7, #30]
		break;
 8006c02:	e033      	b.n	8006c6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006c04:	f107 0316 	add.w	r3, r7, #22
 8006c08:	461a      	mov	r2, r3
 8006c0a:	2144      	movs	r1, #68	; 0x44
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f003 fff1 	bl	800abf4 <VL53L0X_RdWord>
 8006c12:	4603      	mov	r3, r0
 8006c14:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006c16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d102      	bne.n	8006c24 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006c1e:	8afb      	ldrh	r3, [r7, #22]
 8006c20:	025b      	lsls	r3, r3, #9
 8006c22:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006c24:	2301      	movs	r3, #1
 8006c26:	77bb      	strb	r3, [r7, #30]
		break;
 8006c28:	e020      	b.n	8006c6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	77bb      	strb	r3, [r7, #30]
		break;
 8006c34:	e01a      	b.n	8006c6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	77bb      	strb	r3, [r7, #30]
		break;
 8006c40:	e014      	b.n	8006c6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006c42:	f107 0316 	add.w	r3, r7, #22
 8006c46:	461a      	mov	r2, r3
 8006c48:	2164      	movs	r1, #100	; 0x64
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f003 ffd2 	bl	800abf4 <VL53L0X_RdWord>
 8006c50:	4603      	mov	r3, r0
 8006c52:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006c5c:	8afb      	ldrh	r3, [r7, #22]
 8006c5e:	025b      	lsls	r3, r3, #9
 8006c60:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006c62:	2300      	movs	r3, #0
 8006c64:	77bb      	strb	r3, [r7, #30]
		break;
 8006c66:	e001      	b.n	8006c6c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c68:	23fc      	movs	r3, #252	; 0xfc
 8006c6a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d12a      	bne.n	8006cca <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006c74:	7fbb      	ldrb	r3, [r7, #30]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d124      	bne.n	8006cc4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d110      	bne.n	8006ca2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006c80:	897b      	ldrh	r3, [r7, #10]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	330c      	adds	r3, #12
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006c94:	897b      	ldrh	r3, [r7, #10]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4413      	add	r3, r2
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006ca0:	e013      	b.n	8006cca <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006ca8:	897b      	ldrh	r3, [r7, #10]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	330c      	adds	r3, #12
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006cb6:	897b      	ldrh	r3, [r7, #10]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006cc2:	e002      	b.n	8006cca <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cca:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop

08006cd8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006ce6:	f107 030e 	add.w	r3, r7, #14
 8006cea:	461a      	mov	r2, r3
 8006cec:	2101      	movs	r1, #1
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f003 fef9 	bl	800aae6 <VL53L0X_RdByte>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10e      	bne.n	8006d1e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006d00:	7bba      	ldrb	r2, [r7, #14]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	b25b      	sxtb	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	da03      	bge.n	8006d18 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2201      	movs	r2, #1
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e002      	b.n	8006d1e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d104      	bne.n	8006d30 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d44:	2300      	movs	r3, #0
 8006d46:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006d48:	f107 030e 	add.w	r3, r7, #14
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff fb92 	bl	8006478 <VL53L0X_GetDeviceMode>
 8006d54:	4603      	mov	r3, r0
 8006d56:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d107      	bne.n	8006d70 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f898 	bl	8006e9c <VL53L0X_StartMeasurement>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 fb09 	bl	8008390 <VL53L0X_measurement_poll_for_completion>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d103      	bne.n	8006d98 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2203      	movs	r2, #3
 8006d94:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006db4:	2301      	movs	r3, #1
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	68b9      	ldr	r1, [r7, #8]
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f001 faab 	bl	8008316 <VL53L0X_perform_ref_calibration>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006de6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006de8:	7dbb      	ldrb	r3, [r7, #22]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d005      	beq.n	8006dfa <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006dee:	7dbb      	ldrb	r3, [r7, #22]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d002      	beq.n	8006dfa <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006df4:	7dbb      	ldrb	r3, [r7, #22]
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d147      	bne.n	8006e8a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006dfa:	f107 030c 	add.w	r3, r7, #12
 8006dfe:	f107 0210 	add.w	r2, r7, #16
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fb8d 	bl	8007524 <VL53L0X_GetInterruptThresholds>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006e14:	d803      	bhi.n	8006e1e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8006e16:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006e18:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006e1c:	d935      	bls.n	8006e8a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d131      	bne.n	8006e8a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006e26:	78fb      	ldrb	r3, [r7, #3]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d006      	beq.n	8006e3a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006e2c:	491a      	ldr	r1, [pc, #104]	; (8006e98 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f002 ff22 	bl	8009c78 <VL53L0X_load_tuning_settings>
 8006e34:	4603      	mov	r3, r0
 8006e36:	75fb      	strb	r3, [r7, #23]
 8006e38:	e027      	b.n	8006e8a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	21ff      	movs	r1, #255	; 0xff
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f003 ff4c 	bl	800acdc <VL53L0X_WrByte>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2170      	movs	r1, #112	; 0x70
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f003 ff42 	bl	800acdc <VL53L0X_WrByte>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e62:	2200      	movs	r2, #0
 8006e64:	21ff      	movs	r1, #255	; 0xff
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f003 ff38 	bl	800acdc <VL53L0X_WrByte>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	461a      	mov	r2, r3
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006e76:	2200      	movs	r2, #0
 8006e78:	2180      	movs	r1, #128	; 0x80
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f003 ff2e 	bl	800acdc <VL53L0X_WrByte>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000238 	.word	0x20000238

08006e9c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006eac:	f107 030e 	add.w	r3, r7, #14
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff fae0 	bl	8006478 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d052      	beq.n	8006f64 <VL53L0X_StartMeasurement+0xc8>
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	dc6a      	bgt.n	8006f98 <VL53L0X_StartMeasurement+0xfc>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <VL53L0X_StartMeasurement+0x30>
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d032      	beq.n	8006f30 <VL53L0X_StartMeasurement+0x94>
 8006eca:	e065      	b.n	8006f98 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006ecc:	2201      	movs	r2, #1
 8006ece:	2100      	movs	r1, #0
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f003 ff03 	bl	800acdc <VL53L0X_WrByte>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006ede:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d15b      	bne.n	8006f9e <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 8006ef0:	f107 030d 	add.w	r3, r7, #13
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f003 fdf4 	bl	800aae6 <VL53L0X_RdByte>
 8006efe:	4603      	mov	r3, r0
 8006f00:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	3301      	adds	r3, #1
 8006f06:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8006f08:	7b7a      	ldrb	r2, [r7, #13]
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006f10:	7bfa      	ldrb	r2, [r7, #15]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d106      	bne.n	8006f24 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 8006f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	2bc7      	cmp	r3, #199	; 0xc7
 8006f22:	d9e2      	bls.n	8006eea <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2bc7      	cmp	r3, #199	; 0xc7
 8006f28:	d939      	bls.n	8006f9e <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006f2a:	23f9      	movs	r3, #249	; 0xf9
 8006f2c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006f2e:	e036      	b.n	8006f9e <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d105      	bne.n	8006f44 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006f38:	2101      	movs	r1, #1
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff ff48 	bl	8006dd0 <VL53L0X_CheckAndLoadInterruptSettings>
 8006f40:	4603      	mov	r3, r0
 8006f42:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006f44:	2202      	movs	r2, #2
 8006f46:	2100      	movs	r1, #0
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f003 fec7 	bl	800acdc <VL53L0X_WrByte>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d123      	bne.n	8006fa2 <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2204      	movs	r2, #4
 8006f5e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006f62:	e01e      	b.n	8006fa2 <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d105      	bne.n	8006f78 <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff ff2e 	bl	8006dd0 <VL53L0X_CheckAndLoadInterruptSettings>
 8006f74:	4603      	mov	r3, r0
 8006f76:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006f78:	2204      	movs	r2, #4
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f003 fead 	bl	800acdc <VL53L0X_WrByte>
 8006f82:	4603      	mov	r3, r0
 8006f84:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10b      	bne.n	8006fa6 <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2204      	movs	r2, #4
 8006f92:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006f96:	e006      	b.n	8006fa6 <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006f98:	23f8      	movs	r3, #248	; 0xf8
 8006f9a:	75fb      	strb	r3, [r7, #23]
 8006f9c:	e004      	b.n	8006fa8 <VL53L0X_StartMeasurement+0x10c>
		break;
 8006f9e:	bf00      	nop
 8006fa0:	e002      	b.n	8006fa8 <VL53L0X_StartMeasurement+0x10c>
		break;
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <VL53L0X_StartMeasurement+0x10c>
		break;
 8006fa6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006fc8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d112      	bne.n	8006ff6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006fd0:	f107 0308 	add.w	r3, r7, #8
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fb1a 	bl	8007610 <VL53L0X_GetInterruptMaskStatus>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d103      	bne.n	8006fee <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e01c      	b.n	8007028 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
 8006ff4:	e018      	b.n	8007028 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006ff6:	f107 030d 	add.w	r3, r7, #13
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	2114      	movs	r1, #20
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f003 fd71 	bl	800aae6 <VL53L0X_RdByte>
 8007004:	4603      	mov	r3, r0
 8007006:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10b      	bne.n	8007028 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007010:	7b7b      	ldrb	r3, [r7, #13]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2201      	movs	r2, #1
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	e002      	b.n	8007028 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007034:	b5b0      	push	{r4, r5, r7, lr}
 8007036:	b096      	sub	sp, #88	; 0x58
 8007038:	af02      	add	r7, sp, #8
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800703e:	2300      	movs	r3, #0
 8007040:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007044:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007048:	230c      	movs	r3, #12
 800704a:	2114      	movs	r1, #20
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f003 fda5 	bl	800ab9c <VL53L0X_ReadMulti>
 8007052:	4603      	mov	r3, r0
 8007054:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007058:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800705c:	2b00      	cmp	r3, #0
 800705e:	f040 80d1 	bne.w	8007204 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2200      	movs	r2, #0
 8007066:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800706e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007072:	b29b      	uxth	r3, r3
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	b29a      	uxth	r2, r3
 8007078:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800707c:	b29b      	uxth	r3, r3
 800707e:	4413      	add	r3, r2
 8007080:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2200      	movs	r2, #0
 8007088:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800708a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800708e:	b29b      	uxth	r3, r3
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	b29a      	uxth	r2, r3
 8007094:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007098:	b29b      	uxth	r3, r3
 800709a:	4413      	add	r3, r2
 800709c:	b29b      	uxth	r3, r3
 800709e:	025b      	lsls	r3, r3, #9
 80070a0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070a6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80070a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	4413      	add	r3, r2
 80070ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80070be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80070c2:	025b      	lsls	r3, r3, #9
 80070c4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80070ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070d8:	b29b      	uxth	r3, r3
 80070da:	4413      	add	r3, r2
 80070dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80070e6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80070e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80070ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 80070f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80070fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007102:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007108:	d046      	beq.n	8007198 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800710a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800710c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007110:	fb02 f303 	mul.w	r3, r2, r3
 8007114:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007118:	4a57      	ldr	r2, [pc, #348]	; (8007278 <VL53L0X_GetRangingMeasurementData+0x244>)
 800711a:	fb82 1203 	smull	r1, r2, r2, r3
 800711e:	1192      	asrs	r2, r2, #6
 8007120:	17db      	asrs	r3, r3, #31
 8007122:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007124:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	7f1b      	ldrb	r3, [r3, #28]
 8007132:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8007136:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800713a:	2b00      	cmp	r3, #0
 800713c:	d02c      	beq.n	8007198 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800713e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007140:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007144:	fb02 f303 	mul.w	r3, r2, r3
 8007148:	121a      	asrs	r2, r3, #8
					<= 0) {
 800714a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800714c:	429a      	cmp	r2, r3
 800714e:	d10d      	bne.n	800716c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007150:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007158:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800715c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007160:	e016      	b.n	8007190 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8007162:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007166:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800716a:	e011      	b.n	8007190 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800716c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007172:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007176:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007178:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800717c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007180:	121b      	asrs	r3, r3, #8
 8007182:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007186:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007188:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800718c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007190:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007194:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007198:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00d      	beq.n	80071bc <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80071a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071a4:	089b      	lsrs	r3, r3, #2
 80071a6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80071ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	019b      	lsls	r3, r3, #6
 80071b4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	75da      	strb	r2, [r3, #23]
 80071ba:	e006      	b.n	80071ca <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80071c2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2200      	movs	r2, #0
 80071c8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80071ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80071ce:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80071d2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	4613      	mov	r3, r2
 80071de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f003 f9ab 	bl	800a53c <VL53L0X_get_pal_range_status>
 80071e6:	4603      	mov	r3, r0
 80071e8:	461a      	mov	r2, r3
 80071ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80071f4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d103      	bne.n	8007204 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80071fc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007204:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007208:	2b00      	cmp	r3, #0
 800720a:	d12f      	bne.n	800726c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f107 040c 	add.w	r4, r7, #12
 8007212:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8007216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800721a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800721e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8007226:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800722c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8007234:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800723a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007240:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8007246:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800724c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007252:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800725c:	f107 050c 	add.w	r5, r7, #12
 8007260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007268:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800726c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007270:	4618      	mov	r0, r3
 8007272:	3750      	adds	r7, #80	; 0x50
 8007274:	46bd      	mov	sp, r7
 8007276:	bdb0      	pop	{r4, r5, r7, pc}
 8007278:	10624dd3 	.word	0x10624dd3

0800727c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800728a:	2100      	movs	r1, #0
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff f8c7 	bl	8006420 <VL53L0X_SetDeviceMode>
 8007292:	4603      	mov	r3, r0
 8007294:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d104      	bne.n	80072a8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff fd4c 	bl	8006d3c <VL53L0X_PerformSingleMeasurement>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80072a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d105      	bne.n	80072bc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff febe 	bl	8007034 <VL53L0X_GetRangingMeasurementData>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80072bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d105      	bne.n	80072d0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80072c4:	2100      	movs	r1, #0
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f962 	bl	8007590 <VL53L0X_ClearInterruptMask>
 80072cc:	4603      	mov	r3, r0
 80072ce:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80072d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	4608      	mov	r0, r1
 80072e6:	4611      	mov	r1, r2
 80072e8:	461a      	mov	r2, r3
 80072ea:	4603      	mov	r3, r0
 80072ec:	70fb      	strb	r3, [r7, #3]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70bb      	strb	r3, [r7, #2]
 80072f2:	4613      	mov	r3, r2
 80072f4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072f6:	2300      	movs	r3, #0
 80072f8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007300:	23f6      	movs	r3, #246	; 0xf6
 8007302:	73fb      	strb	r3, [r7, #15]
 8007304:	e107      	b.n	8007516 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8007306:	78bb      	ldrb	r3, [r7, #2]
 8007308:	2b14      	cmp	r3, #20
 800730a:	d110      	bne.n	800732e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800730c:	7e3b      	ldrb	r3, [r7, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d102      	bne.n	8007318 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007312:	2310      	movs	r3, #16
 8007314:	73bb      	strb	r3, [r7, #14]
 8007316:	e001      	b.n	800731c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007318:	2301      	movs	r3, #1
 800731a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	461a      	mov	r2, r3
 8007320:	2184      	movs	r1, #132	; 0x84
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f003 fcda 	bl	800acdc <VL53L0X_WrByte>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]
 800732c:	e0f3      	b.n	8007516 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800732e:	78bb      	ldrb	r3, [r7, #2]
 8007330:	2b15      	cmp	r3, #21
 8007332:	f040 8097 	bne.w	8007464 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007336:	2201      	movs	r2, #1
 8007338:	21ff      	movs	r1, #255	; 0xff
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f003 fcce 	bl	800acdc <VL53L0X_WrByte>
 8007340:	4603      	mov	r3, r0
 8007342:	461a      	mov	r2, r3
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	4313      	orrs	r3, r2
 8007348:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800734a:	2200      	movs	r2, #0
 800734c:	2100      	movs	r1, #0
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f003 fcc4 	bl	800acdc <VL53L0X_WrByte>
 8007354:	4603      	mov	r3, r0
 8007356:	461a      	mov	r2, r3
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	4313      	orrs	r3, r2
 800735c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800735e:	2200      	movs	r2, #0
 8007360:	21ff      	movs	r1, #255	; 0xff
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f003 fcba 	bl	800acdc <VL53L0X_WrByte>
 8007368:	4603      	mov	r3, r0
 800736a:	461a      	mov	r2, r3
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	4313      	orrs	r3, r2
 8007370:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007372:	2201      	movs	r2, #1
 8007374:	2180      	movs	r1, #128	; 0x80
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f003 fcb0 	bl	800acdc <VL53L0X_WrByte>
 800737c:	4603      	mov	r3, r0
 800737e:	461a      	mov	r2, r3
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	4313      	orrs	r3, r2
 8007384:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8007386:	2202      	movs	r2, #2
 8007388:	2185      	movs	r1, #133	; 0x85
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f003 fca6 	bl	800acdc <VL53L0X_WrByte>
 8007390:	4603      	mov	r3, r0
 8007392:	461a      	mov	r2, r3
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	4313      	orrs	r3, r2
 8007398:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800739a:	2204      	movs	r2, #4
 800739c:	21ff      	movs	r1, #255	; 0xff
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f003 fc9c 	bl	800acdc <VL53L0X_WrByte>
 80073a4:	4603      	mov	r3, r0
 80073a6:	461a      	mov	r2, r3
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80073ae:	2200      	movs	r2, #0
 80073b0:	21cd      	movs	r1, #205	; 0xcd
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f003 fc92 	bl	800acdc <VL53L0X_WrByte>
 80073b8:	4603      	mov	r3, r0
 80073ba:	461a      	mov	r2, r3
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	4313      	orrs	r3, r2
 80073c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80073c2:	2211      	movs	r2, #17
 80073c4:	21cc      	movs	r1, #204	; 0xcc
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f003 fc88 	bl	800acdc <VL53L0X_WrByte>
 80073cc:	4603      	mov	r3, r0
 80073ce:	461a      	mov	r2, r3
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80073d6:	2207      	movs	r2, #7
 80073d8:	21ff      	movs	r1, #255	; 0xff
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f003 fc7e 	bl	800acdc <VL53L0X_WrByte>
 80073e0:	4603      	mov	r3, r0
 80073e2:	461a      	mov	r2, r3
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80073ea:	2200      	movs	r2, #0
 80073ec:	21be      	movs	r1, #190	; 0xbe
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f003 fc74 	bl	800acdc <VL53L0X_WrByte>
 80073f4:	4603      	mov	r3, r0
 80073f6:	461a      	mov	r2, r3
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80073fe:	2206      	movs	r2, #6
 8007400:	21ff      	movs	r1, #255	; 0xff
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f003 fc6a 	bl	800acdc <VL53L0X_WrByte>
 8007408:	4603      	mov	r3, r0
 800740a:	461a      	mov	r2, r3
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	4313      	orrs	r3, r2
 8007410:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007412:	2209      	movs	r2, #9
 8007414:	21cc      	movs	r1, #204	; 0xcc
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f003 fc60 	bl	800acdc <VL53L0X_WrByte>
 800741c:	4603      	mov	r3, r0
 800741e:	461a      	mov	r2, r3
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	4313      	orrs	r3, r2
 8007424:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007426:	2200      	movs	r2, #0
 8007428:	21ff      	movs	r1, #255	; 0xff
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f003 fc56 	bl	800acdc <VL53L0X_WrByte>
 8007430:	4603      	mov	r3, r0
 8007432:	461a      	mov	r2, r3
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	4313      	orrs	r3, r2
 8007438:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800743a:	2201      	movs	r2, #1
 800743c:	21ff      	movs	r1, #255	; 0xff
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f003 fc4c 	bl	800acdc <VL53L0X_WrByte>
 8007444:	4603      	mov	r3, r0
 8007446:	461a      	mov	r2, r3
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	4313      	orrs	r3, r2
 800744c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800744e:	2200      	movs	r2, #0
 8007450:	2100      	movs	r1, #0
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f003 fc42 	bl	800acdc <VL53L0X_WrByte>
 8007458:	4603      	mov	r3, r0
 800745a:	461a      	mov	r2, r3
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	4313      	orrs	r3, r2
 8007460:	73fb      	strb	r3, [r7, #15]
 8007462:	e058      	b.n	8007516 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d121      	bne.n	80074b0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800746c:	787b      	ldrb	r3, [r7, #1]
 800746e:	2b04      	cmp	r3, #4
 8007470:	d81b      	bhi.n	80074aa <VL53L0X_SetGpioConfig+0x1ce>
 8007472:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <VL53L0X_SetGpioConfig+0x19c>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	0800748d 	.word	0x0800748d
 800747c:	08007493 	.word	0x08007493
 8007480:	08007499 	.word	0x08007499
 8007484:	0800749f 	.word	0x0800749f
 8007488:	080074a5 	.word	0x080074a5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800748c:	2300      	movs	r3, #0
 800748e:	73bb      	strb	r3, [r7, #14]
				break;
 8007490:	e00f      	b.n	80074b2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8007492:	2301      	movs	r3, #1
 8007494:	73bb      	strb	r3, [r7, #14]
				break;
 8007496:	e00c      	b.n	80074b2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007498:	2302      	movs	r3, #2
 800749a:	73bb      	strb	r3, [r7, #14]
				break;
 800749c:	e009      	b.n	80074b2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800749e:	2303      	movs	r3, #3
 80074a0:	73bb      	strb	r3, [r7, #14]
				break;
 80074a2:	e006      	b.n	80074b2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80074a4:	2304      	movs	r3, #4
 80074a6:	73bb      	strb	r3, [r7, #14]
				break;
 80074a8:	e003      	b.n	80074b2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80074aa:	23f5      	movs	r3, #245	; 0xf5
 80074ac:	73fb      	strb	r3, [r7, #15]
 80074ae:	e000      	b.n	80074b2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80074b0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80074b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d107      	bne.n	80074ca <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	461a      	mov	r2, r3
 80074be:	210a      	movs	r1, #10
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f003 fc0b 	bl	800acdc <VL53L0X_WrByte>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80074ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10f      	bne.n	80074f2 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80074d2:	7e3b      	ldrb	r3, [r7, #24]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	73bb      	strb	r3, [r7, #14]
 80074dc:	e001      	b.n	80074e2 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80074de:	2310      	movs	r3, #16
 80074e0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	22ef      	movs	r2, #239	; 0xef
 80074e6:	2184      	movs	r1, #132	; 0x84
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f003 fc45 	bl	800ad78 <VL53L0X_UpdateByte>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80074f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d103      	bne.n	8007502 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	787a      	ldrb	r2, [r7, #1]
 80074fe:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d105      	bne.n	8007516 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800750a:	2100      	movs	r1, #0
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f83f 	bl	8007590 <VL53L0X_ClearInterruptMask>
 8007512:	4603      	mov	r3, r0
 8007514:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007516:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop

08007524 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	460b      	mov	r3, r1
 8007532:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007534:	2300      	movs	r3, #0
 8007536:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	461a      	mov	r2, r3
 800753e:	210e      	movs	r1, #14
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f003 fb57 	bl	800abf4 <VL53L0X_RdWord>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800754a:	8abb      	ldrh	r3, [r7, #20]
 800754c:	045b      	lsls	r3, r3, #17
 800754e:	461a      	mov	r2, r3
 8007550:	4b0e      	ldr	r3, [pc, #56]	; (800758c <VL53L0X_GetInterruptThresholds+0x68>)
 8007552:	4013      	ands	r3, r2
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007558:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10f      	bne.n	8007580 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007560:	f107 0314 	add.w	r3, r7, #20
 8007564:	461a      	mov	r2, r3
 8007566:	210c      	movs	r1, #12
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f003 fb43 	bl	800abf4 <VL53L0X_RdWord>
 800756e:	4603      	mov	r3, r0
 8007570:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007572:	8abb      	ldrh	r3, [r7, #20]
 8007574:	045b      	lsls	r3, r3, #17
 8007576:	461a      	mov	r2, r3
 8007578:	4b04      	ldr	r3, [pc, #16]	; (800758c <VL53L0X_GetInterruptThresholds+0x68>)
 800757a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007580:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	1ffe0000 	.word	0x1ffe0000

08007590 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80075a2:	2201      	movs	r2, #1
 80075a4:	210b      	movs	r1, #11
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f003 fb98 	bl	800acdc <VL53L0X_WrByte>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80075b0:	2200      	movs	r2, #0
 80075b2:	210b      	movs	r1, #11
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f003 fb91 	bl	800acdc <VL53L0X_WrByte>
 80075ba:	4603      	mov	r3, r0
 80075bc:	461a      	mov	r2, r3
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80075c4:	f107 030d 	add.w	r3, r7, #13
 80075c8:	461a      	mov	r2, r3
 80075ca:	2113      	movs	r1, #19
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f003 fa8a 	bl	800aae6 <VL53L0X_RdByte>
 80075d2:	4603      	mov	r3, r0
 80075d4:	461a      	mov	r2, r3
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	4313      	orrs	r3, r2
 80075da:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80075dc:	7bbb      	ldrb	r3, [r7, #14]
 80075de:	3301      	adds	r3, #1
 80075e0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80075e2:	7b7b      	ldrb	r3, [r7, #13]
 80075e4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d006      	beq.n	80075fa <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d803      	bhi.n	80075fa <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80075f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0d3      	beq.n	80075a2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d901      	bls.n	8007604 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007600:	23f4      	movs	r3, #244	; 0xf4
 8007602:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800761e:	f107 030e 	add.w	r3, r7, #14
 8007622:	461a      	mov	r2, r3
 8007624:	2113      	movs	r1, #19
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f003 fa5d 	bl	800aae6 <VL53L0X_RdByte>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	f003 0207 	and.w	r2, r3, #7
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800763a:	7bbb      	ldrb	r3, [r7, #14]
 800763c:	f003 0318 	and.w	r3, r3, #24
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007644:	23fa      	movs	r3, #250	; 0xfa
 8007646:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007660:	2300      	movs	r3, #0
 8007662:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	68b9      	ldr	r1, [r7, #8]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fa03 	bl	8007a74 <VL53L0X_perform_ref_spad_management>
 800766e:	4603      	mov	r3, r0
 8007670:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007688:	2300      	movs	r3, #0
 800768a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800768c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007690:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007696:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007698:	f107 0308 	add.w	r3, r7, #8
 800769c:	461a      	mov	r2, r3
 800769e:	2128      	movs	r1, #40	; 0x28
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f003 faa7 	bl	800abf4 <VL53L0X_RdWord>
 80076a6:	4603      	mov	r3, r0
 80076a8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80076aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d11e      	bne.n	80076f0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80076b2:	893b      	ldrh	r3, [r7, #8]
 80076b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80076bc:	893b      	ldrh	r3, [r7, #8]
 80076be:	461a      	mov	r2, r3
 80076c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	dd0b      	ble.n	80076e0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80076c8:	893a      	ldrh	r2, [r7, #8]
 80076ca:	897b      	ldrh	r3, [r7, #10]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	b21b      	sxth	r3, r3
 80076d2:	461a      	mov	r2, r3
					* 250;
 80076d4:	23fa      	movs	r3, #250	; 0xfa
 80076d6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	e007      	b.n	80076f0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80076e0:	893b      	ldrh	r3, [r7, #8]
 80076e2:	b21b      	sxth	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	23fa      	movs	r3, #250	; 0xfa
 80076e8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80076f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b08b      	sub	sp, #44	; 0x2c
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800770a:	2308      	movs	r3, #8
 800770c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	f04f 32ff 	mov.w	r2, #4294967295
 8007718:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007722:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	fbb3 f2f2 	udiv	r2, r3, r2
 800772c:	69b9      	ldr	r1, [r7, #24]
 800772e:	fb01 f202 	mul.w	r2, r1, r2
 8007732:	1a9b      	subs	r3, r3, r2
 8007734:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
 800773a:	e030      	b.n	800779e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	4413      	add	r3, r2
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800774a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	429a      	cmp	r2, r3
 8007750:	d11e      	bne.n	8007790 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007752:	7ffa      	ldrb	r2, [r7, #31]
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	fa42 f303 	asr.w	r3, r2, r3
 800775a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007760:	e016      	b.n	8007790 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007762:	7ffb      	ldrb	r3, [r7, #31]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <get_next_good_spad+0x88>
				success = 1;
 800776c:	2301      	movs	r3, #1
 800776e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	fb02 f203 	mul.w	r2, r2, r3
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	4413      	add	r3, r2
 800777c:	461a      	mov	r2, r3
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	601a      	str	r2, [r3, #0]
				break;
 8007782:	e009      	b.n	8007798 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007784:	7ffb      	ldrb	r3, [r7, #31]
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	3301      	adds	r3, #1
 800778e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007790:	6a3a      	ldr	r2, [r7, #32]
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	429a      	cmp	r2, r3
 8007796:	d3e4      	bcc.n	8007762 <get_next_good_spad+0x66>
				coarseIndex++) {
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	3301      	adds	r3, #1
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800779e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d202      	bcs.n	80077ac <get_next_good_spad+0xb0>
 80077a6:	7fbb      	ldrb	r3, [r7, #30]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d0c7      	beq.n	800773c <get_next_good_spad+0x40>
		}
	}
}
 80077ac:	bf00      	nop
 80077ae:	372c      	adds	r7, #44	; 0x2c
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80077c0:	2301      	movs	r3, #1
 80077c2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80077ca:	4a07      	ldr	r2, [pc, #28]	; (80077e8 <is_aperture+0x30>)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <is_aperture+0x22>
		isAperture = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80077da:	7bfb      	ldrb	r3, [r7, #15]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	200003f0 	.word	0x200003f0

080077ec <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b089      	sub	sp, #36	; 0x24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80077f8:	2300      	movs	r3, #0
 80077fa:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80077fc:	2308      	movs	r3, #8
 80077fe:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	fbb2 f3f3 	udiv	r3, r2, r3
 8007808:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007812:	69b9      	ldr	r1, [r7, #24]
 8007814:	fb01 f202 	mul.w	r2, r1, r2
 8007818:	1a9b      	subs	r3, r3, r2
 800781a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	429a      	cmp	r2, r3
 8007822:	d302      	bcc.n	800782a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007824:	23ce      	movs	r3, #206	; 0xce
 8007826:	77fb      	strb	r3, [r7, #31]
 8007828:	e010      	b.n	800784c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	4413      	add	r3, r2
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b25a      	sxtb	r2, r3
 8007834:	2101      	movs	r1, #1
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	fa01 f303 	lsl.w	r3, r1, r3
 800783c:	b25b      	sxtb	r3, r3
 800783e:	4313      	orrs	r3, r2
 8007840:	b259      	sxtb	r1, r3
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	4413      	add	r3, r2
 8007848:	b2ca      	uxtb	r2, r1
 800784a:	701a      	strb	r2, [r3, #0]

	return status;
 800784c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3724      	adds	r7, #36	; 0x24
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007866:	2306      	movs	r3, #6
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	21b0      	movs	r1, #176	; 0xb0
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f003 f965 	bl	800ab3c <VL53L0X_WriteMulti>
 8007872:	4603      	mov	r3, r0
 8007874:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007876:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800788c:	2306      	movs	r3, #6
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	21b0      	movs	r1, #176	; 0xb0
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f003 f982 	bl	800ab9c <VL53L0X_ReadMulti>
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800789c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08c      	sub	sp, #48	; 0x30
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	607a      	str	r2, [r7, #4]
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	460b      	mov	r3, r1
 80078b6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80078b8:	2300      	movs	r3, #0
 80078ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80078be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80078c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80078c6:	2300      	movs	r3, #0
 80078c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80078ca:	e02b      	b.n	8007924 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80078cc:	f107 031c 	add.w	r3, r7, #28
 80078d0:	6a3a      	ldr	r2, [r7, #32]
 80078d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff ff11 	bl	80076fc <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e0:	d103      	bne.n	80078ea <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80078e2:	23ce      	movs	r3, #206	; 0xce
 80078e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80078e8:	e020      	b.n	800792c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	461a      	mov	r2, r3
 80078ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f0:	4413      	add	r3, r2
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff ff60 	bl	80077b8 <is_aperture>
 80078f8:	4603      	mov	r3, r0
 80078fa:	461a      	mov	r2, r3
 80078fc:	7afb      	ldrb	r3, [r7, #11]
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007902:	23ce      	movs	r3, #206	; 0xce
 8007904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007908:	e010      	b.n	800792c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800790e:	6a3a      	ldr	r2, [r7, #32]
 8007910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007912:	6838      	ldr	r0, [r7, #0]
 8007914:	f7ff ff6a 	bl	80077ec <enable_spad_bit>
		currentSpad++;
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	3301      	adds	r3, #1
 800791c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	3301      	adds	r3, #1
 8007922:	62bb      	str	r3, [r7, #40]	; 0x28
 8007924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007928:	429a      	cmp	r2, r3
 800792a:	d3cf      	bcc.n	80078cc <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800792c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800792e:	6a3a      	ldr	r2, [r7, #32]
 8007930:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007932:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff ff8d 	bl	800785c <set_ref_spad_map>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007948:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800794c:	2b00      	cmp	r3, #0
 800794e:	d121      	bne.n	8007994 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007950:	f107 0314 	add.w	r3, r7, #20
 8007954:	4619      	mov	r1, r3
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff ff93 	bl	8007882 <get_ref_spad_map>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007966:	e011      	b.n	800798c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	4413      	add	r3, r2
 800796e:	781a      	ldrb	r2, [r3, #0]
 8007970:	f107 0114 	add.w	r1, r7, #20
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	440b      	add	r3, r1
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d003      	beq.n	8007986 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800797e:	23ce      	movs	r3, #206	; 0xce
 8007980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007984:	e006      	b.n	8007994 <enable_ref_spads+0xec>
			}
			i++;
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	3301      	adds	r3, #1
 800798a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800798c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	429a      	cmp	r2, r3
 8007992:	d3e9      	bcc.n	8007968 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007994:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007998:	4618      	mov	r0, r3
 800799a:	3730      	adds	r7, #48	; 0x30
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	; 0x28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80079aa:	2300      	movs	r3, #0
 80079ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80079bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80079c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d107      	bne.n	80079d8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80079c8:	22c0      	movs	r2, #192	; 0xc0
 80079ca:	2101      	movs	r1, #1
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f003 f985 	bl	800acdc <VL53L0X_WrByte>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80079d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d108      	bne.n	80079f2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80079e0:	f107 0308 	add.w	r3, r7, #8
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff fc48 	bl	800727c <VL53L0X_PerformSingleRangingMeasurement>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80079f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d107      	bne.n	8007a0a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80079fa:	2201      	movs	r2, #1
 80079fc:	21ff      	movs	r1, #255	; 0xff
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f003 f96c 	bl	800acdc <VL53L0X_WrByte>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007a0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d107      	bne.n	8007a22 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	21b6      	movs	r1, #182	; 0xb6
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f003 f8ec 	bl	800abf4 <VL53L0X_RdWord>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007a22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d107      	bne.n	8007a3a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	21ff      	movs	r1, #255	; 0xff
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f003 f954 	bl	800acdc <VL53L0X_WrByte>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007a3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d112      	bne.n	8007a68 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007a42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a46:	461a      	mov	r2, r3
 8007a48:	2101      	movs	r1, #1
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f003 f946 	bl	800acdc <VL53L0X_WrByte>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007a56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d104      	bne.n	8007a68 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a64:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007a68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3728      	adds	r7, #40	; 0x28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007a74:	b590      	push	{r4, r7, lr}
 8007a76:	b09d      	sub	sp, #116	; 0x74
 8007a78:	af06      	add	r7, sp, #24
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a80:	2300      	movs	r3, #0
 8007a82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007a86:	23b4      	movs	r3, #180	; 0xb4
 8007a88:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007a90:	232c      	movs	r3, #44	; 0x2c
 8007a92:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007aa0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007aa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007aae:	2306      	movs	r3, #6
 8007ab0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 8007ad8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007ada:	2300      	movs	r3, #0
 8007adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ade:	e009      	b.n	8007af4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007aea:	2200      	movs	r2, #0
 8007aec:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007af0:	3301      	adds	r3, #1
 8007af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d3f1      	bcc.n	8007ae0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007afc:	2201      	movs	r2, #1
 8007afe:	21ff      	movs	r1, #255	; 0xff
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f003 f8eb 	bl	800acdc <VL53L0X_WrByte>
 8007b06:	4603      	mov	r3, r0
 8007b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007b0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d107      	bne.n	8007b24 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8007b14:	2200      	movs	r2, #0
 8007b16:	214f      	movs	r1, #79	; 0x4f
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f003 f8df 	bl	800acdc <VL53L0X_WrByte>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007b24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d107      	bne.n	8007b3c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007b2c:	222c      	movs	r2, #44	; 0x2c
 8007b2e:	214e      	movs	r1, #78	; 0x4e
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f003 f8d3 	bl	800acdc <VL53L0X_WrByte>
 8007b36:	4603      	mov	r3, r0
 8007b38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007b3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d107      	bne.n	8007b54 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b44:	2200      	movs	r2, #0
 8007b46:	21ff      	movs	r1, #255	; 0xff
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f003 f8c7 	bl	800acdc <VL53L0X_WrByte>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007b54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d109      	bne.n	8007b70 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007b5c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007b60:	461a      	mov	r2, r3
 8007b62:	21b6      	movs	r1, #182	; 0xb6
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f003 f8b9 	bl	800acdc <VL53L0X_WrByte>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007b70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d107      	bne.n	8007b88 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2180      	movs	r1, #128	; 0x80
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f003 f8ad 	bl	800acdc <VL53L0X_WrByte>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007b88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007b90:	f107 0210 	add.w	r2, r7, #16
 8007b94:	f107 0111 	add.w	r1, r7, #17
 8007b98:	2300      	movs	r3, #0
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 fbbb 	bl	8008316 <VL53L0X_perform_ref_calibration>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007ba6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d121      	bne.n	8007bf2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bbc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007bca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007bce:	f107 0218 	add.w	r2, r7, #24
 8007bd2:	9204      	str	r2, [sp, #16]
 8007bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bd6:	9203      	str	r2, [sp, #12]
 8007bd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bda:	9202      	str	r2, [sp, #8]
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	4623      	mov	r3, r4
 8007be4:	4602      	mov	r2, r0
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f7ff fe5e 	bl	80078a8 <enable_ref_spads>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007bf2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d174      	bne.n	8007ce4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007bfe:	f107 0312 	add.w	r3, r7, #18
 8007c02:	4619      	mov	r1, r3
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f7ff fecb 	bl	80079a0 <perform_ref_signal_measurement>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007c10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d161      	bne.n	8007cdc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007c18:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007c1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d25d      	bcs.n	8007cdc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007c20:	2300      	movs	r3, #0
 8007c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c24:	e009      	b.n	8007c3a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007c30:	2200      	movs	r2, #0
 8007c32:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c36:	3301      	adds	r3, #1
 8007c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d3f1      	bcc.n	8007c26 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007c42:	e002      	b.n	8007c4a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c46:	3301      	adds	r3, #1
 8007c48:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007c4a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c50:	4413      	add	r3, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fdb0 	bl	80077b8 <is_aperture>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007c5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d3ee      	bcc.n	8007c44 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007c66:	2301      	movs	r3, #1
 8007c68:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c6c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007c7a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007c7e:	f107 0218 	add.w	r2, r7, #24
 8007c82:	9204      	str	r2, [sp, #16]
 8007c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c86:	9203      	str	r2, [sp, #12]
 8007c88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c8a:	9202      	str	r2, [sp, #8]
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	4623      	mov	r3, r4
 8007c94:	4602      	mov	r2, r0
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff fe06 	bl	80078a8 <enable_ref_spads>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007ca2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d11b      	bne.n	8007ce2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007cae:	f107 0312 	add.w	r3, r7, #18
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f7ff fe73 	bl	80079a0 <perform_ref_signal_measurement>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007cc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10c      	bne.n	8007ce2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007cc8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007cca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d208      	bcs.n	8007ce2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007cda:	e002      	b.n	8007ce2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ce0:	e000      	b.n	8007ce4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007ce2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007ce4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f040 80af 	bne.w	8007e4c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007cee:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007cf0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	f240 80aa 	bls.w	8007e4c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007d08:	f107 031c 	add.w	r3, r7, #28
 8007d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f00a f917 	bl	8011f42 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007d14:	8a7b      	ldrh	r3, [r7, #18]
 8007d16:	461a      	mov	r2, r3
 8007d18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bfb8      	it	lt
 8007d20:	425b      	neglt	r3, r3
 8007d22:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8007d2a:	e086      	b.n	8007e3a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007d32:	f107 0314 	add.w	r3, r7, #20
 8007d36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d3a:	f7ff fcdf 	bl	80076fc <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d44:	d103      	bne.n	8007d4e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007d46:	23ce      	movs	r3, #206	; 0xce
 8007d48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007d4c:	e07e      	b.n	8007e4c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8007d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d50:	3301      	adds	r3, #1
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007d54:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff fd2b 	bl	80077b8 <is_aperture>
 8007d62:	4603      	mov	r3, r0
 8007d64:	461a      	mov	r2, r3
 8007d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d003      	beq.n	8007d74 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007d6c:	23ce      	movs	r3, #206	; 0xce
 8007d6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007d72:	e06b      	b.n	8007e4c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007d7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff fd32 	bl	80077ec <enable_spad_bit>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007d8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10c      	bne.n	8007db0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d98:	3301      	adds	r3, #1
 8007d9a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8007da2:	4619      	mov	r1, r3
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f7ff fd59 	bl	800785c <set_ref_spad_map>
 8007daa:	4603      	mov	r3, r0
 8007dac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007db0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d146      	bne.n	8007e46 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007db8:	f107 0312 	add.w	r3, r7, #18
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f7ff fdee 	bl	80079a0 <perform_ref_signal_measurement>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007dca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d13b      	bne.n	8007e4a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007dd2:	8a7b      	ldrh	r3, [r7, #18]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bfb8      	it	lt
 8007dde:	425b      	neglt	r3, r3
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007de2:	8a7b      	ldrh	r3, [r7, #18]
 8007de4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d21c      	bcs.n	8007e24 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d914      	bls.n	8007e1c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007df2:	f107 031c 	add.w	r3, r7, #28
 8007df6:	4619      	mov	r1, r3
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff fd2f 	bl	800785c <set_ref_spad_map>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007e0a:	f107 011c 	add.w	r1, r7, #28
 8007e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e10:	4618      	mov	r0, r3
 8007e12:	f00a f896 	bl	8011f42 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e22:	e00a      	b.n	8007e3a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007e2e:	f107 031c 	add.w	r3, r7, #28
 8007e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e34:	4618      	mov	r0, r3
 8007e36:	f00a f884 	bl	8011f42 <memcpy>
		while (!complete) {
 8007e3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f43f af74 	beq.w	8007d2c <VL53L0X_perform_ref_spad_management+0x2b8>
 8007e44:	e002      	b.n	8007e4c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007e46:	bf00      	nop
 8007e48:	e000      	b.n	8007e4c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007e4a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007e4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d115      	bne.n	8007e80 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e58:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007e60:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	781a      	ldrb	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007e80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	375c      	adds	r7, #92	; 0x5c
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd90      	pop	{r4, r7, pc}

08007e8c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007e8c:	b590      	push	{r4, r7, lr}
 8007e8e:	b093      	sub	sp, #76	; 0x4c
 8007e90:	af06      	add	r7, sp, #24
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	4613      	mov	r3, r2
 8007e98:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007ea4:	23b4      	movs	r3, #180	; 0xb4
 8007ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007eaa:	2306      	movs	r3, #6
 8007eac:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007eae:	232c      	movs	r3, #44	; 0x2c
 8007eb0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	21ff      	movs	r1, #255	; 0xff
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f002 ff10 	bl	800acdc <VL53L0X_WrByte>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007ec2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d107      	bne.n	8007eda <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007eca:	2200      	movs	r2, #0
 8007ecc:	214f      	movs	r1, #79	; 0x4f
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f002 ff04 	bl	800acdc <VL53L0X_WrByte>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007eda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d107      	bne.n	8007ef2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007ee2:	222c      	movs	r2, #44	; 0x2c
 8007ee4:	214e      	movs	r1, #78	; 0x4e
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f002 fef8 	bl	800acdc <VL53L0X_WrByte>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007ef2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d107      	bne.n	8007f0a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007efa:	2200      	movs	r2, #0
 8007efc:	21ff      	movs	r1, #255	; 0xff
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f002 feec 	bl	800acdc <VL53L0X_WrByte>
 8007f04:	4603      	mov	r3, r0
 8007f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007f0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8007f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f16:	461a      	mov	r2, r3
 8007f18:	21b6      	movs	r1, #182	; 0xb6
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f002 fede 	bl	800acdc <VL53L0X_WrByte>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8007f26:	2300      	movs	r3, #0
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
 8007f2a:	e009      	b.n	8007f40 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007f36:	2200      	movs	r2, #0
 8007f38:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d3f1      	bcc.n	8007f2c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d011      	beq.n	8007f72 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007f4e:	e002      	b.n	8007f56 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	3301      	adds	r3, #1
 8007f54:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007f56:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	4413      	add	r3, r2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff fc2a 	bl	80077b8 <is_aperture>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <VL53L0X_set_reference_spads+0xe6>
 8007f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d3ee      	bcc.n	8007f50 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f82:	79f9      	ldrb	r1, [r7, #7]
 8007f84:	f107 0214 	add.w	r2, r7, #20
 8007f88:	9204      	str	r2, [sp, #16]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	9203      	str	r2, [sp, #12]
 8007f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f90:	9202      	str	r2, [sp, #8]
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	4623      	mov	r3, r4
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff fc83 	bl	80078a8 <enable_ref_spads>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007fa8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10c      	bne.n	8007fca <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	79fa      	ldrb	r2, [r7, #7]
 8007fc6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007fca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3734      	adds	r7, #52	; 0x34
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd90      	pop	{r4, r7, pc}

08007fd6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	f043 0301 	orr.w	r3, r3, #1
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f002 fe6e 	bl	800acdc <VL53L0X_WrByte>
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f9bf 	bl	8008390 <VL53L0X_measurement_poll_for_completion>
 8008012:	4603      	mov	r3, r0
 8008014:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d105      	bne.n	800802a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800801e:	2100      	movs	r1, #0
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff fab5 	bl	8007590 <VL53L0X_ClearInterruptMask>
 8008026:	4603      	mov	r3, r0
 8008028:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800802a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d106      	bne.n	8008040 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008032:	2200      	movs	r2, #0
 8008034:	2100      	movs	r1, #0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f002 fe50 	bl	800acdc <VL53L0X_WrByte>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008040:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	4608      	mov	r0, r1
 8008056:	4611      	mov	r1, r2
 8008058:	461a      	mov	r2, r3
 800805a:	4603      	mov	r3, r0
 800805c:	70fb      	strb	r3, [r7, #3]
 800805e:	460b      	mov	r3, r1
 8008060:	70bb      	strb	r3, [r7, #2]
 8008062:	4613      	mov	r3, r2
 8008064:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800806e:	2201      	movs	r2, #1
 8008070:	21ff      	movs	r1, #255	; 0xff
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f002 fe32 	bl	800acdc <VL53L0X_WrByte>
 8008078:	4603      	mov	r3, r0
 800807a:	461a      	mov	r2, r3
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	4313      	orrs	r3, r2
 8008080:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008082:	2200      	movs	r2, #0
 8008084:	2100      	movs	r1, #0
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f002 fe28 	bl	800acdc <VL53L0X_WrByte>
 800808c:	4603      	mov	r3, r0
 800808e:	461a      	mov	r2, r3
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	4313      	orrs	r3, r2
 8008094:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008096:	2200      	movs	r2, #0
 8008098:	21ff      	movs	r1, #255	; 0xff
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f002 fe1e 	bl	800acdc <VL53L0X_WrByte>
 80080a0:	4603      	mov	r3, r0
 80080a2:	461a      	mov	r2, r3
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01e      	beq.n	80080ee <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80080b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d009      	beq.n	80080cc <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	21cb      	movs	r1, #203	; 0xcb
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f002 fd12 	bl	800aae6 <VL53L0X_RdByte>
 80080c2:	4603      	mov	r3, r0
 80080c4:	461a      	mov	r2, r3
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80080cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d02a      	beq.n	800812a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80080d4:	f107 030e 	add.w	r3, r7, #14
 80080d8:	461a      	mov	r2, r3
 80080da:	21ee      	movs	r1, #238	; 0xee
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f002 fd02 	bl	800aae6 <VL53L0X_RdByte>
 80080e2:	4603      	mov	r3, r0
 80080e4:	461a      	mov	r2, r3
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	73fb      	strb	r3, [r7, #15]
 80080ec:	e01d      	b.n	800812a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80080ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80080f6:	78bb      	ldrb	r3, [r7, #2]
 80080f8:	461a      	mov	r2, r3
 80080fa:	21cb      	movs	r1, #203	; 0xcb
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f002 fded 	bl	800acdc <VL53L0X_WrByte>
 8008102:	4603      	mov	r3, r0
 8008104:	461a      	mov	r2, r3
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	4313      	orrs	r3, r2
 800810a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800810c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00a      	beq.n	800812a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008114:	787b      	ldrb	r3, [r7, #1]
 8008116:	2280      	movs	r2, #128	; 0x80
 8008118:	21ee      	movs	r1, #238	; 0xee
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f002 fe2c 	bl	800ad78 <VL53L0X_UpdateByte>
 8008120:	4603      	mov	r3, r0
 8008122:	461a      	mov	r2, r3
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	4313      	orrs	r3, r2
 8008128:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800812a:	2201      	movs	r2, #1
 800812c:	21ff      	movs	r1, #255	; 0xff
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f002 fdd4 	bl	800acdc <VL53L0X_WrByte>
 8008134:	4603      	mov	r3, r0
 8008136:	461a      	mov	r2, r3
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	4313      	orrs	r3, r2
 800813c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800813e:	2201      	movs	r2, #1
 8008140:	2100      	movs	r1, #0
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f002 fdca 	bl	800acdc <VL53L0X_WrByte>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	4313      	orrs	r3, r2
 8008150:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008152:	2200      	movs	r2, #0
 8008154:	21ff      	movs	r1, #255	; 0xff
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f002 fdc0 	bl	800acdc <VL53L0X_WrByte>
 800815c:	4603      	mov	r3, r0
 800815e:	461a      	mov	r2, r3
 8008160:	7bfb      	ldrb	r3, [r7, #15]
 8008162:	4313      	orrs	r3, r2
 8008164:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	f023 0310 	bic.w	r3, r3, #16
 800816c:	b2da      	uxtb	r2, r3
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	701a      	strb	r2, [r3, #0]

	return Status;
 8008172:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b08a      	sub	sp, #40	; 0x28
 8008182:	af04      	add	r7, sp, #16
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	4611      	mov	r1, r2
 800818a:	461a      	mov	r2, r3
 800818c:	460b      	mov	r3, r1
 800818e:	71fb      	strb	r3, [r7, #7]
 8008190:	4613      	mov	r3, r2
 8008192:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008194:	2300      	movs	r3, #0
 8008196:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80081a8:	79bb      	ldrb	r3, [r7, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80081b4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80081b6:	2201      	movs	r2, #1
 80081b8:	2101      	movs	r1, #1
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f002 fd8e 	bl	800acdc <VL53L0X_WrByte>
 80081c0:	4603      	mov	r3, r0
 80081c2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80081c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d105      	bne.n	80081d8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80081cc:	2140      	movs	r1, #64	; 0x40
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f7ff ff01 	bl	8007fd6 <VL53L0X_perform_single_ref_calibration>
 80081d4:	4603      	mov	r3, r0
 80081d6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80081d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d115      	bne.n	800820c <VL53L0X_perform_vhv_calibration+0x8e>
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d112      	bne.n	800820c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80081e6:	7d39      	ldrb	r1, [r7, #20]
 80081e8:	7d7a      	ldrb	r2, [r7, #21]
 80081ea:	2300      	movs	r3, #0
 80081ec:	9303      	str	r3, [sp, #12]
 80081ee:	2301      	movs	r3, #1
 80081f0:	9302      	str	r3, [sp, #8]
 80081f2:	f107 0313 	add.w	r3, r7, #19
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	460b      	mov	r3, r1
 80081fe:	2101      	movs	r1, #1
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff ff23 	bl	800804c <VL53L0X_ref_calibration_io>
 8008206:	4603      	mov	r3, r0
 8008208:	75fb      	strb	r3, [r7, #23]
 800820a:	e002      	b.n	8008212 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008212:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d112      	bne.n	8008240 <VL53L0X_perform_vhv_calibration+0xc2>
 800821a:	79bb      	ldrb	r3, [r7, #6]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00f      	beq.n	8008240 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008220:	7dbb      	ldrb	r3, [r7, #22]
 8008222:	461a      	mov	r2, r3
 8008224:	2101      	movs	r1, #1
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f002 fd58 	bl	800acdc <VL53L0X_WrByte>
 800822c:	4603      	mov	r3, r0
 800822e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008230:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d103      	bne.n	8008240 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	7dba      	ldrb	r2, [r7, #22]
 800823c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008240:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08a      	sub	sp, #40	; 0x28
 8008250:	af04      	add	r7, sp, #16
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4611      	mov	r1, r2
 8008258:	461a      	mov	r2, r3
 800825a:	460b      	mov	r3, r1
 800825c:	71fb      	strb	r3, [r7, #7]
 800825e:	4613      	mov	r3, r2
 8008260:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008262:	2300      	movs	r3, #0
 8008264:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008272:	79bb      	ldrb	r3, [r7, #6]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800827e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008280:	2202      	movs	r2, #2
 8008282:	2101      	movs	r1, #1
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f002 fd29 	bl	800acdc <VL53L0X_WrByte>
 800828a:	4603      	mov	r3, r0
 800828c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800828e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d105      	bne.n	80082a2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008296:	2100      	movs	r1, #0
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff fe9c 	bl	8007fd6 <VL53L0X_perform_single_ref_calibration>
 800829e:	4603      	mov	r3, r0
 80082a0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80082a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d115      	bne.n	80082d6 <VL53L0X_perform_phase_calibration+0x8a>
 80082aa:	79fb      	ldrb	r3, [r7, #7]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d112      	bne.n	80082d6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80082b0:	7d39      	ldrb	r1, [r7, #20]
 80082b2:	7d7a      	ldrb	r2, [r7, #21]
 80082b4:	2301      	movs	r3, #1
 80082b6:	9303      	str	r3, [sp, #12]
 80082b8:	2300      	movs	r3, #0
 80082ba:	9302      	str	r3, [sp, #8]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	f107 0313 	add.w	r3, r7, #19
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	460b      	mov	r3, r1
 80082c8:	2101      	movs	r1, #1
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f7ff febe 	bl	800804c <VL53L0X_ref_calibration_io>
 80082d0:	4603      	mov	r3, r0
 80082d2:	75fb      	strb	r3, [r7, #23]
 80082d4:	e002      	b.n	80082dc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2200      	movs	r2, #0
 80082da:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80082dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d112      	bne.n	800830a <VL53L0X_perform_phase_calibration+0xbe>
 80082e4:	79bb      	ldrb	r3, [r7, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00f      	beq.n	800830a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80082ea:	7dbb      	ldrb	r3, [r7, #22]
 80082ec:	461a      	mov	r2, r3
 80082ee:	2101      	movs	r1, #1
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f002 fcf3 	bl	800acdc <VL53L0X_WrByte>
 80082f6:	4603      	mov	r3, r0
 80082f8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80082fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	7dba      	ldrb	r2, [r7, #22]
 8008306:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800830a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b086      	sub	sp, #24
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	607a      	str	r2, [r7, #4]
 8008322:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008324:	2300      	movs	r3, #0
 8008326:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008332:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	2300      	movs	r3, #0
 8008338:	68b9      	ldr	r1, [r7, #8]
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7ff ff1f 	bl	800817e <VL53L0X_perform_vhv_calibration>
 8008340:	4603      	mov	r3, r0
 8008342:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008344:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d107      	bne.n	800835c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	2300      	movs	r3, #0
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7ff ff7a 	bl	800824c <VL53L0X_perform_phase_calibration>
 8008358:	4603      	mov	r3, r0
 800835a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800835c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10f      	bne.n	8008384 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008364:	7dbb      	ldrb	r3, [r7, #22]
 8008366:	461a      	mov	r2, r3
 8008368:	2101      	movs	r1, #1
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f002 fcb6 	bl	800acdc <VL53L0X_WrByte>
 8008370:	4603      	mov	r3, r0
 8008372:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	7dba      	ldrb	r2, [r7, #22]
 8008380:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008384:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3718      	adds	r7, #24
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008398:	2300      	movs	r3, #0
 800839a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80083a4:	f107 030f 	add.w	r3, r7, #15
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7fe fe02 	bl	8006fb4 <VL53L0X_GetMeasurementDataReady>
 80083b0:	4603      	mov	r3, r0
 80083b2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80083b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10f      	bne.n	80083dc <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d00e      	beq.n	80083e0 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	3301      	adds	r3, #1
 80083c6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	2bc7      	cmp	r3, #199	; 0xc7
 80083cc:	d902      	bls.n	80083d4 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 80083ce:	23f9      	movs	r3, #249	; 0xf9
 80083d0:	75fb      	strb	r3, [r7, #23]
			break;
 80083d2:	e006      	b.n	80083e2 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f002 fd03 	bl	800ade0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80083da:	e7e3      	b.n	80083a4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80083dc:	bf00      	nop
 80083de:	e000      	b.n	80083e2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 80083e0:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80083e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b085      	sub	sp, #20
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	4603      	mov	r3, r0
 80083f6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	3301      	adds	r3, #1
 8008400:	b2db      	uxtb	r3, r3
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	085b      	lsrs	r3, r3, #1
 8008426:	b2db      	uxtb	r3, r3
 8008428:	3b01      	subs	r3, #1
 800842a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800843a:	b480      	push	{r7}
 800843c:	b085      	sub	sp, #20
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800844a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800844c:	e002      	b.n	8008454 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	089b      	lsrs	r3, r3, #2
 8008452:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	429a      	cmp	r2, r3
 800845a:	d8f8      	bhi.n	800844e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800845c:	e017      	b.n	800848e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	4413      	add	r3, r2
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d30b      	bcc.n	8008482 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	4413      	add	r3, r2
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	085b      	lsrs	r3, r3, #1
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	4413      	add	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	e002      	b.n	8008488 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	085b      	lsrs	r3, r3, #1
 8008486:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	089b      	lsrs	r3, r3, #2
 800848c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e4      	bne.n	800845e <VL53L0X_isqrt+0x24>
	}

	return res;
 8008494:	68fb      	ldr	r3, [r7, #12]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b086      	sub	sp, #24
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80084ae:	2200      	movs	r2, #0
 80084b0:	2183      	movs	r1, #131	; 0x83
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f002 fc12 	bl	800acdc <VL53L0X_WrByte>
 80084b8:	4603      	mov	r3, r0
 80084ba:	461a      	mov	r2, r3
 80084bc:	7dfb      	ldrb	r3, [r7, #23]
 80084be:	4313      	orrs	r3, r2
 80084c0:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80084c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d11c      	bne.n	8008504 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80084ce:	f107 030f 	add.w	r3, r7, #15
 80084d2:	461a      	mov	r2, r3
 80084d4:	2183      	movs	r1, #131	; 0x83
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f002 fb05 	bl	800aae6 <VL53L0X_RdByte>
 80084dc:	4603      	mov	r3, r0
 80084de:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d109      	bne.n	80084fa <VL53L0X_device_read_strobe+0x58>
 80084e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d105      	bne.n	80084fa <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	3301      	adds	r3, #1
 80084f2:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	2bc7      	cmp	r3, #199	; 0xc7
 80084f8:	d9e9      	bls.n	80084ce <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2bc7      	cmp	r3, #199	; 0xc7
 80084fe:	d901      	bls.n	8008504 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008500:	23f9      	movs	r3, #249	; 0xf9
 8008502:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008504:	2201      	movs	r2, #1
 8008506:	2183      	movs	r1, #131	; 0x83
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f002 fbe7 	bl	800acdc <VL53L0X_WrByte>
 800850e:	4603      	mov	r3, r0
 8008510:	461a      	mov	r2, r3
 8008512:	7dfb      	ldrb	r3, [r7, #23]
 8008514:	4313      	orrs	r3, r2
 8008516:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008518:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b098      	sub	sp, #96	; 0x60
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008530:	2300      	movs	r3, #0
 8008532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008554:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008558:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800856c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008570:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008574:	2b07      	cmp	r3, #7
 8008576:	f000 8408 	beq.w	8008d8a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800857a:	2201      	movs	r2, #1
 800857c:	2180      	movs	r1, #128	; 0x80
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f002 fbac 	bl	800acdc <VL53L0X_WrByte>
 8008584:	4603      	mov	r3, r0
 8008586:	461a      	mov	r2, r3
 8008588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800858c:	4313      	orrs	r3, r2
 800858e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008592:	2201      	movs	r2, #1
 8008594:	21ff      	movs	r1, #255	; 0xff
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f002 fba0 	bl	800acdc <VL53L0X_WrByte>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
 80085a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085a4:	4313      	orrs	r3, r2
 80085a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80085aa:	2200      	movs	r2, #0
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f002 fb94 	bl	800acdc <VL53L0X_WrByte>
 80085b4:	4603      	mov	r3, r0
 80085b6:	461a      	mov	r2, r3
 80085b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085bc:	4313      	orrs	r3, r2
 80085be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80085c2:	2206      	movs	r2, #6
 80085c4:	21ff      	movs	r1, #255	; 0xff
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f002 fb88 	bl	800acdc <VL53L0X_WrByte>
 80085cc:	4603      	mov	r3, r0
 80085ce:	461a      	mov	r2, r3
 80085d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085d4:	4313      	orrs	r3, r2
 80085d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80085da:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80085de:	461a      	mov	r2, r3
 80085e0:	2183      	movs	r1, #131	; 0x83
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f002 fa7f 	bl	800aae6 <VL53L0X_RdByte>
 80085e8:	4603      	mov	r3, r0
 80085ea:	461a      	mov	r2, r3
 80085ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80085f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085fa:	f043 0304 	orr.w	r3, r3, #4
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	2183      	movs	r1, #131	; 0x83
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f002 fb69 	bl	800acdc <VL53L0X_WrByte>
 800860a:	4603      	mov	r3, r0
 800860c:	461a      	mov	r2, r3
 800860e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008612:	4313      	orrs	r3, r2
 8008614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008618:	2207      	movs	r2, #7
 800861a:	21ff      	movs	r1, #255	; 0xff
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f002 fb5d 	bl	800acdc <VL53L0X_WrByte>
 8008622:	4603      	mov	r3, r0
 8008624:	461a      	mov	r2, r3
 8008626:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800862a:	4313      	orrs	r3, r2
 800862c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008630:	2201      	movs	r2, #1
 8008632:	2181      	movs	r1, #129	; 0x81
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f002 fb51 	bl	800acdc <VL53L0X_WrByte>
 800863a:	4603      	mov	r3, r0
 800863c:	461a      	mov	r2, r3
 800863e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008642:	4313      	orrs	r3, r2
 8008644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f002 fbc9 	bl	800ade0 <VL53L0X_PollingDelay>
 800864e:	4603      	mov	r3, r0
 8008650:	461a      	mov	r2, r3
 8008652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008656:	4313      	orrs	r3, r2
 8008658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800865c:	2201      	movs	r2, #1
 800865e:	2180      	movs	r1, #128	; 0x80
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f002 fb3b 	bl	800acdc <VL53L0X_WrByte>
 8008666:	4603      	mov	r3, r0
 8008668:	461a      	mov	r2, r3
 800866a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800866e:	4313      	orrs	r3, r2
 8008670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 8098 	beq.w	80087b0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008680:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008684:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008688:	2b00      	cmp	r3, #0
 800868a:	f040 8091 	bne.w	80087b0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800868e:	226b      	movs	r2, #107	; 0x6b
 8008690:	2194      	movs	r1, #148	; 0x94
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f002 fb22 	bl	800acdc <VL53L0X_WrByte>
 8008698:	4603      	mov	r3, r0
 800869a:	461a      	mov	r2, r3
 800869c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086a0:	4313      	orrs	r3, r2
 80086a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff fefb 	bl	80084a2 <VL53L0X_device_read_strobe>
 80086ac:	4603      	mov	r3, r0
 80086ae:	461a      	mov	r2, r3
 80086b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086b4:	4313      	orrs	r3, r2
 80086b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80086ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086be:	461a      	mov	r2, r3
 80086c0:	2190      	movs	r1, #144	; 0x90
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f002 face 	bl	800ac64 <VL53L0X_RdDWord>
 80086c8:	4603      	mov	r3, r0
 80086ca:	461a      	mov	r2, r3
 80086cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086d0:	4313      	orrs	r3, r2
 80086d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	0a1b      	lsrs	r3, r3, #8
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	0bdb      	lsrs	r3, r3, #15
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80086f2:	2224      	movs	r2, #36	; 0x24
 80086f4:	2194      	movs	r1, #148	; 0x94
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f002 faf0 	bl	800acdc <VL53L0X_WrByte>
 80086fc:	4603      	mov	r3, r0
 80086fe:	461a      	mov	r2, r3
 8008700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008704:	4313      	orrs	r3, r2
 8008706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff fec9 	bl	80084a2 <VL53L0X_device_read_strobe>
 8008710:	4603      	mov	r3, r0
 8008712:	461a      	mov	r2, r3
 8008714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008718:	4313      	orrs	r3, r2
 800871a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800871e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008722:	461a      	mov	r2, r3
 8008724:	2190      	movs	r1, #144	; 0x90
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f002 fa9c 	bl	800ac64 <VL53L0X_RdDWord>
 800872c:	4603      	mov	r3, r0
 800872e:	461a      	mov	r2, r3
 8008730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008734:	4313      	orrs	r3, r2
 8008736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800873a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873c:	0e1b      	lsrs	r3, r3, #24
 800873e:	b2db      	uxtb	r3, r3
 8008740:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	0c1b      	lsrs	r3, r3, #16
 8008746:	b2db      	uxtb	r3, r3
 8008748:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	0a1b      	lsrs	r3, r3, #8
 800874e:	b2db      	uxtb	r3, r3
 8008750:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	b2db      	uxtb	r3, r3
 8008756:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008758:	2225      	movs	r2, #37	; 0x25
 800875a:	2194      	movs	r1, #148	; 0x94
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f002 fabd 	bl	800acdc <VL53L0X_WrByte>
 8008762:	4603      	mov	r3, r0
 8008764:	461a      	mov	r2, r3
 8008766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800876a:	4313      	orrs	r3, r2
 800876c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff fe96 	bl	80084a2 <VL53L0X_device_read_strobe>
 8008776:	4603      	mov	r3, r0
 8008778:	461a      	mov	r2, r3
 800877a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800877e:	4313      	orrs	r3, r2
 8008780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008788:	461a      	mov	r2, r3
 800878a:	2190      	movs	r1, #144	; 0x90
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f002 fa69 	bl	800ac64 <VL53L0X_RdDWord>
 8008792:	4603      	mov	r3, r0
 8008794:	461a      	mov	r2, r3
 8008796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800879a:	4313      	orrs	r3, r2
 800879c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80087a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a2:	0e1b      	lsrs	r3, r3, #24
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	0c1b      	lsrs	r3, r3, #16
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80087b0:	78fb      	ldrb	r3, [r7, #3]
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 8189 	beq.w	8008ace <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80087bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087c0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f040 8182 	bne.w	8008ace <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80087ca:	2202      	movs	r2, #2
 80087cc:	2194      	movs	r1, #148	; 0x94
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f002 fa84 	bl	800acdc <VL53L0X_WrByte>
 80087d4:	4603      	mov	r3, r0
 80087d6:	461a      	mov	r2, r3
 80087d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087dc:	4313      	orrs	r3, r2
 80087de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff fe5d 	bl	80084a2 <VL53L0X_device_read_strobe>
 80087e8:	4603      	mov	r3, r0
 80087ea:	461a      	mov	r2, r3
 80087ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087f0:	4313      	orrs	r3, r2
 80087f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80087f6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80087fa:	461a      	mov	r2, r3
 80087fc:	2190      	movs	r1, #144	; 0x90
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f002 f971 	bl	800aae6 <VL53L0X_RdByte>
 8008804:	4603      	mov	r3, r0
 8008806:	461a      	mov	r2, r3
 8008808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800880c:	4313      	orrs	r3, r2
 800880e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008812:	227b      	movs	r2, #123	; 0x7b
 8008814:	2194      	movs	r1, #148	; 0x94
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f002 fa60 	bl	800acdc <VL53L0X_WrByte>
 800881c:	4603      	mov	r3, r0
 800881e:	461a      	mov	r2, r3
 8008820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008824:	4313      	orrs	r3, r2
 8008826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff fe39 	bl	80084a2 <VL53L0X_device_read_strobe>
 8008830:	4603      	mov	r3, r0
 8008832:	461a      	mov	r2, r3
 8008834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008838:	4313      	orrs	r3, r2
 800883a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800883e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008842:	461a      	mov	r2, r3
 8008844:	2190      	movs	r1, #144	; 0x90
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f002 f94d 	bl	800aae6 <VL53L0X_RdByte>
 800884c:	4603      	mov	r3, r0
 800884e:	461a      	mov	r2, r3
 8008850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008854:	4313      	orrs	r3, r2
 8008856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800885a:	2277      	movs	r2, #119	; 0x77
 800885c:	2194      	movs	r1, #148	; 0x94
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f002 fa3c 	bl	800acdc <VL53L0X_WrByte>
 8008864:	4603      	mov	r3, r0
 8008866:	461a      	mov	r2, r3
 8008868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800886c:	4313      	orrs	r3, r2
 800886e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fe15 	bl	80084a2 <VL53L0X_device_read_strobe>
 8008878:	4603      	mov	r3, r0
 800887a:	461a      	mov	r2, r3
 800887c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008880:	4313      	orrs	r3, r2
 8008882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800888a:	461a      	mov	r2, r3
 800888c:	2190      	movs	r1, #144	; 0x90
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f002 f9e8 	bl	800ac64 <VL53L0X_RdDWord>
 8008894:	4603      	mov	r3, r0
 8008896:	461a      	mov	r2, r3
 8008898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800889c:	4313      	orrs	r3, r2
 800889e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	0e5b      	lsrs	r3, r3, #25
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	0c9b      	lsrs	r3, r3, #18
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	0adb      	lsrs	r3, r3, #11
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	091b      	lsrs	r3, r3, #4
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80088ec:	2278      	movs	r2, #120	; 0x78
 80088ee:	2194      	movs	r1, #148	; 0x94
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f002 f9f3 	bl	800acdc <VL53L0X_WrByte>
 80088f6:	4603      	mov	r3, r0
 80088f8:	461a      	mov	r2, r3
 80088fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088fe:	4313      	orrs	r3, r2
 8008900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7ff fdcc 	bl	80084a2 <VL53L0X_device_read_strobe>
 800890a:	4603      	mov	r3, r0
 800890c:	461a      	mov	r2, r3
 800890e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008912:	4313      	orrs	r3, r2
 8008914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800891c:	461a      	mov	r2, r3
 800891e:	2190      	movs	r1, #144	; 0x90
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f002 f99f 	bl	800ac64 <VL53L0X_RdDWord>
 8008926:	4603      	mov	r3, r0
 8008928:	461a      	mov	r2, r3
 800892a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800892e:	4313      	orrs	r3, r2
 8008930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008936:	0f5b      	lsrs	r3, r3, #29
 8008938:	b2db      	uxtb	r3, r3
 800893a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800893e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008940:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008944:	4413      	add	r3, r2
 8008946:	b2db      	uxtb	r3, r3
 8008948:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	0d9b      	lsrs	r3, r3, #22
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008954:	b2db      	uxtb	r3, r3
 8008956:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895a:	0bdb      	lsrs	r3, r3, #15
 800895c:	b2db      	uxtb	r3, r3
 800895e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008962:	b2db      	uxtb	r3, r3
 8008964:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	0a1b      	lsrs	r3, r3, #8
 800896a:	b2db      	uxtb	r3, r3
 800896c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008970:	b2db      	uxtb	r3, r3
 8008972:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008976:	085b      	lsrs	r3, r3, #1
 8008978:	b2db      	uxtb	r3, r3
 800897a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800897e:	b2db      	uxtb	r3, r3
 8008980:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	b2db      	uxtb	r3, r3
 8008986:	019b      	lsls	r3, r3, #6
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898e:	b2db      	uxtb	r3, r3
 8008990:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008994:	2279      	movs	r2, #121	; 0x79
 8008996:	2194      	movs	r1, #148	; 0x94
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f002 f99f 	bl	800acdc <VL53L0X_WrByte>
 800899e:	4603      	mov	r3, r0
 80089a0:	461a      	mov	r2, r3
 80089a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089a6:	4313      	orrs	r3, r2
 80089a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff fd78 	bl	80084a2 <VL53L0X_device_read_strobe>
 80089b2:	4603      	mov	r3, r0
 80089b4:	461a      	mov	r2, r3
 80089b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089ba:	4313      	orrs	r3, r2
 80089bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80089c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089c4:	461a      	mov	r2, r3
 80089c6:	2190      	movs	r1, #144	; 0x90
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f002 f94b 	bl	800ac64 <VL53L0X_RdDWord>
 80089ce:	4603      	mov	r3, r0
 80089d0:	461a      	mov	r2, r3
 80089d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089d6:	4313      	orrs	r3, r2
 80089d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	0e9b      	lsrs	r3, r3, #26
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80089e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089ec:	4413      	add	r3, r2
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	0cdb      	lsrs	r3, r3, #19
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	0b1b      	lsrs	r3, r3, #12
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a10:	095b      	lsrs	r3, r3, #5
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008a2e:	227a      	movs	r2, #122	; 0x7a
 8008a30:	2194      	movs	r1, #148	; 0x94
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f002 f952 	bl	800acdc <VL53L0X_WrByte>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a40:	4313      	orrs	r3, r2
 8008a42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff fd2b 	bl	80084a2 <VL53L0X_device_read_strobe>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a54:	4313      	orrs	r3, r2
 8008a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a5e:	461a      	mov	r2, r3
 8008a60:	2190      	movs	r1, #144	; 0x90
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f002 f8fe 	bl	800ac64 <VL53L0X_RdDWord>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a70:	4313      	orrs	r3, r2
 8008a72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	0f9b      	lsrs	r3, r3, #30
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a80:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008a82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a86:	4413      	add	r3, r2
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	0ddb      	lsrs	r3, r3, #23
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	0c1b      	lsrs	r3, r3, #16
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	0a5b      	lsrs	r3, r3, #9
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	089b      	lsrs	r3, r3, #2
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008ace:	78fb      	ldrb	r3, [r7, #3]
 8008ad0:	f003 0304 	and.w	r3, r3, #4
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 80f1 	beq.w	8008cbc <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008ada:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ade:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f040 80ea 	bne.w	8008cbc <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008ae8:	227b      	movs	r2, #123	; 0x7b
 8008aea:	2194      	movs	r1, #148	; 0x94
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f002 f8f5 	bl	800acdc <VL53L0X_WrByte>
 8008af2:	4603      	mov	r3, r0
 8008af4:	461a      	mov	r2, r3
 8008af6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008afa:	4313      	orrs	r3, r2
 8008afc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff fcce 	bl	80084a2 <VL53L0X_device_read_strobe>
 8008b06:	4603      	mov	r3, r0
 8008b08:	461a      	mov	r2, r3
 8008b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b18:	461a      	mov	r2, r3
 8008b1a:	2190      	movs	r1, #144	; 0x90
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f002 f8a1 	bl	800ac64 <VL53L0X_RdDWord>
 8008b22:	4603      	mov	r3, r0
 8008b24:	461a      	mov	r2, r3
 8008b26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008b30:	227c      	movs	r2, #124	; 0x7c
 8008b32:	2194      	movs	r1, #148	; 0x94
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f002 f8d1 	bl	800acdc <VL53L0X_WrByte>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b42:	4313      	orrs	r3, r2
 8008b44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff fcaa 	bl	80084a2 <VL53L0X_device_read_strobe>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	461a      	mov	r2, r3
 8008b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8008b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b60:	461a      	mov	r2, r3
 8008b62:	2190      	movs	r1, #144	; 0x90
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f002 f87d 	bl	800ac64 <VL53L0X_RdDWord>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b72:	4313      	orrs	r3, r2
 8008b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8008b78:	2273      	movs	r2, #115	; 0x73
 8008b7a:	2194      	movs	r1, #148	; 0x94
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f002 f8ad 	bl	800acdc <VL53L0X_WrByte>
 8008b82:	4603      	mov	r3, r0
 8008b84:	461a      	mov	r2, r3
 8008b86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7ff fc86 	bl	80084a2 <VL53L0X_device_read_strobe>
 8008b96:	4603      	mov	r3, r0
 8008b98:	461a      	mov	r2, r3
 8008b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ba4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ba8:	461a      	mov	r2, r3
 8008baa:	2190      	movs	r1, #144	; 0x90
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f002 f859 	bl	800ac64 <VL53L0X_RdDWord>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008bc8:	2274      	movs	r2, #116	; 0x74
 8008bca:	2194      	movs	r1, #148	; 0x94
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f002 f885 	bl	800acdc <VL53L0X_WrByte>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff fc5e 	bl	80084a2 <VL53L0X_device_read_strobe>
 8008be6:	4603      	mov	r3, r0
 8008be8:	461a      	mov	r2, r3
 8008bea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	2190      	movs	r1, #144	; 0x90
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f002 f831 	bl	800ac64 <VL53L0X_RdDWord>
 8008c02:	4603      	mov	r3, r0
 8008c04:	461a      	mov	r2, r3
 8008c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c12:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008c14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c16:	4313      	orrs	r3, r2
 8008c18:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008c1a:	2275      	movs	r2, #117	; 0x75
 8008c1c:	2194      	movs	r1, #148	; 0x94
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f002 f85c 	bl	800acdc <VL53L0X_WrByte>
 8008c24:	4603      	mov	r3, r0
 8008c26:	461a      	mov	r2, r3
 8008c28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7ff fc35 	bl	80084a2 <VL53L0X_device_read_strobe>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c40:	4313      	orrs	r3, r2
 8008c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	2190      	movs	r1, #144	; 0x90
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f002 f808 	bl	800ac64 <VL53L0X_RdDWord>
 8008c54:	4603      	mov	r3, r0
 8008c56:	461a      	mov	r2, r3
 8008c58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8008c6a:	2276      	movs	r2, #118	; 0x76
 8008c6c:	2194      	movs	r1, #148	; 0x94
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f002 f834 	bl	800acdc <VL53L0X_WrByte>
 8008c74:	4603      	mov	r3, r0
 8008c76:	461a      	mov	r2, r3
 8008c78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff fc0d 	bl	80084a2 <VL53L0X_device_read_strobe>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c90:	4313      	orrs	r3, r2
 8008c92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	2190      	movs	r1, #144	; 0x90
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 ffe0 	bl	800ac64 <VL53L0X_RdDWord>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cac:	4313      	orrs	r3, r2
 8008cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008cb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2181      	movs	r1, #129	; 0x81
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f002 f80b 	bl	800acdc <VL53L0X_WrByte>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	461a      	mov	r2, r3
 8008cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008cd4:	2206      	movs	r2, #6
 8008cd6:	21ff      	movs	r1, #255	; 0xff
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 ffff 	bl	800acdc <VL53L0X_WrByte>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008cec:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	2183      	movs	r1, #131	; 0x83
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 fef6 	bl	800aae6 <VL53L0X_RdByte>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d02:	4313      	orrs	r3, r2
 8008d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008d08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d0c:	f023 0304 	bic.w	r3, r3, #4
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	461a      	mov	r2, r3
 8008d14:	2183      	movs	r1, #131	; 0x83
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f001 ffe0 	bl	800acdc <VL53L0X_WrByte>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d24:	4313      	orrs	r3, r2
 8008d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	21ff      	movs	r1, #255	; 0xff
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 ffd4 	bl	800acdc <VL53L0X_WrByte>
 8008d34:	4603      	mov	r3, r0
 8008d36:	461a      	mov	r2, r3
 8008d38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008d42:	2201      	movs	r2, #1
 8008d44:	2100      	movs	r1, #0
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 ffc8 	bl	800acdc <VL53L0X_WrByte>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d54:	4313      	orrs	r3, r2
 8008d56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	21ff      	movs	r1, #255	; 0xff
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f001 ffbc 	bl	800acdc <VL53L0X_WrByte>
 8008d64:	4603      	mov	r3, r0
 8008d66:	461a      	mov	r2, r3
 8008d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008d72:	2200      	movs	r2, #0
 8008d74:	2180      	movs	r1, #128	; 0x80
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f001 ffb0 	bl	800acdc <VL53L0X_WrByte>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d84:	4313      	orrs	r3, r2
 8008d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008d8a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f040 808f 	bne.w	8008eb2 <VL53L0X_get_info_from_device+0x98e>
 8008d94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d98:	2b07      	cmp	r3, #7
 8008d9a:	f000 808a 	beq.w	8008eb2 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d024      	beq.n	8008df2 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008da8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dac:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d11e      	bne.n	8008df2 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008dba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008dc4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008dc8:	2300      	movs	r3, #0
 8008dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dcc:	e00e      	b.n	8008dec <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008dce:	f107 0208 	add.w	r2, r7, #8
 8008dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd4:	4413      	add	r3, r2
 8008dd6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008de2:	460a      	mov	r2, r1
 8008de4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008de8:	3301      	adds	r3, #1
 8008dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dee:	2b05      	cmp	r3, #5
 8008df0:	dded      	ble.n	8008dce <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d018      	beq.n	8008e2e <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008dfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e00:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d112      	bne.n	8008e2e <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e08:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e12:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	33f3      	adds	r3, #243	; 0xf3
 8008e20:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008e22:	f107 0310 	add.w	r3, r7, #16
 8008e26:	4619      	mov	r1, r3
 8008e28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e2a:	f009 fee4 	bl	8012bf6 <strcpy>

		}

		if (((option & 4) == 4) &&
 8008e2e:	78fb      	ldrb	r3, [r7, #3]
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d030      	beq.n	8008e9a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008e38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e3c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d12a      	bne.n	8008e9a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e56:	025b      	lsls	r3, r3, #9
 8008e58:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e5e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d011      	beq.n	8008e92 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008e6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e7c:	fb02 f303 	mul.w	r3, r2, r3
 8008e80:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008e82:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008e86:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008e8a:	425b      	negs	r3, r3
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008e92:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008e9a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008e9e:	78fb      	ldrb	r3, [r7, #3]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008ea8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008eb2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3760      	adds	r7, #96	; 0x60
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b087      	sub	sp, #28
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008eca:	f240 6277 	movw	r2, #1655	; 0x677
 8008ece:	f04f 0300 	mov.w	r3, #0
 8008ed2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8008ed6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008eda:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	fb02 f303 	mul.w	r3, r2, r3
 8008eea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008eec:	68bb      	ldr	r3, [r7, #8]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b087      	sub	sp, #28
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d017      	beq.n	8008f44 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008f1a:	e005      	b.n	8008f28 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	085b      	lsrs	r3, r3, #1
 8008f20:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008f22:	89fb      	ldrh	r3, [r7, #14]
 8008f24:	3301      	adds	r3, #1
 8008f26:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1f4      	bne.n	8008f1c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008f32:	89fb      	ldrh	r3, [r7, #14]
 8008f34:	021b      	lsls	r3, r3, #8
 8008f36:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008f40:	4413      	add	r3, r2
 8008f42:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008f44:	8afb      	ldrh	r3, [r7, #22]

}
 8008f46:	4618      	mov	r0, r3
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	4603      	mov	r3, r0
 8008f5a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008f60:	88fb      	ldrh	r3, [r7, #6]
 8008f62:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008f64:	88fa      	ldrh	r2, [r7, #6]
 8008f66:	0a12      	lsrs	r2, r2, #8
 8008f68:	b292      	uxth	r2, r2
 8008f6a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008f70:	68fb      	ldr	r3, [r7, #12]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
	...

08008f80 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008f92:	79fb      	ldrb	r3, [r7, #7]
 8008f94:	4619      	mov	r1, r3
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff ff91 	bl	8008ebe <VL53L0X_calc_macro_period_ps>
 8008f9c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008fa4:	4a0a      	ldr	r2, [pc, #40]	; (8008fd0 <VL53L0X_calc_timeout_mclks+0x50>)
 8008fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8008faa:	099b      	lsrs	r3, r3, #6
 8008fac:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008fb4:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	085b      	lsrs	r3, r3, #1
 8008fbc:	441a      	add	r2, r3
	timeout_period_mclks =
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc4:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8008fc6:	69fb      	ldr	r3, [r7, #28]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3720      	adds	r7, #32
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	10624dd3 	.word	0x10624dd3

08008fd4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	807b      	strh	r3, [r7, #2]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008fe8:	787b      	ldrb	r3, [r7, #1]
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7ff ff66 	bl	8008ebe <VL53L0X_calc_macro_period_ps>
 8008ff2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008ffa:	4a0b      	ldr	r2, [pc, #44]	; (8009028 <VL53L0X_calc_timeout_us+0x54>)
 8008ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8009000:	099b      	lsrs	r3, r3, #6
 8009002:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 8009004:	887b      	ldrh	r3, [r7, #2]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	085b      	lsrs	r3, r3, #1
 8009010:	4413      	add	r3, r2
	actual_timeout_period_us =
 8009012:	4a05      	ldr	r2, [pc, #20]	; (8009028 <VL53L0X_calc_timeout_us+0x54>)
 8009014:	fba2 2303 	umull	r2, r3, r2, r3
 8009018:	099b      	lsrs	r3, r3, #6
 800901a:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800901c:	697b      	ldr	r3, [r7, #20]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	10624dd3 	.word	0x10624dd3

0800902c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08c      	sub	sp, #48	; 0x30
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	460b      	mov	r3, r1
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800903a:	2300      	movs	r3, #0
 800903c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009052:	7afb      	ldrb	r3, [r7, #11]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d005      	beq.n	8009064 <get_sequence_step_timeout+0x38>
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d002      	beq.n	8009064 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800905e:	7afb      	ldrb	r3, [r7, #11]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d128      	bne.n	80090b6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009064:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009068:	461a      	mov	r2, r3
 800906a:	2100      	movs	r1, #0
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f7fd fa73 	bl	8006558 <VL53L0X_GetVcselPulsePeriod>
 8009072:	4603      	mov	r3, r0
 8009074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009078:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800907c:	2b00      	cmp	r3, #0
 800907e:	d109      	bne.n	8009094 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009080:	f107 0320 	add.w	r3, r7, #32
 8009084:	461a      	mov	r2, r3
 8009086:	2146      	movs	r1, #70	; 0x46
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f001 fd2c 	bl	800aae6 <VL53L0X_RdByte>
 800908e:	4603      	mov	r3, r0
 8009090:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009094:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009098:	b29b      	uxth	r3, r3
 800909a:	4618      	mov	r0, r3
 800909c:	f7ff ff59 	bl	8008f52 <VL53L0X_decode_timeout>
 80090a0:	4603      	mov	r3, r0
 80090a2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80090a4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80090a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090aa:	4619      	mov	r1, r3
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f7ff ff91 	bl	8008fd4 <VL53L0X_calc_timeout_us>
 80090b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80090b4:	e092      	b.n	80091dc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80090b6:	7afb      	ldrb	r3, [r7, #11]
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d135      	bne.n	8009128 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80090bc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80090c0:	461a      	mov	r2, r3
 80090c2:	2100      	movs	r1, #0
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f7fd fa47 	bl	8006558 <VL53L0X_GetVcselPulsePeriod>
 80090ca:	4603      	mov	r3, r0
 80090cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80090d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f040 8081 	bne.w	80091dc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80090da:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80090de:	461a      	mov	r2, r3
 80090e0:	2100      	movs	r1, #0
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f7fd fa38 	bl	8006558 <VL53L0X_GetVcselPulsePeriod>
 80090e8:	4603      	mov	r3, r0
 80090ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80090ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80090f6:	f107 031e 	add.w	r3, r7, #30
 80090fa:	461a      	mov	r2, r3
 80090fc:	2151      	movs	r1, #81	; 0x51
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f001 fd78 	bl	800abf4 <VL53L0X_RdWord>
 8009104:	4603      	mov	r3, r0
 8009106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800910a:	8bfb      	ldrh	r3, [r7, #30]
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff ff20 	bl	8008f52 <VL53L0X_decode_timeout>
 8009112:	4603      	mov	r3, r0
 8009114:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009116:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800911a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800911c:	4619      	mov	r1, r3
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f7ff ff58 	bl	8008fd4 <VL53L0X_calc_timeout_us>
 8009124:	62b8      	str	r0, [r7, #40]	; 0x28
 8009126:	e059      	b.n	80091dc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009128:	7afb      	ldrb	r3, [r7, #11]
 800912a:	2b04      	cmp	r3, #4
 800912c:	d156      	bne.n	80091dc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800912e:	f107 0314 	add.w	r3, r7, #20
 8009132:	4619      	mov	r1, r3
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f7fd fb1b 	bl	8006770 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800913a:	2300      	movs	r3, #0
 800913c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01d      	beq.n	8009180 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009144:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009148:	461a      	mov	r2, r3
 800914a:	2100      	movs	r1, #0
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7fd fa03 	bl	8006558 <VL53L0X_GetVcselPulsePeriod>
 8009152:	4603      	mov	r3, r0
 8009154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009158:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10f      	bne.n	8009180 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009160:	f107 031e 	add.w	r3, r7, #30
 8009164:	461a      	mov	r2, r3
 8009166:	2151      	movs	r1, #81	; 0x51
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f001 fd43 	bl	800abf4 <VL53L0X_RdWord>
 800916e:	4603      	mov	r3, r0
 8009170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009174:	8bfb      	ldrh	r3, [r7, #30]
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff feeb 	bl	8008f52 <VL53L0X_decode_timeout>
 800917c:	4603      	mov	r3, r0
 800917e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009180:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009184:	2b00      	cmp	r3, #0
 8009186:	d109      	bne.n	800919c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009188:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800918c:	461a      	mov	r2, r3
 800918e:	2101      	movs	r1, #1
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f7fd f9e1 	bl	8006558 <VL53L0X_GetVcselPulsePeriod>
 8009196:	4603      	mov	r3, r0
 8009198:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800919c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10f      	bne.n	80091c4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80091a4:	f107 031c 	add.w	r3, r7, #28
 80091a8:	461a      	mov	r2, r3
 80091aa:	2171      	movs	r1, #113	; 0x71
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f001 fd21 	bl	800abf4 <VL53L0X_RdWord>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80091b8:	8bbb      	ldrh	r3, [r7, #28]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7ff fec9 	bl	8008f52 <VL53L0X_decode_timeout>
 80091c0:	4603      	mov	r3, r0
 80091c2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80091c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80091cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80091d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091d2:	4619      	mov	r1, r3
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f7ff fefd 	bl	8008fd4 <VL53L0X_calc_timeout_us>
 80091da:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091e0:	601a      	str	r2, [r3, #0]

	return Status;
 80091e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3730      	adds	r7, #48	; 0x30
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b08a      	sub	sp, #40	; 0x28
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	460b      	mov	r3, r1
 80091f8:	607a      	str	r2, [r7, #4]
 80091fa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80091fc:	2300      	movs	r3, #0
 80091fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009202:	7afb      	ldrb	r3, [r7, #11]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d005      	beq.n	8009214 <set_sequence_step_timeout+0x26>
 8009208:	7afb      	ldrb	r3, [r7, #11]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d002      	beq.n	8009214 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800920e:	7afb      	ldrb	r3, [r7, #11]
 8009210:	2b02      	cmp	r3, #2
 8009212:	d138      	bne.n	8009286 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009214:	f107 031d 	add.w	r3, r7, #29
 8009218:	461a      	mov	r2, r3
 800921a:	2100      	movs	r1, #0
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f7fd f99b 	bl	8006558 <VL53L0X_GetVcselPulsePeriod>
 8009222:	4603      	mov	r3, r0
 8009224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009228:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800922c:	2b00      	cmp	r3, #0
 800922e:	d11a      	bne.n	8009266 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009230:	7f7b      	ldrb	r3, [r7, #29]
 8009232:	461a      	mov	r2, r3
 8009234:	6879      	ldr	r1, [r7, #4]
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f7ff fea2 	bl	8008f80 <VL53L0X_calc_timeout_mclks>
 800923c:	4603      	mov	r3, r0
 800923e:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009240:	8bfb      	ldrh	r3, [r7, #30]
 8009242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009246:	d903      	bls.n	8009250 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009248:	23ff      	movs	r3, #255	; 0xff
 800924a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800924e:	e004      	b.n	800925a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009250:	8bfb      	ldrh	r3, [r7, #30]
 8009252:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009254:	3b01      	subs	r3, #1
 8009256:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800925a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800925e:	b29a      	uxth	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009266:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800926a:	2b00      	cmp	r3, #0
 800926c:	f040 80ad 	bne.w	80093ca <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 8009270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009274:	461a      	mov	r2, r3
 8009276:	2146      	movs	r1, #70	; 0x46
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f001 fd2f 	bl	800acdc <VL53L0X_WrByte>
 800927e:	4603      	mov	r3, r0
 8009280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009284:	e0a1      	b.n	80093ca <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009286:	7afb      	ldrb	r3, [r7, #11]
 8009288:	2b03      	cmp	r3, #3
 800928a:	d135      	bne.n	80092f8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800928c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009290:	2b00      	cmp	r3, #0
 8009292:	d11b      	bne.n	80092cc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009294:	f107 031d 	add.w	r3, r7, #29
 8009298:	461a      	mov	r2, r3
 800929a:	2100      	movs	r1, #0
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f7fd f95b 	bl	8006558 <VL53L0X_GetVcselPulsePeriod>
 80092a2:	4603      	mov	r3, r0
 80092a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80092a8:	7f7b      	ldrb	r3, [r7, #29]
 80092aa:	461a      	mov	r2, r3
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f7ff fe66 	bl	8008f80 <VL53L0X_calc_timeout_mclks>
 80092b4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80092b6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80092b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff fe1d 	bl	8008efa <VL53L0X_encode_timeout>
 80092c0:	4603      	mov	r3, r0
 80092c2:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092c4:	8b7a      	ldrh	r2, [r7, #26]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80092cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d108      	bne.n	80092e6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80092d4:	8b7b      	ldrh	r3, [r7, #26]
 80092d6:	461a      	mov	r2, r3
 80092d8:	2151      	movs	r1, #81	; 0x51
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f001 fd22 	bl	800ad24 <VL53L0X_WrWord>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80092e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d16d      	bne.n	80093ca <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80092f6:	e068      	b.n	80093ca <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80092f8:	7afb      	ldrb	r3, [r7, #11]
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	d162      	bne.n	80093c4 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80092fe:	f107 0314 	add.w	r3, r7, #20
 8009302:	4619      	mov	r1, r3
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f7fd fa33 	bl	8006770 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800930e:	7dfb      	ldrb	r3, [r7, #23]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d01d      	beq.n	8009350 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009314:	f107 031d 	add.w	r3, r7, #29
 8009318:	461a      	mov	r2, r3
 800931a:	2100      	movs	r1, #0
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f7fd f91b 	bl	8006558 <VL53L0X_GetVcselPulsePeriod>
 8009322:	4603      	mov	r3, r0
 8009324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009328:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10f      	bne.n	8009350 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009330:	f107 031a 	add.w	r3, r7, #26
 8009334:	461a      	mov	r2, r3
 8009336:	2151      	movs	r1, #81	; 0x51
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f001 fc5b 	bl	800abf4 <VL53L0X_RdWord>
 800933e:	4603      	mov	r3, r0
 8009340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009344:	8b7b      	ldrh	r3, [r7, #26]
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff fe03 	bl	8008f52 <VL53L0X_decode_timeout>
 800934c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800934e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009350:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009354:	2b00      	cmp	r3, #0
 8009356:	d109      	bne.n	800936c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009358:	f107 031d 	add.w	r3, r7, #29
 800935c:	461a      	mov	r2, r3
 800935e:	2101      	movs	r1, #1
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7fd f8f9 	bl	8006558 <VL53L0X_GetVcselPulsePeriod>
 8009366:	4603      	mov	r3, r0
 8009368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800936c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009370:	2b00      	cmp	r3, #0
 8009372:	d12a      	bne.n	80093ca <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009374:	7f7b      	ldrb	r3, [r7, #29]
 8009376:	461a      	mov	r2, r3
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7ff fe00 	bl	8008f80 <VL53L0X_calc_timeout_mclks>
 8009380:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8009382:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009384:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009388:	4413      	add	r3, r2
 800938a:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800938c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff fdb3 	bl	8008efa <VL53L0X_encode_timeout>
 8009394:	4603      	mov	r3, r0
 8009396:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 8009398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800939c:	2b00      	cmp	r3, #0
 800939e:	d108      	bne.n	80093b2 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80093a0:	8c3b      	ldrh	r3, [r7, #32]
 80093a2:	461a      	mov	r2, r3
 80093a4:	2171      	movs	r1, #113	; 0x71
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f001 fcbc 	bl	800ad24 <VL53L0X_WrWord>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80093b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d107      	bne.n	80093ca <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80093c2:	e002      	b.n	80093ca <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80093c4:	23fc      	movs	r3, #252	; 0xfc
 80093c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80093ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3728      	adds	r7, #40	; 0x28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b08a      	sub	sp, #40	; 0x28
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
 80093e2:	4613      	mov	r3, r2
 80093e4:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80093ec:	230c      	movs	r3, #12
 80093ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80093f2:	2312      	movs	r3, #18
 80093f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80093f8:	2308      	movs	r3, #8
 80093fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80093fe:	230e      	movs	r3, #14
 8009400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009408:	78bb      	ldrb	r3, [r7, #2]
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009414:	23fc      	movs	r3, #252	; 0xfc
 8009416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800941a:	e020      	b.n	800945e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10d      	bne.n	800943e <VL53L0X_set_vcsel_pulse_period+0x68>
 8009422:	78ba      	ldrb	r2, [r7, #2]
 8009424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009428:	429a      	cmp	r2, r3
 800942a:	d304      	bcc.n	8009436 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800942c:	78ba      	ldrb	r2, [r7, #2]
 800942e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009432:	429a      	cmp	r2, r3
 8009434:	d903      	bls.n	800943e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009436:	23fc      	movs	r3, #252	; 0xfc
 8009438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800943c:	e00f      	b.n	800945e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d10c      	bne.n	800945e <VL53L0X_set_vcsel_pulse_period+0x88>
 8009444:	78ba      	ldrb	r2, [r7, #2]
 8009446:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800944a:	429a      	cmp	r2, r3
 800944c:	d304      	bcc.n	8009458 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800944e:	78ba      	ldrb	r2, [r7, #2]
 8009450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009454:	429a      	cmp	r2, r3
 8009456:	d902      	bls.n	800945e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009458:	23fc      	movs	r3, #252	; 0xfc
 800945a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800945e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8009466:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800946a:	e239      	b.n	80098e0 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d150      	bne.n	8009514 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009472:	78bb      	ldrb	r3, [r7, #2]
 8009474:	2b0c      	cmp	r3, #12
 8009476:	d110      	bne.n	800949a <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8009478:	2218      	movs	r2, #24
 800947a:	2157      	movs	r1, #87	; 0x57
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f001 fc2d 	bl	800acdc <VL53L0X_WrByte>
 8009482:	4603      	mov	r3, r0
 8009484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8009488:	2208      	movs	r2, #8
 800948a:	2156      	movs	r1, #86	; 0x56
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 fc25 	bl	800acdc <VL53L0X_WrByte>
 8009492:	4603      	mov	r3, r0
 8009494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009498:	e17f      	b.n	800979a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800949a:	78bb      	ldrb	r3, [r7, #2]
 800949c:	2b0e      	cmp	r3, #14
 800949e:	d110      	bne.n	80094c2 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80094a0:	2230      	movs	r2, #48	; 0x30
 80094a2:	2157      	movs	r1, #87	; 0x57
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 fc19 	bl	800acdc <VL53L0X_WrByte>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80094b0:	2208      	movs	r2, #8
 80094b2:	2156      	movs	r1, #86	; 0x56
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 fc11 	bl	800acdc <VL53L0X_WrByte>
 80094ba:	4603      	mov	r3, r0
 80094bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094c0:	e16b      	b.n	800979a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80094c2:	78bb      	ldrb	r3, [r7, #2]
 80094c4:	2b10      	cmp	r3, #16
 80094c6:	d110      	bne.n	80094ea <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80094c8:	2240      	movs	r2, #64	; 0x40
 80094ca:	2157      	movs	r1, #87	; 0x57
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f001 fc05 	bl	800acdc <VL53L0X_WrByte>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80094d8:	2208      	movs	r2, #8
 80094da:	2156      	movs	r1, #86	; 0x56
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fbfd 	bl	800acdc <VL53L0X_WrByte>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094e8:	e157      	b.n	800979a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80094ea:	78bb      	ldrb	r3, [r7, #2]
 80094ec:	2b12      	cmp	r3, #18
 80094ee:	f040 8154 	bne.w	800979a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80094f2:	2250      	movs	r2, #80	; 0x50
 80094f4:	2157      	movs	r1, #87	; 0x57
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f001 fbf0 	bl	800acdc <VL53L0X_WrByte>
 80094fc:	4603      	mov	r3, r0
 80094fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009502:	2208      	movs	r2, #8
 8009504:	2156      	movs	r1, #86	; 0x56
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f001 fbe8 	bl	800acdc <VL53L0X_WrByte>
 800950c:	4603      	mov	r3, r0
 800950e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009512:	e142      	b.n	800979a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009514:	78fb      	ldrb	r3, [r7, #3]
 8009516:	2b01      	cmp	r3, #1
 8009518:	f040 813f 	bne.w	800979a <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800951c:	78bb      	ldrb	r3, [r7, #2]
 800951e:	2b08      	cmp	r3, #8
 8009520:	d14c      	bne.n	80095bc <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009522:	2210      	movs	r2, #16
 8009524:	2148      	movs	r1, #72	; 0x48
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f001 fbd8 	bl	800acdc <VL53L0X_WrByte>
 800952c:	4603      	mov	r3, r0
 800952e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009532:	2208      	movs	r2, #8
 8009534:	2147      	movs	r1, #71	; 0x47
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 fbd0 	bl	800acdc <VL53L0X_WrByte>
 800953c:	4603      	mov	r3, r0
 800953e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009542:	2202      	movs	r2, #2
 8009544:	2132      	movs	r1, #50	; 0x32
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f001 fbc8 	bl	800acdc <VL53L0X_WrByte>
 800954c:	4603      	mov	r3, r0
 800954e:	461a      	mov	r2, r3
 8009550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009554:	4313      	orrs	r3, r2
 8009556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800955a:	220c      	movs	r2, #12
 800955c:	2130      	movs	r1, #48	; 0x30
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 fbbc 	bl	800acdc <VL53L0X_WrByte>
 8009564:	4603      	mov	r3, r0
 8009566:	461a      	mov	r2, r3
 8009568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800956c:	4313      	orrs	r3, r2
 800956e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009572:	2201      	movs	r2, #1
 8009574:	21ff      	movs	r1, #255	; 0xff
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 fbb0 	bl	800acdc <VL53L0X_WrByte>
 800957c:	4603      	mov	r3, r0
 800957e:	461a      	mov	r2, r3
 8009580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009584:	4313      	orrs	r3, r2
 8009586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800958a:	2230      	movs	r2, #48	; 0x30
 800958c:	2130      	movs	r1, #48	; 0x30
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f001 fba4 	bl	800acdc <VL53L0X_WrByte>
 8009594:	4603      	mov	r3, r0
 8009596:	461a      	mov	r2, r3
 8009598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800959c:	4313      	orrs	r3, r2
 800959e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80095a2:	2200      	movs	r2, #0
 80095a4:	21ff      	movs	r1, #255	; 0xff
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f001 fb98 	bl	800acdc <VL53L0X_WrByte>
 80095ac:	4603      	mov	r3, r0
 80095ae:	461a      	mov	r2, r3
 80095b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b4:	4313      	orrs	r3, r2
 80095b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095ba:	e0ee      	b.n	800979a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80095bc:	78bb      	ldrb	r3, [r7, #2]
 80095be:	2b0a      	cmp	r3, #10
 80095c0:	d14c      	bne.n	800965c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80095c2:	2228      	movs	r2, #40	; 0x28
 80095c4:	2148      	movs	r1, #72	; 0x48
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f001 fb88 	bl	800acdc <VL53L0X_WrByte>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80095d2:	2208      	movs	r2, #8
 80095d4:	2147      	movs	r1, #71	; 0x47
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f001 fb80 	bl	800acdc <VL53L0X_WrByte>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80095e2:	2203      	movs	r2, #3
 80095e4:	2132      	movs	r1, #50	; 0x32
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f001 fb78 	bl	800acdc <VL53L0X_WrByte>
 80095ec:	4603      	mov	r3, r0
 80095ee:	461a      	mov	r2, r3
 80095f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095f4:	4313      	orrs	r3, r2
 80095f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80095fa:	2209      	movs	r2, #9
 80095fc:	2130      	movs	r1, #48	; 0x30
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f001 fb6c 	bl	800acdc <VL53L0X_WrByte>
 8009604:	4603      	mov	r3, r0
 8009606:	461a      	mov	r2, r3
 8009608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800960c:	4313      	orrs	r3, r2
 800960e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009612:	2201      	movs	r2, #1
 8009614:	21ff      	movs	r1, #255	; 0xff
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f001 fb60 	bl	800acdc <VL53L0X_WrByte>
 800961c:	4603      	mov	r3, r0
 800961e:	461a      	mov	r2, r3
 8009620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009624:	4313      	orrs	r3, r2
 8009626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800962a:	2220      	movs	r2, #32
 800962c:	2130      	movs	r1, #48	; 0x30
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f001 fb54 	bl	800acdc <VL53L0X_WrByte>
 8009634:	4603      	mov	r3, r0
 8009636:	461a      	mov	r2, r3
 8009638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800963c:	4313      	orrs	r3, r2
 800963e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009642:	2200      	movs	r2, #0
 8009644:	21ff      	movs	r1, #255	; 0xff
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f001 fb48 	bl	800acdc <VL53L0X_WrByte>
 800964c:	4603      	mov	r3, r0
 800964e:	461a      	mov	r2, r3
 8009650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009654:	4313      	orrs	r3, r2
 8009656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800965a:	e09e      	b.n	800979a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800965c:	78bb      	ldrb	r3, [r7, #2]
 800965e:	2b0c      	cmp	r3, #12
 8009660:	d14c      	bne.n	80096fc <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009662:	2238      	movs	r2, #56	; 0x38
 8009664:	2148      	movs	r1, #72	; 0x48
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 fb38 	bl	800acdc <VL53L0X_WrByte>
 800966c:	4603      	mov	r3, r0
 800966e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009672:	2208      	movs	r2, #8
 8009674:	2147      	movs	r1, #71	; 0x47
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f001 fb30 	bl	800acdc <VL53L0X_WrByte>
 800967c:	4603      	mov	r3, r0
 800967e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009682:	2203      	movs	r2, #3
 8009684:	2132      	movs	r1, #50	; 0x32
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f001 fb28 	bl	800acdc <VL53L0X_WrByte>
 800968c:	4603      	mov	r3, r0
 800968e:	461a      	mov	r2, r3
 8009690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009694:	4313      	orrs	r3, r2
 8009696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800969a:	2208      	movs	r2, #8
 800969c:	2130      	movs	r1, #48	; 0x30
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f001 fb1c 	bl	800acdc <VL53L0X_WrByte>
 80096a4:	4603      	mov	r3, r0
 80096a6:	461a      	mov	r2, r3
 80096a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ac:	4313      	orrs	r3, r2
 80096ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80096b2:	2201      	movs	r2, #1
 80096b4:	21ff      	movs	r1, #255	; 0xff
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 fb10 	bl	800acdc <VL53L0X_WrByte>
 80096bc:	4603      	mov	r3, r0
 80096be:	461a      	mov	r2, r3
 80096c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c4:	4313      	orrs	r3, r2
 80096c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80096ca:	2220      	movs	r2, #32
 80096cc:	2130      	movs	r1, #48	; 0x30
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 fb04 	bl	800acdc <VL53L0X_WrByte>
 80096d4:	4603      	mov	r3, r0
 80096d6:	461a      	mov	r2, r3
 80096d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096dc:	4313      	orrs	r3, r2
 80096de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80096e2:	2200      	movs	r2, #0
 80096e4:	21ff      	movs	r1, #255	; 0xff
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f001 faf8 	bl	800acdc <VL53L0X_WrByte>
 80096ec:	4603      	mov	r3, r0
 80096ee:	461a      	mov	r2, r3
 80096f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096f4:	4313      	orrs	r3, r2
 80096f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096fa:	e04e      	b.n	800979a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80096fc:	78bb      	ldrb	r3, [r7, #2]
 80096fe:	2b0e      	cmp	r3, #14
 8009700:	d14b      	bne.n	800979a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009702:	2248      	movs	r2, #72	; 0x48
 8009704:	2148      	movs	r1, #72	; 0x48
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 fae8 	bl	800acdc <VL53L0X_WrByte>
 800970c:	4603      	mov	r3, r0
 800970e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009712:	2208      	movs	r2, #8
 8009714:	2147      	movs	r1, #71	; 0x47
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 fae0 	bl	800acdc <VL53L0X_WrByte>
 800971c:	4603      	mov	r3, r0
 800971e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009722:	2203      	movs	r2, #3
 8009724:	2132      	movs	r1, #50	; 0x32
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fad8 	bl	800acdc <VL53L0X_WrByte>
 800972c:	4603      	mov	r3, r0
 800972e:	461a      	mov	r2, r3
 8009730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009734:	4313      	orrs	r3, r2
 8009736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800973a:	2207      	movs	r2, #7
 800973c:	2130      	movs	r1, #48	; 0x30
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f001 facc 	bl	800acdc <VL53L0X_WrByte>
 8009744:	4603      	mov	r3, r0
 8009746:	461a      	mov	r2, r3
 8009748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800974c:	4313      	orrs	r3, r2
 800974e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009752:	2201      	movs	r2, #1
 8009754:	21ff      	movs	r1, #255	; 0xff
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f001 fac0 	bl	800acdc <VL53L0X_WrByte>
 800975c:	4603      	mov	r3, r0
 800975e:	461a      	mov	r2, r3
 8009760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009764:	4313      	orrs	r3, r2
 8009766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800976a:	2220      	movs	r2, #32
 800976c:	2130      	movs	r1, #48	; 0x30
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f001 fab4 	bl	800acdc <VL53L0X_WrByte>
 8009774:	4603      	mov	r3, r0
 8009776:	461a      	mov	r2, r3
 8009778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800977c:	4313      	orrs	r3, r2
 800977e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009782:	2200      	movs	r2, #0
 8009784:	21ff      	movs	r1, #255	; 0xff
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f001 faa8 	bl	800acdc <VL53L0X_WrByte>
 800978c:	4603      	mov	r3, r0
 800978e:	461a      	mov	r2, r3
 8009790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009794:	4313      	orrs	r3, r2
 8009796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800979a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d17f      	bne.n	80098a2 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80097a2:	78bb      	ldrb	r3, [r7, #2]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fe fe35 	bl	8008414 <VL53L0X_encode_vcsel_period>
 80097aa:	4603      	mov	r3, r0
 80097ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d002      	beq.n	80097bc <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d045      	beq.n	8009846 <VL53L0X_set_vcsel_pulse_period+0x470>
 80097ba:	e06e      	b.n	800989a <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80097bc:	f107 0314 	add.w	r3, r7, #20
 80097c0:	461a      	mov	r2, r3
 80097c2:	2103      	movs	r1, #3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff fc31 	bl	800902c <get_sequence_step_timeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80097d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d109      	bne.n	80097ec <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80097d8:	f107 0310 	add.w	r3, r7, #16
 80097dc:	461a      	mov	r2, r3
 80097de:	2102      	movs	r1, #2
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff fc23 	bl	800902c <get_sequence_step_timeout>
 80097e6:	4603      	mov	r3, r0
 80097e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80097ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d109      	bne.n	8009808 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80097f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80097f8:	461a      	mov	r2, r3
 80097fa:	2150      	movs	r1, #80	; 0x50
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 fa6d 	bl	800acdc <VL53L0X_WrByte>
 8009802:	4603      	mov	r3, r0
 8009804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800980c:	2b00      	cmp	r3, #0
 800980e:	d108      	bne.n	8009822 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	461a      	mov	r2, r3
 8009814:	2103      	movs	r1, #3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff fce9 	bl	80091ee <set_sequence_step_timeout>
 800981c:	4603      	mov	r3, r0
 800981e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009822:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009826:	2b00      	cmp	r3, #0
 8009828:	d108      	bne.n	800983c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	461a      	mov	r2, r3
 800982e:	2102      	movs	r1, #2
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7ff fcdc 	bl	80091ee <set_sequence_step_timeout>
 8009836:	4603      	mov	r3, r0
 8009838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	78ba      	ldrb	r2, [r7, #2]
 8009840:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009844:	e02e      	b.n	80098a4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009846:	f107 0318 	add.w	r3, r7, #24
 800984a:	461a      	mov	r2, r3
 800984c:	2104      	movs	r1, #4
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff fbec 	bl	800902c <get_sequence_step_timeout>
 8009854:	4603      	mov	r3, r0
 8009856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800985a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800985e:	2b00      	cmp	r3, #0
 8009860:	d109      	bne.n	8009876 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009862:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009866:	461a      	mov	r2, r3
 8009868:	2170      	movs	r1, #112	; 0x70
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 fa36 	bl	800acdc <VL53L0X_WrByte>
 8009870:	4603      	mov	r3, r0
 8009872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009876:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800987a:	2b00      	cmp	r3, #0
 800987c:	d108      	bne.n	8009890 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	461a      	mov	r2, r3
 8009882:	2104      	movs	r1, #4
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff fcb2 	bl	80091ee <set_sequence_step_timeout>
 800988a:	4603      	mov	r3, r0
 800988c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	78ba      	ldrb	r2, [r7, #2]
 8009894:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009898:	e004      	b.n	80098a4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800989a:	23fc      	movs	r3, #252	; 0xfc
 800989c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098a0:	e000      	b.n	80098a4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80098a2:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80098a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80098b2:	69f9      	ldr	r1, [r7, #28]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7fc fe11 	bl	80064dc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80098ba:	4603      	mov	r3, r0
 80098bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80098c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d109      	bne.n	80098dc <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80098c8:	f107 010f 	add.w	r1, r7, #15
 80098cc:	2301      	movs	r3, #1
 80098ce:	2200      	movs	r2, #0
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7fe fcbb 	bl	800824c <VL53L0X_perform_phase_calibration>
 80098d6:	4603      	mov	r3, r0
 80098d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80098dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3728      	adds	r7, #40	; 0x28
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	460b      	mov	r3, r1
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80098fa:	7afb      	ldrb	r3, [r7, #11]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009900:	2b01      	cmp	r3, #1
 8009902:	d00a      	beq.n	800991a <VL53L0X_get_vcsel_pulse_period+0x32>
 8009904:	e013      	b.n	800992e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009906:	f107 0316 	add.w	r3, r7, #22
 800990a:	461a      	mov	r2, r3
 800990c:	2150      	movs	r1, #80	; 0x50
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f001 f8e9 	bl	800aae6 <VL53L0X_RdByte>
 8009914:	4603      	mov	r3, r0
 8009916:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009918:	e00b      	b.n	8009932 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800991a:	f107 0316 	add.w	r3, r7, #22
 800991e:	461a      	mov	r2, r3
 8009920:	2170      	movs	r1, #112	; 0x70
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f001 f8df 	bl	800aae6 <VL53L0X_RdByte>
 8009928:	4603      	mov	r3, r0
 800992a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800992c:	e001      	b.n	8009932 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800992e:	23fc      	movs	r3, #252	; 0xfc
 8009930:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009932:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d107      	bne.n	800994a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800993a:	7dbb      	ldrb	r3, [r7, #22]
 800993c:	4618      	mov	r0, r3
 800993e:	f7fe fd56 	bl	80083ee <VL53L0X_decode_vcsel_period>
 8009942:	4603      	mov	r3, r0
 8009944:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	701a      	strb	r2, [r3, #0]

	return Status;
 800994a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b092      	sub	sp, #72	; 0x48
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009960:	2300      	movs	r3, #0
 8009962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009966:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800996a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 800996c:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8009970:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009972:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009976:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009978:	f44f 7325 	mov.w	r3, #660	; 0x294
 800997c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800997e:	f240 234e 	movw	r3, #590	; 0x24e
 8009982:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009984:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009988:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800998a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800998e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009990:	f240 2326 	movw	r3, #550	; 0x226
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800999a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800999e:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d205      	bcs.n	80099b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099ac:	23fc      	movs	r3, #252	; 0xfc
 80099ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80099b2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80099b6:	e0aa      	b.n	8009b0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80099b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099bc:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80099c4:	f107 0314 	add.w	r3, r7, #20
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fc fed0 	bl	8006770 <VL53L0X_GetSequenceStepEnables>
 80099d0:	4603      	mov	r3, r0
 80099d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80099d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d15b      	bne.n	8009a96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80099de:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d105      	bne.n	80099f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80099e4:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d102      	bne.n	80099f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80099ea:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d052      	beq.n	8009a96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80099f0:	f107 0310 	add.w	r3, r7, #16
 80099f4:	461a      	mov	r2, r3
 80099f6:	2102      	movs	r1, #2
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f7ff fb17 	bl	800902c <get_sequence_step_timeout>
 80099fe:	4603      	mov	r3, r0
 8009a00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009a04:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d002      	beq.n	8009a12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009a0c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a10:	e07d      	b.n	8009b0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009a12:	7d3b      	ldrb	r3, [r7, #20]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00f      	beq.n	8009a38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009a18:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a1c:	4413      	add	r3, r2
 8009a1e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009a20:	69fa      	ldr	r2, [r7, #28]
 8009a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d204      	bcs.n	8009a32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009a28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a30:	e002      	b.n	8009a38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a32:	23fc      	movs	r3, #252	; 0xfc
 8009a34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009a38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009a40:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a44:	e063      	b.n	8009b0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009a46:	7dbb      	ldrb	r3, [r7, #22]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d011      	beq.n	8009a70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a50:	4413      	add	r3, r2
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009a56:	69fa      	ldr	r2, [r7, #28]
 8009a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d204      	bcs.n	8009a68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	643b      	str	r3, [r7, #64]	; 0x40
 8009a66:	e016      	b.n	8009a96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a68:	23fc      	movs	r3, #252	; 0xfc
 8009a6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a6e:	e012      	b.n	8009a96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009a70:	7d7b      	ldrb	r3, [r7, #21]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00f      	beq.n	8009a96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a7a:	4413      	add	r3, r2
 8009a7c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d204      	bcs.n	8009a90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a8e:	e002      	b.n	8009a96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a90:	23fc      	movs	r3, #252	; 0xfc
 8009a92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009a96:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009a9e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009aa2:	e034      	b.n	8009b0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d019      	beq.n	8009ade <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009aaa:	f107 030c 	add.w	r3, r7, #12
 8009aae:	461a      	mov	r2, r3
 8009ab0:	2103      	movs	r1, #3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff faba 	bl	800902c <get_sequence_step_timeout>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ac2:	4413      	add	r3, r2
 8009ac4:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009ac6:	69fa      	ldr	r2, [r7, #28]
 8009ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d204      	bcs.n	8009ad8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8009ad6:	e002      	b.n	8009ade <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ad8:	23fc      	movs	r3, #252	; 0xfc
 8009ada:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009ade:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d111      	bne.n	8009b0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009ae6:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00e      	beq.n	8009b0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009aec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 8009af4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009af6:	2104      	movs	r1, #4
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7ff fb78 	bl	80091ee <set_sequence_step_timeout>
 8009afe:	4603      	mov	r3, r0
 8009b00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009b0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3748      	adds	r7, #72	; 0x48
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b090      	sub	sp, #64	; 0x40
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b20:	2300      	movs	r3, #0
 8009b22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009b26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009b2a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009b2c:	f240 7376 	movw	r3, #1910	; 0x776
 8009b30:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009b32:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009b36:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009b38:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009b3c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009b3e:	f240 234e 	movw	r3, #590	; 0x24e
 8009b42:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009b44:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009b48:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009b4a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009b4e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009b50:	f240 2326 	movw	r3, #550	; 0x226
 8009b54:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8009b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5e:	441a      	add	r2, r3
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009b64:	f107 0318 	add.w	r3, r7, #24
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7fc fe00 	bl	8006770 <VL53L0X_GetSequenceStepEnables>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8009b76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009b7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b82:	e075      	b.n	8009c70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8009b84:	7e3b      	ldrb	r3, [r7, #24]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d105      	bne.n	8009b96 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009b8a:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d102      	bne.n	8009b96 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8009b90:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d030      	beq.n	8009bf8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8009b96:	f107 0310 	add.w	r3, r7, #16
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	2102      	movs	r1, #2
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7ff fa44 	bl	800902c <get_sequence_step_timeout>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8009baa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d122      	bne.n	8009bf8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009bb2:	7e3b      	ldrb	r3, [r7, #24]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d007      	beq.n	8009bc8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009bbc:	6939      	ldr	r1, [r7, #16]
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bc2:	441a      	add	r2, r3
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009bc8:	7ebb      	ldrb	r3, [r7, #26]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d009      	beq.n	8009be2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009bd2:	6939      	ldr	r1, [r7, #16]
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	440b      	add	r3, r1
 8009bd8:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bda:	441a      	add	r2, r3
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	e00a      	b.n	8009bf8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009be2:	7e7b      	ldrb	r3, [r7, #25]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009bec:	6939      	ldr	r1, [r7, #16]
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bf2:	441a      	add	r2, r3
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009bf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d114      	bne.n	8009c2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009c00:	7efb      	ldrb	r3, [r7, #27]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d011      	beq.n	8009c2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009c06:	f107 030c 	add.w	r3, r7, #12
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	2103      	movs	r1, #3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7ff fa0c 	bl	800902c <get_sequence_step_timeout>
 8009c14:	4603      	mov	r3, r0
 8009c16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8009c1e:	68f9      	ldr	r1, [r7, #12]
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c24:	441a      	add	r2, r3
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d114      	bne.n	8009c5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009c32:	7f3b      	ldrb	r3, [r7, #28]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d011      	beq.n	8009c5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009c38:	f107 0314 	add.w	r3, r7, #20
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	2104      	movs	r1, #4
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff f9f3 	bl	800902c <get_sequence_step_timeout>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009c50:	6979      	ldr	r1, [r7, #20]
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c56:	441a      	add	r2, r3
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d103      	bne.n	8009c6c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3740      	adds	r7, #64	; 0x40
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b088      	sub	sp, #32
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c82:	2300      	movs	r3, #0
 8009c84:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009c8a:	e0c6      	b.n	8009e1a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	4413      	add	r3, r2
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	74fb      	strb	r3, [r7, #19]
		Index++;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8009c9c:	7cfb      	ldrb	r3, [r7, #19]
 8009c9e:	2bff      	cmp	r3, #255	; 0xff
 8009ca0:	f040 808d 	bne.w	8009dbe <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	4413      	add	r3, r2
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	747b      	strb	r3, [r7, #17]
			Index++;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009cb4:	7c7b      	ldrb	r3, [r7, #17]
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d87e      	bhi.n	8009db8 <VL53L0X_load_tuning_settings+0x140>
 8009cba:	a201      	add	r2, pc, #4	; (adr r2, 8009cc0 <VL53L0X_load_tuning_settings+0x48>)
 8009cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc0:	08009cd1 	.word	0x08009cd1
 8009cc4:	08009d0b 	.word	0x08009d0b
 8009cc8:	08009d45 	.word	0x08009d45
 8009ccc:	08009d7f 	.word	0x08009d7f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	743b      	strb	r3, [r7, #16]
				Index++;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	3301      	adds	r3, #1
 8009cee:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009cf0:	7c3b      	ldrb	r3, [r7, #16]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	021b      	lsls	r3, r3, #8
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	4413      	add	r3, r2
 8009cfe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	89ba      	ldrh	r2, [r7, #12]
 8009d04:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009d08:	e087      	b.n	8009e1a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	4413      	add	r3, r2
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	743b      	strb	r3, [r7, #16]
				Index++;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	3301      	adds	r3, #1
 8009d18:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	4413      	add	r3, r2
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	3301      	adds	r3, #1
 8009d28:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009d2a:	7c3b      	ldrb	r3, [r7, #16]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	021b      	lsls	r3, r3, #8
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	4413      	add	r3, r2
 8009d38:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	89ba      	ldrh	r2, [r7, #12]
 8009d3e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009d42:	e06a      	b.n	8009e1a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	4413      	add	r3, r2
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	743b      	strb	r3, [r7, #16]
				Index++;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	3301      	adds	r3, #1
 8009d52:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	4413      	add	r3, r2
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	3301      	adds	r3, #1
 8009d62:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009d64:	7c3b      	ldrb	r3, [r7, #16]
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	021b      	lsls	r3, r3, #8
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	4413      	add	r3, r2
 8009d72:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	89ba      	ldrh	r2, [r7, #12]
 8009d78:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8009d7c:	e04d      	b.n	8009e1a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	4413      	add	r3, r2
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	743b      	strb	r3, [r7, #16]
				Index++;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	4413      	add	r3, r2
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009d9e:	7c3b      	ldrb	r3, [r7, #16]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	021b      	lsls	r3, r3, #8
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	4413      	add	r3, r2
 8009dac:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	89ba      	ldrh	r2, [r7, #12]
 8009db2:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 8009db6:	e030      	b.n	8009e1a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009db8:	23fc      	movs	r3, #252	; 0xfc
 8009dba:	77fb      	strb	r3, [r7, #31]
 8009dbc:	e02d      	b.n	8009e1a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8009dbe:	7cfb      	ldrb	r3, [r7, #19]
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d828      	bhi.n	8009e16 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	4413      	add	r3, r2
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	61bb      	str	r3, [r7, #24]
 8009dd8:	e00f      	b.n	8009dfa <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	4413      	add	r3, r2
 8009de0:	7819      	ldrb	r1, [r3, #0]
 8009de2:	f107 0208 	add.w	r2, r7, #8
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	4413      	add	r3, r2
 8009dea:	460a      	mov	r2, r1
 8009dec:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	3301      	adds	r3, #1
 8009df2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	3301      	adds	r3, #1
 8009df8:	61bb      	str	r3, [r7, #24]
 8009dfa:	7cfb      	ldrb	r3, [r7, #19]
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	dbeb      	blt.n	8009dda <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009e02:	7cfb      	ldrb	r3, [r7, #19]
 8009e04:	f107 0208 	add.w	r2, r7, #8
 8009e08:	7cb9      	ldrb	r1, [r7, #18]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fe96 	bl	800ab3c <VL53L0X_WriteMulti>
 8009e10:	4603      	mov	r3, r0
 8009e12:	77fb      	strb	r3, [r7, #31]
 8009e14:	e001      	b.n	8009e1a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e16:	23fc      	movs	r3, #252	; 0xfc
 8009e18:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	4413      	add	r3, r2
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d004      	beq.n	8009e30 <VL53L0X_load_tuning_settings+0x1b8>
 8009e26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f43f af2e 	beq.w	8009c8c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009e30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3720      	adds	r7, #32
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b088      	sub	sp, #32
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009e52:	f107 0313 	add.w	r3, r7, #19
 8009e56:	4619      	mov	r1, r3
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7fc fd55 	bl	8006908 <VL53L0X_GetXTalkCompensationEnable>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009e62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d111      	bne.n	8009e8e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8009e6a:	7cfb      	ldrb	r3, [r7, #19]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00e      	beq.n	8009e8e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
 8009e74:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	8a9b      	ldrh	r3, [r3, #20]
 8009e7a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	fb02 f303 	mul.w	r3, r2, r3
 8009e82:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	3380      	adds	r3, #128	; 0x80
 8009e88:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8009e8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3720      	adds	r7, #32
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b086      	sub	sp, #24
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	60b9      	str	r1, [r7, #8]
 8009ea4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009eb2:	f107 0310 	add.w	r3, r7, #16
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff ffbe 	bl	8009e3c <VL53L0X_get_total_xtalk_rate>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009ec4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d105      	bne.n	8009ed8 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	441a      	add	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	601a      	str	r2, [r3, #0]

	return Status;
 8009ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b09a      	sub	sp, #104	; 0x68
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009ef2:	2312      	movs	r3, #18
 8009ef4:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8009ef6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009efa:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009efc:	2342      	movs	r3, #66	; 0x42
 8009efe:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009f00:	2306      	movs	r3, #6
 8009f02:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009f04:	2307      	movs	r3, #7
 8009f06:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 8009f14:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009f1c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8009f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f22:	fb02 f303 	mul.w	r3, r2, r3
 8009f26:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2a:	3380      	adds	r3, #128	; 0x80
 8009f2c:	0a1b      	lsrs	r3, r3, #8
 8009f2e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f34:	fb02 f303 	mul.w	r3, r2, r3
 8009f38:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d01a      	beq.n	8009f7a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	029b      	lsls	r3, r3, #10
 8009f48:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8009f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f50:	4413      	add	r3, r2
 8009f52:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8009f54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f5c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8009f5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f60:	4613      	mov	r3, r2
 8009f62:	005b      	lsls	r3, r3, #1
 8009f64:	4413      	add	r3, r2
 8009f66:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8009f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f6a:	fb03 f303 	mul.w	r3, r3, r3
 8009f6e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8009f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f72:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009f76:	0c1b      	lsrs	r3, r3, #16
 8009f78:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009f7e:	fb02 f303 	mul.w	r3, r2, r3
 8009f82:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8009f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009f8a:	0c1b      	lsrs	r3, r3, #16
 8009f8c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	fb03 f303 	mul.w	r3, r3, r3
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8009f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009f9c:	0c1b      	lsrs	r3, r3, #16
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fa2:	085a      	lsrs	r2, r3, #1
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	441a      	add	r2, r3
 8009fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fae:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fb4:	fb02 f303 	mul.w	r3, r2, r3
 8009fb8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8009fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc0:	d302      	bcc.n	8009fc8 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8009fc2:	4b54      	ldr	r3, [pc, #336]	; (800a114 <VL53L0X_calc_dmax+0x230>)
 8009fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8009fc6:	e015      	b.n	8009ff4 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8009fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fca:	085a      	lsrs	r2, r3, #1
 8009fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fce:	441a      	add	r2, r3
 8009fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8009fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fdc:	fb02 f303 	mul.w	r3, r2, r3
 8009fe0:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8009fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fe4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009fe8:	0c1b      	lsrs	r3, r3, #16
 8009fea:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8009fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fee:	fb03 f303 	mul.w	r3, r3, r3
 8009ff2:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ff6:	039b      	lsls	r3, r3, #14
 8009ff8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ffc:	4a46      	ldr	r2, [pc, #280]	; (800a118 <VL53L0X_calc_dmax+0x234>)
 8009ffe:	fba2 2303 	umull	r2, r3, r2, r3
 800a002:	099b      	lsrs	r3, r3, #6
 800a004:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	fb03 f303 	mul.w	r3, r3, r3
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a010:	fb03 f303 	mul.w	r3, r3, r3
 800a014:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	3308      	adds	r3, #8
 800a01a:	091b      	lsrs	r3, r3, #4
 800a01c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a01e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a028:	4613      	mov	r3, r2
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	4413      	add	r3, r2
 800a02e:	011b      	lsls	r3, r3, #4
 800a030:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a038:	0b9b      	lsrs	r3, r3, #14
 800a03a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a03c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a03e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a040:	4413      	add	r3, r2
 800a042:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a046:	085b      	lsrs	r3, r3, #1
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	4413      	add	r3, r2
 800a04c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a052:	fbb2 f3f3 	udiv	r3, r2, r3
 800a056:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	039b      	lsls	r3, r3, #14
 800a05c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	085b      	lsrs	r3, r3, #1
 800a062:	69ba      	ldr	r2, [r7, #24]
 800a064:	4413      	add	r3, r2
 800a066:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a068:	69ba      	ldr	r2, [r7, #24]
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a070:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a076:	fb02 f303 	mul.w	r3, r2, r3
 800a07a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a082:	4a25      	ldr	r2, [pc, #148]	; (800a118 <VL53L0X_calc_dmax+0x234>)
 800a084:	fba2 2303 	umull	r2, r3, r2, r3
 800a088:	099b      	lsrs	r3, r3, #6
 800a08a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a098:	4a1f      	ldr	r2, [pc, #124]	; (800a118 <VL53L0X_calc_dmax+0x234>)
 800a09a:	fba2 2303 	umull	r2, r3, r2, r3
 800a09e:	099b      	lsrs	r3, r3, #6
 800a0a0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a0a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0a4:	3380      	adds	r3, #128	; 0x80
 800a0a6:	0a1b      	lsrs	r3, r3, #8
 800a0a8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d008      	beq.n	800a0c2 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	085a      	lsrs	r2, r3, #1
 800a0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b6:	441a      	add	r2, r3
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0be:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0c0:	e001      	b.n	800a0c6 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a0c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a0c8:	f7fe f9b7 	bl	800843a <VL53L0X_isqrt>
 800a0cc:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d008      	beq.n	800a0e6 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	085a      	lsrs	r2, r3, #1
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0da:	441a      	add	r2, r3
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0e4:	e001      	b.n	800a0ea <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a0ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a0ec:	f7fe f9a5 	bl	800843a <VL53L0X_isqrt>
 800a0f0:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a0f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d902      	bls.n	800a106 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800a100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a102:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a104:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a106:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3768      	adds	r7, #104	; 0x68
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	fff00000 	.word	0xfff00000
 800a118:	10624dd3 	.word	0x10624dd3

0800a11c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b0b2      	sub	sp, #200	; 0xc8
 800a120:	af04      	add	r7, sp, #16
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
 800a128:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a12a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a12e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a132:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a13a:	2342      	movs	r3, #66	; 0x42
 800a13c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a140:	f241 235c 	movw	r3, #4700	; 0x125c
 800a144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a148:	4b6b      	ldr	r3, [pc, #428]	; (800a2f8 <VL53L0X_calc_sigma_estimate+0x1dc>)
 800a14a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a14e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a156:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a15a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a162:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a164:	4b65      	ldr	r3, [pc, #404]	; (800a2fc <VL53L0X_calc_sigma_estimate+0x1e0>)
 800a166:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a16c:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a16e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a172:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 800a174:	f240 6377 	movw	r3, #1655	; 0x677
 800a178:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a17a:	2300      	movs	r3, #0
 800a17c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a1b      	ldr	r3, [r3, #32]
 800a184:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a18e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a192:	0c1b      	lsrs	r3, r3, #16
 800a194:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a19c:	f107 0310 	add.w	r3, r7, #16
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	68b9      	ldr	r1, [r7, #8]
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f7ff fe78 	bl	8009e9a <VL53L0X_get_total_signal_rate>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a1b0:	f107 0314 	add.w	r3, r7, #20
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	68b9      	ldr	r1, [r7, #8]
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f7ff fe3f 	bl	8009e3c <VL53L0X_get_total_xtalk_rate>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1ca:	fb02 f303 	mul.w	r3, r2, r3
 800a1ce:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a1d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a1d6:	0c1b      	lsrs	r3, r3, #16
 800a1d8:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1e0:	fb02 f303 	mul.w	r3, r2, r3
 800a1e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a1e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a1ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d902      	bls.n	800a1f8 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a1f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 800a1f8:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d164      	bne.n	800a2ca <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a206:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a20e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a212:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a216:	461a      	mov	r2, r3
 800a218:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f7fe feb0 	bl	8008f80 <VL53L0X_calc_timeout_mclks>
 800a220:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a228:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a230:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a234:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a238:	461a      	mov	r2, r3
 800a23a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f7fe fe9f 	bl	8008f80 <VL53L0X_calc_timeout_mclks>
 800a242:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a244:	2303      	movs	r3, #3
 800a246:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800a24a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a24e:	2b08      	cmp	r3, #8
 800a250:	d102      	bne.n	800a258 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 800a252:	2302      	movs	r3, #2
 800a254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a25c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a25e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a262:	fb02 f303 	mul.w	r3, r2, r3
 800a266:	02db      	lsls	r3, r3, #11
 800a268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a26c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a270:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a274:	4a22      	ldr	r2, [pc, #136]	; (800a300 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800a276:	fba2 2303 	umull	r2, r3, r2, r3
 800a27a:	099b      	lsrs	r3, r3, #6
 800a27c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 800a280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a284:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a286:	fb02 f303 	mul.w	r3, r2, r3
 800a28a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a28e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a292:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a296:	4a1a      	ldr	r2, [pc, #104]	; (800a300 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800a298:	fba2 2303 	umull	r2, r3, r2, r3
 800a29c:	099b      	lsrs	r3, r3, #6
 800a29e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	3380      	adds	r3, #128	; 0x80
 800a2a6:	0a1b      	lsrs	r3, r3, #8
 800a2a8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2b0:	fb02 f303 	mul.w	r3, r2, r3
 800a2b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a2b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2bc:	3380      	adds	r3, #128	; 0x80
 800a2be:	0a1b      	lsrs	r3, r3, #8
 800a2c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a2ca:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 800a2d2:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800a2d6:	e127      	b.n	800a528 <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 800a2d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d112      	bne.n	800a304 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a2e4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a2ec:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	e115      	b.n	800a524 <VL53L0X_calc_sigma_estimate+0x408>
 800a2f8:	028f87ae 	.word	0x028f87ae
 800a2fc:	0006999a 	.word	0x0006999a
 800a300:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 800a304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d102      	bne.n	800a312 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 800a30c:	2301      	movs	r3, #1
 800a30e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a312:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a316:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a31a:	041a      	lsls	r2, r3, #16
 800a31c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a31e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a32a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d902      	bls.n	800a336 <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a332:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a336:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a33a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a33e:	fb02 f303 	mul.w	r3, r2, r3
 800a342:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a34a:	4613      	mov	r3, r2
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	4413      	add	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4618      	mov	r0, r3
 800a354:	f7fe f871 	bl	800843a <VL53L0X_isqrt>
 800a358:	4603      	mov	r3, r0
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	891b      	ldrh	r3, [r3, #8]
 800a362:	461a      	mov	r2, r3
 800a364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a366:	fb02 f303 	mul.w	r3, r2, r3
 800a36a:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a36c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a36e:	041a      	lsls	r2, r3, #16
 800a370:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a374:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 800a376:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a37a:	4a6d      	ldr	r2, [pc, #436]	; (800a530 <VL53L0X_calc_sigma_estimate+0x414>)
 800a37c:	fba2 2303 	umull	r2, r3, r2, r3
 800a380:	099b      	lsrs	r3, r3, #6
 800a382:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800a384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a386:	041a      	lsls	r2, r3, #16
 800a388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a38c:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 800a38e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800a392:	4a67      	ldr	r2, [pc, #412]	; (800a530 <VL53L0X_calc_sigma_estimate+0x414>)
 800a394:	fba2 2303 	umull	r2, r3, r2, r3
 800a398:	099b      	lsrs	r3, r3, #6
 800a39a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39e:	021b      	lsls	r3, r3, #8
 800a3a0:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a3a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	bfb8      	it	lt
 800a3ae:	425b      	neglt	r3, r3
 800a3b0:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	021b      	lsls	r3, r3, #8
 800a3b6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a3b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	fb02 f303 	mul.w	r3, r2, r3
 800a3d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a3d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3d6:	4413      	add	r3, r2
 800a3d8:	0c1b      	lsrs	r3, r3, #16
 800a3da:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	085b      	lsrs	r3, r3, #1
 800a3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 800a3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ec:	fb03 f303 	mul.w	r3, r3, r3
 800a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 800a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f4:	0b9b      	lsrs	r3, r3, #14
 800a3f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3fc:	fb02 f303 	mul.w	r3, r2, r3
 800a400:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a408:	0c1b      	lsrs	r3, r3, #16
 800a40a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	fb03 f303 	mul.w	r3, r3, r3
 800a412:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 800a414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a418:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a420:	0c1b      	lsrs	r3, r3, #16
 800a422:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	fb03 f303 	mul.w	r3, r3, r3
 800a42a:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a42c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	4413      	add	r3, r2
 800a432:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a434:	6a38      	ldr	r0, [r7, #32]
 800a436:	f7fe f800 	bl	800843a <VL53L0X_isqrt>
 800a43a:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	041b      	lsls	r3, r3, #16
 800a440:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	3332      	adds	r3, #50	; 0x32
 800a446:	4a3b      	ldr	r2, [pc, #236]	; (800a534 <VL53L0X_calc_sigma_estimate+0x418>)
 800a448:	fba2 2303 	umull	r2, r3, r2, r3
 800a44c:	095a      	lsrs	r2, r3, #5
 800a44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a450:	fbb2 f3f3 	udiv	r3, r2, r3
 800a454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a45c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a460:	fb02 f303 	mul.w	r3, r2, r3
 800a464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a46c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a470:	3308      	adds	r3, #8
 800a472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 800a476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a47a:	4a2f      	ldr	r2, [pc, #188]	; (800a538 <VL53L0X_calc_sigma_estimate+0x41c>)
 800a47c:	fba2 2303 	umull	r2, r3, r2, r3
 800a480:	0b5b      	lsrs	r3, r3, #13
 800a482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a486:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a48a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a48e:	429a      	cmp	r2, r3
 800a490:	d903      	bls.n	800a49a <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a492:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a49a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a49e:	fb03 f303 	mul.w	r3, r3, r3
 800a4a2:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 800a4a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4a8:	fb03 f303 	mul.w	r3, r3, r3
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a4ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	4413      	add	r3, r2
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fd ffc0 	bl	800843a <VL53L0X_isqrt>
 800a4ba:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4c2:	fb02 f303 	mul.w	r3, r2, r3
 800a4c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a4ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d009      	beq.n	800a4e4 <VL53L0X_calc_sigma_estimate+0x3c8>
 800a4d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d005      	beq.n	800a4e4 <VL53L0X_calc_sigma_estimate+0x3c8>
 800a4d8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a4dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d903      	bls.n	800a4ec <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a4e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a4f2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 800a4fe:	6939      	ldr	r1, [r7, #16]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a508:	9302      	str	r3, [sp, #8]
 800a50a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a516:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f7ff fce3 	bl	8009ee4 <VL53L0X_calc_dmax>
 800a51e:	4603      	mov	r3, r0
 800a520:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a524:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800a528:	4618      	mov	r0, r3
 800a52a:	37b8      	adds	r7, #184	; 0xb8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	10624dd3 	.word	0x10624dd3
 800a534:	51eb851f 	.word	0x51eb851f
 800a538:	d1b71759 	.word	0xd1b71759

0800a53c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b090      	sub	sp, #64	; 0x40
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	607a      	str	r2, [r7, #4]
 800a546:	461a      	mov	r2, r3
 800a548:	460b      	mov	r3, r1
 800a54a:	72fb      	strb	r3, [r7, #11]
 800a54c:	4613      	mov	r3, r2
 800a54e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a550:	2300      	movs	r3, #0
 800a552:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a55c:	2300      	movs	r3, #0
 800a55e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a58e:	7afb      	ldrb	r3, [r7, #11]
 800a590:	10db      	asrs	r3, r3, #3
 800a592:	b2db      	uxtb	r3, r3
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a59c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d017      	beq.n	800a5d4 <VL53L0X_get_pal_range_status+0x98>
 800a5a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a5a8:	2b05      	cmp	r3, #5
 800a5aa:	d013      	beq.n	800a5d4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a5ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a5b0:	2b07      	cmp	r3, #7
 800a5b2:	d00f      	beq.n	800a5d4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a5b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a5b8:	2b0c      	cmp	r3, #12
 800a5ba:	d00b      	beq.n	800a5d4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a5bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a5c0:	2b0d      	cmp	r3, #13
 800a5c2:	d007      	beq.n	800a5d4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a5c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a5c8:	2b0e      	cmp	r3, #14
 800a5ca:	d003      	beq.n	800a5d4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a5cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a5d0:	2b0f      	cmp	r3, #15
 800a5d2:	d103      	bne.n	800a5dc <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a5da:	e002      	b.n	800a5e2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 800a5e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d107      	bne.n	800a5fa <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	21ff      	movs	r1, #255	; 0xff
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f000 fb74 	bl	800acdc <VL53L0X_WrByte>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 800a5fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d109      	bne.n	800a616 <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 800a602:	f107 0316 	add.w	r3, r7, #22
 800a606:	461a      	mov	r2, r3
 800a608:	21b6      	movs	r1, #182	; 0xb6
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 faf2 	bl	800abf4 <VL53L0X_RdWord>
 800a610:	4603      	mov	r3, r0
 800a612:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a616:	8afb      	ldrh	r3, [r7, #22]
 800a618:	025b      	lsls	r3, r3, #9
 800a61a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 800a61c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a620:	2b00      	cmp	r3, #0
 800a622:	d107      	bne.n	800a634 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a624:	2200      	movs	r2, #0
 800a626:	21ff      	movs	r1, #255	; 0xff
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f000 fb57 	bl	800acdc <VL53L0X_WrByte>
 800a62e:	4603      	mov	r3, r0
 800a630:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a638:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a63c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a640:	2b00      	cmp	r3, #0
 800a642:	d109      	bne.n	800a658 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a644:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a648:	461a      	mov	r2, r3
 800a64a:	2100      	movs	r1, #0
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f7fc fa2f 	bl	8006ab0 <VL53L0X_GetLimitCheckEnable>
 800a652:	4603      	mov	r3, r0
 800a654:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a658:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d02e      	beq.n	800a6be <VL53L0X_get_pal_range_status+0x182>
 800a660:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a664:	2b00      	cmp	r3, #0
 800a666:	d12a      	bne.n	800a6be <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a668:	f107 0310 	add.w	r3, r7, #16
 800a66c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a670:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7ff fd52 	bl	800a11c <VL53L0X_calc_sigma_estimate>
 800a678:	4603      	mov	r3, r0
 800a67a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a67e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a682:	2b00      	cmp	r3, #0
 800a684:	d103      	bne.n	800a68e <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	b29a      	uxth	r2, r3
 800a68a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a68c:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a68e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a692:	2b00      	cmp	r3, #0
 800a694:	d113      	bne.n	800a6be <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a696:	f107 0320 	add.w	r3, r7, #32
 800a69a:	461a      	mov	r2, r3
 800a69c:	2100      	movs	r1, #0
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7fc fa8c 	bl	8006bbc <VL53L0X_GetLimitCheckValue>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d006      	beq.n	800a6be <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 800a6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6b2:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d902      	bls.n	800a6be <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a6be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d109      	bne.n	800a6da <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a6c6:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	2102      	movs	r1, #2
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7fc f9ee 	bl	8006ab0 <VL53L0X_GetLimitCheckEnable>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a6da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d017      	beq.n	800a712 <VL53L0X_get_pal_range_status+0x1d6>
 800a6e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d113      	bne.n	800a712 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a6ea:	f107 031c 	add.w	r3, r7, #28
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	2102      	movs	r1, #2
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f7fc fa62 	bl	8006bbc <VL53L0X_GetLimitCheckValue>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d006      	beq.n	800a712 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a704:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a708:	429a      	cmp	r2, r3
 800a70a:	d902      	bls.n	800a712 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a712:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a716:	2b00      	cmp	r3, #0
 800a718:	d109      	bne.n	800a72e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a71a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a71e:	461a      	mov	r2, r3
 800a720:	2103      	movs	r1, #3
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f7fc f9c4 	bl	8006ab0 <VL53L0X_GetLimitCheckEnable>
 800a728:	4603      	mov	r3, r0
 800a72a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a72e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a732:	2b00      	cmp	r3, #0
 800a734:	d023      	beq.n	800a77e <VL53L0X_get_pal_range_status+0x242>
 800a736:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d11f      	bne.n	800a77e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a73e:	893b      	ldrh	r3, [r7, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d102      	bne.n	800a74a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	637b      	str	r3, [r7, #52]	; 0x34
 800a748:	e005      	b.n	800a756 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	021a      	lsls	r2, r3, #8
 800a74e:	893b      	ldrh	r3, [r7, #8]
 800a750:	fbb2 f3f3 	udiv	r3, r2, r3
 800a754:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a756:	f107 0318 	add.w	r3, r7, #24
 800a75a:	461a      	mov	r2, r3
 800a75c:	2103      	movs	r1, #3
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f7fc fa2c 	bl	8006bbc <VL53L0X_GetLimitCheckValue>
 800a764:	4603      	mov	r3, r0
 800a766:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d006      	beq.n	800a77e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a770:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a774:	429a      	cmp	r2, r3
 800a776:	d202      	bcs.n	800a77e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a778:	2301      	movs	r3, #1
 800a77a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a77e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a782:	2b00      	cmp	r3, #0
 800a784:	d14a      	bne.n	800a81c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800a786:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d103      	bne.n	800a796 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800a78e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a790:	22ff      	movs	r2, #255	; 0xff
 800a792:	701a      	strb	r2, [r3, #0]
 800a794:	e042      	b.n	800a81c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a796:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d007      	beq.n	800a7ae <VL53L0X_get_pal_range_status+0x272>
 800a79e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d003      	beq.n	800a7ae <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800a7a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d103      	bne.n	800a7b6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b0:	2205      	movs	r2, #5
 800a7b2:	701a      	strb	r2, [r3, #0]
 800a7b4:	e032      	b.n	800a81c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a7b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a7ba:	2b06      	cmp	r3, #6
 800a7bc:	d003      	beq.n	800a7c6 <VL53L0X_get_pal_range_status+0x28a>
 800a7be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a7c2:	2b09      	cmp	r3, #9
 800a7c4:	d103      	bne.n	800a7ce <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7c8:	2204      	movs	r2, #4
 800a7ca:	701a      	strb	r2, [r3, #0]
 800a7cc:	e026      	b.n	800a81c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a7ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a7d2:	2b08      	cmp	r3, #8
 800a7d4:	d007      	beq.n	800a7e6 <VL53L0X_get_pal_range_status+0x2aa>
 800a7d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a7da:	2b0a      	cmp	r3, #10
 800a7dc:	d003      	beq.n	800a7e6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800a7de:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d103      	bne.n	800a7ee <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a7e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e8:	2203      	movs	r2, #3
 800a7ea:	701a      	strb	r2, [r3, #0]
 800a7ec:	e016      	b.n	800a81c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a7ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	d003      	beq.n	800a7fe <VL53L0X_get_pal_range_status+0x2c2>
 800a7f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d103      	bne.n	800a806 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a800:	2202      	movs	r2, #2
 800a802:	701a      	strb	r2, [r3, #0]
 800a804:	e00a      	b.n	800a81c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800a806:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d103      	bne.n	800a816 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a810:	2201      	movs	r2, #1
 800a812:	701a      	strb	r2, [r3, #0]
 800a814:	e002      	b.n	800a81c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a818:	2200      	movs	r2, #0
 800a81a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800a81c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d102      	bne.n	800a82a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800a824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a826:	2200      	movs	r2, #0
 800a828:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a82a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a82e:	461a      	mov	r2, r3
 800a830:	2101      	movs	r1, #1
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f7fc f93c 	bl	8006ab0 <VL53L0X_GetLimitCheckEnable>
 800a838:	4603      	mov	r3, r0
 800a83a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a83e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a842:	2b00      	cmp	r3, #0
 800a844:	d14f      	bne.n	800a8e6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <VL53L0X_get_pal_range_status+0x31a>
 800a84e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a852:	2b01      	cmp	r3, #1
 800a854:	d103      	bne.n	800a85e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a856:	2301      	movs	r3, #1
 800a858:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a85c:	e002      	b.n	800a864 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a86a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a86e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a872:	2b04      	cmp	r3, #4
 800a874:	d003      	beq.n	800a87e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a876:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d103      	bne.n	800a886 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800a87e:	2301      	movs	r3, #1
 800a880:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a884:	e002      	b.n	800a88c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a892:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a896:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <VL53L0X_get_pal_range_status+0x36a>
 800a89e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d103      	bne.n	800a8ae <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ac:	e002      	b.n	800a8b4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a8ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a8be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <VL53L0X_get_pal_range_status+0x392>
 800a8c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d103      	bne.n	800a8d6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8d4:	e002      	b.n	800a8dc <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a8e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a8e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3740      	adds	r7, #64	; 0x40
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <VL53L0X_check_part_used>:
/* Functions Definition ------------------------------------------------------*/

VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b086      	sub	sp, #24
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800a902:	2102      	movs	r1, #2
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f7fd fe0d 	bl	8008524 <VL53L0X_get_info_from_device>
 800a90a:	4603      	mov	r3, r0
 800a90c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800a90e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d11c      	bne.n	800a950 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800a91c:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800a91e:	7dbb      	ldrb	r3, [r7, #22]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d107      	bne.n	800a934 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2200      	movs	r2, #0
 800a928:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	3340      	adds	r3, #64	; 0x40
 800a92e:	2200      	movs	r2, #0
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	e00d      	b.n	800a950 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	33f3      	adds	r3, #243	; 0xf3
 800a942:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	3340      	adds	r3, #64	; 0x40
 800a948:	6939      	ldr	r1, [r7, #16]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f008 f953 	bl	8012bf6 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a950:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3718      	adds	r7, #24
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800a95c:	b5b0      	push	{r4, r5, r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a966:	2300      	movs	r3, #0
 800a968:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800a96a:	f107 030d 	add.w	r3, r7, #13
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff ffbd 	bl	800a8f2 <VL53L0X_check_part_used>
 800a978:	4603      	mov	r3, r0
 800a97a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800a97c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d13b      	bne.n	800a9fc <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800a984:	7b7b      	ldrb	r3, [r7, #13]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d108      	bne.n	800a99c <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	4a30      	ldr	r2, [pc, #192]	; (800aa50 <VL53L0X_get_device_info+0xf4>)
 800a98e:	461c      	mov	r4, r3
 800a990:	4613      	mov	r3, r2
 800a992:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a994:	6020      	str	r0, [r4, #0]
 800a996:	6061      	str	r1, [r4, #4]
 800a998:	60a2      	str	r2, [r4, #8]
 800a99a:	e027      	b.n	800a9ec <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800a99c:	7b7b      	ldrb	r3, [r7, #13]
 800a99e:	2b22      	cmp	r3, #34	; 0x22
 800a9a0:	d80b      	bhi.n	800a9ba <VL53L0X_get_device_info+0x5e>
 800a9a2:	7b7b      	ldrb	r3, [r7, #13]
 800a9a4:	2b20      	cmp	r3, #32
 800a9a6:	d008      	beq.n	800a9ba <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	4a2a      	ldr	r2, [pc, #168]	; (800aa54 <VL53L0X_get_device_info+0xf8>)
 800a9ac:	461c      	mov	r4, r3
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a9b2:	6020      	str	r0, [r4, #0]
 800a9b4:	6061      	str	r1, [r4, #4]
 800a9b6:	60a2      	str	r2, [r4, #8]
 800a9b8:	e018      	b.n	800a9ec <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800a9ba:	7b7b      	ldrb	r3, [r7, #13]
 800a9bc:	2b26      	cmp	r3, #38	; 0x26
 800a9be:	d808      	bhi.n	800a9d2 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	4a25      	ldr	r2, [pc, #148]	; (800aa58 <VL53L0X_get_device_info+0xfc>)
 800a9c4:	461c      	mov	r4, r3
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a9ca:	6020      	str	r0, [r4, #0]
 800a9cc:	6061      	str	r1, [r4, #4]
 800a9ce:	60a2      	str	r2, [r4, #8]
 800a9d0:	e00c      	b.n	800a9ec <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	4a21      	ldr	r2, [pc, #132]	; (800aa5c <VL53L0X_get_device_info+0x100>)
 800a9d6:	461d      	mov	r5, r3
 800a9d8:	4614      	mov	r4, r2
 800a9da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9dc:	6028      	str	r0, [r5, #0]
 800a9de:	6069      	str	r1, [r5, #4]
 800a9e0:	60aa      	str	r2, [r5, #8]
 800a9e2:	60eb      	str	r3, [r5, #12]
 800a9e4:	6820      	ldr	r0, [r4, #0]
 800a9e6:	6128      	str	r0, [r5, #16]
 800a9e8:	7923      	ldrb	r3, [r4, #4]
 800a9ea:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	3320      	adds	r3, #32
 800a9f0:	491b      	ldr	r1, [pc, #108]	; (800aa60 <VL53L0X_get_device_info+0x104>)
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	cb03      	ldmia	r3!, {r0, r1}
 800a9f8:	6010      	str	r0, [r2, #0]
 800a9fa:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a9fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d108      	bne.n	800aa16 <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	3360      	adds	r3, #96	; 0x60
 800aa08:	461a      	mov	r2, r3
 800aa0a:	21c0      	movs	r1, #192	; 0xc0
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f86a 	bl	800aae6 <VL53L0X_RdByte>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aa16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d112      	bne.n	800aa44 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800aa1e:	f107 030e 	add.w	r3, r7, #14
 800aa22:	461a      	mov	r2, r3
 800aa24:	21c2      	movs	r1, #194	; 0xc2
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f85d 	bl	800aae6 <VL53L0X_RdByte>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800aa38:	7bbb      	ldrb	r3, [r7, #14]
 800aa3a:	091b      	lsrs	r3, r3, #4
 800aa3c:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800aa44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bdb0      	pop	{r4, r5, r7, pc}
 800aa50:	0801505c 	.word	0x0801505c
 800aa54:	08015068 	.word	0x08015068
 800aa58:	08015074 	.word	0x08015074
 800aa5c:	08015080 	.word	0x08015080
 800aa60:	08015098 	.word	0x08015098

0800aa64 <_I2CWrite>:
int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count);

/* Exported functions --------------------------------------------------------*/

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b088      	sub	sp, #32
 800aa68:	af02      	add	r7, sp, #8
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	330a      	adds	r3, #10
 800aa74:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800aa82:	b299      	uxth	r1, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	f001 f8e8 	bl	800bc64 <HAL_I2C_Master_Transmit>
 800aa94:	4603      	mov	r3, r0
 800aa96:	613b      	str	r3, [r7, #16]

    return status;
 800aa98:	693b      	ldr	r3, [r7, #16]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3718      	adds	r7, #24
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b088      	sub	sp, #32
 800aaa6:	af02      	add	r7, sp, #8
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	60b9      	str	r1, [r7, #8]
 800aaac:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	330a      	adds	r3, #10
 800aab2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800aac0:	f043 0301 	orr.w	r3, r3, #1
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	b299      	uxth	r1, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	4613      	mov	r3, r2
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	f001 f9ba 	bl	800be4c <HAL_I2C_Master_Receive>
 800aad8:	4603      	mov	r3, r0
 800aada:	613b      	str	r3, [r7, #16]

    return status;
 800aadc:	693b      	ldr	r3, [r7, #16]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b086      	sub	sp, #24
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	60f8      	str	r0, [r7, #12]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	607a      	str	r2, [r7, #4]
 800aaf2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800aaf8:	f107 030b 	add.w	r3, r7, #11
 800aafc:	2201      	movs	r2, #1
 800aafe:	4619      	mov	r1, r3
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f7ff ffaf 	bl	800aa64 <_I2CWrite>
 800ab06:	6138      	str	r0, [r7, #16]

    if (status_int)
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <VL53L0X_RdByte+0x2e>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ab0e:	23ec      	movs	r3, #236	; 0xec
 800ab10:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ab12:	e00c      	b.n	800ab2e <VL53L0X_RdByte+0x48>
    }

    status_int = _I2CRead(Dev, data, 1);
 800ab14:	2201      	movs	r2, #1
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f7ff ffc2 	bl	800aaa2 <_I2CRead>
 800ab1e:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <VL53L0X_RdByte+0x46>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ab26:	23ec      	movs	r3, #236	; 0xec
 800ab28:	75fb      	strb	r3, [r7, #23]
 800ab2a:	e000      	b.n	800ab2e <VL53L0X_RdByte+0x48>
    }
done:
 800ab2c:	bf00      	nop
    return Status;
 800ab2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3718      	adds	r7, #24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
	...

0800ab3c <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	607a      	str	r2, [r7, #4]
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	75fb      	strb	r3, [r7, #23]

    if (count > sizeof(_I2CBuffer) - 1) {
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2b3f      	cmp	r3, #63	; 0x3f
 800ab54:	d902      	bls.n	800ab5c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ab56:	f06f 0303 	mvn.w	r3, #3
 800ab5a:	e016      	b.n	800ab8a <VL53L0X_WriteMulti+0x4e>
    }

    _I2CBuffer[0] = index;
 800ab5c:	4a0d      	ldr	r2, [pc, #52]	; (800ab94 <VL53L0X_WriteMulti+0x58>)
 800ab5e:	7afb      	ldrb	r3, [r7, #11]
 800ab60:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	480c      	ldr	r0, [pc, #48]	; (800ab98 <VL53L0X_WriteMulti+0x5c>)
 800ab68:	f007 f9eb 	bl	8011f42 <memcpy>

    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	461a      	mov	r2, r3
 800ab72:	4908      	ldr	r1, [pc, #32]	; (800ab94 <VL53L0X_WriteMulti+0x58>)
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f7ff ff75 	bl	800aa64 <_I2CWrite>
 800ab7a:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ab82:	23ec      	movs	r3, #236	; 0xec
 800ab84:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 800ab86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20010fe4 	.word	0x20010fe4
 800ab98:	20010fe5 	.word	0x20010fe5

0800ab9c <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b086      	sub	sp, #24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	607a      	str	r2, [r7, #4]
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	460b      	mov	r3, r1
 800abaa:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abac:	2300      	movs	r3, #0
 800abae:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800abb0:	f107 030b 	add.w	r3, r7, #11
 800abb4:	2201      	movs	r2, #1
 800abb6:	4619      	mov	r1, r3
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f7ff ff53 	bl	800aa64 <_I2CWrite>
 800abbe:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800abc6:	23ec      	movs	r3, #236	; 0xec
 800abc8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800abca:	e00c      	b.n	800abe6 <VL53L0X_ReadMulti+0x4a>
    }

    status_int = _I2CRead(Dev, pdata, count);
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f7ff ff66 	bl	800aaa2 <_I2CRead>
 800abd6:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800abde:	23ec      	movs	r3, #236	; 0xec
 800abe0:	75fb      	strb	r3, [r7, #23]
 800abe2:	e000      	b.n	800abe6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800abe4:	bf00      	nop
    return Status;
 800abe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	460b      	mov	r3, r1
 800abfe:	607a      	str	r2, [r7, #4]
 800ac00:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac02:	2300      	movs	r3, #0
 800ac04:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800ac06:	f107 030b 	add.w	r3, r7, #11
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f7ff ff28 	bl	800aa64 <_I2CWrite>
 800ac14:	6138      	str	r0, [r7, #16]

    if (status_int)
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <VL53L0X_RdWord+0x2e>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac1c:	23ec      	movs	r3, #236	; 0xec
 800ac1e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ac20:	e017      	b.n	800ac52 <VL53L0X_RdWord+0x5e>
    }

    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ac22:	2202      	movs	r2, #2
 800ac24:	490e      	ldr	r1, [pc, #56]	; (800ac60 <VL53L0X_RdWord+0x6c>)
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f7ff ff3b 	bl	800aaa2 <_I2CRead>
 800ac2c:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <VL53L0X_RdWord+0x46>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac34:	23ec      	movs	r3, #236	; 0xec
 800ac36:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ac38:	e00b      	b.n	800ac52 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ac3a:	4b09      	ldr	r3, [pc, #36]	; (800ac60 <VL53L0X_RdWord+0x6c>)
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	021b      	lsls	r3, r3, #8
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <VL53L0X_RdWord+0x6c>)
 800ac46:	785b      	ldrb	r3, [r3, #1]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	4413      	add	r3, r2
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800ac52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	20010fe4 	.word	0x20010fe4

0800ac64 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac72:	2300      	movs	r3, #0
 800ac74:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800ac76:	f107 030b 	add.w	r3, r7, #11
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f7ff fef0 	bl	800aa64 <_I2CWrite>
 800ac84:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac8c:	23ec      	movs	r3, #236	; 0xec
 800ac8e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ac90:	e01b      	b.n	800acca <VL53L0X_RdDWord+0x66>
    }

    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ac92:	2204      	movs	r2, #4
 800ac94:	4910      	ldr	r1, [pc, #64]	; (800acd8 <VL53L0X_RdDWord+0x74>)
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f7ff ff03 	bl	800aaa2 <_I2CRead>
 800ac9c:	6138      	str	r0, [r7, #16]

    if (status_int != 0) {
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aca4:	23ec      	movs	r3, #236	; 0xec
 800aca6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aca8:	e00f      	b.n	800acca <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800acaa:	4b0b      	ldr	r3, [pc, #44]	; (800acd8 <VL53L0X_RdDWord+0x74>)
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	061a      	lsls	r2, r3, #24
 800acb0:	4b09      	ldr	r3, [pc, #36]	; (800acd8 <VL53L0X_RdDWord+0x74>)
 800acb2:	785b      	ldrb	r3, [r3, #1]
 800acb4:	041b      	lsls	r3, r3, #16
 800acb6:	441a      	add	r2, r3
 800acb8:	4b07      	ldr	r3, [pc, #28]	; (800acd8 <VL53L0X_RdDWord+0x74>)
 800acba:	789b      	ldrb	r3, [r3, #2]
 800acbc:	021b      	lsls	r3, r3, #8
 800acbe:	4413      	add	r3, r2
 800acc0:	4a05      	ldr	r2, [pc, #20]	; (800acd8 <VL53L0X_RdDWord+0x74>)
 800acc2:	78d2      	ldrb	r2, [r2, #3]
 800acc4:	441a      	add	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800acca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20010fe4 	.word	0x20010fe4

0800acdc <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	460b      	mov	r3, r1
 800ace6:	70fb      	strb	r3, [r7, #3]
 800ace8:	4613      	mov	r3, r2
 800acea:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acec:	2300      	movs	r3, #0
 800acee:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800acf0:	4a0b      	ldr	r2, [pc, #44]	; (800ad20 <VL53L0X_WrByte+0x44>)
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800acf6:	4a0a      	ldr	r2, [pc, #40]	; (800ad20 <VL53L0X_WrByte+0x44>)
 800acf8:	78bb      	ldrb	r3, [r7, #2]
 800acfa:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800acfc:	2202      	movs	r2, #2
 800acfe:	4908      	ldr	r1, [pc, #32]	; (800ad20 <VL53L0X_WrByte+0x44>)
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff feaf 	bl	800aa64 <_I2CWrite>
 800ad06:	60b8      	str	r0, [r7, #8]

    if (status_int != 0) {
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad0e:	23ec      	movs	r3, #236	; 0xec
 800ad10:	73fb      	strb	r3, [r7, #15]
    }

    return Status;
 800ad12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20010fe4 	.word	0x20010fe4

0800ad24 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	70fb      	strb	r3, [r7, #3]
 800ad30:	4613      	mov	r3, r2
 800ad32:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad34:	2300      	movs	r3, #0
 800ad36:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ad38:	4a0e      	ldr	r2, [pc, #56]	; (800ad74 <VL53L0X_WrWord+0x50>)
 800ad3a:	78fb      	ldrb	r3, [r7, #3]
 800ad3c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ad3e:	883b      	ldrh	r3, [r7, #0]
 800ad40:	0a1b      	lsrs	r3, r3, #8
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <VL53L0X_WrWord+0x50>)
 800ad48:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ad4a:	883b      	ldrh	r3, [r7, #0]
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <VL53L0X_WrWord+0x50>)
 800ad50:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ad52:	2203      	movs	r2, #3
 800ad54:	4907      	ldr	r1, [pc, #28]	; (800ad74 <VL53L0X_WrWord+0x50>)
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f7ff fe84 	bl	800aa64 <_I2CWrite>
 800ad5c:	60b8      	str	r0, [r7, #8]

    if (status_int != 0) {
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad64:	23ec      	movs	r3, #236	; 0xec
 800ad66:	73fb      	strb	r3, [r7, #15]
    }

    return Status;
 800ad68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20010fe4 	.word	0x20010fe4

0800ad78 <VL53L0X_UpdateByte>:

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	4608      	mov	r0, r1
 800ad82:	4611      	mov	r1, r2
 800ad84:	461a      	mov	r2, r3
 800ad86:	4603      	mov	r3, r0
 800ad88:	70fb      	strb	r3, [r7, #3]
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	70bb      	strb	r3, [r7, #2]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ad96:	f107 020e 	add.w	r2, r7, #14
 800ad9a:	78fb      	ldrb	r3, [r7, #3]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7ff fea1 	bl	800aae6 <VL53L0X_RdByte>
 800ada4:	4603      	mov	r3, r0
 800ada6:	73fb      	strb	r3, [r7, #15]

    if (Status) {
 800ada8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d110      	bne.n	800add2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }

    data = (data & AndData) | OrData;
 800adb0:	7bba      	ldrb	r2, [r7, #14]
 800adb2:	78bb      	ldrb	r3, [r7, #2]
 800adb4:	4013      	ands	r3, r2
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	787b      	ldrb	r3, [r7, #1]
 800adba:	4313      	orrs	r3, r2
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800adc0:	7bba      	ldrb	r2, [r7, #14]
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7ff ff88 	bl	800acdc <VL53L0X_WrByte>
 800adcc:	4603      	mov	r3, r0
 800adce:	73fb      	strb	r3, [r7, #15]
 800add0:	e000      	b.n	800add4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800add2:	bf00      	nop
done:
    return Status;
 800add4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ade8:	2300      	movs	r3, #0
 800adea:	73fb      	strb	r3, [r7, #15]

    /* do nothing */
    VL53L0X_OsDelay();
 800adec:	2002      	movs	r0, #2
 800adee:	f000 f977 	bl	800b0e0 <HAL_Delay>
    return status;
 800adf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <VL53L0X_PROXIMITY_Init>:

/**
  * @brief  VL53L0X proximity sensor Initialization.
  */
void VL53L0X_PROXIMITY_Init(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b09a      	sub	sp, #104	; 0x68
 800ae04:	af00      	add	r7, sp, #0
  uint16_t vl53l0x_id = 0; 
 800ae06:	2300      	movs	r3, #0
 800ae08:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;
  
  /* Initialize IO interface */
  BSP_I2C2_Init();
 800ae0c:	f7f7 fca2 	bl	8002754 <BSP_I2C2_Init>
  VL53L0X_PROXIMITY_MspInit();
 800ae10:	f000 f83e 	bl	800ae90 <VL53L0X_PROXIMITY_MspInit>
  
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 800ae14:	463b      	mov	r3, r7
 800ae16:	2263      	movs	r2, #99	; 0x63
 800ae18:	2100      	movs	r1, #0
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f007 f89f 	bl	8011f5e <memset>
  
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 800ae20:	463b      	mov	r3, r7
 800ae22:	4619      	mov	r1, r3
 800ae24:	4817      	ldr	r0, [pc, #92]	; (800ae84 <VL53L0X_PROXIMITY_Init+0x84>)
 800ae26:	f7fa ffb8 	bl	8005d9a <VL53L0X_GetDeviceInfo>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d121      	bne.n	800ae74 <VL53L0X_PROXIMITY_Init+0x74>
  {  
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 800ae30:	f107 0366 	add.w	r3, r7, #102	; 0x66
 800ae34:	461a      	mov	r2, r3
 800ae36:	21c0      	movs	r1, #192	; 0xc0
 800ae38:	4812      	ldr	r0, [pc, #72]	; (800ae84 <VL53L0X_PROXIMITY_Init+0x84>)
 800ae3a:	f7ff fedb 	bl	800abf4 <VL53L0X_RdWord>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d113      	bne.n	800ae6c <VL53L0X_PROXIMITY_Init+0x6c>
    {
      if (vl53l0x_id == VL53L0X_ID)
 800ae44:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ae48:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d114      	bne.n	800ae7a <VL53L0X_PROXIMITY_Init+0x7a>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 800ae50:	480c      	ldr	r0, [pc, #48]	; (800ae84 <VL53L0X_PROXIMITY_Init+0x84>)
 800ae52:	f7fa ffc9 	bl	8005de8 <VL53L0X_DataInit>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10e      	bne.n	800ae7a <VL53L0X_PROXIMITY_Init+0x7a>
        {
          Dev.Present = 1;
 800ae5c:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <VL53L0X_PROXIMITY_Init+0x84>)
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
          SetupSingleShot(&Dev);
 800ae64:	4807      	ldr	r0, [pc, #28]	; (800ae84 <VL53L0X_PROXIMITY_Init+0x84>)
 800ae66:	f000 f833 	bl	800aed0 <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }  
}
 800ae6a:	e006      	b.n	800ae7a <VL53L0X_PROXIMITY_Init+0x7a>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 800ae6c:	4806      	ldr	r0, [pc, #24]	; (800ae88 <VL53L0X_PROXIMITY_Init+0x88>)
 800ae6e:	f007 fdc9 	bl	8012a04 <puts>
}
 800ae72:	e002      	b.n	800ae7a <VL53L0X_PROXIMITY_Init+0x7a>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 800ae74:	4805      	ldr	r0, [pc, #20]	; (800ae8c <VL53L0X_PROXIMITY_Init+0x8c>)
 800ae76:	f007 fdc5 	bl	8012a04 <puts>
}
 800ae7a:	bf00      	nop
 800ae7c:	3768      	adds	r7, #104	; 0x68
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	20000400 	.word	0x20000400
 800ae88:	08015500 	.word	0x08015500
 800ae8c:	08015530 	.word	0x08015530

0800ae90 <VL53L0X_PROXIMITY_MspInit>:

/**
  * @brief  VL53L0X proximity sensor Msp Initialization.
  */
void VL53L0X_PROXIMITY_MspInit(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 800ae96:	2340      	movs	r3, #64	; 0x40
 800ae98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aea2:	2302      	movs	r3, #2
 800aea4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800aea6:	1d3b      	adds	r3, r7, #4
 800aea8:	4619      	mov	r1, r3
 800aeaa:	4808      	ldr	r0, [pc, #32]	; (800aecc <VL53L0X_PROXIMITY_MspInit+0x3c>)
 800aeac:	f000 fb2a 	bl	800b504 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	2140      	movs	r1, #64	; 0x40
 800aeb4:	4805      	ldr	r0, [pc, #20]	; (800aecc <VL53L0X_PROXIMITY_MspInit+0x3c>)
 800aeb6:	f000 fddb 	bl	800ba70 <HAL_GPIO_WritePin>
  
  HAL_Delay(1000);  
 800aeba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aebe:	f000 f90f 	bl	800b0e0 <HAL_Delay>
}
 800aec2:	bf00      	nop
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	48000800 	.word	0x48000800

0800aed0 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t* pDev)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b08a      	sub	sp, #40	; 0x28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
  uint8_t isApertureSpads;
  FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800aed8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aedc:	627b      	str	r3, [r7, #36]	; 0x24
  FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800aede:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800aee2:	623b      	str	r3, [r7, #32]
  uint32_t timingBudget = 33000;
 800aee4:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800aee8:	61fb      	str	r3, [r7, #28]
  uint8_t preRangeVcselPeriod = 14;
 800aeea:	230e      	movs	r3, #14
 800aeec:	76fb      	strb	r3, [r7, #27]
  uint8_t finalRangeVcselPeriod = 10;
 800aeee:	230a      	movs	r3, #10
 800aef0:	76bb      	strb	r3, [r7, #26]
                          
  if (pDev->Present)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 80a4 	beq.w	800b046 <SetupSingleShot+0x176>
  {
    status = VL53L0X_StaticInit(pDev);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7fb f87c 	bl	8005ffc <VL53L0X_StaticInit>
 800af04:	4603      	mov	r3, r0
 800af06:	617b      	str	r3, [r7, #20]
    if (status)
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <SetupSingleShot+0x44>
    {
      printf("VL53L0X_StaticInit failed\n");
 800af0e:	4850      	ldr	r0, [pc, #320]	; (800b050 <SetupSingleShot+0x180>)
 800af10:	f007 fd78 	bl	8012a04 <puts>
    }
    
    status = VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 800af14:	f107 0212 	add.w	r2, r7, #18
 800af18:	f107 0313 	add.w	r3, r7, #19
 800af1c:	4619      	mov	r1, r3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7fb ff40 	bl	8006da4 <VL53L0X_PerformRefCalibration>
 800af24:	4603      	mov	r3, r0
 800af26:	617b      	str	r3, [r7, #20]
    if (status)
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <SetupSingleShot+0x64>
    {
      printf("VL53L0X_PerformRefCalibration failed\n");
 800af2e:	4849      	ldr	r0, [pc, #292]	; (800b054 <SetupSingleShot+0x184>)
 800af30:	f007 fd68 	bl	8012a04 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 800af34:	f107 020b 	add.w	r2, r7, #11
 800af38:	f107 030c 	add.w	r3, r7, #12
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7fc fb88 	bl	8007654 <VL53L0X_PerformRefSpadManagement>
 800af44:	4603      	mov	r3, r0
 800af46:	617b      	str	r3, [r7, #20]
    if (status)
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d002      	beq.n	800af54 <SetupSingleShot+0x84>
    {
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 800af4e:	4842      	ldr	r0, [pc, #264]	; (800b058 <SetupSingleShot+0x188>)
 800af50:	f007 fd58 	bl	8012a04 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_SINGLE_RANGING); /* Setup in single ranging mode */
 800af54:	2100      	movs	r1, #0
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7fb fa62 	bl	8006420 <VL53L0X_SetDeviceMode>
 800af5c:	4603      	mov	r3, r0
 800af5e:	617b      	str	r3, [r7, #20]
    if (status)
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d002      	beq.n	800af6c <SetupSingleShot+0x9c>
    {
      printf("VL53L0X_SetDeviceMode failed\n");
 800af66:	483d      	ldr	r0, [pc, #244]	; (800b05c <SetupSingleShot+0x18c>)
 800af68:	f007 fd4c 	bl	8012a04 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); /* Enable Sigma limit */
 800af6c:	2201      	movs	r2, #1
 800af6e:	2100      	movs	r1, #0
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f7fb fd11 	bl	8006998 <VL53L0X_SetLimitCheckEnable>
 800af76:	4603      	mov	r3, r0
 800af78:	617b      	str	r3, [r7, #20]
    if (status)
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <SetupSingleShot+0xb6>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800af80:	4837      	ldr	r0, [pc, #220]	; (800b060 <SetupSingleShot+0x190>)
 800af82:	f007 fd3f 	bl	8012a04 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); /* Enable Signa limit */
 800af86:	2201      	movs	r2, #1
 800af88:	2101      	movs	r1, #1
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7fb fd04 	bl	8006998 <VL53L0X_SetLimitCheckEnable>
 800af90:	4603      	mov	r3, r0
 800af92:	617b      	str	r3, [r7, #20]
    if (status)
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <SetupSingleShot+0xd0>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800af9a:	4831      	ldr	r0, [pc, #196]	; (800b060 <SetupSingleShot+0x190>)
 800af9c:	f007 fd32 	bl	8012a04 <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 800afa0:	f641 1399 	movw	r3, #6553	; 0x1999
 800afa4:	627b      	str	r3, [r7, #36]	; 0x24
    sigmaLimit = (FixPoint1616_t)(60*65536);
 800afa6:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800afaa:	623b      	str	r3, [r7, #32]
    timingBudget = 33000;
 800afac:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800afb0:	61fb      	str	r3, [r7, #28]
    preRangeVcselPeriod = 18;
 800afb2:	2312      	movs	r3, #18
 800afb4:	76fb      	strb	r3, [r7, #27]
    finalRangeVcselPeriod = 14;
 800afb6:	230e      	movs	r3, #14
 800afb8:	76bb      	strb	r3, [r7, #26]
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 800afba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afbc:	2101      	movs	r1, #1
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7fb fd9a 	bl	8006af8 <VL53L0X_SetLimitCheckValue>
 800afc4:	4603      	mov	r3, r0
 800afc6:	617b      	str	r3, [r7, #20]
    
    if (status)
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d002      	beq.n	800afd4 <SetupSingleShot+0x104>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800afce:	4825      	ldr	r0, [pc, #148]	; (800b064 <SetupSingleShot+0x194>)
 800afd0:	f007 fd18 	bl	8012a04 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800afd4:	6a3a      	ldr	r2, [r7, #32]
 800afd6:	2100      	movs	r1, #0
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7fb fd8d 	bl	8006af8 <VL53L0X_SetLimitCheckValue>
 800afde:	4603      	mov	r3, r0
 800afe0:	617b      	str	r3, [r7, #20]
    if (status)
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d002      	beq.n	800afee <SetupSingleShot+0x11e>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800afe8:	481e      	ldr	r0, [pc, #120]	; (800b064 <SetupSingleShot+0x194>)
 800afea:	f007 fd0b 	bl	8012a04 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pDev,  timingBudget);
 800afee:	69f9      	ldr	r1, [r7, #28]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f7fb fa73 	bl	80064dc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800aff6:	4603      	mov	r3, r0
 800aff8:	617b      	str	r3, [r7, #20]
    if (status)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d002      	beq.n	800b006 <SetupSingleShot+0x136>
    {
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 800b000:	4819      	ldr	r0, [pc, #100]	; (800b068 <SetupSingleShot+0x198>)
 800b002:	f007 fcff 	bl	8012a04 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800b006:	7efb      	ldrb	r3, [r7, #27]
 800b008:	461a      	mov	r2, r3
 800b00a:	2100      	movs	r1, #0
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7fb fa8b 	bl	8006528 <VL53L0X_SetVcselPulsePeriod>
 800b012:	4603      	mov	r3, r0
 800b014:	617b      	str	r3, [r7, #20]
    if (status)
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <SetupSingleShot+0x152>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800b01c:	4813      	ldr	r0, [pc, #76]	; (800b06c <SetupSingleShot+0x19c>)
 800b01e:	f007 fcf1 	bl	8012a04 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800b022:	7ebb      	ldrb	r3, [r7, #26]
 800b024:	461a      	mov	r2, r3
 800b026:	2101      	movs	r1, #1
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7fb fa7d 	bl	8006528 <VL53L0X_SetVcselPulsePeriod>
 800b02e:	4603      	mov	r3, r0
 800b030:	617b      	str	r3, [r7, #20]
    if (status)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <SetupSingleShot+0x16e>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800b038:	480c      	ldr	r0, [pc, #48]	; (800b06c <SetupSingleShot+0x19c>)
 800b03a:	f007 fce3 	bl	8012a04 <puts>
    }
    
    pDev->LeakyFirst = 1;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  }
}
 800b046:	bf00      	nop
 800b048:	3728      	adds	r7, #40	; 0x28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	0801555c 	.word	0x0801555c
 800b054:	08015578 	.word	0x08015578
 800b058:	080155a0 	.word	0x080155a0
 800b05c:	080155c8 	.word	0x080155c8
 800b060:	080155e8 	.word	0x080155e8
 800b064:	0801560c 	.word	0x0801560c
 800b068:	08015630 	.word	0x08015630
 800b06c:	08015668 	.word	0x08015668

0800b070 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b07a:	2003      	movs	r0, #3
 800b07c:	f000 f901 	bl	800b282 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b080:	200f      	movs	r0, #15
 800b082:	f7f7 f805 	bl	8002090 <HAL_InitTick>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	71fb      	strb	r3, [r7, #7]
 800b090:	e001      	b.n	800b096 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b092:	f7f6 fd27 	bl	8001ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b096:	79fb      	ldrb	r3, [r7, #7]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b0a4:	4b06      	ldr	r3, [pc, #24]	; (800b0c0 <HAL_IncTick+0x20>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	4b06      	ldr	r3, [pc, #24]	; (800b0c4 <HAL_IncTick+0x24>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	4a04      	ldr	r2, [pc, #16]	; (800b0c4 <HAL_IncTick+0x24>)
 800b0b2:	6013      	str	r3, [r2, #0]
}
 800b0b4:	bf00      	nop
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	2000058c 	.word	0x2000058c
 800b0c4:	20011024 	.word	0x20011024

0800b0c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	af00      	add	r7, sp, #0
  return uwTick;
 800b0cc:	4b03      	ldr	r3, [pc, #12]	; (800b0dc <HAL_GetTick+0x14>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	20011024 	.word	0x20011024

0800b0e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b0e8:	f7ff ffee 	bl	800b0c8 <HAL_GetTick>
 800b0ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f8:	d005      	beq.n	800b106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b0fa:	4b0a      	ldr	r3, [pc, #40]	; (800b124 <HAL_Delay+0x44>)
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4413      	add	r3, r2
 800b104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b106:	bf00      	nop
 800b108:	f7ff ffde 	bl	800b0c8 <HAL_GetTick>
 800b10c:	4602      	mov	r2, r0
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	429a      	cmp	r2, r3
 800b116:	d8f7      	bhi.n	800b108 <HAL_Delay+0x28>
  {
  }
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	2000058c 	.word	0x2000058c

0800b128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f003 0307 	and.w	r3, r3, #7
 800b136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b138:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <__NVIC_SetPriorityGrouping+0x44>)
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b144:	4013      	ands	r3, r2
 800b146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b15a:	4a04      	ldr	r2, [pc, #16]	; (800b16c <__NVIC_SetPriorityGrouping+0x44>)
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	60d3      	str	r3, [r2, #12]
}
 800b160:	bf00      	nop
 800b162:	3714      	adds	r7, #20
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	e000ed00 	.word	0xe000ed00

0800b170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b170:	b480      	push	{r7}
 800b172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b174:	4b04      	ldr	r3, [pc, #16]	; (800b188 <__NVIC_GetPriorityGrouping+0x18>)
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	0a1b      	lsrs	r3, r3, #8
 800b17a:	f003 0307 	and.w	r3, r3, #7
}
 800b17e:	4618      	mov	r0, r3
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	e000ed00 	.word	0xe000ed00

0800b18c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	4603      	mov	r3, r0
 800b194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	db0b      	blt.n	800b1b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b19e:	79fb      	ldrb	r3, [r7, #7]
 800b1a0:	f003 021f 	and.w	r2, r3, #31
 800b1a4:	4907      	ldr	r1, [pc, #28]	; (800b1c4 <__NVIC_EnableIRQ+0x38>)
 800b1a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1aa:	095b      	lsrs	r3, r3, #5
 800b1ac:	2001      	movs	r0, #1
 800b1ae:	fa00 f202 	lsl.w	r2, r0, r2
 800b1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b1b6:	bf00      	nop
 800b1b8:	370c      	adds	r7, #12
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	e000e100 	.word	0xe000e100

0800b1c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	6039      	str	r1, [r7, #0]
 800b1d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b1d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	db0a      	blt.n	800b1f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	b2da      	uxtb	r2, r3
 800b1e0:	490c      	ldr	r1, [pc, #48]	; (800b214 <__NVIC_SetPriority+0x4c>)
 800b1e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1e6:	0112      	lsls	r2, r2, #4
 800b1e8:	b2d2      	uxtb	r2, r2
 800b1ea:	440b      	add	r3, r1
 800b1ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b1f0:	e00a      	b.n	800b208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	4908      	ldr	r1, [pc, #32]	; (800b218 <__NVIC_SetPriority+0x50>)
 800b1f8:	79fb      	ldrb	r3, [r7, #7]
 800b1fa:	f003 030f 	and.w	r3, r3, #15
 800b1fe:	3b04      	subs	r3, #4
 800b200:	0112      	lsls	r2, r2, #4
 800b202:	b2d2      	uxtb	r2, r2
 800b204:	440b      	add	r3, r1
 800b206:	761a      	strb	r2, [r3, #24]
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	e000e100 	.word	0xe000e100
 800b218:	e000ed00 	.word	0xe000ed00

0800b21c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b089      	sub	sp, #36	; 0x24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f003 0307 	and.w	r3, r3, #7
 800b22e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	f1c3 0307 	rsb	r3, r3, #7
 800b236:	2b04      	cmp	r3, #4
 800b238:	bf28      	it	cs
 800b23a:	2304      	movcs	r3, #4
 800b23c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	3304      	adds	r3, #4
 800b242:	2b06      	cmp	r3, #6
 800b244:	d902      	bls.n	800b24c <NVIC_EncodePriority+0x30>
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	3b03      	subs	r3, #3
 800b24a:	e000      	b.n	800b24e <NVIC_EncodePriority+0x32>
 800b24c:	2300      	movs	r3, #0
 800b24e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b250:	f04f 32ff 	mov.w	r2, #4294967295
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	fa02 f303 	lsl.w	r3, r2, r3
 800b25a:	43da      	mvns	r2, r3
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	401a      	ands	r2, r3
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b264:	f04f 31ff 	mov.w	r1, #4294967295
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	fa01 f303 	lsl.w	r3, r1, r3
 800b26e:	43d9      	mvns	r1, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b274:	4313      	orrs	r3, r2
         );
}
 800b276:	4618      	mov	r0, r3
 800b278:	3724      	adds	r7, #36	; 0x24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b082      	sub	sp, #8
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7ff ff4c 	bl	800b128 <__NVIC_SetPriorityGrouping>
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b2aa:	f7ff ff61 	bl	800b170 <__NVIC_GetPriorityGrouping>
 800b2ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	68b9      	ldr	r1, [r7, #8]
 800b2b4:	6978      	ldr	r0, [r7, #20]
 800b2b6:	f7ff ffb1 	bl	800b21c <NVIC_EncodePriority>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2c0:	4611      	mov	r1, r2
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7ff ff80 	bl	800b1c8 <__NVIC_SetPriority>
}
 800b2c8:	bf00      	nop
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b2da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7ff ff54 	bl	800b18c <__NVIC_EnableIRQ>
}
 800b2e4:	bf00      	nop
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d101      	bne.n	800b2fe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e0ac      	b.n	800b458 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4618      	mov	r0, r3
 800b304:	f000 f8b2 	bl	800b46c <DFSDM_GetChannelFromInstance>
 800b308:	4603      	mov	r3, r0
 800b30a:	4a55      	ldr	r2, [pc, #340]	; (800b460 <HAL_DFSDM_ChannelInit+0x174>)
 800b30c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d001      	beq.n	800b318 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e09f      	b.n	800b458 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f7f6 fc0b 	bl	8001b34 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800b31e:	4b51      	ldr	r3, [pc, #324]	; (800b464 <HAL_DFSDM_ChannelInit+0x178>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3301      	adds	r3, #1
 800b324:	4a4f      	ldr	r2, [pc, #316]	; (800b464 <HAL_DFSDM_ChannelInit+0x178>)
 800b326:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800b328:	4b4e      	ldr	r3, [pc, #312]	; (800b464 <HAL_DFSDM_ChannelInit+0x178>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d125      	bne.n	800b37c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800b330:	4b4d      	ldr	r3, [pc, #308]	; (800b468 <HAL_DFSDM_ChannelInit+0x17c>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a4c      	ldr	r2, [pc, #304]	; (800b468 <HAL_DFSDM_ChannelInit+0x17c>)
 800b336:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b33a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800b33c:	4b4a      	ldr	r3, [pc, #296]	; (800b468 <HAL_DFSDM_ChannelInit+0x17c>)
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	4948      	ldr	r1, [pc, #288]	; (800b468 <HAL_DFSDM_ChannelInit+0x17c>)
 800b346:	4313      	orrs	r3, r2
 800b348:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800b34a:	4b47      	ldr	r3, [pc, #284]	; (800b468 <HAL_DFSDM_ChannelInit+0x17c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a46      	ldr	r2, [pc, #280]	; (800b468 <HAL_DFSDM_ChannelInit+0x17c>)
 800b350:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800b354:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	791b      	ldrb	r3, [r3, #4]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d108      	bne.n	800b370 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800b35e:	4b42      	ldr	r3, [pc, #264]	; (800b468 <HAL_DFSDM_ChannelInit+0x17c>)
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	3b01      	subs	r3, #1
 800b368:	041b      	lsls	r3, r3, #16
 800b36a:	493f      	ldr	r1, [pc, #252]	; (800b468 <HAL_DFSDM_ChannelInit+0x17c>)
 800b36c:	4313      	orrs	r3, r2
 800b36e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800b370:	4b3d      	ldr	r3, [pc, #244]	; (800b468 <HAL_DFSDM_ChannelInit+0x17c>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a3c      	ldr	r2, [pc, #240]	; (800b468 <HAL_DFSDM_ChannelInit+0x17c>)
 800b376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b37a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800b38a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6819      	ldr	r1, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800b39a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800b3a0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f022 020f 	bic.w	r2, r2, #15
 800b3b8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6819      	ldr	r1, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800b3c8:	431a      	orrs	r2, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800b3e0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6899      	ldr	r1, [r3, #8]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800b3f4:	431a      	orrs	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	685a      	ldr	r2, [r3, #4]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f002 0207 	and.w	r2, r2, #7
 800b40c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	6859      	ldr	r1, [r3, #4]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b418:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800b420:	431a      	orrs	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	430a      	orrs	r2, r1
 800b428:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b438:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4618      	mov	r0, r3
 800b448:	f000 f810 	bl	800b46c <DFSDM_GetChannelFromInstance>
 800b44c:	4602      	mov	r2, r0
 800b44e:	4904      	ldr	r1, [pc, #16]	; (800b460 <HAL_DFSDM_ChannelInit+0x174>)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	20000ccc 	.word	0x20000ccc
 800b464:	20000cc8 	.word	0x20000cc8
 800b468:	40016000 	.word	0x40016000

0800b46c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a1c      	ldr	r2, [pc, #112]	; (800b4e8 <DFSDM_GetChannelFromInstance+0x7c>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d102      	bne.n	800b482 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	e02b      	b.n	800b4da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a19      	ldr	r2, [pc, #100]	; (800b4ec <DFSDM_GetChannelFromInstance+0x80>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d102      	bne.n	800b490 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800b48a:	2301      	movs	r3, #1
 800b48c:	60fb      	str	r3, [r7, #12]
 800b48e:	e024      	b.n	800b4da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a17      	ldr	r2, [pc, #92]	; (800b4f0 <DFSDM_GetChannelFromInstance+0x84>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d102      	bne.n	800b49e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800b498:	2302      	movs	r3, #2
 800b49a:	60fb      	str	r3, [r7, #12]
 800b49c:	e01d      	b.n	800b4da <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a14      	ldr	r2, [pc, #80]	; (800b4f4 <DFSDM_GetChannelFromInstance+0x88>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d102      	bne.n	800b4ac <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800b4a6:	2304      	movs	r3, #4
 800b4a8:	60fb      	str	r3, [r7, #12]
 800b4aa:	e016      	b.n	800b4da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a12      	ldr	r2, [pc, #72]	; (800b4f8 <DFSDM_GetChannelFromInstance+0x8c>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d102      	bne.n	800b4ba <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800b4b4:	2305      	movs	r3, #5
 800b4b6:	60fb      	str	r3, [r7, #12]
 800b4b8:	e00f      	b.n	800b4da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a0f      	ldr	r2, [pc, #60]	; (800b4fc <DFSDM_GetChannelFromInstance+0x90>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d102      	bne.n	800b4c8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800b4c2:	2306      	movs	r3, #6
 800b4c4:	60fb      	str	r3, [r7, #12]
 800b4c6:	e008      	b.n	800b4da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a0d      	ldr	r2, [pc, #52]	; (800b500 <DFSDM_GetChannelFromInstance+0x94>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d102      	bne.n	800b4d6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800b4d0:	2307      	movs	r3, #7
 800b4d2:	60fb      	str	r3, [r7, #12]
 800b4d4:	e001      	b.n	800b4da <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800b4da:	68fb      	ldr	r3, [r7, #12]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3714      	adds	r7, #20
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	40016000 	.word	0x40016000
 800b4ec:	40016020 	.word	0x40016020
 800b4f0:	40016040 	.word	0x40016040
 800b4f4:	40016080 	.word	0x40016080
 800b4f8:	400160a0 	.word	0x400160a0
 800b4fc:	400160c0 	.word	0x400160c0
 800b500:	400160e0 	.word	0x400160e0

0800b504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b50e:	2300      	movs	r3, #0
 800b510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b512:	e17f      	b.n	800b814 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	2101      	movs	r1, #1
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	fa01 f303 	lsl.w	r3, r1, r3
 800b520:	4013      	ands	r3, r2
 800b522:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	f000 8171 	beq.w	800b80e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d00b      	beq.n	800b54c <HAL_GPIO_Init+0x48>
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d007      	beq.n	800b54c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b540:	2b11      	cmp	r3, #17
 800b542:	d003      	beq.n	800b54c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	2b12      	cmp	r3, #18
 800b54a:	d130      	bne.n	800b5ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	005b      	lsls	r3, r3, #1
 800b556:	2203      	movs	r2, #3
 800b558:	fa02 f303 	lsl.w	r3, r2, r3
 800b55c:	43db      	mvns	r3, r3
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	4013      	ands	r3, r2
 800b562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	68da      	ldr	r2, [r3, #12]
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	005b      	lsls	r3, r3, #1
 800b56c:	fa02 f303 	lsl.w	r3, r2, r3
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	4313      	orrs	r3, r2
 800b574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b582:	2201      	movs	r2, #1
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	fa02 f303 	lsl.w	r3, r2, r3
 800b58a:	43db      	mvns	r3, r3
 800b58c:	693a      	ldr	r2, [r7, #16]
 800b58e:	4013      	ands	r3, r2
 800b590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	091b      	lsrs	r3, r3, #4
 800b598:	f003 0201 	and.w	r2, r3, #1
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	f003 0303 	and.w	r3, r3, #3
 800b5b6:	2b03      	cmp	r3, #3
 800b5b8:	d118      	bne.n	800b5ec <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c8:	43db      	mvns	r3, r3
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	08db      	lsrs	r3, r3, #3
 800b5d6:	f003 0201 	and.w	r2, r3, #1
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	2203      	movs	r2, #3
 800b5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fc:	43db      	mvns	r3, r3
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	4013      	ands	r3, r2
 800b602:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	689a      	ldr	r2, [r3, #8]
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	005b      	lsls	r3, r3, #1
 800b60c:	fa02 f303 	lsl.w	r3, r2, r3
 800b610:	693a      	ldr	r2, [r7, #16]
 800b612:	4313      	orrs	r3, r2
 800b614:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	693a      	ldr	r2, [r7, #16]
 800b61a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	2b02      	cmp	r3, #2
 800b622:	d003      	beq.n	800b62c <HAL_GPIO_Init+0x128>
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	2b12      	cmp	r3, #18
 800b62a:	d123      	bne.n	800b674 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	08da      	lsrs	r2, r3, #3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3208      	adds	r2, #8
 800b634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b638:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f003 0307 	and.w	r3, r3, #7
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	220f      	movs	r2, #15
 800b644:	fa02 f303 	lsl.w	r3, r2, r3
 800b648:	43db      	mvns	r3, r3
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	4013      	ands	r3, r2
 800b64e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	691a      	ldr	r2, [r3, #16]
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f003 0307 	and.w	r3, r3, #7
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	fa02 f303 	lsl.w	r3, r2, r3
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	4313      	orrs	r3, r2
 800b664:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	08da      	lsrs	r2, r3, #3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	3208      	adds	r2, #8
 800b66e:	6939      	ldr	r1, [r7, #16]
 800b670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	005b      	lsls	r3, r3, #1
 800b67e:	2203      	movs	r2, #3
 800b680:	fa02 f303 	lsl.w	r3, r2, r3
 800b684:	43db      	mvns	r3, r3
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	4013      	ands	r3, r2
 800b68a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	f003 0203 	and.w	r2, r3, #3
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	005b      	lsls	r3, r3, #1
 800b698:	fa02 f303 	lsl.w	r3, r2, r3
 800b69c:	693a      	ldr	r2, [r7, #16]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f000 80ac 	beq.w	800b80e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b6b6:	4b5f      	ldr	r3, [pc, #380]	; (800b834 <HAL_GPIO_Init+0x330>)
 800b6b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6ba:	4a5e      	ldr	r2, [pc, #376]	; (800b834 <HAL_GPIO_Init+0x330>)
 800b6bc:	f043 0301 	orr.w	r3, r3, #1
 800b6c0:	6613      	str	r3, [r2, #96]	; 0x60
 800b6c2:	4b5c      	ldr	r3, [pc, #368]	; (800b834 <HAL_GPIO_Init+0x330>)
 800b6c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	60bb      	str	r3, [r7, #8]
 800b6cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b6ce:	4a5a      	ldr	r2, [pc, #360]	; (800b838 <HAL_GPIO_Init+0x334>)
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	089b      	lsrs	r3, r3, #2
 800b6d4:	3302      	adds	r3, #2
 800b6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f003 0303 	and.w	r3, r3, #3
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	220f      	movs	r2, #15
 800b6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ea:	43db      	mvns	r3, r3
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b6f8:	d025      	beq.n	800b746 <HAL_GPIO_Init+0x242>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a4f      	ldr	r2, [pc, #316]	; (800b83c <HAL_GPIO_Init+0x338>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d01f      	beq.n	800b742 <HAL_GPIO_Init+0x23e>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a4e      	ldr	r2, [pc, #312]	; (800b840 <HAL_GPIO_Init+0x33c>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d019      	beq.n	800b73e <HAL_GPIO_Init+0x23a>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a4d      	ldr	r2, [pc, #308]	; (800b844 <HAL_GPIO_Init+0x340>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d013      	beq.n	800b73a <HAL_GPIO_Init+0x236>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a4c      	ldr	r2, [pc, #304]	; (800b848 <HAL_GPIO_Init+0x344>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d00d      	beq.n	800b736 <HAL_GPIO_Init+0x232>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a4b      	ldr	r2, [pc, #300]	; (800b84c <HAL_GPIO_Init+0x348>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d007      	beq.n	800b732 <HAL_GPIO_Init+0x22e>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a4a      	ldr	r2, [pc, #296]	; (800b850 <HAL_GPIO_Init+0x34c>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d101      	bne.n	800b72e <HAL_GPIO_Init+0x22a>
 800b72a:	2306      	movs	r3, #6
 800b72c:	e00c      	b.n	800b748 <HAL_GPIO_Init+0x244>
 800b72e:	2307      	movs	r3, #7
 800b730:	e00a      	b.n	800b748 <HAL_GPIO_Init+0x244>
 800b732:	2305      	movs	r3, #5
 800b734:	e008      	b.n	800b748 <HAL_GPIO_Init+0x244>
 800b736:	2304      	movs	r3, #4
 800b738:	e006      	b.n	800b748 <HAL_GPIO_Init+0x244>
 800b73a:	2303      	movs	r3, #3
 800b73c:	e004      	b.n	800b748 <HAL_GPIO_Init+0x244>
 800b73e:	2302      	movs	r3, #2
 800b740:	e002      	b.n	800b748 <HAL_GPIO_Init+0x244>
 800b742:	2301      	movs	r3, #1
 800b744:	e000      	b.n	800b748 <HAL_GPIO_Init+0x244>
 800b746:	2300      	movs	r3, #0
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	f002 0203 	and.w	r2, r2, #3
 800b74e:	0092      	lsls	r2, r2, #2
 800b750:	4093      	lsls	r3, r2
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	4313      	orrs	r3, r2
 800b756:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b758:	4937      	ldr	r1, [pc, #220]	; (800b838 <HAL_GPIO_Init+0x334>)
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	089b      	lsrs	r3, r3, #2
 800b75e:	3302      	adds	r3, #2
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b766:	4b3b      	ldr	r3, [pc, #236]	; (800b854 <HAL_GPIO_Init+0x350>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	43db      	mvns	r3, r3
 800b770:	693a      	ldr	r2, [r7, #16]
 800b772:	4013      	ands	r3, r2
 800b774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800b782:	693a      	ldr	r2, [r7, #16]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4313      	orrs	r3, r2
 800b788:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b78a:	4a32      	ldr	r2, [pc, #200]	; (800b854 <HAL_GPIO_Init+0x350>)
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800b790:	4b30      	ldr	r3, [pc, #192]	; (800b854 <HAL_GPIO_Init+0x350>)
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	43db      	mvns	r3, r3
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	4013      	ands	r3, r2
 800b79e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d003      	beq.n	800b7b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800b7ac:	693a      	ldr	r2, [r7, #16]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b7b4:	4a27      	ldr	r2, [pc, #156]	; (800b854 <HAL_GPIO_Init+0x350>)
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b7ba:	4b26      	ldr	r3, [pc, #152]	; (800b854 <HAL_GPIO_Init+0x350>)
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	43db      	mvns	r3, r3
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d003      	beq.n	800b7de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800b7d6:	693a      	ldr	r2, [r7, #16]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b7de:	4a1d      	ldr	r2, [pc, #116]	; (800b854 <HAL_GPIO_Init+0x350>)
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b7e4:	4b1b      	ldr	r3, [pc, #108]	; (800b854 <HAL_GPIO_Init+0x350>)
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	43db      	mvns	r3, r3
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d003      	beq.n	800b808 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	4313      	orrs	r3, r2
 800b806:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b808:	4a12      	ldr	r2, [pc, #72]	; (800b854 <HAL_GPIO_Init+0x350>)
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	3301      	adds	r3, #1
 800b812:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	fa22 f303 	lsr.w	r3, r2, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f47f ae78 	bne.w	800b514 <HAL_GPIO_Init+0x10>
  }
}
 800b824:	bf00      	nop
 800b826:	bf00      	nop
 800b828:	371c      	adds	r7, #28
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	40021000 	.word	0x40021000
 800b838:	40010000 	.word	0x40010000
 800b83c:	48000400 	.word	0x48000400
 800b840:	48000800 	.word	0x48000800
 800b844:	48000c00 	.word	0x48000c00
 800b848:	48001000 	.word	0x48001000
 800b84c:	48001400 	.word	0x48001400
 800b850:	48001800 	.word	0x48001800
 800b854:	40010400 	.word	0x40010400

0800b858 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b858:	b480      	push	{r7}
 800b85a:	b087      	sub	sp, #28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800b866:	e0cd      	b.n	800ba04 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800b868:	2201      	movs	r2, #1
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	fa02 f303 	lsl.w	r3, r2, r3
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	4013      	ands	r3, r2
 800b874:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f000 80c0 	beq.w	800b9fe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800b87e:	4a68      	ldr	r2, [pc, #416]	; (800ba20 <HAL_GPIO_DeInit+0x1c8>)
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	089b      	lsrs	r3, r3, #2
 800b884:	3302      	adds	r3, #2
 800b886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b88a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	f003 0303 	and.w	r3, r3, #3
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	220f      	movs	r2, #15
 800b896:	fa02 f303 	lsl.w	r3, r2, r3
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	4013      	ands	r3, r2
 800b89e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b8a6:	d025      	beq.n	800b8f4 <HAL_GPIO_DeInit+0x9c>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a5e      	ldr	r2, [pc, #376]	; (800ba24 <HAL_GPIO_DeInit+0x1cc>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d01f      	beq.n	800b8f0 <HAL_GPIO_DeInit+0x98>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a5d      	ldr	r2, [pc, #372]	; (800ba28 <HAL_GPIO_DeInit+0x1d0>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d019      	beq.n	800b8ec <HAL_GPIO_DeInit+0x94>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a5c      	ldr	r2, [pc, #368]	; (800ba2c <HAL_GPIO_DeInit+0x1d4>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d013      	beq.n	800b8e8 <HAL_GPIO_DeInit+0x90>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a5b      	ldr	r2, [pc, #364]	; (800ba30 <HAL_GPIO_DeInit+0x1d8>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d00d      	beq.n	800b8e4 <HAL_GPIO_DeInit+0x8c>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a5a      	ldr	r2, [pc, #360]	; (800ba34 <HAL_GPIO_DeInit+0x1dc>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d007      	beq.n	800b8e0 <HAL_GPIO_DeInit+0x88>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a59      	ldr	r2, [pc, #356]	; (800ba38 <HAL_GPIO_DeInit+0x1e0>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d101      	bne.n	800b8dc <HAL_GPIO_DeInit+0x84>
 800b8d8:	2306      	movs	r3, #6
 800b8da:	e00c      	b.n	800b8f6 <HAL_GPIO_DeInit+0x9e>
 800b8dc:	2307      	movs	r3, #7
 800b8de:	e00a      	b.n	800b8f6 <HAL_GPIO_DeInit+0x9e>
 800b8e0:	2305      	movs	r3, #5
 800b8e2:	e008      	b.n	800b8f6 <HAL_GPIO_DeInit+0x9e>
 800b8e4:	2304      	movs	r3, #4
 800b8e6:	e006      	b.n	800b8f6 <HAL_GPIO_DeInit+0x9e>
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e004      	b.n	800b8f6 <HAL_GPIO_DeInit+0x9e>
 800b8ec:	2302      	movs	r3, #2
 800b8ee:	e002      	b.n	800b8f6 <HAL_GPIO_DeInit+0x9e>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e000      	b.n	800b8f6 <HAL_GPIO_DeInit+0x9e>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	f002 0203 	and.w	r2, r2, #3
 800b8fc:	0092      	lsls	r2, r2, #2
 800b8fe:	4093      	lsls	r3, r2
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	429a      	cmp	r2, r3
 800b904:	d132      	bne.n	800b96c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800b906:	4b4d      	ldr	r3, [pc, #308]	; (800ba3c <HAL_GPIO_DeInit+0x1e4>)
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	43db      	mvns	r3, r3
 800b90e:	494b      	ldr	r1, [pc, #300]	; (800ba3c <HAL_GPIO_DeInit+0x1e4>)
 800b910:	4013      	ands	r3, r2
 800b912:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800b914:	4b49      	ldr	r3, [pc, #292]	; (800ba3c <HAL_GPIO_DeInit+0x1e4>)
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	43db      	mvns	r3, r3
 800b91c:	4947      	ldr	r1, [pc, #284]	; (800ba3c <HAL_GPIO_DeInit+0x1e4>)
 800b91e:	4013      	ands	r3, r2
 800b920:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800b922:	4b46      	ldr	r3, [pc, #280]	; (800ba3c <HAL_GPIO_DeInit+0x1e4>)
 800b924:	689a      	ldr	r2, [r3, #8]
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	43db      	mvns	r3, r3
 800b92a:	4944      	ldr	r1, [pc, #272]	; (800ba3c <HAL_GPIO_DeInit+0x1e4>)
 800b92c:	4013      	ands	r3, r2
 800b92e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800b930:	4b42      	ldr	r3, [pc, #264]	; (800ba3c <HAL_GPIO_DeInit+0x1e4>)
 800b932:	68da      	ldr	r2, [r3, #12]
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	43db      	mvns	r3, r3
 800b938:	4940      	ldr	r1, [pc, #256]	; (800ba3c <HAL_GPIO_DeInit+0x1e4>)
 800b93a:	4013      	ands	r3, r2
 800b93c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f003 0303 	and.w	r3, r3, #3
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	220f      	movs	r2, #15
 800b948:	fa02 f303 	lsl.w	r3, r2, r3
 800b94c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800b94e:	4a34      	ldr	r2, [pc, #208]	; (800ba20 <HAL_GPIO_DeInit+0x1c8>)
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	089b      	lsrs	r3, r3, #2
 800b954:	3302      	adds	r3, #2
 800b956:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	43da      	mvns	r2, r3
 800b95e:	4830      	ldr	r0, [pc, #192]	; (800ba20 <HAL_GPIO_DeInit+0x1c8>)
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	089b      	lsrs	r3, r3, #2
 800b964:	400a      	ands	r2, r1
 800b966:	3302      	adds	r3, #2
 800b968:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	005b      	lsls	r3, r3, #1
 800b974:	2103      	movs	r1, #3
 800b976:	fa01 f303 	lsl.w	r3, r1, r3
 800b97a:	431a      	orrs	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	08da      	lsrs	r2, r3, #3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3208      	adds	r2, #8
 800b988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	f003 0307 	and.w	r3, r3, #7
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	220f      	movs	r2, #15
 800b996:	fa02 f303 	lsl.w	r3, r2, r3
 800b99a:	43db      	mvns	r3, r3
 800b99c:	697a      	ldr	r2, [r7, #20]
 800b99e:	08d2      	lsrs	r2, r2, #3
 800b9a0:	4019      	ands	r1, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	3208      	adds	r2, #8
 800b9a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	689a      	ldr	r2, [r3, #8]
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	005b      	lsls	r3, r3, #1
 800b9b2:	2103      	movs	r1, #3
 800b9b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b9b8:	43db      	mvns	r3, r3
 800b9ba:	401a      	ands	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b9cc:	43db      	mvns	r3, r3
 800b9ce:	401a      	ands	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	68da      	ldr	r2, [r3, #12]
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	2103      	movs	r1, #3
 800b9de:	fa01 f303 	lsl.w	r3, r1, r3
 800b9e2:	43db      	mvns	r3, r3
 800b9e4:	401a      	ands	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ee:	2101      	movs	r1, #1
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	fa01 f303 	lsl.w	r3, r1, r3
 800b9f6:	43db      	mvns	r3, r3
 800b9f8:	401a      	ands	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	3301      	adds	r3, #1
 800ba02:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	fa22 f303 	lsr.w	r3, r2, r3
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f47f af2b 	bne.w	800b868 <HAL_GPIO_DeInit+0x10>
  }
}
 800ba12:	bf00      	nop
 800ba14:	bf00      	nop
 800ba16:	371c      	adds	r7, #28
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	40010000 	.word	0x40010000
 800ba24:	48000400 	.word	0x48000400
 800ba28:	48000800 	.word	0x48000800
 800ba2c:	48000c00 	.word	0x48000c00
 800ba30:	48001000 	.word	0x48001000
 800ba34:	48001400 	.word	0x48001400
 800ba38:	48001800 	.word	0x48001800
 800ba3c:	40010400 	.word	0x40010400

0800ba40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b085      	sub	sp, #20
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	691a      	ldr	r2, [r3, #16]
 800ba50:	887b      	ldrh	r3, [r7, #2]
 800ba52:	4013      	ands	r3, r2
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	73fb      	strb	r3, [r7, #15]
 800ba5c:	e001      	b.n	800ba62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ba62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	807b      	strh	r3, [r7, #2]
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ba80:	787b      	ldrb	r3, [r7, #1]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ba86:	887a      	ldrh	r2, [r7, #2]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ba8c:	e002      	b.n	800ba94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ba8e:	887a      	ldrh	r2, [r7, #2]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ba94:	bf00      	nop
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	4603      	mov	r3, r0
 800baa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800baaa:	4b08      	ldr	r3, [pc, #32]	; (800bacc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800baac:	695a      	ldr	r2, [r3, #20]
 800baae:	88fb      	ldrh	r3, [r7, #6]
 800bab0:	4013      	ands	r3, r2
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d006      	beq.n	800bac4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bab6:	4a05      	ldr	r2, [pc, #20]	; (800bacc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bab8:	88fb      	ldrh	r3, [r7, #6]
 800baba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800babc:	88fb      	ldrh	r3, [r7, #6]
 800babe:	4618      	mov	r0, r3
 800bac0:	f000 f806 	bl	800bad0 <HAL_GPIO_EXTI_Callback>
  }
}
 800bac4:	bf00      	nop
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	40010400 	.word	0x40010400

0800bad0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	4603      	mov	r3, r0
 800bad8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800bada:	bf00      	nop
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b082      	sub	sp, #8
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d101      	bne.n	800baf8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e081      	b.n	800bbfc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d106      	bne.n	800bb12 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7f6 f875 	bl	8001bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2224      	movs	r2, #36	; 0x24
 800bb16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f022 0201 	bic.w	r2, r2, #1
 800bb28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bb36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	689a      	ldr	r2, [r3, #8]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d107      	bne.n	800bb60 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	689a      	ldr	r2, [r3, #8]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb5c:	609a      	str	r2, [r3, #8]
 800bb5e:	e006      	b.n	800bb6e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	689a      	ldr	r2, [r3, #8]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bb6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d104      	bne.n	800bb80 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	6812      	ldr	r2, [r2, #0]
 800bb8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bb8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb92:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68da      	ldr	r2, [r3, #12]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bba2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	691a      	ldr	r2, [r3, #16]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	695b      	ldr	r3, [r3, #20]
 800bbac:	ea42 0103 	orr.w	r1, r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	021a      	lsls	r2, r3, #8
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	69d9      	ldr	r1, [r3, #28]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a1a      	ldr	r2, [r3, #32]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	430a      	orrs	r2, r1
 800bbcc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f042 0201 	orr.w	r2, r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d101      	bne.n	800bc16 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e021      	b.n	800bc5a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2224      	movs	r2, #36	; 0x24
 800bc1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f022 0201 	bic.w	r2, r2, #1
 800bc2c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7f6 f842 	bl	8001cb8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af02      	add	r7, sp, #8
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	607a      	str	r2, [r7, #4]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	460b      	mov	r3, r1
 800bc72:	817b      	strh	r3, [r7, #10]
 800bc74:	4613      	mov	r3, r2
 800bc76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	2b20      	cmp	r3, #32
 800bc82:	f040 80da 	bne.w	800be3a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d101      	bne.n	800bc94 <HAL_I2C_Master_Transmit+0x30>
 800bc90:	2302      	movs	r3, #2
 800bc92:	e0d3      	b.n	800be3c <HAL_I2C_Master_Transmit+0x1d8>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bc9c:	f7ff fa14 	bl	800b0c8 <HAL_GetTick>
 800bca0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	2319      	movs	r3, #25
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f000 fcd6 	bl	800c660 <I2C_WaitOnFlagUntilTimeout>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e0be      	b.n	800be3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2221      	movs	r2, #33	; 0x21
 800bcc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2210      	movs	r2, #16
 800bcca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	893a      	ldrh	r2, [r7, #8]
 800bcde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	2bff      	cmp	r3, #255	; 0xff
 800bcee:	d90e      	bls.n	800bd0e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	22ff      	movs	r2, #255	; 0xff
 800bcf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	8979      	ldrh	r1, [r7, #10]
 800bcfe:	4b51      	ldr	r3, [pc, #324]	; (800be44 <HAL_I2C_Master_Transmit+0x1e0>)
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f000 fe38 	bl	800c97c <I2C_TransferConfig>
 800bd0c:	e06c      	b.n	800bde8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd12:	b29a      	uxth	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd1c:	b2da      	uxtb	r2, r3
 800bd1e:	8979      	ldrh	r1, [r7, #10]
 800bd20:	4b48      	ldr	r3, [pc, #288]	; (800be44 <HAL_I2C_Master_Transmit+0x1e0>)
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 fe27 	bl	800c97c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800bd2e:	e05b      	b.n	800bde8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd30:	697a      	ldr	r2, [r7, #20]
 800bd32:	6a39      	ldr	r1, [r7, #32]
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f000 fcd3 	bl	800c6e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	e07b      	b.n	800be3c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd48:	781a      	ldrb	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd54:	1c5a      	adds	r2, r3, #1
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	3b01      	subs	r3, #1
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d034      	beq.n	800bde8 <HAL_I2C_Master_Transmit+0x184>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d130      	bne.n	800bde8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	6a3b      	ldr	r3, [r7, #32]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2180      	movs	r1, #128	; 0x80
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f000 fc65 	bl	800c660 <I2C_WaitOnFlagUntilTimeout>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e04d      	b.n	800be3c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	2bff      	cmp	r3, #255	; 0xff
 800bda8:	d90e      	bls.n	800bdc8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	22ff      	movs	r2, #255	; 0xff
 800bdae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	8979      	ldrh	r1, [r7, #10]
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bdc0:	68f8      	ldr	r0, [r7, #12]
 800bdc2:	f000 fddb 	bl	800c97c <I2C_TransferConfig>
 800bdc6:	e00f      	b.n	800bde8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	8979      	ldrh	r1, [r7, #10]
 800bdda:	2300      	movs	r3, #0
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f000 fdca 	bl	800c97c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d19e      	bne.n	800bd30 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	6a39      	ldr	r1, [r7, #32]
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f000 fcb2 	bl	800c760 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e01a      	b.n	800be3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2220      	movs	r2, #32
 800be0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	6859      	ldr	r1, [r3, #4]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	4b0b      	ldr	r3, [pc, #44]	; (800be48 <HAL_I2C_Master_Transmit+0x1e4>)
 800be1a:	400b      	ands	r3, r1
 800be1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2220      	movs	r2, #32
 800be22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2200      	movs	r2, #0
 800be32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be36:	2300      	movs	r3, #0
 800be38:	e000      	b.n	800be3c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800be3a:	2302      	movs	r3, #2
  }
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3718      	adds	r7, #24
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	80002000 	.word	0x80002000
 800be48:	fe00e800 	.word	0xfe00e800

0800be4c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af02      	add	r7, sp, #8
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	607a      	str	r2, [r7, #4]
 800be56:	461a      	mov	r2, r3
 800be58:	460b      	mov	r3, r1
 800be5a:	817b      	strh	r3, [r7, #10]
 800be5c:	4613      	mov	r3, r2
 800be5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b20      	cmp	r3, #32
 800be6a:	f040 80db 	bne.w	800c024 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be74:	2b01      	cmp	r3, #1
 800be76:	d101      	bne.n	800be7c <HAL_I2C_Master_Receive+0x30>
 800be78:	2302      	movs	r3, #2
 800be7a:	e0d4      	b.n	800c026 <HAL_I2C_Master_Receive+0x1da>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2201      	movs	r2, #1
 800be80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800be84:	f7ff f920 	bl	800b0c8 <HAL_GetTick>
 800be88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	2319      	movs	r3, #25
 800be90:	2201      	movs	r2, #1
 800be92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f000 fbe2 	bl	800c660 <I2C_WaitOnFlagUntilTimeout>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	e0bf      	b.n	800c026 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2222      	movs	r2, #34	; 0x22
 800beaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2210      	movs	r2, #16
 800beb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2200      	movs	r2, #0
 800beba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	893a      	ldrh	r2, [r7, #8]
 800bec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	2bff      	cmp	r3, #255	; 0xff
 800bed6:	d90e      	bls.n	800bef6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	22ff      	movs	r2, #255	; 0xff
 800bedc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	8979      	ldrh	r1, [r7, #10]
 800bee6:	4b52      	ldr	r3, [pc, #328]	; (800c030 <HAL_I2C_Master_Receive+0x1e4>)
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 fd44 	bl	800c97c <I2C_TransferConfig>
 800bef4:	e06d      	b.n	800bfd2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800befa:	b29a      	uxth	r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	8979      	ldrh	r1, [r7, #10]
 800bf08:	4b49      	ldr	r3, [pc, #292]	; (800c030 <HAL_I2C_Master_Receive+0x1e4>)
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f000 fd33 	bl	800c97c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800bf16:	e05c      	b.n	800bfd2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	6a39      	ldr	r1, [r7, #32]
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f000 fc5b 	bl	800c7d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e07c      	b.n	800c026 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf36:	b2d2      	uxtb	r2, r2
 800bf38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	b29a      	uxth	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	3b01      	subs	r3, #1
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d034      	beq.n	800bfd2 <HAL_I2C_Master_Receive+0x186>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d130      	bne.n	800bfd2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	2200      	movs	r2, #0
 800bf78:	2180      	movs	r1, #128	; 0x80
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f000 fb70 	bl	800c660 <I2C_WaitOnFlagUntilTimeout>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d001      	beq.n	800bf8a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e04d      	b.n	800c026 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	2bff      	cmp	r3, #255	; 0xff
 800bf92:	d90e      	bls.n	800bfb2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	22ff      	movs	r2, #255	; 0xff
 800bf98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	8979      	ldrh	r1, [r7, #10]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f000 fce6 	bl	800c97c <I2C_TransferConfig>
 800bfb0:	e00f      	b.n	800bfd2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfc0:	b2da      	uxtb	r2, r3
 800bfc2:	8979      	ldrh	r1, [r7, #10]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f000 fcd5 	bl	800c97c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d19d      	bne.n	800bf18 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	6a39      	ldr	r1, [r7, #32]
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f000 fbbd 	bl	800c760 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e01a      	b.n	800c026 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2220      	movs	r2, #32
 800bff6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6859      	ldr	r1, [r3, #4]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	4b0c      	ldr	r3, [pc, #48]	; (800c034 <HAL_I2C_Master_Receive+0x1e8>)
 800c004:	400b      	ands	r3, r1
 800c006:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2220      	movs	r2, #32
 800c00c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2200      	movs	r2, #0
 800c014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	e000      	b.n	800c026 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800c024:	2302      	movs	r3, #2
  }
}
 800c026:	4618      	mov	r0, r3
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	80002400 	.word	0x80002400
 800c034:	fe00e800 	.word	0xfe00e800

0800c038 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af02      	add	r7, sp, #8
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	4608      	mov	r0, r1
 800c042:	4611      	mov	r1, r2
 800c044:	461a      	mov	r2, r3
 800c046:	4603      	mov	r3, r0
 800c048:	817b      	strh	r3, [r7, #10]
 800c04a:	460b      	mov	r3, r1
 800c04c:	813b      	strh	r3, [r7, #8]
 800c04e:	4613      	mov	r3, r2
 800c050:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	2b20      	cmp	r3, #32
 800c05c:	f040 80f9 	bne.w	800c252 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d002      	beq.n	800c06c <HAL_I2C_Mem_Write+0x34>
 800c066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d105      	bne.n	800c078 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c072:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	e0ed      	b.n	800c254 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d101      	bne.n	800c086 <HAL_I2C_Mem_Write+0x4e>
 800c082:	2302      	movs	r3, #2
 800c084:	e0e6      	b.n	800c254 <HAL_I2C_Mem_Write+0x21c>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c08e:	f7ff f81b 	bl	800b0c8 <HAL_GetTick>
 800c092:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	2319      	movs	r3, #25
 800c09a:	2201      	movs	r2, #1
 800c09c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f000 fadd 	bl	800c660 <I2C_WaitOnFlagUntilTimeout>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d001      	beq.n	800c0b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e0d1      	b.n	800c254 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2221      	movs	r2, #33	; 0x21
 800c0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2240      	movs	r2, #64	; 0x40
 800c0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6a3a      	ldr	r2, [r7, #32]
 800c0ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c0d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c0d8:	88f8      	ldrh	r0, [r7, #6]
 800c0da:	893a      	ldrh	r2, [r7, #8]
 800c0dc:	8979      	ldrh	r1, [r7, #10]
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	9301      	str	r3, [sp, #4]
 800c0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f000 f9ed 	bl	800c4c8 <I2C_RequestMemoryWrite>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d005      	beq.n	800c100 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e0a9      	b.n	800c254 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c104:	b29b      	uxth	r3, r3
 800c106:	2bff      	cmp	r3, #255	; 0xff
 800c108:	d90e      	bls.n	800c128 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	22ff      	movs	r2, #255	; 0xff
 800c10e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c114:	b2da      	uxtb	r2, r3
 800c116:	8979      	ldrh	r1, [r7, #10]
 800c118:	2300      	movs	r3, #0
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 fc2b 	bl	800c97c <I2C_TransferConfig>
 800c126:	e00f      	b.n	800c148 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c136:	b2da      	uxtb	r2, r3
 800c138:	8979      	ldrh	r1, [r7, #10]
 800c13a:	2300      	movs	r3, #0
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f000 fc1a 	bl	800c97c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c148:	697a      	ldr	r2, [r7, #20]
 800c14a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f000 fac7 	bl	800c6e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d001      	beq.n	800c15c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	e07b      	b.n	800c254 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	781a      	ldrb	r2, [r3, #0]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16c:	1c5a      	adds	r2, r3, #1
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c176:	b29b      	uxth	r3, r3
 800c178:	3b01      	subs	r3, #1
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c184:	3b01      	subs	r3, #1
 800c186:	b29a      	uxth	r2, r3
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c190:	b29b      	uxth	r3, r3
 800c192:	2b00      	cmp	r3, #0
 800c194:	d034      	beq.n	800c200 <HAL_I2C_Mem_Write+0x1c8>
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d130      	bne.n	800c200 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2180      	movs	r1, #128	; 0x80
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f000 fa59 	bl	800c660 <I2C_WaitOnFlagUntilTimeout>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d001      	beq.n	800c1b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e04d      	b.n	800c254 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	2bff      	cmp	r3, #255	; 0xff
 800c1c0:	d90e      	bls.n	800c1e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	22ff      	movs	r2, #255	; 0xff
 800c1c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	8979      	ldrh	r1, [r7, #10]
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f000 fbcf 	bl	800c97c <I2C_TransferConfig>
 800c1de:	e00f      	b.n	800c200 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1ee:	b2da      	uxtb	r2, r3
 800c1f0:	8979      	ldrh	r1, [r7, #10]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f000 fbbe 	bl	800c97c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c204:	b29b      	uxth	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	d19e      	bne.n	800c148 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f000 faa6 	bl	800c760 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d001      	beq.n	800c21e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e01a      	b.n	800c254 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2220      	movs	r2, #32
 800c224:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	6859      	ldr	r1, [r3, #4]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	4b0a      	ldr	r3, [pc, #40]	; (800c25c <HAL_I2C_Mem_Write+0x224>)
 800c232:	400b      	ands	r3, r1
 800c234:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2220      	movs	r2, #32
 800c23a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2200      	movs	r2, #0
 800c242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c24e:	2300      	movs	r3, #0
 800c250:	e000      	b.n	800c254 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c252:	2302      	movs	r3, #2
  }
}
 800c254:	4618      	mov	r0, r3
 800c256:	3718      	adds	r7, #24
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	fe00e800 	.word	0xfe00e800

0800c260 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b088      	sub	sp, #32
 800c264:	af02      	add	r7, sp, #8
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	4608      	mov	r0, r1
 800c26a:	4611      	mov	r1, r2
 800c26c:	461a      	mov	r2, r3
 800c26e:	4603      	mov	r3, r0
 800c270:	817b      	strh	r3, [r7, #10]
 800c272:	460b      	mov	r3, r1
 800c274:	813b      	strh	r3, [r7, #8]
 800c276:	4613      	mov	r3, r2
 800c278:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c280:	b2db      	uxtb	r3, r3
 800c282:	2b20      	cmp	r3, #32
 800c284:	f040 80fd 	bne.w	800c482 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c288:	6a3b      	ldr	r3, [r7, #32]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d002      	beq.n	800c294 <HAL_I2C_Mem_Read+0x34>
 800c28e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c290:	2b00      	cmp	r3, #0
 800c292:	d105      	bne.n	800c2a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c29a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	e0f1      	b.n	800c484 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d101      	bne.n	800c2ae <HAL_I2C_Mem_Read+0x4e>
 800c2aa:	2302      	movs	r3, #2
 800c2ac:	e0ea      	b.n	800c484 <HAL_I2C_Mem_Read+0x224>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c2b6:	f7fe ff07 	bl	800b0c8 <HAL_GetTick>
 800c2ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	2319      	movs	r3, #25
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f000 f9c9 	bl	800c660 <I2C_WaitOnFlagUntilTimeout>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d001      	beq.n	800c2d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e0d5      	b.n	800c484 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2222      	movs	r2, #34	; 0x22
 800c2dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2240      	movs	r2, #64	; 0x40
 800c2e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6a3a      	ldr	r2, [r7, #32]
 800c2f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c2f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c300:	88f8      	ldrh	r0, [r7, #6]
 800c302:	893a      	ldrh	r2, [r7, #8]
 800c304:	8979      	ldrh	r1, [r7, #10]
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	4603      	mov	r3, r0
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f000 f92d 	bl	800c570 <I2C_RequestMemoryRead>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d005      	beq.n	800c328 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2200      	movs	r2, #0
 800c320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c324:	2301      	movs	r3, #1
 800c326:	e0ad      	b.n	800c484 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	2bff      	cmp	r3, #255	; 0xff
 800c330:	d90e      	bls.n	800c350 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	22ff      	movs	r2, #255	; 0xff
 800c336:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	8979      	ldrh	r1, [r7, #10]
 800c340:	4b52      	ldr	r3, [pc, #328]	; (800c48c <HAL_I2C_Mem_Read+0x22c>)
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f000 fb17 	bl	800c97c <I2C_TransferConfig>
 800c34e:	e00f      	b.n	800c370 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c354:	b29a      	uxth	r2, r3
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c35e:	b2da      	uxtb	r2, r3
 800c360:	8979      	ldrh	r1, [r7, #10]
 800c362:	4b4a      	ldr	r3, [pc, #296]	; (800c48c <HAL_I2C_Mem_Read+0x22c>)
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f000 fb06 	bl	800c97c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	2200      	movs	r2, #0
 800c378:	2104      	movs	r1, #4
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f000 f970 	bl	800c660 <I2C_WaitOnFlagUntilTimeout>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e07c      	b.n	800c484 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c394:	b2d2      	uxtb	r2, r2
 800c396:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d034      	beq.n	800c430 <HAL_I2C_Mem_Read+0x1d0>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d130      	bne.n	800c430 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	2180      	movs	r1, #128	; 0x80
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 f941 	bl	800c660 <I2C_WaitOnFlagUntilTimeout>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d001      	beq.n	800c3e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e04d      	b.n	800c484 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	2bff      	cmp	r3, #255	; 0xff
 800c3f0:	d90e      	bls.n	800c410 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	22ff      	movs	r2, #255	; 0xff
 800c3f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3fc:	b2da      	uxtb	r2, r3
 800c3fe:	8979      	ldrh	r1, [r7, #10]
 800c400:	2300      	movs	r3, #0
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f000 fab7 	bl	800c97c <I2C_TransferConfig>
 800c40e:	e00f      	b.n	800c430 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c414:	b29a      	uxth	r2, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c41e:	b2da      	uxtb	r2, r3
 800c420:	8979      	ldrh	r1, [r7, #10]
 800c422:	2300      	movs	r3, #0
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f000 faa6 	bl	800c97c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c434:	b29b      	uxth	r3, r3
 800c436:	2b00      	cmp	r3, #0
 800c438:	d19a      	bne.n	800c370 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c43a:	697a      	ldr	r2, [r7, #20]
 800c43c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f000 f98e 	bl	800c760 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e01a      	b.n	800c484 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2220      	movs	r2, #32
 800c454:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	6859      	ldr	r1, [r3, #4]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	4b0b      	ldr	r3, [pc, #44]	; (800c490 <HAL_I2C_Mem_Read+0x230>)
 800c462:	400b      	ands	r3, r1
 800c464:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2220      	movs	r2, #32
 800c46a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2200      	movs	r2, #0
 800c472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	e000      	b.n	800c484 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c482:	2302      	movs	r3, #2
  }
}
 800c484:	4618      	mov	r0, r3
 800c486:	3718      	adds	r7, #24
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	80002400 	.word	0x80002400
 800c490:	fe00e800 	.word	0xfe00e800

0800c494 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4a2:	b2db      	uxtb	r3, r3
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af02      	add	r7, sp, #8
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	4608      	mov	r0, r1
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	817b      	strh	r3, [r7, #10]
 800c4da:	460b      	mov	r3, r1
 800c4dc:	813b      	strh	r3, [r7, #8]
 800c4de:	4613      	mov	r3, r2
 800c4e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c4e2:	88fb      	ldrh	r3, [r7, #6]
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	8979      	ldrh	r1, [r7, #10]
 800c4e8:	4b20      	ldr	r3, [pc, #128]	; (800c56c <I2C_RequestMemoryWrite+0xa4>)
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f000 fa43 	bl	800c97c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c4f6:	69fa      	ldr	r2, [r7, #28]
 800c4f8:	69b9      	ldr	r1, [r7, #24]
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f000 f8f0 	bl	800c6e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d001      	beq.n	800c50a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c506:	2301      	movs	r3, #1
 800c508:	e02c      	b.n	800c564 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c50a:	88fb      	ldrh	r3, [r7, #6]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d105      	bne.n	800c51c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c510:	893b      	ldrh	r3, [r7, #8]
 800c512:	b2da      	uxtb	r2, r3
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	629a      	str	r2, [r3, #40]	; 0x28
 800c51a:	e015      	b.n	800c548 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c51c:	893b      	ldrh	r3, [r7, #8]
 800c51e:	0a1b      	lsrs	r3, r3, #8
 800c520:	b29b      	uxth	r3, r3
 800c522:	b2da      	uxtb	r2, r3
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c52a:	69fa      	ldr	r2, [r7, #28]
 800c52c:	69b9      	ldr	r1, [r7, #24]
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 f8d6 	bl	800c6e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	e012      	b.n	800c564 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c53e:	893b      	ldrh	r3, [r7, #8]
 800c540:	b2da      	uxtb	r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	9300      	str	r3, [sp, #0]
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	2200      	movs	r2, #0
 800c550:	2180      	movs	r1, #128	; 0x80
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f000 f884 	bl	800c660 <I2C_WaitOnFlagUntilTimeout>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d001      	beq.n	800c562 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	e000      	b.n	800c564 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	80002000 	.word	0x80002000

0800c570 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af02      	add	r7, sp, #8
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	4608      	mov	r0, r1
 800c57a:	4611      	mov	r1, r2
 800c57c:	461a      	mov	r2, r3
 800c57e:	4603      	mov	r3, r0
 800c580:	817b      	strh	r3, [r7, #10]
 800c582:	460b      	mov	r3, r1
 800c584:	813b      	strh	r3, [r7, #8]
 800c586:	4613      	mov	r3, r2
 800c588:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c58a:	88fb      	ldrh	r3, [r7, #6]
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	8979      	ldrh	r1, [r7, #10]
 800c590:	4b20      	ldr	r3, [pc, #128]	; (800c614 <I2C_RequestMemoryRead+0xa4>)
 800c592:	9300      	str	r3, [sp, #0]
 800c594:	2300      	movs	r3, #0
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f000 f9f0 	bl	800c97c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c59c:	69fa      	ldr	r2, [r7, #28]
 800c59e:	69b9      	ldr	r1, [r7, #24]
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f000 f89d 	bl	800c6e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d001      	beq.n	800c5b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e02c      	b.n	800c60a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c5b0:	88fb      	ldrh	r3, [r7, #6]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d105      	bne.n	800c5c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c5b6:	893b      	ldrh	r3, [r7, #8]
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	629a      	str	r2, [r3, #40]	; 0x28
 800c5c0:	e015      	b.n	800c5ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c5c2:	893b      	ldrh	r3, [r7, #8]
 800c5c4:	0a1b      	lsrs	r3, r3, #8
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5d0:	69fa      	ldr	r2, [r7, #28]
 800c5d2:	69b9      	ldr	r1, [r7, #24]
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f000 f883 	bl	800c6e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d001      	beq.n	800c5e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e012      	b.n	800c60a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c5e4:	893b      	ldrh	r3, [r7, #8]
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	2140      	movs	r1, #64	; 0x40
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f000 f831 	bl	800c660 <I2C_WaitOnFlagUntilTimeout>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	e000      	b.n	800c60a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	80002000 	.word	0x80002000

0800c618 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	f003 0302 	and.w	r3, r3, #2
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d103      	bne.n	800c636 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2200      	movs	r2, #0
 800c634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	699b      	ldr	r3, [r3, #24]
 800c63c:	f003 0301 	and.w	r3, r3, #1
 800c640:	2b01      	cmp	r3, #1
 800c642:	d007      	beq.n	800c654 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	699a      	ldr	r2, [r3, #24]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f042 0201 	orr.w	r2, r2, #1
 800c652:	619a      	str	r2, [r3, #24]
  }
}
 800c654:	bf00      	nop
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	603b      	str	r3, [r7, #0]
 800c66c:	4613      	mov	r3, r2
 800c66e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c670:	e022      	b.n	800c6b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c678:	d01e      	beq.n	800c6b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c67a:	f7fe fd25 	bl	800b0c8 <HAL_GetTick>
 800c67e:	4602      	mov	r2, r0
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	429a      	cmp	r2, r3
 800c688:	d302      	bcc.n	800c690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d113      	bne.n	800c6b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c694:	f043 0220 	orr.w	r2, r3, #32
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e00f      	b.n	800c6d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	699a      	ldr	r2, [r3, #24]
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	bf0c      	ite	eq
 800c6c8:	2301      	moveq	r3, #1
 800c6ca:	2300      	movne	r3, #0
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	79fb      	ldrb	r3, [r7, #7]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d0cd      	beq.n	800c672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c6ec:	e02c      	b.n	800c748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	68b9      	ldr	r1, [r7, #8]
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f000 f8dc 	bl	800c8b0 <I2C_IsAcknowledgeFailed>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	e02a      	b.n	800c758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c708:	d01e      	beq.n	800c748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c70a:	f7fe fcdd 	bl	800b0c8 <HAL_GetTick>
 800c70e:	4602      	mov	r2, r0
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	68ba      	ldr	r2, [r7, #8]
 800c716:	429a      	cmp	r2, r3
 800c718:	d302      	bcc.n	800c720 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d113      	bne.n	800c748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c724:	f043 0220 	orr.w	r2, r3, #32
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2220      	movs	r2, #32
 800c730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c744:	2301      	movs	r3, #1
 800c746:	e007      	b.n	800c758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	699b      	ldr	r3, [r3, #24]
 800c74e:	f003 0302 	and.w	r3, r3, #2
 800c752:	2b02      	cmp	r3, #2
 800c754:	d1cb      	bne.n	800c6ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3710      	adds	r7, #16
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c76c:	e028      	b.n	800c7c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	68b9      	ldr	r1, [r7, #8]
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f000 f89c 	bl	800c8b0 <I2C_IsAcknowledgeFailed>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d001      	beq.n	800c782 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c77e:	2301      	movs	r3, #1
 800c780:	e026      	b.n	800c7d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c782:	f7fe fca1 	bl	800b0c8 <HAL_GetTick>
 800c786:	4602      	mov	r2, r0
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	1ad3      	subs	r3, r2, r3
 800c78c:	68ba      	ldr	r2, [r7, #8]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d302      	bcc.n	800c798 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d113      	bne.n	800c7c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c79c:	f043 0220 	orr.w	r2, r3, #32
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2220      	movs	r2, #32
 800c7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e007      	b.n	800c7d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	699b      	ldr	r3, [r3, #24]
 800c7c6:	f003 0320 	and.w	r3, r3, #32
 800c7ca:	2b20      	cmp	r3, #32
 800c7cc:	d1cf      	bne.n	800c76e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c7e4:	e055      	b.n	800c892 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	68b9      	ldr	r1, [r7, #8]
 800c7ea:	68f8      	ldr	r0, [r7, #12]
 800c7ec:	f000 f860 	bl	800c8b0 <I2C_IsAcknowledgeFailed>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d001      	beq.n	800c7fa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e053      	b.n	800c8a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	f003 0320 	and.w	r3, r3, #32
 800c804:	2b20      	cmp	r3, #32
 800c806:	d129      	bne.n	800c85c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	f003 0304 	and.w	r3, r3, #4
 800c812:	2b04      	cmp	r3, #4
 800c814:	d105      	bne.n	800c822 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d001      	beq.n	800c822 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800c81e:	2300      	movs	r3, #0
 800c820:	e03f      	b.n	800c8a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2220      	movs	r2, #32
 800c828:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	6859      	ldr	r1, [r3, #4]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	4b1d      	ldr	r3, [pc, #116]	; (800c8ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800c836:	400b      	ands	r3, r1
 800c838:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2200      	movs	r2, #0
 800c83e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2220      	movs	r2, #32
 800c844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	e022      	b.n	800c8a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c85c:	f7fe fc34 	bl	800b0c8 <HAL_GetTick>
 800c860:	4602      	mov	r2, r0
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d302      	bcc.n	800c872 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10f      	bne.n	800c892 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c876:	f043 0220 	orr.w	r2, r3, #32
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2220      	movs	r2, #32
 800c882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e007      	b.n	800c8a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	f003 0304 	and.w	r3, r3, #4
 800c89c:	2b04      	cmp	r3, #4
 800c89e:	d1a2      	bne.n	800c7e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	fe00e800 	.word	0xfe00e800

0800c8b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	699b      	ldr	r3, [r3, #24]
 800c8c2:	f003 0310 	and.w	r3, r3, #16
 800c8c6:	2b10      	cmp	r3, #16
 800c8c8:	d151      	bne.n	800c96e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c8ca:	e022      	b.n	800c912 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d2:	d01e      	beq.n	800c912 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8d4:	f7fe fbf8 	bl	800b0c8 <HAL_GetTick>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	68ba      	ldr	r2, [r7, #8]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d302      	bcc.n	800c8ea <I2C_IsAcknowledgeFailed+0x3a>
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d113      	bne.n	800c912 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ee:	f043 0220 	orr.w	r2, r3, #32
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2220      	movs	r2, #32
 800c8fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2200      	movs	r2, #0
 800c902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	e02e      	b.n	800c970 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	f003 0320 	and.w	r3, r3, #32
 800c91c:	2b20      	cmp	r3, #32
 800c91e:	d1d5      	bne.n	800c8cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2210      	movs	r2, #16
 800c926:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2220      	movs	r2, #32
 800c92e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f7ff fe71 	bl	800c618 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6859      	ldr	r1, [r3, #4]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	4b0d      	ldr	r3, [pc, #52]	; (800c978 <I2C_IsAcknowledgeFailed+0xc8>)
 800c942:	400b      	ands	r3, r1
 800c944:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c94a:	f043 0204 	orr.w	r2, r3, #4
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2220      	movs	r2, #32
 800c956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2200      	movs	r2, #0
 800c966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c96a:	2301      	movs	r3, #1
 800c96c:	e000      	b.n	800c970 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	fe00e800 	.word	0xfe00e800

0800c97c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	607b      	str	r3, [r7, #4]
 800c986:	460b      	mov	r3, r1
 800c988:	817b      	strh	r3, [r7, #10]
 800c98a:	4613      	mov	r3, r2
 800c98c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	0d5b      	lsrs	r3, r3, #21
 800c998:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c99c:	4b0d      	ldr	r3, [pc, #52]	; (800c9d4 <I2C_TransferConfig+0x58>)
 800c99e:	430b      	orrs	r3, r1
 800c9a0:	43db      	mvns	r3, r3
 800c9a2:	ea02 0103 	and.w	r1, r2, r3
 800c9a6:	897b      	ldrh	r3, [r7, #10]
 800c9a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c9ac:	7a7b      	ldrb	r3, [r7, #9]
 800c9ae:	041b      	lsls	r3, r3, #16
 800c9b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9b4:	431a      	orrs	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	431a      	orrs	r2, r3
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	431a      	orrs	r2, r3
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	430a      	orrs	r2, r1
 800c9c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c9c6:	bf00      	nop
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	03ff63ff 	.word	0x03ff63ff

0800c9d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	2b20      	cmp	r3, #32
 800c9ec:	d138      	bne.n	800ca60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d101      	bne.n	800c9fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	e032      	b.n	800ca62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2224      	movs	r2, #36	; 0x24
 800ca08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f022 0201 	bic.w	r2, r2, #1
 800ca1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6819      	ldr	r1, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	430a      	orrs	r2, r1
 800ca3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f042 0201 	orr.w	r2, r2, #1
 800ca4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2220      	movs	r2, #32
 800ca50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	e000      	b.n	800ca62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ca60:	2302      	movs	r3, #2
  }
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	370c      	adds	r7, #12
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b085      	sub	sp, #20
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	d139      	bne.n	800caf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d101      	bne.n	800ca92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ca8e:	2302      	movs	r3, #2
 800ca90:	e033      	b.n	800cafa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2201      	movs	r2, #1
 800ca96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2224      	movs	r2, #36	; 0x24
 800ca9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f022 0201 	bic.w	r2, r2, #1
 800cab0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cac0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	021b      	lsls	r3, r3, #8
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	4313      	orrs	r3, r2
 800caca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f042 0201 	orr.w	r2, r2, #1
 800cae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2220      	movs	r2, #32
 800cae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800caf4:	2300      	movs	r3, #0
 800caf6:	e000      	b.n	800cafa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800caf8:	2302      	movs	r3, #2
  }
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr

0800cb06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cb06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb08:	b08f      	sub	sp, #60	; 0x3c
 800cb0a:	af0a      	add	r7, sp, #40	; 0x28
 800cb0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d101      	bne.n	800cb18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cb14:	2301      	movs	r3, #1
 800cb16:	e116      	b.n	800cd46 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d106      	bne.n	800cb38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7f5 fa10 	bl	8001f58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2203      	movs	r2, #3
 800cb3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d102      	bne.n	800cb52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f003 fc15 	bl	8010386 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	603b      	str	r3, [r7, #0]
 800cb62:	687e      	ldr	r6, [r7, #4]
 800cb64:	466d      	mov	r5, sp
 800cb66:	f106 0410 	add.w	r4, r6, #16
 800cb6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb72:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cb76:	e885 0003 	stmia.w	r5, {r0, r1}
 800cb7a:	1d33      	adds	r3, r6, #4
 800cb7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb7e:	6838      	ldr	r0, [r7, #0]
 800cb80:	f003 fbd5 	bl	801032e <USB_CoreInit>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d005      	beq.n	800cb96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2202      	movs	r2, #2
 800cb8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e0d7      	b.n	800cd46 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f003 fc03 	bl	80103a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cba2:	2300      	movs	r3, #0
 800cba4:	73fb      	strb	r3, [r7, #15]
 800cba6:	e04a      	b.n	800cc3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cba8:	7bfa      	ldrb	r2, [r7, #15]
 800cbaa:	6879      	ldr	r1, [r7, #4]
 800cbac:	4613      	mov	r3, r2
 800cbae:	00db      	lsls	r3, r3, #3
 800cbb0:	1a9b      	subs	r3, r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	440b      	add	r3, r1
 800cbb6:	333d      	adds	r3, #61	; 0x3d
 800cbb8:	2201      	movs	r2, #1
 800cbba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cbbc:	7bfa      	ldrb	r2, [r7, #15]
 800cbbe:	6879      	ldr	r1, [r7, #4]
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	1a9b      	subs	r3, r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	440b      	add	r3, r1
 800cbca:	333c      	adds	r3, #60	; 0x3c
 800cbcc:	7bfa      	ldrb	r2, [r7, #15]
 800cbce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800cbd0:	7bfa      	ldrb	r2, [r7, #15]
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
 800cbd4:	b298      	uxth	r0, r3
 800cbd6:	6879      	ldr	r1, [r7, #4]
 800cbd8:	4613      	mov	r3, r2
 800cbda:	00db      	lsls	r3, r3, #3
 800cbdc:	1a9b      	subs	r3, r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	440b      	add	r3, r1
 800cbe2:	3342      	adds	r3, #66	; 0x42
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cbe8:	7bfa      	ldrb	r2, [r7, #15]
 800cbea:	6879      	ldr	r1, [r7, #4]
 800cbec:	4613      	mov	r3, r2
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	1a9b      	subs	r3, r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	440b      	add	r3, r1
 800cbf6:	333f      	adds	r3, #63	; 0x3f
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cbfc:	7bfa      	ldrb	r2, [r7, #15]
 800cbfe:	6879      	ldr	r1, [r7, #4]
 800cc00:	4613      	mov	r3, r2
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	1a9b      	subs	r3, r3, r2
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	440b      	add	r3, r1
 800cc0a:	3344      	adds	r3, #68	; 0x44
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cc10:	7bfa      	ldrb	r2, [r7, #15]
 800cc12:	6879      	ldr	r1, [r7, #4]
 800cc14:	4613      	mov	r3, r2
 800cc16:	00db      	lsls	r3, r3, #3
 800cc18:	1a9b      	subs	r3, r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	440b      	add	r3, r1
 800cc1e:	3348      	adds	r3, #72	; 0x48
 800cc20:	2200      	movs	r2, #0
 800cc22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cc24:	7bfa      	ldrb	r2, [r7, #15]
 800cc26:	6879      	ldr	r1, [r7, #4]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	1a9b      	subs	r3, r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	440b      	add	r3, r1
 800cc32:	3350      	adds	r3, #80	; 0x50
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	73fb      	strb	r3, [r7, #15]
 800cc3e:	7bfa      	ldrb	r2, [r7, #15]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d3af      	bcc.n	800cba8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc48:	2300      	movs	r3, #0
 800cc4a:	73fb      	strb	r3, [r7, #15]
 800cc4c:	e044      	b.n	800ccd8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cc4e:	7bfa      	ldrb	r2, [r7, #15]
 800cc50:	6879      	ldr	r1, [r7, #4]
 800cc52:	4613      	mov	r3, r2
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	1a9b      	subs	r3, r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	440b      	add	r3, r1
 800cc5c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800cc60:	2200      	movs	r2, #0
 800cc62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cc64:	7bfa      	ldrb	r2, [r7, #15]
 800cc66:	6879      	ldr	r1, [r7, #4]
 800cc68:	4613      	mov	r3, r2
 800cc6a:	00db      	lsls	r3, r3, #3
 800cc6c:	1a9b      	subs	r3, r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	440b      	add	r3, r1
 800cc72:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800cc76:	7bfa      	ldrb	r2, [r7, #15]
 800cc78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cc7a:	7bfa      	ldrb	r2, [r7, #15]
 800cc7c:	6879      	ldr	r1, [r7, #4]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	00db      	lsls	r3, r3, #3
 800cc82:	1a9b      	subs	r3, r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	440b      	add	r3, r1
 800cc88:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cc90:	7bfa      	ldrb	r2, [r7, #15]
 800cc92:	6879      	ldr	r1, [r7, #4]
 800cc94:	4613      	mov	r3, r2
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	1a9b      	subs	r3, r3, r2
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	440b      	add	r3, r1
 800cc9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cca6:	7bfa      	ldrb	r2, [r7, #15]
 800cca8:	6879      	ldr	r1, [r7, #4]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	00db      	lsls	r3, r3, #3
 800ccae:	1a9b      	subs	r3, r3, r2
 800ccb0:	009b      	lsls	r3, r3, #2
 800ccb2:	440b      	add	r3, r1
 800ccb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ccb8:	2200      	movs	r2, #0
 800ccba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ccbc:	7bfa      	ldrb	r2, [r7, #15]
 800ccbe:	6879      	ldr	r1, [r7, #4]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	00db      	lsls	r3, r3, #3
 800ccc4:	1a9b      	subs	r3, r3, r2
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	440b      	add	r3, r1
 800ccca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ccce:	2200      	movs	r2, #0
 800ccd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	73fb      	strb	r3, [r7, #15]
 800ccd8:	7bfa      	ldrb	r2, [r7, #15]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d3b5      	bcc.n	800cc4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	603b      	str	r3, [r7, #0]
 800cce8:	687e      	ldr	r6, [r7, #4]
 800ccea:	466d      	mov	r5, sp
 800ccec:	f106 0410 	add.w	r4, r6, #16
 800ccf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ccfc:	e885 0003 	stmia.w	r5, {r0, r1}
 800cd00:	1d33      	adds	r3, r6, #4
 800cd02:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd04:	6838      	ldr	r0, [r7, #0]
 800cd06:	f003 fb79 	bl	80103fc <USB_DevInit>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d005      	beq.n	800cd1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2202      	movs	r2, #2
 800cd14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e014      	b.n	800cd46 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2201      	movs	r2, #1
 800cd28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d102      	bne.n	800cd3a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 f80a 	bl	800cd4e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f003 fd09 	bl	8010756 <USB_DevDisconnect>

  return HAL_OK;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd4e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b085      	sub	sp, #20
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	699b      	ldr	r3, [r3, #24]
 800cd70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd80:	f043 0303 	orr.w	r3, r3, #3
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3714      	adds	r7, #20
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
	...

0800cd98 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd9c:	4b05      	ldr	r3, [pc, #20]	; (800cdb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a04      	ldr	r2, [pc, #16]	; (800cdb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800cda2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cda6:	6013      	str	r3, [r2, #0]
}
 800cda8:	bf00      	nop
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	40007000 	.word	0x40007000

0800cdb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800cdbc:	4b04      	ldr	r3, [pc, #16]	; (800cdd0 <HAL_PWREx_GetVoltageRange+0x18>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	40007000 	.word	0x40007000

0800cdd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cde2:	d130      	bne.n	800ce46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800cde4:	4b23      	ldr	r3, [pc, #140]	; (800ce74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cdec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdf0:	d038      	beq.n	800ce64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cdf2:	4b20      	ldr	r3, [pc, #128]	; (800ce74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cdfa:	4a1e      	ldr	r2, [pc, #120]	; (800ce74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800cdfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ce00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ce02:	4b1d      	ldr	r3, [pc, #116]	; (800ce78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2232      	movs	r2, #50	; 0x32
 800ce08:	fb02 f303 	mul.w	r3, r2, r3
 800ce0c:	4a1b      	ldr	r2, [pc, #108]	; (800ce7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ce0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce12:	0c9b      	lsrs	r3, r3, #18
 800ce14:	3301      	adds	r3, #1
 800ce16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ce18:	e002      	b.n	800ce20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ce20:	4b14      	ldr	r3, [pc, #80]	; (800ce74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ce22:	695b      	ldr	r3, [r3, #20]
 800ce24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce2c:	d102      	bne.n	800ce34 <HAL_PWREx_ControlVoltageScaling+0x60>
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1f2      	bne.n	800ce1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ce34:	4b0f      	ldr	r3, [pc, #60]	; (800ce74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ce36:	695b      	ldr	r3, [r3, #20]
 800ce38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce40:	d110      	bne.n	800ce64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ce42:	2303      	movs	r3, #3
 800ce44:	e00f      	b.n	800ce66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ce46:	4b0b      	ldr	r3, [pc, #44]	; (800ce74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ce4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce52:	d007      	beq.n	800ce64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ce54:	4b07      	ldr	r3, [pc, #28]	; (800ce74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ce5c:	4a05      	ldr	r2, [pc, #20]	; (800ce74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ce5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ce62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3714      	adds	r7, #20
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	40007000 	.word	0x40007000
 800ce78:	20000088 	.word	0x20000088
 800ce7c:	431bde83 	.word	0x431bde83

0800ce80 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ce80:	b480      	push	{r7}
 800ce82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ce84:	4b05      	ldr	r3, [pc, #20]	; (800ce9c <HAL_PWREx_EnableVddUSB+0x1c>)
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	4a04      	ldr	r2, [pc, #16]	; (800ce9c <HAL_PWREx_EnableVddUSB+0x1c>)
 800ce8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ce8e:	6053      	str	r3, [r2, #4]
}
 800ce90:	bf00      	nop
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	40007000 	.word	0x40007000

0800cea0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af02      	add	r7, sp, #8
 800cea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800cea8:	f7fe f90e 	bl	800b0c8 <HAL_GetTick>
 800ceac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d101      	bne.n	800ceb8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e063      	b.n	800cf80 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10b      	bne.n	800cedc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7f4 ff17 	bl	8001d00 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800ced2:	f241 3188 	movw	r1, #5000	; 0x1388
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 f858 	bl	800cf8c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	021a      	lsls	r2, r3, #8
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	430a      	orrs	r2, r1
 800cef4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2200      	movs	r2, #0
 800cf00:	2120      	movs	r1, #32
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 f850 	bl	800cfa8 <QSPI_WaitFlagStateUntilTimeout>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800cf0c:	7afb      	ldrb	r3, [r7, #11]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d131      	bne.n	800cf76 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf1c:	f023 0310 	bic.w	r3, r3, #16
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	6852      	ldr	r2, [r2, #4]
 800cf24:	0611      	lsls	r1, r2, #24
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	68d2      	ldr	r2, [r2, #12]
 800cf2a:	4311      	orrs	r1, r2
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	6812      	ldr	r2, [r2, #0]
 800cf30:	430b      	orrs	r3, r1
 800cf32:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	685a      	ldr	r2, [r3, #4]
 800cf3a:	4b13      	ldr	r3, [pc, #76]	; (800cf88 <HAL_QSPI_Init+0xe8>)
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	6912      	ldr	r2, [r2, #16]
 800cf42:	0411      	lsls	r1, r2, #16
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	6952      	ldr	r2, [r2, #20]
 800cf48:	4311      	orrs	r1, r2
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	6992      	ldr	r2, [r2, #24]
 800cf4e:	4311      	orrs	r1, r2
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	6812      	ldr	r2, [r2, #0]
 800cf54:	430b      	orrs	r3, r1
 800cf56:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f042 0201 	orr.w	r2, r2, #1
 800cf66:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800cf7e:	7afb      	ldrb	r3, [r7, #11]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	ffe0f8fe 	.word	0xffe0f8fe

0800cf8c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	683a      	ldr	r2, [r7, #0]
 800cf9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	603b      	str	r3, [r7, #0]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cfb8:	e01a      	b.n	800cff0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc0:	d016      	beq.n	800cff0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfc2:	f7fe f881 	bl	800b0c8 <HAL_GetTick>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	69ba      	ldr	r2, [r7, #24]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d302      	bcc.n	800cfd8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10b      	bne.n	800cff0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2204      	movs	r2, #4
 800cfdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfe4:	f043 0201 	orr.w	r2, r3, #1
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	e00e      	b.n	800d00e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	689a      	ldr	r2, [r3, #8]
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	4013      	ands	r3, r2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	bf14      	ite	ne
 800cffe:	2301      	movne	r3, #1
 800d000:	2300      	moveq	r3, #0
 800d002:	b2db      	uxtb	r3, r3
 800d004:	461a      	mov	r2, r3
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d1d6      	bne.n	800cfba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
	...

0800d018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b088      	sub	sp, #32
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d101      	bne.n	800d02a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d026:	2301      	movs	r3, #1
 800d028:	e3d4      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d02a:	4ba1      	ldr	r3, [pc, #644]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	f003 030c 	and.w	r3, r3, #12
 800d032:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d034:	4b9e      	ldr	r3, [pc, #632]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	f003 0303 	and.w	r3, r3, #3
 800d03c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 0310 	and.w	r3, r3, #16
 800d046:	2b00      	cmp	r3, #0
 800d048:	f000 80e4 	beq.w	800d214 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d007      	beq.n	800d062 <HAL_RCC_OscConfig+0x4a>
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	2b0c      	cmp	r3, #12
 800d056:	f040 808b 	bne.w	800d170 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	f040 8087 	bne.w	800d170 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d062:	4b93      	ldr	r3, [pc, #588]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f003 0302 	and.w	r3, r3, #2
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d005      	beq.n	800d07a <HAL_RCC_OscConfig+0x62>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	699b      	ldr	r3, [r3, #24]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e3ac      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a1a      	ldr	r2, [r3, #32]
 800d07e:	4b8c      	ldr	r3, [pc, #560]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f003 0308 	and.w	r3, r3, #8
 800d086:	2b00      	cmp	r3, #0
 800d088:	d004      	beq.n	800d094 <HAL_RCC_OscConfig+0x7c>
 800d08a:	4b89      	ldr	r3, [pc, #548]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d092:	e005      	b.n	800d0a0 <HAL_RCC_OscConfig+0x88>
 800d094:	4b86      	ldr	r3, [pc, #536]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d09a:	091b      	lsrs	r3, r3, #4
 800d09c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d223      	bcs.n	800d0ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6a1b      	ldr	r3, [r3, #32]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f000 fd73 	bl	800db94 <RCC_SetFlashLatencyFromMSIRange>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e38d      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d0b8:	4b7d      	ldr	r3, [pc, #500]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a7c      	ldr	r2, [pc, #496]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d0be:	f043 0308 	orr.w	r3, r3, #8
 800d0c2:	6013      	str	r3, [r2, #0]
 800d0c4:	4b7a      	ldr	r3, [pc, #488]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6a1b      	ldr	r3, [r3, #32]
 800d0d0:	4977      	ldr	r1, [pc, #476]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d0d6:	4b76      	ldr	r3, [pc, #472]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	69db      	ldr	r3, [r3, #28]
 800d0e2:	021b      	lsls	r3, r3, #8
 800d0e4:	4972      	ldr	r1, [pc, #456]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	604b      	str	r3, [r1, #4]
 800d0ea:	e025      	b.n	800d138 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d0ec:	4b70      	ldr	r3, [pc, #448]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a6f      	ldr	r2, [pc, #444]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d0f2:	f043 0308 	orr.w	r3, r3, #8
 800d0f6:	6013      	str	r3, [r2, #0]
 800d0f8:	4b6d      	ldr	r3, [pc, #436]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6a1b      	ldr	r3, [r3, #32]
 800d104:	496a      	ldr	r1, [pc, #424]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d106:	4313      	orrs	r3, r2
 800d108:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d10a:	4b69      	ldr	r3, [pc, #420]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	69db      	ldr	r3, [r3, #28]
 800d116:	021b      	lsls	r3, r3, #8
 800d118:	4965      	ldr	r1, [pc, #404]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d11a:	4313      	orrs	r3, r2
 800d11c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d109      	bne.n	800d138 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a1b      	ldr	r3, [r3, #32]
 800d128:	4618      	mov	r0, r3
 800d12a:	f000 fd33 	bl	800db94 <RCC_SetFlashLatencyFromMSIRange>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800d134:	2301      	movs	r3, #1
 800d136:	e34d      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d138:	f000 fc36 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800d13c:	4602      	mov	r2, r0
 800d13e:	4b5c      	ldr	r3, [pc, #368]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	091b      	lsrs	r3, r3, #4
 800d144:	f003 030f 	and.w	r3, r3, #15
 800d148:	495a      	ldr	r1, [pc, #360]	; (800d2b4 <HAL_RCC_OscConfig+0x29c>)
 800d14a:	5ccb      	ldrb	r3, [r1, r3]
 800d14c:	f003 031f 	and.w	r3, r3, #31
 800d150:	fa22 f303 	lsr.w	r3, r2, r3
 800d154:	4a58      	ldr	r2, [pc, #352]	; (800d2b8 <HAL_RCC_OscConfig+0x2a0>)
 800d156:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800d158:	4b58      	ldr	r3, [pc, #352]	; (800d2bc <HAL_RCC_OscConfig+0x2a4>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7f4 ff97 	bl	8002090 <HAL_InitTick>
 800d162:	4603      	mov	r3, r0
 800d164:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800d166:	7bfb      	ldrb	r3, [r7, #15]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d052      	beq.n	800d212 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800d16c:	7bfb      	ldrb	r3, [r7, #15]
 800d16e:	e331      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	699b      	ldr	r3, [r3, #24]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d032      	beq.n	800d1de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d178:	4b4d      	ldr	r3, [pc, #308]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a4c      	ldr	r2, [pc, #304]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d17e:	f043 0301 	orr.w	r3, r3, #1
 800d182:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d184:	f7fd ffa0 	bl	800b0c8 <HAL_GetTick>
 800d188:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d18a:	e008      	b.n	800d19e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d18c:	f7fd ff9c 	bl	800b0c8 <HAL_GetTick>
 800d190:	4602      	mov	r2, r0
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	1ad3      	subs	r3, r2, r3
 800d196:	2b02      	cmp	r3, #2
 800d198:	d901      	bls.n	800d19e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800d19a:	2303      	movs	r3, #3
 800d19c:	e31a      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d19e:	4b44      	ldr	r3, [pc, #272]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f003 0302 	and.w	r3, r3, #2
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d0f0      	beq.n	800d18c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d1aa:	4b41      	ldr	r3, [pc, #260]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a40      	ldr	r2, [pc, #256]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d1b0:	f043 0308 	orr.w	r3, r3, #8
 800d1b4:	6013      	str	r3, [r2, #0]
 800d1b6:	4b3e      	ldr	r3, [pc, #248]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6a1b      	ldr	r3, [r3, #32]
 800d1c2:	493b      	ldr	r1, [pc, #236]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d1c8:	4b39      	ldr	r3, [pc, #228]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	69db      	ldr	r3, [r3, #28]
 800d1d4:	021b      	lsls	r3, r3, #8
 800d1d6:	4936      	ldr	r1, [pc, #216]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	604b      	str	r3, [r1, #4]
 800d1dc:	e01a      	b.n	800d214 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d1de:	4b34      	ldr	r3, [pc, #208]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a33      	ldr	r2, [pc, #204]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d1e4:	f023 0301 	bic.w	r3, r3, #1
 800d1e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d1ea:	f7fd ff6d 	bl	800b0c8 <HAL_GetTick>
 800d1ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d1f0:	e008      	b.n	800d204 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d1f2:	f7fd ff69 	bl	800b0c8 <HAL_GetTick>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d901      	bls.n	800d204 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800d200:	2303      	movs	r3, #3
 800d202:	e2e7      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d204:	4b2a      	ldr	r3, [pc, #168]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f003 0302 	and.w	r3, r3, #2
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1f0      	bne.n	800d1f2 <HAL_RCC_OscConfig+0x1da>
 800d210:	e000      	b.n	800d214 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d212:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 0301 	and.w	r3, r3, #1
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d074      	beq.n	800d30a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	2b08      	cmp	r3, #8
 800d224:	d005      	beq.n	800d232 <HAL_RCC_OscConfig+0x21a>
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	2b0c      	cmp	r3, #12
 800d22a:	d10e      	bne.n	800d24a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	2b03      	cmp	r3, #3
 800d230:	d10b      	bne.n	800d24a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d232:	4b1f      	ldr	r3, [pc, #124]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d064      	beq.n	800d308 <HAL_RCC_OscConfig+0x2f0>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d160      	bne.n	800d308 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800d246:	2301      	movs	r3, #1
 800d248:	e2c4      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d252:	d106      	bne.n	800d262 <HAL_RCC_OscConfig+0x24a>
 800d254:	4b16      	ldr	r3, [pc, #88]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a15      	ldr	r2, [pc, #84]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d25a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d25e:	6013      	str	r3, [r2, #0]
 800d260:	e01d      	b.n	800d29e <HAL_RCC_OscConfig+0x286>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d26a:	d10c      	bne.n	800d286 <HAL_RCC_OscConfig+0x26e>
 800d26c:	4b10      	ldr	r3, [pc, #64]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a0f      	ldr	r2, [pc, #60]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d272:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d276:	6013      	str	r3, [r2, #0]
 800d278:	4b0d      	ldr	r3, [pc, #52]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a0c      	ldr	r2, [pc, #48]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d27e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d282:	6013      	str	r3, [r2, #0]
 800d284:	e00b      	b.n	800d29e <HAL_RCC_OscConfig+0x286>
 800d286:	4b0a      	ldr	r3, [pc, #40]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a09      	ldr	r2, [pc, #36]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d28c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d290:	6013      	str	r3, [r2, #0]
 800d292:	4b07      	ldr	r3, [pc, #28]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a06      	ldr	r2, [pc, #24]	; (800d2b0 <HAL_RCC_OscConfig+0x298>)
 800d298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d29c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d01c      	beq.n	800d2e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2a6:	f7fd ff0f 	bl	800b0c8 <HAL_GetTick>
 800d2aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d2ac:	e011      	b.n	800d2d2 <HAL_RCC_OscConfig+0x2ba>
 800d2ae:	bf00      	nop
 800d2b0:	40021000 	.word	0x40021000
 800d2b4:	08015694 	.word	0x08015694
 800d2b8:	20000088 	.word	0x20000088
 800d2bc:	20000588 	.word	0x20000588
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2c0:	f7fd ff02 	bl	800b0c8 <HAL_GetTick>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	2b64      	cmp	r3, #100	; 0x64
 800d2cc:	d901      	bls.n	800d2d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800d2ce:	2303      	movs	r3, #3
 800d2d0:	e280      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d2d2:	4baf      	ldr	r3, [pc, #700]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d0f0      	beq.n	800d2c0 <HAL_RCC_OscConfig+0x2a8>
 800d2de:	e014      	b.n	800d30a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2e0:	f7fd fef2 	bl	800b0c8 <HAL_GetTick>
 800d2e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d2e6:	e008      	b.n	800d2fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2e8:	f7fd feee 	bl	800b0c8 <HAL_GetTick>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	2b64      	cmp	r3, #100	; 0x64
 800d2f4:	d901      	bls.n	800d2fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d2f6:	2303      	movs	r3, #3
 800d2f8:	e26c      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d2fa:	4ba5      	ldr	r3, [pc, #660]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1f0      	bne.n	800d2e8 <HAL_RCC_OscConfig+0x2d0>
 800d306:	e000      	b.n	800d30a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f003 0302 	and.w	r3, r3, #2
 800d312:	2b00      	cmp	r3, #0
 800d314:	d060      	beq.n	800d3d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	2b04      	cmp	r3, #4
 800d31a:	d005      	beq.n	800d328 <HAL_RCC_OscConfig+0x310>
 800d31c:	69bb      	ldr	r3, [r7, #24]
 800d31e:	2b0c      	cmp	r3, #12
 800d320:	d119      	bne.n	800d356 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	2b02      	cmp	r3, #2
 800d326:	d116      	bne.n	800d356 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d328:	4b99      	ldr	r3, [pc, #612]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d330:	2b00      	cmp	r3, #0
 800d332:	d005      	beq.n	800d340 <HAL_RCC_OscConfig+0x328>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d101      	bne.n	800d340 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	e249      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d340:	4b93      	ldr	r3, [pc, #588]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	691b      	ldr	r3, [r3, #16]
 800d34c:	061b      	lsls	r3, r3, #24
 800d34e:	4990      	ldr	r1, [pc, #576]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d350:	4313      	orrs	r3, r2
 800d352:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d354:	e040      	b.n	800d3d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d023      	beq.n	800d3a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d35e:	4b8c      	ldr	r3, [pc, #560]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4a8b      	ldr	r2, [pc, #556]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d36a:	f7fd fead 	bl	800b0c8 <HAL_GetTick>
 800d36e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d370:	e008      	b.n	800d384 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d372:	f7fd fea9 	bl	800b0c8 <HAL_GetTick>
 800d376:	4602      	mov	r2, r0
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d901      	bls.n	800d384 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	e227      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d384:	4b82      	ldr	r3, [pc, #520]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d0f0      	beq.n	800d372 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d390:	4b7f      	ldr	r3, [pc, #508]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	691b      	ldr	r3, [r3, #16]
 800d39c:	061b      	lsls	r3, r3, #24
 800d39e:	497c      	ldr	r1, [pc, #496]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	604b      	str	r3, [r1, #4]
 800d3a4:	e018      	b.n	800d3d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d3a6:	4b7a      	ldr	r3, [pc, #488]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a79      	ldr	r2, [pc, #484]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d3ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3b2:	f7fd fe89 	bl	800b0c8 <HAL_GetTick>
 800d3b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d3b8:	e008      	b.n	800d3cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3ba:	f7fd fe85 	bl	800b0c8 <HAL_GetTick>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d901      	bls.n	800d3cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800d3c8:	2303      	movs	r3, #3
 800d3ca:	e203      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d3cc:	4b70      	ldr	r3, [pc, #448]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d1f0      	bne.n	800d3ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f003 0308 	and.w	r3, r3, #8
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d03c      	beq.n	800d45e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	695b      	ldr	r3, [r3, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d01c      	beq.n	800d426 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d3ec:	4b68      	ldr	r3, [pc, #416]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d3ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3f2:	4a67      	ldr	r2, [pc, #412]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d3f4:	f043 0301 	orr.w	r3, r3, #1
 800d3f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3fc:	f7fd fe64 	bl	800b0c8 <HAL_GetTick>
 800d400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d402:	e008      	b.n	800d416 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d404:	f7fd fe60 	bl	800b0c8 <HAL_GetTick>
 800d408:	4602      	mov	r2, r0
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	2b02      	cmp	r3, #2
 800d410:	d901      	bls.n	800d416 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800d412:	2303      	movs	r3, #3
 800d414:	e1de      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d416:	4b5e      	ldr	r3, [pc, #376]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d41c:	f003 0302 	and.w	r3, r3, #2
 800d420:	2b00      	cmp	r3, #0
 800d422:	d0ef      	beq.n	800d404 <HAL_RCC_OscConfig+0x3ec>
 800d424:	e01b      	b.n	800d45e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d426:	4b5a      	ldr	r3, [pc, #360]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d42c:	4a58      	ldr	r2, [pc, #352]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d42e:	f023 0301 	bic.w	r3, r3, #1
 800d432:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d436:	f7fd fe47 	bl	800b0c8 <HAL_GetTick>
 800d43a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d43c:	e008      	b.n	800d450 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d43e:	f7fd fe43 	bl	800b0c8 <HAL_GetTick>
 800d442:	4602      	mov	r2, r0
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d901      	bls.n	800d450 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800d44c:	2303      	movs	r3, #3
 800d44e:	e1c1      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d450:	4b4f      	ldr	r3, [pc, #316]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d456:	f003 0302 	and.w	r3, r3, #2
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1ef      	bne.n	800d43e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f003 0304 	and.w	r3, r3, #4
 800d466:	2b00      	cmp	r3, #0
 800d468:	f000 80a6 	beq.w	800d5b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d46c:	2300      	movs	r3, #0
 800d46e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800d470:	4b47      	ldr	r3, [pc, #284]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10d      	bne.n	800d498 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d47c:	4b44      	ldr	r3, [pc, #272]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d480:	4a43      	ldr	r2, [pc, #268]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d486:	6593      	str	r3, [r2, #88]	; 0x58
 800d488:	4b41      	ldr	r3, [pc, #260]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d48c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d490:	60bb      	str	r3, [r7, #8]
 800d492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d494:	2301      	movs	r3, #1
 800d496:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d498:	4b3e      	ldr	r3, [pc, #248]	; (800d594 <HAL_RCC_OscConfig+0x57c>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d118      	bne.n	800d4d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d4a4:	4b3b      	ldr	r3, [pc, #236]	; (800d594 <HAL_RCC_OscConfig+0x57c>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4a3a      	ldr	r2, [pc, #232]	; (800d594 <HAL_RCC_OscConfig+0x57c>)
 800d4aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d4b0:	f7fd fe0a 	bl	800b0c8 <HAL_GetTick>
 800d4b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d4b6:	e008      	b.n	800d4ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d4b8:	f7fd fe06 	bl	800b0c8 <HAL_GetTick>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d901      	bls.n	800d4ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	e184      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d4ca:	4b32      	ldr	r3, [pc, #200]	; (800d594 <HAL_RCC_OscConfig+0x57c>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d0f0      	beq.n	800d4b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d108      	bne.n	800d4f0 <HAL_RCC_OscConfig+0x4d8>
 800d4de:	4b2c      	ldr	r3, [pc, #176]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4e4:	4a2a      	ldr	r2, [pc, #168]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d4e6:	f043 0301 	orr.w	r3, r3, #1
 800d4ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d4ee:	e024      	b.n	800d53a <HAL_RCC_OscConfig+0x522>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	2b05      	cmp	r3, #5
 800d4f6:	d110      	bne.n	800d51a <HAL_RCC_OscConfig+0x502>
 800d4f8:	4b25      	ldr	r3, [pc, #148]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4fe:	4a24      	ldr	r2, [pc, #144]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d500:	f043 0304 	orr.w	r3, r3, #4
 800d504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d508:	4b21      	ldr	r3, [pc, #132]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d50e:	4a20      	ldr	r2, [pc, #128]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d510:	f043 0301 	orr.w	r3, r3, #1
 800d514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d518:	e00f      	b.n	800d53a <HAL_RCC_OscConfig+0x522>
 800d51a:	4b1d      	ldr	r3, [pc, #116]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d520:	4a1b      	ldr	r2, [pc, #108]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d522:	f023 0301 	bic.w	r3, r3, #1
 800d526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d52a:	4b19      	ldr	r3, [pc, #100]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d530:	4a17      	ldr	r2, [pc, #92]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d532:	f023 0304 	bic.w	r3, r3, #4
 800d536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d016      	beq.n	800d570 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d542:	f7fd fdc1 	bl	800b0c8 <HAL_GetTick>
 800d546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d548:	e00a      	b.n	800d560 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d54a:	f7fd fdbd 	bl	800b0c8 <HAL_GetTick>
 800d54e:	4602      	mov	r2, r0
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	f241 3288 	movw	r2, #5000	; 0x1388
 800d558:	4293      	cmp	r3, r2
 800d55a:	d901      	bls.n	800d560 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800d55c:	2303      	movs	r3, #3
 800d55e:	e139      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d560:	4b0b      	ldr	r3, [pc, #44]	; (800d590 <HAL_RCC_OscConfig+0x578>)
 800d562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d566:	f003 0302 	and.w	r3, r3, #2
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d0ed      	beq.n	800d54a <HAL_RCC_OscConfig+0x532>
 800d56e:	e01a      	b.n	800d5a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d570:	f7fd fdaa 	bl	800b0c8 <HAL_GetTick>
 800d574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d576:	e00f      	b.n	800d598 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d578:	f7fd fda6 	bl	800b0c8 <HAL_GetTick>
 800d57c:	4602      	mov	r2, r0
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	1ad3      	subs	r3, r2, r3
 800d582:	f241 3288 	movw	r2, #5000	; 0x1388
 800d586:	4293      	cmp	r3, r2
 800d588:	d906      	bls.n	800d598 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800d58a:	2303      	movs	r3, #3
 800d58c:	e122      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
 800d58e:	bf00      	nop
 800d590:	40021000 	.word	0x40021000
 800d594:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d598:	4b90      	ldr	r3, [pc, #576]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d59e:	f003 0302 	and.w	r3, r3, #2
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1e8      	bne.n	800d578 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d5a6:	7ffb      	ldrb	r3, [r7, #31]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d105      	bne.n	800d5b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d5ac:	4b8b      	ldr	r3, [pc, #556]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5b0:	4a8a      	ldr	r2, [pc, #552]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d5b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f000 8108 	beq.w	800d7d2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	f040 80d0 	bne.w	800d76c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800d5cc:	4b83      	ldr	r3, [pc, #524]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	f003 0203 	and.w	r2, r3, #3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d130      	bne.n	800d642 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d127      	bne.n	800d642 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d11f      	bne.n	800d642 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d60c:	2a07      	cmp	r2, #7
 800d60e:	bf14      	ite	ne
 800d610:	2201      	movne	r2, #1
 800d612:	2200      	moveq	r2, #0
 800d614:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d616:	4293      	cmp	r3, r2
 800d618:	d113      	bne.n	800d642 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d624:	085b      	lsrs	r3, r3, #1
 800d626:	3b01      	subs	r3, #1
 800d628:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d109      	bne.n	800d642 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d638:	085b      	lsrs	r3, r3, #1
 800d63a:	3b01      	subs	r3, #1
 800d63c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d63e:	429a      	cmp	r2, r3
 800d640:	d06e      	beq.n	800d720 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	2b0c      	cmp	r3, #12
 800d646:	d069      	beq.n	800d71c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d648:	4b64      	ldr	r3, [pc, #400]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d650:	2b00      	cmp	r3, #0
 800d652:	d105      	bne.n	800d660 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800d654:	4b61      	ldr	r3, [pc, #388]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d001      	beq.n	800d664 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	e0b7      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d664:	4b5d      	ldr	r3, [pc, #372]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a5c      	ldr	r2, [pc, #368]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d66a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d66e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d670:	f7fd fd2a 	bl	800b0c8 <HAL_GetTick>
 800d674:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d676:	e008      	b.n	800d68a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d678:	f7fd fd26 	bl	800b0c8 <HAL_GetTick>
 800d67c:	4602      	mov	r2, r0
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	2b02      	cmp	r3, #2
 800d684:	d901      	bls.n	800d68a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800d686:	2303      	movs	r3, #3
 800d688:	e0a4      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d68a:	4b54      	ldr	r3, [pc, #336]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1f0      	bne.n	800d678 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d696:	4b51      	ldr	r3, [pc, #324]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d698:	68da      	ldr	r2, [r3, #12]
 800d69a:	4b51      	ldr	r3, [pc, #324]	; (800d7e0 <HAL_RCC_OscConfig+0x7c8>)
 800d69c:	4013      	ands	r3, r2
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d6a6:	3a01      	subs	r2, #1
 800d6a8:	0112      	lsls	r2, r2, #4
 800d6aa:	4311      	orrs	r1, r2
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d6b0:	0212      	lsls	r2, r2, #8
 800d6b2:	4311      	orrs	r1, r2
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d6b8:	0852      	lsrs	r2, r2, #1
 800d6ba:	3a01      	subs	r2, #1
 800d6bc:	0552      	lsls	r2, r2, #21
 800d6be:	4311      	orrs	r1, r2
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d6c4:	0852      	lsrs	r2, r2, #1
 800d6c6:	3a01      	subs	r2, #1
 800d6c8:	0652      	lsls	r2, r2, #25
 800d6ca:	4311      	orrs	r1, r2
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d6d0:	0912      	lsrs	r2, r2, #4
 800d6d2:	0452      	lsls	r2, r2, #17
 800d6d4:	430a      	orrs	r2, r1
 800d6d6:	4941      	ldr	r1, [pc, #260]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d6dc:	4b3f      	ldr	r3, [pc, #252]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a3e      	ldr	r2, [pc, #248]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d6e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d6e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d6e8:	4b3c      	ldr	r3, [pc, #240]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	4a3b      	ldr	r2, [pc, #236]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d6ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d6f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d6f4:	f7fd fce8 	bl	800b0c8 <HAL_GetTick>
 800d6f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d6fa:	e008      	b.n	800d70e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d6fc:	f7fd fce4 	bl	800b0c8 <HAL_GetTick>
 800d700:	4602      	mov	r2, r0
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	1ad3      	subs	r3, r2, r3
 800d706:	2b02      	cmp	r3, #2
 800d708:	d901      	bls.n	800d70e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800d70a:	2303      	movs	r3, #3
 800d70c:	e062      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d70e:	4b33      	ldr	r3, [pc, #204]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d716:	2b00      	cmp	r3, #0
 800d718:	d0f0      	beq.n	800d6fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d71a:	e05a      	b.n	800d7d2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d71c:	2301      	movs	r3, #1
 800d71e:	e059      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d720:	4b2e      	ldr	r3, [pc, #184]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d152      	bne.n	800d7d2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d72c:	4b2b      	ldr	r3, [pc, #172]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a2a      	ldr	r2, [pc, #168]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d736:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d738:	4b28      	ldr	r3, [pc, #160]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	4a27      	ldr	r2, [pc, #156]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d73e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d742:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d744:	f7fd fcc0 	bl	800b0c8 <HAL_GetTick>
 800d748:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d74a:	e008      	b.n	800d75e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d74c:	f7fd fcbc 	bl	800b0c8 <HAL_GetTick>
 800d750:	4602      	mov	r2, r0
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	1ad3      	subs	r3, r2, r3
 800d756:	2b02      	cmp	r3, #2
 800d758:	d901      	bls.n	800d75e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800d75a:	2303      	movs	r3, #3
 800d75c:	e03a      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d75e:	4b1f      	ldr	r3, [pc, #124]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d766:	2b00      	cmp	r3, #0
 800d768:	d0f0      	beq.n	800d74c <HAL_RCC_OscConfig+0x734>
 800d76a:	e032      	b.n	800d7d2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	2b0c      	cmp	r3, #12
 800d770:	d02d      	beq.n	800d7ce <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d772:	4b1a      	ldr	r3, [pc, #104]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a19      	ldr	r2, [pc, #100]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d77c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800d77e:	4b17      	ldr	r3, [pc, #92]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800d786:	2b00      	cmp	r3, #0
 800d788:	d105      	bne.n	800d796 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d78a:	4b14      	ldr	r3, [pc, #80]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	4a13      	ldr	r2, [pc, #76]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d790:	f023 0303 	bic.w	r3, r3, #3
 800d794:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800d796:	4b11      	ldr	r3, [pc, #68]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	4a10      	ldr	r2, [pc, #64]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d79c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d7a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7a6:	f7fd fc8f 	bl	800b0c8 <HAL_GetTick>
 800d7aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d7ac:	e008      	b.n	800d7c0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d7ae:	f7fd fc8b 	bl	800b0c8 <HAL_GetTick>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d901      	bls.n	800d7c0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800d7bc:	2303      	movs	r3, #3
 800d7be:	e009      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d7c0:	4b06      	ldr	r3, [pc, #24]	; (800d7dc <HAL_RCC_OscConfig+0x7c4>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1f0      	bne.n	800d7ae <HAL_RCC_OscConfig+0x796>
 800d7cc:	e001      	b.n	800d7d2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e000      	b.n	800d7d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3720      	adds	r7, #32
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	40021000 	.word	0x40021000
 800d7e0:	f99d808c 	.word	0xf99d808c

0800d7e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d101      	bne.n	800d7f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	e0c8      	b.n	800d98a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d7f8:	4b66      	ldr	r3, [pc, #408]	; (800d994 <HAL_RCC_ClockConfig+0x1b0>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f003 0307 	and.w	r3, r3, #7
 800d800:	683a      	ldr	r2, [r7, #0]
 800d802:	429a      	cmp	r2, r3
 800d804:	d910      	bls.n	800d828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d806:	4b63      	ldr	r3, [pc, #396]	; (800d994 <HAL_RCC_ClockConfig+0x1b0>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f023 0207 	bic.w	r2, r3, #7
 800d80e:	4961      	ldr	r1, [pc, #388]	; (800d994 <HAL_RCC_ClockConfig+0x1b0>)
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	4313      	orrs	r3, r2
 800d814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d816:	4b5f      	ldr	r3, [pc, #380]	; (800d994 <HAL_RCC_ClockConfig+0x1b0>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f003 0307 	and.w	r3, r3, #7
 800d81e:	683a      	ldr	r2, [r7, #0]
 800d820:	429a      	cmp	r2, r3
 800d822:	d001      	beq.n	800d828 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d824:	2301      	movs	r3, #1
 800d826:	e0b0      	b.n	800d98a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f003 0301 	and.w	r3, r3, #1
 800d830:	2b00      	cmp	r3, #0
 800d832:	d04c      	beq.n	800d8ce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	2b03      	cmp	r3, #3
 800d83a:	d107      	bne.n	800d84c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d83c:	4b56      	ldr	r3, [pc, #344]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d844:	2b00      	cmp	r3, #0
 800d846:	d121      	bne.n	800d88c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800d848:	2301      	movs	r3, #1
 800d84a:	e09e      	b.n	800d98a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	2b02      	cmp	r3, #2
 800d852:	d107      	bne.n	800d864 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d854:	4b50      	ldr	r3, [pc, #320]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d115      	bne.n	800d88c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800d860:	2301      	movs	r3, #1
 800d862:	e092      	b.n	800d98a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d107      	bne.n	800d87c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d86c:	4b4a      	ldr	r3, [pc, #296]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f003 0302 	and.w	r3, r3, #2
 800d874:	2b00      	cmp	r3, #0
 800d876:	d109      	bne.n	800d88c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800d878:	2301      	movs	r3, #1
 800d87a:	e086      	b.n	800d98a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d87c:	4b46      	ldr	r3, [pc, #280]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d884:	2b00      	cmp	r3, #0
 800d886:	d101      	bne.n	800d88c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800d888:	2301      	movs	r3, #1
 800d88a:	e07e      	b.n	800d98a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d88c:	4b42      	ldr	r3, [pc, #264]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	f023 0203 	bic.w	r2, r3, #3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	493f      	ldr	r1, [pc, #252]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d89a:	4313      	orrs	r3, r2
 800d89c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d89e:	f7fd fc13 	bl	800b0c8 <HAL_GetTick>
 800d8a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d8a4:	e00a      	b.n	800d8bc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d8a6:	f7fd fc0f 	bl	800b0c8 <HAL_GetTick>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d901      	bls.n	800d8bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	e066      	b.n	800d98a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d8bc:	4b36      	ldr	r3, [pc, #216]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	f003 020c 	and.w	r2, r3, #12
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d1eb      	bne.n	800d8a6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f003 0302 	and.w	r3, r3, #2
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d008      	beq.n	800d8ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d8da:	4b2f      	ldr	r3, [pc, #188]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	492c      	ldr	r1, [pc, #176]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d8ec:	4b29      	ldr	r3, [pc, #164]	; (800d994 <HAL_RCC_ClockConfig+0x1b0>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f003 0307 	and.w	r3, r3, #7
 800d8f4:	683a      	ldr	r2, [r7, #0]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d210      	bcs.n	800d91c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d8fa:	4b26      	ldr	r3, [pc, #152]	; (800d994 <HAL_RCC_ClockConfig+0x1b0>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f023 0207 	bic.w	r2, r3, #7
 800d902:	4924      	ldr	r1, [pc, #144]	; (800d994 <HAL_RCC_ClockConfig+0x1b0>)
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	4313      	orrs	r3, r2
 800d908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d90a:	4b22      	ldr	r3, [pc, #136]	; (800d994 <HAL_RCC_ClockConfig+0x1b0>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f003 0307 	and.w	r3, r3, #7
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	429a      	cmp	r2, r3
 800d916:	d001      	beq.n	800d91c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800d918:	2301      	movs	r3, #1
 800d91a:	e036      	b.n	800d98a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f003 0304 	and.w	r3, r3, #4
 800d924:	2b00      	cmp	r3, #0
 800d926:	d008      	beq.n	800d93a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d928:	4b1b      	ldr	r3, [pc, #108]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	4918      	ldr	r1, [pc, #96]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d936:	4313      	orrs	r3, r2
 800d938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f003 0308 	and.w	r3, r3, #8
 800d942:	2b00      	cmp	r3, #0
 800d944:	d009      	beq.n	800d95a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d946:	4b14      	ldr	r3, [pc, #80]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	691b      	ldr	r3, [r3, #16]
 800d952:	00db      	lsls	r3, r3, #3
 800d954:	4910      	ldr	r1, [pc, #64]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d956:	4313      	orrs	r3, r2
 800d958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d95a:	f000 f825 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800d95e:	4602      	mov	r2, r0
 800d960:	4b0d      	ldr	r3, [pc, #52]	; (800d998 <HAL_RCC_ClockConfig+0x1b4>)
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	091b      	lsrs	r3, r3, #4
 800d966:	f003 030f 	and.w	r3, r3, #15
 800d96a:	490c      	ldr	r1, [pc, #48]	; (800d99c <HAL_RCC_ClockConfig+0x1b8>)
 800d96c:	5ccb      	ldrb	r3, [r1, r3]
 800d96e:	f003 031f 	and.w	r3, r3, #31
 800d972:	fa22 f303 	lsr.w	r3, r2, r3
 800d976:	4a0a      	ldr	r2, [pc, #40]	; (800d9a0 <HAL_RCC_ClockConfig+0x1bc>)
 800d978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d97a:	4b0a      	ldr	r3, [pc, #40]	; (800d9a4 <HAL_RCC_ClockConfig+0x1c0>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4618      	mov	r0, r3
 800d980:	f7f4 fb86 	bl	8002090 <HAL_InitTick>
 800d984:	4603      	mov	r3, r0
 800d986:	72fb      	strb	r3, [r7, #11]

  return status;
 800d988:	7afb      	ldrb	r3, [r7, #11]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	40022000 	.word	0x40022000
 800d998:	40021000 	.word	0x40021000
 800d99c:	08015694 	.word	0x08015694
 800d9a0:	20000088 	.word	0x20000088
 800d9a4:	20000588 	.word	0x20000588

0800d9a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b089      	sub	sp, #36	; 0x24
 800d9ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	61fb      	str	r3, [r7, #28]
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d9b6:	4b3e      	ldr	r3, [pc, #248]	; (800dab0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	f003 030c 	and.w	r3, r3, #12
 800d9be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d9c0:	4b3b      	ldr	r3, [pc, #236]	; (800dab0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	f003 0303 	and.w	r3, r3, #3
 800d9c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d005      	beq.n	800d9dc <HAL_RCC_GetSysClockFreq+0x34>
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	2b0c      	cmp	r3, #12
 800d9d4:	d121      	bne.n	800da1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d11e      	bne.n	800da1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d9dc:	4b34      	ldr	r3, [pc, #208]	; (800dab0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f003 0308 	and.w	r3, r3, #8
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d107      	bne.n	800d9f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d9e8:	4b31      	ldr	r3, [pc, #196]	; (800dab0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d9ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d9ee:	0a1b      	lsrs	r3, r3, #8
 800d9f0:	f003 030f 	and.w	r3, r3, #15
 800d9f4:	61fb      	str	r3, [r7, #28]
 800d9f6:	e005      	b.n	800da04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d9f8:	4b2d      	ldr	r3, [pc, #180]	; (800dab0 <HAL_RCC_GetSysClockFreq+0x108>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	091b      	lsrs	r3, r3, #4
 800d9fe:	f003 030f 	and.w	r3, r3, #15
 800da02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800da04:	4a2b      	ldr	r2, [pc, #172]	; (800dab4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d10d      	bne.n	800da30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800da18:	e00a      	b.n	800da30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	2b04      	cmp	r3, #4
 800da1e:	d102      	bne.n	800da26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800da20:	4b25      	ldr	r3, [pc, #148]	; (800dab8 <HAL_RCC_GetSysClockFreq+0x110>)
 800da22:	61bb      	str	r3, [r7, #24]
 800da24:	e004      	b.n	800da30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	2b08      	cmp	r3, #8
 800da2a:	d101      	bne.n	800da30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800da2c:	4b23      	ldr	r3, [pc, #140]	; (800dabc <HAL_RCC_GetSysClockFreq+0x114>)
 800da2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	2b0c      	cmp	r3, #12
 800da34:	d134      	bne.n	800daa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800da36:	4b1e      	ldr	r3, [pc, #120]	; (800dab0 <HAL_RCC_GetSysClockFreq+0x108>)
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	f003 0303 	and.w	r3, r3, #3
 800da3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	2b02      	cmp	r3, #2
 800da44:	d003      	beq.n	800da4e <HAL_RCC_GetSysClockFreq+0xa6>
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	2b03      	cmp	r3, #3
 800da4a:	d003      	beq.n	800da54 <HAL_RCC_GetSysClockFreq+0xac>
 800da4c:	e005      	b.n	800da5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800da4e:	4b1a      	ldr	r3, [pc, #104]	; (800dab8 <HAL_RCC_GetSysClockFreq+0x110>)
 800da50:	617b      	str	r3, [r7, #20]
      break;
 800da52:	e005      	b.n	800da60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800da54:	4b19      	ldr	r3, [pc, #100]	; (800dabc <HAL_RCC_GetSysClockFreq+0x114>)
 800da56:	617b      	str	r3, [r7, #20]
      break;
 800da58:	e002      	b.n	800da60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	617b      	str	r3, [r7, #20]
      break;
 800da5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800da60:	4b13      	ldr	r3, [pc, #76]	; (800dab0 <HAL_RCC_GetSysClockFreq+0x108>)
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	091b      	lsrs	r3, r3, #4
 800da66:	f003 0307 	and.w	r3, r3, #7
 800da6a:	3301      	adds	r3, #1
 800da6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800da6e:	4b10      	ldr	r3, [pc, #64]	; (800dab0 <HAL_RCC_GetSysClockFreq+0x108>)
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	0a1b      	lsrs	r3, r3, #8
 800da74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da78:	697a      	ldr	r2, [r7, #20]
 800da7a:	fb02 f203 	mul.w	r2, r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	fbb2 f3f3 	udiv	r3, r2, r3
 800da84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800da86:	4b0a      	ldr	r3, [pc, #40]	; (800dab0 <HAL_RCC_GetSysClockFreq+0x108>)
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	0e5b      	lsrs	r3, r3, #25
 800da8c:	f003 0303 	and.w	r3, r3, #3
 800da90:	3301      	adds	r3, #1
 800da92:	005b      	lsls	r3, r3, #1
 800da94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800daa0:	69bb      	ldr	r3, [r7, #24]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3724      	adds	r7, #36	; 0x24
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	40021000 	.word	0x40021000
 800dab4:	080156ac 	.word	0x080156ac
 800dab8:	00f42400 	.word	0x00f42400
 800dabc:	007a1200 	.word	0x007a1200

0800dac0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dac0:	b480      	push	{r7}
 800dac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dac4:	4b03      	ldr	r3, [pc, #12]	; (800dad4 <HAL_RCC_GetHCLKFreq+0x14>)
 800dac6:	681b      	ldr	r3, [r3, #0]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	20000088 	.word	0x20000088

0800dad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800dadc:	f7ff fff0 	bl	800dac0 <HAL_RCC_GetHCLKFreq>
 800dae0:	4602      	mov	r2, r0
 800dae2:	4b06      	ldr	r3, [pc, #24]	; (800dafc <HAL_RCC_GetPCLK1Freq+0x24>)
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	0a1b      	lsrs	r3, r3, #8
 800dae8:	f003 0307 	and.w	r3, r3, #7
 800daec:	4904      	ldr	r1, [pc, #16]	; (800db00 <HAL_RCC_GetPCLK1Freq+0x28>)
 800daee:	5ccb      	ldrb	r3, [r1, r3]
 800daf0:	f003 031f 	and.w	r3, r3, #31
 800daf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	40021000 	.word	0x40021000
 800db00:	080156a4 	.word	0x080156a4

0800db04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800db08:	f7ff ffda 	bl	800dac0 <HAL_RCC_GetHCLKFreq>
 800db0c:	4602      	mov	r2, r0
 800db0e:	4b06      	ldr	r3, [pc, #24]	; (800db28 <HAL_RCC_GetPCLK2Freq+0x24>)
 800db10:	689b      	ldr	r3, [r3, #8]
 800db12:	0adb      	lsrs	r3, r3, #11
 800db14:	f003 0307 	and.w	r3, r3, #7
 800db18:	4904      	ldr	r1, [pc, #16]	; (800db2c <HAL_RCC_GetPCLK2Freq+0x28>)
 800db1a:	5ccb      	ldrb	r3, [r1, r3]
 800db1c:	f003 031f 	and.w	r3, r3, #31
 800db20:	fa22 f303 	lsr.w	r3, r2, r3
}
 800db24:	4618      	mov	r0, r3
 800db26:	bd80      	pop	{r7, pc}
 800db28:	40021000 	.word	0x40021000
 800db2c:	080156a4 	.word	0x080156a4

0800db30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	220f      	movs	r2, #15
 800db3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800db40:	4b12      	ldr	r3, [pc, #72]	; (800db8c <HAL_RCC_GetClockConfig+0x5c>)
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	f003 0203 	and.w	r2, r3, #3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800db4c:	4b0f      	ldr	r3, [pc, #60]	; (800db8c <HAL_RCC_GetClockConfig+0x5c>)
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800db58:	4b0c      	ldr	r3, [pc, #48]	; (800db8c <HAL_RCC_GetClockConfig+0x5c>)
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <HAL_RCC_GetClockConfig+0x5c>)
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	08db      	lsrs	r3, r3, #3
 800db6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800db72:	4b07      	ldr	r3, [pc, #28]	; (800db90 <HAL_RCC_GetClockConfig+0x60>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f003 0207 	and.w	r2, r3, #7
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	601a      	str	r2, [r3, #0]
}
 800db7e:	bf00      	nop
 800db80:	370c      	adds	r7, #12
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr
 800db8a:	bf00      	nop
 800db8c:	40021000 	.word	0x40021000
 800db90:	40022000 	.word	0x40022000

0800db94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b086      	sub	sp, #24
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800db9c:	2300      	movs	r3, #0
 800db9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800dba0:	4b2a      	ldr	r3, [pc, #168]	; (800dc4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d003      	beq.n	800dbb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800dbac:	f7ff f904 	bl	800cdb8 <HAL_PWREx_GetVoltageRange>
 800dbb0:	6178      	str	r0, [r7, #20]
 800dbb2:	e014      	b.n	800dbde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800dbb4:	4b25      	ldr	r3, [pc, #148]	; (800dc4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dbb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbb8:	4a24      	ldr	r2, [pc, #144]	; (800dc4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dbba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbbe:	6593      	str	r3, [r2, #88]	; 0x58
 800dbc0:	4b22      	ldr	r3, [pc, #136]	; (800dc4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dbc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbc8:	60fb      	str	r3, [r7, #12]
 800dbca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800dbcc:	f7ff f8f4 	bl	800cdb8 <HAL_PWREx_GetVoltageRange>
 800dbd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800dbd2:	4b1e      	ldr	r3, [pc, #120]	; (800dc4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dbd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbd6:	4a1d      	ldr	r2, [pc, #116]	; (800dc4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800dbd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbe4:	d10b      	bne.n	800dbfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2b80      	cmp	r3, #128	; 0x80
 800dbea:	d919      	bls.n	800dc20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2ba0      	cmp	r3, #160	; 0xa0
 800dbf0:	d902      	bls.n	800dbf8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800dbf2:	2302      	movs	r3, #2
 800dbf4:	613b      	str	r3, [r7, #16]
 800dbf6:	e013      	b.n	800dc20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	613b      	str	r3, [r7, #16]
 800dbfc:	e010      	b.n	800dc20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2b80      	cmp	r3, #128	; 0x80
 800dc02:	d902      	bls.n	800dc0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800dc04:	2303      	movs	r3, #3
 800dc06:	613b      	str	r3, [r7, #16]
 800dc08:	e00a      	b.n	800dc20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b80      	cmp	r3, #128	; 0x80
 800dc0e:	d102      	bne.n	800dc16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800dc10:	2302      	movs	r3, #2
 800dc12:	613b      	str	r3, [r7, #16]
 800dc14:	e004      	b.n	800dc20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2b70      	cmp	r3, #112	; 0x70
 800dc1a:	d101      	bne.n	800dc20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800dc20:	4b0b      	ldr	r3, [pc, #44]	; (800dc50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f023 0207 	bic.w	r2, r3, #7
 800dc28:	4909      	ldr	r1, [pc, #36]	; (800dc50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800dc30:	4b07      	ldr	r3, [pc, #28]	; (800dc50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f003 0307 	and.w	r3, r3, #7
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d001      	beq.n	800dc42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e000      	b.n	800dc44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3718      	adds	r7, #24
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	40021000 	.word	0x40021000
 800dc50:	40022000 	.word	0x40022000

0800dc54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dc60:	2300      	movs	r3, #0
 800dc62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d041      	beq.n	800dcf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800dc78:	d02a      	beq.n	800dcd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800dc7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800dc7e:	d824      	bhi.n	800dcca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800dc80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dc84:	d008      	beq.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800dc86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dc8a:	d81e      	bhi.n	800dcca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00a      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800dc90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc94:	d010      	beq.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800dc96:	e018      	b.n	800dcca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800dc98:	4b86      	ldr	r3, [pc, #536]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	4a85      	ldr	r2, [pc, #532]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dca2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800dca4:	e015      	b.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	3304      	adds	r3, #4
 800dcaa:	2100      	movs	r1, #0
 800dcac:	4618      	mov	r0, r3
 800dcae:	f001 f835 	bl	800ed1c <RCCEx_PLLSAI1_Config>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800dcb6:	e00c      	b.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	3320      	adds	r3, #32
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f001 f920 	bl	800ef04 <RCCEx_PLLSAI2_Config>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800dcc8:	e003      	b.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	74fb      	strb	r3, [r7, #19]
      break;
 800dcce:	e000      	b.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800dcd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dcd2:	7cfb      	ldrb	r3, [r7, #19]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d10b      	bne.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dcd8:	4b76      	ldr	r3, [pc, #472]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dcda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dce6:	4973      	ldr	r1, [pc, #460]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dce8:	4313      	orrs	r3, r2
 800dcea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800dcee:	e001      	b.n	800dcf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcf0:	7cfb      	ldrb	r3, [r7, #19]
 800dcf2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d041      	beq.n	800dd84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dd08:	d02a      	beq.n	800dd60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800dd0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dd0e:	d824      	bhi.n	800dd5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800dd10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd14:	d008      	beq.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800dd16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd1a:	d81e      	bhi.n	800dd5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00a      	beq.n	800dd36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800dd20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dd24:	d010      	beq.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800dd26:	e018      	b.n	800dd5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800dd28:	4b62      	ldr	r3, [pc, #392]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dd2a:	68db      	ldr	r3, [r3, #12]
 800dd2c:	4a61      	ldr	r2, [pc, #388]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dd2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800dd34:	e015      	b.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	3304      	adds	r3, #4
 800dd3a:	2100      	movs	r1, #0
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f000 ffed 	bl	800ed1c <RCCEx_PLLSAI1_Config>
 800dd42:	4603      	mov	r3, r0
 800dd44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800dd46:	e00c      	b.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3320      	adds	r3, #32
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f001 f8d8 	bl	800ef04 <RCCEx_PLLSAI2_Config>
 800dd54:	4603      	mov	r3, r0
 800dd56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800dd58:	e003      	b.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	74fb      	strb	r3, [r7, #19]
      break;
 800dd5e:	e000      	b.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800dd60:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dd62:	7cfb      	ldrb	r3, [r7, #19]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d10b      	bne.n	800dd80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800dd68:	4b52      	ldr	r3, [pc, #328]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dd6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd76:	494f      	ldr	r1, [pc, #316]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800dd7e:	e001      	b.n	800dd84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd80:	7cfb      	ldrb	r3, [r7, #19]
 800dd82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f000 80a0 	beq.w	800ded2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dd92:	2300      	movs	r3, #0
 800dd94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800dd96:	4b47      	ldr	r3, [pc, #284]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dd98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d101      	bne.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800dda2:	2301      	movs	r3, #1
 800dda4:	e000      	b.n	800dda8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800dda6:	2300      	movs	r3, #0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00d      	beq.n	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ddac:	4b41      	ldr	r3, [pc, #260]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ddae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddb0:	4a40      	ldr	r2, [pc, #256]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ddb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddb6:	6593      	str	r3, [r2, #88]	; 0x58
 800ddb8:	4b3e      	ldr	r3, [pc, #248]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ddba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddc0:	60bb      	str	r3, [r7, #8]
 800ddc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ddc8:	4b3b      	ldr	r3, [pc, #236]	; (800deb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a3a      	ldr	r2, [pc, #232]	; (800deb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ddce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ddd4:	f7fd f978 	bl	800b0c8 <HAL_GetTick>
 800ddd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ddda:	e009      	b.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dddc:	f7fd f974 	bl	800b0c8 <HAL_GetTick>
 800dde0:	4602      	mov	r2, r0
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	1ad3      	subs	r3, r2, r3
 800dde6:	2b02      	cmp	r3, #2
 800dde8:	d902      	bls.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800ddea:	2303      	movs	r3, #3
 800ddec:	74fb      	strb	r3, [r7, #19]
        break;
 800ddee:	e005      	b.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ddf0:	4b31      	ldr	r3, [pc, #196]	; (800deb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d0ef      	beq.n	800dddc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800ddfc:	7cfb      	ldrb	r3, [r7, #19]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d15c      	bne.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800de02:	4b2c      	ldr	r3, [pc, #176]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d01f      	beq.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de1a:	697a      	ldr	r2, [r7, #20]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d019      	beq.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800de20:	4b24      	ldr	r3, [pc, #144]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800de2c:	4b21      	ldr	r3, [pc, #132]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de32:	4a20      	ldr	r2, [pc, #128]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800de3c:	4b1d      	ldr	r3, [pc, #116]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de42:	4a1c      	ldr	r2, [pc, #112]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800de4c:	4a19      	ldr	r2, [pc, #100]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	f003 0301 	and.w	r3, r3, #1
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d016      	beq.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de5e:	f7fd f933 	bl	800b0c8 <HAL_GetTick>
 800de62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800de64:	e00b      	b.n	800de7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de66:	f7fd f92f 	bl	800b0c8 <HAL_GetTick>
 800de6a:	4602      	mov	r2, r0
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	1ad3      	subs	r3, r2, r3
 800de70:	f241 3288 	movw	r2, #5000	; 0x1388
 800de74:	4293      	cmp	r3, r2
 800de76:	d902      	bls.n	800de7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800de78:	2303      	movs	r3, #3
 800de7a:	74fb      	strb	r3, [r7, #19]
            break;
 800de7c:	e006      	b.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800de7e:	4b0d      	ldr	r3, [pc, #52]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de84:	f003 0302 	and.w	r3, r3, #2
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d0ec      	beq.n	800de66 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800de8c:	7cfb      	ldrb	r3, [r7, #19]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10c      	bne.n	800deac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800de92:	4b08      	ldr	r3, [pc, #32]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800de94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dea2:	4904      	ldr	r1, [pc, #16]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dea4:	4313      	orrs	r3, r2
 800dea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800deaa:	e009      	b.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800deac:	7cfb      	ldrb	r3, [r7, #19]
 800deae:	74bb      	strb	r3, [r7, #18]
 800deb0:	e006      	b.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800deb2:	bf00      	nop
 800deb4:	40021000 	.word	0x40021000
 800deb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800debc:	7cfb      	ldrb	r3, [r7, #19]
 800debe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dec0:	7c7b      	ldrb	r3, [r7, #17]
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d105      	bne.n	800ded2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dec6:	4b9e      	ldr	r3, [pc, #632]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deca:	4a9d      	ldr	r2, [pc, #628]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800decc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ded0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f003 0301 	and.w	r3, r3, #1
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00a      	beq.n	800def4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dede:	4b98      	ldr	r3, [pc, #608]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dee4:	f023 0203 	bic.w	r2, r3, #3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deec:	4994      	ldr	r1, [pc, #592]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800deee:	4313      	orrs	r3, r2
 800def0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f003 0302 	and.w	r3, r3, #2
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00a      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800df00:	4b8f      	ldr	r3, [pc, #572]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df06:	f023 020c 	bic.w	r2, r3, #12
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df0e:	498c      	ldr	r1, [pc, #560]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df10:	4313      	orrs	r3, r2
 800df12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f003 0304 	and.w	r3, r3, #4
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00a      	beq.n	800df38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800df22:	4b87      	ldr	r3, [pc, #540]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df30:	4983      	ldr	r1, [pc, #524]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df32:	4313      	orrs	r3, r2
 800df34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f003 0308 	and.w	r3, r3, #8
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00a      	beq.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800df44:	4b7e      	ldr	r3, [pc, #504]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df52:	497b      	ldr	r1, [pc, #492]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df54:	4313      	orrs	r3, r2
 800df56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f003 0310 	and.w	r3, r3, #16
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00a      	beq.n	800df7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800df66:	4b76      	ldr	r3, [pc, #472]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df74:	4972      	ldr	r1, [pc, #456]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df76:	4313      	orrs	r3, r2
 800df78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f003 0320 	and.w	r3, r3, #32
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00a      	beq.n	800df9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800df88:	4b6d      	ldr	r3, [pc, #436]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df96:	496a      	ldr	r1, [pc, #424]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df98:	4313      	orrs	r3, r2
 800df9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00a      	beq.n	800dfc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dfaa:	4b65      	ldr	r3, [pc, #404]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dfac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfb8:	4961      	ldr	r1, [pc, #388]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d00a      	beq.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800dfcc:	4b5c      	ldr	r3, [pc, #368]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dfce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfda:	4959      	ldr	r1, [pc, #356]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00a      	beq.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dfee:	4b54      	ldr	r3, [pc, #336]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dff4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dffc:	4950      	ldr	r1, [pc, #320]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dffe:	4313      	orrs	r3, r2
 800e000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00a      	beq.n	800e026 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e010:	4b4b      	ldr	r3, [pc, #300]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e016:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e01e:	4948      	ldr	r1, [pc, #288]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e020:	4313      	orrs	r3, r2
 800e022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d00a      	beq.n	800e048 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e032:	4b43      	ldr	r3, [pc, #268]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e040:	493f      	ldr	r1, [pc, #252]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e042:	4313      	orrs	r3, r2
 800e044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e050:	2b00      	cmp	r3, #0
 800e052:	d028      	beq.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e054:	4b3a      	ldr	r3, [pc, #232]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e05a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e062:	4937      	ldr	r1, [pc, #220]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e064:	4313      	orrs	r3, r2
 800e066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e06e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e072:	d106      	bne.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e074:	4b32      	ldr	r3, [pc, #200]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	4a31      	ldr	r2, [pc, #196]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e07a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e07e:	60d3      	str	r3, [r2, #12]
 800e080:	e011      	b.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e08a:	d10c      	bne.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	3304      	adds	r3, #4
 800e090:	2101      	movs	r1, #1
 800e092:	4618      	mov	r0, r3
 800e094:	f000 fe42 	bl	800ed1c <RCCEx_PLLSAI1_Config>
 800e098:	4603      	mov	r3, r0
 800e09a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800e09c:	7cfb      	ldrb	r3, [r7, #19]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800e0a2:	7cfb      	ldrb	r3, [r7, #19]
 800e0a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d028      	beq.n	800e104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e0b2:	4b23      	ldr	r3, [pc, #140]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0c0:	491f      	ldr	r1, [pc, #124]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0d0:	d106      	bne.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e0d2:	4b1b      	ldr	r3, [pc, #108]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	4a1a      	ldr	r2, [pc, #104]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e0d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e0dc:	60d3      	str	r3, [r2, #12]
 800e0de:	e011      	b.n	800e104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e0e8:	d10c      	bne.n	800e104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	3304      	adds	r3, #4
 800e0ee:	2101      	movs	r1, #1
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f000 fe13 	bl	800ed1c <RCCEx_PLLSAI1_Config>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e0fa:	7cfb      	ldrb	r3, [r7, #19]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800e100:	7cfb      	ldrb	r3, [r7, #19]
 800e102:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d02b      	beq.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e110:	4b0b      	ldr	r3, [pc, #44]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e116:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e11e:	4908      	ldr	r1, [pc, #32]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e120:	4313      	orrs	r3, r2
 800e122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e12a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e12e:	d109      	bne.n	800e144 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e130:	4b03      	ldr	r3, [pc, #12]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	4a02      	ldr	r2, [pc, #8]	; (800e140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e13a:	60d3      	str	r3, [r2, #12]
 800e13c:	e014      	b.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800e13e:	bf00      	nop
 800e140:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e14c:	d10c      	bne.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	3304      	adds	r3, #4
 800e152:	2101      	movs	r1, #1
 800e154:	4618      	mov	r0, r3
 800e156:	f000 fde1 	bl	800ed1c <RCCEx_PLLSAI1_Config>
 800e15a:	4603      	mov	r3, r0
 800e15c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e15e:	7cfb      	ldrb	r3, [r7, #19]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800e164:	7cfb      	ldrb	r3, [r7, #19]
 800e166:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e170:	2b00      	cmp	r3, #0
 800e172:	d02f      	beq.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e174:	4b2b      	ldr	r3, [pc, #172]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e17a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e182:	4928      	ldr	r1, [pc, #160]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e184:	4313      	orrs	r3, r2
 800e186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e18e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e192:	d10d      	bne.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	3304      	adds	r3, #4
 800e198:	2102      	movs	r1, #2
 800e19a:	4618      	mov	r0, r3
 800e19c:	f000 fdbe 	bl	800ed1c <RCCEx_PLLSAI1_Config>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e1a4:	7cfb      	ldrb	r3, [r7, #19]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d014      	beq.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800e1aa:	7cfb      	ldrb	r3, [r7, #19]
 800e1ac:	74bb      	strb	r3, [r7, #18]
 800e1ae:	e011      	b.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1b8:	d10c      	bne.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	3320      	adds	r3, #32
 800e1be:	2102      	movs	r1, #2
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f000 fe9f 	bl	800ef04 <RCCEx_PLLSAI2_Config>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800e1ca:	7cfb      	ldrb	r3, [r7, #19]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d001      	beq.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800e1d0:	7cfb      	ldrb	r3, [r7, #19]
 800e1d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00a      	beq.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e1e0:	4b10      	ldr	r3, [pc, #64]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1ee:	490d      	ldr	r1, [pc, #52]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00b      	beq.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e202:	4b08      	ldr	r3, [pc, #32]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e208:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e212:	4904      	ldr	r1, [pc, #16]	; (800e224 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e214:	4313      	orrs	r3, r2
 800e216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800e21a:	7cbb      	ldrb	r3, [r7, #18]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3718      	adds	r7, #24
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	40021000 	.word	0x40021000

0800e228 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800e230:	2300      	movs	r3, #0
 800e232:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e23a:	d13e      	bne.n	800e2ba <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800e23c:	4bbe      	ldr	r3, [pc, #760]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e246:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e24e:	d028      	beq.n	800e2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e256:	f200 853e 	bhi.w	800ecd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e260:	d005      	beq.n	800e26e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e268:	d00e      	beq.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800e26a:	f000 bd34 	b.w	800ecd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e26e:	4bb2      	ldr	r3, [pc, #712]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e274:	f003 0302 	and.w	r3, r3, #2
 800e278:	2b02      	cmp	r3, #2
 800e27a:	f040 852e 	bne.w	800ecda <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 800e27e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e282:	61fb      	str	r3, [r7, #28]
      break;
 800e284:	f000 bd29 	b.w	800ecda <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800e288:	4bab      	ldr	r3, [pc, #684]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e28a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e28e:	f003 0302 	and.w	r3, r3, #2
 800e292:	2b02      	cmp	r3, #2
 800e294:	f040 8523 	bne.w	800ecde <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 800e298:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e29c:	61fb      	str	r3, [r7, #28]
      break;
 800e29e:	f000 bd1e 	b.w	800ecde <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e2a2:	4ba5      	ldr	r3, [pc, #660]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e2ae:	f040 8518 	bne.w	800ece2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 800e2b2:	4ba2      	ldr	r3, [pc, #648]	; (800e53c <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 800e2b4:	61fb      	str	r3, [r7, #28]
      break;
 800e2b6:	f000 bd14 	b.w	800ece2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e2ba:	4b9f      	ldr	r3, [pc, #636]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	f003 0303 	and.w	r3, r3, #3
 800e2c2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	2b03      	cmp	r3, #3
 800e2c8:	d036      	beq.n	800e338 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	2b03      	cmp	r3, #3
 800e2ce:	d840      	bhi.n	800e352 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	d003      	beq.n	800e2de <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d020      	beq.n	800e31e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800e2dc:	e039      	b.n	800e352 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800e2de:	4b96      	ldr	r3, [pc, #600]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f003 0302 	and.w	r3, r3, #2
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d116      	bne.n	800e318 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800e2ea:	4b93      	ldr	r3, [pc, #588]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f003 0308 	and.w	r3, r3, #8
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d005      	beq.n	800e302 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800e2f6:	4b90      	ldr	r3, [pc, #576]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	091b      	lsrs	r3, r3, #4
 800e2fc:	f003 030f 	and.w	r3, r3, #15
 800e300:	e005      	b.n	800e30e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800e302:	4b8d      	ldr	r3, [pc, #564]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e308:	0a1b      	lsrs	r3, r3, #8
 800e30a:	f003 030f 	and.w	r3, r3, #15
 800e30e:	4a8c      	ldr	r2, [pc, #560]	; (800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 800e310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800e316:	e01f      	b.n	800e358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800e318:	2300      	movs	r3, #0
 800e31a:	61bb      	str	r3, [r7, #24]
      break;
 800e31c:	e01c      	b.n	800e358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e31e:	4b86      	ldr	r3, [pc, #536]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e32a:	d102      	bne.n	800e332 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800e32c:	4b85      	ldr	r3, [pc, #532]	; (800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 800e32e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800e330:	e012      	b.n	800e358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800e332:	2300      	movs	r3, #0
 800e334:	61bb      	str	r3, [r7, #24]
      break;
 800e336:	e00f      	b.n	800e358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e338:	4b7f      	ldr	r3, [pc, #508]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e344:	d102      	bne.n	800e34c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800e346:	4b80      	ldr	r3, [pc, #512]	; (800e548 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 800e348:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800e34a:	e005      	b.n	800e358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800e34c:	2300      	movs	r3, #0
 800e34e:	61bb      	str	r3, [r7, #24]
      break;
 800e350:	e002      	b.n	800e358 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800e352:	2300      	movs	r3, #0
 800e354:	61bb      	str	r3, [r7, #24]
      break;
 800e356:	bf00      	nop
    }

    switch(PeriphClk)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e35e:	f000 80d2 	beq.w	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e368:	f200 84bd 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e372:	f000 80c8 	beq.w	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e37c:	f200 84b3 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e386:	f000 835b 	beq.w	800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e390:	f200 84a9 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e39a:	f000 847f 	beq.w	800ec9c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3a4:	f200 849f 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3ae:	f000 82ce 	beq.w	800e94e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3b8:	f200 8495 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3c2:	f000 80a0 	beq.w	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3cc:	f200 848b 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3d6:	f000 808f 	beq.w	800e4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3e0:	f200 8481 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3ea:	d07e      	beq.n	800e4ea <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3f2:	f200 8478 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3fc:	f000 8404 	beq.w	800ec08 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e406:	f200 846e 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e410:	f000 83b0 	beq.w	800eb74 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e41a:	f200 8464 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e424:	f000 837a 	beq.w	800eb1c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e42e:	f200 845a 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b80      	cmp	r3, #128	; 0x80
 800e436:	f000 8345 	beq.w	800eac4 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2b80      	cmp	r3, #128	; 0x80
 800e43e:	f200 8452 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b20      	cmp	r3, #32
 800e446:	d84b      	bhi.n	800e4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f000 844b 	beq.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	3b01      	subs	r3, #1
 800e454:	2b1f      	cmp	r3, #31
 800e456:	f200 8446 	bhi.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800e45a:	a201      	add	r2, pc, #4	; (adr r2, 800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 800e45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e460:	0800e64b 	.word	0x0800e64b
 800e464:	0800e6bb 	.word	0x0800e6bb
 800e468:	0800ece7 	.word	0x0800ece7
 800e46c:	0800e74f 	.word	0x0800e74f
 800e470:	0800ece7 	.word	0x0800ece7
 800e474:	0800ece7 	.word	0x0800ece7
 800e478:	0800ece7 	.word	0x0800ece7
 800e47c:	0800e7c7 	.word	0x0800e7c7
 800e480:	0800ece7 	.word	0x0800ece7
 800e484:	0800ece7 	.word	0x0800ece7
 800e488:	0800ece7 	.word	0x0800ece7
 800e48c:	0800ece7 	.word	0x0800ece7
 800e490:	0800ece7 	.word	0x0800ece7
 800e494:	0800ece7 	.word	0x0800ece7
 800e498:	0800ece7 	.word	0x0800ece7
 800e49c:	0800e84b 	.word	0x0800e84b
 800e4a0:	0800ece7 	.word	0x0800ece7
 800e4a4:	0800ece7 	.word	0x0800ece7
 800e4a8:	0800ece7 	.word	0x0800ece7
 800e4ac:	0800ece7 	.word	0x0800ece7
 800e4b0:	0800ece7 	.word	0x0800ece7
 800e4b4:	0800ece7 	.word	0x0800ece7
 800e4b8:	0800ece7 	.word	0x0800ece7
 800e4bc:	0800ece7 	.word	0x0800ece7
 800e4c0:	0800ece7 	.word	0x0800ece7
 800e4c4:	0800ece7 	.word	0x0800ece7
 800e4c8:	0800ece7 	.word	0x0800ece7
 800e4cc:	0800ece7 	.word	0x0800ece7
 800e4d0:	0800ece7 	.word	0x0800ece7
 800e4d4:	0800ece7 	.word	0x0800ece7
 800e4d8:	0800ece7 	.word	0x0800ece7
 800e4dc:	0800e8cd 	.word	0x0800e8cd
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2b40      	cmp	r3, #64	; 0x40
 800e4e4:	f000 82bd 	beq.w	800ea62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800e4e8:	e3fd      	b.n	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800e4ea:	69b9      	ldr	r1, [r7, #24]
 800e4ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e4f0:	f000 fde6 	bl	800f0c0 <RCCEx_GetSAIxPeriphCLKFreq>
 800e4f4:	61f8      	str	r0, [r7, #28]
      break;
 800e4f6:	e3f7      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800e4f8:	69b9      	ldr	r1, [r7, #24]
 800e4fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e4fe:	f000 fddf 	bl	800f0c0 <RCCEx_GetSAIxPeriphCLKFreq>
 800e502:	61f8      	str	r0, [r7, #28]
      break;
 800e504:	e3f0      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800e506:	4b0c      	ldr	r3, [pc, #48]	; (800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800e508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e50c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800e510:	613b      	str	r3, [r7, #16]
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e518:	d018      	beq.n	800e54c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e520:	f200 808b 	bhi.w	800e63a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e52a:	d059      	beq.n	800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e532:	d028      	beq.n	800e586 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 800e534:	e081      	b.n	800e63a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800e536:	bf00      	nop
 800e538:	40021000 	.word	0x40021000
 800e53c:	0003d090 	.word	0x0003d090
 800e540:	080156ac 	.word	0x080156ac
 800e544:	00f42400 	.word	0x00f42400
 800e548:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800e54c:	4bae      	ldr	r3, [pc, #696]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f003 0302 	and.w	r3, r3, #2
 800e554:	2b02      	cmp	r3, #2
 800e556:	d172      	bne.n	800e63e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800e558:	4bab      	ldr	r3, [pc, #684]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f003 0308 	and.w	r3, r3, #8
 800e560:	2b00      	cmp	r3, #0
 800e562:	d005      	beq.n	800e570 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 800e564:	4ba8      	ldr	r3, [pc, #672]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	091b      	lsrs	r3, r3, #4
 800e56a:	f003 030f 	and.w	r3, r3, #15
 800e56e:	e005      	b.n	800e57c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800e570:	4ba5      	ldr	r3, [pc, #660]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e576:	0a1b      	lsrs	r3, r3, #8
 800e578:	f003 030f 	and.w	r3, r3, #15
 800e57c:	4aa3      	ldr	r2, [pc, #652]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800e57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e582:	61fb      	str	r3, [r7, #28]
          break;
 800e584:	e05b      	b.n	800e63e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800e586:	4ba0      	ldr	r3, [pc, #640]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e58e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e592:	d156      	bne.n	800e642 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800e594:	4b9c      	ldr	r3, [pc, #624]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e59c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5a0:	d14f      	bne.n	800e642 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e5a2:	4b99      	ldr	r3, [pc, #612]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	0a1b      	lsrs	r3, r3, #8
 800e5a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5ac:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e5ae:	69bb      	ldr	r3, [r7, #24]
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	fb02 f203 	mul.w	r2, r2, r3
 800e5b6:	4b94      	ldr	r3, [pc, #592]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	091b      	lsrs	r3, r3, #4
 800e5bc:	f003 0307 	and.w	r3, r3, #7
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5c6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800e5c8:	4b8f      	ldr	r3, [pc, #572]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	0d5b      	lsrs	r3, r3, #21
 800e5ce:	f003 0303 	and.w	r3, r3, #3
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	005b      	lsls	r3, r3, #1
 800e5d6:	69ba      	ldr	r2, [r7, #24]
 800e5d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5dc:	61fb      	str	r3, [r7, #28]
          break;
 800e5de:	e030      	b.n	800e642 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800e5e0:	4b89      	ldr	r3, [pc, #548]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e5e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e5ec:	d12b      	bne.n	800e646 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800e5ee:	4b86      	ldr	r3, [pc, #536]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e5f0:	691b      	ldr	r3, [r3, #16]
 800e5f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5fa:	d124      	bne.n	800e646 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800e5fc:	4b82      	ldr	r3, [pc, #520]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	0a1b      	lsrs	r3, r3, #8
 800e602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e606:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e608:	69bb      	ldr	r3, [r7, #24]
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	fb02 f203 	mul.w	r2, r2, r3
 800e610:	4b7d      	ldr	r3, [pc, #500]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	091b      	lsrs	r3, r3, #4
 800e616:	f003 0307 	and.w	r3, r3, #7
 800e61a:	3301      	adds	r3, #1
 800e61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e620:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800e622:	4b79      	ldr	r3, [pc, #484]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e624:	691b      	ldr	r3, [r3, #16]
 800e626:	0d5b      	lsrs	r3, r3, #21
 800e628:	f003 0303 	and.w	r3, r3, #3
 800e62c:	3301      	adds	r3, #1
 800e62e:	005b      	lsls	r3, r3, #1
 800e630:	69ba      	ldr	r2, [r7, #24]
 800e632:	fbb2 f3f3 	udiv	r3, r2, r3
 800e636:	61fb      	str	r3, [r7, #28]
          break;
 800e638:	e005      	b.n	800e646 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 800e63a:	bf00      	nop
 800e63c:	e354      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e63e:	bf00      	nop
 800e640:	e352      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e642:	bf00      	nop
 800e644:	e350      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e646:	bf00      	nop
        break;
 800e648:	e34e      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800e64a:	4b6f      	ldr	r3, [pc, #444]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e650:	f003 0303 	and.w	r3, r3, #3
 800e654:	613b      	str	r3, [r7, #16]
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	2b03      	cmp	r3, #3
 800e65a:	d828      	bhi.n	800e6ae <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800e65c:	a201      	add	r2, pc, #4	; (adr r2, 800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800e65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e662:	bf00      	nop
 800e664:	0800e675 	.word	0x0800e675
 800e668:	0800e67d 	.word	0x0800e67d
 800e66c:	0800e685 	.word	0x0800e685
 800e670:	0800e699 	.word	0x0800e699
          frequency = HAL_RCC_GetPCLK2Freq();
 800e674:	f7ff fa46 	bl	800db04 <HAL_RCC_GetPCLK2Freq>
 800e678:	61f8      	str	r0, [r7, #28]
          break;
 800e67a:	e01d      	b.n	800e6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 800e67c:	f7ff f994 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800e680:	61f8      	str	r0, [r7, #28]
          break;
 800e682:	e019      	b.n	800e6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e684:	4b60      	ldr	r3, [pc, #384]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e68c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e690:	d10f      	bne.n	800e6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 800e692:	4b5f      	ldr	r3, [pc, #380]	; (800e810 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800e694:	61fb      	str	r3, [r7, #28]
          break;
 800e696:	e00c      	b.n	800e6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e698:	4b5b      	ldr	r3, [pc, #364]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e69e:	f003 0302 	and.w	r3, r3, #2
 800e6a2:	2b02      	cmp	r3, #2
 800e6a4:	d107      	bne.n	800e6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 800e6a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6aa:	61fb      	str	r3, [r7, #28]
          break;
 800e6ac:	e003      	b.n	800e6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 800e6ae:	bf00      	nop
 800e6b0:	e31a      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e6b2:	bf00      	nop
 800e6b4:	e318      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e6b6:	bf00      	nop
        break;
 800e6b8:	e316      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800e6ba:	4b53      	ldr	r3, [pc, #332]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6c0:	f003 030c 	and.w	r3, r3, #12
 800e6c4:	613b      	str	r3, [r7, #16]
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	2b0c      	cmp	r3, #12
 800e6ca:	d83a      	bhi.n	800e742 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 800e6cc:	a201      	add	r2, pc, #4	; (adr r2, 800e6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800e6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d2:	bf00      	nop
 800e6d4:	0800e709 	.word	0x0800e709
 800e6d8:	0800e743 	.word	0x0800e743
 800e6dc:	0800e743 	.word	0x0800e743
 800e6e0:	0800e743 	.word	0x0800e743
 800e6e4:	0800e711 	.word	0x0800e711
 800e6e8:	0800e743 	.word	0x0800e743
 800e6ec:	0800e743 	.word	0x0800e743
 800e6f0:	0800e743 	.word	0x0800e743
 800e6f4:	0800e719 	.word	0x0800e719
 800e6f8:	0800e743 	.word	0x0800e743
 800e6fc:	0800e743 	.word	0x0800e743
 800e700:	0800e743 	.word	0x0800e743
 800e704:	0800e72d 	.word	0x0800e72d
          frequency = HAL_RCC_GetPCLK1Freq();
 800e708:	f7ff f9e6 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800e70c:	61f8      	str	r0, [r7, #28]
          break;
 800e70e:	e01d      	b.n	800e74c <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 800e710:	f7ff f94a 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800e714:	61f8      	str	r0, [r7, #28]
          break;
 800e716:	e019      	b.n	800e74c <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e718:	4b3b      	ldr	r3, [pc, #236]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e724:	d10f      	bne.n	800e746 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 800e726:	4b3a      	ldr	r3, [pc, #232]	; (800e810 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800e728:	61fb      	str	r3, [r7, #28]
          break;
 800e72a:	e00c      	b.n	800e746 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e72c:	4b36      	ldr	r3, [pc, #216]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e732:	f003 0302 	and.w	r3, r3, #2
 800e736:	2b02      	cmp	r3, #2
 800e738:	d107      	bne.n	800e74a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 800e73a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e73e:	61fb      	str	r3, [r7, #28]
          break;
 800e740:	e003      	b.n	800e74a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 800e742:	bf00      	nop
 800e744:	e2d0      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e746:	bf00      	nop
 800e748:	e2ce      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e74a:	bf00      	nop
        break;
 800e74c:	e2cc      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800e74e:	4b2e      	ldr	r3, [pc, #184]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e754:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e758:	613b      	str	r3, [r7, #16]
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	2b30      	cmp	r3, #48	; 0x30
 800e75e:	d021      	beq.n	800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	2b30      	cmp	r3, #48	; 0x30
 800e764:	d829      	bhi.n	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	2b20      	cmp	r3, #32
 800e76a:	d011      	beq.n	800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	2b20      	cmp	r3, #32
 800e770:	d823      	bhi.n	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d003      	beq.n	800e780 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	2b10      	cmp	r3, #16
 800e77c:	d004      	beq.n	800e788 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 800e77e:	e01c      	b.n	800e7ba <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e780:	f7ff f9aa 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800e784:	61f8      	str	r0, [r7, #28]
          break;
 800e786:	e01d      	b.n	800e7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 800e788:	f7ff f90e 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800e78c:	61f8      	str	r0, [r7, #28]
          break;
 800e78e:	e019      	b.n	800e7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e790:	4b1d      	ldr	r3, [pc, #116]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e79c:	d10f      	bne.n	800e7be <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 800e79e:	4b1c      	ldr	r3, [pc, #112]	; (800e810 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800e7a0:	61fb      	str	r3, [r7, #28]
          break;
 800e7a2:	e00c      	b.n	800e7be <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e7a4:	4b18      	ldr	r3, [pc, #96]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7aa:	f003 0302 	and.w	r3, r3, #2
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d107      	bne.n	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 800e7b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7b6:	61fb      	str	r3, [r7, #28]
          break;
 800e7b8:	e003      	b.n	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 800e7ba:	bf00      	nop
 800e7bc:	e294      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e7be:	bf00      	nop
 800e7c0:	e292      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e7c2:	bf00      	nop
        break;
 800e7c4:	e290      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800e7c6:	4b10      	ldr	r3, [pc, #64]	; (800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800e7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e7d0:	613b      	str	r3, [r7, #16]
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	2bc0      	cmp	r3, #192	; 0xc0
 800e7d6:	d027      	beq.n	800e828 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	2bc0      	cmp	r3, #192	; 0xc0
 800e7dc:	d82f      	bhi.n	800e83e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	2b80      	cmp	r3, #128	; 0x80
 800e7e2:	d017      	beq.n	800e814 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	2b80      	cmp	r3, #128	; 0x80
 800e7e8:	d829      	bhi.n	800e83e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d003      	beq.n	800e7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	2b40      	cmp	r3, #64	; 0x40
 800e7f4:	d004      	beq.n	800e800 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 800e7f6:	e022      	b.n	800e83e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e7f8:	f7ff f96e 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800e7fc:	61f8      	str	r0, [r7, #28]
          break;
 800e7fe:	e023      	b.n	800e848 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 800e800:	f7ff f8d2 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800e804:	61f8      	str	r0, [r7, #28]
          break;
 800e806:	e01f      	b.n	800e848 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 800e808:	40021000 	.word	0x40021000
 800e80c:	080156ac 	.word	0x080156ac
 800e810:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e814:	4ba9      	ldr	r3, [pc, #676]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e81c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e820:	d10f      	bne.n	800e842 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 800e822:	4ba7      	ldr	r3, [pc, #668]	; (800eac0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800e824:	61fb      	str	r3, [r7, #28]
          break;
 800e826:	e00c      	b.n	800e842 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e828:	4ba4      	ldr	r3, [pc, #656]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e82e:	f003 0302 	and.w	r3, r3, #2
 800e832:	2b02      	cmp	r3, #2
 800e834:	d107      	bne.n	800e846 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 800e836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e83a:	61fb      	str	r3, [r7, #28]
          break;
 800e83c:	e003      	b.n	800e846 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 800e83e:	bf00      	nop
 800e840:	e252      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e842:	bf00      	nop
 800e844:	e250      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e846:	bf00      	nop
        break;
 800e848:	e24e      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800e84a:	4b9c      	ldr	r3, [pc, #624]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e854:	613b      	str	r3, [r7, #16]
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e85c:	d025      	beq.n	800e8aa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e864:	d82c      	bhi.n	800e8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e86c:	d013      	beq.n	800e896 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e874:	d824      	bhi.n	800e8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d004      	beq.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e882:	d004      	beq.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 800e884:	e01c      	b.n	800e8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e886:	f7ff f927 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800e88a:	61f8      	str	r0, [r7, #28]
          break;
 800e88c:	e01d      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 800e88e:	f7ff f88b 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800e892:	61f8      	str	r0, [r7, #28]
          break;
 800e894:	e019      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e896:	4b89      	ldr	r3, [pc, #548]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e89e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8a2:	d10f      	bne.n	800e8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 800e8a4:	4b86      	ldr	r3, [pc, #536]	; (800eac0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800e8a6:	61fb      	str	r3, [r7, #28]
          break;
 800e8a8:	e00c      	b.n	800e8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e8aa:	4b84      	ldr	r3, [pc, #528]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8b0:	f003 0302 	and.w	r3, r3, #2
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d107      	bne.n	800e8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 800e8b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8bc:	61fb      	str	r3, [r7, #28]
          break;
 800e8be:	e003      	b.n	800e8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 800e8c0:	bf00      	nop
 800e8c2:	e211      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e8c4:	bf00      	nop
 800e8c6:	e20f      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e8c8:	bf00      	nop
        break;
 800e8ca:	e20d      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800e8cc:	4b7b      	ldr	r3, [pc, #492]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e8d6:	613b      	str	r3, [r7, #16]
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e8de:	d025      	beq.n	800e92c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e8e6:	d82c      	bhi.n	800e942 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8ee:	d013      	beq.n	800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8f6:	d824      	bhi.n	800e942 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d004      	beq.n	800e908 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e904:	d004      	beq.n	800e910 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 800e906:	e01c      	b.n	800e942 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e908:	f7ff f8e6 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800e90c:	61f8      	str	r0, [r7, #28]
          break;
 800e90e:	e01d      	b.n	800e94c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 800e910:	f7ff f84a 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800e914:	61f8      	str	r0, [r7, #28]
          break;
 800e916:	e019      	b.n	800e94c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e918:	4b68      	ldr	r3, [pc, #416]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e924:	d10f      	bne.n	800e946 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 800e926:	4b66      	ldr	r3, [pc, #408]	; (800eac0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800e928:	61fb      	str	r3, [r7, #28]
          break;
 800e92a:	e00c      	b.n	800e946 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e92c:	4b63      	ldr	r3, [pc, #396]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e92e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e932:	f003 0302 	and.w	r3, r3, #2
 800e936:	2b02      	cmp	r3, #2
 800e938:	d107      	bne.n	800e94a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 800e93a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e93e:	61fb      	str	r3, [r7, #28]
          break;
 800e940:	e003      	b.n	800e94a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 800e942:	bf00      	nop
 800e944:	e1d0      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e946:	bf00      	nop
 800e948:	e1ce      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800e94a:	bf00      	nop
        break;
 800e94c:	e1cc      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e94e:	4b5b      	ldr	r3, [pc, #364]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e954:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e958:	613b      	str	r3, [r7, #16]
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e960:	d00c      	beq.n	800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e968:	d864      	bhi.n	800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e970:	d008      	beq.n	800e984 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e978:	d030      	beq.n	800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800e97a:	e05b      	b.n	800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 800e97c:	f7ff f814 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800e980:	61f8      	str	r0, [r7, #28]
          break;
 800e982:	e05c      	b.n	800ea3e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800e984:	4b4d      	ldr	r3, [pc, #308]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e98c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e990:	d152      	bne.n	800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 800e992:	4b4a      	ldr	r3, [pc, #296]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e994:	691b      	ldr	r3, [r3, #16]
 800e996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d04c      	beq.n	800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800e99e:	4b47      	ldr	r3, [pc, #284]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e9a0:	691b      	ldr	r3, [r3, #16]
 800e9a2:	0a1b      	lsrs	r3, r3, #8
 800e9a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9a8:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	fb02 f203 	mul.w	r2, r2, r3
 800e9b2:	4b42      	ldr	r3, [pc, #264]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	091b      	lsrs	r3, r3, #4
 800e9b8:	f003 0307 	and.w	r3, r3, #7
 800e9bc:	3301      	adds	r3, #1
 800e9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9c2:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800e9c4:	4b3d      	ldr	r3, [pc, #244]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e9c6:	691b      	ldr	r3, [r3, #16]
 800e9c8:	0e5b      	lsrs	r3, r3, #25
 800e9ca:	f003 0303 	and.w	r3, r3, #3
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	005b      	lsls	r3, r3, #1
 800e9d2:	69ba      	ldr	r2, [r7, #24]
 800e9d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9d8:	61fb      	str	r3, [r7, #28]
          break;
 800e9da:	e02d      	b.n	800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800e9dc:	4b37      	ldr	r3, [pc, #220]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e9e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9e8:	d128      	bne.n	800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800e9ea:	4b34      	ldr	r3, [pc, #208]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e9ec:	695b      	ldr	r3, [r3, #20]
 800e9ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d022      	beq.n	800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800e9f6:	4b31      	ldr	r3, [pc, #196]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800e9f8:	695b      	ldr	r3, [r3, #20]
 800e9fa:	0a1b      	lsrs	r3, r3, #8
 800e9fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea00:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	fb02 f203 	mul.w	r2, r2, r3
 800ea0a:	4b2c      	ldr	r3, [pc, #176]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	091b      	lsrs	r3, r3, #4
 800ea10:	f003 0307 	and.w	r3, r3, #7
 800ea14:	3301      	adds	r3, #1
 800ea16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea1a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800ea1c:	4b27      	ldr	r3, [pc, #156]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800ea1e:	695b      	ldr	r3, [r3, #20]
 800ea20:	0e5b      	lsrs	r3, r3, #25
 800ea22:	f003 0303 	and.w	r3, r3, #3
 800ea26:	3301      	adds	r3, #1
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	69ba      	ldr	r2, [r7, #24]
 800ea2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea30:	61fb      	str	r3, [r7, #28]
          break;
 800ea32:	e003      	b.n	800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 800ea34:	bf00      	nop
 800ea36:	e157      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ea38:	bf00      	nop
 800ea3a:	e155      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ea3c:	bf00      	nop
        break;
 800ea3e:	e153      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800ea40:	4b1e      	ldr	r3, [pc, #120]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800ea42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea4a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d103      	bne.n	800ea5a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 800ea52:	f7ff f857 	bl	800db04 <HAL_RCC_GetPCLK2Freq>
 800ea56:	61f8      	str	r0, [r7, #28]
        break;
 800ea58:	e146      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 800ea5a:	f7fe ffa5 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800ea5e:	61f8      	str	r0, [r7, #28]
        break;
 800ea60:	e142      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ea62:	4b16      	ldr	r3, [pc, #88]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800ea64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea68:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ea6c:	613b      	str	r3, [r7, #16]
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea74:	d013      	beq.n	800ea9e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea7c:	d819      	bhi.n	800eab2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d004      	beq.n	800ea8e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea8a:	d004      	beq.n	800ea96 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800ea8c:	e011      	b.n	800eab2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ea8e:	f7ff f823 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800ea92:	61f8      	str	r0, [r7, #28]
          break;
 800ea94:	e010      	b.n	800eab8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 800ea96:	f7fe ff87 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800ea9a:	61f8      	str	r0, [r7, #28]
          break;
 800ea9c:	e00c      	b.n	800eab8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ea9e:	4b07      	ldr	r3, [pc, #28]	; (800eabc <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eaa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaaa:	d104      	bne.n	800eab6 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 800eaac:	4b04      	ldr	r3, [pc, #16]	; (800eac0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800eaae:	61fb      	str	r3, [r7, #28]
          break;
 800eab0:	e001      	b.n	800eab6 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 800eab2:	bf00      	nop
 800eab4:	e118      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800eab6:	bf00      	nop
        break;
 800eab8:	e116      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800eaba:	bf00      	nop
 800eabc:	40021000 	.word	0x40021000
 800eac0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800eac4:	4b8b      	ldr	r3, [pc, #556]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800eac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eaca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800eace:	613b      	str	r3, [r7, #16]
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ead6:	d013      	beq.n	800eb00 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eade:	d819      	bhi.n	800eb14 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d004      	beq.n	800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eaec:	d004      	beq.n	800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 800eaee:	e011      	b.n	800eb14 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800eaf0:	f7fe fff2 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800eaf4:	61f8      	str	r0, [r7, #28]
          break;
 800eaf6:	e010      	b.n	800eb1a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800eaf8:	f7fe ff56 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800eafc:	61f8      	str	r0, [r7, #28]
          break;
 800eafe:	e00c      	b.n	800eb1a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eb00:	4b7c      	ldr	r3, [pc, #496]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb0c:	d104      	bne.n	800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800eb0e:	4b7a      	ldr	r3, [pc, #488]	; (800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800eb10:	61fb      	str	r3, [r7, #28]
          break;
 800eb12:	e001      	b.n	800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 800eb14:	bf00      	nop
 800eb16:	e0e7      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800eb18:	bf00      	nop
        break;
 800eb1a:	e0e5      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800eb1c:	4b75      	ldr	r3, [pc, #468]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800eb1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800eb26:	613b      	str	r3, [r7, #16]
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb2e:	d013      	beq.n	800eb58 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb36:	d819      	bhi.n	800eb6c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d004      	beq.n	800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb44:	d004      	beq.n	800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 800eb46:	e011      	b.n	800eb6c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 800eb48:	f7fe ffc6 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800eb4c:	61f8      	str	r0, [r7, #28]
          break;
 800eb4e:	e010      	b.n	800eb72 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 800eb50:	f7fe ff2a 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800eb54:	61f8      	str	r0, [r7, #28]
          break;
 800eb56:	e00c      	b.n	800eb72 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eb58:	4b66      	ldr	r3, [pc, #408]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb64:	d104      	bne.n	800eb70 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 800eb66:	4b64      	ldr	r3, [pc, #400]	; (800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800eb68:	61fb      	str	r3, [r7, #28]
          break;
 800eb6a:	e001      	b.n	800eb70 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 800eb6c:	bf00      	nop
 800eb6e:	e0bb      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800eb70:	bf00      	nop
        break;
 800eb72:	e0b9      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800eb74:	4b5f      	ldr	r3, [pc, #380]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800eb76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb7a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800eb7e:	613b      	str	r3, [r7, #16]
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800eb86:	d02c      	beq.n	800ebe2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800eb8e:	d833      	bhi.n	800ebf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800eb96:	d01a      	beq.n	800ebce <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800eb9e:	d82b      	bhi.n	800ebf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d004      	beq.n	800ebb0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ebac:	d004      	beq.n	800ebb8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 800ebae:	e023      	b.n	800ebf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ebb0:	f7fe ff92 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800ebb4:	61f8      	str	r0, [r7, #28]
          break;
 800ebb6:	e026      	b.n	800ec06 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ebb8:	4b4e      	ldr	r3, [pc, #312]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ebba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ebbe:	f003 0302 	and.w	r3, r3, #2
 800ebc2:	2b02      	cmp	r3, #2
 800ebc4:	d11a      	bne.n	800ebfc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 800ebc6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ebca:	61fb      	str	r3, [r7, #28]
          break;
 800ebcc:	e016      	b.n	800ebfc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ebce:	4b49      	ldr	r3, [pc, #292]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebda:	d111      	bne.n	800ec00 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 800ebdc:	4b46      	ldr	r3, [pc, #280]	; (800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800ebde:	61fb      	str	r3, [r7, #28]
          break;
 800ebe0:	e00e      	b.n	800ec00 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ebe2:	4b44      	ldr	r3, [pc, #272]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ebe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebe8:	f003 0302 	and.w	r3, r3, #2
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d109      	bne.n	800ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 800ebf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebf4:	61fb      	str	r3, [r7, #28]
          break;
 800ebf6:	e005      	b.n	800ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 800ebf8:	bf00      	nop
 800ebfa:	e075      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ebfc:	bf00      	nop
 800ebfe:	e073      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ec00:	bf00      	nop
 800ec02:	e071      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ec04:	bf00      	nop
        break;
 800ec06:	e06f      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ec08:	4b3a      	ldr	r3, [pc, #232]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ec0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ec12:	613b      	str	r3, [r7, #16]
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ec1a:	d02c      	beq.n	800ec76 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ec22:	d833      	bhi.n	800ec8c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec2a:	d01a      	beq.n	800ec62 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec32:	d82b      	bhi.n	800ec8c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d004      	beq.n	800ec44 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec40:	d004      	beq.n	800ec4c <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800ec42:	e023      	b.n	800ec8c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ec44:	f7fe ff48 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800ec48:	61f8      	str	r0, [r7, #28]
          break;
 800ec4a:	e026      	b.n	800ec9a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ec4c:	4b29      	ldr	r3, [pc, #164]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ec4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ec52:	f003 0302 	and.w	r3, r3, #2
 800ec56:	2b02      	cmp	r3, #2
 800ec58:	d11a      	bne.n	800ec90 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800ec5a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ec5e:	61fb      	str	r3, [r7, #28]
          break;
 800ec60:	e016      	b.n	800ec90 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ec62:	4b24      	ldr	r3, [pc, #144]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec6e:	d111      	bne.n	800ec94 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800ec70:	4b21      	ldr	r3, [pc, #132]	; (800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800ec72:	61fb      	str	r3, [r7, #28]
          break;
 800ec74:	e00e      	b.n	800ec94 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ec76:	4b1f      	ldr	r3, [pc, #124]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ec78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec7c:	f003 0302 	and.w	r3, r3, #2
 800ec80:	2b02      	cmp	r3, #2
 800ec82:	d109      	bne.n	800ec98 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800ec84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec88:	61fb      	str	r3, [r7, #28]
          break;
 800ec8a:	e005      	b.n	800ec98 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800ec8c:	bf00      	nop
 800ec8e:	e02b      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ec90:	bf00      	nop
 800ec92:	e029      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ec94:	bf00      	nop
 800ec96:	e027      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800ec98:	bf00      	nop
        break;
 800ec9a:	e025      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800ec9c:	4b15      	ldr	r3, [pc, #84]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ec9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eca2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eca6:	613b      	str	r3, [r7, #16]
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d004      	beq.n	800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecb4:	d004      	beq.n	800ecc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 800ecb6:	e00d      	b.n	800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ecb8:	f7fe ff0e 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800ecbc:	61f8      	str	r0, [r7, #28]
          break;
 800ecbe:	e009      	b.n	800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ecc0:	4b0c      	ldr	r3, [pc, #48]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ecc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eccc:	d101      	bne.n	800ecd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800ecce:	4b0a      	ldr	r3, [pc, #40]	; (800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800ecd0:	61fb      	str	r3, [r7, #28]
          break;
 800ecd2:	bf00      	nop
        break;
 800ecd4:	e008      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800ecd6:	bf00      	nop
 800ecd8:	e006      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800ecda:	bf00      	nop
 800ecdc:	e004      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800ecde:	bf00      	nop
 800ece0:	e002      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800ece2:	bf00      	nop
 800ece4:	e000      	b.n	800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800ece6:	bf00      	nop
    }
  }

  return(frequency);
 800ece8:	69fb      	ldr	r3, [r7, #28]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3720      	adds	r7, #32
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	40021000 	.word	0x40021000
 800ecf8:	00f42400 	.word	0x00f42400

0800ecfc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800ed00:	4b05      	ldr	r3, [pc, #20]	; (800ed18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a04      	ldr	r2, [pc, #16]	; (800ed18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800ed06:	f043 0304 	orr.w	r3, r3, #4
 800ed0a:	6013      	str	r3, [r2, #0]
}
 800ed0c:	bf00      	nop
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop
 800ed18:	40021000 	.word	0x40021000

0800ed1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ed26:	2300      	movs	r3, #0
 800ed28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ed2a:	4b75      	ldr	r3, [pc, #468]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	f003 0303 	and.w	r3, r3, #3
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d018      	beq.n	800ed68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ed36:	4b72      	ldr	r3, [pc, #456]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	f003 0203 	and.w	r2, r3, #3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d10d      	bne.n	800ed62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
       ||
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d009      	beq.n	800ed62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ed4e:	4b6c      	ldr	r3, [pc, #432]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	091b      	lsrs	r3, r3, #4
 800ed54:	f003 0307 	and.w	r3, r3, #7
 800ed58:	1c5a      	adds	r2, r3, #1
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	685b      	ldr	r3, [r3, #4]
       ||
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d047      	beq.n	800edf2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ed62:	2301      	movs	r3, #1
 800ed64:	73fb      	strb	r3, [r7, #15]
 800ed66:	e044      	b.n	800edf2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2b03      	cmp	r3, #3
 800ed6e:	d018      	beq.n	800eda2 <RCCEx_PLLSAI1_Config+0x86>
 800ed70:	2b03      	cmp	r3, #3
 800ed72:	d825      	bhi.n	800edc0 <RCCEx_PLLSAI1_Config+0xa4>
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d002      	beq.n	800ed7e <RCCEx_PLLSAI1_Config+0x62>
 800ed78:	2b02      	cmp	r3, #2
 800ed7a:	d009      	beq.n	800ed90 <RCCEx_PLLSAI1_Config+0x74>
 800ed7c:	e020      	b.n	800edc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ed7e:	4b60      	ldr	r3, [pc, #384]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f003 0302 	and.w	r3, r3, #2
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d11d      	bne.n	800edc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ed8e:	e01a      	b.n	800edc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ed90:	4b5b      	ldr	r3, [pc, #364]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d116      	bne.n	800edca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800eda0:	e013      	b.n	800edca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800eda2:	4b57      	ldr	r3, [pc, #348]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d10f      	bne.n	800edce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800edae:	4b54      	ldr	r3, [pc, #336]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d109      	bne.n	800edce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800edba:	2301      	movs	r3, #1
 800edbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800edbe:	e006      	b.n	800edce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800edc0:	2301      	movs	r3, #1
 800edc2:	73fb      	strb	r3, [r7, #15]
      break;
 800edc4:	e004      	b.n	800edd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800edc6:	bf00      	nop
 800edc8:	e002      	b.n	800edd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800edca:	bf00      	nop
 800edcc:	e000      	b.n	800edd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800edce:	bf00      	nop
    }

    if(status == HAL_OK)
 800edd0:	7bfb      	ldrb	r3, [r7, #15]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d10d      	bne.n	800edf2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800edd6:	4b4a      	ldr	r3, [pc, #296]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6819      	ldr	r1, [r3, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	3b01      	subs	r3, #1
 800ede8:	011b      	lsls	r3, r3, #4
 800edea:	430b      	orrs	r3, r1
 800edec:	4944      	ldr	r1, [pc, #272]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800edee:	4313      	orrs	r3, r2
 800edf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800edf2:	7bfb      	ldrb	r3, [r7, #15]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d17d      	bne.n	800eef4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800edf8:	4b41      	ldr	r3, [pc, #260]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	4a40      	ldr	r2, [pc, #256]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800edfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ee02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee04:	f7fc f960 	bl	800b0c8 <HAL_GetTick>
 800ee08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ee0a:	e009      	b.n	800ee20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ee0c:	f7fc f95c 	bl	800b0c8 <HAL_GetTick>
 800ee10:	4602      	mov	r2, r0
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	1ad3      	subs	r3, r2, r3
 800ee16:	2b02      	cmp	r3, #2
 800ee18:	d902      	bls.n	800ee20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ee1a:	2303      	movs	r3, #3
 800ee1c:	73fb      	strb	r3, [r7, #15]
        break;
 800ee1e:	e005      	b.n	800ee2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ee20:	4b37      	ldr	r3, [pc, #220]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1ef      	bne.n	800ee0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ee2c:	7bfb      	ldrb	r3, [r7, #15]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d160      	bne.n	800eef4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d111      	bne.n	800ee5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ee38:	4b31      	ldr	r3, [pc, #196]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ee3a:	691b      	ldr	r3, [r3, #16]
 800ee3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800ee40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	6892      	ldr	r2, [r2, #8]
 800ee48:	0211      	lsls	r1, r2, #8
 800ee4a:	687a      	ldr	r2, [r7, #4]
 800ee4c:	68d2      	ldr	r2, [r2, #12]
 800ee4e:	0912      	lsrs	r2, r2, #4
 800ee50:	0452      	lsls	r2, r2, #17
 800ee52:	430a      	orrs	r2, r1
 800ee54:	492a      	ldr	r1, [pc, #168]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ee56:	4313      	orrs	r3, r2
 800ee58:	610b      	str	r3, [r1, #16]
 800ee5a:	e027      	b.n	800eeac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	d112      	bne.n	800ee88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ee62:	4b27      	ldr	r3, [pc, #156]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ee64:	691b      	ldr	r3, [r3, #16]
 800ee66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ee6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	6892      	ldr	r2, [r2, #8]
 800ee72:	0211      	lsls	r1, r2, #8
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	6912      	ldr	r2, [r2, #16]
 800ee78:	0852      	lsrs	r2, r2, #1
 800ee7a:	3a01      	subs	r2, #1
 800ee7c:	0552      	lsls	r2, r2, #21
 800ee7e:	430a      	orrs	r2, r1
 800ee80:	491f      	ldr	r1, [pc, #124]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ee82:	4313      	orrs	r3, r2
 800ee84:	610b      	str	r3, [r1, #16]
 800ee86:	e011      	b.n	800eeac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ee88:	4b1d      	ldr	r3, [pc, #116]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ee8a:	691b      	ldr	r3, [r3, #16]
 800ee8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ee90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	6892      	ldr	r2, [r2, #8]
 800ee98:	0211      	lsls	r1, r2, #8
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	6952      	ldr	r2, [r2, #20]
 800ee9e:	0852      	lsrs	r2, r2, #1
 800eea0:	3a01      	subs	r2, #1
 800eea2:	0652      	lsls	r2, r2, #25
 800eea4:	430a      	orrs	r2, r1
 800eea6:	4916      	ldr	r1, [pc, #88]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800eeac:	4b14      	ldr	r3, [pc, #80]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a13      	ldr	r2, [pc, #76]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800eeb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eeb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eeb8:	f7fc f906 	bl	800b0c8 <HAL_GetTick>
 800eebc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800eebe:	e009      	b.n	800eed4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800eec0:	f7fc f902 	bl	800b0c8 <HAL_GetTick>
 800eec4:	4602      	mov	r2, r0
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	1ad3      	subs	r3, r2, r3
 800eeca:	2b02      	cmp	r3, #2
 800eecc:	d902      	bls.n	800eed4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800eece:	2303      	movs	r3, #3
 800eed0:	73fb      	strb	r3, [r7, #15]
          break;
 800eed2:	e005      	b.n	800eee0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800eed4:	4b0a      	ldr	r3, [pc, #40]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d0ef      	beq.n	800eec0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800eee0:	7bfb      	ldrb	r3, [r7, #15]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d106      	bne.n	800eef4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800eee6:	4b06      	ldr	r3, [pc, #24]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800eee8:	691a      	ldr	r2, [r3, #16]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	4904      	ldr	r1, [pc, #16]	; (800ef00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800eef0:	4313      	orrs	r3, r2
 800eef2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	40021000 	.word	0x40021000

0800ef04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ef12:	4b6a      	ldr	r3, [pc, #424]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	f003 0303 	and.w	r3, r3, #3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d018      	beq.n	800ef50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ef1e:	4b67      	ldr	r3, [pc, #412]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	f003 0203 	and.w	r2, r3, #3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d10d      	bne.n	800ef4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
       ||
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d009      	beq.n	800ef4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800ef36:	4b61      	ldr	r3, [pc, #388]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	091b      	lsrs	r3, r3, #4
 800ef3c:	f003 0307 	and.w	r3, r3, #7
 800ef40:	1c5a      	adds	r2, r3, #1
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	685b      	ldr	r3, [r3, #4]
       ||
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d047      	beq.n	800efda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	73fb      	strb	r3, [r7, #15]
 800ef4e:	e044      	b.n	800efda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2b03      	cmp	r3, #3
 800ef56:	d018      	beq.n	800ef8a <RCCEx_PLLSAI2_Config+0x86>
 800ef58:	2b03      	cmp	r3, #3
 800ef5a:	d825      	bhi.n	800efa8 <RCCEx_PLLSAI2_Config+0xa4>
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d002      	beq.n	800ef66 <RCCEx_PLLSAI2_Config+0x62>
 800ef60:	2b02      	cmp	r3, #2
 800ef62:	d009      	beq.n	800ef78 <RCCEx_PLLSAI2_Config+0x74>
 800ef64:	e020      	b.n	800efa8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ef66:	4b55      	ldr	r3, [pc, #340]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	f003 0302 	and.w	r3, r3, #2
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d11d      	bne.n	800efae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800ef72:	2301      	movs	r3, #1
 800ef74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ef76:	e01a      	b.n	800efae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ef78:	4b50      	ldr	r3, [pc, #320]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d116      	bne.n	800efb2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800ef84:	2301      	movs	r3, #1
 800ef86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ef88:	e013      	b.n	800efb2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ef8a:	4b4c      	ldr	r3, [pc, #304]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d10f      	bne.n	800efb6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ef96:	4b49      	ldr	r3, [pc, #292]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d109      	bne.n	800efb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800efa2:	2301      	movs	r3, #1
 800efa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800efa6:	e006      	b.n	800efb6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800efa8:	2301      	movs	r3, #1
 800efaa:	73fb      	strb	r3, [r7, #15]
      break;
 800efac:	e004      	b.n	800efb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800efae:	bf00      	nop
 800efb0:	e002      	b.n	800efb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800efb2:	bf00      	nop
 800efb4:	e000      	b.n	800efb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800efb6:	bf00      	nop
    }

    if(status == HAL_OK)
 800efb8:	7bfb      	ldrb	r3, [r7, #15]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d10d      	bne.n	800efda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800efbe:	4b3f      	ldr	r3, [pc, #252]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6819      	ldr	r1, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	3b01      	subs	r3, #1
 800efd0:	011b      	lsls	r3, r3, #4
 800efd2:	430b      	orrs	r3, r1
 800efd4:	4939      	ldr	r1, [pc, #228]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800efd6:	4313      	orrs	r3, r2
 800efd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800efda:	7bfb      	ldrb	r3, [r7, #15]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d167      	bne.n	800f0b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800efe0:	4b36      	ldr	r3, [pc, #216]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a35      	ldr	r2, [pc, #212]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800efe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800efea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800efec:	f7fc f86c 	bl	800b0c8 <HAL_GetTick>
 800eff0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800eff2:	e009      	b.n	800f008 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800eff4:	f7fc f868 	bl	800b0c8 <HAL_GetTick>
 800eff8:	4602      	mov	r2, r0
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	1ad3      	subs	r3, r2, r3
 800effe:	2b02      	cmp	r3, #2
 800f000:	d902      	bls.n	800f008 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800f002:	2303      	movs	r3, #3
 800f004:	73fb      	strb	r3, [r7, #15]
        break;
 800f006:	e005      	b.n	800f014 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800f008:	4b2c      	ldr	r3, [pc, #176]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1ef      	bne.n	800eff4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800f014:	7bfb      	ldrb	r3, [r7, #15]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d14a      	bne.n	800f0b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d111      	bne.n	800f044 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800f020:	4b26      	ldr	r3, [pc, #152]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800f022:	695b      	ldr	r3, [r3, #20]
 800f024:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800f028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	6892      	ldr	r2, [r2, #8]
 800f030:	0211      	lsls	r1, r2, #8
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	68d2      	ldr	r2, [r2, #12]
 800f036:	0912      	lsrs	r2, r2, #4
 800f038:	0452      	lsls	r2, r2, #17
 800f03a:	430a      	orrs	r2, r1
 800f03c:	491f      	ldr	r1, [pc, #124]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800f03e:	4313      	orrs	r3, r2
 800f040:	614b      	str	r3, [r1, #20]
 800f042:	e011      	b.n	800f068 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800f044:	4b1d      	ldr	r3, [pc, #116]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800f046:	695b      	ldr	r3, [r3, #20]
 800f048:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800f04c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	6892      	ldr	r2, [r2, #8]
 800f054:	0211      	lsls	r1, r2, #8
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	6912      	ldr	r2, [r2, #16]
 800f05a:	0852      	lsrs	r2, r2, #1
 800f05c:	3a01      	subs	r2, #1
 800f05e:	0652      	lsls	r2, r2, #25
 800f060:	430a      	orrs	r2, r1
 800f062:	4916      	ldr	r1, [pc, #88]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800f064:	4313      	orrs	r3, r2
 800f066:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800f068:	4b14      	ldr	r3, [pc, #80]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a13      	ldr	r2, [pc, #76]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800f06e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f072:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f074:	f7fc f828 	bl	800b0c8 <HAL_GetTick>
 800f078:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800f07a:	e009      	b.n	800f090 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800f07c:	f7fc f824 	bl	800b0c8 <HAL_GetTick>
 800f080:	4602      	mov	r2, r0
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	1ad3      	subs	r3, r2, r3
 800f086:	2b02      	cmp	r3, #2
 800f088:	d902      	bls.n	800f090 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800f08a:	2303      	movs	r3, #3
 800f08c:	73fb      	strb	r3, [r7, #15]
          break;
 800f08e:	e005      	b.n	800f09c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800f090:	4b0a      	ldr	r3, [pc, #40]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d0ef      	beq.n	800f07c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800f09c:	7bfb      	ldrb	r3, [r7, #15]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d106      	bne.n	800f0b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800f0a2:	4b06      	ldr	r3, [pc, #24]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800f0a4:	695a      	ldr	r2, [r3, #20]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	4904      	ldr	r1, [pc, #16]	; (800f0bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800f0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3710      	adds	r7, #16
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	40021000 	.word	0x40021000

0800f0c0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b089      	sub	sp, #36	; 0x24
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f0dc:	d10c      	bne.n	800f0f8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800f0de:	4b6e      	ldr	r3, [pc, #440]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800f0e8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800f0f0:	d112      	bne.n	800f118 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f0f2:	4b6a      	ldr	r3, [pc, #424]	; (800f29c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800f0f4:	61fb      	str	r3, [r7, #28]
 800f0f6:	e00f      	b.n	800f118 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0fe:	d10b      	bne.n	800f118 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800f100:	4b65      	ldr	r3, [pc, #404]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f106:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800f10a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f112:	d101      	bne.n	800f118 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800f114:	4b61      	ldr	r3, [pc, #388]	; (800f29c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800f116:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	f040 80b4 	bne.w	800f288 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800f124:	69bb      	ldr	r3, [r7, #24]
 800f126:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f12a:	d003      	beq.n	800f134 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f132:	d135      	bne.n	800f1a0 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800f134:	4b58      	ldr	r3, [pc, #352]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f13c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f140:	f040 80a1 	bne.w	800f286 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800f144:	4b54      	ldr	r3, [pc, #336]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f000 809a 	beq.w	800f286 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800f152:	4b51      	ldr	r3, [pc, #324]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	091b      	lsrs	r3, r3, #4
 800f158:	f003 0307 	and.w	r3, r3, #7
 800f15c:	3301      	adds	r3, #1
 800f15e:	693a      	ldr	r2, [r7, #16]
 800f160:	fbb2 f3f3 	udiv	r3, r2, r3
 800f164:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800f166:	4b4c      	ldr	r3, [pc, #304]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	0a1b      	lsrs	r3, r3, #8
 800f16c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f170:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d10a      	bne.n	800f18e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800f178:	4b47      	ldr	r3, [pc, #284]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f180:	2b00      	cmp	r3, #0
 800f182:	d002      	beq.n	800f18a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800f184:	2311      	movs	r3, #17
 800f186:	617b      	str	r3, [r7, #20]
 800f188:	e001      	b.n	800f18e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800f18a:	2307      	movs	r3, #7
 800f18c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	fb02 f203 	mul.w	r2, r2, r3
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	fbb2 f3f3 	udiv	r3, r2, r3
 800f19c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800f19e:	e072      	b.n	800f286 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d133      	bne.n	800f20e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800f1a6:	4b3c      	ldr	r3, [pc, #240]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f1ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f1b2:	d169      	bne.n	800f288 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800f1b4:	4b38      	ldr	r3, [pc, #224]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f1b6:	691b      	ldr	r3, [r3, #16]
 800f1b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d063      	beq.n	800f288 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800f1c0:	4b35      	ldr	r3, [pc, #212]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	091b      	lsrs	r3, r3, #4
 800f1c6:	f003 0307 	and.w	r3, r3, #7
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	693a      	ldr	r2, [r7, #16]
 800f1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1d2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800f1d4:	4b30      	ldr	r3, [pc, #192]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f1d6:	691b      	ldr	r3, [r3, #16]
 800f1d8:	0a1b      	lsrs	r3, r3, #8
 800f1da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1de:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d10a      	bne.n	800f1fc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800f1e6:	4b2c      	ldr	r3, [pc, #176]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f1e8:	691b      	ldr	r3, [r3, #16]
 800f1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d002      	beq.n	800f1f8 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800f1f2:	2311      	movs	r3, #17
 800f1f4:	617b      	str	r3, [r7, #20]
 800f1f6:	e001      	b.n	800f1fc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800f1f8:	2307      	movs	r3, #7
 800f1fa:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	fb02 f203 	mul.w	r2, r2, r3
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	fbb2 f3f3 	udiv	r3, r2, r3
 800f20a:	61fb      	str	r3, [r7, #28]
 800f20c:	e03c      	b.n	800f288 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800f20e:	69bb      	ldr	r3, [r7, #24]
 800f210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f214:	d003      	beq.n	800f21e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f21c:	d134      	bne.n	800f288 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800f21e:	4b1e      	ldr	r3, [pc, #120]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f22a:	d12d      	bne.n	800f288 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800f22c:	4b1a      	ldr	r3, [pc, #104]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f22e:	695b      	ldr	r3, [r3, #20]
 800f230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f234:	2b00      	cmp	r3, #0
 800f236:	d027      	beq.n	800f288 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800f238:	4b17      	ldr	r3, [pc, #92]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	091b      	lsrs	r3, r3, #4
 800f23e:	f003 0307 	and.w	r3, r3, #7
 800f242:	3301      	adds	r3, #1
 800f244:	693a      	ldr	r2, [r7, #16]
 800f246:	fbb2 f3f3 	udiv	r3, r2, r3
 800f24a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800f24c:	4b12      	ldr	r3, [pc, #72]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f24e:	695b      	ldr	r3, [r3, #20]
 800f250:	0a1b      	lsrs	r3, r3, #8
 800f252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f256:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d10a      	bne.n	800f274 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800f25e:	4b0e      	ldr	r3, [pc, #56]	; (800f298 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800f260:	695b      	ldr	r3, [r3, #20]
 800f262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f266:	2b00      	cmp	r3, #0
 800f268:	d002      	beq.n	800f270 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800f26a:	2311      	movs	r3, #17
 800f26c:	617b      	str	r3, [r7, #20]
 800f26e:	e001      	b.n	800f274 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800f270:	2307      	movs	r3, #7
 800f272:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	68fa      	ldr	r2, [r7, #12]
 800f278:	fb02 f203 	mul.w	r2, r2, r3
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f282:	61fb      	str	r3, [r7, #28]
 800f284:	e000      	b.n	800f288 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800f286:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800f288:	69fb      	ldr	r3, [r7, #28]
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3724      	adds	r7, #36	; 0x24
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	40021000 	.word	0x40021000
 800f29c:	001fff68 	.word	0x001fff68

0800f2a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d101      	bne.n	800f2b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e095      	b.n	800f3de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d108      	bne.n	800f2cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f2c2:	d009      	beq.n	800f2d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	61da      	str	r2, [r3, #28]
 800f2ca:	e005      	b.n	800f2d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d106      	bne.n	800f2f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7f2 fd48 	bl	8001d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2202      	movs	r2, #2
 800f2fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f30e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f318:	d902      	bls.n	800f320 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f31a:	2300      	movs	r3, #0
 800f31c:	60fb      	str	r3, [r7, #12]
 800f31e:	e002      	b.n	800f326 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f324:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800f32e:	d007      	beq.n	800f340 <HAL_SPI_Init+0xa0>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	68db      	ldr	r3, [r3, #12]
 800f334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f338:	d002      	beq.n	800f340 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2200      	movs	r2, #0
 800f33e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f350:	431a      	orrs	r2, r3
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	691b      	ldr	r3, [r3, #16]
 800f356:	f003 0302 	and.w	r3, r3, #2
 800f35a:	431a      	orrs	r2, r3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	695b      	ldr	r3, [r3, #20]
 800f360:	f003 0301 	and.w	r3, r3, #1
 800f364:	431a      	orrs	r2, r3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	699b      	ldr	r3, [r3, #24]
 800f36a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f36e:	431a      	orrs	r2, r3
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	69db      	ldr	r3, [r3, #28]
 800f374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f378:	431a      	orrs	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6a1b      	ldr	r3, [r3, #32]
 800f37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f382:	ea42 0103 	orr.w	r1, r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f38a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	430a      	orrs	r2, r1
 800f394:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	699b      	ldr	r3, [r3, #24]
 800f39a:	0c1b      	lsrs	r3, r3, #16
 800f39c:	f003 0204 	and.w	r2, r3, #4
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a4:	f003 0310 	and.w	r3, r3, #16
 800f3a8:	431a      	orrs	r2, r3
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ae:	f003 0308 	and.w	r3, r3, #8
 800f3b2:	431a      	orrs	r2, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f3bc:	ea42 0103 	orr.w	r1, r2, r3
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	430a      	orrs	r2, r1
 800f3cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3710      	adds	r7, #16
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b082      	sub	sp, #8
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d101      	bne.n	800f3f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e049      	b.n	800f48c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	2b00      	cmp	r3, #0
 800f402:	d106      	bne.n	800f412 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 f841 	bl	800f494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2202      	movs	r2, #2
 800f416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	3304      	adds	r3, #4
 800f422:	4619      	mov	r1, r3
 800f424:	4610      	mov	r0, r2
 800f426:	f000 f9f7 	bl	800f818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2201      	movs	r2, #1
 800f42e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2201      	movs	r2, #1
 800f436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2201      	movs	r2, #1
 800f43e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2201      	movs	r2, #1
 800f446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2201      	movs	r2, #1
 800f44e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2201      	movs	r2, #1
 800f456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2201      	movs	r2, #1
 800f45e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2201      	movs	r2, #1
 800f466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2201      	movs	r2, #1
 800f46e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2201      	movs	r2, #1
 800f476:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2201      	movs	r2, #1
 800f47e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2201      	movs	r2, #1
 800f486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f48a:	2300      	movs	r3, #0
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3708      	adds	r7, #8
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800f494:	b480      	push	{r7}
 800f496:	b083      	sub	sp, #12
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f49c:	bf00      	nop
 800f49e:	370c      	adds	r7, #12
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr

0800f4a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d001      	beq.n	800f4c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e04f      	b.n	800f560 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2202      	movs	r2, #2
 800f4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	68da      	ldr	r2, [r3, #12]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f042 0201 	orr.w	r2, r2, #1
 800f4d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a23      	ldr	r2, [pc, #140]	; (800f56c <HAL_TIM_Base_Start_IT+0xc4>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d01d      	beq.n	800f51e <HAL_TIM_Base_Start_IT+0x76>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4ea:	d018      	beq.n	800f51e <HAL_TIM_Base_Start_IT+0x76>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4a1f      	ldr	r2, [pc, #124]	; (800f570 <HAL_TIM_Base_Start_IT+0xc8>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d013      	beq.n	800f51e <HAL_TIM_Base_Start_IT+0x76>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a1e      	ldr	r2, [pc, #120]	; (800f574 <HAL_TIM_Base_Start_IT+0xcc>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d00e      	beq.n	800f51e <HAL_TIM_Base_Start_IT+0x76>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4a1c      	ldr	r2, [pc, #112]	; (800f578 <HAL_TIM_Base_Start_IT+0xd0>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d009      	beq.n	800f51e <HAL_TIM_Base_Start_IT+0x76>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4a1b      	ldr	r2, [pc, #108]	; (800f57c <HAL_TIM_Base_Start_IT+0xd4>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d004      	beq.n	800f51e <HAL_TIM_Base_Start_IT+0x76>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	4a19      	ldr	r2, [pc, #100]	; (800f580 <HAL_TIM_Base_Start_IT+0xd8>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d115      	bne.n	800f54a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	689a      	ldr	r2, [r3, #8]
 800f524:	4b17      	ldr	r3, [pc, #92]	; (800f584 <HAL_TIM_Base_Start_IT+0xdc>)
 800f526:	4013      	ands	r3, r2
 800f528:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2b06      	cmp	r3, #6
 800f52e:	d015      	beq.n	800f55c <HAL_TIM_Base_Start_IT+0xb4>
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f536:	d011      	beq.n	800f55c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f042 0201 	orr.w	r2, r2, #1
 800f546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f548:	e008      	b.n	800f55c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f042 0201 	orr.w	r2, r2, #1
 800f558:	601a      	str	r2, [r3, #0]
 800f55a:	e000      	b.n	800f55e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f55c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f55e:	2300      	movs	r3, #0
}
 800f560:	4618      	mov	r0, r3
 800f562:	3714      	adds	r7, #20
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr
 800f56c:	40012c00 	.word	0x40012c00
 800f570:	40000400 	.word	0x40000400
 800f574:	40000800 	.word	0x40000800
 800f578:	40000c00 	.word	0x40000c00
 800f57c:	40013400 	.word	0x40013400
 800f580:	40014000 	.word	0x40014000
 800f584:	00010007 	.word	0x00010007

0800f588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	691b      	ldr	r3, [r3, #16]
 800f596:	f003 0302 	and.w	r3, r3, #2
 800f59a:	2b02      	cmp	r3, #2
 800f59c:	d122      	bne.n	800f5e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	f003 0302 	and.w	r3, r3, #2
 800f5a8:	2b02      	cmp	r3, #2
 800f5aa:	d11b      	bne.n	800f5e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	f06f 0202 	mvn.w	r2, #2
 800f5b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	699b      	ldr	r3, [r3, #24]
 800f5c2:	f003 0303 	and.w	r3, r3, #3
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d003      	beq.n	800f5d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 f905 	bl	800f7da <HAL_TIM_IC_CaptureCallback>
 800f5d0:	e005      	b.n	800f5de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f000 f8f7 	bl	800f7c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f000 f908 	bl	800f7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	691b      	ldr	r3, [r3, #16]
 800f5ea:	f003 0304 	and.w	r3, r3, #4
 800f5ee:	2b04      	cmp	r3, #4
 800f5f0:	d122      	bne.n	800f638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	f003 0304 	and.w	r3, r3, #4
 800f5fc:	2b04      	cmp	r3, #4
 800f5fe:	d11b      	bne.n	800f638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f06f 0204 	mvn.w	r2, #4
 800f608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2202      	movs	r2, #2
 800f60e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	699b      	ldr	r3, [r3, #24]
 800f616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d003      	beq.n	800f626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 f8db 	bl	800f7da <HAL_TIM_IC_CaptureCallback>
 800f624:	e005      	b.n	800f632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 f8cd 	bl	800f7c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 f8de 	bl	800f7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2200      	movs	r2, #0
 800f636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	691b      	ldr	r3, [r3, #16]
 800f63e:	f003 0308 	and.w	r3, r3, #8
 800f642:	2b08      	cmp	r3, #8
 800f644:	d122      	bne.n	800f68c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	68db      	ldr	r3, [r3, #12]
 800f64c:	f003 0308 	and.w	r3, r3, #8
 800f650:	2b08      	cmp	r3, #8
 800f652:	d11b      	bne.n	800f68c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f06f 0208 	mvn.w	r2, #8
 800f65c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2204      	movs	r2, #4
 800f662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	69db      	ldr	r3, [r3, #28]
 800f66a:	f003 0303 	and.w	r3, r3, #3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d003      	beq.n	800f67a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f000 f8b1 	bl	800f7da <HAL_TIM_IC_CaptureCallback>
 800f678:	e005      	b.n	800f686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f000 f8a3 	bl	800f7c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 f8b4 	bl	800f7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2200      	movs	r2, #0
 800f68a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	691b      	ldr	r3, [r3, #16]
 800f692:	f003 0310 	and.w	r3, r3, #16
 800f696:	2b10      	cmp	r3, #16
 800f698:	d122      	bne.n	800f6e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	f003 0310 	and.w	r3, r3, #16
 800f6a4:	2b10      	cmp	r3, #16
 800f6a6:	d11b      	bne.n	800f6e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	f06f 0210 	mvn.w	r2, #16
 800f6b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2208      	movs	r2, #8
 800f6b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	69db      	ldr	r3, [r3, #28]
 800f6be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d003      	beq.n	800f6ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f000 f887 	bl	800f7da <HAL_TIM_IC_CaptureCallback>
 800f6cc:	e005      	b.n	800f6da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 f879 	bl	800f7c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f000 f88a 	bl	800f7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	691b      	ldr	r3, [r3, #16]
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d10e      	bne.n	800f70c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	f003 0301 	and.w	r3, r3, #1
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d107      	bne.n	800f70c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f06f 0201 	mvn.w	r2, #1
 800f704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f7f2 f9d4 	bl	8001ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	691b      	ldr	r3, [r3, #16]
 800f712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f716:	2b80      	cmp	r3, #128	; 0x80
 800f718:	d10e      	bne.n	800f738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f724:	2b80      	cmp	r3, #128	; 0x80
 800f726:	d107      	bne.n	800f738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 f914 	bl	800f960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	691b      	ldr	r3, [r3, #16]
 800f73e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f746:	d10e      	bne.n	800f766 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	68db      	ldr	r3, [r3, #12]
 800f74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f752:	2b80      	cmp	r3, #128	; 0x80
 800f754:	d107      	bne.n	800f766 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f75e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 f907 	bl	800f974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	691b      	ldr	r3, [r3, #16]
 800f76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f770:	2b40      	cmp	r3, #64	; 0x40
 800f772:	d10e      	bne.n	800f792 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f77e:	2b40      	cmp	r3, #64	; 0x40
 800f780:	d107      	bne.n	800f792 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f78a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f000 f838 	bl	800f802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	691b      	ldr	r3, [r3, #16]
 800f798:	f003 0320 	and.w	r3, r3, #32
 800f79c:	2b20      	cmp	r3, #32
 800f79e:	d10e      	bne.n	800f7be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	f003 0320 	and.w	r3, r3, #32
 800f7aa:	2b20      	cmp	r3, #32
 800f7ac:	d107      	bne.n	800f7be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f06f 0220 	mvn.w	r2, #32
 800f7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 f8c7 	bl	800f94c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f7be:	bf00      	nop
 800f7c0:	3708      	adds	r7, #8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f7c6:	b480      	push	{r7}
 800f7c8:	b083      	sub	sp, #12
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f7ce:	bf00      	nop
 800f7d0:	370c      	adds	r7, #12
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr

0800f7da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f7da:	b480      	push	{r7}
 800f7dc:	b083      	sub	sp, #12
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f7e2:	bf00      	nop
 800f7e4:	370c      	adds	r7, #12
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr

0800f7ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f7ee:	b480      	push	{r7}
 800f7f0:	b083      	sub	sp, #12
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f7f6:	bf00      	nop
 800f7f8:	370c      	adds	r7, #12
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr

0800f802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f802:	b480      	push	{r7}
 800f804:	b083      	sub	sp, #12
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f80a:	bf00      	nop
 800f80c:	370c      	adds	r7, #12
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr
	...

0800f818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4a40      	ldr	r2, [pc, #256]	; (800f92c <TIM_Base_SetConfig+0x114>)
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d013      	beq.n	800f858 <TIM_Base_SetConfig+0x40>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f836:	d00f      	beq.n	800f858 <TIM_Base_SetConfig+0x40>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4a3d      	ldr	r2, [pc, #244]	; (800f930 <TIM_Base_SetConfig+0x118>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d00b      	beq.n	800f858 <TIM_Base_SetConfig+0x40>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	4a3c      	ldr	r2, [pc, #240]	; (800f934 <TIM_Base_SetConfig+0x11c>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d007      	beq.n	800f858 <TIM_Base_SetConfig+0x40>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4a3b      	ldr	r2, [pc, #236]	; (800f938 <TIM_Base_SetConfig+0x120>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d003      	beq.n	800f858 <TIM_Base_SetConfig+0x40>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	4a3a      	ldr	r2, [pc, #232]	; (800f93c <TIM_Base_SetConfig+0x124>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d108      	bne.n	800f86a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f85e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	4313      	orrs	r3, r2
 800f868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4a2f      	ldr	r2, [pc, #188]	; (800f92c <TIM_Base_SetConfig+0x114>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d01f      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f878:	d01b      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4a2c      	ldr	r2, [pc, #176]	; (800f930 <TIM_Base_SetConfig+0x118>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d017      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	4a2b      	ldr	r2, [pc, #172]	; (800f934 <TIM_Base_SetConfig+0x11c>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d013      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4a2a      	ldr	r2, [pc, #168]	; (800f938 <TIM_Base_SetConfig+0x120>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d00f      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	4a29      	ldr	r2, [pc, #164]	; (800f93c <TIM_Base_SetConfig+0x124>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d00b      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	4a28      	ldr	r2, [pc, #160]	; (800f940 <TIM_Base_SetConfig+0x128>)
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d007      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4a27      	ldr	r2, [pc, #156]	; (800f944 <TIM_Base_SetConfig+0x12c>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d003      	beq.n	800f8b2 <TIM_Base_SetConfig+0x9a>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4a26      	ldr	r2, [pc, #152]	; (800f948 <TIM_Base_SetConfig+0x130>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d108      	bne.n	800f8c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	68db      	ldr	r3, [r3, #12]
 800f8be:	68fa      	ldr	r2, [r7, #12]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	695b      	ldr	r3, [r3, #20]
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	68fa      	ldr	r2, [r7, #12]
 800f8d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	689a      	ldr	r2, [r3, #8]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	4a10      	ldr	r2, [pc, #64]	; (800f92c <TIM_Base_SetConfig+0x114>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d00f      	beq.n	800f910 <TIM_Base_SetConfig+0xf8>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	4a12      	ldr	r2, [pc, #72]	; (800f93c <TIM_Base_SetConfig+0x124>)
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d00b      	beq.n	800f910 <TIM_Base_SetConfig+0xf8>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4a11      	ldr	r2, [pc, #68]	; (800f940 <TIM_Base_SetConfig+0x128>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d007      	beq.n	800f910 <TIM_Base_SetConfig+0xf8>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	4a10      	ldr	r2, [pc, #64]	; (800f944 <TIM_Base_SetConfig+0x12c>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d003      	beq.n	800f910 <TIM_Base_SetConfig+0xf8>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4a0f      	ldr	r2, [pc, #60]	; (800f948 <TIM_Base_SetConfig+0x130>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d103      	bne.n	800f918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	691a      	ldr	r2, [r3, #16]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2201      	movs	r2, #1
 800f91c:	615a      	str	r2, [r3, #20]
}
 800f91e:	bf00      	nop
 800f920:	3714      	adds	r7, #20
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr
 800f92a:	bf00      	nop
 800f92c:	40012c00 	.word	0x40012c00
 800f930:	40000400 	.word	0x40000400
 800f934:	40000800 	.word	0x40000800
 800f938:	40000c00 	.word	0x40000c00
 800f93c:	40013400 	.word	0x40013400
 800f940:	40014000 	.word	0x40014000
 800f944:	40014400 	.word	0x40014400
 800f948:	40014800 	.word	0x40014800

0800f94c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f954:	bf00      	nop
 800f956:	370c      	adds	r7, #12
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr

0800f960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f960:	b480      	push	{r7}
 800f962:	b083      	sub	sp, #12
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f968:	bf00      	nop
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f97c:	bf00      	nop
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d101      	bne.n	800f99a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f996:	2301      	movs	r3, #1
 800f998:	e040      	b.n	800fa1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d106      	bne.n	800f9b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7f2 fa30 	bl	8001e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2224      	movs	r2, #36	; 0x24
 800f9b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f022 0201 	bic.w	r2, r2, #1
 800f9c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 f8c0 	bl	800fb4c <UART_SetConfig>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d101      	bne.n	800f9d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e022      	b.n	800fa1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d002      	beq.n	800f9e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f000 fb3e 	bl	8010060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	685a      	ldr	r2, [r3, #4]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f9f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	689a      	ldr	r2, [r3, #8]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f042 0201 	orr.w	r2, r2, #1
 800fa12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f000 fbc5 	bl	80101a4 <UART_CheckIdleState>
 800fa1a:	4603      	mov	r3, r0
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3708      	adds	r7, #8
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b08a      	sub	sp, #40	; 0x28
 800fa28:	af02      	add	r7, sp, #8
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	603b      	str	r3, [r7, #0]
 800fa30:	4613      	mov	r3, r2
 800fa32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa38:	2b20      	cmp	r3, #32
 800fa3a:	f040 8082 	bne.w	800fb42 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d002      	beq.n	800fa4a <HAL_UART_Transmit+0x26>
 800fa44:	88fb      	ldrh	r3, [r7, #6]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d101      	bne.n	800fa4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	e07a      	b.n	800fb44 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d101      	bne.n	800fa5c <HAL_UART_Transmit+0x38>
 800fa58:	2302      	movs	r3, #2
 800fa5a:	e073      	b.n	800fb44 <HAL_UART_Transmit+0x120>
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2200      	movs	r2, #0
 800fa68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2221      	movs	r2, #33	; 0x21
 800fa70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fa72:	f7fb fb29 	bl	800b0c8 <HAL_GetTick>
 800fa76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	88fa      	ldrh	r2, [r7, #6]
 800fa7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	88fa      	ldrh	r2, [r7, #6]
 800fa84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	689b      	ldr	r3, [r3, #8]
 800fa8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa90:	d108      	bne.n	800faa4 <HAL_UART_Transmit+0x80>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	691b      	ldr	r3, [r3, #16]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d104      	bne.n	800faa4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	61bb      	str	r3, [r7, #24]
 800faa2:	e003      	b.n	800faac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800faa8:	2300      	movs	r3, #0
 800faaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2200      	movs	r2, #0
 800fab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800fab4:	e02d      	b.n	800fb12 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	9300      	str	r3, [sp, #0]
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	2200      	movs	r2, #0
 800fabe:	2180      	movs	r1, #128	; 0x80
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	f000 fbb8 	bl	8010236 <UART_WaitOnFlagUntilTimeout>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d001      	beq.n	800fad0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800facc:	2303      	movs	r3, #3
 800face:	e039      	b.n	800fb44 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d10b      	bne.n	800faee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fad6:	69bb      	ldr	r3, [r7, #24]
 800fad8:	881a      	ldrh	r2, [r3, #0]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fae2:	b292      	uxth	r2, r2
 800fae4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fae6:	69bb      	ldr	r3, [r7, #24]
 800fae8:	3302      	adds	r3, #2
 800faea:	61bb      	str	r3, [r7, #24]
 800faec:	e008      	b.n	800fb00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	781a      	ldrb	r2, [r3, #0]
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	b292      	uxth	r2, r2
 800faf8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	3301      	adds	r3, #1
 800fafe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	b29a      	uxth	r2, r3
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d1cb      	bne.n	800fab6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	2200      	movs	r2, #0
 800fb26:	2140      	movs	r1, #64	; 0x40
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f000 fb84 	bl	8010236 <UART_WaitOnFlagUntilTimeout>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d001      	beq.n	800fb38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800fb34:	2303      	movs	r3, #3
 800fb36:	e005      	b.n	800fb44 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2220      	movs	r2, #32
 800fb3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	e000      	b.n	800fb44 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800fb42:	2302      	movs	r3, #2
  }
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3720      	adds	r7, #32
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fb4c:	b5b0      	push	{r4, r5, r7, lr}
 800fb4e:	b088      	sub	sp, #32
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fb54:	2300      	movs	r3, #0
 800fb56:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	689a      	ldr	r2, [r3, #8]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	691b      	ldr	r3, [r3, #16]
 800fb60:	431a      	orrs	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	695b      	ldr	r3, [r3, #20]
 800fb66:	431a      	orrs	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	69db      	ldr	r3, [r3, #28]
 800fb6c:	4313      	orrs	r3, r2
 800fb6e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	4bad      	ldr	r3, [pc, #692]	; (800fe2c <UART_SetConfig+0x2e0>)
 800fb78:	4013      	ands	r3, r2
 800fb7a:	687a      	ldr	r2, [r7, #4]
 800fb7c:	6812      	ldr	r2, [r2, #0]
 800fb7e:	69f9      	ldr	r1, [r7, #28]
 800fb80:	430b      	orrs	r3, r1
 800fb82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	68da      	ldr	r2, [r3, #12]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	430a      	orrs	r2, r1
 800fb98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	699b      	ldr	r3, [r3, #24]
 800fb9e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4aa2      	ldr	r2, [pc, #648]	; (800fe30 <UART_SetConfig+0x2e4>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d004      	beq.n	800fbb4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6a1b      	ldr	r3, [r3, #32]
 800fbae:	69fa      	ldr	r2, [r7, #28]
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	689b      	ldr	r3, [r3, #8]
 800fbba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	69fa      	ldr	r2, [r7, #28]
 800fbc4:	430a      	orrs	r2, r1
 800fbc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4a99      	ldr	r2, [pc, #612]	; (800fe34 <UART_SetConfig+0x2e8>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d121      	bne.n	800fc16 <UART_SetConfig+0xca>
 800fbd2:	4b99      	ldr	r3, [pc, #612]	; (800fe38 <UART_SetConfig+0x2ec>)
 800fbd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbd8:	f003 0303 	and.w	r3, r3, #3
 800fbdc:	2b03      	cmp	r3, #3
 800fbde:	d817      	bhi.n	800fc10 <UART_SetConfig+0xc4>
 800fbe0:	a201      	add	r2, pc, #4	; (adr r2, 800fbe8 <UART_SetConfig+0x9c>)
 800fbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe6:	bf00      	nop
 800fbe8:	0800fbf9 	.word	0x0800fbf9
 800fbec:	0800fc05 	.word	0x0800fc05
 800fbf0:	0800fbff 	.word	0x0800fbff
 800fbf4:	0800fc0b 	.word	0x0800fc0b
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	76fb      	strb	r3, [r7, #27]
 800fbfc:	e0e7      	b.n	800fdce <UART_SetConfig+0x282>
 800fbfe:	2302      	movs	r3, #2
 800fc00:	76fb      	strb	r3, [r7, #27]
 800fc02:	e0e4      	b.n	800fdce <UART_SetConfig+0x282>
 800fc04:	2304      	movs	r3, #4
 800fc06:	76fb      	strb	r3, [r7, #27]
 800fc08:	e0e1      	b.n	800fdce <UART_SetConfig+0x282>
 800fc0a:	2308      	movs	r3, #8
 800fc0c:	76fb      	strb	r3, [r7, #27]
 800fc0e:	e0de      	b.n	800fdce <UART_SetConfig+0x282>
 800fc10:	2310      	movs	r3, #16
 800fc12:	76fb      	strb	r3, [r7, #27]
 800fc14:	e0db      	b.n	800fdce <UART_SetConfig+0x282>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4a88      	ldr	r2, [pc, #544]	; (800fe3c <UART_SetConfig+0x2f0>)
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d132      	bne.n	800fc86 <UART_SetConfig+0x13a>
 800fc20:	4b85      	ldr	r3, [pc, #532]	; (800fe38 <UART_SetConfig+0x2ec>)
 800fc22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc26:	f003 030c 	and.w	r3, r3, #12
 800fc2a:	2b0c      	cmp	r3, #12
 800fc2c:	d828      	bhi.n	800fc80 <UART_SetConfig+0x134>
 800fc2e:	a201      	add	r2, pc, #4	; (adr r2, 800fc34 <UART_SetConfig+0xe8>)
 800fc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc34:	0800fc69 	.word	0x0800fc69
 800fc38:	0800fc81 	.word	0x0800fc81
 800fc3c:	0800fc81 	.word	0x0800fc81
 800fc40:	0800fc81 	.word	0x0800fc81
 800fc44:	0800fc75 	.word	0x0800fc75
 800fc48:	0800fc81 	.word	0x0800fc81
 800fc4c:	0800fc81 	.word	0x0800fc81
 800fc50:	0800fc81 	.word	0x0800fc81
 800fc54:	0800fc6f 	.word	0x0800fc6f
 800fc58:	0800fc81 	.word	0x0800fc81
 800fc5c:	0800fc81 	.word	0x0800fc81
 800fc60:	0800fc81 	.word	0x0800fc81
 800fc64:	0800fc7b 	.word	0x0800fc7b
 800fc68:	2300      	movs	r3, #0
 800fc6a:	76fb      	strb	r3, [r7, #27]
 800fc6c:	e0af      	b.n	800fdce <UART_SetConfig+0x282>
 800fc6e:	2302      	movs	r3, #2
 800fc70:	76fb      	strb	r3, [r7, #27]
 800fc72:	e0ac      	b.n	800fdce <UART_SetConfig+0x282>
 800fc74:	2304      	movs	r3, #4
 800fc76:	76fb      	strb	r3, [r7, #27]
 800fc78:	e0a9      	b.n	800fdce <UART_SetConfig+0x282>
 800fc7a:	2308      	movs	r3, #8
 800fc7c:	76fb      	strb	r3, [r7, #27]
 800fc7e:	e0a6      	b.n	800fdce <UART_SetConfig+0x282>
 800fc80:	2310      	movs	r3, #16
 800fc82:	76fb      	strb	r3, [r7, #27]
 800fc84:	e0a3      	b.n	800fdce <UART_SetConfig+0x282>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	4a6d      	ldr	r2, [pc, #436]	; (800fe40 <UART_SetConfig+0x2f4>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d120      	bne.n	800fcd2 <UART_SetConfig+0x186>
 800fc90:	4b69      	ldr	r3, [pc, #420]	; (800fe38 <UART_SetConfig+0x2ec>)
 800fc92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc9a:	2b30      	cmp	r3, #48	; 0x30
 800fc9c:	d013      	beq.n	800fcc6 <UART_SetConfig+0x17a>
 800fc9e:	2b30      	cmp	r3, #48	; 0x30
 800fca0:	d814      	bhi.n	800fccc <UART_SetConfig+0x180>
 800fca2:	2b20      	cmp	r3, #32
 800fca4:	d009      	beq.n	800fcba <UART_SetConfig+0x16e>
 800fca6:	2b20      	cmp	r3, #32
 800fca8:	d810      	bhi.n	800fccc <UART_SetConfig+0x180>
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d002      	beq.n	800fcb4 <UART_SetConfig+0x168>
 800fcae:	2b10      	cmp	r3, #16
 800fcb0:	d006      	beq.n	800fcc0 <UART_SetConfig+0x174>
 800fcb2:	e00b      	b.n	800fccc <UART_SetConfig+0x180>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	76fb      	strb	r3, [r7, #27]
 800fcb8:	e089      	b.n	800fdce <UART_SetConfig+0x282>
 800fcba:	2302      	movs	r3, #2
 800fcbc:	76fb      	strb	r3, [r7, #27]
 800fcbe:	e086      	b.n	800fdce <UART_SetConfig+0x282>
 800fcc0:	2304      	movs	r3, #4
 800fcc2:	76fb      	strb	r3, [r7, #27]
 800fcc4:	e083      	b.n	800fdce <UART_SetConfig+0x282>
 800fcc6:	2308      	movs	r3, #8
 800fcc8:	76fb      	strb	r3, [r7, #27]
 800fcca:	e080      	b.n	800fdce <UART_SetConfig+0x282>
 800fccc:	2310      	movs	r3, #16
 800fcce:	76fb      	strb	r3, [r7, #27]
 800fcd0:	e07d      	b.n	800fdce <UART_SetConfig+0x282>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a5b      	ldr	r2, [pc, #364]	; (800fe44 <UART_SetConfig+0x2f8>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d120      	bne.n	800fd1e <UART_SetConfig+0x1d2>
 800fcdc:	4b56      	ldr	r3, [pc, #344]	; (800fe38 <UART_SetConfig+0x2ec>)
 800fcde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fce2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fce6:	2bc0      	cmp	r3, #192	; 0xc0
 800fce8:	d013      	beq.n	800fd12 <UART_SetConfig+0x1c6>
 800fcea:	2bc0      	cmp	r3, #192	; 0xc0
 800fcec:	d814      	bhi.n	800fd18 <UART_SetConfig+0x1cc>
 800fcee:	2b80      	cmp	r3, #128	; 0x80
 800fcf0:	d009      	beq.n	800fd06 <UART_SetConfig+0x1ba>
 800fcf2:	2b80      	cmp	r3, #128	; 0x80
 800fcf4:	d810      	bhi.n	800fd18 <UART_SetConfig+0x1cc>
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d002      	beq.n	800fd00 <UART_SetConfig+0x1b4>
 800fcfa:	2b40      	cmp	r3, #64	; 0x40
 800fcfc:	d006      	beq.n	800fd0c <UART_SetConfig+0x1c0>
 800fcfe:	e00b      	b.n	800fd18 <UART_SetConfig+0x1cc>
 800fd00:	2300      	movs	r3, #0
 800fd02:	76fb      	strb	r3, [r7, #27]
 800fd04:	e063      	b.n	800fdce <UART_SetConfig+0x282>
 800fd06:	2302      	movs	r3, #2
 800fd08:	76fb      	strb	r3, [r7, #27]
 800fd0a:	e060      	b.n	800fdce <UART_SetConfig+0x282>
 800fd0c:	2304      	movs	r3, #4
 800fd0e:	76fb      	strb	r3, [r7, #27]
 800fd10:	e05d      	b.n	800fdce <UART_SetConfig+0x282>
 800fd12:	2308      	movs	r3, #8
 800fd14:	76fb      	strb	r3, [r7, #27]
 800fd16:	e05a      	b.n	800fdce <UART_SetConfig+0x282>
 800fd18:	2310      	movs	r3, #16
 800fd1a:	76fb      	strb	r3, [r7, #27]
 800fd1c:	e057      	b.n	800fdce <UART_SetConfig+0x282>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4a49      	ldr	r2, [pc, #292]	; (800fe48 <UART_SetConfig+0x2fc>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d125      	bne.n	800fd74 <UART_SetConfig+0x228>
 800fd28:	4b43      	ldr	r3, [pc, #268]	; (800fe38 <UART_SetConfig+0x2ec>)
 800fd2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd36:	d017      	beq.n	800fd68 <UART_SetConfig+0x21c>
 800fd38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd3c:	d817      	bhi.n	800fd6e <UART_SetConfig+0x222>
 800fd3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd42:	d00b      	beq.n	800fd5c <UART_SetConfig+0x210>
 800fd44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd48:	d811      	bhi.n	800fd6e <UART_SetConfig+0x222>
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d003      	beq.n	800fd56 <UART_SetConfig+0x20a>
 800fd4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd52:	d006      	beq.n	800fd62 <UART_SetConfig+0x216>
 800fd54:	e00b      	b.n	800fd6e <UART_SetConfig+0x222>
 800fd56:	2300      	movs	r3, #0
 800fd58:	76fb      	strb	r3, [r7, #27]
 800fd5a:	e038      	b.n	800fdce <UART_SetConfig+0x282>
 800fd5c:	2302      	movs	r3, #2
 800fd5e:	76fb      	strb	r3, [r7, #27]
 800fd60:	e035      	b.n	800fdce <UART_SetConfig+0x282>
 800fd62:	2304      	movs	r3, #4
 800fd64:	76fb      	strb	r3, [r7, #27]
 800fd66:	e032      	b.n	800fdce <UART_SetConfig+0x282>
 800fd68:	2308      	movs	r3, #8
 800fd6a:	76fb      	strb	r3, [r7, #27]
 800fd6c:	e02f      	b.n	800fdce <UART_SetConfig+0x282>
 800fd6e:	2310      	movs	r3, #16
 800fd70:	76fb      	strb	r3, [r7, #27]
 800fd72:	e02c      	b.n	800fdce <UART_SetConfig+0x282>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a2d      	ldr	r2, [pc, #180]	; (800fe30 <UART_SetConfig+0x2e4>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d125      	bne.n	800fdca <UART_SetConfig+0x27e>
 800fd7e:	4b2e      	ldr	r3, [pc, #184]	; (800fe38 <UART_SetConfig+0x2ec>)
 800fd80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fd88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fd8c:	d017      	beq.n	800fdbe <UART_SetConfig+0x272>
 800fd8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fd92:	d817      	bhi.n	800fdc4 <UART_SetConfig+0x278>
 800fd94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd98:	d00b      	beq.n	800fdb2 <UART_SetConfig+0x266>
 800fd9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd9e:	d811      	bhi.n	800fdc4 <UART_SetConfig+0x278>
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d003      	beq.n	800fdac <UART_SetConfig+0x260>
 800fda4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fda8:	d006      	beq.n	800fdb8 <UART_SetConfig+0x26c>
 800fdaa:	e00b      	b.n	800fdc4 <UART_SetConfig+0x278>
 800fdac:	2300      	movs	r3, #0
 800fdae:	76fb      	strb	r3, [r7, #27]
 800fdb0:	e00d      	b.n	800fdce <UART_SetConfig+0x282>
 800fdb2:	2302      	movs	r3, #2
 800fdb4:	76fb      	strb	r3, [r7, #27]
 800fdb6:	e00a      	b.n	800fdce <UART_SetConfig+0x282>
 800fdb8:	2304      	movs	r3, #4
 800fdba:	76fb      	strb	r3, [r7, #27]
 800fdbc:	e007      	b.n	800fdce <UART_SetConfig+0x282>
 800fdbe:	2308      	movs	r3, #8
 800fdc0:	76fb      	strb	r3, [r7, #27]
 800fdc2:	e004      	b.n	800fdce <UART_SetConfig+0x282>
 800fdc4:	2310      	movs	r3, #16
 800fdc6:	76fb      	strb	r3, [r7, #27]
 800fdc8:	e001      	b.n	800fdce <UART_SetConfig+0x282>
 800fdca:	2310      	movs	r3, #16
 800fdcc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	4a17      	ldr	r2, [pc, #92]	; (800fe30 <UART_SetConfig+0x2e4>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	f040 8087 	bne.w	800fee8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fdda:	7efb      	ldrb	r3, [r7, #27]
 800fddc:	2b08      	cmp	r3, #8
 800fdde:	d837      	bhi.n	800fe50 <UART_SetConfig+0x304>
 800fde0:	a201      	add	r2, pc, #4	; (adr r2, 800fde8 <UART_SetConfig+0x29c>)
 800fde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde6:	bf00      	nop
 800fde8:	0800fe0d 	.word	0x0800fe0d
 800fdec:	0800fe51 	.word	0x0800fe51
 800fdf0:	0800fe15 	.word	0x0800fe15
 800fdf4:	0800fe51 	.word	0x0800fe51
 800fdf8:	0800fe1b 	.word	0x0800fe1b
 800fdfc:	0800fe51 	.word	0x0800fe51
 800fe00:	0800fe51 	.word	0x0800fe51
 800fe04:	0800fe51 	.word	0x0800fe51
 800fe08:	0800fe23 	.word	0x0800fe23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe0c:	f7fd fe64 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800fe10:	6178      	str	r0, [r7, #20]
        break;
 800fe12:	e022      	b.n	800fe5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fe14:	4b0d      	ldr	r3, [pc, #52]	; (800fe4c <UART_SetConfig+0x300>)
 800fe16:	617b      	str	r3, [r7, #20]
        break;
 800fe18:	e01f      	b.n	800fe5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fe1a:	f7fd fdc5 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800fe1e:	6178      	str	r0, [r7, #20]
        break;
 800fe20:	e01b      	b.n	800fe5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe26:	617b      	str	r3, [r7, #20]
        break;
 800fe28:	e017      	b.n	800fe5a <UART_SetConfig+0x30e>
 800fe2a:	bf00      	nop
 800fe2c:	efff69f3 	.word	0xefff69f3
 800fe30:	40008000 	.word	0x40008000
 800fe34:	40013800 	.word	0x40013800
 800fe38:	40021000 	.word	0x40021000
 800fe3c:	40004400 	.word	0x40004400
 800fe40:	40004800 	.word	0x40004800
 800fe44:	40004c00 	.word	0x40004c00
 800fe48:	40005000 	.word	0x40005000
 800fe4c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800fe50:	2300      	movs	r3, #0
 800fe52:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800fe54:	2301      	movs	r3, #1
 800fe56:	76bb      	strb	r3, [r7, #26]
        break;
 800fe58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f000 80f1 	beq.w	8010044 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	685a      	ldr	r2, [r3, #4]
 800fe66:	4613      	mov	r3, r2
 800fe68:	005b      	lsls	r3, r3, #1
 800fe6a:	4413      	add	r3, r2
 800fe6c:	697a      	ldr	r2, [r7, #20]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d305      	bcc.n	800fe7e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800fe78:	697a      	ldr	r2, [r7, #20]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d902      	bls.n	800fe84 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800fe7e:	2301      	movs	r3, #1
 800fe80:	76bb      	strb	r3, [r7, #26]
 800fe82:	e0df      	b.n	8010044 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f04f 0100 	mov.w	r1, #0
 800fe8c:	f04f 0200 	mov.w	r2, #0
 800fe90:	f04f 0300 	mov.w	r3, #0
 800fe94:	020b      	lsls	r3, r1, #8
 800fe96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fe9a:	0202      	lsls	r2, r0, #8
 800fe9c:	6879      	ldr	r1, [r7, #4]
 800fe9e:	6849      	ldr	r1, [r1, #4]
 800fea0:	0849      	lsrs	r1, r1, #1
 800fea2:	4608      	mov	r0, r1
 800fea4:	f04f 0100 	mov.w	r1, #0
 800fea8:	1814      	adds	r4, r2, r0
 800feaa:	eb43 0501 	adc.w	r5, r3, r1
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	461a      	mov	r2, r3
 800feb4:	f04f 0300 	mov.w	r3, #0
 800feb8:	4620      	mov	r0, r4
 800feba:	4629      	mov	r1, r5
 800febc:	f7f0 fe74 	bl	8000ba8 <__aeabi_uldivmod>
 800fec0:	4602      	mov	r2, r0
 800fec2:	460b      	mov	r3, r1
 800fec4:	4613      	mov	r3, r2
 800fec6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fece:	d308      	bcc.n	800fee2 <UART_SetConfig+0x396>
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fed6:	d204      	bcs.n	800fee2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	693a      	ldr	r2, [r7, #16]
 800fede:	60da      	str	r2, [r3, #12]
 800fee0:	e0b0      	b.n	8010044 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800fee2:	2301      	movs	r3, #1
 800fee4:	76bb      	strb	r3, [r7, #26]
 800fee6:	e0ad      	b.n	8010044 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	69db      	ldr	r3, [r3, #28]
 800feec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fef0:	d15c      	bne.n	800ffac <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800fef2:	7efb      	ldrb	r3, [r7, #27]
 800fef4:	2b08      	cmp	r3, #8
 800fef6:	d828      	bhi.n	800ff4a <UART_SetConfig+0x3fe>
 800fef8:	a201      	add	r2, pc, #4	; (adr r2, 800ff00 <UART_SetConfig+0x3b4>)
 800fefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fefe:	bf00      	nop
 800ff00:	0800ff25 	.word	0x0800ff25
 800ff04:	0800ff2d 	.word	0x0800ff2d
 800ff08:	0800ff35 	.word	0x0800ff35
 800ff0c:	0800ff4b 	.word	0x0800ff4b
 800ff10:	0800ff3b 	.word	0x0800ff3b
 800ff14:	0800ff4b 	.word	0x0800ff4b
 800ff18:	0800ff4b 	.word	0x0800ff4b
 800ff1c:	0800ff4b 	.word	0x0800ff4b
 800ff20:	0800ff43 	.word	0x0800ff43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff24:	f7fd fdd8 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800ff28:	6178      	str	r0, [r7, #20]
        break;
 800ff2a:	e013      	b.n	800ff54 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff2c:	f7fd fdea 	bl	800db04 <HAL_RCC_GetPCLK2Freq>
 800ff30:	6178      	str	r0, [r7, #20]
        break;
 800ff32:	e00f      	b.n	800ff54 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ff34:	4b49      	ldr	r3, [pc, #292]	; (801005c <UART_SetConfig+0x510>)
 800ff36:	617b      	str	r3, [r7, #20]
        break;
 800ff38:	e00c      	b.n	800ff54 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ff3a:	f7fd fd35 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800ff3e:	6178      	str	r0, [r7, #20]
        break;
 800ff40:	e008      	b.n	800ff54 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff46:	617b      	str	r3, [r7, #20]
        break;
 800ff48:	e004      	b.n	800ff54 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ff4e:	2301      	movs	r3, #1
 800ff50:	76bb      	strb	r3, [r7, #26]
        break;
 800ff52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d074      	beq.n	8010044 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	005a      	lsls	r2, r3, #1
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	085b      	lsrs	r3, r3, #1
 800ff64:	441a      	add	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	2b0f      	cmp	r3, #15
 800ff76:	d916      	bls.n	800ffa6 <UART_SetConfig+0x45a>
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff7e:	d212      	bcs.n	800ffa6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	f023 030f 	bic.w	r3, r3, #15
 800ff88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	085b      	lsrs	r3, r3, #1
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	f003 0307 	and.w	r3, r3, #7
 800ff94:	b29a      	uxth	r2, r3
 800ff96:	89fb      	ldrh	r3, [r7, #14]
 800ff98:	4313      	orrs	r3, r2
 800ff9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	89fa      	ldrh	r2, [r7, #14]
 800ffa2:	60da      	str	r2, [r3, #12]
 800ffa4:	e04e      	b.n	8010044 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	76bb      	strb	r3, [r7, #26]
 800ffaa:	e04b      	b.n	8010044 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ffac:	7efb      	ldrb	r3, [r7, #27]
 800ffae:	2b08      	cmp	r3, #8
 800ffb0:	d827      	bhi.n	8010002 <UART_SetConfig+0x4b6>
 800ffb2:	a201      	add	r2, pc, #4	; (adr r2, 800ffb8 <UART_SetConfig+0x46c>)
 800ffb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb8:	0800ffdd 	.word	0x0800ffdd
 800ffbc:	0800ffe5 	.word	0x0800ffe5
 800ffc0:	0800ffed 	.word	0x0800ffed
 800ffc4:	08010003 	.word	0x08010003
 800ffc8:	0800fff3 	.word	0x0800fff3
 800ffcc:	08010003 	.word	0x08010003
 800ffd0:	08010003 	.word	0x08010003
 800ffd4:	08010003 	.word	0x08010003
 800ffd8:	0800fffb 	.word	0x0800fffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ffdc:	f7fd fd7c 	bl	800dad8 <HAL_RCC_GetPCLK1Freq>
 800ffe0:	6178      	str	r0, [r7, #20]
        break;
 800ffe2:	e013      	b.n	801000c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ffe4:	f7fd fd8e 	bl	800db04 <HAL_RCC_GetPCLK2Freq>
 800ffe8:	6178      	str	r0, [r7, #20]
        break;
 800ffea:	e00f      	b.n	801000c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ffec:	4b1b      	ldr	r3, [pc, #108]	; (801005c <UART_SetConfig+0x510>)
 800ffee:	617b      	str	r3, [r7, #20]
        break;
 800fff0:	e00c      	b.n	801000c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fff2:	f7fd fcd9 	bl	800d9a8 <HAL_RCC_GetSysClockFreq>
 800fff6:	6178      	str	r0, [r7, #20]
        break;
 800fff8:	e008      	b.n	801000c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fffe:	617b      	str	r3, [r7, #20]
        break;
 8010000:	e004      	b.n	801000c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8010002:	2300      	movs	r3, #0
 8010004:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8010006:	2301      	movs	r3, #1
 8010008:	76bb      	strb	r3, [r7, #26]
        break;
 801000a:	bf00      	nop
    }

    if (pclk != 0U)
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d018      	beq.n	8010044 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	085a      	lsrs	r2, r3, #1
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	441a      	add	r2, r3
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	fbb2 f3f3 	udiv	r3, r2, r3
 8010024:	b29b      	uxth	r3, r3
 8010026:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	2b0f      	cmp	r3, #15
 801002c:	d908      	bls.n	8010040 <UART_SetConfig+0x4f4>
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010034:	d204      	bcs.n	8010040 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	693a      	ldr	r2, [r7, #16]
 801003c:	60da      	str	r2, [r3, #12]
 801003e:	e001      	b.n	8010044 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8010040:	2301      	movs	r3, #1
 8010042:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2200      	movs	r2, #0
 8010048:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2200      	movs	r2, #0
 801004e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8010050:	7ebb      	ldrb	r3, [r7, #26]
}
 8010052:	4618      	mov	r0, r3
 8010054:	3720      	adds	r7, #32
 8010056:	46bd      	mov	sp, r7
 8010058:	bdb0      	pop	{r4, r5, r7, pc}
 801005a:	bf00      	nop
 801005c:	00f42400 	.word	0x00f42400

08010060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006c:	f003 0301 	and.w	r3, r3, #1
 8010070:	2b00      	cmp	r3, #0
 8010072:	d00a      	beq.n	801008a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	430a      	orrs	r2, r1
 8010088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008e:	f003 0302 	and.w	r3, r3, #2
 8010092:	2b00      	cmp	r3, #0
 8010094:	d00a      	beq.n	80100ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	430a      	orrs	r2, r1
 80100aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b0:	f003 0304 	and.w	r3, r3, #4
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d00a      	beq.n	80100ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	430a      	orrs	r2, r1
 80100cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d2:	f003 0308 	and.w	r3, r3, #8
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d00a      	beq.n	80100f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	430a      	orrs	r2, r1
 80100ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f4:	f003 0310 	and.w	r3, r3, #16
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00a      	beq.n	8010112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	430a      	orrs	r2, r1
 8010110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010116:	f003 0320 	and.w	r3, r3, #32
 801011a:	2b00      	cmp	r3, #0
 801011c:	d00a      	beq.n	8010134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	430a      	orrs	r2, r1
 8010132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801013c:	2b00      	cmp	r3, #0
 801013e:	d01a      	beq.n	8010176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	430a      	orrs	r2, r1
 8010154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801015a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801015e:	d10a      	bne.n	8010176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	430a      	orrs	r2, r1
 8010174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00a      	beq.n	8010198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	430a      	orrs	r2, r1
 8010196:	605a      	str	r2, [r3, #4]
  }
}
 8010198:	bf00      	nop
 801019a:	370c      	adds	r7, #12
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr

080101a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b086      	sub	sp, #24
 80101a8:	af02      	add	r7, sp, #8
 80101aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2200      	movs	r2, #0
 80101b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80101b4:	f7fa ff88 	bl	800b0c8 <HAL_GetTick>
 80101b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	f003 0308 	and.w	r3, r3, #8
 80101c4:	2b08      	cmp	r3, #8
 80101c6:	d10e      	bne.n	80101e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80101c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80101cc:	9300      	str	r3, [sp, #0]
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2200      	movs	r2, #0
 80101d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 f82d 	bl	8010236 <UART_WaitOnFlagUntilTimeout>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d001      	beq.n	80101e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80101e2:	2303      	movs	r3, #3
 80101e4:	e023      	b.n	801022e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f003 0304 	and.w	r3, r3, #4
 80101f0:	2b04      	cmp	r3, #4
 80101f2:	d10e      	bne.n	8010212 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80101f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80101f8:	9300      	str	r3, [sp, #0]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	2200      	movs	r2, #0
 80101fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f000 f817 	bl	8010236 <UART_WaitOnFlagUntilTimeout>
 8010208:	4603      	mov	r3, r0
 801020a:	2b00      	cmp	r3, #0
 801020c:	d001      	beq.n	8010212 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801020e:	2303      	movs	r3, #3
 8010210:	e00d      	b.n	801022e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2220      	movs	r2, #32
 8010216:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2220      	movs	r2, #32
 801021c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 801022c:	2300      	movs	r3, #0
}
 801022e:	4618      	mov	r0, r3
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b084      	sub	sp, #16
 801023a:	af00      	add	r7, sp, #0
 801023c:	60f8      	str	r0, [r7, #12]
 801023e:	60b9      	str	r1, [r7, #8]
 8010240:	603b      	str	r3, [r7, #0]
 8010242:	4613      	mov	r3, r2
 8010244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010246:	e05e      	b.n	8010306 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801024e:	d05a      	beq.n	8010306 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010250:	f7fa ff3a 	bl	800b0c8 <HAL_GetTick>
 8010254:	4602      	mov	r2, r0
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	1ad3      	subs	r3, r2, r3
 801025a:	69ba      	ldr	r2, [r7, #24]
 801025c:	429a      	cmp	r2, r3
 801025e:	d302      	bcc.n	8010266 <UART_WaitOnFlagUntilTimeout+0x30>
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d11b      	bne.n	801029e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	681a      	ldr	r2, [r3, #0]
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010274:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	689a      	ldr	r2, [r3, #8]
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f022 0201 	bic.w	r2, r2, #1
 8010284:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2220      	movs	r2, #32
 801028a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2220      	movs	r2, #32
 8010290:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2200      	movs	r2, #0
 8010296:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 801029a:	2303      	movs	r3, #3
 801029c:	e043      	b.n	8010326 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	f003 0304 	and.w	r3, r3, #4
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d02c      	beq.n	8010306 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	69db      	ldr	r3, [r3, #28]
 80102b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80102b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80102ba:	d124      	bne.n	8010306 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80102c4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80102d4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	689a      	ldr	r2, [r3, #8]
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f022 0201 	bic.w	r2, r2, #1
 80102e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2220      	movs	r2, #32
 80102ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2220      	movs	r2, #32
 80102f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2220      	movs	r2, #32
 80102f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2200      	movs	r2, #0
 80102fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010302:	2303      	movs	r3, #3
 8010304:	e00f      	b.n	8010326 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	69da      	ldr	r2, [r3, #28]
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	4013      	ands	r3, r2
 8010310:	68ba      	ldr	r2, [r7, #8]
 8010312:	429a      	cmp	r2, r3
 8010314:	bf0c      	ite	eq
 8010316:	2301      	moveq	r3, #1
 8010318:	2300      	movne	r3, #0
 801031a:	b2db      	uxtb	r3, r3
 801031c:	461a      	mov	r2, r3
 801031e:	79fb      	ldrb	r3, [r7, #7]
 8010320:	429a      	cmp	r2, r3
 8010322:	d091      	beq.n	8010248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801032e:	b084      	sub	sp, #16
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	f107 001c 	add.w	r0, r7, #28
 801033c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f000 fa23 	bl	8010798 <USB_CoreReset>
 8010352:	4603      	mov	r3, r0
 8010354:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8010356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010358:	2b00      	cmp	r3, #0
 801035a:	d106      	bne.n	801036a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010360:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	639a      	str	r2, [r3, #56]	; 0x38
 8010368:	e005      	b.n	8010376 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801036e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8010376:	7bfb      	ldrb	r3, [r7, #15]
}
 8010378:	4618      	mov	r0, r3
 801037a:	3710      	adds	r7, #16
 801037c:	46bd      	mov	sp, r7
 801037e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010382:	b004      	add	sp, #16
 8010384:	4770      	bx	lr

08010386 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010386:	b480      	push	{r7}
 8010388:	b083      	sub	sp, #12
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	f023 0201 	bic.w	r2, r3, #1
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801039a:	2300      	movs	r3, #0
}
 801039c:	4618      	mov	r0, r3
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	460b      	mov	r3, r1
 80103b2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80103c0:	78fb      	ldrb	r3, [r7, #3]
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	d106      	bne.n	80103d4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	68db      	ldr	r3, [r3, #12]
 80103ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	60da      	str	r2, [r3, #12]
 80103d2:	e00b      	b.n	80103ec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80103d4:	78fb      	ldrb	r3, [r7, #3]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d106      	bne.n	80103e8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	60da      	str	r2, [r3, #12]
 80103e6:	e001      	b.n	80103ec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80103e8:	2301      	movs	r3, #1
 80103ea:	e003      	b.n	80103f4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80103ec:	2032      	movs	r0, #50	; 0x32
 80103ee:	f7fa fe77 	bl	800b0e0 <HAL_Delay>

  return HAL_OK;
 80103f2:	2300      	movs	r3, #0
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80103fc:	b084      	sub	sp, #16
 80103fe:	b580      	push	{r7, lr}
 8010400:	b086      	sub	sp, #24
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
 8010406:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801040a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801040e:	2300      	movs	r3, #0
 8010410:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010416:	2300      	movs	r3, #0
 8010418:	613b      	str	r3, [r7, #16]
 801041a:	e009      	b.n	8010430 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801041c:	687a      	ldr	r2, [r7, #4]
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	3340      	adds	r3, #64	; 0x40
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	4413      	add	r3, r2
 8010426:	2200      	movs	r2, #0
 8010428:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	3301      	adds	r3, #1
 801042e:	613b      	str	r3, [r7, #16]
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	2b0e      	cmp	r3, #14
 8010434:	d9f2      	bls.n	801041c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010438:	2b00      	cmp	r3, #0
 801043a:	d11c      	bne.n	8010476 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	68fa      	ldr	r2, [r7, #12]
 8010446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801044a:	f043 0302 	orr.w	r3, r3, #2
 801044e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010454:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	601a      	str	r2, [r3, #0]
 8010474:	e005      	b.n	8010482 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801047a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010488:	461a      	mov	r2, r3
 801048a:	2300      	movs	r3, #0
 801048c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010494:	4619      	mov	r1, r3
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801049c:	461a      	mov	r2, r3
 801049e:	680b      	ldr	r3, [r1, #0]
 80104a0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80104a2:	2103      	movs	r1, #3
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f000 f93d 	bl	8010724 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80104aa:	2110      	movs	r1, #16
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 f8f1 	bl	8010694 <USB_FlushTxFifo>
 80104b2:	4603      	mov	r3, r0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d001      	beq.n	80104bc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80104b8:	2301      	movs	r3, #1
 80104ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f000 f90f 	bl	80106e0 <USB_FlushRxFifo>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d001      	beq.n	80104cc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80104c8:	2301      	movs	r3, #1
 80104ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104d2:	461a      	mov	r2, r3
 80104d4:	2300      	movs	r3, #0
 80104d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104de:	461a      	mov	r2, r3
 80104e0:	2300      	movs	r3, #0
 80104e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104ea:	461a      	mov	r2, r3
 80104ec:	2300      	movs	r3, #0
 80104ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80104f0:	2300      	movs	r3, #0
 80104f2:	613b      	str	r3, [r7, #16]
 80104f4:	e043      	b.n	801057e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	015a      	lsls	r2, r3, #5
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	4413      	add	r3, r2
 80104fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801050c:	d118      	bne.n	8010540 <USB_DevInit+0x144>
    {
      if (i == 0U)
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d10a      	bne.n	801052a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	015a      	lsls	r2, r3, #5
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	4413      	add	r3, r2
 801051c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010520:	461a      	mov	r2, r3
 8010522:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010526:	6013      	str	r3, [r2, #0]
 8010528:	e013      	b.n	8010552 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	015a      	lsls	r2, r3, #5
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	4413      	add	r3, r2
 8010532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010536:	461a      	mov	r2, r3
 8010538:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801053c:	6013      	str	r3, [r2, #0]
 801053e:	e008      	b.n	8010552 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	015a      	lsls	r2, r3, #5
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	4413      	add	r3, r2
 8010548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801054c:	461a      	mov	r2, r3
 801054e:	2300      	movs	r3, #0
 8010550:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	015a      	lsls	r2, r3, #5
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	4413      	add	r3, r2
 801055a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801055e:	461a      	mov	r2, r3
 8010560:	2300      	movs	r3, #0
 8010562:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	015a      	lsls	r2, r3, #5
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	4413      	add	r3, r2
 801056c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010570:	461a      	mov	r2, r3
 8010572:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010576:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	3301      	adds	r3, #1
 801057c:	613b      	str	r3, [r7, #16]
 801057e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010580:	693a      	ldr	r2, [r7, #16]
 8010582:	429a      	cmp	r2, r3
 8010584:	d3b7      	bcc.n	80104f6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010586:	2300      	movs	r3, #0
 8010588:	613b      	str	r3, [r7, #16]
 801058a:	e043      	b.n	8010614 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	015a      	lsls	r2, r3, #5
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	4413      	add	r3, r2
 8010594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801059e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80105a2:	d118      	bne.n	80105d6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d10a      	bne.n	80105c0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	015a      	lsls	r2, r3, #5
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	4413      	add	r3, r2
 80105b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105b6:	461a      	mov	r2, r3
 80105b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80105bc:	6013      	str	r3, [r2, #0]
 80105be:	e013      	b.n	80105e8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	015a      	lsls	r2, r3, #5
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	4413      	add	r3, r2
 80105c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105cc:	461a      	mov	r2, r3
 80105ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80105d2:	6013      	str	r3, [r2, #0]
 80105d4:	e008      	b.n	80105e8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	015a      	lsls	r2, r3, #5
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	4413      	add	r3, r2
 80105de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105e2:	461a      	mov	r2, r3
 80105e4:	2300      	movs	r3, #0
 80105e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	015a      	lsls	r2, r3, #5
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	4413      	add	r3, r2
 80105f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105f4:	461a      	mov	r2, r3
 80105f6:	2300      	movs	r3, #0
 80105f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	015a      	lsls	r2, r3, #5
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	4413      	add	r3, r2
 8010602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010606:	461a      	mov	r2, r3
 8010608:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801060c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	3301      	adds	r3, #1
 8010612:	613b      	str	r3, [r7, #16]
 8010614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010616:	693a      	ldr	r2, [r7, #16]
 8010618:	429a      	cmp	r2, r3
 801061a:	d3b7      	bcc.n	801058c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010622:	691b      	ldr	r3, [r3, #16]
 8010624:	68fa      	ldr	r2, [r7, #12]
 8010626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801062a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801062e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2200      	movs	r2, #0
 8010634:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801063c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	699b      	ldr	r3, [r3, #24]
 8010642:	f043 0210 	orr.w	r2, r3, #16
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	699a      	ldr	r2, [r3, #24]
 801064e:	4b10      	ldr	r3, [pc, #64]	; (8010690 <USB_DevInit+0x294>)
 8010650:	4313      	orrs	r3, r2
 8010652:	687a      	ldr	r2, [r7, #4]
 8010654:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010658:	2b00      	cmp	r3, #0
 801065a:	d005      	beq.n	8010668 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	699b      	ldr	r3, [r3, #24]
 8010660:	f043 0208 	orr.w	r2, r3, #8
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801066a:	2b01      	cmp	r3, #1
 801066c:	d107      	bne.n	801067e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	699b      	ldr	r3, [r3, #24]
 8010672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010676:	f043 0304 	orr.w	r3, r3, #4
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801067e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010680:	4618      	mov	r0, r3
 8010682:	3718      	adds	r7, #24
 8010684:	46bd      	mov	sp, r7
 8010686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801068a:	b004      	add	sp, #16
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	803c3800 	.word	0x803c3800

08010694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010694:	b480      	push	{r7}
 8010696:	b085      	sub	sp, #20
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801069e:	2300      	movs	r3, #0
 80106a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	019b      	lsls	r3, r3, #6
 80106a6:	f043 0220 	orr.w	r2, r3, #32
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	3301      	adds	r3, #1
 80106b2:	60fb      	str	r3, [r7, #12]
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	4a09      	ldr	r2, [pc, #36]	; (80106dc <USB_FlushTxFifo+0x48>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d901      	bls.n	80106c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80106bc:	2303      	movs	r3, #3
 80106be:	e006      	b.n	80106ce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	691b      	ldr	r3, [r3, #16]
 80106c4:	f003 0320 	and.w	r3, r3, #32
 80106c8:	2b20      	cmp	r3, #32
 80106ca:	d0f0      	beq.n	80106ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3714      	adds	r7, #20
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	00030d40 	.word	0x00030d40

080106e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80106e0:	b480      	push	{r7}
 80106e2:	b085      	sub	sp, #20
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80106e8:	2300      	movs	r3, #0
 80106ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2210      	movs	r2, #16
 80106f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	3301      	adds	r3, #1
 80106f6:	60fb      	str	r3, [r7, #12]
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	4a09      	ldr	r2, [pc, #36]	; (8010720 <USB_FlushRxFifo+0x40>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d901      	bls.n	8010704 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8010700:	2303      	movs	r3, #3
 8010702:	e006      	b.n	8010712 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	691b      	ldr	r3, [r3, #16]
 8010708:	f003 0310 	and.w	r3, r3, #16
 801070c:	2b10      	cmp	r3, #16
 801070e:	d0f0      	beq.n	80106f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8010710:	2300      	movs	r3, #0
}
 8010712:	4618      	mov	r0, r3
 8010714:	3714      	adds	r7, #20
 8010716:	46bd      	mov	sp, r7
 8010718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071c:	4770      	bx	lr
 801071e:	bf00      	nop
 8010720:	00030d40 	.word	0x00030d40

08010724 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010724:	b480      	push	{r7}
 8010726:	b085      	sub	sp, #20
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	460b      	mov	r3, r1
 801072e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	78fb      	ldrb	r3, [r7, #3]
 801073e:	68f9      	ldr	r1, [r7, #12]
 8010740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010744:	4313      	orrs	r3, r2
 8010746:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010748:	2300      	movs	r3, #0
}
 801074a:	4618      	mov	r0, r3
 801074c:	3714      	adds	r7, #20
 801074e:	46bd      	mov	sp, r7
 8010750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010754:	4770      	bx	lr

08010756 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010756:	b480      	push	{r7}
 8010758:	b085      	sub	sp, #20
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010770:	f023 0303 	bic.w	r3, r3, #3
 8010774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	68fa      	ldr	r2, [r7, #12]
 8010780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010784:	f043 0302 	orr.w	r3, r3, #2
 8010788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801078a:	2300      	movs	r3, #0
}
 801078c:	4618      	mov	r0, r3
 801078e:	3714      	adds	r7, #20
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80107a0:	2300      	movs	r3, #0
 80107a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	3301      	adds	r3, #1
 80107a8:	60fb      	str	r3, [r7, #12]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	4a13      	ldr	r2, [pc, #76]	; (80107fc <USB_CoreReset+0x64>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d901      	bls.n	80107b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80107b2:	2303      	movs	r3, #3
 80107b4:	e01b      	b.n	80107ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	691b      	ldr	r3, [r3, #16]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	daf2      	bge.n	80107a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80107be:	2300      	movs	r3, #0
 80107c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	691b      	ldr	r3, [r3, #16]
 80107c6:	f043 0201 	orr.w	r2, r3, #1
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	3301      	adds	r3, #1
 80107d2:	60fb      	str	r3, [r7, #12]
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	4a09      	ldr	r2, [pc, #36]	; (80107fc <USB_CoreReset+0x64>)
 80107d8:	4293      	cmp	r3, r2
 80107da:	d901      	bls.n	80107e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80107dc:	2303      	movs	r3, #3
 80107de:	e006      	b.n	80107ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	691b      	ldr	r3, [r3, #16]
 80107e4:	f003 0301 	and.w	r3, r3, #1
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d0f0      	beq.n	80107ce <USB_CoreReset+0x36>

  return HAL_OK;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3714      	adds	r7, #20
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr
 80107fa:	bf00      	nop
 80107fc:	00030d40 	.word	0x00030d40

08010800 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	4603      	mov	r3, r0
 8010808:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801080a:	2300      	movs	r3, #0
 801080c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801080e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010812:	2b84      	cmp	r3, #132	; 0x84
 8010814:	d005      	beq.n	8010822 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010816:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	4413      	add	r3, r2
 801081e:	3303      	adds	r3, #3
 8010820:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010822:	68fb      	ldr	r3, [r7, #12]
}
 8010824:	4618      	mov	r0, r3
 8010826:	3714      	adds	r7, #20
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010834:	f000 fafe 	bl	8010e34 <vTaskStartScheduler>
  
  return osOK;
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	bd80      	pop	{r7, pc}

0801083e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801083e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010840:	b089      	sub	sp, #36	; 0x24
 8010842:	af04      	add	r7, sp, #16
 8010844:	6078      	str	r0, [r7, #4]
 8010846:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	695b      	ldr	r3, [r3, #20]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d020      	beq.n	8010892 <osThreadCreate+0x54>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	699b      	ldr	r3, [r3, #24]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d01c      	beq.n	8010892 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	685c      	ldr	r4, [r3, #4]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681d      	ldr	r5, [r3, #0]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	691e      	ldr	r6, [r3, #16]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801086a:	4618      	mov	r0, r3
 801086c:	f7ff ffc8 	bl	8010800 <makeFreeRtosPriority>
 8010870:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	695b      	ldr	r3, [r3, #20]
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801087a:	9202      	str	r2, [sp, #8]
 801087c:	9301      	str	r3, [sp, #4]
 801087e:	9100      	str	r1, [sp, #0]
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	4632      	mov	r2, r6
 8010884:	4629      	mov	r1, r5
 8010886:	4620      	mov	r0, r4
 8010888:	f000 f8ed 	bl	8010a66 <xTaskCreateStatic>
 801088c:	4603      	mov	r3, r0
 801088e:	60fb      	str	r3, [r7, #12]
 8010890:	e01c      	b.n	80108cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	685c      	ldr	r4, [r3, #4]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801089e:	b29e      	uxth	r6, r3
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7ff ffaa 	bl	8010800 <makeFreeRtosPriority>
 80108ac:	4602      	mov	r2, r0
 80108ae:	f107 030c 	add.w	r3, r7, #12
 80108b2:	9301      	str	r3, [sp, #4]
 80108b4:	9200      	str	r2, [sp, #0]
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	4632      	mov	r2, r6
 80108ba:	4629      	mov	r1, r5
 80108bc:	4620      	mov	r0, r4
 80108be:	f000 f92f 	bl	8010b20 <xTaskCreate>
 80108c2:	4603      	mov	r3, r0
 80108c4:	2b01      	cmp	r3, #1
 80108c6:	d001      	beq.n	80108cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80108c8:	2300      	movs	r3, #0
 80108ca:	e000      	b.n	80108ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80108cc:	68fb      	ldr	r3, [r7, #12]
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3714      	adds	r7, #20
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080108d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b084      	sub	sp, #16
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d001      	beq.n	80108ec <osDelay+0x16>
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	e000      	b.n	80108ee <osDelay+0x18>
 80108ec:	2301      	movs	r3, #1
 80108ee:	4618      	mov	r0, r3
 80108f0:	f000 fa6c 	bl	8010dcc <vTaskDelay>
  
  return osOK;
 80108f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3710      	adds	r7, #16
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}

080108fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80108fe:	b480      	push	{r7}
 8010900:	b083      	sub	sp, #12
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f103 0208 	add.w	r2, r3, #8
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f04f 32ff 	mov.w	r2, #4294967295
 8010916:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f103 0208 	add.w	r2, r3, #8
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f103 0208 	add.w	r2, r3, #8
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2200      	movs	r2, #0
 8010930:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010932:	bf00      	nop
 8010934:	370c      	adds	r7, #12
 8010936:	46bd      	mov	sp, r7
 8010938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093c:	4770      	bx	lr

0801093e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801093e:	b480      	push	{r7}
 8010940:	b083      	sub	sp, #12
 8010942:	af00      	add	r7, sp, #0
 8010944:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2200      	movs	r2, #0
 801094a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801094c:	bf00      	nop
 801094e:	370c      	adds	r7, #12
 8010950:	46bd      	mov	sp, r7
 8010952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010956:	4770      	bx	lr

08010958 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010958:	b480      	push	{r7}
 801095a:	b085      	sub	sp, #20
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	68fa      	ldr	r2, [r7, #12]
 801096c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	689a      	ldr	r2, [r3, #8]
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	689b      	ldr	r3, [r3, #8]
 801097a:	683a      	ldr	r2, [r7, #0]
 801097c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	683a      	ldr	r2, [r7, #0]
 8010982:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	687a      	ldr	r2, [r7, #4]
 8010988:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	1c5a      	adds	r2, r3, #1
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	601a      	str	r2, [r3, #0]
}
 8010994:	bf00      	nop
 8010996:	3714      	adds	r7, #20
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr

080109a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80109a0:	b480      	push	{r7}
 80109a2:	b085      	sub	sp, #20
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b6:	d103      	bne.n	80109c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	691b      	ldr	r3, [r3, #16]
 80109bc:	60fb      	str	r3, [r7, #12]
 80109be:	e00c      	b.n	80109da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	3308      	adds	r3, #8
 80109c4:	60fb      	str	r3, [r7, #12]
 80109c6:	e002      	b.n	80109ce <vListInsert+0x2e>
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	60fb      	str	r3, [r7, #12]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	68ba      	ldr	r2, [r7, #8]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d2f6      	bcs.n	80109c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	685a      	ldr	r2, [r3, #4]
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	683a      	ldr	r2, [r7, #0]
 80109e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	68fa      	ldr	r2, [r7, #12]
 80109ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	683a      	ldr	r2, [r7, #0]
 80109f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	1c5a      	adds	r2, r3, #1
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	601a      	str	r2, [r3, #0]
}
 8010a06:	bf00      	nop
 8010a08:	3714      	adds	r7, #20
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010a12:	b480      	push	{r7}
 8010a14:	b085      	sub	sp, #20
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	691b      	ldr	r3, [r3, #16]
 8010a1e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	6892      	ldr	r2, [r2, #8]
 8010a28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	689b      	ldr	r3, [r3, #8]
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	6852      	ldr	r2, [r2, #4]
 8010a32:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	685b      	ldr	r3, [r3, #4]
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d103      	bne.n	8010a46 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	689a      	ldr	r2, [r3, #8]
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	1e5a      	subs	r2, r3, #1
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	681b      	ldr	r3, [r3, #0]
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3714      	adds	r7, #20
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr

08010a66 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b08e      	sub	sp, #56	; 0x38
 8010a6a:	af04      	add	r7, sp, #16
 8010a6c:	60f8      	str	r0, [r7, #12]
 8010a6e:	60b9      	str	r1, [r7, #8]
 8010a70:	607a      	str	r2, [r7, #4]
 8010a72:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d10a      	bne.n	8010a90 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a7e:	f383 8811 	msr	BASEPRI, r3
 8010a82:	f3bf 8f6f 	isb	sy
 8010a86:	f3bf 8f4f 	dsb	sy
 8010a8a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010a8c:	bf00      	nop
 8010a8e:	e7fe      	b.n	8010a8e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d10a      	bne.n	8010aac <xTaskCreateStatic+0x46>
	__asm volatile
 8010a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a9a:	f383 8811 	msr	BASEPRI, r3
 8010a9e:	f3bf 8f6f 	isb	sy
 8010aa2:	f3bf 8f4f 	dsb	sy
 8010aa6:	61fb      	str	r3, [r7, #28]
}
 8010aa8:	bf00      	nop
 8010aaa:	e7fe      	b.n	8010aaa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010aac:	23c4      	movs	r3, #196	; 0xc4
 8010aae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	2bc4      	cmp	r3, #196	; 0xc4
 8010ab4:	d00a      	beq.n	8010acc <xTaskCreateStatic+0x66>
	__asm volatile
 8010ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aba:	f383 8811 	msr	BASEPRI, r3
 8010abe:	f3bf 8f6f 	isb	sy
 8010ac2:	f3bf 8f4f 	dsb	sy
 8010ac6:	61bb      	str	r3, [r7, #24]
}
 8010ac8:	bf00      	nop
 8010aca:	e7fe      	b.n	8010aca <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010acc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d01e      	beq.n	8010b12 <xTaskCreateStatic+0xac>
 8010ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d01b      	beq.n	8010b12 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010adc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ae2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae6:	2202      	movs	r2, #2
 8010ae8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010aec:	2300      	movs	r3, #0
 8010aee:	9303      	str	r3, [sp, #12]
 8010af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af2:	9302      	str	r3, [sp, #8]
 8010af4:	f107 0314 	add.w	r3, r7, #20
 8010af8:	9301      	str	r3, [sp, #4]
 8010afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	68b9      	ldr	r1, [r7, #8]
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	f000 f851 	bl	8010bac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b0c:	f000 f8f4 	bl	8010cf8 <prvAddNewTaskToReadyList>
 8010b10:	e001      	b.n	8010b16 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010b12:	2300      	movs	r3, #0
 8010b14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010b16:	697b      	ldr	r3, [r7, #20]
	}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3728      	adds	r7, #40	; 0x28
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b08c      	sub	sp, #48	; 0x30
 8010b24:	af04      	add	r7, sp, #16
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	603b      	str	r3, [r7, #0]
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010b30:	88fb      	ldrh	r3, [r7, #6]
 8010b32:	009b      	lsls	r3, r3, #2
 8010b34:	4618      	mov	r0, r3
 8010b36:	f000 fef7 	bl	8011928 <pvPortMalloc>
 8010b3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d00e      	beq.n	8010b60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010b42:	20c4      	movs	r0, #196	; 0xc4
 8010b44:	f000 fef0 	bl	8011928 <pvPortMalloc>
 8010b48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d003      	beq.n	8010b58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	697a      	ldr	r2, [r7, #20]
 8010b54:	631a      	str	r2, [r3, #48]	; 0x30
 8010b56:	e005      	b.n	8010b64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010b58:	6978      	ldr	r0, [r7, #20]
 8010b5a:	f000 ffb1 	bl	8011ac0 <vPortFree>
 8010b5e:	e001      	b.n	8010b64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010b60:	2300      	movs	r3, #0
 8010b62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d017      	beq.n	8010b9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010b72:	88fa      	ldrh	r2, [r7, #6]
 8010b74:	2300      	movs	r3, #0
 8010b76:	9303      	str	r3, [sp, #12]
 8010b78:	69fb      	ldr	r3, [r7, #28]
 8010b7a:	9302      	str	r3, [sp, #8]
 8010b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b7e:	9301      	str	r3, [sp, #4]
 8010b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b82:	9300      	str	r3, [sp, #0]
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	68b9      	ldr	r1, [r7, #8]
 8010b88:	68f8      	ldr	r0, [r7, #12]
 8010b8a:	f000 f80f 	bl	8010bac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b8e:	69f8      	ldr	r0, [r7, #28]
 8010b90:	f000 f8b2 	bl	8010cf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010b94:	2301      	movs	r3, #1
 8010b96:	61bb      	str	r3, [r7, #24]
 8010b98:	e002      	b.n	8010ba0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010ba0:	69bb      	ldr	r3, [r7, #24]
	}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3720      	adds	r7, #32
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
	...

08010bac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b088      	sub	sp, #32
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	607a      	str	r2, [r7, #4]
 8010bb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	21a5      	movs	r1, #165	; 0xa5
 8010bc6:	f001 f9ca 	bl	8011f5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	4413      	add	r3, r2
 8010bda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010bdc:	69bb      	ldr	r3, [r7, #24]
 8010bde:	f023 0307 	bic.w	r3, r3, #7
 8010be2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010be4:	69bb      	ldr	r3, [r7, #24]
 8010be6:	f003 0307 	and.w	r3, r3, #7
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00a      	beq.n	8010c04 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf2:	f383 8811 	msr	BASEPRI, r3
 8010bf6:	f3bf 8f6f 	isb	sy
 8010bfa:	f3bf 8f4f 	dsb	sy
 8010bfe:	617b      	str	r3, [r7, #20]
}
 8010c00:	bf00      	nop
 8010c02:	e7fe      	b.n	8010c02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d01f      	beq.n	8010c4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	61fb      	str	r3, [r7, #28]
 8010c0e:	e012      	b.n	8010c36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010c10:	68ba      	ldr	r2, [r7, #8]
 8010c12:	69fb      	ldr	r3, [r7, #28]
 8010c14:	4413      	add	r3, r2
 8010c16:	7819      	ldrb	r1, [r3, #0]
 8010c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	4413      	add	r3, r2
 8010c1e:	3334      	adds	r3, #52	; 0x34
 8010c20:	460a      	mov	r2, r1
 8010c22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010c24:	68ba      	ldr	r2, [r7, #8]
 8010c26:	69fb      	ldr	r3, [r7, #28]
 8010c28:	4413      	add	r3, r2
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d006      	beq.n	8010c3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	3301      	adds	r3, #1
 8010c34:	61fb      	str	r3, [r7, #28]
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	2b1f      	cmp	r3, #31
 8010c3a:	d9e9      	bls.n	8010c10 <prvInitialiseNewTask+0x64>
 8010c3c:	e000      	b.n	8010c40 <prvInitialiseNewTask+0x94>
			{
				break;
 8010c3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c42:	2200      	movs	r2, #0
 8010c44:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8010c48:	e003      	b.n	8010c52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c54:	2b06      	cmp	r3, #6
 8010c56:	d901      	bls.n	8010c5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010c58:	2306      	movs	r3, #6
 8010c5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c66:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8010c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c70:	3304      	adds	r3, #4
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7ff fe63 	bl	801093e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7a:	3318      	adds	r3, #24
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7ff fe5e 	bl	801093e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8a:	f1c3 0207 	rsb	r2, r3, #7
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010caa:	335c      	adds	r3, #92	; 0x5c
 8010cac:	2260      	movs	r2, #96	; 0x60
 8010cae:	2100      	movs	r1, #0
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f001 f954 	bl	8011f5e <memset>
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb8:	4a0c      	ldr	r2, [pc, #48]	; (8010cec <prvInitialiseNewTask+0x140>)
 8010cba:	661a      	str	r2, [r3, #96]	; 0x60
 8010cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cbe:	4a0c      	ldr	r2, [pc, #48]	; (8010cf0 <prvInitialiseNewTask+0x144>)
 8010cc0:	665a      	str	r2, [r3, #100]	; 0x64
 8010cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc4:	4a0b      	ldr	r2, [pc, #44]	; (8010cf4 <prvInitialiseNewTask+0x148>)
 8010cc6:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010cc8:	683a      	ldr	r2, [r7, #0]
 8010cca:	68f9      	ldr	r1, [r7, #12]
 8010ccc:	69b8      	ldr	r0, [r7, #24]
 8010cce:	f000 fc1f 	bl	8011510 <pxPortInitialiseStack>
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d002      	beq.n	8010ce4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ce2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ce4:	bf00      	nop
 8010ce6:	3720      	adds	r7, #32
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	080156fc 	.word	0x080156fc
 8010cf0:	0801571c 	.word	0x0801571c
 8010cf4:	080156dc 	.word	0x080156dc

08010cf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010d00:	f000 fd30 	bl	8011764 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010d04:	4b2a      	ldr	r3, [pc, #168]	; (8010db0 <prvAddNewTaskToReadyList+0xb8>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	3301      	adds	r3, #1
 8010d0a:	4a29      	ldr	r2, [pc, #164]	; (8010db0 <prvAddNewTaskToReadyList+0xb8>)
 8010d0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010d0e:	4b29      	ldr	r3, [pc, #164]	; (8010db4 <prvAddNewTaskToReadyList+0xbc>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d109      	bne.n	8010d2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010d16:	4a27      	ldr	r2, [pc, #156]	; (8010db4 <prvAddNewTaskToReadyList+0xbc>)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010d1c:	4b24      	ldr	r3, [pc, #144]	; (8010db0 <prvAddNewTaskToReadyList+0xb8>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d110      	bne.n	8010d46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010d24:	f000 facc 	bl	80112c0 <prvInitialiseTaskLists>
 8010d28:	e00d      	b.n	8010d46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010d2a:	4b23      	ldr	r3, [pc, #140]	; (8010db8 <prvAddNewTaskToReadyList+0xc0>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d109      	bne.n	8010d46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010d32:	4b20      	ldr	r3, [pc, #128]	; (8010db4 <prvAddNewTaskToReadyList+0xbc>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d802      	bhi.n	8010d46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010d40:	4a1c      	ldr	r2, [pc, #112]	; (8010db4 <prvAddNewTaskToReadyList+0xbc>)
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010d46:	4b1d      	ldr	r3, [pc, #116]	; (8010dbc <prvAddNewTaskToReadyList+0xc4>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	4a1b      	ldr	r2, [pc, #108]	; (8010dbc <prvAddNewTaskToReadyList+0xc4>)
 8010d4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d54:	2201      	movs	r2, #1
 8010d56:	409a      	lsls	r2, r3
 8010d58:	4b19      	ldr	r3, [pc, #100]	; (8010dc0 <prvAddNewTaskToReadyList+0xc8>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	4a18      	ldr	r2, [pc, #96]	; (8010dc0 <prvAddNewTaskToReadyList+0xc8>)
 8010d60:	6013      	str	r3, [r2, #0]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d66:	4613      	mov	r3, r2
 8010d68:	009b      	lsls	r3, r3, #2
 8010d6a:	4413      	add	r3, r2
 8010d6c:	009b      	lsls	r3, r3, #2
 8010d6e:	4a15      	ldr	r2, [pc, #84]	; (8010dc4 <prvAddNewTaskToReadyList+0xcc>)
 8010d70:	441a      	add	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	3304      	adds	r3, #4
 8010d76:	4619      	mov	r1, r3
 8010d78:	4610      	mov	r0, r2
 8010d7a:	f7ff fded 	bl	8010958 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010d7e:	f000 fd21 	bl	80117c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010d82:	4b0d      	ldr	r3, [pc, #52]	; (8010db8 <prvAddNewTaskToReadyList+0xc0>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d00e      	beq.n	8010da8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d8a:	4b0a      	ldr	r3, [pc, #40]	; (8010db4 <prvAddNewTaskToReadyList+0xbc>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d207      	bcs.n	8010da8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010d98:	4b0b      	ldr	r3, [pc, #44]	; (8010dc8 <prvAddNewTaskToReadyList+0xd0>)
 8010d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d9e:	601a      	str	r2, [r3, #0]
 8010da0:	f3bf 8f4f 	dsb	sy
 8010da4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010da8:	bf00      	nop
 8010daa:	3708      	adds	r7, #8
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	20000dec 	.word	0x20000dec
 8010db4:	20000cec 	.word	0x20000cec
 8010db8:	20000df8 	.word	0x20000df8
 8010dbc:	20000e08 	.word	0x20000e08
 8010dc0:	20000df4 	.word	0x20000df4
 8010dc4:	20000cf0 	.word	0x20000cf0
 8010dc8:	e000ed04 	.word	0xe000ed04

08010dcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d017      	beq.n	8010e0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010dde:	4b13      	ldr	r3, [pc, #76]	; (8010e2c <vTaskDelay+0x60>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d00a      	beq.n	8010dfc <vTaskDelay+0x30>
	__asm volatile
 8010de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dea:	f383 8811 	msr	BASEPRI, r3
 8010dee:	f3bf 8f6f 	isb	sy
 8010df2:	f3bf 8f4f 	dsb	sy
 8010df6:	60bb      	str	r3, [r7, #8]
}
 8010df8:	bf00      	nop
 8010dfa:	e7fe      	b.n	8010dfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010dfc:	f000 f884 	bl	8010f08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010e00:	2100      	movs	r1, #0
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f000 fb1e 	bl	8011444 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010e08:	f000 f88c 	bl	8010f24 <xTaskResumeAll>
 8010e0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d107      	bne.n	8010e24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010e14:	4b06      	ldr	r3, [pc, #24]	; (8010e30 <vTaskDelay+0x64>)
 8010e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e1a:	601a      	str	r2, [r3, #0]
 8010e1c:	f3bf 8f4f 	dsb	sy
 8010e20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e24:	bf00      	nop
 8010e26:	3710      	adds	r7, #16
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	20000e14 	.word	0x20000e14
 8010e30:	e000ed04 	.word	0xe000ed04

08010e34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b08a      	sub	sp, #40	; 0x28
 8010e38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010e42:	463a      	mov	r2, r7
 8010e44:	1d39      	adds	r1, r7, #4
 8010e46:	f107 0308 	add.w	r3, r7, #8
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7f0 f828 	bl	8000ea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010e50:	6839      	ldr	r1, [r7, #0]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	68ba      	ldr	r2, [r7, #8]
 8010e56:	9202      	str	r2, [sp, #8]
 8010e58:	9301      	str	r3, [sp, #4]
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	9300      	str	r3, [sp, #0]
 8010e5e:	2300      	movs	r3, #0
 8010e60:	460a      	mov	r2, r1
 8010e62:	4921      	ldr	r1, [pc, #132]	; (8010ee8 <vTaskStartScheduler+0xb4>)
 8010e64:	4821      	ldr	r0, [pc, #132]	; (8010eec <vTaskStartScheduler+0xb8>)
 8010e66:	f7ff fdfe 	bl	8010a66 <xTaskCreateStatic>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	4a20      	ldr	r2, [pc, #128]	; (8010ef0 <vTaskStartScheduler+0xbc>)
 8010e6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010e70:	4b1f      	ldr	r3, [pc, #124]	; (8010ef0 <vTaskStartScheduler+0xbc>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d002      	beq.n	8010e7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010e78:	2301      	movs	r3, #1
 8010e7a:	617b      	str	r3, [r7, #20]
 8010e7c:	e001      	b.n	8010e82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	2b01      	cmp	r3, #1
 8010e86:	d11b      	bne.n	8010ec0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8010e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e8c:	f383 8811 	msr	BASEPRI, r3
 8010e90:	f3bf 8f6f 	isb	sy
 8010e94:	f3bf 8f4f 	dsb	sy
 8010e98:	613b      	str	r3, [r7, #16]
}
 8010e9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010e9c:	4b15      	ldr	r3, [pc, #84]	; (8010ef4 <vTaskStartScheduler+0xc0>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	335c      	adds	r3, #92	; 0x5c
 8010ea2:	4a15      	ldr	r2, [pc, #84]	; (8010ef8 <vTaskStartScheduler+0xc4>)
 8010ea4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010ea6:	4b15      	ldr	r3, [pc, #84]	; (8010efc <vTaskStartScheduler+0xc8>)
 8010ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8010eac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010eae:	4b14      	ldr	r3, [pc, #80]	; (8010f00 <vTaskStartScheduler+0xcc>)
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010eb4:	4b13      	ldr	r3, [pc, #76]	; (8010f04 <vTaskStartScheduler+0xd0>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010eba:	f000 fbb1 	bl	8011620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010ebe:	e00e      	b.n	8010ede <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec6:	d10a      	bne.n	8010ede <vTaskStartScheduler+0xaa>
	__asm volatile
 8010ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ecc:	f383 8811 	msr	BASEPRI, r3
 8010ed0:	f3bf 8f6f 	isb	sy
 8010ed4:	f3bf 8f4f 	dsb	sy
 8010ed8:	60fb      	str	r3, [r7, #12]
}
 8010eda:	bf00      	nop
 8010edc:	e7fe      	b.n	8010edc <vTaskStartScheduler+0xa8>
}
 8010ede:	bf00      	nop
 8010ee0:	3718      	adds	r7, #24
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	0801568c 	.word	0x0801568c
 8010eec:	08011291 	.word	0x08011291
 8010ef0:	20000e10 	.word	0x20000e10
 8010ef4:	20000cec 	.word	0x20000cec
 8010ef8:	20000594 	.word	0x20000594
 8010efc:	20000e0c 	.word	0x20000e0c
 8010f00:	20000df8 	.word	0x20000df8
 8010f04:	20000df0 	.word	0x20000df0

08010f08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010f08:	b480      	push	{r7}
 8010f0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010f0c:	4b04      	ldr	r3, [pc, #16]	; (8010f20 <vTaskSuspendAll+0x18>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	3301      	adds	r3, #1
 8010f12:	4a03      	ldr	r2, [pc, #12]	; (8010f20 <vTaskSuspendAll+0x18>)
 8010f14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010f16:	bf00      	nop
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr
 8010f20:	20000e14 	.word	0x20000e14

08010f24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b084      	sub	sp, #16
 8010f28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010f32:	4b41      	ldr	r3, [pc, #260]	; (8011038 <xTaskResumeAll+0x114>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d10a      	bne.n	8010f50 <xTaskResumeAll+0x2c>
	__asm volatile
 8010f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f3e:	f383 8811 	msr	BASEPRI, r3
 8010f42:	f3bf 8f6f 	isb	sy
 8010f46:	f3bf 8f4f 	dsb	sy
 8010f4a:	603b      	str	r3, [r7, #0]
}
 8010f4c:	bf00      	nop
 8010f4e:	e7fe      	b.n	8010f4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010f50:	f000 fc08 	bl	8011764 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010f54:	4b38      	ldr	r3, [pc, #224]	; (8011038 <xTaskResumeAll+0x114>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	3b01      	subs	r3, #1
 8010f5a:	4a37      	ldr	r2, [pc, #220]	; (8011038 <xTaskResumeAll+0x114>)
 8010f5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f5e:	4b36      	ldr	r3, [pc, #216]	; (8011038 <xTaskResumeAll+0x114>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d161      	bne.n	801102a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010f66:	4b35      	ldr	r3, [pc, #212]	; (801103c <xTaskResumeAll+0x118>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d05d      	beq.n	801102a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010f6e:	e02e      	b.n	8010fce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f70:	4b33      	ldr	r3, [pc, #204]	; (8011040 <xTaskResumeAll+0x11c>)
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	68db      	ldr	r3, [r3, #12]
 8010f76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	3318      	adds	r3, #24
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7ff fd48 	bl	8010a12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	3304      	adds	r3, #4
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7ff fd43 	bl	8010a12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f90:	2201      	movs	r2, #1
 8010f92:	409a      	lsls	r2, r3
 8010f94:	4b2b      	ldr	r3, [pc, #172]	; (8011044 <xTaskResumeAll+0x120>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	4313      	orrs	r3, r2
 8010f9a:	4a2a      	ldr	r2, [pc, #168]	; (8011044 <xTaskResumeAll+0x120>)
 8010f9c:	6013      	str	r3, [r2, #0]
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	4413      	add	r3, r2
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	4a27      	ldr	r2, [pc, #156]	; (8011048 <xTaskResumeAll+0x124>)
 8010fac:	441a      	add	r2, r3
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	3304      	adds	r3, #4
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	4610      	mov	r0, r2
 8010fb6:	f7ff fccf 	bl	8010958 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fbe:	4b23      	ldr	r3, [pc, #140]	; (801104c <xTaskResumeAll+0x128>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d302      	bcc.n	8010fce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010fc8:	4b21      	ldr	r3, [pc, #132]	; (8011050 <xTaskResumeAll+0x12c>)
 8010fca:	2201      	movs	r2, #1
 8010fcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010fce:	4b1c      	ldr	r3, [pc, #112]	; (8011040 <xTaskResumeAll+0x11c>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d1cc      	bne.n	8010f70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d001      	beq.n	8010fe0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010fdc:	f000 fa12 	bl	8011404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010fe0:	4b1c      	ldr	r3, [pc, #112]	; (8011054 <xTaskResumeAll+0x130>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d010      	beq.n	801100e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010fec:	f000 f836 	bl	801105c <xTaskIncrementTick>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d002      	beq.n	8010ffc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010ff6:	4b16      	ldr	r3, [pc, #88]	; (8011050 <xTaskResumeAll+0x12c>)
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	3b01      	subs	r3, #1
 8011000:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d1f1      	bne.n	8010fec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8011008:	4b12      	ldr	r3, [pc, #72]	; (8011054 <xTaskResumeAll+0x130>)
 801100a:	2200      	movs	r2, #0
 801100c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801100e:	4b10      	ldr	r3, [pc, #64]	; (8011050 <xTaskResumeAll+0x12c>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d009      	beq.n	801102a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011016:	2301      	movs	r3, #1
 8011018:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801101a:	4b0f      	ldr	r3, [pc, #60]	; (8011058 <xTaskResumeAll+0x134>)
 801101c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011020:	601a      	str	r2, [r3, #0]
 8011022:	f3bf 8f4f 	dsb	sy
 8011026:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801102a:	f000 fbcb 	bl	80117c4 <vPortExitCritical>

	return xAlreadyYielded;
 801102e:	68bb      	ldr	r3, [r7, #8]
}
 8011030:	4618      	mov	r0, r3
 8011032:	3710      	adds	r7, #16
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}
 8011038:	20000e14 	.word	0x20000e14
 801103c:	20000dec 	.word	0x20000dec
 8011040:	20000dac 	.word	0x20000dac
 8011044:	20000df4 	.word	0x20000df4
 8011048:	20000cf0 	.word	0x20000cf0
 801104c:	20000cec 	.word	0x20000cec
 8011050:	20000e00 	.word	0x20000e00
 8011054:	20000dfc 	.word	0x20000dfc
 8011058:	e000ed04 	.word	0xe000ed04

0801105c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b086      	sub	sp, #24
 8011060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011062:	2300      	movs	r3, #0
 8011064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011066:	4b4e      	ldr	r3, [pc, #312]	; (80111a0 <xTaskIncrementTick+0x144>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	2b00      	cmp	r3, #0
 801106c:	f040 808e 	bne.w	801118c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011070:	4b4c      	ldr	r3, [pc, #304]	; (80111a4 <xTaskIncrementTick+0x148>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	3301      	adds	r3, #1
 8011076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011078:	4a4a      	ldr	r2, [pc, #296]	; (80111a4 <xTaskIncrementTick+0x148>)
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d120      	bne.n	80110c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011084:	4b48      	ldr	r3, [pc, #288]	; (80111a8 <xTaskIncrementTick+0x14c>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d00a      	beq.n	80110a4 <xTaskIncrementTick+0x48>
	__asm volatile
 801108e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011092:	f383 8811 	msr	BASEPRI, r3
 8011096:	f3bf 8f6f 	isb	sy
 801109a:	f3bf 8f4f 	dsb	sy
 801109e:	603b      	str	r3, [r7, #0]
}
 80110a0:	bf00      	nop
 80110a2:	e7fe      	b.n	80110a2 <xTaskIncrementTick+0x46>
 80110a4:	4b40      	ldr	r3, [pc, #256]	; (80111a8 <xTaskIncrementTick+0x14c>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	60fb      	str	r3, [r7, #12]
 80110aa:	4b40      	ldr	r3, [pc, #256]	; (80111ac <xTaskIncrementTick+0x150>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	4a3e      	ldr	r2, [pc, #248]	; (80111a8 <xTaskIncrementTick+0x14c>)
 80110b0:	6013      	str	r3, [r2, #0]
 80110b2:	4a3e      	ldr	r2, [pc, #248]	; (80111ac <xTaskIncrementTick+0x150>)
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	6013      	str	r3, [r2, #0]
 80110b8:	4b3d      	ldr	r3, [pc, #244]	; (80111b0 <xTaskIncrementTick+0x154>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	3301      	adds	r3, #1
 80110be:	4a3c      	ldr	r2, [pc, #240]	; (80111b0 <xTaskIncrementTick+0x154>)
 80110c0:	6013      	str	r3, [r2, #0]
 80110c2:	f000 f99f 	bl	8011404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80110c6:	4b3b      	ldr	r3, [pc, #236]	; (80111b4 <xTaskIncrementTick+0x158>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	693a      	ldr	r2, [r7, #16]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d348      	bcc.n	8011162 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80110d0:	4b35      	ldr	r3, [pc, #212]	; (80111a8 <xTaskIncrementTick+0x14c>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d104      	bne.n	80110e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110da:	4b36      	ldr	r3, [pc, #216]	; (80111b4 <xTaskIncrementTick+0x158>)
 80110dc:	f04f 32ff 	mov.w	r2, #4294967295
 80110e0:	601a      	str	r2, [r3, #0]
					break;
 80110e2:	e03e      	b.n	8011162 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110e4:	4b30      	ldr	r3, [pc, #192]	; (80111a8 <xTaskIncrementTick+0x14c>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	68db      	ldr	r3, [r3, #12]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80110f4:	693a      	ldr	r2, [r7, #16]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d203      	bcs.n	8011104 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80110fc:	4a2d      	ldr	r2, [pc, #180]	; (80111b4 <xTaskIncrementTick+0x158>)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011102:	e02e      	b.n	8011162 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	3304      	adds	r3, #4
 8011108:	4618      	mov	r0, r3
 801110a:	f7ff fc82 	bl	8010a12 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011112:	2b00      	cmp	r3, #0
 8011114:	d004      	beq.n	8011120 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	3318      	adds	r3, #24
 801111a:	4618      	mov	r0, r3
 801111c:	f7ff fc79 	bl	8010a12 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011124:	2201      	movs	r2, #1
 8011126:	409a      	lsls	r2, r3
 8011128:	4b23      	ldr	r3, [pc, #140]	; (80111b8 <xTaskIncrementTick+0x15c>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	4313      	orrs	r3, r2
 801112e:	4a22      	ldr	r2, [pc, #136]	; (80111b8 <xTaskIncrementTick+0x15c>)
 8011130:	6013      	str	r3, [r2, #0]
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011136:	4613      	mov	r3, r2
 8011138:	009b      	lsls	r3, r3, #2
 801113a:	4413      	add	r3, r2
 801113c:	009b      	lsls	r3, r3, #2
 801113e:	4a1f      	ldr	r2, [pc, #124]	; (80111bc <xTaskIncrementTick+0x160>)
 8011140:	441a      	add	r2, r3
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	3304      	adds	r3, #4
 8011146:	4619      	mov	r1, r3
 8011148:	4610      	mov	r0, r2
 801114a:	f7ff fc05 	bl	8010958 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011152:	4b1b      	ldr	r3, [pc, #108]	; (80111c0 <xTaskIncrementTick+0x164>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011158:	429a      	cmp	r2, r3
 801115a:	d3b9      	bcc.n	80110d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801115c:	2301      	movs	r3, #1
 801115e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011160:	e7b6      	b.n	80110d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011162:	4b17      	ldr	r3, [pc, #92]	; (80111c0 <xTaskIncrementTick+0x164>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011168:	4914      	ldr	r1, [pc, #80]	; (80111bc <xTaskIncrementTick+0x160>)
 801116a:	4613      	mov	r3, r2
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	4413      	add	r3, r2
 8011170:	009b      	lsls	r3, r3, #2
 8011172:	440b      	add	r3, r1
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	2b01      	cmp	r3, #1
 8011178:	d901      	bls.n	801117e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801117a:	2301      	movs	r3, #1
 801117c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801117e:	4b11      	ldr	r3, [pc, #68]	; (80111c4 <xTaskIncrementTick+0x168>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d007      	beq.n	8011196 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8011186:	2301      	movs	r3, #1
 8011188:	617b      	str	r3, [r7, #20]
 801118a:	e004      	b.n	8011196 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801118c:	4b0e      	ldr	r3, [pc, #56]	; (80111c8 <xTaskIncrementTick+0x16c>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	3301      	adds	r3, #1
 8011192:	4a0d      	ldr	r2, [pc, #52]	; (80111c8 <xTaskIncrementTick+0x16c>)
 8011194:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011196:	697b      	ldr	r3, [r7, #20]
}
 8011198:	4618      	mov	r0, r3
 801119a:	3718      	adds	r7, #24
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}
 80111a0:	20000e14 	.word	0x20000e14
 80111a4:	20000df0 	.word	0x20000df0
 80111a8:	20000da4 	.word	0x20000da4
 80111ac:	20000da8 	.word	0x20000da8
 80111b0:	20000e04 	.word	0x20000e04
 80111b4:	20000e0c 	.word	0x20000e0c
 80111b8:	20000df4 	.word	0x20000df4
 80111bc:	20000cf0 	.word	0x20000cf0
 80111c0:	20000cec 	.word	0x20000cec
 80111c4:	20000e00 	.word	0x20000e00
 80111c8:	20000dfc 	.word	0x20000dfc

080111cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80111cc:	b480      	push	{r7}
 80111ce:	b087      	sub	sp, #28
 80111d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80111d2:	4b29      	ldr	r3, [pc, #164]	; (8011278 <vTaskSwitchContext+0xac>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d003      	beq.n	80111e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80111da:	4b28      	ldr	r3, [pc, #160]	; (801127c <vTaskSwitchContext+0xb0>)
 80111dc:	2201      	movs	r2, #1
 80111de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80111e0:	e044      	b.n	801126c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80111e2:	4b26      	ldr	r3, [pc, #152]	; (801127c <vTaskSwitchContext+0xb0>)
 80111e4:	2200      	movs	r2, #0
 80111e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111e8:	4b25      	ldr	r3, [pc, #148]	; (8011280 <vTaskSwitchContext+0xb4>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	fab3 f383 	clz	r3, r3
 80111f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80111f6:	7afb      	ldrb	r3, [r7, #11]
 80111f8:	f1c3 031f 	rsb	r3, r3, #31
 80111fc:	617b      	str	r3, [r7, #20]
 80111fe:	4921      	ldr	r1, [pc, #132]	; (8011284 <vTaskSwitchContext+0xb8>)
 8011200:	697a      	ldr	r2, [r7, #20]
 8011202:	4613      	mov	r3, r2
 8011204:	009b      	lsls	r3, r3, #2
 8011206:	4413      	add	r3, r2
 8011208:	009b      	lsls	r3, r3, #2
 801120a:	440b      	add	r3, r1
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d10a      	bne.n	8011228 <vTaskSwitchContext+0x5c>
	__asm volatile
 8011212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011216:	f383 8811 	msr	BASEPRI, r3
 801121a:	f3bf 8f6f 	isb	sy
 801121e:	f3bf 8f4f 	dsb	sy
 8011222:	607b      	str	r3, [r7, #4]
}
 8011224:	bf00      	nop
 8011226:	e7fe      	b.n	8011226 <vTaskSwitchContext+0x5a>
 8011228:	697a      	ldr	r2, [r7, #20]
 801122a:	4613      	mov	r3, r2
 801122c:	009b      	lsls	r3, r3, #2
 801122e:	4413      	add	r3, r2
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	4a14      	ldr	r2, [pc, #80]	; (8011284 <vTaskSwitchContext+0xb8>)
 8011234:	4413      	add	r3, r2
 8011236:	613b      	str	r3, [r7, #16]
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	685a      	ldr	r2, [r3, #4]
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	605a      	str	r2, [r3, #4]
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	685a      	ldr	r2, [r3, #4]
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	3308      	adds	r3, #8
 801124a:	429a      	cmp	r2, r3
 801124c:	d104      	bne.n	8011258 <vTaskSwitchContext+0x8c>
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	685a      	ldr	r2, [r3, #4]
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	605a      	str	r2, [r3, #4]
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	4a0a      	ldr	r2, [pc, #40]	; (8011288 <vTaskSwitchContext+0xbc>)
 8011260:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011262:	4b09      	ldr	r3, [pc, #36]	; (8011288 <vTaskSwitchContext+0xbc>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	335c      	adds	r3, #92	; 0x5c
 8011268:	4a08      	ldr	r2, [pc, #32]	; (801128c <vTaskSwitchContext+0xc0>)
 801126a:	6013      	str	r3, [r2, #0]
}
 801126c:	bf00      	nop
 801126e:	371c      	adds	r7, #28
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr
 8011278:	20000e14 	.word	0x20000e14
 801127c:	20000e00 	.word	0x20000e00
 8011280:	20000df4 	.word	0x20000df4
 8011284:	20000cf0 	.word	0x20000cf0
 8011288:	20000cec 	.word	0x20000cec
 801128c:	20000594 	.word	0x20000594

08011290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011298:	f000 f852 	bl	8011340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801129c:	4b06      	ldr	r3, [pc, #24]	; (80112b8 <prvIdleTask+0x28>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	2b01      	cmp	r3, #1
 80112a2:	d9f9      	bls.n	8011298 <prvIdleTask+0x8>
			{
				taskYIELD();
 80112a4:	4b05      	ldr	r3, [pc, #20]	; (80112bc <prvIdleTask+0x2c>)
 80112a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112aa:	601a      	str	r2, [r3, #0]
 80112ac:	f3bf 8f4f 	dsb	sy
 80112b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80112b4:	e7f0      	b.n	8011298 <prvIdleTask+0x8>
 80112b6:	bf00      	nop
 80112b8:	20000cf0 	.word	0x20000cf0
 80112bc:	e000ed04 	.word	0xe000ed04

080112c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112c6:	2300      	movs	r3, #0
 80112c8:	607b      	str	r3, [r7, #4]
 80112ca:	e00c      	b.n	80112e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80112cc:	687a      	ldr	r2, [r7, #4]
 80112ce:	4613      	mov	r3, r2
 80112d0:	009b      	lsls	r3, r3, #2
 80112d2:	4413      	add	r3, r2
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	4a12      	ldr	r2, [pc, #72]	; (8011320 <prvInitialiseTaskLists+0x60>)
 80112d8:	4413      	add	r3, r2
 80112da:	4618      	mov	r0, r3
 80112dc:	f7ff fb0f 	bl	80108fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	3301      	adds	r3, #1
 80112e4:	607b      	str	r3, [r7, #4]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2b06      	cmp	r3, #6
 80112ea:	d9ef      	bls.n	80112cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80112ec:	480d      	ldr	r0, [pc, #52]	; (8011324 <prvInitialiseTaskLists+0x64>)
 80112ee:	f7ff fb06 	bl	80108fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80112f2:	480d      	ldr	r0, [pc, #52]	; (8011328 <prvInitialiseTaskLists+0x68>)
 80112f4:	f7ff fb03 	bl	80108fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80112f8:	480c      	ldr	r0, [pc, #48]	; (801132c <prvInitialiseTaskLists+0x6c>)
 80112fa:	f7ff fb00 	bl	80108fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80112fe:	480c      	ldr	r0, [pc, #48]	; (8011330 <prvInitialiseTaskLists+0x70>)
 8011300:	f7ff fafd 	bl	80108fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011304:	480b      	ldr	r0, [pc, #44]	; (8011334 <prvInitialiseTaskLists+0x74>)
 8011306:	f7ff fafa 	bl	80108fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801130a:	4b0b      	ldr	r3, [pc, #44]	; (8011338 <prvInitialiseTaskLists+0x78>)
 801130c:	4a05      	ldr	r2, [pc, #20]	; (8011324 <prvInitialiseTaskLists+0x64>)
 801130e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011310:	4b0a      	ldr	r3, [pc, #40]	; (801133c <prvInitialiseTaskLists+0x7c>)
 8011312:	4a05      	ldr	r2, [pc, #20]	; (8011328 <prvInitialiseTaskLists+0x68>)
 8011314:	601a      	str	r2, [r3, #0]
}
 8011316:	bf00      	nop
 8011318:	3708      	adds	r7, #8
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	20000cf0 	.word	0x20000cf0
 8011324:	20000d7c 	.word	0x20000d7c
 8011328:	20000d90 	.word	0x20000d90
 801132c:	20000dac 	.word	0x20000dac
 8011330:	20000dc0 	.word	0x20000dc0
 8011334:	20000dd8 	.word	0x20000dd8
 8011338:	20000da4 	.word	0x20000da4
 801133c:	20000da8 	.word	0x20000da8

08011340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011346:	e019      	b.n	801137c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011348:	f000 fa0c 	bl	8011764 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801134c:	4b10      	ldr	r3, [pc, #64]	; (8011390 <prvCheckTasksWaitingTermination+0x50>)
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	3304      	adds	r3, #4
 8011358:	4618      	mov	r0, r3
 801135a:	f7ff fb5a 	bl	8010a12 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801135e:	4b0d      	ldr	r3, [pc, #52]	; (8011394 <prvCheckTasksWaitingTermination+0x54>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	3b01      	subs	r3, #1
 8011364:	4a0b      	ldr	r2, [pc, #44]	; (8011394 <prvCheckTasksWaitingTermination+0x54>)
 8011366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011368:	4b0b      	ldr	r3, [pc, #44]	; (8011398 <prvCheckTasksWaitingTermination+0x58>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	3b01      	subs	r3, #1
 801136e:	4a0a      	ldr	r2, [pc, #40]	; (8011398 <prvCheckTasksWaitingTermination+0x58>)
 8011370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011372:	f000 fa27 	bl	80117c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 f810 	bl	801139c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801137c:	4b06      	ldr	r3, [pc, #24]	; (8011398 <prvCheckTasksWaitingTermination+0x58>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d1e1      	bne.n	8011348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011384:	bf00      	nop
 8011386:	bf00      	nop
 8011388:	3708      	adds	r7, #8
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	20000dc0 	.word	0x20000dc0
 8011394:	20000dec 	.word	0x20000dec
 8011398:	20000dd4 	.word	0x20000dd4

0801139c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	335c      	adds	r3, #92	; 0x5c
 80113a8:	4618      	mov	r0, r3
 80113aa:	f001 fb41 	bl	8012a30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d108      	bne.n	80113ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113bc:	4618      	mov	r0, r3
 80113be:	f000 fb7f 	bl	8011ac0 <vPortFree>
				vPortFree( pxTCB );
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f000 fb7c 	bl	8011ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80113c8:	e018      	b.n	80113fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	d103      	bne.n	80113dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f000 fb73 	bl	8011ac0 <vPortFree>
	}
 80113da:	e00f      	b.n	80113fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80113e2:	2b02      	cmp	r3, #2
 80113e4:	d00a      	beq.n	80113fc <prvDeleteTCB+0x60>
	__asm volatile
 80113e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ea:	f383 8811 	msr	BASEPRI, r3
 80113ee:	f3bf 8f6f 	isb	sy
 80113f2:	f3bf 8f4f 	dsb	sy
 80113f6:	60fb      	str	r3, [r7, #12]
}
 80113f8:	bf00      	nop
 80113fa:	e7fe      	b.n	80113fa <prvDeleteTCB+0x5e>
	}
 80113fc:	bf00      	nop
 80113fe:	3710      	adds	r7, #16
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011404:	b480      	push	{r7}
 8011406:	b083      	sub	sp, #12
 8011408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801140a:	4b0c      	ldr	r3, [pc, #48]	; (801143c <prvResetNextTaskUnblockTime+0x38>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d104      	bne.n	801141e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011414:	4b0a      	ldr	r3, [pc, #40]	; (8011440 <prvResetNextTaskUnblockTime+0x3c>)
 8011416:	f04f 32ff 	mov.w	r2, #4294967295
 801141a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801141c:	e008      	b.n	8011430 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801141e:	4b07      	ldr	r3, [pc, #28]	; (801143c <prvResetNextTaskUnblockTime+0x38>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	68db      	ldr	r3, [r3, #12]
 8011424:	68db      	ldr	r3, [r3, #12]
 8011426:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	4a04      	ldr	r2, [pc, #16]	; (8011440 <prvResetNextTaskUnblockTime+0x3c>)
 801142e:	6013      	str	r3, [r2, #0]
}
 8011430:	bf00      	nop
 8011432:	370c      	adds	r7, #12
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr
 801143c:	20000da4 	.word	0x20000da4
 8011440:	20000e0c 	.word	0x20000e0c

08011444 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801144e:	4b29      	ldr	r3, [pc, #164]	; (80114f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011454:	4b28      	ldr	r3, [pc, #160]	; (80114f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	3304      	adds	r3, #4
 801145a:	4618      	mov	r0, r3
 801145c:	f7ff fad9 	bl	8010a12 <uxListRemove>
 8011460:	4603      	mov	r3, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	d10b      	bne.n	801147e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011466:	4b24      	ldr	r3, [pc, #144]	; (80114f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801146c:	2201      	movs	r2, #1
 801146e:	fa02 f303 	lsl.w	r3, r2, r3
 8011472:	43da      	mvns	r2, r3
 8011474:	4b21      	ldr	r3, [pc, #132]	; (80114fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	4013      	ands	r3, r2
 801147a:	4a20      	ldr	r2, [pc, #128]	; (80114fc <prvAddCurrentTaskToDelayedList+0xb8>)
 801147c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011484:	d10a      	bne.n	801149c <prvAddCurrentTaskToDelayedList+0x58>
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d007      	beq.n	801149c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801148c:	4b1a      	ldr	r3, [pc, #104]	; (80114f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	3304      	adds	r3, #4
 8011492:	4619      	mov	r1, r3
 8011494:	481a      	ldr	r0, [pc, #104]	; (8011500 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011496:	f7ff fa5f 	bl	8010958 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801149a:	e026      	b.n	80114ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801149c:	68fa      	ldr	r2, [r7, #12]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	4413      	add	r3, r2
 80114a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80114a4:	4b14      	ldr	r3, [pc, #80]	; (80114f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	68ba      	ldr	r2, [r7, #8]
 80114aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80114ac:	68ba      	ldr	r2, [r7, #8]
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d209      	bcs.n	80114c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114b4:	4b13      	ldr	r3, [pc, #76]	; (8011504 <prvAddCurrentTaskToDelayedList+0xc0>)
 80114b6:	681a      	ldr	r2, [r3, #0]
 80114b8:	4b0f      	ldr	r3, [pc, #60]	; (80114f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	3304      	adds	r3, #4
 80114be:	4619      	mov	r1, r3
 80114c0:	4610      	mov	r0, r2
 80114c2:	f7ff fa6d 	bl	80109a0 <vListInsert>
}
 80114c6:	e010      	b.n	80114ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114c8:	4b0f      	ldr	r3, [pc, #60]	; (8011508 <prvAddCurrentTaskToDelayedList+0xc4>)
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	4b0a      	ldr	r3, [pc, #40]	; (80114f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	3304      	adds	r3, #4
 80114d2:	4619      	mov	r1, r3
 80114d4:	4610      	mov	r0, r2
 80114d6:	f7ff fa63 	bl	80109a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80114da:	4b0c      	ldr	r3, [pc, #48]	; (801150c <prvAddCurrentTaskToDelayedList+0xc8>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	68ba      	ldr	r2, [r7, #8]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d202      	bcs.n	80114ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80114e4:	4a09      	ldr	r2, [pc, #36]	; (801150c <prvAddCurrentTaskToDelayedList+0xc8>)
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	6013      	str	r3, [r2, #0]
}
 80114ea:	bf00      	nop
 80114ec:	3710      	adds	r7, #16
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	20000df0 	.word	0x20000df0
 80114f8:	20000cec 	.word	0x20000cec
 80114fc:	20000df4 	.word	0x20000df4
 8011500:	20000dd8 	.word	0x20000dd8
 8011504:	20000da8 	.word	0x20000da8
 8011508:	20000da4 	.word	0x20000da4
 801150c:	20000e0c 	.word	0x20000e0c

08011510 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011510:	b480      	push	{r7}
 8011512:	b085      	sub	sp, #20
 8011514:	af00      	add	r7, sp, #0
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	3b04      	subs	r3, #4
 8011520:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	3b04      	subs	r3, #4
 801152e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	f023 0201 	bic.w	r2, r3, #1
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	3b04      	subs	r3, #4
 801153e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011540:	4a0c      	ldr	r2, [pc, #48]	; (8011574 <pxPortInitialiseStack+0x64>)
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	3b14      	subs	r3, #20
 801154a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801154c:	687a      	ldr	r2, [r7, #4]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	3b04      	subs	r3, #4
 8011556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	f06f 0202 	mvn.w	r2, #2
 801155e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	3b20      	subs	r3, #32
 8011564:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011566:	68fb      	ldr	r3, [r7, #12]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3714      	adds	r7, #20
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr
 8011574:	08011579 	.word	0x08011579

08011578 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011578:	b480      	push	{r7}
 801157a:	b085      	sub	sp, #20
 801157c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801157e:	2300      	movs	r3, #0
 8011580:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011582:	4b12      	ldr	r3, [pc, #72]	; (80115cc <prvTaskExitError+0x54>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801158a:	d00a      	beq.n	80115a2 <prvTaskExitError+0x2a>
	__asm volatile
 801158c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011590:	f383 8811 	msr	BASEPRI, r3
 8011594:	f3bf 8f6f 	isb	sy
 8011598:	f3bf 8f4f 	dsb	sy
 801159c:	60fb      	str	r3, [r7, #12]
}
 801159e:	bf00      	nop
 80115a0:	e7fe      	b.n	80115a0 <prvTaskExitError+0x28>
	__asm volatile
 80115a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a6:	f383 8811 	msr	BASEPRI, r3
 80115aa:	f3bf 8f6f 	isb	sy
 80115ae:	f3bf 8f4f 	dsb	sy
 80115b2:	60bb      	str	r3, [r7, #8]
}
 80115b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80115b6:	bf00      	nop
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d0fc      	beq.n	80115b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80115be:	bf00      	nop
 80115c0:	bf00      	nop
 80115c2:	3714      	adds	r7, #20
 80115c4:	46bd      	mov	sp, r7
 80115c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ca:	4770      	bx	lr
 80115cc:	20000590 	.word	0x20000590

080115d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80115d0:	4b07      	ldr	r3, [pc, #28]	; (80115f0 <pxCurrentTCBConst2>)
 80115d2:	6819      	ldr	r1, [r3, #0]
 80115d4:	6808      	ldr	r0, [r1, #0]
 80115d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115da:	f380 8809 	msr	PSP, r0
 80115de:	f3bf 8f6f 	isb	sy
 80115e2:	f04f 0000 	mov.w	r0, #0
 80115e6:	f380 8811 	msr	BASEPRI, r0
 80115ea:	4770      	bx	lr
 80115ec:	f3af 8000 	nop.w

080115f0 <pxCurrentTCBConst2>:
 80115f0:	20000cec 	.word	0x20000cec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80115f4:	bf00      	nop
 80115f6:	bf00      	nop

080115f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80115f8:	4808      	ldr	r0, [pc, #32]	; (801161c <prvPortStartFirstTask+0x24>)
 80115fa:	6800      	ldr	r0, [r0, #0]
 80115fc:	6800      	ldr	r0, [r0, #0]
 80115fe:	f380 8808 	msr	MSP, r0
 8011602:	f04f 0000 	mov.w	r0, #0
 8011606:	f380 8814 	msr	CONTROL, r0
 801160a:	b662      	cpsie	i
 801160c:	b661      	cpsie	f
 801160e:	f3bf 8f4f 	dsb	sy
 8011612:	f3bf 8f6f 	isb	sy
 8011616:	df00      	svc	0
 8011618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801161a:	bf00      	nop
 801161c:	e000ed08 	.word	0xe000ed08

08011620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b086      	sub	sp, #24
 8011624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011626:	4b46      	ldr	r3, [pc, #280]	; (8011740 <xPortStartScheduler+0x120>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	4a46      	ldr	r2, [pc, #280]	; (8011744 <xPortStartScheduler+0x124>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d10a      	bne.n	8011646 <xPortStartScheduler+0x26>
	__asm volatile
 8011630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011634:	f383 8811 	msr	BASEPRI, r3
 8011638:	f3bf 8f6f 	isb	sy
 801163c:	f3bf 8f4f 	dsb	sy
 8011640:	613b      	str	r3, [r7, #16]
}
 8011642:	bf00      	nop
 8011644:	e7fe      	b.n	8011644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011646:	4b3e      	ldr	r3, [pc, #248]	; (8011740 <xPortStartScheduler+0x120>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	4a3f      	ldr	r2, [pc, #252]	; (8011748 <xPortStartScheduler+0x128>)
 801164c:	4293      	cmp	r3, r2
 801164e:	d10a      	bne.n	8011666 <xPortStartScheduler+0x46>
	__asm volatile
 8011650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011654:	f383 8811 	msr	BASEPRI, r3
 8011658:	f3bf 8f6f 	isb	sy
 801165c:	f3bf 8f4f 	dsb	sy
 8011660:	60fb      	str	r3, [r7, #12]
}
 8011662:	bf00      	nop
 8011664:	e7fe      	b.n	8011664 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011666:	4b39      	ldr	r3, [pc, #228]	; (801174c <xPortStartScheduler+0x12c>)
 8011668:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	b2db      	uxtb	r3, r3
 8011670:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	22ff      	movs	r2, #255	; 0xff
 8011676:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	b2db      	uxtb	r3, r3
 801167e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011680:	78fb      	ldrb	r3, [r7, #3]
 8011682:	b2db      	uxtb	r3, r3
 8011684:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011688:	b2da      	uxtb	r2, r3
 801168a:	4b31      	ldr	r3, [pc, #196]	; (8011750 <xPortStartScheduler+0x130>)
 801168c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801168e:	4b31      	ldr	r3, [pc, #196]	; (8011754 <xPortStartScheduler+0x134>)
 8011690:	2207      	movs	r2, #7
 8011692:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011694:	e009      	b.n	80116aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011696:	4b2f      	ldr	r3, [pc, #188]	; (8011754 <xPortStartScheduler+0x134>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	3b01      	subs	r3, #1
 801169c:	4a2d      	ldr	r2, [pc, #180]	; (8011754 <xPortStartScheduler+0x134>)
 801169e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80116a0:	78fb      	ldrb	r3, [r7, #3]
 80116a2:	b2db      	uxtb	r3, r3
 80116a4:	005b      	lsls	r3, r3, #1
 80116a6:	b2db      	uxtb	r3, r3
 80116a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80116aa:	78fb      	ldrb	r3, [r7, #3]
 80116ac:	b2db      	uxtb	r3, r3
 80116ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116b2:	2b80      	cmp	r3, #128	; 0x80
 80116b4:	d0ef      	beq.n	8011696 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80116b6:	4b27      	ldr	r3, [pc, #156]	; (8011754 <xPortStartScheduler+0x134>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f1c3 0307 	rsb	r3, r3, #7
 80116be:	2b04      	cmp	r3, #4
 80116c0:	d00a      	beq.n	80116d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80116c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c6:	f383 8811 	msr	BASEPRI, r3
 80116ca:	f3bf 8f6f 	isb	sy
 80116ce:	f3bf 8f4f 	dsb	sy
 80116d2:	60bb      	str	r3, [r7, #8]
}
 80116d4:	bf00      	nop
 80116d6:	e7fe      	b.n	80116d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80116d8:	4b1e      	ldr	r3, [pc, #120]	; (8011754 <xPortStartScheduler+0x134>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	021b      	lsls	r3, r3, #8
 80116de:	4a1d      	ldr	r2, [pc, #116]	; (8011754 <xPortStartScheduler+0x134>)
 80116e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80116e2:	4b1c      	ldr	r3, [pc, #112]	; (8011754 <xPortStartScheduler+0x134>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80116ea:	4a1a      	ldr	r2, [pc, #104]	; (8011754 <xPortStartScheduler+0x134>)
 80116ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	b2da      	uxtb	r2, r3
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80116f6:	4b18      	ldr	r3, [pc, #96]	; (8011758 <xPortStartScheduler+0x138>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	4a17      	ldr	r2, [pc, #92]	; (8011758 <xPortStartScheduler+0x138>)
 80116fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011702:	4b15      	ldr	r3, [pc, #84]	; (8011758 <xPortStartScheduler+0x138>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	4a14      	ldr	r2, [pc, #80]	; (8011758 <xPortStartScheduler+0x138>)
 8011708:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801170c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801170e:	f000 f8dd 	bl	80118cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011712:	4b12      	ldr	r3, [pc, #72]	; (801175c <xPortStartScheduler+0x13c>)
 8011714:	2200      	movs	r2, #0
 8011716:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011718:	f000 f8fc 	bl	8011914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801171c:	4b10      	ldr	r3, [pc, #64]	; (8011760 <xPortStartScheduler+0x140>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	4a0f      	ldr	r2, [pc, #60]	; (8011760 <xPortStartScheduler+0x140>)
 8011722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011726:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011728:	f7ff ff66 	bl	80115f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801172c:	f7ff fd4e 	bl	80111cc <vTaskSwitchContext>
	prvTaskExitError();
 8011730:	f7ff ff22 	bl	8011578 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011734:	2300      	movs	r3, #0
}
 8011736:	4618      	mov	r0, r3
 8011738:	3718      	adds	r7, #24
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	e000ed00 	.word	0xe000ed00
 8011744:	410fc271 	.word	0x410fc271
 8011748:	410fc270 	.word	0x410fc270
 801174c:	e000e400 	.word	0xe000e400
 8011750:	20000e18 	.word	0x20000e18
 8011754:	20000e1c 	.word	0x20000e1c
 8011758:	e000ed20 	.word	0xe000ed20
 801175c:	20000590 	.word	0x20000590
 8011760:	e000ef34 	.word	0xe000ef34

08011764 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011764:	b480      	push	{r7}
 8011766:	b083      	sub	sp, #12
 8011768:	af00      	add	r7, sp, #0
	__asm volatile
 801176a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801176e:	f383 8811 	msr	BASEPRI, r3
 8011772:	f3bf 8f6f 	isb	sy
 8011776:	f3bf 8f4f 	dsb	sy
 801177a:	607b      	str	r3, [r7, #4]
}
 801177c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801177e:	4b0f      	ldr	r3, [pc, #60]	; (80117bc <vPortEnterCritical+0x58>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	3301      	adds	r3, #1
 8011784:	4a0d      	ldr	r2, [pc, #52]	; (80117bc <vPortEnterCritical+0x58>)
 8011786:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011788:	4b0c      	ldr	r3, [pc, #48]	; (80117bc <vPortEnterCritical+0x58>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	2b01      	cmp	r3, #1
 801178e:	d10f      	bne.n	80117b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011790:	4b0b      	ldr	r3, [pc, #44]	; (80117c0 <vPortEnterCritical+0x5c>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	b2db      	uxtb	r3, r3
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00a      	beq.n	80117b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801179a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179e:	f383 8811 	msr	BASEPRI, r3
 80117a2:	f3bf 8f6f 	isb	sy
 80117a6:	f3bf 8f4f 	dsb	sy
 80117aa:	603b      	str	r3, [r7, #0]
}
 80117ac:	bf00      	nop
 80117ae:	e7fe      	b.n	80117ae <vPortEnterCritical+0x4a>
	}
}
 80117b0:	bf00      	nop
 80117b2:	370c      	adds	r7, #12
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr
 80117bc:	20000590 	.word	0x20000590
 80117c0:	e000ed04 	.word	0xe000ed04

080117c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80117c4:	b480      	push	{r7}
 80117c6:	b083      	sub	sp, #12
 80117c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80117ca:	4b12      	ldr	r3, [pc, #72]	; (8011814 <vPortExitCritical+0x50>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d10a      	bne.n	80117e8 <vPortExitCritical+0x24>
	__asm volatile
 80117d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d6:	f383 8811 	msr	BASEPRI, r3
 80117da:	f3bf 8f6f 	isb	sy
 80117de:	f3bf 8f4f 	dsb	sy
 80117e2:	607b      	str	r3, [r7, #4]
}
 80117e4:	bf00      	nop
 80117e6:	e7fe      	b.n	80117e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80117e8:	4b0a      	ldr	r3, [pc, #40]	; (8011814 <vPortExitCritical+0x50>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	3b01      	subs	r3, #1
 80117ee:	4a09      	ldr	r2, [pc, #36]	; (8011814 <vPortExitCritical+0x50>)
 80117f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80117f2:	4b08      	ldr	r3, [pc, #32]	; (8011814 <vPortExitCritical+0x50>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d105      	bne.n	8011806 <vPortExitCritical+0x42>
 80117fa:	2300      	movs	r3, #0
 80117fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011804:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011806:	bf00      	nop
 8011808:	370c      	adds	r7, #12
 801180a:	46bd      	mov	sp, r7
 801180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011810:	4770      	bx	lr
 8011812:	bf00      	nop
 8011814:	20000590 	.word	0x20000590
	...

08011820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011820:	f3ef 8009 	mrs	r0, PSP
 8011824:	f3bf 8f6f 	isb	sy
 8011828:	4b15      	ldr	r3, [pc, #84]	; (8011880 <pxCurrentTCBConst>)
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	f01e 0f10 	tst.w	lr, #16
 8011830:	bf08      	it	eq
 8011832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801183a:	6010      	str	r0, [r2, #0]
 801183c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011844:	f380 8811 	msr	BASEPRI, r0
 8011848:	f3bf 8f4f 	dsb	sy
 801184c:	f3bf 8f6f 	isb	sy
 8011850:	f7ff fcbc 	bl	80111cc <vTaskSwitchContext>
 8011854:	f04f 0000 	mov.w	r0, #0
 8011858:	f380 8811 	msr	BASEPRI, r0
 801185c:	bc09      	pop	{r0, r3}
 801185e:	6819      	ldr	r1, [r3, #0]
 8011860:	6808      	ldr	r0, [r1, #0]
 8011862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011866:	f01e 0f10 	tst.w	lr, #16
 801186a:	bf08      	it	eq
 801186c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011870:	f380 8809 	msr	PSP, r0
 8011874:	f3bf 8f6f 	isb	sy
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop
 801187c:	f3af 8000 	nop.w

08011880 <pxCurrentTCBConst>:
 8011880:	20000cec 	.word	0x20000cec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011884:	bf00      	nop
 8011886:	bf00      	nop

08011888 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
	__asm volatile
 801188e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011892:	f383 8811 	msr	BASEPRI, r3
 8011896:	f3bf 8f6f 	isb	sy
 801189a:	f3bf 8f4f 	dsb	sy
 801189e:	607b      	str	r3, [r7, #4]
}
 80118a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80118a2:	f7ff fbdb 	bl	801105c <xTaskIncrementTick>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d003      	beq.n	80118b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80118ac:	4b06      	ldr	r3, [pc, #24]	; (80118c8 <SysTick_Handler+0x40>)
 80118ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118b2:	601a      	str	r2, [r3, #0]
 80118b4:	2300      	movs	r3, #0
 80118b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	f383 8811 	msr	BASEPRI, r3
}
 80118be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80118c0:	bf00      	nop
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	e000ed04 	.word	0xe000ed04

080118cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80118cc:	b480      	push	{r7}
 80118ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80118d0:	4b0b      	ldr	r3, [pc, #44]	; (8011900 <vPortSetupTimerInterrupt+0x34>)
 80118d2:	2200      	movs	r2, #0
 80118d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80118d6:	4b0b      	ldr	r3, [pc, #44]	; (8011904 <vPortSetupTimerInterrupt+0x38>)
 80118d8:	2200      	movs	r2, #0
 80118da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80118dc:	4b0a      	ldr	r3, [pc, #40]	; (8011908 <vPortSetupTimerInterrupt+0x3c>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a0a      	ldr	r2, [pc, #40]	; (801190c <vPortSetupTimerInterrupt+0x40>)
 80118e2:	fba2 2303 	umull	r2, r3, r2, r3
 80118e6:	099b      	lsrs	r3, r3, #6
 80118e8:	4a09      	ldr	r2, [pc, #36]	; (8011910 <vPortSetupTimerInterrupt+0x44>)
 80118ea:	3b01      	subs	r3, #1
 80118ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80118ee:	4b04      	ldr	r3, [pc, #16]	; (8011900 <vPortSetupTimerInterrupt+0x34>)
 80118f0:	2207      	movs	r2, #7
 80118f2:	601a      	str	r2, [r3, #0]
}
 80118f4:	bf00      	nop
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	e000e010 	.word	0xe000e010
 8011904:	e000e018 	.word	0xe000e018
 8011908:	20000088 	.word	0x20000088
 801190c:	10624dd3 	.word	0x10624dd3
 8011910:	e000e014 	.word	0xe000e014

08011914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011924 <vPortEnableVFP+0x10>
 8011918:	6801      	ldr	r1, [r0, #0]
 801191a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801191e:	6001      	str	r1, [r0, #0]
 8011920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011922:	bf00      	nop
 8011924:	e000ed88 	.word	0xe000ed88

08011928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b08a      	sub	sp, #40	; 0x28
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011930:	2300      	movs	r3, #0
 8011932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011934:	f7ff fae8 	bl	8010f08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011938:	4b5b      	ldr	r3, [pc, #364]	; (8011aa8 <pvPortMalloc+0x180>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d101      	bne.n	8011944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011940:	f000 f920 	bl	8011b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011944:	4b59      	ldr	r3, [pc, #356]	; (8011aac <pvPortMalloc+0x184>)
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	4013      	ands	r3, r2
 801194c:	2b00      	cmp	r3, #0
 801194e:	f040 8093 	bne.w	8011a78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d01d      	beq.n	8011994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011958:	2208      	movs	r2, #8
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	4413      	add	r3, r2
 801195e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f003 0307 	and.w	r3, r3, #7
 8011966:	2b00      	cmp	r3, #0
 8011968:	d014      	beq.n	8011994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f023 0307 	bic.w	r3, r3, #7
 8011970:	3308      	adds	r3, #8
 8011972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f003 0307 	and.w	r3, r3, #7
 801197a:	2b00      	cmp	r3, #0
 801197c:	d00a      	beq.n	8011994 <pvPortMalloc+0x6c>
	__asm volatile
 801197e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011982:	f383 8811 	msr	BASEPRI, r3
 8011986:	f3bf 8f6f 	isb	sy
 801198a:	f3bf 8f4f 	dsb	sy
 801198e:	617b      	str	r3, [r7, #20]
}
 8011990:	bf00      	nop
 8011992:	e7fe      	b.n	8011992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d06e      	beq.n	8011a78 <pvPortMalloc+0x150>
 801199a:	4b45      	ldr	r3, [pc, #276]	; (8011ab0 <pvPortMalloc+0x188>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d869      	bhi.n	8011a78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80119a4:	4b43      	ldr	r3, [pc, #268]	; (8011ab4 <pvPortMalloc+0x18c>)
 80119a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80119a8:	4b42      	ldr	r3, [pc, #264]	; (8011ab4 <pvPortMalloc+0x18c>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119ae:	e004      	b.n	80119ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80119b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80119b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d903      	bls.n	80119cc <pvPortMalloc+0xa4>
 80119c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d1f1      	bne.n	80119b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80119cc:	4b36      	ldr	r3, [pc, #216]	; (8011aa8 <pvPortMalloc+0x180>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d050      	beq.n	8011a78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80119d6:	6a3b      	ldr	r3, [r7, #32]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	2208      	movs	r2, #8
 80119dc:	4413      	add	r3, r2
 80119de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80119e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	6a3b      	ldr	r3, [r7, #32]
 80119e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80119e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ea:	685a      	ldr	r2, [r3, #4]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	1ad2      	subs	r2, r2, r3
 80119f0:	2308      	movs	r3, #8
 80119f2:	005b      	lsls	r3, r3, #1
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d91f      	bls.n	8011a38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80119f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	4413      	add	r3, r2
 80119fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a00:	69bb      	ldr	r3, [r7, #24]
 8011a02:	f003 0307 	and.w	r3, r3, #7
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d00a      	beq.n	8011a20 <pvPortMalloc+0xf8>
	__asm volatile
 8011a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0e:	f383 8811 	msr	BASEPRI, r3
 8011a12:	f3bf 8f6f 	isb	sy
 8011a16:	f3bf 8f4f 	dsb	sy
 8011a1a:	613b      	str	r3, [r7, #16]
}
 8011a1c:	bf00      	nop
 8011a1e:	e7fe      	b.n	8011a1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a22:	685a      	ldr	r2, [r3, #4]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	1ad2      	subs	r2, r2, r3
 8011a28:	69bb      	ldr	r3, [r7, #24]
 8011a2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a32:	69b8      	ldr	r0, [r7, #24]
 8011a34:	f000 f908 	bl	8011c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a38:	4b1d      	ldr	r3, [pc, #116]	; (8011ab0 <pvPortMalloc+0x188>)
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	1ad3      	subs	r3, r2, r3
 8011a42:	4a1b      	ldr	r2, [pc, #108]	; (8011ab0 <pvPortMalloc+0x188>)
 8011a44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a46:	4b1a      	ldr	r3, [pc, #104]	; (8011ab0 <pvPortMalloc+0x188>)
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	4b1b      	ldr	r3, [pc, #108]	; (8011ab8 <pvPortMalloc+0x190>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d203      	bcs.n	8011a5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a52:	4b17      	ldr	r3, [pc, #92]	; (8011ab0 <pvPortMalloc+0x188>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	4a18      	ldr	r2, [pc, #96]	; (8011ab8 <pvPortMalloc+0x190>)
 8011a58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a5c:	685a      	ldr	r2, [r3, #4]
 8011a5e:	4b13      	ldr	r3, [pc, #76]	; (8011aac <pvPortMalloc+0x184>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	431a      	orrs	r2, r3
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011a6e:	4b13      	ldr	r3, [pc, #76]	; (8011abc <pvPortMalloc+0x194>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	3301      	adds	r3, #1
 8011a74:	4a11      	ldr	r2, [pc, #68]	; (8011abc <pvPortMalloc+0x194>)
 8011a76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011a78:	f7ff fa54 	bl	8010f24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	f003 0307 	and.w	r3, r3, #7
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d00a      	beq.n	8011a9c <pvPortMalloc+0x174>
	__asm volatile
 8011a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8a:	f383 8811 	msr	BASEPRI, r3
 8011a8e:	f3bf 8f6f 	isb	sy
 8011a92:	f3bf 8f4f 	dsb	sy
 8011a96:	60fb      	str	r3, [r7, #12]
}
 8011a98:	bf00      	nop
 8011a9a:	e7fe      	b.n	8011a9a <pvPortMalloc+0x172>
	return pvReturn;
 8011a9c:	69fb      	ldr	r3, [r7, #28]
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3728      	adds	r7, #40	; 0x28
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	20010828 	.word	0x20010828
 8011aac:	2001083c 	.word	0x2001083c
 8011ab0:	2001082c 	.word	0x2001082c
 8011ab4:	20010820 	.word	0x20010820
 8011ab8:	20010830 	.word	0x20010830
 8011abc:	20010834 	.word	0x20010834

08011ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b086      	sub	sp, #24
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d04d      	beq.n	8011b6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011ad2:	2308      	movs	r3, #8
 8011ad4:	425b      	negs	r3, r3
 8011ad6:	697a      	ldr	r2, [r7, #20]
 8011ad8:	4413      	add	r3, r2
 8011ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	685a      	ldr	r2, [r3, #4]
 8011ae4:	4b24      	ldr	r3, [pc, #144]	; (8011b78 <vPortFree+0xb8>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	4013      	ands	r3, r2
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d10a      	bne.n	8011b04 <vPortFree+0x44>
	__asm volatile
 8011aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af2:	f383 8811 	msr	BASEPRI, r3
 8011af6:	f3bf 8f6f 	isb	sy
 8011afa:	f3bf 8f4f 	dsb	sy
 8011afe:	60fb      	str	r3, [r7, #12]
}
 8011b00:	bf00      	nop
 8011b02:	e7fe      	b.n	8011b02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d00a      	beq.n	8011b22 <vPortFree+0x62>
	__asm volatile
 8011b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b10:	f383 8811 	msr	BASEPRI, r3
 8011b14:	f3bf 8f6f 	isb	sy
 8011b18:	f3bf 8f4f 	dsb	sy
 8011b1c:	60bb      	str	r3, [r7, #8]
}
 8011b1e:	bf00      	nop
 8011b20:	e7fe      	b.n	8011b20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	685a      	ldr	r2, [r3, #4]
 8011b26:	4b14      	ldr	r3, [pc, #80]	; (8011b78 <vPortFree+0xb8>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d01e      	beq.n	8011b6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d11a      	bne.n	8011b6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	685a      	ldr	r2, [r3, #4]
 8011b3c:	4b0e      	ldr	r3, [pc, #56]	; (8011b78 <vPortFree+0xb8>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	43db      	mvns	r3, r3
 8011b42:	401a      	ands	r2, r3
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b48:	f7ff f9de 	bl	8010f08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	685a      	ldr	r2, [r3, #4]
 8011b50:	4b0a      	ldr	r3, [pc, #40]	; (8011b7c <vPortFree+0xbc>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4413      	add	r3, r2
 8011b56:	4a09      	ldr	r2, [pc, #36]	; (8011b7c <vPortFree+0xbc>)
 8011b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b5a:	6938      	ldr	r0, [r7, #16]
 8011b5c:	f000 f874 	bl	8011c48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011b60:	4b07      	ldr	r3, [pc, #28]	; (8011b80 <vPortFree+0xc0>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	3301      	adds	r3, #1
 8011b66:	4a06      	ldr	r2, [pc, #24]	; (8011b80 <vPortFree+0xc0>)
 8011b68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011b6a:	f7ff f9db 	bl	8010f24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011b6e:	bf00      	nop
 8011b70:	3718      	adds	r7, #24
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	2001083c 	.word	0x2001083c
 8011b7c:	2001082c 	.word	0x2001082c
 8011b80:	20010838 	.word	0x20010838

08011b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011b84:	b480      	push	{r7}
 8011b86:	b085      	sub	sp, #20
 8011b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011b8a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8011b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011b90:	4b27      	ldr	r3, [pc, #156]	; (8011c30 <prvHeapInit+0xac>)
 8011b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f003 0307 	and.w	r3, r3, #7
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00c      	beq.n	8011bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	3307      	adds	r3, #7
 8011ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	f023 0307 	bic.w	r3, r3, #7
 8011baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011bac:	68ba      	ldr	r2, [r7, #8]
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	1ad3      	subs	r3, r2, r3
 8011bb2:	4a1f      	ldr	r2, [pc, #124]	; (8011c30 <prvHeapInit+0xac>)
 8011bb4:	4413      	add	r3, r2
 8011bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011bbc:	4a1d      	ldr	r2, [pc, #116]	; (8011c34 <prvHeapInit+0xb0>)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011bc2:	4b1c      	ldr	r3, [pc, #112]	; (8011c34 <prvHeapInit+0xb0>)
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	68ba      	ldr	r2, [r7, #8]
 8011bcc:	4413      	add	r3, r2
 8011bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011bd0:	2208      	movs	r2, #8
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	1a9b      	subs	r3, r3, r2
 8011bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	f023 0307 	bic.w	r3, r3, #7
 8011bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	4a15      	ldr	r2, [pc, #84]	; (8011c38 <prvHeapInit+0xb4>)
 8011be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011be6:	4b14      	ldr	r3, [pc, #80]	; (8011c38 <prvHeapInit+0xb4>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	2200      	movs	r2, #0
 8011bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011bee:	4b12      	ldr	r3, [pc, #72]	; (8011c38 <prvHeapInit+0xb4>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	68fa      	ldr	r2, [r7, #12]
 8011bfe:	1ad2      	subs	r2, r2, r3
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c04:	4b0c      	ldr	r3, [pc, #48]	; (8011c38 <prvHeapInit+0xb4>)
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	4a0a      	ldr	r2, [pc, #40]	; (8011c3c <prvHeapInit+0xb8>)
 8011c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	4a09      	ldr	r2, [pc, #36]	; (8011c40 <prvHeapInit+0xbc>)
 8011c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c1c:	4b09      	ldr	r3, [pc, #36]	; (8011c44 <prvHeapInit+0xc0>)
 8011c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011c22:	601a      	str	r2, [r3, #0]
}
 8011c24:	bf00      	nop
 8011c26:	3714      	adds	r7, #20
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr
 8011c30:	20000e20 	.word	0x20000e20
 8011c34:	20010820 	.word	0x20010820
 8011c38:	20010828 	.word	0x20010828
 8011c3c:	20010830 	.word	0x20010830
 8011c40:	2001082c 	.word	0x2001082c
 8011c44:	2001083c 	.word	0x2001083c

08011c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c50:	4b28      	ldr	r3, [pc, #160]	; (8011cf4 <prvInsertBlockIntoFreeList+0xac>)
 8011c52:	60fb      	str	r3, [r7, #12]
 8011c54:	e002      	b.n	8011c5c <prvInsertBlockIntoFreeList+0x14>
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	60fb      	str	r3, [r7, #12]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d8f7      	bhi.n	8011c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	4413      	add	r3, r2
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d108      	bne.n	8011c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	685a      	ldr	r2, [r3, #4]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	441a      	add	r2, r3
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	68ba      	ldr	r2, [r7, #8]
 8011c94:	441a      	add	r2, r3
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d118      	bne.n	8011cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	4b15      	ldr	r3, [pc, #84]	; (8011cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d00d      	beq.n	8011cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	685a      	ldr	r2, [r3, #4]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	441a      	add	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	681a      	ldr	r2, [r3, #0]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	601a      	str	r2, [r3, #0]
 8011cc4:	e008      	b.n	8011cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011cc6:	4b0c      	ldr	r3, [pc, #48]	; (8011cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	601a      	str	r2, [r3, #0]
 8011cce:	e003      	b.n	8011cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d002      	beq.n	8011ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ce6:	bf00      	nop
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	20010820 	.word	0x20010820
 8011cf8:	20010828 	.word	0x20010828

08011cfc <__errno>:
 8011cfc:	4b01      	ldr	r3, [pc, #4]	; (8011d04 <__errno+0x8>)
 8011cfe:	6818      	ldr	r0, [r3, #0]
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop
 8011d04:	20000594 	.word	0x20000594

08011d08 <std>:
 8011d08:	2300      	movs	r3, #0
 8011d0a:	b510      	push	{r4, lr}
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8011d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d16:	6083      	str	r3, [r0, #8]
 8011d18:	8181      	strh	r1, [r0, #12]
 8011d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8011d1c:	81c2      	strh	r2, [r0, #14]
 8011d1e:	6183      	str	r3, [r0, #24]
 8011d20:	4619      	mov	r1, r3
 8011d22:	2208      	movs	r2, #8
 8011d24:	305c      	adds	r0, #92	; 0x5c
 8011d26:	f000 f91a 	bl	8011f5e <memset>
 8011d2a:	4b05      	ldr	r3, [pc, #20]	; (8011d40 <std+0x38>)
 8011d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8011d2e:	4b05      	ldr	r3, [pc, #20]	; (8011d44 <std+0x3c>)
 8011d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d32:	4b05      	ldr	r3, [pc, #20]	; (8011d48 <std+0x40>)
 8011d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d36:	4b05      	ldr	r3, [pc, #20]	; (8011d4c <std+0x44>)
 8011d38:	6224      	str	r4, [r4, #32]
 8011d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8011d3c:	bd10      	pop	{r4, pc}
 8011d3e:	bf00      	nop
 8011d40:	08012b71 	.word	0x08012b71
 8011d44:	08012b93 	.word	0x08012b93
 8011d48:	08012bcb 	.word	0x08012bcb
 8011d4c:	08012bef 	.word	0x08012bef

08011d50 <_cleanup_r>:
 8011d50:	4901      	ldr	r1, [pc, #4]	; (8011d58 <_cleanup_r+0x8>)
 8011d52:	f000 b8af 	b.w	8011eb4 <_fwalk_reent>
 8011d56:	bf00      	nop
 8011d58:	08013bcd 	.word	0x08013bcd

08011d5c <__sfmoreglue>:
 8011d5c:	b570      	push	{r4, r5, r6, lr}
 8011d5e:	1e4a      	subs	r2, r1, #1
 8011d60:	2568      	movs	r5, #104	; 0x68
 8011d62:	4355      	muls	r5, r2
 8011d64:	460e      	mov	r6, r1
 8011d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d6a:	f000 f901 	bl	8011f70 <_malloc_r>
 8011d6e:	4604      	mov	r4, r0
 8011d70:	b140      	cbz	r0, 8011d84 <__sfmoreglue+0x28>
 8011d72:	2100      	movs	r1, #0
 8011d74:	e9c0 1600 	strd	r1, r6, [r0]
 8011d78:	300c      	adds	r0, #12
 8011d7a:	60a0      	str	r0, [r4, #8]
 8011d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011d80:	f000 f8ed 	bl	8011f5e <memset>
 8011d84:	4620      	mov	r0, r4
 8011d86:	bd70      	pop	{r4, r5, r6, pc}

08011d88 <__sfp_lock_acquire>:
 8011d88:	4801      	ldr	r0, [pc, #4]	; (8011d90 <__sfp_lock_acquire+0x8>)
 8011d8a:	f000 b8d8 	b.w	8011f3e <__retarget_lock_acquire_recursive>
 8011d8e:	bf00      	nop
 8011d90:	20011030 	.word	0x20011030

08011d94 <__sfp_lock_release>:
 8011d94:	4801      	ldr	r0, [pc, #4]	; (8011d9c <__sfp_lock_release+0x8>)
 8011d96:	f000 b8d3 	b.w	8011f40 <__retarget_lock_release_recursive>
 8011d9a:	bf00      	nop
 8011d9c:	20011030 	.word	0x20011030

08011da0 <__sinit_lock_acquire>:
 8011da0:	4801      	ldr	r0, [pc, #4]	; (8011da8 <__sinit_lock_acquire+0x8>)
 8011da2:	f000 b8cc 	b.w	8011f3e <__retarget_lock_acquire_recursive>
 8011da6:	bf00      	nop
 8011da8:	2001102b 	.word	0x2001102b

08011dac <__sinit_lock_release>:
 8011dac:	4801      	ldr	r0, [pc, #4]	; (8011db4 <__sinit_lock_release+0x8>)
 8011dae:	f000 b8c7 	b.w	8011f40 <__retarget_lock_release_recursive>
 8011db2:	bf00      	nop
 8011db4:	2001102b 	.word	0x2001102b

08011db8 <__sinit>:
 8011db8:	b510      	push	{r4, lr}
 8011dba:	4604      	mov	r4, r0
 8011dbc:	f7ff fff0 	bl	8011da0 <__sinit_lock_acquire>
 8011dc0:	69a3      	ldr	r3, [r4, #24]
 8011dc2:	b11b      	cbz	r3, 8011dcc <__sinit+0x14>
 8011dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dc8:	f7ff bff0 	b.w	8011dac <__sinit_lock_release>
 8011dcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011dd0:	6523      	str	r3, [r4, #80]	; 0x50
 8011dd2:	4b13      	ldr	r3, [pc, #76]	; (8011e20 <__sinit+0x68>)
 8011dd4:	4a13      	ldr	r2, [pc, #76]	; (8011e24 <__sinit+0x6c>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8011dda:	42a3      	cmp	r3, r4
 8011ddc:	bf04      	itt	eq
 8011dde:	2301      	moveq	r3, #1
 8011de0:	61a3      	streq	r3, [r4, #24]
 8011de2:	4620      	mov	r0, r4
 8011de4:	f000 f820 	bl	8011e28 <__sfp>
 8011de8:	6060      	str	r0, [r4, #4]
 8011dea:	4620      	mov	r0, r4
 8011dec:	f000 f81c 	bl	8011e28 <__sfp>
 8011df0:	60a0      	str	r0, [r4, #8]
 8011df2:	4620      	mov	r0, r4
 8011df4:	f000 f818 	bl	8011e28 <__sfp>
 8011df8:	2200      	movs	r2, #0
 8011dfa:	60e0      	str	r0, [r4, #12]
 8011dfc:	2104      	movs	r1, #4
 8011dfe:	6860      	ldr	r0, [r4, #4]
 8011e00:	f7ff ff82 	bl	8011d08 <std>
 8011e04:	68a0      	ldr	r0, [r4, #8]
 8011e06:	2201      	movs	r2, #1
 8011e08:	2109      	movs	r1, #9
 8011e0a:	f7ff ff7d 	bl	8011d08 <std>
 8011e0e:	68e0      	ldr	r0, [r4, #12]
 8011e10:	2202      	movs	r2, #2
 8011e12:	2112      	movs	r1, #18
 8011e14:	f7ff ff78 	bl	8011d08 <std>
 8011e18:	2301      	movs	r3, #1
 8011e1a:	61a3      	str	r3, [r4, #24]
 8011e1c:	e7d2      	b.n	8011dc4 <__sinit+0xc>
 8011e1e:	bf00      	nop
 8011e20:	0801573c 	.word	0x0801573c
 8011e24:	08011d51 	.word	0x08011d51

08011e28 <__sfp>:
 8011e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e2a:	4607      	mov	r7, r0
 8011e2c:	f7ff ffac 	bl	8011d88 <__sfp_lock_acquire>
 8011e30:	4b1e      	ldr	r3, [pc, #120]	; (8011eac <__sfp+0x84>)
 8011e32:	681e      	ldr	r6, [r3, #0]
 8011e34:	69b3      	ldr	r3, [r6, #24]
 8011e36:	b913      	cbnz	r3, 8011e3e <__sfp+0x16>
 8011e38:	4630      	mov	r0, r6
 8011e3a:	f7ff ffbd 	bl	8011db8 <__sinit>
 8011e3e:	3648      	adds	r6, #72	; 0x48
 8011e40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e44:	3b01      	subs	r3, #1
 8011e46:	d503      	bpl.n	8011e50 <__sfp+0x28>
 8011e48:	6833      	ldr	r3, [r6, #0]
 8011e4a:	b30b      	cbz	r3, 8011e90 <__sfp+0x68>
 8011e4c:	6836      	ldr	r6, [r6, #0]
 8011e4e:	e7f7      	b.n	8011e40 <__sfp+0x18>
 8011e50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e54:	b9d5      	cbnz	r5, 8011e8c <__sfp+0x64>
 8011e56:	4b16      	ldr	r3, [pc, #88]	; (8011eb0 <__sfp+0x88>)
 8011e58:	60e3      	str	r3, [r4, #12]
 8011e5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e5e:	6665      	str	r5, [r4, #100]	; 0x64
 8011e60:	f000 f86c 	bl	8011f3c <__retarget_lock_init_recursive>
 8011e64:	f7ff ff96 	bl	8011d94 <__sfp_lock_release>
 8011e68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e70:	6025      	str	r5, [r4, #0]
 8011e72:	61a5      	str	r5, [r4, #24]
 8011e74:	2208      	movs	r2, #8
 8011e76:	4629      	mov	r1, r5
 8011e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011e7c:	f000 f86f 	bl	8011f5e <memset>
 8011e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011e84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011e88:	4620      	mov	r0, r4
 8011e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e8c:	3468      	adds	r4, #104	; 0x68
 8011e8e:	e7d9      	b.n	8011e44 <__sfp+0x1c>
 8011e90:	2104      	movs	r1, #4
 8011e92:	4638      	mov	r0, r7
 8011e94:	f7ff ff62 	bl	8011d5c <__sfmoreglue>
 8011e98:	4604      	mov	r4, r0
 8011e9a:	6030      	str	r0, [r6, #0]
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d1d5      	bne.n	8011e4c <__sfp+0x24>
 8011ea0:	f7ff ff78 	bl	8011d94 <__sfp_lock_release>
 8011ea4:	230c      	movs	r3, #12
 8011ea6:	603b      	str	r3, [r7, #0]
 8011ea8:	e7ee      	b.n	8011e88 <__sfp+0x60>
 8011eaa:	bf00      	nop
 8011eac:	0801573c 	.word	0x0801573c
 8011eb0:	ffff0001 	.word	0xffff0001

08011eb4 <_fwalk_reent>:
 8011eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011eb8:	4606      	mov	r6, r0
 8011eba:	4688      	mov	r8, r1
 8011ebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ec0:	2700      	movs	r7, #0
 8011ec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ec6:	f1b9 0901 	subs.w	r9, r9, #1
 8011eca:	d505      	bpl.n	8011ed8 <_fwalk_reent+0x24>
 8011ecc:	6824      	ldr	r4, [r4, #0]
 8011ece:	2c00      	cmp	r4, #0
 8011ed0:	d1f7      	bne.n	8011ec2 <_fwalk_reent+0xe>
 8011ed2:	4638      	mov	r0, r7
 8011ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ed8:	89ab      	ldrh	r3, [r5, #12]
 8011eda:	2b01      	cmp	r3, #1
 8011edc:	d907      	bls.n	8011eee <_fwalk_reent+0x3a>
 8011ede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	d003      	beq.n	8011eee <_fwalk_reent+0x3a>
 8011ee6:	4629      	mov	r1, r5
 8011ee8:	4630      	mov	r0, r6
 8011eea:	47c0      	blx	r8
 8011eec:	4307      	orrs	r7, r0
 8011eee:	3568      	adds	r5, #104	; 0x68
 8011ef0:	e7e9      	b.n	8011ec6 <_fwalk_reent+0x12>
	...

08011ef4 <__libc_init_array>:
 8011ef4:	b570      	push	{r4, r5, r6, lr}
 8011ef6:	4d0d      	ldr	r5, [pc, #52]	; (8011f2c <__libc_init_array+0x38>)
 8011ef8:	4c0d      	ldr	r4, [pc, #52]	; (8011f30 <__libc_init_array+0x3c>)
 8011efa:	1b64      	subs	r4, r4, r5
 8011efc:	10a4      	asrs	r4, r4, #2
 8011efe:	2600      	movs	r6, #0
 8011f00:	42a6      	cmp	r6, r4
 8011f02:	d109      	bne.n	8011f18 <__libc_init_array+0x24>
 8011f04:	4d0b      	ldr	r5, [pc, #44]	; (8011f34 <__libc_init_array+0x40>)
 8011f06:	4c0c      	ldr	r4, [pc, #48]	; (8011f38 <__libc_init_array+0x44>)
 8011f08:	f002 ff06 	bl	8014d18 <_init>
 8011f0c:	1b64      	subs	r4, r4, r5
 8011f0e:	10a4      	asrs	r4, r4, #2
 8011f10:	2600      	movs	r6, #0
 8011f12:	42a6      	cmp	r6, r4
 8011f14:	d105      	bne.n	8011f22 <__libc_init_array+0x2e>
 8011f16:	bd70      	pop	{r4, r5, r6, pc}
 8011f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f1c:	4798      	blx	r3
 8011f1e:	3601      	adds	r6, #1
 8011f20:	e7ee      	b.n	8011f00 <__libc_init_array+0xc>
 8011f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f26:	4798      	blx	r3
 8011f28:	3601      	adds	r6, #1
 8011f2a:	e7f2      	b.n	8011f12 <__libc_init_array+0x1e>
 8011f2c:	08015ac4 	.word	0x08015ac4
 8011f30:	08015ac4 	.word	0x08015ac4
 8011f34:	08015ac4 	.word	0x08015ac4
 8011f38:	08015ac8 	.word	0x08015ac8

08011f3c <__retarget_lock_init_recursive>:
 8011f3c:	4770      	bx	lr

08011f3e <__retarget_lock_acquire_recursive>:
 8011f3e:	4770      	bx	lr

08011f40 <__retarget_lock_release_recursive>:
 8011f40:	4770      	bx	lr

08011f42 <memcpy>:
 8011f42:	440a      	add	r2, r1
 8011f44:	4291      	cmp	r1, r2
 8011f46:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f4a:	d100      	bne.n	8011f4e <memcpy+0xc>
 8011f4c:	4770      	bx	lr
 8011f4e:	b510      	push	{r4, lr}
 8011f50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f58:	4291      	cmp	r1, r2
 8011f5a:	d1f9      	bne.n	8011f50 <memcpy+0xe>
 8011f5c:	bd10      	pop	{r4, pc}

08011f5e <memset>:
 8011f5e:	4402      	add	r2, r0
 8011f60:	4603      	mov	r3, r0
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d100      	bne.n	8011f68 <memset+0xa>
 8011f66:	4770      	bx	lr
 8011f68:	f803 1b01 	strb.w	r1, [r3], #1
 8011f6c:	e7f9      	b.n	8011f62 <memset+0x4>
	...

08011f70 <_malloc_r>:
 8011f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f72:	1ccd      	adds	r5, r1, #3
 8011f74:	f025 0503 	bic.w	r5, r5, #3
 8011f78:	3508      	adds	r5, #8
 8011f7a:	2d0c      	cmp	r5, #12
 8011f7c:	bf38      	it	cc
 8011f7e:	250c      	movcc	r5, #12
 8011f80:	2d00      	cmp	r5, #0
 8011f82:	4606      	mov	r6, r0
 8011f84:	db01      	blt.n	8011f8a <_malloc_r+0x1a>
 8011f86:	42a9      	cmp	r1, r5
 8011f88:	d903      	bls.n	8011f92 <_malloc_r+0x22>
 8011f8a:	230c      	movs	r3, #12
 8011f8c:	6033      	str	r3, [r6, #0]
 8011f8e:	2000      	movs	r0, #0
 8011f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f92:	f001 fed9 	bl	8013d48 <__malloc_lock>
 8011f96:	4921      	ldr	r1, [pc, #132]	; (801201c <_malloc_r+0xac>)
 8011f98:	680a      	ldr	r2, [r1, #0]
 8011f9a:	4614      	mov	r4, r2
 8011f9c:	b99c      	cbnz	r4, 8011fc6 <_malloc_r+0x56>
 8011f9e:	4f20      	ldr	r7, [pc, #128]	; (8012020 <_malloc_r+0xb0>)
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	b923      	cbnz	r3, 8011fae <_malloc_r+0x3e>
 8011fa4:	4621      	mov	r1, r4
 8011fa6:	4630      	mov	r0, r6
 8011fa8:	f000 fd9e 	bl	8012ae8 <_sbrk_r>
 8011fac:	6038      	str	r0, [r7, #0]
 8011fae:	4629      	mov	r1, r5
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f000 fd99 	bl	8012ae8 <_sbrk_r>
 8011fb6:	1c43      	adds	r3, r0, #1
 8011fb8:	d123      	bne.n	8012002 <_malloc_r+0x92>
 8011fba:	230c      	movs	r3, #12
 8011fbc:	6033      	str	r3, [r6, #0]
 8011fbe:	4630      	mov	r0, r6
 8011fc0:	f001 fec8 	bl	8013d54 <__malloc_unlock>
 8011fc4:	e7e3      	b.n	8011f8e <_malloc_r+0x1e>
 8011fc6:	6823      	ldr	r3, [r4, #0]
 8011fc8:	1b5b      	subs	r3, r3, r5
 8011fca:	d417      	bmi.n	8011ffc <_malloc_r+0x8c>
 8011fcc:	2b0b      	cmp	r3, #11
 8011fce:	d903      	bls.n	8011fd8 <_malloc_r+0x68>
 8011fd0:	6023      	str	r3, [r4, #0]
 8011fd2:	441c      	add	r4, r3
 8011fd4:	6025      	str	r5, [r4, #0]
 8011fd6:	e004      	b.n	8011fe2 <_malloc_r+0x72>
 8011fd8:	6863      	ldr	r3, [r4, #4]
 8011fda:	42a2      	cmp	r2, r4
 8011fdc:	bf0c      	ite	eq
 8011fde:	600b      	streq	r3, [r1, #0]
 8011fe0:	6053      	strne	r3, [r2, #4]
 8011fe2:	4630      	mov	r0, r6
 8011fe4:	f001 feb6 	bl	8013d54 <__malloc_unlock>
 8011fe8:	f104 000b 	add.w	r0, r4, #11
 8011fec:	1d23      	adds	r3, r4, #4
 8011fee:	f020 0007 	bic.w	r0, r0, #7
 8011ff2:	1ac2      	subs	r2, r0, r3
 8011ff4:	d0cc      	beq.n	8011f90 <_malloc_r+0x20>
 8011ff6:	1a1b      	subs	r3, r3, r0
 8011ff8:	50a3      	str	r3, [r4, r2]
 8011ffa:	e7c9      	b.n	8011f90 <_malloc_r+0x20>
 8011ffc:	4622      	mov	r2, r4
 8011ffe:	6864      	ldr	r4, [r4, #4]
 8012000:	e7cc      	b.n	8011f9c <_malloc_r+0x2c>
 8012002:	1cc4      	adds	r4, r0, #3
 8012004:	f024 0403 	bic.w	r4, r4, #3
 8012008:	42a0      	cmp	r0, r4
 801200a:	d0e3      	beq.n	8011fd4 <_malloc_r+0x64>
 801200c:	1a21      	subs	r1, r4, r0
 801200e:	4630      	mov	r0, r6
 8012010:	f000 fd6a 	bl	8012ae8 <_sbrk_r>
 8012014:	3001      	adds	r0, #1
 8012016:	d1dd      	bne.n	8011fd4 <_malloc_r+0x64>
 8012018:	e7cf      	b.n	8011fba <_malloc_r+0x4a>
 801201a:	bf00      	nop
 801201c:	20010840 	.word	0x20010840
 8012020:	20010844 	.word	0x20010844

08012024 <__cvt>:
 8012024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012028:	ec55 4b10 	vmov	r4, r5, d0
 801202c:	2d00      	cmp	r5, #0
 801202e:	460e      	mov	r6, r1
 8012030:	4619      	mov	r1, r3
 8012032:	462b      	mov	r3, r5
 8012034:	bfbb      	ittet	lt
 8012036:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801203a:	461d      	movlt	r5, r3
 801203c:	2300      	movge	r3, #0
 801203e:	232d      	movlt	r3, #45	; 0x2d
 8012040:	700b      	strb	r3, [r1, #0]
 8012042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012044:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012048:	4691      	mov	r9, r2
 801204a:	f023 0820 	bic.w	r8, r3, #32
 801204e:	bfbc      	itt	lt
 8012050:	4622      	movlt	r2, r4
 8012052:	4614      	movlt	r4, r2
 8012054:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012058:	d005      	beq.n	8012066 <__cvt+0x42>
 801205a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801205e:	d100      	bne.n	8012062 <__cvt+0x3e>
 8012060:	3601      	adds	r6, #1
 8012062:	2102      	movs	r1, #2
 8012064:	e000      	b.n	8012068 <__cvt+0x44>
 8012066:	2103      	movs	r1, #3
 8012068:	ab03      	add	r3, sp, #12
 801206a:	9301      	str	r3, [sp, #4]
 801206c:	ab02      	add	r3, sp, #8
 801206e:	9300      	str	r3, [sp, #0]
 8012070:	ec45 4b10 	vmov	d0, r4, r5
 8012074:	4653      	mov	r3, sl
 8012076:	4632      	mov	r2, r6
 8012078:	f000 ff36 	bl	8012ee8 <_dtoa_r>
 801207c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012080:	4607      	mov	r7, r0
 8012082:	d102      	bne.n	801208a <__cvt+0x66>
 8012084:	f019 0f01 	tst.w	r9, #1
 8012088:	d022      	beq.n	80120d0 <__cvt+0xac>
 801208a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801208e:	eb07 0906 	add.w	r9, r7, r6
 8012092:	d110      	bne.n	80120b6 <__cvt+0x92>
 8012094:	783b      	ldrb	r3, [r7, #0]
 8012096:	2b30      	cmp	r3, #48	; 0x30
 8012098:	d10a      	bne.n	80120b0 <__cvt+0x8c>
 801209a:	2200      	movs	r2, #0
 801209c:	2300      	movs	r3, #0
 801209e:	4620      	mov	r0, r4
 80120a0:	4629      	mov	r1, r5
 80120a2:	f7ee fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 80120a6:	b918      	cbnz	r0, 80120b0 <__cvt+0x8c>
 80120a8:	f1c6 0601 	rsb	r6, r6, #1
 80120ac:	f8ca 6000 	str.w	r6, [sl]
 80120b0:	f8da 3000 	ldr.w	r3, [sl]
 80120b4:	4499      	add	r9, r3
 80120b6:	2200      	movs	r2, #0
 80120b8:	2300      	movs	r3, #0
 80120ba:	4620      	mov	r0, r4
 80120bc:	4629      	mov	r1, r5
 80120be:	f7ee fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 80120c2:	b108      	cbz	r0, 80120c8 <__cvt+0xa4>
 80120c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80120c8:	2230      	movs	r2, #48	; 0x30
 80120ca:	9b03      	ldr	r3, [sp, #12]
 80120cc:	454b      	cmp	r3, r9
 80120ce:	d307      	bcc.n	80120e0 <__cvt+0xbc>
 80120d0:	9b03      	ldr	r3, [sp, #12]
 80120d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80120d4:	1bdb      	subs	r3, r3, r7
 80120d6:	4638      	mov	r0, r7
 80120d8:	6013      	str	r3, [r2, #0]
 80120da:	b004      	add	sp, #16
 80120dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120e0:	1c59      	adds	r1, r3, #1
 80120e2:	9103      	str	r1, [sp, #12]
 80120e4:	701a      	strb	r2, [r3, #0]
 80120e6:	e7f0      	b.n	80120ca <__cvt+0xa6>

080120e8 <__exponent>:
 80120e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120ea:	4603      	mov	r3, r0
 80120ec:	2900      	cmp	r1, #0
 80120ee:	bfb8      	it	lt
 80120f0:	4249      	neglt	r1, r1
 80120f2:	f803 2b02 	strb.w	r2, [r3], #2
 80120f6:	bfb4      	ite	lt
 80120f8:	222d      	movlt	r2, #45	; 0x2d
 80120fa:	222b      	movge	r2, #43	; 0x2b
 80120fc:	2909      	cmp	r1, #9
 80120fe:	7042      	strb	r2, [r0, #1]
 8012100:	dd2a      	ble.n	8012158 <__exponent+0x70>
 8012102:	f10d 0407 	add.w	r4, sp, #7
 8012106:	46a4      	mov	ip, r4
 8012108:	270a      	movs	r7, #10
 801210a:	46a6      	mov	lr, r4
 801210c:	460a      	mov	r2, r1
 801210e:	fb91 f6f7 	sdiv	r6, r1, r7
 8012112:	fb07 1516 	mls	r5, r7, r6, r1
 8012116:	3530      	adds	r5, #48	; 0x30
 8012118:	2a63      	cmp	r2, #99	; 0x63
 801211a:	f104 34ff 	add.w	r4, r4, #4294967295
 801211e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012122:	4631      	mov	r1, r6
 8012124:	dcf1      	bgt.n	801210a <__exponent+0x22>
 8012126:	3130      	adds	r1, #48	; 0x30
 8012128:	f1ae 0502 	sub.w	r5, lr, #2
 801212c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012130:	1c44      	adds	r4, r0, #1
 8012132:	4629      	mov	r1, r5
 8012134:	4561      	cmp	r1, ip
 8012136:	d30a      	bcc.n	801214e <__exponent+0x66>
 8012138:	f10d 0209 	add.w	r2, sp, #9
 801213c:	eba2 020e 	sub.w	r2, r2, lr
 8012140:	4565      	cmp	r5, ip
 8012142:	bf88      	it	hi
 8012144:	2200      	movhi	r2, #0
 8012146:	4413      	add	r3, r2
 8012148:	1a18      	subs	r0, r3, r0
 801214a:	b003      	add	sp, #12
 801214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801214e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012152:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012156:	e7ed      	b.n	8012134 <__exponent+0x4c>
 8012158:	2330      	movs	r3, #48	; 0x30
 801215a:	3130      	adds	r1, #48	; 0x30
 801215c:	7083      	strb	r3, [r0, #2]
 801215e:	70c1      	strb	r1, [r0, #3]
 8012160:	1d03      	adds	r3, r0, #4
 8012162:	e7f1      	b.n	8012148 <__exponent+0x60>

08012164 <_printf_float>:
 8012164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012168:	ed2d 8b02 	vpush	{d8}
 801216c:	b08d      	sub	sp, #52	; 0x34
 801216e:	460c      	mov	r4, r1
 8012170:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012174:	4616      	mov	r6, r2
 8012176:	461f      	mov	r7, r3
 8012178:	4605      	mov	r5, r0
 801217a:	f001 fd63 	bl	8013c44 <_localeconv_r>
 801217e:	f8d0 a000 	ldr.w	sl, [r0]
 8012182:	4650      	mov	r0, sl
 8012184:	f7ee f824 	bl	80001d0 <strlen>
 8012188:	2300      	movs	r3, #0
 801218a:	930a      	str	r3, [sp, #40]	; 0x28
 801218c:	6823      	ldr	r3, [r4, #0]
 801218e:	9305      	str	r3, [sp, #20]
 8012190:	f8d8 3000 	ldr.w	r3, [r8]
 8012194:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012198:	3307      	adds	r3, #7
 801219a:	f023 0307 	bic.w	r3, r3, #7
 801219e:	f103 0208 	add.w	r2, r3, #8
 80121a2:	f8c8 2000 	str.w	r2, [r8]
 80121a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80121ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80121b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80121b6:	9307      	str	r3, [sp, #28]
 80121b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80121bc:	ee08 0a10 	vmov	s16, r0
 80121c0:	4b9f      	ldr	r3, [pc, #636]	; (8012440 <_printf_float+0x2dc>)
 80121c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121c6:	f04f 32ff 	mov.w	r2, #4294967295
 80121ca:	f7ee fcaf 	bl	8000b2c <__aeabi_dcmpun>
 80121ce:	bb88      	cbnz	r0, 8012234 <_printf_float+0xd0>
 80121d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121d4:	4b9a      	ldr	r3, [pc, #616]	; (8012440 <_printf_float+0x2dc>)
 80121d6:	f04f 32ff 	mov.w	r2, #4294967295
 80121da:	f7ee fc89 	bl	8000af0 <__aeabi_dcmple>
 80121de:	bb48      	cbnz	r0, 8012234 <_printf_float+0xd0>
 80121e0:	2200      	movs	r2, #0
 80121e2:	2300      	movs	r3, #0
 80121e4:	4640      	mov	r0, r8
 80121e6:	4649      	mov	r1, r9
 80121e8:	f7ee fc78 	bl	8000adc <__aeabi_dcmplt>
 80121ec:	b110      	cbz	r0, 80121f4 <_printf_float+0x90>
 80121ee:	232d      	movs	r3, #45	; 0x2d
 80121f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121f4:	4b93      	ldr	r3, [pc, #588]	; (8012444 <_printf_float+0x2e0>)
 80121f6:	4894      	ldr	r0, [pc, #592]	; (8012448 <_printf_float+0x2e4>)
 80121f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80121fc:	bf94      	ite	ls
 80121fe:	4698      	movls	r8, r3
 8012200:	4680      	movhi	r8, r0
 8012202:	2303      	movs	r3, #3
 8012204:	6123      	str	r3, [r4, #16]
 8012206:	9b05      	ldr	r3, [sp, #20]
 8012208:	f023 0204 	bic.w	r2, r3, #4
 801220c:	6022      	str	r2, [r4, #0]
 801220e:	f04f 0900 	mov.w	r9, #0
 8012212:	9700      	str	r7, [sp, #0]
 8012214:	4633      	mov	r3, r6
 8012216:	aa0b      	add	r2, sp, #44	; 0x2c
 8012218:	4621      	mov	r1, r4
 801221a:	4628      	mov	r0, r5
 801221c:	f000 f9d8 	bl	80125d0 <_printf_common>
 8012220:	3001      	adds	r0, #1
 8012222:	f040 8090 	bne.w	8012346 <_printf_float+0x1e2>
 8012226:	f04f 30ff 	mov.w	r0, #4294967295
 801222a:	b00d      	add	sp, #52	; 0x34
 801222c:	ecbd 8b02 	vpop	{d8}
 8012230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012234:	4642      	mov	r2, r8
 8012236:	464b      	mov	r3, r9
 8012238:	4640      	mov	r0, r8
 801223a:	4649      	mov	r1, r9
 801223c:	f7ee fc76 	bl	8000b2c <__aeabi_dcmpun>
 8012240:	b140      	cbz	r0, 8012254 <_printf_float+0xf0>
 8012242:	464b      	mov	r3, r9
 8012244:	2b00      	cmp	r3, #0
 8012246:	bfbc      	itt	lt
 8012248:	232d      	movlt	r3, #45	; 0x2d
 801224a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801224e:	487f      	ldr	r0, [pc, #508]	; (801244c <_printf_float+0x2e8>)
 8012250:	4b7f      	ldr	r3, [pc, #508]	; (8012450 <_printf_float+0x2ec>)
 8012252:	e7d1      	b.n	80121f8 <_printf_float+0x94>
 8012254:	6863      	ldr	r3, [r4, #4]
 8012256:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801225a:	9206      	str	r2, [sp, #24]
 801225c:	1c5a      	adds	r2, r3, #1
 801225e:	d13f      	bne.n	80122e0 <_printf_float+0x17c>
 8012260:	2306      	movs	r3, #6
 8012262:	6063      	str	r3, [r4, #4]
 8012264:	9b05      	ldr	r3, [sp, #20]
 8012266:	6861      	ldr	r1, [r4, #4]
 8012268:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801226c:	2300      	movs	r3, #0
 801226e:	9303      	str	r3, [sp, #12]
 8012270:	ab0a      	add	r3, sp, #40	; 0x28
 8012272:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012276:	ab09      	add	r3, sp, #36	; 0x24
 8012278:	ec49 8b10 	vmov	d0, r8, r9
 801227c:	9300      	str	r3, [sp, #0]
 801227e:	6022      	str	r2, [r4, #0]
 8012280:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012284:	4628      	mov	r0, r5
 8012286:	f7ff fecd 	bl	8012024 <__cvt>
 801228a:	9b06      	ldr	r3, [sp, #24]
 801228c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801228e:	2b47      	cmp	r3, #71	; 0x47
 8012290:	4680      	mov	r8, r0
 8012292:	d108      	bne.n	80122a6 <_printf_float+0x142>
 8012294:	1cc8      	adds	r0, r1, #3
 8012296:	db02      	blt.n	801229e <_printf_float+0x13a>
 8012298:	6863      	ldr	r3, [r4, #4]
 801229a:	4299      	cmp	r1, r3
 801229c:	dd41      	ble.n	8012322 <_printf_float+0x1be>
 801229e:	f1ab 0b02 	sub.w	fp, fp, #2
 80122a2:	fa5f fb8b 	uxtb.w	fp, fp
 80122a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80122aa:	d820      	bhi.n	80122ee <_printf_float+0x18a>
 80122ac:	3901      	subs	r1, #1
 80122ae:	465a      	mov	r2, fp
 80122b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80122b4:	9109      	str	r1, [sp, #36]	; 0x24
 80122b6:	f7ff ff17 	bl	80120e8 <__exponent>
 80122ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122bc:	1813      	adds	r3, r2, r0
 80122be:	2a01      	cmp	r2, #1
 80122c0:	4681      	mov	r9, r0
 80122c2:	6123      	str	r3, [r4, #16]
 80122c4:	dc02      	bgt.n	80122cc <_printf_float+0x168>
 80122c6:	6822      	ldr	r2, [r4, #0]
 80122c8:	07d2      	lsls	r2, r2, #31
 80122ca:	d501      	bpl.n	80122d0 <_printf_float+0x16c>
 80122cc:	3301      	adds	r3, #1
 80122ce:	6123      	str	r3, [r4, #16]
 80122d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d09c      	beq.n	8012212 <_printf_float+0xae>
 80122d8:	232d      	movs	r3, #45	; 0x2d
 80122da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80122de:	e798      	b.n	8012212 <_printf_float+0xae>
 80122e0:	9a06      	ldr	r2, [sp, #24]
 80122e2:	2a47      	cmp	r2, #71	; 0x47
 80122e4:	d1be      	bne.n	8012264 <_printf_float+0x100>
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d1bc      	bne.n	8012264 <_printf_float+0x100>
 80122ea:	2301      	movs	r3, #1
 80122ec:	e7b9      	b.n	8012262 <_printf_float+0xfe>
 80122ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80122f2:	d118      	bne.n	8012326 <_printf_float+0x1c2>
 80122f4:	2900      	cmp	r1, #0
 80122f6:	6863      	ldr	r3, [r4, #4]
 80122f8:	dd0b      	ble.n	8012312 <_printf_float+0x1ae>
 80122fa:	6121      	str	r1, [r4, #16]
 80122fc:	b913      	cbnz	r3, 8012304 <_printf_float+0x1a0>
 80122fe:	6822      	ldr	r2, [r4, #0]
 8012300:	07d0      	lsls	r0, r2, #31
 8012302:	d502      	bpl.n	801230a <_printf_float+0x1a6>
 8012304:	3301      	adds	r3, #1
 8012306:	440b      	add	r3, r1
 8012308:	6123      	str	r3, [r4, #16]
 801230a:	65a1      	str	r1, [r4, #88]	; 0x58
 801230c:	f04f 0900 	mov.w	r9, #0
 8012310:	e7de      	b.n	80122d0 <_printf_float+0x16c>
 8012312:	b913      	cbnz	r3, 801231a <_printf_float+0x1b6>
 8012314:	6822      	ldr	r2, [r4, #0]
 8012316:	07d2      	lsls	r2, r2, #31
 8012318:	d501      	bpl.n	801231e <_printf_float+0x1ba>
 801231a:	3302      	adds	r3, #2
 801231c:	e7f4      	b.n	8012308 <_printf_float+0x1a4>
 801231e:	2301      	movs	r3, #1
 8012320:	e7f2      	b.n	8012308 <_printf_float+0x1a4>
 8012322:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012328:	4299      	cmp	r1, r3
 801232a:	db05      	blt.n	8012338 <_printf_float+0x1d4>
 801232c:	6823      	ldr	r3, [r4, #0]
 801232e:	6121      	str	r1, [r4, #16]
 8012330:	07d8      	lsls	r0, r3, #31
 8012332:	d5ea      	bpl.n	801230a <_printf_float+0x1a6>
 8012334:	1c4b      	adds	r3, r1, #1
 8012336:	e7e7      	b.n	8012308 <_printf_float+0x1a4>
 8012338:	2900      	cmp	r1, #0
 801233a:	bfd4      	ite	le
 801233c:	f1c1 0202 	rsble	r2, r1, #2
 8012340:	2201      	movgt	r2, #1
 8012342:	4413      	add	r3, r2
 8012344:	e7e0      	b.n	8012308 <_printf_float+0x1a4>
 8012346:	6823      	ldr	r3, [r4, #0]
 8012348:	055a      	lsls	r2, r3, #21
 801234a:	d407      	bmi.n	801235c <_printf_float+0x1f8>
 801234c:	6923      	ldr	r3, [r4, #16]
 801234e:	4642      	mov	r2, r8
 8012350:	4631      	mov	r1, r6
 8012352:	4628      	mov	r0, r5
 8012354:	47b8      	blx	r7
 8012356:	3001      	adds	r0, #1
 8012358:	d12c      	bne.n	80123b4 <_printf_float+0x250>
 801235a:	e764      	b.n	8012226 <_printf_float+0xc2>
 801235c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012360:	f240 80e0 	bls.w	8012524 <_printf_float+0x3c0>
 8012364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012368:	2200      	movs	r2, #0
 801236a:	2300      	movs	r3, #0
 801236c:	f7ee fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 8012370:	2800      	cmp	r0, #0
 8012372:	d034      	beq.n	80123de <_printf_float+0x27a>
 8012374:	4a37      	ldr	r2, [pc, #220]	; (8012454 <_printf_float+0x2f0>)
 8012376:	2301      	movs	r3, #1
 8012378:	4631      	mov	r1, r6
 801237a:	4628      	mov	r0, r5
 801237c:	47b8      	blx	r7
 801237e:	3001      	adds	r0, #1
 8012380:	f43f af51 	beq.w	8012226 <_printf_float+0xc2>
 8012384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012388:	429a      	cmp	r2, r3
 801238a:	db02      	blt.n	8012392 <_printf_float+0x22e>
 801238c:	6823      	ldr	r3, [r4, #0]
 801238e:	07d8      	lsls	r0, r3, #31
 8012390:	d510      	bpl.n	80123b4 <_printf_float+0x250>
 8012392:	ee18 3a10 	vmov	r3, s16
 8012396:	4652      	mov	r2, sl
 8012398:	4631      	mov	r1, r6
 801239a:	4628      	mov	r0, r5
 801239c:	47b8      	blx	r7
 801239e:	3001      	adds	r0, #1
 80123a0:	f43f af41 	beq.w	8012226 <_printf_float+0xc2>
 80123a4:	f04f 0800 	mov.w	r8, #0
 80123a8:	f104 091a 	add.w	r9, r4, #26
 80123ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123ae:	3b01      	subs	r3, #1
 80123b0:	4543      	cmp	r3, r8
 80123b2:	dc09      	bgt.n	80123c8 <_printf_float+0x264>
 80123b4:	6823      	ldr	r3, [r4, #0]
 80123b6:	079b      	lsls	r3, r3, #30
 80123b8:	f100 8105 	bmi.w	80125c6 <_printf_float+0x462>
 80123bc:	68e0      	ldr	r0, [r4, #12]
 80123be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123c0:	4298      	cmp	r0, r3
 80123c2:	bfb8      	it	lt
 80123c4:	4618      	movlt	r0, r3
 80123c6:	e730      	b.n	801222a <_printf_float+0xc6>
 80123c8:	2301      	movs	r3, #1
 80123ca:	464a      	mov	r2, r9
 80123cc:	4631      	mov	r1, r6
 80123ce:	4628      	mov	r0, r5
 80123d0:	47b8      	blx	r7
 80123d2:	3001      	adds	r0, #1
 80123d4:	f43f af27 	beq.w	8012226 <_printf_float+0xc2>
 80123d8:	f108 0801 	add.w	r8, r8, #1
 80123dc:	e7e6      	b.n	80123ac <_printf_float+0x248>
 80123de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	dc39      	bgt.n	8012458 <_printf_float+0x2f4>
 80123e4:	4a1b      	ldr	r2, [pc, #108]	; (8012454 <_printf_float+0x2f0>)
 80123e6:	2301      	movs	r3, #1
 80123e8:	4631      	mov	r1, r6
 80123ea:	4628      	mov	r0, r5
 80123ec:	47b8      	blx	r7
 80123ee:	3001      	adds	r0, #1
 80123f0:	f43f af19 	beq.w	8012226 <_printf_float+0xc2>
 80123f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123f8:	4313      	orrs	r3, r2
 80123fa:	d102      	bne.n	8012402 <_printf_float+0x29e>
 80123fc:	6823      	ldr	r3, [r4, #0]
 80123fe:	07d9      	lsls	r1, r3, #31
 8012400:	d5d8      	bpl.n	80123b4 <_printf_float+0x250>
 8012402:	ee18 3a10 	vmov	r3, s16
 8012406:	4652      	mov	r2, sl
 8012408:	4631      	mov	r1, r6
 801240a:	4628      	mov	r0, r5
 801240c:	47b8      	blx	r7
 801240e:	3001      	adds	r0, #1
 8012410:	f43f af09 	beq.w	8012226 <_printf_float+0xc2>
 8012414:	f04f 0900 	mov.w	r9, #0
 8012418:	f104 0a1a 	add.w	sl, r4, #26
 801241c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801241e:	425b      	negs	r3, r3
 8012420:	454b      	cmp	r3, r9
 8012422:	dc01      	bgt.n	8012428 <_printf_float+0x2c4>
 8012424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012426:	e792      	b.n	801234e <_printf_float+0x1ea>
 8012428:	2301      	movs	r3, #1
 801242a:	4652      	mov	r2, sl
 801242c:	4631      	mov	r1, r6
 801242e:	4628      	mov	r0, r5
 8012430:	47b8      	blx	r7
 8012432:	3001      	adds	r0, #1
 8012434:	f43f aef7 	beq.w	8012226 <_printf_float+0xc2>
 8012438:	f109 0901 	add.w	r9, r9, #1
 801243c:	e7ee      	b.n	801241c <_printf_float+0x2b8>
 801243e:	bf00      	nop
 8012440:	7fefffff 	.word	0x7fefffff
 8012444:	08015740 	.word	0x08015740
 8012448:	08015744 	.word	0x08015744
 801244c:	0801574c 	.word	0x0801574c
 8012450:	08015748 	.word	0x08015748
 8012454:	08015750 	.word	0x08015750
 8012458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801245a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801245c:	429a      	cmp	r2, r3
 801245e:	bfa8      	it	ge
 8012460:	461a      	movge	r2, r3
 8012462:	2a00      	cmp	r2, #0
 8012464:	4691      	mov	r9, r2
 8012466:	dc37      	bgt.n	80124d8 <_printf_float+0x374>
 8012468:	f04f 0b00 	mov.w	fp, #0
 801246c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012470:	f104 021a 	add.w	r2, r4, #26
 8012474:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012476:	9305      	str	r3, [sp, #20]
 8012478:	eba3 0309 	sub.w	r3, r3, r9
 801247c:	455b      	cmp	r3, fp
 801247e:	dc33      	bgt.n	80124e8 <_printf_float+0x384>
 8012480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012484:	429a      	cmp	r2, r3
 8012486:	db3b      	blt.n	8012500 <_printf_float+0x39c>
 8012488:	6823      	ldr	r3, [r4, #0]
 801248a:	07da      	lsls	r2, r3, #31
 801248c:	d438      	bmi.n	8012500 <_printf_float+0x39c>
 801248e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012490:	9b05      	ldr	r3, [sp, #20]
 8012492:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012494:	1ad3      	subs	r3, r2, r3
 8012496:	eba2 0901 	sub.w	r9, r2, r1
 801249a:	4599      	cmp	r9, r3
 801249c:	bfa8      	it	ge
 801249e:	4699      	movge	r9, r3
 80124a0:	f1b9 0f00 	cmp.w	r9, #0
 80124a4:	dc35      	bgt.n	8012512 <_printf_float+0x3ae>
 80124a6:	f04f 0800 	mov.w	r8, #0
 80124aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80124ae:	f104 0a1a 	add.w	sl, r4, #26
 80124b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80124b6:	1a9b      	subs	r3, r3, r2
 80124b8:	eba3 0309 	sub.w	r3, r3, r9
 80124bc:	4543      	cmp	r3, r8
 80124be:	f77f af79 	ble.w	80123b4 <_printf_float+0x250>
 80124c2:	2301      	movs	r3, #1
 80124c4:	4652      	mov	r2, sl
 80124c6:	4631      	mov	r1, r6
 80124c8:	4628      	mov	r0, r5
 80124ca:	47b8      	blx	r7
 80124cc:	3001      	adds	r0, #1
 80124ce:	f43f aeaa 	beq.w	8012226 <_printf_float+0xc2>
 80124d2:	f108 0801 	add.w	r8, r8, #1
 80124d6:	e7ec      	b.n	80124b2 <_printf_float+0x34e>
 80124d8:	4613      	mov	r3, r2
 80124da:	4631      	mov	r1, r6
 80124dc:	4642      	mov	r2, r8
 80124de:	4628      	mov	r0, r5
 80124e0:	47b8      	blx	r7
 80124e2:	3001      	adds	r0, #1
 80124e4:	d1c0      	bne.n	8012468 <_printf_float+0x304>
 80124e6:	e69e      	b.n	8012226 <_printf_float+0xc2>
 80124e8:	2301      	movs	r3, #1
 80124ea:	4631      	mov	r1, r6
 80124ec:	4628      	mov	r0, r5
 80124ee:	9205      	str	r2, [sp, #20]
 80124f0:	47b8      	blx	r7
 80124f2:	3001      	adds	r0, #1
 80124f4:	f43f ae97 	beq.w	8012226 <_printf_float+0xc2>
 80124f8:	9a05      	ldr	r2, [sp, #20]
 80124fa:	f10b 0b01 	add.w	fp, fp, #1
 80124fe:	e7b9      	b.n	8012474 <_printf_float+0x310>
 8012500:	ee18 3a10 	vmov	r3, s16
 8012504:	4652      	mov	r2, sl
 8012506:	4631      	mov	r1, r6
 8012508:	4628      	mov	r0, r5
 801250a:	47b8      	blx	r7
 801250c:	3001      	adds	r0, #1
 801250e:	d1be      	bne.n	801248e <_printf_float+0x32a>
 8012510:	e689      	b.n	8012226 <_printf_float+0xc2>
 8012512:	9a05      	ldr	r2, [sp, #20]
 8012514:	464b      	mov	r3, r9
 8012516:	4442      	add	r2, r8
 8012518:	4631      	mov	r1, r6
 801251a:	4628      	mov	r0, r5
 801251c:	47b8      	blx	r7
 801251e:	3001      	adds	r0, #1
 8012520:	d1c1      	bne.n	80124a6 <_printf_float+0x342>
 8012522:	e680      	b.n	8012226 <_printf_float+0xc2>
 8012524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012526:	2a01      	cmp	r2, #1
 8012528:	dc01      	bgt.n	801252e <_printf_float+0x3ca>
 801252a:	07db      	lsls	r3, r3, #31
 801252c:	d538      	bpl.n	80125a0 <_printf_float+0x43c>
 801252e:	2301      	movs	r3, #1
 8012530:	4642      	mov	r2, r8
 8012532:	4631      	mov	r1, r6
 8012534:	4628      	mov	r0, r5
 8012536:	47b8      	blx	r7
 8012538:	3001      	adds	r0, #1
 801253a:	f43f ae74 	beq.w	8012226 <_printf_float+0xc2>
 801253e:	ee18 3a10 	vmov	r3, s16
 8012542:	4652      	mov	r2, sl
 8012544:	4631      	mov	r1, r6
 8012546:	4628      	mov	r0, r5
 8012548:	47b8      	blx	r7
 801254a:	3001      	adds	r0, #1
 801254c:	f43f ae6b 	beq.w	8012226 <_printf_float+0xc2>
 8012550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012554:	2200      	movs	r2, #0
 8012556:	2300      	movs	r3, #0
 8012558:	f7ee fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 801255c:	b9d8      	cbnz	r0, 8012596 <_printf_float+0x432>
 801255e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012560:	f108 0201 	add.w	r2, r8, #1
 8012564:	3b01      	subs	r3, #1
 8012566:	4631      	mov	r1, r6
 8012568:	4628      	mov	r0, r5
 801256a:	47b8      	blx	r7
 801256c:	3001      	adds	r0, #1
 801256e:	d10e      	bne.n	801258e <_printf_float+0x42a>
 8012570:	e659      	b.n	8012226 <_printf_float+0xc2>
 8012572:	2301      	movs	r3, #1
 8012574:	4652      	mov	r2, sl
 8012576:	4631      	mov	r1, r6
 8012578:	4628      	mov	r0, r5
 801257a:	47b8      	blx	r7
 801257c:	3001      	adds	r0, #1
 801257e:	f43f ae52 	beq.w	8012226 <_printf_float+0xc2>
 8012582:	f108 0801 	add.w	r8, r8, #1
 8012586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012588:	3b01      	subs	r3, #1
 801258a:	4543      	cmp	r3, r8
 801258c:	dcf1      	bgt.n	8012572 <_printf_float+0x40e>
 801258e:	464b      	mov	r3, r9
 8012590:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012594:	e6dc      	b.n	8012350 <_printf_float+0x1ec>
 8012596:	f04f 0800 	mov.w	r8, #0
 801259a:	f104 0a1a 	add.w	sl, r4, #26
 801259e:	e7f2      	b.n	8012586 <_printf_float+0x422>
 80125a0:	2301      	movs	r3, #1
 80125a2:	4642      	mov	r2, r8
 80125a4:	e7df      	b.n	8012566 <_printf_float+0x402>
 80125a6:	2301      	movs	r3, #1
 80125a8:	464a      	mov	r2, r9
 80125aa:	4631      	mov	r1, r6
 80125ac:	4628      	mov	r0, r5
 80125ae:	47b8      	blx	r7
 80125b0:	3001      	adds	r0, #1
 80125b2:	f43f ae38 	beq.w	8012226 <_printf_float+0xc2>
 80125b6:	f108 0801 	add.w	r8, r8, #1
 80125ba:	68e3      	ldr	r3, [r4, #12]
 80125bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80125be:	1a5b      	subs	r3, r3, r1
 80125c0:	4543      	cmp	r3, r8
 80125c2:	dcf0      	bgt.n	80125a6 <_printf_float+0x442>
 80125c4:	e6fa      	b.n	80123bc <_printf_float+0x258>
 80125c6:	f04f 0800 	mov.w	r8, #0
 80125ca:	f104 0919 	add.w	r9, r4, #25
 80125ce:	e7f4      	b.n	80125ba <_printf_float+0x456>

080125d0 <_printf_common>:
 80125d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125d4:	4616      	mov	r6, r2
 80125d6:	4699      	mov	r9, r3
 80125d8:	688a      	ldr	r2, [r1, #8]
 80125da:	690b      	ldr	r3, [r1, #16]
 80125dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80125e0:	4293      	cmp	r3, r2
 80125e2:	bfb8      	it	lt
 80125e4:	4613      	movlt	r3, r2
 80125e6:	6033      	str	r3, [r6, #0]
 80125e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80125ec:	4607      	mov	r7, r0
 80125ee:	460c      	mov	r4, r1
 80125f0:	b10a      	cbz	r2, 80125f6 <_printf_common+0x26>
 80125f2:	3301      	adds	r3, #1
 80125f4:	6033      	str	r3, [r6, #0]
 80125f6:	6823      	ldr	r3, [r4, #0]
 80125f8:	0699      	lsls	r1, r3, #26
 80125fa:	bf42      	ittt	mi
 80125fc:	6833      	ldrmi	r3, [r6, #0]
 80125fe:	3302      	addmi	r3, #2
 8012600:	6033      	strmi	r3, [r6, #0]
 8012602:	6825      	ldr	r5, [r4, #0]
 8012604:	f015 0506 	ands.w	r5, r5, #6
 8012608:	d106      	bne.n	8012618 <_printf_common+0x48>
 801260a:	f104 0a19 	add.w	sl, r4, #25
 801260e:	68e3      	ldr	r3, [r4, #12]
 8012610:	6832      	ldr	r2, [r6, #0]
 8012612:	1a9b      	subs	r3, r3, r2
 8012614:	42ab      	cmp	r3, r5
 8012616:	dc26      	bgt.n	8012666 <_printf_common+0x96>
 8012618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801261c:	1e13      	subs	r3, r2, #0
 801261e:	6822      	ldr	r2, [r4, #0]
 8012620:	bf18      	it	ne
 8012622:	2301      	movne	r3, #1
 8012624:	0692      	lsls	r2, r2, #26
 8012626:	d42b      	bmi.n	8012680 <_printf_common+0xb0>
 8012628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801262c:	4649      	mov	r1, r9
 801262e:	4638      	mov	r0, r7
 8012630:	47c0      	blx	r8
 8012632:	3001      	adds	r0, #1
 8012634:	d01e      	beq.n	8012674 <_printf_common+0xa4>
 8012636:	6823      	ldr	r3, [r4, #0]
 8012638:	68e5      	ldr	r5, [r4, #12]
 801263a:	6832      	ldr	r2, [r6, #0]
 801263c:	f003 0306 	and.w	r3, r3, #6
 8012640:	2b04      	cmp	r3, #4
 8012642:	bf08      	it	eq
 8012644:	1aad      	subeq	r5, r5, r2
 8012646:	68a3      	ldr	r3, [r4, #8]
 8012648:	6922      	ldr	r2, [r4, #16]
 801264a:	bf0c      	ite	eq
 801264c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012650:	2500      	movne	r5, #0
 8012652:	4293      	cmp	r3, r2
 8012654:	bfc4      	itt	gt
 8012656:	1a9b      	subgt	r3, r3, r2
 8012658:	18ed      	addgt	r5, r5, r3
 801265a:	2600      	movs	r6, #0
 801265c:	341a      	adds	r4, #26
 801265e:	42b5      	cmp	r5, r6
 8012660:	d11a      	bne.n	8012698 <_printf_common+0xc8>
 8012662:	2000      	movs	r0, #0
 8012664:	e008      	b.n	8012678 <_printf_common+0xa8>
 8012666:	2301      	movs	r3, #1
 8012668:	4652      	mov	r2, sl
 801266a:	4649      	mov	r1, r9
 801266c:	4638      	mov	r0, r7
 801266e:	47c0      	blx	r8
 8012670:	3001      	adds	r0, #1
 8012672:	d103      	bne.n	801267c <_printf_common+0xac>
 8012674:	f04f 30ff 	mov.w	r0, #4294967295
 8012678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801267c:	3501      	adds	r5, #1
 801267e:	e7c6      	b.n	801260e <_printf_common+0x3e>
 8012680:	18e1      	adds	r1, r4, r3
 8012682:	1c5a      	adds	r2, r3, #1
 8012684:	2030      	movs	r0, #48	; 0x30
 8012686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801268a:	4422      	add	r2, r4
 801268c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012694:	3302      	adds	r3, #2
 8012696:	e7c7      	b.n	8012628 <_printf_common+0x58>
 8012698:	2301      	movs	r3, #1
 801269a:	4622      	mov	r2, r4
 801269c:	4649      	mov	r1, r9
 801269e:	4638      	mov	r0, r7
 80126a0:	47c0      	blx	r8
 80126a2:	3001      	adds	r0, #1
 80126a4:	d0e6      	beq.n	8012674 <_printf_common+0xa4>
 80126a6:	3601      	adds	r6, #1
 80126a8:	e7d9      	b.n	801265e <_printf_common+0x8e>
	...

080126ac <_printf_i>:
 80126ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80126b0:	460c      	mov	r4, r1
 80126b2:	4691      	mov	r9, r2
 80126b4:	7e27      	ldrb	r7, [r4, #24]
 80126b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80126b8:	2f78      	cmp	r7, #120	; 0x78
 80126ba:	4680      	mov	r8, r0
 80126bc:	469a      	mov	sl, r3
 80126be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80126c2:	d807      	bhi.n	80126d4 <_printf_i+0x28>
 80126c4:	2f62      	cmp	r7, #98	; 0x62
 80126c6:	d80a      	bhi.n	80126de <_printf_i+0x32>
 80126c8:	2f00      	cmp	r7, #0
 80126ca:	f000 80d8 	beq.w	801287e <_printf_i+0x1d2>
 80126ce:	2f58      	cmp	r7, #88	; 0x58
 80126d0:	f000 80a3 	beq.w	801281a <_printf_i+0x16e>
 80126d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80126d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80126dc:	e03a      	b.n	8012754 <_printf_i+0xa8>
 80126de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80126e2:	2b15      	cmp	r3, #21
 80126e4:	d8f6      	bhi.n	80126d4 <_printf_i+0x28>
 80126e6:	a001      	add	r0, pc, #4	; (adr r0, 80126ec <_printf_i+0x40>)
 80126e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80126ec:	08012745 	.word	0x08012745
 80126f0:	08012759 	.word	0x08012759
 80126f4:	080126d5 	.word	0x080126d5
 80126f8:	080126d5 	.word	0x080126d5
 80126fc:	080126d5 	.word	0x080126d5
 8012700:	080126d5 	.word	0x080126d5
 8012704:	08012759 	.word	0x08012759
 8012708:	080126d5 	.word	0x080126d5
 801270c:	080126d5 	.word	0x080126d5
 8012710:	080126d5 	.word	0x080126d5
 8012714:	080126d5 	.word	0x080126d5
 8012718:	08012865 	.word	0x08012865
 801271c:	08012789 	.word	0x08012789
 8012720:	08012847 	.word	0x08012847
 8012724:	080126d5 	.word	0x080126d5
 8012728:	080126d5 	.word	0x080126d5
 801272c:	08012887 	.word	0x08012887
 8012730:	080126d5 	.word	0x080126d5
 8012734:	08012789 	.word	0x08012789
 8012738:	080126d5 	.word	0x080126d5
 801273c:	080126d5 	.word	0x080126d5
 8012740:	0801284f 	.word	0x0801284f
 8012744:	680b      	ldr	r3, [r1, #0]
 8012746:	1d1a      	adds	r2, r3, #4
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	600a      	str	r2, [r1, #0]
 801274c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012754:	2301      	movs	r3, #1
 8012756:	e0a3      	b.n	80128a0 <_printf_i+0x1f4>
 8012758:	6825      	ldr	r5, [r4, #0]
 801275a:	6808      	ldr	r0, [r1, #0]
 801275c:	062e      	lsls	r6, r5, #24
 801275e:	f100 0304 	add.w	r3, r0, #4
 8012762:	d50a      	bpl.n	801277a <_printf_i+0xce>
 8012764:	6805      	ldr	r5, [r0, #0]
 8012766:	600b      	str	r3, [r1, #0]
 8012768:	2d00      	cmp	r5, #0
 801276a:	da03      	bge.n	8012774 <_printf_i+0xc8>
 801276c:	232d      	movs	r3, #45	; 0x2d
 801276e:	426d      	negs	r5, r5
 8012770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012774:	485e      	ldr	r0, [pc, #376]	; (80128f0 <_printf_i+0x244>)
 8012776:	230a      	movs	r3, #10
 8012778:	e019      	b.n	80127ae <_printf_i+0x102>
 801277a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801277e:	6805      	ldr	r5, [r0, #0]
 8012780:	600b      	str	r3, [r1, #0]
 8012782:	bf18      	it	ne
 8012784:	b22d      	sxthne	r5, r5
 8012786:	e7ef      	b.n	8012768 <_printf_i+0xbc>
 8012788:	680b      	ldr	r3, [r1, #0]
 801278a:	6825      	ldr	r5, [r4, #0]
 801278c:	1d18      	adds	r0, r3, #4
 801278e:	6008      	str	r0, [r1, #0]
 8012790:	0628      	lsls	r0, r5, #24
 8012792:	d501      	bpl.n	8012798 <_printf_i+0xec>
 8012794:	681d      	ldr	r5, [r3, #0]
 8012796:	e002      	b.n	801279e <_printf_i+0xf2>
 8012798:	0669      	lsls	r1, r5, #25
 801279a:	d5fb      	bpl.n	8012794 <_printf_i+0xe8>
 801279c:	881d      	ldrh	r5, [r3, #0]
 801279e:	4854      	ldr	r0, [pc, #336]	; (80128f0 <_printf_i+0x244>)
 80127a0:	2f6f      	cmp	r7, #111	; 0x6f
 80127a2:	bf0c      	ite	eq
 80127a4:	2308      	moveq	r3, #8
 80127a6:	230a      	movne	r3, #10
 80127a8:	2100      	movs	r1, #0
 80127aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80127ae:	6866      	ldr	r6, [r4, #4]
 80127b0:	60a6      	str	r6, [r4, #8]
 80127b2:	2e00      	cmp	r6, #0
 80127b4:	bfa2      	ittt	ge
 80127b6:	6821      	ldrge	r1, [r4, #0]
 80127b8:	f021 0104 	bicge.w	r1, r1, #4
 80127bc:	6021      	strge	r1, [r4, #0]
 80127be:	b90d      	cbnz	r5, 80127c4 <_printf_i+0x118>
 80127c0:	2e00      	cmp	r6, #0
 80127c2:	d04d      	beq.n	8012860 <_printf_i+0x1b4>
 80127c4:	4616      	mov	r6, r2
 80127c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80127ca:	fb03 5711 	mls	r7, r3, r1, r5
 80127ce:	5dc7      	ldrb	r7, [r0, r7]
 80127d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80127d4:	462f      	mov	r7, r5
 80127d6:	42bb      	cmp	r3, r7
 80127d8:	460d      	mov	r5, r1
 80127da:	d9f4      	bls.n	80127c6 <_printf_i+0x11a>
 80127dc:	2b08      	cmp	r3, #8
 80127de:	d10b      	bne.n	80127f8 <_printf_i+0x14c>
 80127e0:	6823      	ldr	r3, [r4, #0]
 80127e2:	07df      	lsls	r7, r3, #31
 80127e4:	d508      	bpl.n	80127f8 <_printf_i+0x14c>
 80127e6:	6923      	ldr	r3, [r4, #16]
 80127e8:	6861      	ldr	r1, [r4, #4]
 80127ea:	4299      	cmp	r1, r3
 80127ec:	bfde      	ittt	le
 80127ee:	2330      	movle	r3, #48	; 0x30
 80127f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80127f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80127f8:	1b92      	subs	r2, r2, r6
 80127fa:	6122      	str	r2, [r4, #16]
 80127fc:	f8cd a000 	str.w	sl, [sp]
 8012800:	464b      	mov	r3, r9
 8012802:	aa03      	add	r2, sp, #12
 8012804:	4621      	mov	r1, r4
 8012806:	4640      	mov	r0, r8
 8012808:	f7ff fee2 	bl	80125d0 <_printf_common>
 801280c:	3001      	adds	r0, #1
 801280e:	d14c      	bne.n	80128aa <_printf_i+0x1fe>
 8012810:	f04f 30ff 	mov.w	r0, #4294967295
 8012814:	b004      	add	sp, #16
 8012816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801281a:	4835      	ldr	r0, [pc, #212]	; (80128f0 <_printf_i+0x244>)
 801281c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012820:	6823      	ldr	r3, [r4, #0]
 8012822:	680e      	ldr	r6, [r1, #0]
 8012824:	061f      	lsls	r7, r3, #24
 8012826:	f856 5b04 	ldr.w	r5, [r6], #4
 801282a:	600e      	str	r6, [r1, #0]
 801282c:	d514      	bpl.n	8012858 <_printf_i+0x1ac>
 801282e:	07d9      	lsls	r1, r3, #31
 8012830:	bf44      	itt	mi
 8012832:	f043 0320 	orrmi.w	r3, r3, #32
 8012836:	6023      	strmi	r3, [r4, #0]
 8012838:	b91d      	cbnz	r5, 8012842 <_printf_i+0x196>
 801283a:	6823      	ldr	r3, [r4, #0]
 801283c:	f023 0320 	bic.w	r3, r3, #32
 8012840:	6023      	str	r3, [r4, #0]
 8012842:	2310      	movs	r3, #16
 8012844:	e7b0      	b.n	80127a8 <_printf_i+0xfc>
 8012846:	6823      	ldr	r3, [r4, #0]
 8012848:	f043 0320 	orr.w	r3, r3, #32
 801284c:	6023      	str	r3, [r4, #0]
 801284e:	2378      	movs	r3, #120	; 0x78
 8012850:	4828      	ldr	r0, [pc, #160]	; (80128f4 <_printf_i+0x248>)
 8012852:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012856:	e7e3      	b.n	8012820 <_printf_i+0x174>
 8012858:	065e      	lsls	r6, r3, #25
 801285a:	bf48      	it	mi
 801285c:	b2ad      	uxthmi	r5, r5
 801285e:	e7e6      	b.n	801282e <_printf_i+0x182>
 8012860:	4616      	mov	r6, r2
 8012862:	e7bb      	b.n	80127dc <_printf_i+0x130>
 8012864:	680b      	ldr	r3, [r1, #0]
 8012866:	6826      	ldr	r6, [r4, #0]
 8012868:	6960      	ldr	r0, [r4, #20]
 801286a:	1d1d      	adds	r5, r3, #4
 801286c:	600d      	str	r5, [r1, #0]
 801286e:	0635      	lsls	r5, r6, #24
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	d501      	bpl.n	8012878 <_printf_i+0x1cc>
 8012874:	6018      	str	r0, [r3, #0]
 8012876:	e002      	b.n	801287e <_printf_i+0x1d2>
 8012878:	0671      	lsls	r1, r6, #25
 801287a:	d5fb      	bpl.n	8012874 <_printf_i+0x1c8>
 801287c:	8018      	strh	r0, [r3, #0]
 801287e:	2300      	movs	r3, #0
 8012880:	6123      	str	r3, [r4, #16]
 8012882:	4616      	mov	r6, r2
 8012884:	e7ba      	b.n	80127fc <_printf_i+0x150>
 8012886:	680b      	ldr	r3, [r1, #0]
 8012888:	1d1a      	adds	r2, r3, #4
 801288a:	600a      	str	r2, [r1, #0]
 801288c:	681e      	ldr	r6, [r3, #0]
 801288e:	6862      	ldr	r2, [r4, #4]
 8012890:	2100      	movs	r1, #0
 8012892:	4630      	mov	r0, r6
 8012894:	f7ed fca4 	bl	80001e0 <memchr>
 8012898:	b108      	cbz	r0, 801289e <_printf_i+0x1f2>
 801289a:	1b80      	subs	r0, r0, r6
 801289c:	6060      	str	r0, [r4, #4]
 801289e:	6863      	ldr	r3, [r4, #4]
 80128a0:	6123      	str	r3, [r4, #16]
 80128a2:	2300      	movs	r3, #0
 80128a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128a8:	e7a8      	b.n	80127fc <_printf_i+0x150>
 80128aa:	6923      	ldr	r3, [r4, #16]
 80128ac:	4632      	mov	r2, r6
 80128ae:	4649      	mov	r1, r9
 80128b0:	4640      	mov	r0, r8
 80128b2:	47d0      	blx	sl
 80128b4:	3001      	adds	r0, #1
 80128b6:	d0ab      	beq.n	8012810 <_printf_i+0x164>
 80128b8:	6823      	ldr	r3, [r4, #0]
 80128ba:	079b      	lsls	r3, r3, #30
 80128bc:	d413      	bmi.n	80128e6 <_printf_i+0x23a>
 80128be:	68e0      	ldr	r0, [r4, #12]
 80128c0:	9b03      	ldr	r3, [sp, #12]
 80128c2:	4298      	cmp	r0, r3
 80128c4:	bfb8      	it	lt
 80128c6:	4618      	movlt	r0, r3
 80128c8:	e7a4      	b.n	8012814 <_printf_i+0x168>
 80128ca:	2301      	movs	r3, #1
 80128cc:	4632      	mov	r2, r6
 80128ce:	4649      	mov	r1, r9
 80128d0:	4640      	mov	r0, r8
 80128d2:	47d0      	blx	sl
 80128d4:	3001      	adds	r0, #1
 80128d6:	d09b      	beq.n	8012810 <_printf_i+0x164>
 80128d8:	3501      	adds	r5, #1
 80128da:	68e3      	ldr	r3, [r4, #12]
 80128dc:	9903      	ldr	r1, [sp, #12]
 80128de:	1a5b      	subs	r3, r3, r1
 80128e0:	42ab      	cmp	r3, r5
 80128e2:	dcf2      	bgt.n	80128ca <_printf_i+0x21e>
 80128e4:	e7eb      	b.n	80128be <_printf_i+0x212>
 80128e6:	2500      	movs	r5, #0
 80128e8:	f104 0619 	add.w	r6, r4, #25
 80128ec:	e7f5      	b.n	80128da <_printf_i+0x22e>
 80128ee:	bf00      	nop
 80128f0:	08015752 	.word	0x08015752
 80128f4:	08015763 	.word	0x08015763

080128f8 <iprintf>:
 80128f8:	b40f      	push	{r0, r1, r2, r3}
 80128fa:	4b0a      	ldr	r3, [pc, #40]	; (8012924 <iprintf+0x2c>)
 80128fc:	b513      	push	{r0, r1, r4, lr}
 80128fe:	681c      	ldr	r4, [r3, #0]
 8012900:	b124      	cbz	r4, 801290c <iprintf+0x14>
 8012902:	69a3      	ldr	r3, [r4, #24]
 8012904:	b913      	cbnz	r3, 801290c <iprintf+0x14>
 8012906:	4620      	mov	r0, r4
 8012908:	f7ff fa56 	bl	8011db8 <__sinit>
 801290c:	ab05      	add	r3, sp, #20
 801290e:	9a04      	ldr	r2, [sp, #16]
 8012910:	68a1      	ldr	r1, [r4, #8]
 8012912:	9301      	str	r3, [sp, #4]
 8012914:	4620      	mov	r0, r4
 8012916:	f001 ff87 	bl	8014828 <_vfiprintf_r>
 801291a:	b002      	add	sp, #8
 801291c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012920:	b004      	add	sp, #16
 8012922:	4770      	bx	lr
 8012924:	20000594 	.word	0x20000594

08012928 <_puts_r>:
 8012928:	b570      	push	{r4, r5, r6, lr}
 801292a:	460e      	mov	r6, r1
 801292c:	4605      	mov	r5, r0
 801292e:	b118      	cbz	r0, 8012938 <_puts_r+0x10>
 8012930:	6983      	ldr	r3, [r0, #24]
 8012932:	b90b      	cbnz	r3, 8012938 <_puts_r+0x10>
 8012934:	f7ff fa40 	bl	8011db8 <__sinit>
 8012938:	69ab      	ldr	r3, [r5, #24]
 801293a:	68ac      	ldr	r4, [r5, #8]
 801293c:	b913      	cbnz	r3, 8012944 <_puts_r+0x1c>
 801293e:	4628      	mov	r0, r5
 8012940:	f7ff fa3a 	bl	8011db8 <__sinit>
 8012944:	4b2c      	ldr	r3, [pc, #176]	; (80129f8 <_puts_r+0xd0>)
 8012946:	429c      	cmp	r4, r3
 8012948:	d120      	bne.n	801298c <_puts_r+0x64>
 801294a:	686c      	ldr	r4, [r5, #4]
 801294c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801294e:	07db      	lsls	r3, r3, #31
 8012950:	d405      	bmi.n	801295e <_puts_r+0x36>
 8012952:	89a3      	ldrh	r3, [r4, #12]
 8012954:	0598      	lsls	r0, r3, #22
 8012956:	d402      	bmi.n	801295e <_puts_r+0x36>
 8012958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801295a:	f7ff faf0 	bl	8011f3e <__retarget_lock_acquire_recursive>
 801295e:	89a3      	ldrh	r3, [r4, #12]
 8012960:	0719      	lsls	r1, r3, #28
 8012962:	d51d      	bpl.n	80129a0 <_puts_r+0x78>
 8012964:	6923      	ldr	r3, [r4, #16]
 8012966:	b1db      	cbz	r3, 80129a0 <_puts_r+0x78>
 8012968:	3e01      	subs	r6, #1
 801296a:	68a3      	ldr	r3, [r4, #8]
 801296c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012970:	3b01      	subs	r3, #1
 8012972:	60a3      	str	r3, [r4, #8]
 8012974:	bb39      	cbnz	r1, 80129c6 <_puts_r+0x9e>
 8012976:	2b00      	cmp	r3, #0
 8012978:	da38      	bge.n	80129ec <_puts_r+0xc4>
 801297a:	4622      	mov	r2, r4
 801297c:	210a      	movs	r1, #10
 801297e:	4628      	mov	r0, r5
 8012980:	f000 f942 	bl	8012c08 <__swbuf_r>
 8012984:	3001      	adds	r0, #1
 8012986:	d011      	beq.n	80129ac <_puts_r+0x84>
 8012988:	250a      	movs	r5, #10
 801298a:	e011      	b.n	80129b0 <_puts_r+0x88>
 801298c:	4b1b      	ldr	r3, [pc, #108]	; (80129fc <_puts_r+0xd4>)
 801298e:	429c      	cmp	r4, r3
 8012990:	d101      	bne.n	8012996 <_puts_r+0x6e>
 8012992:	68ac      	ldr	r4, [r5, #8]
 8012994:	e7da      	b.n	801294c <_puts_r+0x24>
 8012996:	4b1a      	ldr	r3, [pc, #104]	; (8012a00 <_puts_r+0xd8>)
 8012998:	429c      	cmp	r4, r3
 801299a:	bf08      	it	eq
 801299c:	68ec      	ldreq	r4, [r5, #12]
 801299e:	e7d5      	b.n	801294c <_puts_r+0x24>
 80129a0:	4621      	mov	r1, r4
 80129a2:	4628      	mov	r0, r5
 80129a4:	f000 f994 	bl	8012cd0 <__swsetup_r>
 80129a8:	2800      	cmp	r0, #0
 80129aa:	d0dd      	beq.n	8012968 <_puts_r+0x40>
 80129ac:	f04f 35ff 	mov.w	r5, #4294967295
 80129b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129b2:	07da      	lsls	r2, r3, #31
 80129b4:	d405      	bmi.n	80129c2 <_puts_r+0x9a>
 80129b6:	89a3      	ldrh	r3, [r4, #12]
 80129b8:	059b      	lsls	r3, r3, #22
 80129ba:	d402      	bmi.n	80129c2 <_puts_r+0x9a>
 80129bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129be:	f7ff fabf 	bl	8011f40 <__retarget_lock_release_recursive>
 80129c2:	4628      	mov	r0, r5
 80129c4:	bd70      	pop	{r4, r5, r6, pc}
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	da04      	bge.n	80129d4 <_puts_r+0xac>
 80129ca:	69a2      	ldr	r2, [r4, #24]
 80129cc:	429a      	cmp	r2, r3
 80129ce:	dc06      	bgt.n	80129de <_puts_r+0xb6>
 80129d0:	290a      	cmp	r1, #10
 80129d2:	d004      	beq.n	80129de <_puts_r+0xb6>
 80129d4:	6823      	ldr	r3, [r4, #0]
 80129d6:	1c5a      	adds	r2, r3, #1
 80129d8:	6022      	str	r2, [r4, #0]
 80129da:	7019      	strb	r1, [r3, #0]
 80129dc:	e7c5      	b.n	801296a <_puts_r+0x42>
 80129de:	4622      	mov	r2, r4
 80129e0:	4628      	mov	r0, r5
 80129e2:	f000 f911 	bl	8012c08 <__swbuf_r>
 80129e6:	3001      	adds	r0, #1
 80129e8:	d1bf      	bne.n	801296a <_puts_r+0x42>
 80129ea:	e7df      	b.n	80129ac <_puts_r+0x84>
 80129ec:	6823      	ldr	r3, [r4, #0]
 80129ee:	250a      	movs	r5, #10
 80129f0:	1c5a      	adds	r2, r3, #1
 80129f2:	6022      	str	r2, [r4, #0]
 80129f4:	701d      	strb	r5, [r3, #0]
 80129f6:	e7db      	b.n	80129b0 <_puts_r+0x88>
 80129f8:	080156fc 	.word	0x080156fc
 80129fc:	0801571c 	.word	0x0801571c
 8012a00:	080156dc 	.word	0x080156dc

08012a04 <puts>:
 8012a04:	4b02      	ldr	r3, [pc, #8]	; (8012a10 <puts+0xc>)
 8012a06:	4601      	mov	r1, r0
 8012a08:	6818      	ldr	r0, [r3, #0]
 8012a0a:	f7ff bf8d 	b.w	8012928 <_puts_r>
 8012a0e:	bf00      	nop
 8012a10:	20000594 	.word	0x20000594

08012a14 <cleanup_glue>:
 8012a14:	b538      	push	{r3, r4, r5, lr}
 8012a16:	460c      	mov	r4, r1
 8012a18:	6809      	ldr	r1, [r1, #0]
 8012a1a:	4605      	mov	r5, r0
 8012a1c:	b109      	cbz	r1, 8012a22 <cleanup_glue+0xe>
 8012a1e:	f7ff fff9 	bl	8012a14 <cleanup_glue>
 8012a22:	4621      	mov	r1, r4
 8012a24:	4628      	mov	r0, r5
 8012a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a2a:	f001 bd27 	b.w	801447c <_free_r>
	...

08012a30 <_reclaim_reent>:
 8012a30:	4b2c      	ldr	r3, [pc, #176]	; (8012ae4 <_reclaim_reent+0xb4>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	4283      	cmp	r3, r0
 8012a36:	b570      	push	{r4, r5, r6, lr}
 8012a38:	4604      	mov	r4, r0
 8012a3a:	d051      	beq.n	8012ae0 <_reclaim_reent+0xb0>
 8012a3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012a3e:	b143      	cbz	r3, 8012a52 <_reclaim_reent+0x22>
 8012a40:	68db      	ldr	r3, [r3, #12]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d14a      	bne.n	8012adc <_reclaim_reent+0xac>
 8012a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a48:	6819      	ldr	r1, [r3, #0]
 8012a4a:	b111      	cbz	r1, 8012a52 <_reclaim_reent+0x22>
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	f001 fd15 	bl	801447c <_free_r>
 8012a52:	6961      	ldr	r1, [r4, #20]
 8012a54:	b111      	cbz	r1, 8012a5c <_reclaim_reent+0x2c>
 8012a56:	4620      	mov	r0, r4
 8012a58:	f001 fd10 	bl	801447c <_free_r>
 8012a5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012a5e:	b111      	cbz	r1, 8012a66 <_reclaim_reent+0x36>
 8012a60:	4620      	mov	r0, r4
 8012a62:	f001 fd0b 	bl	801447c <_free_r>
 8012a66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012a68:	b111      	cbz	r1, 8012a70 <_reclaim_reent+0x40>
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	f001 fd06 	bl	801447c <_free_r>
 8012a70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012a72:	b111      	cbz	r1, 8012a7a <_reclaim_reent+0x4a>
 8012a74:	4620      	mov	r0, r4
 8012a76:	f001 fd01 	bl	801447c <_free_r>
 8012a7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012a7c:	b111      	cbz	r1, 8012a84 <_reclaim_reent+0x54>
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f001 fcfc 	bl	801447c <_free_r>
 8012a84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012a86:	b111      	cbz	r1, 8012a8e <_reclaim_reent+0x5e>
 8012a88:	4620      	mov	r0, r4
 8012a8a:	f001 fcf7 	bl	801447c <_free_r>
 8012a8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012a90:	b111      	cbz	r1, 8012a98 <_reclaim_reent+0x68>
 8012a92:	4620      	mov	r0, r4
 8012a94:	f001 fcf2 	bl	801447c <_free_r>
 8012a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a9a:	b111      	cbz	r1, 8012aa2 <_reclaim_reent+0x72>
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f001 fced 	bl	801447c <_free_r>
 8012aa2:	69a3      	ldr	r3, [r4, #24]
 8012aa4:	b1e3      	cbz	r3, 8012ae0 <_reclaim_reent+0xb0>
 8012aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	4798      	blx	r3
 8012aac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012aae:	b1b9      	cbz	r1, 8012ae0 <_reclaim_reent+0xb0>
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ab6:	f7ff bfad 	b.w	8012a14 <cleanup_glue>
 8012aba:	5949      	ldr	r1, [r1, r5]
 8012abc:	b941      	cbnz	r1, 8012ad0 <_reclaim_reent+0xa0>
 8012abe:	3504      	adds	r5, #4
 8012ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ac2:	2d80      	cmp	r5, #128	; 0x80
 8012ac4:	68d9      	ldr	r1, [r3, #12]
 8012ac6:	d1f8      	bne.n	8012aba <_reclaim_reent+0x8a>
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f001 fcd7 	bl	801447c <_free_r>
 8012ace:	e7ba      	b.n	8012a46 <_reclaim_reent+0x16>
 8012ad0:	680e      	ldr	r6, [r1, #0]
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f001 fcd2 	bl	801447c <_free_r>
 8012ad8:	4631      	mov	r1, r6
 8012ada:	e7ef      	b.n	8012abc <_reclaim_reent+0x8c>
 8012adc:	2500      	movs	r5, #0
 8012ade:	e7ef      	b.n	8012ac0 <_reclaim_reent+0x90>
 8012ae0:	bd70      	pop	{r4, r5, r6, pc}
 8012ae2:	bf00      	nop
 8012ae4:	20000594 	.word	0x20000594

08012ae8 <_sbrk_r>:
 8012ae8:	b538      	push	{r3, r4, r5, lr}
 8012aea:	4d06      	ldr	r5, [pc, #24]	; (8012b04 <_sbrk_r+0x1c>)
 8012aec:	2300      	movs	r3, #0
 8012aee:	4604      	mov	r4, r0
 8012af0:	4608      	mov	r0, r1
 8012af2:	602b      	str	r3, [r5, #0]
 8012af4:	f7ef fbe0 	bl	80022b8 <_sbrk>
 8012af8:	1c43      	adds	r3, r0, #1
 8012afa:	d102      	bne.n	8012b02 <_sbrk_r+0x1a>
 8012afc:	682b      	ldr	r3, [r5, #0]
 8012afe:	b103      	cbz	r3, 8012b02 <_sbrk_r+0x1a>
 8012b00:	6023      	str	r3, [r4, #0]
 8012b02:	bd38      	pop	{r3, r4, r5, pc}
 8012b04:	20011034 	.word	0x20011034

08012b08 <sniprintf>:
 8012b08:	b40c      	push	{r2, r3}
 8012b0a:	b530      	push	{r4, r5, lr}
 8012b0c:	4b17      	ldr	r3, [pc, #92]	; (8012b6c <sniprintf+0x64>)
 8012b0e:	1e0c      	subs	r4, r1, #0
 8012b10:	681d      	ldr	r5, [r3, #0]
 8012b12:	b09d      	sub	sp, #116	; 0x74
 8012b14:	da08      	bge.n	8012b28 <sniprintf+0x20>
 8012b16:	238b      	movs	r3, #139	; 0x8b
 8012b18:	602b      	str	r3, [r5, #0]
 8012b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b1e:	b01d      	add	sp, #116	; 0x74
 8012b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b24:	b002      	add	sp, #8
 8012b26:	4770      	bx	lr
 8012b28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012b2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012b30:	bf14      	ite	ne
 8012b32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012b36:	4623      	moveq	r3, r4
 8012b38:	9304      	str	r3, [sp, #16]
 8012b3a:	9307      	str	r3, [sp, #28]
 8012b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b40:	9002      	str	r0, [sp, #8]
 8012b42:	9006      	str	r0, [sp, #24]
 8012b44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012b48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012b4a:	ab21      	add	r3, sp, #132	; 0x84
 8012b4c:	a902      	add	r1, sp, #8
 8012b4e:	4628      	mov	r0, r5
 8012b50:	9301      	str	r3, [sp, #4]
 8012b52:	f001 fd3f 	bl	80145d4 <_svfiprintf_r>
 8012b56:	1c43      	adds	r3, r0, #1
 8012b58:	bfbc      	itt	lt
 8012b5a:	238b      	movlt	r3, #139	; 0x8b
 8012b5c:	602b      	strlt	r3, [r5, #0]
 8012b5e:	2c00      	cmp	r4, #0
 8012b60:	d0dd      	beq.n	8012b1e <sniprintf+0x16>
 8012b62:	9b02      	ldr	r3, [sp, #8]
 8012b64:	2200      	movs	r2, #0
 8012b66:	701a      	strb	r2, [r3, #0]
 8012b68:	e7d9      	b.n	8012b1e <sniprintf+0x16>
 8012b6a:	bf00      	nop
 8012b6c:	20000594 	.word	0x20000594

08012b70 <__sread>:
 8012b70:	b510      	push	{r4, lr}
 8012b72:	460c      	mov	r4, r1
 8012b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b78:	f001 ff86 	bl	8014a88 <_read_r>
 8012b7c:	2800      	cmp	r0, #0
 8012b7e:	bfab      	itete	ge
 8012b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b82:	89a3      	ldrhlt	r3, [r4, #12]
 8012b84:	181b      	addge	r3, r3, r0
 8012b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b8a:	bfac      	ite	ge
 8012b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b8e:	81a3      	strhlt	r3, [r4, #12]
 8012b90:	bd10      	pop	{r4, pc}

08012b92 <__swrite>:
 8012b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b96:	461f      	mov	r7, r3
 8012b98:	898b      	ldrh	r3, [r1, #12]
 8012b9a:	05db      	lsls	r3, r3, #23
 8012b9c:	4605      	mov	r5, r0
 8012b9e:	460c      	mov	r4, r1
 8012ba0:	4616      	mov	r6, r2
 8012ba2:	d505      	bpl.n	8012bb0 <__swrite+0x1e>
 8012ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ba8:	2302      	movs	r3, #2
 8012baa:	2200      	movs	r2, #0
 8012bac:	f001 f84e 	bl	8013c4c <_lseek_r>
 8012bb0:	89a3      	ldrh	r3, [r4, #12]
 8012bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012bba:	81a3      	strh	r3, [r4, #12]
 8012bbc:	4632      	mov	r2, r6
 8012bbe:	463b      	mov	r3, r7
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bc6:	f000 b871 	b.w	8012cac <_write_r>

08012bca <__sseek>:
 8012bca:	b510      	push	{r4, lr}
 8012bcc:	460c      	mov	r4, r1
 8012bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bd2:	f001 f83b 	bl	8013c4c <_lseek_r>
 8012bd6:	1c43      	adds	r3, r0, #1
 8012bd8:	89a3      	ldrh	r3, [r4, #12]
 8012bda:	bf15      	itete	ne
 8012bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8012bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012be6:	81a3      	strheq	r3, [r4, #12]
 8012be8:	bf18      	it	ne
 8012bea:	81a3      	strhne	r3, [r4, #12]
 8012bec:	bd10      	pop	{r4, pc}

08012bee <__sclose>:
 8012bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bf2:	f000 b8db 	b.w	8012dac <_close_r>

08012bf6 <strcpy>:
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012bfc:	f803 2b01 	strb.w	r2, [r3], #1
 8012c00:	2a00      	cmp	r2, #0
 8012c02:	d1f9      	bne.n	8012bf8 <strcpy+0x2>
 8012c04:	4770      	bx	lr
	...

08012c08 <__swbuf_r>:
 8012c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c0a:	460e      	mov	r6, r1
 8012c0c:	4614      	mov	r4, r2
 8012c0e:	4605      	mov	r5, r0
 8012c10:	b118      	cbz	r0, 8012c1a <__swbuf_r+0x12>
 8012c12:	6983      	ldr	r3, [r0, #24]
 8012c14:	b90b      	cbnz	r3, 8012c1a <__swbuf_r+0x12>
 8012c16:	f7ff f8cf 	bl	8011db8 <__sinit>
 8012c1a:	4b21      	ldr	r3, [pc, #132]	; (8012ca0 <__swbuf_r+0x98>)
 8012c1c:	429c      	cmp	r4, r3
 8012c1e:	d12b      	bne.n	8012c78 <__swbuf_r+0x70>
 8012c20:	686c      	ldr	r4, [r5, #4]
 8012c22:	69a3      	ldr	r3, [r4, #24]
 8012c24:	60a3      	str	r3, [r4, #8]
 8012c26:	89a3      	ldrh	r3, [r4, #12]
 8012c28:	071a      	lsls	r2, r3, #28
 8012c2a:	d52f      	bpl.n	8012c8c <__swbuf_r+0x84>
 8012c2c:	6923      	ldr	r3, [r4, #16]
 8012c2e:	b36b      	cbz	r3, 8012c8c <__swbuf_r+0x84>
 8012c30:	6923      	ldr	r3, [r4, #16]
 8012c32:	6820      	ldr	r0, [r4, #0]
 8012c34:	1ac0      	subs	r0, r0, r3
 8012c36:	6963      	ldr	r3, [r4, #20]
 8012c38:	b2f6      	uxtb	r6, r6
 8012c3a:	4283      	cmp	r3, r0
 8012c3c:	4637      	mov	r7, r6
 8012c3e:	dc04      	bgt.n	8012c4a <__swbuf_r+0x42>
 8012c40:	4621      	mov	r1, r4
 8012c42:	4628      	mov	r0, r5
 8012c44:	f000 ffc2 	bl	8013bcc <_fflush_r>
 8012c48:	bb30      	cbnz	r0, 8012c98 <__swbuf_r+0x90>
 8012c4a:	68a3      	ldr	r3, [r4, #8]
 8012c4c:	3b01      	subs	r3, #1
 8012c4e:	60a3      	str	r3, [r4, #8]
 8012c50:	6823      	ldr	r3, [r4, #0]
 8012c52:	1c5a      	adds	r2, r3, #1
 8012c54:	6022      	str	r2, [r4, #0]
 8012c56:	701e      	strb	r6, [r3, #0]
 8012c58:	6963      	ldr	r3, [r4, #20]
 8012c5a:	3001      	adds	r0, #1
 8012c5c:	4283      	cmp	r3, r0
 8012c5e:	d004      	beq.n	8012c6a <__swbuf_r+0x62>
 8012c60:	89a3      	ldrh	r3, [r4, #12]
 8012c62:	07db      	lsls	r3, r3, #31
 8012c64:	d506      	bpl.n	8012c74 <__swbuf_r+0x6c>
 8012c66:	2e0a      	cmp	r6, #10
 8012c68:	d104      	bne.n	8012c74 <__swbuf_r+0x6c>
 8012c6a:	4621      	mov	r1, r4
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	f000 ffad 	bl	8013bcc <_fflush_r>
 8012c72:	b988      	cbnz	r0, 8012c98 <__swbuf_r+0x90>
 8012c74:	4638      	mov	r0, r7
 8012c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c78:	4b0a      	ldr	r3, [pc, #40]	; (8012ca4 <__swbuf_r+0x9c>)
 8012c7a:	429c      	cmp	r4, r3
 8012c7c:	d101      	bne.n	8012c82 <__swbuf_r+0x7a>
 8012c7e:	68ac      	ldr	r4, [r5, #8]
 8012c80:	e7cf      	b.n	8012c22 <__swbuf_r+0x1a>
 8012c82:	4b09      	ldr	r3, [pc, #36]	; (8012ca8 <__swbuf_r+0xa0>)
 8012c84:	429c      	cmp	r4, r3
 8012c86:	bf08      	it	eq
 8012c88:	68ec      	ldreq	r4, [r5, #12]
 8012c8a:	e7ca      	b.n	8012c22 <__swbuf_r+0x1a>
 8012c8c:	4621      	mov	r1, r4
 8012c8e:	4628      	mov	r0, r5
 8012c90:	f000 f81e 	bl	8012cd0 <__swsetup_r>
 8012c94:	2800      	cmp	r0, #0
 8012c96:	d0cb      	beq.n	8012c30 <__swbuf_r+0x28>
 8012c98:	f04f 37ff 	mov.w	r7, #4294967295
 8012c9c:	e7ea      	b.n	8012c74 <__swbuf_r+0x6c>
 8012c9e:	bf00      	nop
 8012ca0:	080156fc 	.word	0x080156fc
 8012ca4:	0801571c 	.word	0x0801571c
 8012ca8:	080156dc 	.word	0x080156dc

08012cac <_write_r>:
 8012cac:	b538      	push	{r3, r4, r5, lr}
 8012cae:	4d07      	ldr	r5, [pc, #28]	; (8012ccc <_write_r+0x20>)
 8012cb0:	4604      	mov	r4, r0
 8012cb2:	4608      	mov	r0, r1
 8012cb4:	4611      	mov	r1, r2
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	602a      	str	r2, [r5, #0]
 8012cba:	461a      	mov	r2, r3
 8012cbc:	f7ee f90a 	bl	8000ed4 <_write>
 8012cc0:	1c43      	adds	r3, r0, #1
 8012cc2:	d102      	bne.n	8012cca <_write_r+0x1e>
 8012cc4:	682b      	ldr	r3, [r5, #0]
 8012cc6:	b103      	cbz	r3, 8012cca <_write_r+0x1e>
 8012cc8:	6023      	str	r3, [r4, #0]
 8012cca:	bd38      	pop	{r3, r4, r5, pc}
 8012ccc:	20011034 	.word	0x20011034

08012cd0 <__swsetup_r>:
 8012cd0:	4b32      	ldr	r3, [pc, #200]	; (8012d9c <__swsetup_r+0xcc>)
 8012cd2:	b570      	push	{r4, r5, r6, lr}
 8012cd4:	681d      	ldr	r5, [r3, #0]
 8012cd6:	4606      	mov	r6, r0
 8012cd8:	460c      	mov	r4, r1
 8012cda:	b125      	cbz	r5, 8012ce6 <__swsetup_r+0x16>
 8012cdc:	69ab      	ldr	r3, [r5, #24]
 8012cde:	b913      	cbnz	r3, 8012ce6 <__swsetup_r+0x16>
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	f7ff f869 	bl	8011db8 <__sinit>
 8012ce6:	4b2e      	ldr	r3, [pc, #184]	; (8012da0 <__swsetup_r+0xd0>)
 8012ce8:	429c      	cmp	r4, r3
 8012cea:	d10f      	bne.n	8012d0c <__swsetup_r+0x3c>
 8012cec:	686c      	ldr	r4, [r5, #4]
 8012cee:	89a3      	ldrh	r3, [r4, #12]
 8012cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012cf4:	0719      	lsls	r1, r3, #28
 8012cf6:	d42c      	bmi.n	8012d52 <__swsetup_r+0x82>
 8012cf8:	06dd      	lsls	r5, r3, #27
 8012cfa:	d411      	bmi.n	8012d20 <__swsetup_r+0x50>
 8012cfc:	2309      	movs	r3, #9
 8012cfe:	6033      	str	r3, [r6, #0]
 8012d00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d04:	81a3      	strh	r3, [r4, #12]
 8012d06:	f04f 30ff 	mov.w	r0, #4294967295
 8012d0a:	e03e      	b.n	8012d8a <__swsetup_r+0xba>
 8012d0c:	4b25      	ldr	r3, [pc, #148]	; (8012da4 <__swsetup_r+0xd4>)
 8012d0e:	429c      	cmp	r4, r3
 8012d10:	d101      	bne.n	8012d16 <__swsetup_r+0x46>
 8012d12:	68ac      	ldr	r4, [r5, #8]
 8012d14:	e7eb      	b.n	8012cee <__swsetup_r+0x1e>
 8012d16:	4b24      	ldr	r3, [pc, #144]	; (8012da8 <__swsetup_r+0xd8>)
 8012d18:	429c      	cmp	r4, r3
 8012d1a:	bf08      	it	eq
 8012d1c:	68ec      	ldreq	r4, [r5, #12]
 8012d1e:	e7e6      	b.n	8012cee <__swsetup_r+0x1e>
 8012d20:	0758      	lsls	r0, r3, #29
 8012d22:	d512      	bpl.n	8012d4a <__swsetup_r+0x7a>
 8012d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d26:	b141      	cbz	r1, 8012d3a <__swsetup_r+0x6a>
 8012d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d2c:	4299      	cmp	r1, r3
 8012d2e:	d002      	beq.n	8012d36 <__swsetup_r+0x66>
 8012d30:	4630      	mov	r0, r6
 8012d32:	f001 fba3 	bl	801447c <_free_r>
 8012d36:	2300      	movs	r3, #0
 8012d38:	6363      	str	r3, [r4, #52]	; 0x34
 8012d3a:	89a3      	ldrh	r3, [r4, #12]
 8012d3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012d40:	81a3      	strh	r3, [r4, #12]
 8012d42:	2300      	movs	r3, #0
 8012d44:	6063      	str	r3, [r4, #4]
 8012d46:	6923      	ldr	r3, [r4, #16]
 8012d48:	6023      	str	r3, [r4, #0]
 8012d4a:	89a3      	ldrh	r3, [r4, #12]
 8012d4c:	f043 0308 	orr.w	r3, r3, #8
 8012d50:	81a3      	strh	r3, [r4, #12]
 8012d52:	6923      	ldr	r3, [r4, #16]
 8012d54:	b94b      	cbnz	r3, 8012d6a <__swsetup_r+0x9a>
 8012d56:	89a3      	ldrh	r3, [r4, #12]
 8012d58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d60:	d003      	beq.n	8012d6a <__swsetup_r+0x9a>
 8012d62:	4621      	mov	r1, r4
 8012d64:	4630      	mov	r0, r6
 8012d66:	f000 ffa7 	bl	8013cb8 <__smakebuf_r>
 8012d6a:	89a0      	ldrh	r0, [r4, #12]
 8012d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d70:	f010 0301 	ands.w	r3, r0, #1
 8012d74:	d00a      	beq.n	8012d8c <__swsetup_r+0xbc>
 8012d76:	2300      	movs	r3, #0
 8012d78:	60a3      	str	r3, [r4, #8]
 8012d7a:	6963      	ldr	r3, [r4, #20]
 8012d7c:	425b      	negs	r3, r3
 8012d7e:	61a3      	str	r3, [r4, #24]
 8012d80:	6923      	ldr	r3, [r4, #16]
 8012d82:	b943      	cbnz	r3, 8012d96 <__swsetup_r+0xc6>
 8012d84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012d88:	d1ba      	bne.n	8012d00 <__swsetup_r+0x30>
 8012d8a:	bd70      	pop	{r4, r5, r6, pc}
 8012d8c:	0781      	lsls	r1, r0, #30
 8012d8e:	bf58      	it	pl
 8012d90:	6963      	ldrpl	r3, [r4, #20]
 8012d92:	60a3      	str	r3, [r4, #8]
 8012d94:	e7f4      	b.n	8012d80 <__swsetup_r+0xb0>
 8012d96:	2000      	movs	r0, #0
 8012d98:	e7f7      	b.n	8012d8a <__swsetup_r+0xba>
 8012d9a:	bf00      	nop
 8012d9c:	20000594 	.word	0x20000594
 8012da0:	080156fc 	.word	0x080156fc
 8012da4:	0801571c 	.word	0x0801571c
 8012da8:	080156dc 	.word	0x080156dc

08012dac <_close_r>:
 8012dac:	b538      	push	{r3, r4, r5, lr}
 8012dae:	4d06      	ldr	r5, [pc, #24]	; (8012dc8 <_close_r+0x1c>)
 8012db0:	2300      	movs	r3, #0
 8012db2:	4604      	mov	r4, r0
 8012db4:	4608      	mov	r0, r1
 8012db6:	602b      	str	r3, [r5, #0]
 8012db8:	f7ef fa49 	bl	800224e <_close>
 8012dbc:	1c43      	adds	r3, r0, #1
 8012dbe:	d102      	bne.n	8012dc6 <_close_r+0x1a>
 8012dc0:	682b      	ldr	r3, [r5, #0]
 8012dc2:	b103      	cbz	r3, 8012dc6 <_close_r+0x1a>
 8012dc4:	6023      	str	r3, [r4, #0]
 8012dc6:	bd38      	pop	{r3, r4, r5, pc}
 8012dc8:	20011034 	.word	0x20011034

08012dcc <quorem>:
 8012dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd0:	6903      	ldr	r3, [r0, #16]
 8012dd2:	690c      	ldr	r4, [r1, #16]
 8012dd4:	42a3      	cmp	r3, r4
 8012dd6:	4607      	mov	r7, r0
 8012dd8:	f2c0 8081 	blt.w	8012ede <quorem+0x112>
 8012ddc:	3c01      	subs	r4, #1
 8012dde:	f101 0814 	add.w	r8, r1, #20
 8012de2:	f100 0514 	add.w	r5, r0, #20
 8012de6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012dea:	9301      	str	r3, [sp, #4]
 8012dec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012df0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012df4:	3301      	adds	r3, #1
 8012df6:	429a      	cmp	r2, r3
 8012df8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012dfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012e00:	fbb2 f6f3 	udiv	r6, r2, r3
 8012e04:	d331      	bcc.n	8012e6a <quorem+0x9e>
 8012e06:	f04f 0e00 	mov.w	lr, #0
 8012e0a:	4640      	mov	r0, r8
 8012e0c:	46ac      	mov	ip, r5
 8012e0e:	46f2      	mov	sl, lr
 8012e10:	f850 2b04 	ldr.w	r2, [r0], #4
 8012e14:	b293      	uxth	r3, r2
 8012e16:	fb06 e303 	mla	r3, r6, r3, lr
 8012e1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	ebaa 0303 	sub.w	r3, sl, r3
 8012e24:	0c12      	lsrs	r2, r2, #16
 8012e26:	f8dc a000 	ldr.w	sl, [ip]
 8012e2a:	fb06 e202 	mla	r2, r6, r2, lr
 8012e2e:	fa13 f38a 	uxtah	r3, r3, sl
 8012e32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012e36:	fa1f fa82 	uxth.w	sl, r2
 8012e3a:	f8dc 2000 	ldr.w	r2, [ip]
 8012e3e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012e42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e4c:	4581      	cmp	r9, r0
 8012e4e:	f84c 3b04 	str.w	r3, [ip], #4
 8012e52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012e56:	d2db      	bcs.n	8012e10 <quorem+0x44>
 8012e58:	f855 300b 	ldr.w	r3, [r5, fp]
 8012e5c:	b92b      	cbnz	r3, 8012e6a <quorem+0x9e>
 8012e5e:	9b01      	ldr	r3, [sp, #4]
 8012e60:	3b04      	subs	r3, #4
 8012e62:	429d      	cmp	r5, r3
 8012e64:	461a      	mov	r2, r3
 8012e66:	d32e      	bcc.n	8012ec6 <quorem+0xfa>
 8012e68:	613c      	str	r4, [r7, #16]
 8012e6a:	4638      	mov	r0, r7
 8012e6c:	f001 f9f6 	bl	801425c <__mcmp>
 8012e70:	2800      	cmp	r0, #0
 8012e72:	db24      	blt.n	8012ebe <quorem+0xf2>
 8012e74:	3601      	adds	r6, #1
 8012e76:	4628      	mov	r0, r5
 8012e78:	f04f 0c00 	mov.w	ip, #0
 8012e7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012e80:	f8d0 e000 	ldr.w	lr, [r0]
 8012e84:	b293      	uxth	r3, r2
 8012e86:	ebac 0303 	sub.w	r3, ip, r3
 8012e8a:	0c12      	lsrs	r2, r2, #16
 8012e8c:	fa13 f38e 	uxtah	r3, r3, lr
 8012e90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e9e:	45c1      	cmp	r9, r8
 8012ea0:	f840 3b04 	str.w	r3, [r0], #4
 8012ea4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012ea8:	d2e8      	bcs.n	8012e7c <quorem+0xb0>
 8012eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012eb2:	b922      	cbnz	r2, 8012ebe <quorem+0xf2>
 8012eb4:	3b04      	subs	r3, #4
 8012eb6:	429d      	cmp	r5, r3
 8012eb8:	461a      	mov	r2, r3
 8012eba:	d30a      	bcc.n	8012ed2 <quorem+0x106>
 8012ebc:	613c      	str	r4, [r7, #16]
 8012ebe:	4630      	mov	r0, r6
 8012ec0:	b003      	add	sp, #12
 8012ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec6:	6812      	ldr	r2, [r2, #0]
 8012ec8:	3b04      	subs	r3, #4
 8012eca:	2a00      	cmp	r2, #0
 8012ecc:	d1cc      	bne.n	8012e68 <quorem+0x9c>
 8012ece:	3c01      	subs	r4, #1
 8012ed0:	e7c7      	b.n	8012e62 <quorem+0x96>
 8012ed2:	6812      	ldr	r2, [r2, #0]
 8012ed4:	3b04      	subs	r3, #4
 8012ed6:	2a00      	cmp	r2, #0
 8012ed8:	d1f0      	bne.n	8012ebc <quorem+0xf0>
 8012eda:	3c01      	subs	r4, #1
 8012edc:	e7eb      	b.n	8012eb6 <quorem+0xea>
 8012ede:	2000      	movs	r0, #0
 8012ee0:	e7ee      	b.n	8012ec0 <quorem+0xf4>
 8012ee2:	0000      	movs	r0, r0
 8012ee4:	0000      	movs	r0, r0
	...

08012ee8 <_dtoa_r>:
 8012ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eec:	ed2d 8b02 	vpush	{d8}
 8012ef0:	ec57 6b10 	vmov	r6, r7, d0
 8012ef4:	b095      	sub	sp, #84	; 0x54
 8012ef6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012ef8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012efc:	9105      	str	r1, [sp, #20]
 8012efe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012f02:	4604      	mov	r4, r0
 8012f04:	9209      	str	r2, [sp, #36]	; 0x24
 8012f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f08:	b975      	cbnz	r5, 8012f28 <_dtoa_r+0x40>
 8012f0a:	2010      	movs	r0, #16
 8012f0c:	f000 ff14 	bl	8013d38 <malloc>
 8012f10:	4602      	mov	r2, r0
 8012f12:	6260      	str	r0, [r4, #36]	; 0x24
 8012f14:	b920      	cbnz	r0, 8012f20 <_dtoa_r+0x38>
 8012f16:	4bb2      	ldr	r3, [pc, #712]	; (80131e0 <_dtoa_r+0x2f8>)
 8012f18:	21ea      	movs	r1, #234	; 0xea
 8012f1a:	48b2      	ldr	r0, [pc, #712]	; (80131e4 <_dtoa_r+0x2fc>)
 8012f1c:	f001 fdc6 	bl	8014aac <__assert_func>
 8012f20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012f24:	6005      	str	r5, [r0, #0]
 8012f26:	60c5      	str	r5, [r0, #12]
 8012f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f2a:	6819      	ldr	r1, [r3, #0]
 8012f2c:	b151      	cbz	r1, 8012f44 <_dtoa_r+0x5c>
 8012f2e:	685a      	ldr	r2, [r3, #4]
 8012f30:	604a      	str	r2, [r1, #4]
 8012f32:	2301      	movs	r3, #1
 8012f34:	4093      	lsls	r3, r2
 8012f36:	608b      	str	r3, [r1, #8]
 8012f38:	4620      	mov	r0, r4
 8012f3a:	f000 ff51 	bl	8013de0 <_Bfree>
 8012f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f40:	2200      	movs	r2, #0
 8012f42:	601a      	str	r2, [r3, #0]
 8012f44:	1e3b      	subs	r3, r7, #0
 8012f46:	bfb9      	ittee	lt
 8012f48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012f4c:	9303      	strlt	r3, [sp, #12]
 8012f4e:	2300      	movge	r3, #0
 8012f50:	f8c8 3000 	strge.w	r3, [r8]
 8012f54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012f58:	4ba3      	ldr	r3, [pc, #652]	; (80131e8 <_dtoa_r+0x300>)
 8012f5a:	bfbc      	itt	lt
 8012f5c:	2201      	movlt	r2, #1
 8012f5e:	f8c8 2000 	strlt.w	r2, [r8]
 8012f62:	ea33 0309 	bics.w	r3, r3, r9
 8012f66:	d11b      	bne.n	8012fa0 <_dtoa_r+0xb8>
 8012f68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012f6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8012f6e:	6013      	str	r3, [r2, #0]
 8012f70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012f74:	4333      	orrs	r3, r6
 8012f76:	f000 857a 	beq.w	8013a6e <_dtoa_r+0xb86>
 8012f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f7c:	b963      	cbnz	r3, 8012f98 <_dtoa_r+0xb0>
 8012f7e:	4b9b      	ldr	r3, [pc, #620]	; (80131ec <_dtoa_r+0x304>)
 8012f80:	e024      	b.n	8012fcc <_dtoa_r+0xe4>
 8012f82:	4b9b      	ldr	r3, [pc, #620]	; (80131f0 <_dtoa_r+0x308>)
 8012f84:	9300      	str	r3, [sp, #0]
 8012f86:	3308      	adds	r3, #8
 8012f88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012f8a:	6013      	str	r3, [r2, #0]
 8012f8c:	9800      	ldr	r0, [sp, #0]
 8012f8e:	b015      	add	sp, #84	; 0x54
 8012f90:	ecbd 8b02 	vpop	{d8}
 8012f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f98:	4b94      	ldr	r3, [pc, #592]	; (80131ec <_dtoa_r+0x304>)
 8012f9a:	9300      	str	r3, [sp, #0]
 8012f9c:	3303      	adds	r3, #3
 8012f9e:	e7f3      	b.n	8012f88 <_dtoa_r+0xa0>
 8012fa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	ec51 0b17 	vmov	r0, r1, d7
 8012faa:	2300      	movs	r3, #0
 8012fac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012fb0:	f7ed fd8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8012fb4:	4680      	mov	r8, r0
 8012fb6:	b158      	cbz	r0, 8012fd0 <_dtoa_r+0xe8>
 8012fb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012fba:	2301      	movs	r3, #1
 8012fbc:	6013      	str	r3, [r2, #0]
 8012fbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	f000 8551 	beq.w	8013a68 <_dtoa_r+0xb80>
 8012fc6:	488b      	ldr	r0, [pc, #556]	; (80131f4 <_dtoa_r+0x30c>)
 8012fc8:	6018      	str	r0, [r3, #0]
 8012fca:	1e43      	subs	r3, r0, #1
 8012fcc:	9300      	str	r3, [sp, #0]
 8012fce:	e7dd      	b.n	8012f8c <_dtoa_r+0xa4>
 8012fd0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012fd4:	aa12      	add	r2, sp, #72	; 0x48
 8012fd6:	a913      	add	r1, sp, #76	; 0x4c
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f001 f9e3 	bl	80143a4 <__d2b>
 8012fde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012fe2:	4683      	mov	fp, r0
 8012fe4:	2d00      	cmp	r5, #0
 8012fe6:	d07c      	beq.n	80130e2 <_dtoa_r+0x1fa>
 8012fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ff2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012ff6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012ffa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012ffe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013002:	4b7d      	ldr	r3, [pc, #500]	; (80131f8 <_dtoa_r+0x310>)
 8013004:	2200      	movs	r2, #0
 8013006:	4630      	mov	r0, r6
 8013008:	4639      	mov	r1, r7
 801300a:	f7ed f93d 	bl	8000288 <__aeabi_dsub>
 801300e:	a36e      	add	r3, pc, #440	; (adr r3, 80131c8 <_dtoa_r+0x2e0>)
 8013010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013014:	f7ed faf0 	bl	80005f8 <__aeabi_dmul>
 8013018:	a36d      	add	r3, pc, #436	; (adr r3, 80131d0 <_dtoa_r+0x2e8>)
 801301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301e:	f7ed f935 	bl	800028c <__adddf3>
 8013022:	4606      	mov	r6, r0
 8013024:	4628      	mov	r0, r5
 8013026:	460f      	mov	r7, r1
 8013028:	f7ed fa7c 	bl	8000524 <__aeabi_i2d>
 801302c:	a36a      	add	r3, pc, #424	; (adr r3, 80131d8 <_dtoa_r+0x2f0>)
 801302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013032:	f7ed fae1 	bl	80005f8 <__aeabi_dmul>
 8013036:	4602      	mov	r2, r0
 8013038:	460b      	mov	r3, r1
 801303a:	4630      	mov	r0, r6
 801303c:	4639      	mov	r1, r7
 801303e:	f7ed f925 	bl	800028c <__adddf3>
 8013042:	4606      	mov	r6, r0
 8013044:	460f      	mov	r7, r1
 8013046:	f7ed fd87 	bl	8000b58 <__aeabi_d2iz>
 801304a:	2200      	movs	r2, #0
 801304c:	4682      	mov	sl, r0
 801304e:	2300      	movs	r3, #0
 8013050:	4630      	mov	r0, r6
 8013052:	4639      	mov	r1, r7
 8013054:	f7ed fd42 	bl	8000adc <__aeabi_dcmplt>
 8013058:	b148      	cbz	r0, 801306e <_dtoa_r+0x186>
 801305a:	4650      	mov	r0, sl
 801305c:	f7ed fa62 	bl	8000524 <__aeabi_i2d>
 8013060:	4632      	mov	r2, r6
 8013062:	463b      	mov	r3, r7
 8013064:	f7ed fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 8013068:	b908      	cbnz	r0, 801306e <_dtoa_r+0x186>
 801306a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801306e:	f1ba 0f16 	cmp.w	sl, #22
 8013072:	d854      	bhi.n	801311e <_dtoa_r+0x236>
 8013074:	4b61      	ldr	r3, [pc, #388]	; (80131fc <_dtoa_r+0x314>)
 8013076:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013082:	f7ed fd2b 	bl	8000adc <__aeabi_dcmplt>
 8013086:	2800      	cmp	r0, #0
 8013088:	d04b      	beq.n	8013122 <_dtoa_r+0x23a>
 801308a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801308e:	2300      	movs	r3, #0
 8013090:	930e      	str	r3, [sp, #56]	; 0x38
 8013092:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013094:	1b5d      	subs	r5, r3, r5
 8013096:	1e6b      	subs	r3, r5, #1
 8013098:	9304      	str	r3, [sp, #16]
 801309a:	bf43      	ittte	mi
 801309c:	2300      	movmi	r3, #0
 801309e:	f1c5 0801 	rsbmi	r8, r5, #1
 80130a2:	9304      	strmi	r3, [sp, #16]
 80130a4:	f04f 0800 	movpl.w	r8, #0
 80130a8:	f1ba 0f00 	cmp.w	sl, #0
 80130ac:	db3b      	blt.n	8013126 <_dtoa_r+0x23e>
 80130ae:	9b04      	ldr	r3, [sp, #16]
 80130b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80130b4:	4453      	add	r3, sl
 80130b6:	9304      	str	r3, [sp, #16]
 80130b8:	2300      	movs	r3, #0
 80130ba:	9306      	str	r3, [sp, #24]
 80130bc:	9b05      	ldr	r3, [sp, #20]
 80130be:	2b09      	cmp	r3, #9
 80130c0:	d869      	bhi.n	8013196 <_dtoa_r+0x2ae>
 80130c2:	2b05      	cmp	r3, #5
 80130c4:	bfc4      	itt	gt
 80130c6:	3b04      	subgt	r3, #4
 80130c8:	9305      	strgt	r3, [sp, #20]
 80130ca:	9b05      	ldr	r3, [sp, #20]
 80130cc:	f1a3 0302 	sub.w	r3, r3, #2
 80130d0:	bfcc      	ite	gt
 80130d2:	2500      	movgt	r5, #0
 80130d4:	2501      	movle	r5, #1
 80130d6:	2b03      	cmp	r3, #3
 80130d8:	d869      	bhi.n	80131ae <_dtoa_r+0x2c6>
 80130da:	e8df f003 	tbb	[pc, r3]
 80130de:	4e2c      	.short	0x4e2c
 80130e0:	5a4c      	.short	0x5a4c
 80130e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80130e6:	441d      	add	r5, r3
 80130e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80130ec:	2b20      	cmp	r3, #32
 80130ee:	bfc1      	itttt	gt
 80130f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80130f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80130f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80130fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013100:	bfda      	itte	le
 8013102:	f1c3 0320 	rsble	r3, r3, #32
 8013106:	fa06 f003 	lslle.w	r0, r6, r3
 801310a:	4318      	orrgt	r0, r3
 801310c:	f7ed f9fa 	bl	8000504 <__aeabi_ui2d>
 8013110:	2301      	movs	r3, #1
 8013112:	4606      	mov	r6, r0
 8013114:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013118:	3d01      	subs	r5, #1
 801311a:	9310      	str	r3, [sp, #64]	; 0x40
 801311c:	e771      	b.n	8013002 <_dtoa_r+0x11a>
 801311e:	2301      	movs	r3, #1
 8013120:	e7b6      	b.n	8013090 <_dtoa_r+0x1a8>
 8013122:	900e      	str	r0, [sp, #56]	; 0x38
 8013124:	e7b5      	b.n	8013092 <_dtoa_r+0x1aa>
 8013126:	f1ca 0300 	rsb	r3, sl, #0
 801312a:	9306      	str	r3, [sp, #24]
 801312c:	2300      	movs	r3, #0
 801312e:	eba8 080a 	sub.w	r8, r8, sl
 8013132:	930d      	str	r3, [sp, #52]	; 0x34
 8013134:	e7c2      	b.n	80130bc <_dtoa_r+0x1d4>
 8013136:	2300      	movs	r3, #0
 8013138:	9308      	str	r3, [sp, #32]
 801313a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801313c:	2b00      	cmp	r3, #0
 801313e:	dc39      	bgt.n	80131b4 <_dtoa_r+0x2cc>
 8013140:	f04f 0901 	mov.w	r9, #1
 8013144:	f8cd 9004 	str.w	r9, [sp, #4]
 8013148:	464b      	mov	r3, r9
 801314a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801314e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013150:	2200      	movs	r2, #0
 8013152:	6042      	str	r2, [r0, #4]
 8013154:	2204      	movs	r2, #4
 8013156:	f102 0614 	add.w	r6, r2, #20
 801315a:	429e      	cmp	r6, r3
 801315c:	6841      	ldr	r1, [r0, #4]
 801315e:	d92f      	bls.n	80131c0 <_dtoa_r+0x2d8>
 8013160:	4620      	mov	r0, r4
 8013162:	f000 fdfd 	bl	8013d60 <_Balloc>
 8013166:	9000      	str	r0, [sp, #0]
 8013168:	2800      	cmp	r0, #0
 801316a:	d14b      	bne.n	8013204 <_dtoa_r+0x31c>
 801316c:	4b24      	ldr	r3, [pc, #144]	; (8013200 <_dtoa_r+0x318>)
 801316e:	4602      	mov	r2, r0
 8013170:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013174:	e6d1      	b.n	8012f1a <_dtoa_r+0x32>
 8013176:	2301      	movs	r3, #1
 8013178:	e7de      	b.n	8013138 <_dtoa_r+0x250>
 801317a:	2300      	movs	r3, #0
 801317c:	9308      	str	r3, [sp, #32]
 801317e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013180:	eb0a 0903 	add.w	r9, sl, r3
 8013184:	f109 0301 	add.w	r3, r9, #1
 8013188:	2b01      	cmp	r3, #1
 801318a:	9301      	str	r3, [sp, #4]
 801318c:	bfb8      	it	lt
 801318e:	2301      	movlt	r3, #1
 8013190:	e7dd      	b.n	801314e <_dtoa_r+0x266>
 8013192:	2301      	movs	r3, #1
 8013194:	e7f2      	b.n	801317c <_dtoa_r+0x294>
 8013196:	2501      	movs	r5, #1
 8013198:	2300      	movs	r3, #0
 801319a:	9305      	str	r3, [sp, #20]
 801319c:	9508      	str	r5, [sp, #32]
 801319e:	f04f 39ff 	mov.w	r9, #4294967295
 80131a2:	2200      	movs	r2, #0
 80131a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80131a8:	2312      	movs	r3, #18
 80131aa:	9209      	str	r2, [sp, #36]	; 0x24
 80131ac:	e7cf      	b.n	801314e <_dtoa_r+0x266>
 80131ae:	2301      	movs	r3, #1
 80131b0:	9308      	str	r3, [sp, #32]
 80131b2:	e7f4      	b.n	801319e <_dtoa_r+0x2b6>
 80131b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80131b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80131bc:	464b      	mov	r3, r9
 80131be:	e7c6      	b.n	801314e <_dtoa_r+0x266>
 80131c0:	3101      	adds	r1, #1
 80131c2:	6041      	str	r1, [r0, #4]
 80131c4:	0052      	lsls	r2, r2, #1
 80131c6:	e7c6      	b.n	8013156 <_dtoa_r+0x26e>
 80131c8:	636f4361 	.word	0x636f4361
 80131cc:	3fd287a7 	.word	0x3fd287a7
 80131d0:	8b60c8b3 	.word	0x8b60c8b3
 80131d4:	3fc68a28 	.word	0x3fc68a28
 80131d8:	509f79fb 	.word	0x509f79fb
 80131dc:	3fd34413 	.word	0x3fd34413
 80131e0:	08015781 	.word	0x08015781
 80131e4:	08015798 	.word	0x08015798
 80131e8:	7ff00000 	.word	0x7ff00000
 80131ec:	0801577d 	.word	0x0801577d
 80131f0:	08015774 	.word	0x08015774
 80131f4:	08015751 	.word	0x08015751
 80131f8:	3ff80000 	.word	0x3ff80000
 80131fc:	08015890 	.word	0x08015890
 8013200:	080157f7 	.word	0x080157f7
 8013204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013206:	9a00      	ldr	r2, [sp, #0]
 8013208:	601a      	str	r2, [r3, #0]
 801320a:	9b01      	ldr	r3, [sp, #4]
 801320c:	2b0e      	cmp	r3, #14
 801320e:	f200 80ad 	bhi.w	801336c <_dtoa_r+0x484>
 8013212:	2d00      	cmp	r5, #0
 8013214:	f000 80aa 	beq.w	801336c <_dtoa_r+0x484>
 8013218:	f1ba 0f00 	cmp.w	sl, #0
 801321c:	dd36      	ble.n	801328c <_dtoa_r+0x3a4>
 801321e:	4ac3      	ldr	r2, [pc, #780]	; (801352c <_dtoa_r+0x644>)
 8013220:	f00a 030f 	and.w	r3, sl, #15
 8013224:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013228:	ed93 7b00 	vldr	d7, [r3]
 801322c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013230:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013234:	eeb0 8a47 	vmov.f32	s16, s14
 8013238:	eef0 8a67 	vmov.f32	s17, s15
 801323c:	d016      	beq.n	801326c <_dtoa_r+0x384>
 801323e:	4bbc      	ldr	r3, [pc, #752]	; (8013530 <_dtoa_r+0x648>)
 8013240:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013244:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013248:	f7ed fb00 	bl	800084c <__aeabi_ddiv>
 801324c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013250:	f007 070f 	and.w	r7, r7, #15
 8013254:	2503      	movs	r5, #3
 8013256:	4eb6      	ldr	r6, [pc, #728]	; (8013530 <_dtoa_r+0x648>)
 8013258:	b957      	cbnz	r7, 8013270 <_dtoa_r+0x388>
 801325a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801325e:	ec53 2b18 	vmov	r2, r3, d8
 8013262:	f7ed faf3 	bl	800084c <__aeabi_ddiv>
 8013266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801326a:	e029      	b.n	80132c0 <_dtoa_r+0x3d8>
 801326c:	2502      	movs	r5, #2
 801326e:	e7f2      	b.n	8013256 <_dtoa_r+0x36e>
 8013270:	07f9      	lsls	r1, r7, #31
 8013272:	d508      	bpl.n	8013286 <_dtoa_r+0x39e>
 8013274:	ec51 0b18 	vmov	r0, r1, d8
 8013278:	e9d6 2300 	ldrd	r2, r3, [r6]
 801327c:	f7ed f9bc 	bl	80005f8 <__aeabi_dmul>
 8013280:	ec41 0b18 	vmov	d8, r0, r1
 8013284:	3501      	adds	r5, #1
 8013286:	107f      	asrs	r7, r7, #1
 8013288:	3608      	adds	r6, #8
 801328a:	e7e5      	b.n	8013258 <_dtoa_r+0x370>
 801328c:	f000 80a6 	beq.w	80133dc <_dtoa_r+0x4f4>
 8013290:	f1ca 0600 	rsb	r6, sl, #0
 8013294:	4ba5      	ldr	r3, [pc, #660]	; (801352c <_dtoa_r+0x644>)
 8013296:	4fa6      	ldr	r7, [pc, #664]	; (8013530 <_dtoa_r+0x648>)
 8013298:	f006 020f 	and.w	r2, r6, #15
 801329c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80132a8:	f7ed f9a6 	bl	80005f8 <__aeabi_dmul>
 80132ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132b0:	1136      	asrs	r6, r6, #4
 80132b2:	2300      	movs	r3, #0
 80132b4:	2502      	movs	r5, #2
 80132b6:	2e00      	cmp	r6, #0
 80132b8:	f040 8085 	bne.w	80133c6 <_dtoa_r+0x4de>
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d1d2      	bne.n	8013266 <_dtoa_r+0x37e>
 80132c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	f000 808c 	beq.w	80133e0 <_dtoa_r+0x4f8>
 80132c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80132cc:	4b99      	ldr	r3, [pc, #612]	; (8013534 <_dtoa_r+0x64c>)
 80132ce:	2200      	movs	r2, #0
 80132d0:	4630      	mov	r0, r6
 80132d2:	4639      	mov	r1, r7
 80132d4:	f7ed fc02 	bl	8000adc <__aeabi_dcmplt>
 80132d8:	2800      	cmp	r0, #0
 80132da:	f000 8081 	beq.w	80133e0 <_dtoa_r+0x4f8>
 80132de:	9b01      	ldr	r3, [sp, #4]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d07d      	beq.n	80133e0 <_dtoa_r+0x4f8>
 80132e4:	f1b9 0f00 	cmp.w	r9, #0
 80132e8:	dd3c      	ble.n	8013364 <_dtoa_r+0x47c>
 80132ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80132ee:	9307      	str	r3, [sp, #28]
 80132f0:	2200      	movs	r2, #0
 80132f2:	4b91      	ldr	r3, [pc, #580]	; (8013538 <_dtoa_r+0x650>)
 80132f4:	4630      	mov	r0, r6
 80132f6:	4639      	mov	r1, r7
 80132f8:	f7ed f97e 	bl	80005f8 <__aeabi_dmul>
 80132fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013300:	3501      	adds	r5, #1
 8013302:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013306:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801330a:	4628      	mov	r0, r5
 801330c:	f7ed f90a 	bl	8000524 <__aeabi_i2d>
 8013310:	4632      	mov	r2, r6
 8013312:	463b      	mov	r3, r7
 8013314:	f7ed f970 	bl	80005f8 <__aeabi_dmul>
 8013318:	4b88      	ldr	r3, [pc, #544]	; (801353c <_dtoa_r+0x654>)
 801331a:	2200      	movs	r2, #0
 801331c:	f7ec ffb6 	bl	800028c <__adddf3>
 8013320:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013328:	9303      	str	r3, [sp, #12]
 801332a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801332c:	2b00      	cmp	r3, #0
 801332e:	d15c      	bne.n	80133ea <_dtoa_r+0x502>
 8013330:	4b83      	ldr	r3, [pc, #524]	; (8013540 <_dtoa_r+0x658>)
 8013332:	2200      	movs	r2, #0
 8013334:	4630      	mov	r0, r6
 8013336:	4639      	mov	r1, r7
 8013338:	f7ec ffa6 	bl	8000288 <__aeabi_dsub>
 801333c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013340:	4606      	mov	r6, r0
 8013342:	460f      	mov	r7, r1
 8013344:	f7ed fbe8 	bl	8000b18 <__aeabi_dcmpgt>
 8013348:	2800      	cmp	r0, #0
 801334a:	f040 8296 	bne.w	801387a <_dtoa_r+0x992>
 801334e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013352:	4630      	mov	r0, r6
 8013354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013358:	4639      	mov	r1, r7
 801335a:	f7ed fbbf 	bl	8000adc <__aeabi_dcmplt>
 801335e:	2800      	cmp	r0, #0
 8013360:	f040 8288 	bne.w	8013874 <_dtoa_r+0x98c>
 8013364:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013368:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801336c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801336e:	2b00      	cmp	r3, #0
 8013370:	f2c0 8158 	blt.w	8013624 <_dtoa_r+0x73c>
 8013374:	f1ba 0f0e 	cmp.w	sl, #14
 8013378:	f300 8154 	bgt.w	8013624 <_dtoa_r+0x73c>
 801337c:	4b6b      	ldr	r3, [pc, #428]	; (801352c <_dtoa_r+0x644>)
 801337e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013382:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013388:	2b00      	cmp	r3, #0
 801338a:	f280 80e3 	bge.w	8013554 <_dtoa_r+0x66c>
 801338e:	9b01      	ldr	r3, [sp, #4]
 8013390:	2b00      	cmp	r3, #0
 8013392:	f300 80df 	bgt.w	8013554 <_dtoa_r+0x66c>
 8013396:	f040 826d 	bne.w	8013874 <_dtoa_r+0x98c>
 801339a:	4b69      	ldr	r3, [pc, #420]	; (8013540 <_dtoa_r+0x658>)
 801339c:	2200      	movs	r2, #0
 801339e:	4640      	mov	r0, r8
 80133a0:	4649      	mov	r1, r9
 80133a2:	f7ed f929 	bl	80005f8 <__aeabi_dmul>
 80133a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80133aa:	f7ed fbab 	bl	8000b04 <__aeabi_dcmpge>
 80133ae:	9e01      	ldr	r6, [sp, #4]
 80133b0:	4637      	mov	r7, r6
 80133b2:	2800      	cmp	r0, #0
 80133b4:	f040 8243 	bne.w	801383e <_dtoa_r+0x956>
 80133b8:	9d00      	ldr	r5, [sp, #0]
 80133ba:	2331      	movs	r3, #49	; 0x31
 80133bc:	f805 3b01 	strb.w	r3, [r5], #1
 80133c0:	f10a 0a01 	add.w	sl, sl, #1
 80133c4:	e23f      	b.n	8013846 <_dtoa_r+0x95e>
 80133c6:	07f2      	lsls	r2, r6, #31
 80133c8:	d505      	bpl.n	80133d6 <_dtoa_r+0x4ee>
 80133ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133ce:	f7ed f913 	bl	80005f8 <__aeabi_dmul>
 80133d2:	3501      	adds	r5, #1
 80133d4:	2301      	movs	r3, #1
 80133d6:	1076      	asrs	r6, r6, #1
 80133d8:	3708      	adds	r7, #8
 80133da:	e76c      	b.n	80132b6 <_dtoa_r+0x3ce>
 80133dc:	2502      	movs	r5, #2
 80133de:	e76f      	b.n	80132c0 <_dtoa_r+0x3d8>
 80133e0:	9b01      	ldr	r3, [sp, #4]
 80133e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80133e6:	930c      	str	r3, [sp, #48]	; 0x30
 80133e8:	e78d      	b.n	8013306 <_dtoa_r+0x41e>
 80133ea:	9900      	ldr	r1, [sp, #0]
 80133ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80133ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133f0:	4b4e      	ldr	r3, [pc, #312]	; (801352c <_dtoa_r+0x644>)
 80133f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80133f6:	4401      	add	r1, r0
 80133f8:	9102      	str	r1, [sp, #8]
 80133fa:	9908      	ldr	r1, [sp, #32]
 80133fc:	eeb0 8a47 	vmov.f32	s16, s14
 8013400:	eef0 8a67 	vmov.f32	s17, s15
 8013404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013408:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801340c:	2900      	cmp	r1, #0
 801340e:	d045      	beq.n	801349c <_dtoa_r+0x5b4>
 8013410:	494c      	ldr	r1, [pc, #304]	; (8013544 <_dtoa_r+0x65c>)
 8013412:	2000      	movs	r0, #0
 8013414:	f7ed fa1a 	bl	800084c <__aeabi_ddiv>
 8013418:	ec53 2b18 	vmov	r2, r3, d8
 801341c:	f7ec ff34 	bl	8000288 <__aeabi_dsub>
 8013420:	9d00      	ldr	r5, [sp, #0]
 8013422:	ec41 0b18 	vmov	d8, r0, r1
 8013426:	4639      	mov	r1, r7
 8013428:	4630      	mov	r0, r6
 801342a:	f7ed fb95 	bl	8000b58 <__aeabi_d2iz>
 801342e:	900c      	str	r0, [sp, #48]	; 0x30
 8013430:	f7ed f878 	bl	8000524 <__aeabi_i2d>
 8013434:	4602      	mov	r2, r0
 8013436:	460b      	mov	r3, r1
 8013438:	4630      	mov	r0, r6
 801343a:	4639      	mov	r1, r7
 801343c:	f7ec ff24 	bl	8000288 <__aeabi_dsub>
 8013440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013442:	3330      	adds	r3, #48	; 0x30
 8013444:	f805 3b01 	strb.w	r3, [r5], #1
 8013448:	ec53 2b18 	vmov	r2, r3, d8
 801344c:	4606      	mov	r6, r0
 801344e:	460f      	mov	r7, r1
 8013450:	f7ed fb44 	bl	8000adc <__aeabi_dcmplt>
 8013454:	2800      	cmp	r0, #0
 8013456:	d165      	bne.n	8013524 <_dtoa_r+0x63c>
 8013458:	4632      	mov	r2, r6
 801345a:	463b      	mov	r3, r7
 801345c:	4935      	ldr	r1, [pc, #212]	; (8013534 <_dtoa_r+0x64c>)
 801345e:	2000      	movs	r0, #0
 8013460:	f7ec ff12 	bl	8000288 <__aeabi_dsub>
 8013464:	ec53 2b18 	vmov	r2, r3, d8
 8013468:	f7ed fb38 	bl	8000adc <__aeabi_dcmplt>
 801346c:	2800      	cmp	r0, #0
 801346e:	f040 80b9 	bne.w	80135e4 <_dtoa_r+0x6fc>
 8013472:	9b02      	ldr	r3, [sp, #8]
 8013474:	429d      	cmp	r5, r3
 8013476:	f43f af75 	beq.w	8013364 <_dtoa_r+0x47c>
 801347a:	4b2f      	ldr	r3, [pc, #188]	; (8013538 <_dtoa_r+0x650>)
 801347c:	ec51 0b18 	vmov	r0, r1, d8
 8013480:	2200      	movs	r2, #0
 8013482:	f7ed f8b9 	bl	80005f8 <__aeabi_dmul>
 8013486:	4b2c      	ldr	r3, [pc, #176]	; (8013538 <_dtoa_r+0x650>)
 8013488:	ec41 0b18 	vmov	d8, r0, r1
 801348c:	2200      	movs	r2, #0
 801348e:	4630      	mov	r0, r6
 8013490:	4639      	mov	r1, r7
 8013492:	f7ed f8b1 	bl	80005f8 <__aeabi_dmul>
 8013496:	4606      	mov	r6, r0
 8013498:	460f      	mov	r7, r1
 801349a:	e7c4      	b.n	8013426 <_dtoa_r+0x53e>
 801349c:	ec51 0b17 	vmov	r0, r1, d7
 80134a0:	f7ed f8aa 	bl	80005f8 <__aeabi_dmul>
 80134a4:	9b02      	ldr	r3, [sp, #8]
 80134a6:	9d00      	ldr	r5, [sp, #0]
 80134a8:	930c      	str	r3, [sp, #48]	; 0x30
 80134aa:	ec41 0b18 	vmov	d8, r0, r1
 80134ae:	4639      	mov	r1, r7
 80134b0:	4630      	mov	r0, r6
 80134b2:	f7ed fb51 	bl	8000b58 <__aeabi_d2iz>
 80134b6:	9011      	str	r0, [sp, #68]	; 0x44
 80134b8:	f7ed f834 	bl	8000524 <__aeabi_i2d>
 80134bc:	4602      	mov	r2, r0
 80134be:	460b      	mov	r3, r1
 80134c0:	4630      	mov	r0, r6
 80134c2:	4639      	mov	r1, r7
 80134c4:	f7ec fee0 	bl	8000288 <__aeabi_dsub>
 80134c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80134ca:	3330      	adds	r3, #48	; 0x30
 80134cc:	f805 3b01 	strb.w	r3, [r5], #1
 80134d0:	9b02      	ldr	r3, [sp, #8]
 80134d2:	429d      	cmp	r5, r3
 80134d4:	4606      	mov	r6, r0
 80134d6:	460f      	mov	r7, r1
 80134d8:	f04f 0200 	mov.w	r2, #0
 80134dc:	d134      	bne.n	8013548 <_dtoa_r+0x660>
 80134de:	4b19      	ldr	r3, [pc, #100]	; (8013544 <_dtoa_r+0x65c>)
 80134e0:	ec51 0b18 	vmov	r0, r1, d8
 80134e4:	f7ec fed2 	bl	800028c <__adddf3>
 80134e8:	4602      	mov	r2, r0
 80134ea:	460b      	mov	r3, r1
 80134ec:	4630      	mov	r0, r6
 80134ee:	4639      	mov	r1, r7
 80134f0:	f7ed fb12 	bl	8000b18 <__aeabi_dcmpgt>
 80134f4:	2800      	cmp	r0, #0
 80134f6:	d175      	bne.n	80135e4 <_dtoa_r+0x6fc>
 80134f8:	ec53 2b18 	vmov	r2, r3, d8
 80134fc:	4911      	ldr	r1, [pc, #68]	; (8013544 <_dtoa_r+0x65c>)
 80134fe:	2000      	movs	r0, #0
 8013500:	f7ec fec2 	bl	8000288 <__aeabi_dsub>
 8013504:	4602      	mov	r2, r0
 8013506:	460b      	mov	r3, r1
 8013508:	4630      	mov	r0, r6
 801350a:	4639      	mov	r1, r7
 801350c:	f7ed fae6 	bl	8000adc <__aeabi_dcmplt>
 8013510:	2800      	cmp	r0, #0
 8013512:	f43f af27 	beq.w	8013364 <_dtoa_r+0x47c>
 8013516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013518:	1e6b      	subs	r3, r5, #1
 801351a:	930c      	str	r3, [sp, #48]	; 0x30
 801351c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013520:	2b30      	cmp	r3, #48	; 0x30
 8013522:	d0f8      	beq.n	8013516 <_dtoa_r+0x62e>
 8013524:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013528:	e04a      	b.n	80135c0 <_dtoa_r+0x6d8>
 801352a:	bf00      	nop
 801352c:	08015890 	.word	0x08015890
 8013530:	08015868 	.word	0x08015868
 8013534:	3ff00000 	.word	0x3ff00000
 8013538:	40240000 	.word	0x40240000
 801353c:	401c0000 	.word	0x401c0000
 8013540:	40140000 	.word	0x40140000
 8013544:	3fe00000 	.word	0x3fe00000
 8013548:	4baf      	ldr	r3, [pc, #700]	; (8013808 <_dtoa_r+0x920>)
 801354a:	f7ed f855 	bl	80005f8 <__aeabi_dmul>
 801354e:	4606      	mov	r6, r0
 8013550:	460f      	mov	r7, r1
 8013552:	e7ac      	b.n	80134ae <_dtoa_r+0x5c6>
 8013554:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013558:	9d00      	ldr	r5, [sp, #0]
 801355a:	4642      	mov	r2, r8
 801355c:	464b      	mov	r3, r9
 801355e:	4630      	mov	r0, r6
 8013560:	4639      	mov	r1, r7
 8013562:	f7ed f973 	bl	800084c <__aeabi_ddiv>
 8013566:	f7ed faf7 	bl	8000b58 <__aeabi_d2iz>
 801356a:	9002      	str	r0, [sp, #8]
 801356c:	f7ec ffda 	bl	8000524 <__aeabi_i2d>
 8013570:	4642      	mov	r2, r8
 8013572:	464b      	mov	r3, r9
 8013574:	f7ed f840 	bl	80005f8 <__aeabi_dmul>
 8013578:	4602      	mov	r2, r0
 801357a:	460b      	mov	r3, r1
 801357c:	4630      	mov	r0, r6
 801357e:	4639      	mov	r1, r7
 8013580:	f7ec fe82 	bl	8000288 <__aeabi_dsub>
 8013584:	9e02      	ldr	r6, [sp, #8]
 8013586:	9f01      	ldr	r7, [sp, #4]
 8013588:	3630      	adds	r6, #48	; 0x30
 801358a:	f805 6b01 	strb.w	r6, [r5], #1
 801358e:	9e00      	ldr	r6, [sp, #0]
 8013590:	1bae      	subs	r6, r5, r6
 8013592:	42b7      	cmp	r7, r6
 8013594:	4602      	mov	r2, r0
 8013596:	460b      	mov	r3, r1
 8013598:	d137      	bne.n	801360a <_dtoa_r+0x722>
 801359a:	f7ec fe77 	bl	800028c <__adddf3>
 801359e:	4642      	mov	r2, r8
 80135a0:	464b      	mov	r3, r9
 80135a2:	4606      	mov	r6, r0
 80135a4:	460f      	mov	r7, r1
 80135a6:	f7ed fab7 	bl	8000b18 <__aeabi_dcmpgt>
 80135aa:	b9c8      	cbnz	r0, 80135e0 <_dtoa_r+0x6f8>
 80135ac:	4642      	mov	r2, r8
 80135ae:	464b      	mov	r3, r9
 80135b0:	4630      	mov	r0, r6
 80135b2:	4639      	mov	r1, r7
 80135b4:	f7ed fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 80135b8:	b110      	cbz	r0, 80135c0 <_dtoa_r+0x6d8>
 80135ba:	9b02      	ldr	r3, [sp, #8]
 80135bc:	07d9      	lsls	r1, r3, #31
 80135be:	d40f      	bmi.n	80135e0 <_dtoa_r+0x6f8>
 80135c0:	4620      	mov	r0, r4
 80135c2:	4659      	mov	r1, fp
 80135c4:	f000 fc0c 	bl	8013de0 <_Bfree>
 80135c8:	2300      	movs	r3, #0
 80135ca:	702b      	strb	r3, [r5, #0]
 80135cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135ce:	f10a 0001 	add.w	r0, sl, #1
 80135d2:	6018      	str	r0, [r3, #0]
 80135d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	f43f acd8 	beq.w	8012f8c <_dtoa_r+0xa4>
 80135dc:	601d      	str	r5, [r3, #0]
 80135de:	e4d5      	b.n	8012f8c <_dtoa_r+0xa4>
 80135e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80135e4:	462b      	mov	r3, r5
 80135e6:	461d      	mov	r5, r3
 80135e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80135ec:	2a39      	cmp	r2, #57	; 0x39
 80135ee:	d108      	bne.n	8013602 <_dtoa_r+0x71a>
 80135f0:	9a00      	ldr	r2, [sp, #0]
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d1f7      	bne.n	80135e6 <_dtoa_r+0x6fe>
 80135f6:	9a07      	ldr	r2, [sp, #28]
 80135f8:	9900      	ldr	r1, [sp, #0]
 80135fa:	3201      	adds	r2, #1
 80135fc:	9207      	str	r2, [sp, #28]
 80135fe:	2230      	movs	r2, #48	; 0x30
 8013600:	700a      	strb	r2, [r1, #0]
 8013602:	781a      	ldrb	r2, [r3, #0]
 8013604:	3201      	adds	r2, #1
 8013606:	701a      	strb	r2, [r3, #0]
 8013608:	e78c      	b.n	8013524 <_dtoa_r+0x63c>
 801360a:	4b7f      	ldr	r3, [pc, #508]	; (8013808 <_dtoa_r+0x920>)
 801360c:	2200      	movs	r2, #0
 801360e:	f7ec fff3 	bl	80005f8 <__aeabi_dmul>
 8013612:	2200      	movs	r2, #0
 8013614:	2300      	movs	r3, #0
 8013616:	4606      	mov	r6, r0
 8013618:	460f      	mov	r7, r1
 801361a:	f7ed fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 801361e:	2800      	cmp	r0, #0
 8013620:	d09b      	beq.n	801355a <_dtoa_r+0x672>
 8013622:	e7cd      	b.n	80135c0 <_dtoa_r+0x6d8>
 8013624:	9a08      	ldr	r2, [sp, #32]
 8013626:	2a00      	cmp	r2, #0
 8013628:	f000 80c4 	beq.w	80137b4 <_dtoa_r+0x8cc>
 801362c:	9a05      	ldr	r2, [sp, #20]
 801362e:	2a01      	cmp	r2, #1
 8013630:	f300 80a8 	bgt.w	8013784 <_dtoa_r+0x89c>
 8013634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013636:	2a00      	cmp	r2, #0
 8013638:	f000 80a0 	beq.w	801377c <_dtoa_r+0x894>
 801363c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013640:	9e06      	ldr	r6, [sp, #24]
 8013642:	4645      	mov	r5, r8
 8013644:	9a04      	ldr	r2, [sp, #16]
 8013646:	2101      	movs	r1, #1
 8013648:	441a      	add	r2, r3
 801364a:	4620      	mov	r0, r4
 801364c:	4498      	add	r8, r3
 801364e:	9204      	str	r2, [sp, #16]
 8013650:	f000 fc82 	bl	8013f58 <__i2b>
 8013654:	4607      	mov	r7, r0
 8013656:	2d00      	cmp	r5, #0
 8013658:	dd0b      	ble.n	8013672 <_dtoa_r+0x78a>
 801365a:	9b04      	ldr	r3, [sp, #16]
 801365c:	2b00      	cmp	r3, #0
 801365e:	dd08      	ble.n	8013672 <_dtoa_r+0x78a>
 8013660:	42ab      	cmp	r3, r5
 8013662:	9a04      	ldr	r2, [sp, #16]
 8013664:	bfa8      	it	ge
 8013666:	462b      	movge	r3, r5
 8013668:	eba8 0803 	sub.w	r8, r8, r3
 801366c:	1aed      	subs	r5, r5, r3
 801366e:	1ad3      	subs	r3, r2, r3
 8013670:	9304      	str	r3, [sp, #16]
 8013672:	9b06      	ldr	r3, [sp, #24]
 8013674:	b1fb      	cbz	r3, 80136b6 <_dtoa_r+0x7ce>
 8013676:	9b08      	ldr	r3, [sp, #32]
 8013678:	2b00      	cmp	r3, #0
 801367a:	f000 809f 	beq.w	80137bc <_dtoa_r+0x8d4>
 801367e:	2e00      	cmp	r6, #0
 8013680:	dd11      	ble.n	80136a6 <_dtoa_r+0x7be>
 8013682:	4639      	mov	r1, r7
 8013684:	4632      	mov	r2, r6
 8013686:	4620      	mov	r0, r4
 8013688:	f000 fd22 	bl	80140d0 <__pow5mult>
 801368c:	465a      	mov	r2, fp
 801368e:	4601      	mov	r1, r0
 8013690:	4607      	mov	r7, r0
 8013692:	4620      	mov	r0, r4
 8013694:	f000 fc76 	bl	8013f84 <__multiply>
 8013698:	4659      	mov	r1, fp
 801369a:	9007      	str	r0, [sp, #28]
 801369c:	4620      	mov	r0, r4
 801369e:	f000 fb9f 	bl	8013de0 <_Bfree>
 80136a2:	9b07      	ldr	r3, [sp, #28]
 80136a4:	469b      	mov	fp, r3
 80136a6:	9b06      	ldr	r3, [sp, #24]
 80136a8:	1b9a      	subs	r2, r3, r6
 80136aa:	d004      	beq.n	80136b6 <_dtoa_r+0x7ce>
 80136ac:	4659      	mov	r1, fp
 80136ae:	4620      	mov	r0, r4
 80136b0:	f000 fd0e 	bl	80140d0 <__pow5mult>
 80136b4:	4683      	mov	fp, r0
 80136b6:	2101      	movs	r1, #1
 80136b8:	4620      	mov	r0, r4
 80136ba:	f000 fc4d 	bl	8013f58 <__i2b>
 80136be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	4606      	mov	r6, r0
 80136c4:	dd7c      	ble.n	80137c0 <_dtoa_r+0x8d8>
 80136c6:	461a      	mov	r2, r3
 80136c8:	4601      	mov	r1, r0
 80136ca:	4620      	mov	r0, r4
 80136cc:	f000 fd00 	bl	80140d0 <__pow5mult>
 80136d0:	9b05      	ldr	r3, [sp, #20]
 80136d2:	2b01      	cmp	r3, #1
 80136d4:	4606      	mov	r6, r0
 80136d6:	dd76      	ble.n	80137c6 <_dtoa_r+0x8de>
 80136d8:	2300      	movs	r3, #0
 80136da:	9306      	str	r3, [sp, #24]
 80136dc:	6933      	ldr	r3, [r6, #16]
 80136de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80136e2:	6918      	ldr	r0, [r3, #16]
 80136e4:	f000 fbe8 	bl	8013eb8 <__hi0bits>
 80136e8:	f1c0 0020 	rsb	r0, r0, #32
 80136ec:	9b04      	ldr	r3, [sp, #16]
 80136ee:	4418      	add	r0, r3
 80136f0:	f010 001f 	ands.w	r0, r0, #31
 80136f4:	f000 8086 	beq.w	8013804 <_dtoa_r+0x91c>
 80136f8:	f1c0 0320 	rsb	r3, r0, #32
 80136fc:	2b04      	cmp	r3, #4
 80136fe:	dd7f      	ble.n	8013800 <_dtoa_r+0x918>
 8013700:	f1c0 001c 	rsb	r0, r0, #28
 8013704:	9b04      	ldr	r3, [sp, #16]
 8013706:	4403      	add	r3, r0
 8013708:	4480      	add	r8, r0
 801370a:	4405      	add	r5, r0
 801370c:	9304      	str	r3, [sp, #16]
 801370e:	f1b8 0f00 	cmp.w	r8, #0
 8013712:	dd05      	ble.n	8013720 <_dtoa_r+0x838>
 8013714:	4659      	mov	r1, fp
 8013716:	4642      	mov	r2, r8
 8013718:	4620      	mov	r0, r4
 801371a:	f000 fd33 	bl	8014184 <__lshift>
 801371e:	4683      	mov	fp, r0
 8013720:	9b04      	ldr	r3, [sp, #16]
 8013722:	2b00      	cmp	r3, #0
 8013724:	dd05      	ble.n	8013732 <_dtoa_r+0x84a>
 8013726:	4631      	mov	r1, r6
 8013728:	461a      	mov	r2, r3
 801372a:	4620      	mov	r0, r4
 801372c:	f000 fd2a 	bl	8014184 <__lshift>
 8013730:	4606      	mov	r6, r0
 8013732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013734:	2b00      	cmp	r3, #0
 8013736:	d069      	beq.n	801380c <_dtoa_r+0x924>
 8013738:	4631      	mov	r1, r6
 801373a:	4658      	mov	r0, fp
 801373c:	f000 fd8e 	bl	801425c <__mcmp>
 8013740:	2800      	cmp	r0, #0
 8013742:	da63      	bge.n	801380c <_dtoa_r+0x924>
 8013744:	2300      	movs	r3, #0
 8013746:	4659      	mov	r1, fp
 8013748:	220a      	movs	r2, #10
 801374a:	4620      	mov	r0, r4
 801374c:	f000 fb6a 	bl	8013e24 <__multadd>
 8013750:	9b08      	ldr	r3, [sp, #32]
 8013752:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013756:	4683      	mov	fp, r0
 8013758:	2b00      	cmp	r3, #0
 801375a:	f000 818f 	beq.w	8013a7c <_dtoa_r+0xb94>
 801375e:	4639      	mov	r1, r7
 8013760:	2300      	movs	r3, #0
 8013762:	220a      	movs	r2, #10
 8013764:	4620      	mov	r0, r4
 8013766:	f000 fb5d 	bl	8013e24 <__multadd>
 801376a:	f1b9 0f00 	cmp.w	r9, #0
 801376e:	4607      	mov	r7, r0
 8013770:	f300 808e 	bgt.w	8013890 <_dtoa_r+0x9a8>
 8013774:	9b05      	ldr	r3, [sp, #20]
 8013776:	2b02      	cmp	r3, #2
 8013778:	dc50      	bgt.n	801381c <_dtoa_r+0x934>
 801377a:	e089      	b.n	8013890 <_dtoa_r+0x9a8>
 801377c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801377e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013782:	e75d      	b.n	8013640 <_dtoa_r+0x758>
 8013784:	9b01      	ldr	r3, [sp, #4]
 8013786:	1e5e      	subs	r6, r3, #1
 8013788:	9b06      	ldr	r3, [sp, #24]
 801378a:	42b3      	cmp	r3, r6
 801378c:	bfbf      	itttt	lt
 801378e:	9b06      	ldrlt	r3, [sp, #24]
 8013790:	9606      	strlt	r6, [sp, #24]
 8013792:	1af2      	sublt	r2, r6, r3
 8013794:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8013796:	bfb6      	itet	lt
 8013798:	189b      	addlt	r3, r3, r2
 801379a:	1b9e      	subge	r6, r3, r6
 801379c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801379e:	9b01      	ldr	r3, [sp, #4]
 80137a0:	bfb8      	it	lt
 80137a2:	2600      	movlt	r6, #0
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	bfb5      	itete	lt
 80137a8:	eba8 0503 	sublt.w	r5, r8, r3
 80137ac:	9b01      	ldrge	r3, [sp, #4]
 80137ae:	2300      	movlt	r3, #0
 80137b0:	4645      	movge	r5, r8
 80137b2:	e747      	b.n	8013644 <_dtoa_r+0x75c>
 80137b4:	9e06      	ldr	r6, [sp, #24]
 80137b6:	9f08      	ldr	r7, [sp, #32]
 80137b8:	4645      	mov	r5, r8
 80137ba:	e74c      	b.n	8013656 <_dtoa_r+0x76e>
 80137bc:	9a06      	ldr	r2, [sp, #24]
 80137be:	e775      	b.n	80136ac <_dtoa_r+0x7c4>
 80137c0:	9b05      	ldr	r3, [sp, #20]
 80137c2:	2b01      	cmp	r3, #1
 80137c4:	dc18      	bgt.n	80137f8 <_dtoa_r+0x910>
 80137c6:	9b02      	ldr	r3, [sp, #8]
 80137c8:	b9b3      	cbnz	r3, 80137f8 <_dtoa_r+0x910>
 80137ca:	9b03      	ldr	r3, [sp, #12]
 80137cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80137d0:	b9a3      	cbnz	r3, 80137fc <_dtoa_r+0x914>
 80137d2:	9b03      	ldr	r3, [sp, #12]
 80137d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137d8:	0d1b      	lsrs	r3, r3, #20
 80137da:	051b      	lsls	r3, r3, #20
 80137dc:	b12b      	cbz	r3, 80137ea <_dtoa_r+0x902>
 80137de:	9b04      	ldr	r3, [sp, #16]
 80137e0:	3301      	adds	r3, #1
 80137e2:	9304      	str	r3, [sp, #16]
 80137e4:	f108 0801 	add.w	r8, r8, #1
 80137e8:	2301      	movs	r3, #1
 80137ea:	9306      	str	r3, [sp, #24]
 80137ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	f47f af74 	bne.w	80136dc <_dtoa_r+0x7f4>
 80137f4:	2001      	movs	r0, #1
 80137f6:	e779      	b.n	80136ec <_dtoa_r+0x804>
 80137f8:	2300      	movs	r3, #0
 80137fa:	e7f6      	b.n	80137ea <_dtoa_r+0x902>
 80137fc:	9b02      	ldr	r3, [sp, #8]
 80137fe:	e7f4      	b.n	80137ea <_dtoa_r+0x902>
 8013800:	d085      	beq.n	801370e <_dtoa_r+0x826>
 8013802:	4618      	mov	r0, r3
 8013804:	301c      	adds	r0, #28
 8013806:	e77d      	b.n	8013704 <_dtoa_r+0x81c>
 8013808:	40240000 	.word	0x40240000
 801380c:	9b01      	ldr	r3, [sp, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	dc38      	bgt.n	8013884 <_dtoa_r+0x99c>
 8013812:	9b05      	ldr	r3, [sp, #20]
 8013814:	2b02      	cmp	r3, #2
 8013816:	dd35      	ble.n	8013884 <_dtoa_r+0x99c>
 8013818:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801381c:	f1b9 0f00 	cmp.w	r9, #0
 8013820:	d10d      	bne.n	801383e <_dtoa_r+0x956>
 8013822:	4631      	mov	r1, r6
 8013824:	464b      	mov	r3, r9
 8013826:	2205      	movs	r2, #5
 8013828:	4620      	mov	r0, r4
 801382a:	f000 fafb 	bl	8013e24 <__multadd>
 801382e:	4601      	mov	r1, r0
 8013830:	4606      	mov	r6, r0
 8013832:	4658      	mov	r0, fp
 8013834:	f000 fd12 	bl	801425c <__mcmp>
 8013838:	2800      	cmp	r0, #0
 801383a:	f73f adbd 	bgt.w	80133b8 <_dtoa_r+0x4d0>
 801383e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013840:	9d00      	ldr	r5, [sp, #0]
 8013842:	ea6f 0a03 	mvn.w	sl, r3
 8013846:	f04f 0800 	mov.w	r8, #0
 801384a:	4631      	mov	r1, r6
 801384c:	4620      	mov	r0, r4
 801384e:	f000 fac7 	bl	8013de0 <_Bfree>
 8013852:	2f00      	cmp	r7, #0
 8013854:	f43f aeb4 	beq.w	80135c0 <_dtoa_r+0x6d8>
 8013858:	f1b8 0f00 	cmp.w	r8, #0
 801385c:	d005      	beq.n	801386a <_dtoa_r+0x982>
 801385e:	45b8      	cmp	r8, r7
 8013860:	d003      	beq.n	801386a <_dtoa_r+0x982>
 8013862:	4641      	mov	r1, r8
 8013864:	4620      	mov	r0, r4
 8013866:	f000 fabb 	bl	8013de0 <_Bfree>
 801386a:	4639      	mov	r1, r7
 801386c:	4620      	mov	r0, r4
 801386e:	f000 fab7 	bl	8013de0 <_Bfree>
 8013872:	e6a5      	b.n	80135c0 <_dtoa_r+0x6d8>
 8013874:	2600      	movs	r6, #0
 8013876:	4637      	mov	r7, r6
 8013878:	e7e1      	b.n	801383e <_dtoa_r+0x956>
 801387a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801387c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013880:	4637      	mov	r7, r6
 8013882:	e599      	b.n	80133b8 <_dtoa_r+0x4d0>
 8013884:	9b08      	ldr	r3, [sp, #32]
 8013886:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801388a:	2b00      	cmp	r3, #0
 801388c:	f000 80fd 	beq.w	8013a8a <_dtoa_r+0xba2>
 8013890:	2d00      	cmp	r5, #0
 8013892:	dd05      	ble.n	80138a0 <_dtoa_r+0x9b8>
 8013894:	4639      	mov	r1, r7
 8013896:	462a      	mov	r2, r5
 8013898:	4620      	mov	r0, r4
 801389a:	f000 fc73 	bl	8014184 <__lshift>
 801389e:	4607      	mov	r7, r0
 80138a0:	9b06      	ldr	r3, [sp, #24]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d05c      	beq.n	8013960 <_dtoa_r+0xa78>
 80138a6:	6879      	ldr	r1, [r7, #4]
 80138a8:	4620      	mov	r0, r4
 80138aa:	f000 fa59 	bl	8013d60 <_Balloc>
 80138ae:	4605      	mov	r5, r0
 80138b0:	b928      	cbnz	r0, 80138be <_dtoa_r+0x9d6>
 80138b2:	4b80      	ldr	r3, [pc, #512]	; (8013ab4 <_dtoa_r+0xbcc>)
 80138b4:	4602      	mov	r2, r0
 80138b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80138ba:	f7ff bb2e 	b.w	8012f1a <_dtoa_r+0x32>
 80138be:	693a      	ldr	r2, [r7, #16]
 80138c0:	3202      	adds	r2, #2
 80138c2:	0092      	lsls	r2, r2, #2
 80138c4:	f107 010c 	add.w	r1, r7, #12
 80138c8:	300c      	adds	r0, #12
 80138ca:	f7fe fb3a 	bl	8011f42 <memcpy>
 80138ce:	2201      	movs	r2, #1
 80138d0:	4629      	mov	r1, r5
 80138d2:	4620      	mov	r0, r4
 80138d4:	f000 fc56 	bl	8014184 <__lshift>
 80138d8:	9b00      	ldr	r3, [sp, #0]
 80138da:	3301      	adds	r3, #1
 80138dc:	9301      	str	r3, [sp, #4]
 80138de:	9b00      	ldr	r3, [sp, #0]
 80138e0:	444b      	add	r3, r9
 80138e2:	9307      	str	r3, [sp, #28]
 80138e4:	9b02      	ldr	r3, [sp, #8]
 80138e6:	f003 0301 	and.w	r3, r3, #1
 80138ea:	46b8      	mov	r8, r7
 80138ec:	9306      	str	r3, [sp, #24]
 80138ee:	4607      	mov	r7, r0
 80138f0:	9b01      	ldr	r3, [sp, #4]
 80138f2:	4631      	mov	r1, r6
 80138f4:	3b01      	subs	r3, #1
 80138f6:	4658      	mov	r0, fp
 80138f8:	9302      	str	r3, [sp, #8]
 80138fa:	f7ff fa67 	bl	8012dcc <quorem>
 80138fe:	4603      	mov	r3, r0
 8013900:	3330      	adds	r3, #48	; 0x30
 8013902:	9004      	str	r0, [sp, #16]
 8013904:	4641      	mov	r1, r8
 8013906:	4658      	mov	r0, fp
 8013908:	9308      	str	r3, [sp, #32]
 801390a:	f000 fca7 	bl	801425c <__mcmp>
 801390e:	463a      	mov	r2, r7
 8013910:	4681      	mov	r9, r0
 8013912:	4631      	mov	r1, r6
 8013914:	4620      	mov	r0, r4
 8013916:	f000 fcbd 	bl	8014294 <__mdiff>
 801391a:	68c2      	ldr	r2, [r0, #12]
 801391c:	9b08      	ldr	r3, [sp, #32]
 801391e:	4605      	mov	r5, r0
 8013920:	bb02      	cbnz	r2, 8013964 <_dtoa_r+0xa7c>
 8013922:	4601      	mov	r1, r0
 8013924:	4658      	mov	r0, fp
 8013926:	f000 fc99 	bl	801425c <__mcmp>
 801392a:	9b08      	ldr	r3, [sp, #32]
 801392c:	4602      	mov	r2, r0
 801392e:	4629      	mov	r1, r5
 8013930:	4620      	mov	r0, r4
 8013932:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8013936:	f000 fa53 	bl	8013de0 <_Bfree>
 801393a:	9b05      	ldr	r3, [sp, #20]
 801393c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801393e:	9d01      	ldr	r5, [sp, #4]
 8013940:	ea43 0102 	orr.w	r1, r3, r2
 8013944:	9b06      	ldr	r3, [sp, #24]
 8013946:	430b      	orrs	r3, r1
 8013948:	9b08      	ldr	r3, [sp, #32]
 801394a:	d10d      	bne.n	8013968 <_dtoa_r+0xa80>
 801394c:	2b39      	cmp	r3, #57	; 0x39
 801394e:	d029      	beq.n	80139a4 <_dtoa_r+0xabc>
 8013950:	f1b9 0f00 	cmp.w	r9, #0
 8013954:	dd01      	ble.n	801395a <_dtoa_r+0xa72>
 8013956:	9b04      	ldr	r3, [sp, #16]
 8013958:	3331      	adds	r3, #49	; 0x31
 801395a:	9a02      	ldr	r2, [sp, #8]
 801395c:	7013      	strb	r3, [r2, #0]
 801395e:	e774      	b.n	801384a <_dtoa_r+0x962>
 8013960:	4638      	mov	r0, r7
 8013962:	e7b9      	b.n	80138d8 <_dtoa_r+0x9f0>
 8013964:	2201      	movs	r2, #1
 8013966:	e7e2      	b.n	801392e <_dtoa_r+0xa46>
 8013968:	f1b9 0f00 	cmp.w	r9, #0
 801396c:	db06      	blt.n	801397c <_dtoa_r+0xa94>
 801396e:	9905      	ldr	r1, [sp, #20]
 8013970:	ea41 0909 	orr.w	r9, r1, r9
 8013974:	9906      	ldr	r1, [sp, #24]
 8013976:	ea59 0101 	orrs.w	r1, r9, r1
 801397a:	d120      	bne.n	80139be <_dtoa_r+0xad6>
 801397c:	2a00      	cmp	r2, #0
 801397e:	ddec      	ble.n	801395a <_dtoa_r+0xa72>
 8013980:	4659      	mov	r1, fp
 8013982:	2201      	movs	r2, #1
 8013984:	4620      	mov	r0, r4
 8013986:	9301      	str	r3, [sp, #4]
 8013988:	f000 fbfc 	bl	8014184 <__lshift>
 801398c:	4631      	mov	r1, r6
 801398e:	4683      	mov	fp, r0
 8013990:	f000 fc64 	bl	801425c <__mcmp>
 8013994:	2800      	cmp	r0, #0
 8013996:	9b01      	ldr	r3, [sp, #4]
 8013998:	dc02      	bgt.n	80139a0 <_dtoa_r+0xab8>
 801399a:	d1de      	bne.n	801395a <_dtoa_r+0xa72>
 801399c:	07da      	lsls	r2, r3, #31
 801399e:	d5dc      	bpl.n	801395a <_dtoa_r+0xa72>
 80139a0:	2b39      	cmp	r3, #57	; 0x39
 80139a2:	d1d8      	bne.n	8013956 <_dtoa_r+0xa6e>
 80139a4:	9a02      	ldr	r2, [sp, #8]
 80139a6:	2339      	movs	r3, #57	; 0x39
 80139a8:	7013      	strb	r3, [r2, #0]
 80139aa:	462b      	mov	r3, r5
 80139ac:	461d      	mov	r5, r3
 80139ae:	3b01      	subs	r3, #1
 80139b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80139b4:	2a39      	cmp	r2, #57	; 0x39
 80139b6:	d050      	beq.n	8013a5a <_dtoa_r+0xb72>
 80139b8:	3201      	adds	r2, #1
 80139ba:	701a      	strb	r2, [r3, #0]
 80139bc:	e745      	b.n	801384a <_dtoa_r+0x962>
 80139be:	2a00      	cmp	r2, #0
 80139c0:	dd03      	ble.n	80139ca <_dtoa_r+0xae2>
 80139c2:	2b39      	cmp	r3, #57	; 0x39
 80139c4:	d0ee      	beq.n	80139a4 <_dtoa_r+0xabc>
 80139c6:	3301      	adds	r3, #1
 80139c8:	e7c7      	b.n	801395a <_dtoa_r+0xa72>
 80139ca:	9a01      	ldr	r2, [sp, #4]
 80139cc:	9907      	ldr	r1, [sp, #28]
 80139ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80139d2:	428a      	cmp	r2, r1
 80139d4:	d02a      	beq.n	8013a2c <_dtoa_r+0xb44>
 80139d6:	4659      	mov	r1, fp
 80139d8:	2300      	movs	r3, #0
 80139da:	220a      	movs	r2, #10
 80139dc:	4620      	mov	r0, r4
 80139de:	f000 fa21 	bl	8013e24 <__multadd>
 80139e2:	45b8      	cmp	r8, r7
 80139e4:	4683      	mov	fp, r0
 80139e6:	f04f 0300 	mov.w	r3, #0
 80139ea:	f04f 020a 	mov.w	r2, #10
 80139ee:	4641      	mov	r1, r8
 80139f0:	4620      	mov	r0, r4
 80139f2:	d107      	bne.n	8013a04 <_dtoa_r+0xb1c>
 80139f4:	f000 fa16 	bl	8013e24 <__multadd>
 80139f8:	4680      	mov	r8, r0
 80139fa:	4607      	mov	r7, r0
 80139fc:	9b01      	ldr	r3, [sp, #4]
 80139fe:	3301      	adds	r3, #1
 8013a00:	9301      	str	r3, [sp, #4]
 8013a02:	e775      	b.n	80138f0 <_dtoa_r+0xa08>
 8013a04:	f000 fa0e 	bl	8013e24 <__multadd>
 8013a08:	4639      	mov	r1, r7
 8013a0a:	4680      	mov	r8, r0
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	220a      	movs	r2, #10
 8013a10:	4620      	mov	r0, r4
 8013a12:	f000 fa07 	bl	8013e24 <__multadd>
 8013a16:	4607      	mov	r7, r0
 8013a18:	e7f0      	b.n	80139fc <_dtoa_r+0xb14>
 8013a1a:	f1b9 0f00 	cmp.w	r9, #0
 8013a1e:	9a00      	ldr	r2, [sp, #0]
 8013a20:	bfcc      	ite	gt
 8013a22:	464d      	movgt	r5, r9
 8013a24:	2501      	movle	r5, #1
 8013a26:	4415      	add	r5, r2
 8013a28:	f04f 0800 	mov.w	r8, #0
 8013a2c:	4659      	mov	r1, fp
 8013a2e:	2201      	movs	r2, #1
 8013a30:	4620      	mov	r0, r4
 8013a32:	9301      	str	r3, [sp, #4]
 8013a34:	f000 fba6 	bl	8014184 <__lshift>
 8013a38:	4631      	mov	r1, r6
 8013a3a:	4683      	mov	fp, r0
 8013a3c:	f000 fc0e 	bl	801425c <__mcmp>
 8013a40:	2800      	cmp	r0, #0
 8013a42:	dcb2      	bgt.n	80139aa <_dtoa_r+0xac2>
 8013a44:	d102      	bne.n	8013a4c <_dtoa_r+0xb64>
 8013a46:	9b01      	ldr	r3, [sp, #4]
 8013a48:	07db      	lsls	r3, r3, #31
 8013a4a:	d4ae      	bmi.n	80139aa <_dtoa_r+0xac2>
 8013a4c:	462b      	mov	r3, r5
 8013a4e:	461d      	mov	r5, r3
 8013a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a54:	2a30      	cmp	r2, #48	; 0x30
 8013a56:	d0fa      	beq.n	8013a4e <_dtoa_r+0xb66>
 8013a58:	e6f7      	b.n	801384a <_dtoa_r+0x962>
 8013a5a:	9a00      	ldr	r2, [sp, #0]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d1a5      	bne.n	80139ac <_dtoa_r+0xac4>
 8013a60:	f10a 0a01 	add.w	sl, sl, #1
 8013a64:	2331      	movs	r3, #49	; 0x31
 8013a66:	e779      	b.n	801395c <_dtoa_r+0xa74>
 8013a68:	4b13      	ldr	r3, [pc, #76]	; (8013ab8 <_dtoa_r+0xbd0>)
 8013a6a:	f7ff baaf 	b.w	8012fcc <_dtoa_r+0xe4>
 8013a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f47f aa86 	bne.w	8012f82 <_dtoa_r+0x9a>
 8013a76:	4b11      	ldr	r3, [pc, #68]	; (8013abc <_dtoa_r+0xbd4>)
 8013a78:	f7ff baa8 	b.w	8012fcc <_dtoa_r+0xe4>
 8013a7c:	f1b9 0f00 	cmp.w	r9, #0
 8013a80:	dc03      	bgt.n	8013a8a <_dtoa_r+0xba2>
 8013a82:	9b05      	ldr	r3, [sp, #20]
 8013a84:	2b02      	cmp	r3, #2
 8013a86:	f73f aec9 	bgt.w	801381c <_dtoa_r+0x934>
 8013a8a:	9d00      	ldr	r5, [sp, #0]
 8013a8c:	4631      	mov	r1, r6
 8013a8e:	4658      	mov	r0, fp
 8013a90:	f7ff f99c 	bl	8012dcc <quorem>
 8013a94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013a98:	f805 3b01 	strb.w	r3, [r5], #1
 8013a9c:	9a00      	ldr	r2, [sp, #0]
 8013a9e:	1aaa      	subs	r2, r5, r2
 8013aa0:	4591      	cmp	r9, r2
 8013aa2:	ddba      	ble.n	8013a1a <_dtoa_r+0xb32>
 8013aa4:	4659      	mov	r1, fp
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	220a      	movs	r2, #10
 8013aaa:	4620      	mov	r0, r4
 8013aac:	f000 f9ba 	bl	8013e24 <__multadd>
 8013ab0:	4683      	mov	fp, r0
 8013ab2:	e7eb      	b.n	8013a8c <_dtoa_r+0xba4>
 8013ab4:	080157f7 	.word	0x080157f7
 8013ab8:	08015750 	.word	0x08015750
 8013abc:	08015774 	.word	0x08015774

08013ac0 <__sflush_r>:
 8013ac0:	898a      	ldrh	r2, [r1, #12]
 8013ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ac6:	4605      	mov	r5, r0
 8013ac8:	0710      	lsls	r0, r2, #28
 8013aca:	460c      	mov	r4, r1
 8013acc:	d458      	bmi.n	8013b80 <__sflush_r+0xc0>
 8013ace:	684b      	ldr	r3, [r1, #4]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	dc05      	bgt.n	8013ae0 <__sflush_r+0x20>
 8013ad4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	dc02      	bgt.n	8013ae0 <__sflush_r+0x20>
 8013ada:	2000      	movs	r0, #0
 8013adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ae2:	2e00      	cmp	r6, #0
 8013ae4:	d0f9      	beq.n	8013ada <__sflush_r+0x1a>
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013aec:	682f      	ldr	r7, [r5, #0]
 8013aee:	602b      	str	r3, [r5, #0]
 8013af0:	d032      	beq.n	8013b58 <__sflush_r+0x98>
 8013af2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013af4:	89a3      	ldrh	r3, [r4, #12]
 8013af6:	075a      	lsls	r2, r3, #29
 8013af8:	d505      	bpl.n	8013b06 <__sflush_r+0x46>
 8013afa:	6863      	ldr	r3, [r4, #4]
 8013afc:	1ac0      	subs	r0, r0, r3
 8013afe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b00:	b10b      	cbz	r3, 8013b06 <__sflush_r+0x46>
 8013b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b04:	1ac0      	subs	r0, r0, r3
 8013b06:	2300      	movs	r3, #0
 8013b08:	4602      	mov	r2, r0
 8013b0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b0c:	6a21      	ldr	r1, [r4, #32]
 8013b0e:	4628      	mov	r0, r5
 8013b10:	47b0      	blx	r6
 8013b12:	1c43      	adds	r3, r0, #1
 8013b14:	89a3      	ldrh	r3, [r4, #12]
 8013b16:	d106      	bne.n	8013b26 <__sflush_r+0x66>
 8013b18:	6829      	ldr	r1, [r5, #0]
 8013b1a:	291d      	cmp	r1, #29
 8013b1c:	d82c      	bhi.n	8013b78 <__sflush_r+0xb8>
 8013b1e:	4a2a      	ldr	r2, [pc, #168]	; (8013bc8 <__sflush_r+0x108>)
 8013b20:	40ca      	lsrs	r2, r1
 8013b22:	07d6      	lsls	r6, r2, #31
 8013b24:	d528      	bpl.n	8013b78 <__sflush_r+0xb8>
 8013b26:	2200      	movs	r2, #0
 8013b28:	6062      	str	r2, [r4, #4]
 8013b2a:	04d9      	lsls	r1, r3, #19
 8013b2c:	6922      	ldr	r2, [r4, #16]
 8013b2e:	6022      	str	r2, [r4, #0]
 8013b30:	d504      	bpl.n	8013b3c <__sflush_r+0x7c>
 8013b32:	1c42      	adds	r2, r0, #1
 8013b34:	d101      	bne.n	8013b3a <__sflush_r+0x7a>
 8013b36:	682b      	ldr	r3, [r5, #0]
 8013b38:	b903      	cbnz	r3, 8013b3c <__sflush_r+0x7c>
 8013b3a:	6560      	str	r0, [r4, #84]	; 0x54
 8013b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b3e:	602f      	str	r7, [r5, #0]
 8013b40:	2900      	cmp	r1, #0
 8013b42:	d0ca      	beq.n	8013ada <__sflush_r+0x1a>
 8013b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b48:	4299      	cmp	r1, r3
 8013b4a:	d002      	beq.n	8013b52 <__sflush_r+0x92>
 8013b4c:	4628      	mov	r0, r5
 8013b4e:	f000 fc95 	bl	801447c <_free_r>
 8013b52:	2000      	movs	r0, #0
 8013b54:	6360      	str	r0, [r4, #52]	; 0x34
 8013b56:	e7c1      	b.n	8013adc <__sflush_r+0x1c>
 8013b58:	6a21      	ldr	r1, [r4, #32]
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	4628      	mov	r0, r5
 8013b5e:	47b0      	blx	r6
 8013b60:	1c41      	adds	r1, r0, #1
 8013b62:	d1c7      	bne.n	8013af4 <__sflush_r+0x34>
 8013b64:	682b      	ldr	r3, [r5, #0]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d0c4      	beq.n	8013af4 <__sflush_r+0x34>
 8013b6a:	2b1d      	cmp	r3, #29
 8013b6c:	d001      	beq.n	8013b72 <__sflush_r+0xb2>
 8013b6e:	2b16      	cmp	r3, #22
 8013b70:	d101      	bne.n	8013b76 <__sflush_r+0xb6>
 8013b72:	602f      	str	r7, [r5, #0]
 8013b74:	e7b1      	b.n	8013ada <__sflush_r+0x1a>
 8013b76:	89a3      	ldrh	r3, [r4, #12]
 8013b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b7c:	81a3      	strh	r3, [r4, #12]
 8013b7e:	e7ad      	b.n	8013adc <__sflush_r+0x1c>
 8013b80:	690f      	ldr	r7, [r1, #16]
 8013b82:	2f00      	cmp	r7, #0
 8013b84:	d0a9      	beq.n	8013ada <__sflush_r+0x1a>
 8013b86:	0793      	lsls	r3, r2, #30
 8013b88:	680e      	ldr	r6, [r1, #0]
 8013b8a:	bf08      	it	eq
 8013b8c:	694b      	ldreq	r3, [r1, #20]
 8013b8e:	600f      	str	r7, [r1, #0]
 8013b90:	bf18      	it	ne
 8013b92:	2300      	movne	r3, #0
 8013b94:	eba6 0807 	sub.w	r8, r6, r7
 8013b98:	608b      	str	r3, [r1, #8]
 8013b9a:	f1b8 0f00 	cmp.w	r8, #0
 8013b9e:	dd9c      	ble.n	8013ada <__sflush_r+0x1a>
 8013ba0:	6a21      	ldr	r1, [r4, #32]
 8013ba2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013ba4:	4643      	mov	r3, r8
 8013ba6:	463a      	mov	r2, r7
 8013ba8:	4628      	mov	r0, r5
 8013baa:	47b0      	blx	r6
 8013bac:	2800      	cmp	r0, #0
 8013bae:	dc06      	bgt.n	8013bbe <__sflush_r+0xfe>
 8013bb0:	89a3      	ldrh	r3, [r4, #12]
 8013bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bb6:	81a3      	strh	r3, [r4, #12]
 8013bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8013bbc:	e78e      	b.n	8013adc <__sflush_r+0x1c>
 8013bbe:	4407      	add	r7, r0
 8013bc0:	eba8 0800 	sub.w	r8, r8, r0
 8013bc4:	e7e9      	b.n	8013b9a <__sflush_r+0xda>
 8013bc6:	bf00      	nop
 8013bc8:	20400001 	.word	0x20400001

08013bcc <_fflush_r>:
 8013bcc:	b538      	push	{r3, r4, r5, lr}
 8013bce:	690b      	ldr	r3, [r1, #16]
 8013bd0:	4605      	mov	r5, r0
 8013bd2:	460c      	mov	r4, r1
 8013bd4:	b913      	cbnz	r3, 8013bdc <_fflush_r+0x10>
 8013bd6:	2500      	movs	r5, #0
 8013bd8:	4628      	mov	r0, r5
 8013bda:	bd38      	pop	{r3, r4, r5, pc}
 8013bdc:	b118      	cbz	r0, 8013be6 <_fflush_r+0x1a>
 8013bde:	6983      	ldr	r3, [r0, #24]
 8013be0:	b90b      	cbnz	r3, 8013be6 <_fflush_r+0x1a>
 8013be2:	f7fe f8e9 	bl	8011db8 <__sinit>
 8013be6:	4b14      	ldr	r3, [pc, #80]	; (8013c38 <_fflush_r+0x6c>)
 8013be8:	429c      	cmp	r4, r3
 8013bea:	d11b      	bne.n	8013c24 <_fflush_r+0x58>
 8013bec:	686c      	ldr	r4, [r5, #4]
 8013bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d0ef      	beq.n	8013bd6 <_fflush_r+0xa>
 8013bf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013bf8:	07d0      	lsls	r0, r2, #31
 8013bfa:	d404      	bmi.n	8013c06 <_fflush_r+0x3a>
 8013bfc:	0599      	lsls	r1, r3, #22
 8013bfe:	d402      	bmi.n	8013c06 <_fflush_r+0x3a>
 8013c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c02:	f7fe f99c 	bl	8011f3e <__retarget_lock_acquire_recursive>
 8013c06:	4628      	mov	r0, r5
 8013c08:	4621      	mov	r1, r4
 8013c0a:	f7ff ff59 	bl	8013ac0 <__sflush_r>
 8013c0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c10:	07da      	lsls	r2, r3, #31
 8013c12:	4605      	mov	r5, r0
 8013c14:	d4e0      	bmi.n	8013bd8 <_fflush_r+0xc>
 8013c16:	89a3      	ldrh	r3, [r4, #12]
 8013c18:	059b      	lsls	r3, r3, #22
 8013c1a:	d4dd      	bmi.n	8013bd8 <_fflush_r+0xc>
 8013c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c1e:	f7fe f98f 	bl	8011f40 <__retarget_lock_release_recursive>
 8013c22:	e7d9      	b.n	8013bd8 <_fflush_r+0xc>
 8013c24:	4b05      	ldr	r3, [pc, #20]	; (8013c3c <_fflush_r+0x70>)
 8013c26:	429c      	cmp	r4, r3
 8013c28:	d101      	bne.n	8013c2e <_fflush_r+0x62>
 8013c2a:	68ac      	ldr	r4, [r5, #8]
 8013c2c:	e7df      	b.n	8013bee <_fflush_r+0x22>
 8013c2e:	4b04      	ldr	r3, [pc, #16]	; (8013c40 <_fflush_r+0x74>)
 8013c30:	429c      	cmp	r4, r3
 8013c32:	bf08      	it	eq
 8013c34:	68ec      	ldreq	r4, [r5, #12]
 8013c36:	e7da      	b.n	8013bee <_fflush_r+0x22>
 8013c38:	080156fc 	.word	0x080156fc
 8013c3c:	0801571c 	.word	0x0801571c
 8013c40:	080156dc 	.word	0x080156dc

08013c44 <_localeconv_r>:
 8013c44:	4800      	ldr	r0, [pc, #0]	; (8013c48 <_localeconv_r+0x4>)
 8013c46:	4770      	bx	lr
 8013c48:	200006e8 	.word	0x200006e8

08013c4c <_lseek_r>:
 8013c4c:	b538      	push	{r3, r4, r5, lr}
 8013c4e:	4d07      	ldr	r5, [pc, #28]	; (8013c6c <_lseek_r+0x20>)
 8013c50:	4604      	mov	r4, r0
 8013c52:	4608      	mov	r0, r1
 8013c54:	4611      	mov	r1, r2
 8013c56:	2200      	movs	r2, #0
 8013c58:	602a      	str	r2, [r5, #0]
 8013c5a:	461a      	mov	r2, r3
 8013c5c:	f7ee fb1e 	bl	800229c <_lseek>
 8013c60:	1c43      	adds	r3, r0, #1
 8013c62:	d102      	bne.n	8013c6a <_lseek_r+0x1e>
 8013c64:	682b      	ldr	r3, [r5, #0]
 8013c66:	b103      	cbz	r3, 8013c6a <_lseek_r+0x1e>
 8013c68:	6023      	str	r3, [r4, #0]
 8013c6a:	bd38      	pop	{r3, r4, r5, pc}
 8013c6c:	20011034 	.word	0x20011034

08013c70 <__swhatbuf_r>:
 8013c70:	b570      	push	{r4, r5, r6, lr}
 8013c72:	460e      	mov	r6, r1
 8013c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c78:	2900      	cmp	r1, #0
 8013c7a:	b096      	sub	sp, #88	; 0x58
 8013c7c:	4614      	mov	r4, r2
 8013c7e:	461d      	mov	r5, r3
 8013c80:	da07      	bge.n	8013c92 <__swhatbuf_r+0x22>
 8013c82:	2300      	movs	r3, #0
 8013c84:	602b      	str	r3, [r5, #0]
 8013c86:	89b3      	ldrh	r3, [r6, #12]
 8013c88:	061a      	lsls	r2, r3, #24
 8013c8a:	d410      	bmi.n	8013cae <__swhatbuf_r+0x3e>
 8013c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c90:	e00e      	b.n	8013cb0 <__swhatbuf_r+0x40>
 8013c92:	466a      	mov	r2, sp
 8013c94:	f000 ff3a 	bl	8014b0c <_fstat_r>
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	dbf2      	blt.n	8013c82 <__swhatbuf_r+0x12>
 8013c9c:	9a01      	ldr	r2, [sp, #4]
 8013c9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013ca2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013ca6:	425a      	negs	r2, r3
 8013ca8:	415a      	adcs	r2, r3
 8013caa:	602a      	str	r2, [r5, #0]
 8013cac:	e7ee      	b.n	8013c8c <__swhatbuf_r+0x1c>
 8013cae:	2340      	movs	r3, #64	; 0x40
 8013cb0:	2000      	movs	r0, #0
 8013cb2:	6023      	str	r3, [r4, #0]
 8013cb4:	b016      	add	sp, #88	; 0x58
 8013cb6:	bd70      	pop	{r4, r5, r6, pc}

08013cb8 <__smakebuf_r>:
 8013cb8:	898b      	ldrh	r3, [r1, #12]
 8013cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013cbc:	079d      	lsls	r5, r3, #30
 8013cbe:	4606      	mov	r6, r0
 8013cc0:	460c      	mov	r4, r1
 8013cc2:	d507      	bpl.n	8013cd4 <__smakebuf_r+0x1c>
 8013cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013cc8:	6023      	str	r3, [r4, #0]
 8013cca:	6123      	str	r3, [r4, #16]
 8013ccc:	2301      	movs	r3, #1
 8013cce:	6163      	str	r3, [r4, #20]
 8013cd0:	b002      	add	sp, #8
 8013cd2:	bd70      	pop	{r4, r5, r6, pc}
 8013cd4:	ab01      	add	r3, sp, #4
 8013cd6:	466a      	mov	r2, sp
 8013cd8:	f7ff ffca 	bl	8013c70 <__swhatbuf_r>
 8013cdc:	9900      	ldr	r1, [sp, #0]
 8013cde:	4605      	mov	r5, r0
 8013ce0:	4630      	mov	r0, r6
 8013ce2:	f7fe f945 	bl	8011f70 <_malloc_r>
 8013ce6:	b948      	cbnz	r0, 8013cfc <__smakebuf_r+0x44>
 8013ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cec:	059a      	lsls	r2, r3, #22
 8013cee:	d4ef      	bmi.n	8013cd0 <__smakebuf_r+0x18>
 8013cf0:	f023 0303 	bic.w	r3, r3, #3
 8013cf4:	f043 0302 	orr.w	r3, r3, #2
 8013cf8:	81a3      	strh	r3, [r4, #12]
 8013cfa:	e7e3      	b.n	8013cc4 <__smakebuf_r+0xc>
 8013cfc:	4b0d      	ldr	r3, [pc, #52]	; (8013d34 <__smakebuf_r+0x7c>)
 8013cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8013d00:	89a3      	ldrh	r3, [r4, #12]
 8013d02:	6020      	str	r0, [r4, #0]
 8013d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d08:	81a3      	strh	r3, [r4, #12]
 8013d0a:	9b00      	ldr	r3, [sp, #0]
 8013d0c:	6163      	str	r3, [r4, #20]
 8013d0e:	9b01      	ldr	r3, [sp, #4]
 8013d10:	6120      	str	r0, [r4, #16]
 8013d12:	b15b      	cbz	r3, 8013d2c <__smakebuf_r+0x74>
 8013d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d18:	4630      	mov	r0, r6
 8013d1a:	f000 ff09 	bl	8014b30 <_isatty_r>
 8013d1e:	b128      	cbz	r0, 8013d2c <__smakebuf_r+0x74>
 8013d20:	89a3      	ldrh	r3, [r4, #12]
 8013d22:	f023 0303 	bic.w	r3, r3, #3
 8013d26:	f043 0301 	orr.w	r3, r3, #1
 8013d2a:	81a3      	strh	r3, [r4, #12]
 8013d2c:	89a0      	ldrh	r0, [r4, #12]
 8013d2e:	4305      	orrs	r5, r0
 8013d30:	81a5      	strh	r5, [r4, #12]
 8013d32:	e7cd      	b.n	8013cd0 <__smakebuf_r+0x18>
 8013d34:	08011d51 	.word	0x08011d51

08013d38 <malloc>:
 8013d38:	4b02      	ldr	r3, [pc, #8]	; (8013d44 <malloc+0xc>)
 8013d3a:	4601      	mov	r1, r0
 8013d3c:	6818      	ldr	r0, [r3, #0]
 8013d3e:	f7fe b917 	b.w	8011f70 <_malloc_r>
 8013d42:	bf00      	nop
 8013d44:	20000594 	.word	0x20000594

08013d48 <__malloc_lock>:
 8013d48:	4801      	ldr	r0, [pc, #4]	; (8013d50 <__malloc_lock+0x8>)
 8013d4a:	f7fe b8f8 	b.w	8011f3e <__retarget_lock_acquire_recursive>
 8013d4e:	bf00      	nop
 8013d50:	2001102c 	.word	0x2001102c

08013d54 <__malloc_unlock>:
 8013d54:	4801      	ldr	r0, [pc, #4]	; (8013d5c <__malloc_unlock+0x8>)
 8013d56:	f7fe b8f3 	b.w	8011f40 <__retarget_lock_release_recursive>
 8013d5a:	bf00      	nop
 8013d5c:	2001102c 	.word	0x2001102c

08013d60 <_Balloc>:
 8013d60:	b570      	push	{r4, r5, r6, lr}
 8013d62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013d64:	4604      	mov	r4, r0
 8013d66:	460d      	mov	r5, r1
 8013d68:	b976      	cbnz	r6, 8013d88 <_Balloc+0x28>
 8013d6a:	2010      	movs	r0, #16
 8013d6c:	f7ff ffe4 	bl	8013d38 <malloc>
 8013d70:	4602      	mov	r2, r0
 8013d72:	6260      	str	r0, [r4, #36]	; 0x24
 8013d74:	b920      	cbnz	r0, 8013d80 <_Balloc+0x20>
 8013d76:	4b18      	ldr	r3, [pc, #96]	; (8013dd8 <_Balloc+0x78>)
 8013d78:	4818      	ldr	r0, [pc, #96]	; (8013ddc <_Balloc+0x7c>)
 8013d7a:	2166      	movs	r1, #102	; 0x66
 8013d7c:	f000 fe96 	bl	8014aac <__assert_func>
 8013d80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d84:	6006      	str	r6, [r0, #0]
 8013d86:	60c6      	str	r6, [r0, #12]
 8013d88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013d8a:	68f3      	ldr	r3, [r6, #12]
 8013d8c:	b183      	cbz	r3, 8013db0 <_Balloc+0x50>
 8013d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d90:	68db      	ldr	r3, [r3, #12]
 8013d92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d96:	b9b8      	cbnz	r0, 8013dc8 <_Balloc+0x68>
 8013d98:	2101      	movs	r1, #1
 8013d9a:	fa01 f605 	lsl.w	r6, r1, r5
 8013d9e:	1d72      	adds	r2, r6, #5
 8013da0:	0092      	lsls	r2, r2, #2
 8013da2:	4620      	mov	r0, r4
 8013da4:	f000 fb5a 	bl	801445c <_calloc_r>
 8013da8:	b160      	cbz	r0, 8013dc4 <_Balloc+0x64>
 8013daa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013dae:	e00e      	b.n	8013dce <_Balloc+0x6e>
 8013db0:	2221      	movs	r2, #33	; 0x21
 8013db2:	2104      	movs	r1, #4
 8013db4:	4620      	mov	r0, r4
 8013db6:	f000 fb51 	bl	801445c <_calloc_r>
 8013dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013dbc:	60f0      	str	r0, [r6, #12]
 8013dbe:	68db      	ldr	r3, [r3, #12]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d1e4      	bne.n	8013d8e <_Balloc+0x2e>
 8013dc4:	2000      	movs	r0, #0
 8013dc6:	bd70      	pop	{r4, r5, r6, pc}
 8013dc8:	6802      	ldr	r2, [r0, #0]
 8013dca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013dce:	2300      	movs	r3, #0
 8013dd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013dd4:	e7f7      	b.n	8013dc6 <_Balloc+0x66>
 8013dd6:	bf00      	nop
 8013dd8:	08015781 	.word	0x08015781
 8013ddc:	08015808 	.word	0x08015808

08013de0 <_Bfree>:
 8013de0:	b570      	push	{r4, r5, r6, lr}
 8013de2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013de4:	4605      	mov	r5, r0
 8013de6:	460c      	mov	r4, r1
 8013de8:	b976      	cbnz	r6, 8013e08 <_Bfree+0x28>
 8013dea:	2010      	movs	r0, #16
 8013dec:	f7ff ffa4 	bl	8013d38 <malloc>
 8013df0:	4602      	mov	r2, r0
 8013df2:	6268      	str	r0, [r5, #36]	; 0x24
 8013df4:	b920      	cbnz	r0, 8013e00 <_Bfree+0x20>
 8013df6:	4b09      	ldr	r3, [pc, #36]	; (8013e1c <_Bfree+0x3c>)
 8013df8:	4809      	ldr	r0, [pc, #36]	; (8013e20 <_Bfree+0x40>)
 8013dfa:	218a      	movs	r1, #138	; 0x8a
 8013dfc:	f000 fe56 	bl	8014aac <__assert_func>
 8013e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e04:	6006      	str	r6, [r0, #0]
 8013e06:	60c6      	str	r6, [r0, #12]
 8013e08:	b13c      	cbz	r4, 8013e1a <_Bfree+0x3a>
 8013e0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013e0c:	6862      	ldr	r2, [r4, #4]
 8013e0e:	68db      	ldr	r3, [r3, #12]
 8013e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e14:	6021      	str	r1, [r4, #0]
 8013e16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e1a:	bd70      	pop	{r4, r5, r6, pc}
 8013e1c:	08015781 	.word	0x08015781
 8013e20:	08015808 	.word	0x08015808

08013e24 <__multadd>:
 8013e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e28:	690e      	ldr	r6, [r1, #16]
 8013e2a:	4607      	mov	r7, r0
 8013e2c:	4698      	mov	r8, r3
 8013e2e:	460c      	mov	r4, r1
 8013e30:	f101 0014 	add.w	r0, r1, #20
 8013e34:	2300      	movs	r3, #0
 8013e36:	6805      	ldr	r5, [r0, #0]
 8013e38:	b2a9      	uxth	r1, r5
 8013e3a:	fb02 8101 	mla	r1, r2, r1, r8
 8013e3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013e42:	0c2d      	lsrs	r5, r5, #16
 8013e44:	fb02 c505 	mla	r5, r2, r5, ip
 8013e48:	b289      	uxth	r1, r1
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013e50:	429e      	cmp	r6, r3
 8013e52:	f840 1b04 	str.w	r1, [r0], #4
 8013e56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013e5a:	dcec      	bgt.n	8013e36 <__multadd+0x12>
 8013e5c:	f1b8 0f00 	cmp.w	r8, #0
 8013e60:	d022      	beq.n	8013ea8 <__multadd+0x84>
 8013e62:	68a3      	ldr	r3, [r4, #8]
 8013e64:	42b3      	cmp	r3, r6
 8013e66:	dc19      	bgt.n	8013e9c <__multadd+0x78>
 8013e68:	6861      	ldr	r1, [r4, #4]
 8013e6a:	4638      	mov	r0, r7
 8013e6c:	3101      	adds	r1, #1
 8013e6e:	f7ff ff77 	bl	8013d60 <_Balloc>
 8013e72:	4605      	mov	r5, r0
 8013e74:	b928      	cbnz	r0, 8013e82 <__multadd+0x5e>
 8013e76:	4602      	mov	r2, r0
 8013e78:	4b0d      	ldr	r3, [pc, #52]	; (8013eb0 <__multadd+0x8c>)
 8013e7a:	480e      	ldr	r0, [pc, #56]	; (8013eb4 <__multadd+0x90>)
 8013e7c:	21b5      	movs	r1, #181	; 0xb5
 8013e7e:	f000 fe15 	bl	8014aac <__assert_func>
 8013e82:	6922      	ldr	r2, [r4, #16]
 8013e84:	3202      	adds	r2, #2
 8013e86:	f104 010c 	add.w	r1, r4, #12
 8013e8a:	0092      	lsls	r2, r2, #2
 8013e8c:	300c      	adds	r0, #12
 8013e8e:	f7fe f858 	bl	8011f42 <memcpy>
 8013e92:	4621      	mov	r1, r4
 8013e94:	4638      	mov	r0, r7
 8013e96:	f7ff ffa3 	bl	8013de0 <_Bfree>
 8013e9a:	462c      	mov	r4, r5
 8013e9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013ea0:	3601      	adds	r6, #1
 8013ea2:	f8c3 8014 	str.w	r8, [r3, #20]
 8013ea6:	6126      	str	r6, [r4, #16]
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eae:	bf00      	nop
 8013eb0:	080157f7 	.word	0x080157f7
 8013eb4:	08015808 	.word	0x08015808

08013eb8 <__hi0bits>:
 8013eb8:	0c03      	lsrs	r3, r0, #16
 8013eba:	041b      	lsls	r3, r3, #16
 8013ebc:	b9d3      	cbnz	r3, 8013ef4 <__hi0bits+0x3c>
 8013ebe:	0400      	lsls	r0, r0, #16
 8013ec0:	2310      	movs	r3, #16
 8013ec2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013ec6:	bf04      	itt	eq
 8013ec8:	0200      	lsleq	r0, r0, #8
 8013eca:	3308      	addeq	r3, #8
 8013ecc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013ed0:	bf04      	itt	eq
 8013ed2:	0100      	lsleq	r0, r0, #4
 8013ed4:	3304      	addeq	r3, #4
 8013ed6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013eda:	bf04      	itt	eq
 8013edc:	0080      	lsleq	r0, r0, #2
 8013ede:	3302      	addeq	r3, #2
 8013ee0:	2800      	cmp	r0, #0
 8013ee2:	db05      	blt.n	8013ef0 <__hi0bits+0x38>
 8013ee4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013ee8:	f103 0301 	add.w	r3, r3, #1
 8013eec:	bf08      	it	eq
 8013eee:	2320      	moveq	r3, #32
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	4770      	bx	lr
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	e7e4      	b.n	8013ec2 <__hi0bits+0xa>

08013ef8 <__lo0bits>:
 8013ef8:	6803      	ldr	r3, [r0, #0]
 8013efa:	f013 0207 	ands.w	r2, r3, #7
 8013efe:	4601      	mov	r1, r0
 8013f00:	d00b      	beq.n	8013f1a <__lo0bits+0x22>
 8013f02:	07da      	lsls	r2, r3, #31
 8013f04:	d424      	bmi.n	8013f50 <__lo0bits+0x58>
 8013f06:	0798      	lsls	r0, r3, #30
 8013f08:	bf49      	itett	mi
 8013f0a:	085b      	lsrmi	r3, r3, #1
 8013f0c:	089b      	lsrpl	r3, r3, #2
 8013f0e:	2001      	movmi	r0, #1
 8013f10:	600b      	strmi	r3, [r1, #0]
 8013f12:	bf5c      	itt	pl
 8013f14:	600b      	strpl	r3, [r1, #0]
 8013f16:	2002      	movpl	r0, #2
 8013f18:	4770      	bx	lr
 8013f1a:	b298      	uxth	r0, r3
 8013f1c:	b9b0      	cbnz	r0, 8013f4c <__lo0bits+0x54>
 8013f1e:	0c1b      	lsrs	r3, r3, #16
 8013f20:	2010      	movs	r0, #16
 8013f22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013f26:	bf04      	itt	eq
 8013f28:	0a1b      	lsreq	r3, r3, #8
 8013f2a:	3008      	addeq	r0, #8
 8013f2c:	071a      	lsls	r2, r3, #28
 8013f2e:	bf04      	itt	eq
 8013f30:	091b      	lsreq	r3, r3, #4
 8013f32:	3004      	addeq	r0, #4
 8013f34:	079a      	lsls	r2, r3, #30
 8013f36:	bf04      	itt	eq
 8013f38:	089b      	lsreq	r3, r3, #2
 8013f3a:	3002      	addeq	r0, #2
 8013f3c:	07da      	lsls	r2, r3, #31
 8013f3e:	d403      	bmi.n	8013f48 <__lo0bits+0x50>
 8013f40:	085b      	lsrs	r3, r3, #1
 8013f42:	f100 0001 	add.w	r0, r0, #1
 8013f46:	d005      	beq.n	8013f54 <__lo0bits+0x5c>
 8013f48:	600b      	str	r3, [r1, #0]
 8013f4a:	4770      	bx	lr
 8013f4c:	4610      	mov	r0, r2
 8013f4e:	e7e8      	b.n	8013f22 <__lo0bits+0x2a>
 8013f50:	2000      	movs	r0, #0
 8013f52:	4770      	bx	lr
 8013f54:	2020      	movs	r0, #32
 8013f56:	4770      	bx	lr

08013f58 <__i2b>:
 8013f58:	b510      	push	{r4, lr}
 8013f5a:	460c      	mov	r4, r1
 8013f5c:	2101      	movs	r1, #1
 8013f5e:	f7ff feff 	bl	8013d60 <_Balloc>
 8013f62:	4602      	mov	r2, r0
 8013f64:	b928      	cbnz	r0, 8013f72 <__i2b+0x1a>
 8013f66:	4b05      	ldr	r3, [pc, #20]	; (8013f7c <__i2b+0x24>)
 8013f68:	4805      	ldr	r0, [pc, #20]	; (8013f80 <__i2b+0x28>)
 8013f6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013f6e:	f000 fd9d 	bl	8014aac <__assert_func>
 8013f72:	2301      	movs	r3, #1
 8013f74:	6144      	str	r4, [r0, #20]
 8013f76:	6103      	str	r3, [r0, #16]
 8013f78:	bd10      	pop	{r4, pc}
 8013f7a:	bf00      	nop
 8013f7c:	080157f7 	.word	0x080157f7
 8013f80:	08015808 	.word	0x08015808

08013f84 <__multiply>:
 8013f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f88:	4614      	mov	r4, r2
 8013f8a:	690a      	ldr	r2, [r1, #16]
 8013f8c:	6923      	ldr	r3, [r4, #16]
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	bfb8      	it	lt
 8013f92:	460b      	movlt	r3, r1
 8013f94:	460d      	mov	r5, r1
 8013f96:	bfbc      	itt	lt
 8013f98:	4625      	movlt	r5, r4
 8013f9a:	461c      	movlt	r4, r3
 8013f9c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013fa0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013fa4:	68ab      	ldr	r3, [r5, #8]
 8013fa6:	6869      	ldr	r1, [r5, #4]
 8013fa8:	eb0a 0709 	add.w	r7, sl, r9
 8013fac:	42bb      	cmp	r3, r7
 8013fae:	b085      	sub	sp, #20
 8013fb0:	bfb8      	it	lt
 8013fb2:	3101      	addlt	r1, #1
 8013fb4:	f7ff fed4 	bl	8013d60 <_Balloc>
 8013fb8:	b930      	cbnz	r0, 8013fc8 <__multiply+0x44>
 8013fba:	4602      	mov	r2, r0
 8013fbc:	4b42      	ldr	r3, [pc, #264]	; (80140c8 <__multiply+0x144>)
 8013fbe:	4843      	ldr	r0, [pc, #268]	; (80140cc <__multiply+0x148>)
 8013fc0:	f240 115d 	movw	r1, #349	; 0x15d
 8013fc4:	f000 fd72 	bl	8014aac <__assert_func>
 8013fc8:	f100 0614 	add.w	r6, r0, #20
 8013fcc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013fd0:	4633      	mov	r3, r6
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	4543      	cmp	r3, r8
 8013fd6:	d31e      	bcc.n	8014016 <__multiply+0x92>
 8013fd8:	f105 0c14 	add.w	ip, r5, #20
 8013fdc:	f104 0314 	add.w	r3, r4, #20
 8013fe0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013fe4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013fe8:	9202      	str	r2, [sp, #8]
 8013fea:	ebac 0205 	sub.w	r2, ip, r5
 8013fee:	3a15      	subs	r2, #21
 8013ff0:	f022 0203 	bic.w	r2, r2, #3
 8013ff4:	3204      	adds	r2, #4
 8013ff6:	f105 0115 	add.w	r1, r5, #21
 8013ffa:	458c      	cmp	ip, r1
 8013ffc:	bf38      	it	cc
 8013ffe:	2204      	movcc	r2, #4
 8014000:	9201      	str	r2, [sp, #4]
 8014002:	9a02      	ldr	r2, [sp, #8]
 8014004:	9303      	str	r3, [sp, #12]
 8014006:	429a      	cmp	r2, r3
 8014008:	d808      	bhi.n	801401c <__multiply+0x98>
 801400a:	2f00      	cmp	r7, #0
 801400c:	dc55      	bgt.n	80140ba <__multiply+0x136>
 801400e:	6107      	str	r7, [r0, #16]
 8014010:	b005      	add	sp, #20
 8014012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014016:	f843 2b04 	str.w	r2, [r3], #4
 801401a:	e7db      	b.n	8013fd4 <__multiply+0x50>
 801401c:	f8b3 a000 	ldrh.w	sl, [r3]
 8014020:	f1ba 0f00 	cmp.w	sl, #0
 8014024:	d020      	beq.n	8014068 <__multiply+0xe4>
 8014026:	f105 0e14 	add.w	lr, r5, #20
 801402a:	46b1      	mov	r9, r6
 801402c:	2200      	movs	r2, #0
 801402e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014032:	f8d9 b000 	ldr.w	fp, [r9]
 8014036:	b2a1      	uxth	r1, r4
 8014038:	fa1f fb8b 	uxth.w	fp, fp
 801403c:	fb0a b101 	mla	r1, sl, r1, fp
 8014040:	4411      	add	r1, r2
 8014042:	f8d9 2000 	ldr.w	r2, [r9]
 8014046:	0c24      	lsrs	r4, r4, #16
 8014048:	0c12      	lsrs	r2, r2, #16
 801404a:	fb0a 2404 	mla	r4, sl, r4, r2
 801404e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014052:	b289      	uxth	r1, r1
 8014054:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014058:	45f4      	cmp	ip, lr
 801405a:	f849 1b04 	str.w	r1, [r9], #4
 801405e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014062:	d8e4      	bhi.n	801402e <__multiply+0xaa>
 8014064:	9901      	ldr	r1, [sp, #4]
 8014066:	5072      	str	r2, [r6, r1]
 8014068:	9a03      	ldr	r2, [sp, #12]
 801406a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801406e:	3304      	adds	r3, #4
 8014070:	f1b9 0f00 	cmp.w	r9, #0
 8014074:	d01f      	beq.n	80140b6 <__multiply+0x132>
 8014076:	6834      	ldr	r4, [r6, #0]
 8014078:	f105 0114 	add.w	r1, r5, #20
 801407c:	46b6      	mov	lr, r6
 801407e:	f04f 0a00 	mov.w	sl, #0
 8014082:	880a      	ldrh	r2, [r1, #0]
 8014084:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014088:	fb09 b202 	mla	r2, r9, r2, fp
 801408c:	4492      	add	sl, r2
 801408e:	b2a4      	uxth	r4, r4
 8014090:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014094:	f84e 4b04 	str.w	r4, [lr], #4
 8014098:	f851 4b04 	ldr.w	r4, [r1], #4
 801409c:	f8be 2000 	ldrh.w	r2, [lr]
 80140a0:	0c24      	lsrs	r4, r4, #16
 80140a2:	fb09 2404 	mla	r4, r9, r4, r2
 80140a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80140aa:	458c      	cmp	ip, r1
 80140ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80140b0:	d8e7      	bhi.n	8014082 <__multiply+0xfe>
 80140b2:	9a01      	ldr	r2, [sp, #4]
 80140b4:	50b4      	str	r4, [r6, r2]
 80140b6:	3604      	adds	r6, #4
 80140b8:	e7a3      	b.n	8014002 <__multiply+0x7e>
 80140ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d1a5      	bne.n	801400e <__multiply+0x8a>
 80140c2:	3f01      	subs	r7, #1
 80140c4:	e7a1      	b.n	801400a <__multiply+0x86>
 80140c6:	bf00      	nop
 80140c8:	080157f7 	.word	0x080157f7
 80140cc:	08015808 	.word	0x08015808

080140d0 <__pow5mult>:
 80140d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140d4:	4615      	mov	r5, r2
 80140d6:	f012 0203 	ands.w	r2, r2, #3
 80140da:	4606      	mov	r6, r0
 80140dc:	460f      	mov	r7, r1
 80140de:	d007      	beq.n	80140f0 <__pow5mult+0x20>
 80140e0:	4c25      	ldr	r4, [pc, #148]	; (8014178 <__pow5mult+0xa8>)
 80140e2:	3a01      	subs	r2, #1
 80140e4:	2300      	movs	r3, #0
 80140e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80140ea:	f7ff fe9b 	bl	8013e24 <__multadd>
 80140ee:	4607      	mov	r7, r0
 80140f0:	10ad      	asrs	r5, r5, #2
 80140f2:	d03d      	beq.n	8014170 <__pow5mult+0xa0>
 80140f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80140f6:	b97c      	cbnz	r4, 8014118 <__pow5mult+0x48>
 80140f8:	2010      	movs	r0, #16
 80140fa:	f7ff fe1d 	bl	8013d38 <malloc>
 80140fe:	4602      	mov	r2, r0
 8014100:	6270      	str	r0, [r6, #36]	; 0x24
 8014102:	b928      	cbnz	r0, 8014110 <__pow5mult+0x40>
 8014104:	4b1d      	ldr	r3, [pc, #116]	; (801417c <__pow5mult+0xac>)
 8014106:	481e      	ldr	r0, [pc, #120]	; (8014180 <__pow5mult+0xb0>)
 8014108:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801410c:	f000 fcce 	bl	8014aac <__assert_func>
 8014110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014114:	6004      	str	r4, [r0, #0]
 8014116:	60c4      	str	r4, [r0, #12]
 8014118:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801411c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014120:	b94c      	cbnz	r4, 8014136 <__pow5mult+0x66>
 8014122:	f240 2171 	movw	r1, #625	; 0x271
 8014126:	4630      	mov	r0, r6
 8014128:	f7ff ff16 	bl	8013f58 <__i2b>
 801412c:	2300      	movs	r3, #0
 801412e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014132:	4604      	mov	r4, r0
 8014134:	6003      	str	r3, [r0, #0]
 8014136:	f04f 0900 	mov.w	r9, #0
 801413a:	07eb      	lsls	r3, r5, #31
 801413c:	d50a      	bpl.n	8014154 <__pow5mult+0x84>
 801413e:	4639      	mov	r1, r7
 8014140:	4622      	mov	r2, r4
 8014142:	4630      	mov	r0, r6
 8014144:	f7ff ff1e 	bl	8013f84 <__multiply>
 8014148:	4639      	mov	r1, r7
 801414a:	4680      	mov	r8, r0
 801414c:	4630      	mov	r0, r6
 801414e:	f7ff fe47 	bl	8013de0 <_Bfree>
 8014152:	4647      	mov	r7, r8
 8014154:	106d      	asrs	r5, r5, #1
 8014156:	d00b      	beq.n	8014170 <__pow5mult+0xa0>
 8014158:	6820      	ldr	r0, [r4, #0]
 801415a:	b938      	cbnz	r0, 801416c <__pow5mult+0x9c>
 801415c:	4622      	mov	r2, r4
 801415e:	4621      	mov	r1, r4
 8014160:	4630      	mov	r0, r6
 8014162:	f7ff ff0f 	bl	8013f84 <__multiply>
 8014166:	6020      	str	r0, [r4, #0]
 8014168:	f8c0 9000 	str.w	r9, [r0]
 801416c:	4604      	mov	r4, r0
 801416e:	e7e4      	b.n	801413a <__pow5mult+0x6a>
 8014170:	4638      	mov	r0, r7
 8014172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014176:	bf00      	nop
 8014178:	08015958 	.word	0x08015958
 801417c:	08015781 	.word	0x08015781
 8014180:	08015808 	.word	0x08015808

08014184 <__lshift>:
 8014184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014188:	460c      	mov	r4, r1
 801418a:	6849      	ldr	r1, [r1, #4]
 801418c:	6923      	ldr	r3, [r4, #16]
 801418e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014192:	68a3      	ldr	r3, [r4, #8]
 8014194:	4607      	mov	r7, r0
 8014196:	4691      	mov	r9, r2
 8014198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801419c:	f108 0601 	add.w	r6, r8, #1
 80141a0:	42b3      	cmp	r3, r6
 80141a2:	db0b      	blt.n	80141bc <__lshift+0x38>
 80141a4:	4638      	mov	r0, r7
 80141a6:	f7ff fddb 	bl	8013d60 <_Balloc>
 80141aa:	4605      	mov	r5, r0
 80141ac:	b948      	cbnz	r0, 80141c2 <__lshift+0x3e>
 80141ae:	4602      	mov	r2, r0
 80141b0:	4b28      	ldr	r3, [pc, #160]	; (8014254 <__lshift+0xd0>)
 80141b2:	4829      	ldr	r0, [pc, #164]	; (8014258 <__lshift+0xd4>)
 80141b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80141b8:	f000 fc78 	bl	8014aac <__assert_func>
 80141bc:	3101      	adds	r1, #1
 80141be:	005b      	lsls	r3, r3, #1
 80141c0:	e7ee      	b.n	80141a0 <__lshift+0x1c>
 80141c2:	2300      	movs	r3, #0
 80141c4:	f100 0114 	add.w	r1, r0, #20
 80141c8:	f100 0210 	add.w	r2, r0, #16
 80141cc:	4618      	mov	r0, r3
 80141ce:	4553      	cmp	r3, sl
 80141d0:	db33      	blt.n	801423a <__lshift+0xb6>
 80141d2:	6920      	ldr	r0, [r4, #16]
 80141d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80141d8:	f104 0314 	add.w	r3, r4, #20
 80141dc:	f019 091f 	ands.w	r9, r9, #31
 80141e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80141e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80141e8:	d02b      	beq.n	8014242 <__lshift+0xbe>
 80141ea:	f1c9 0e20 	rsb	lr, r9, #32
 80141ee:	468a      	mov	sl, r1
 80141f0:	2200      	movs	r2, #0
 80141f2:	6818      	ldr	r0, [r3, #0]
 80141f4:	fa00 f009 	lsl.w	r0, r0, r9
 80141f8:	4302      	orrs	r2, r0
 80141fa:	f84a 2b04 	str.w	r2, [sl], #4
 80141fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014202:	459c      	cmp	ip, r3
 8014204:	fa22 f20e 	lsr.w	r2, r2, lr
 8014208:	d8f3      	bhi.n	80141f2 <__lshift+0x6e>
 801420a:	ebac 0304 	sub.w	r3, ip, r4
 801420e:	3b15      	subs	r3, #21
 8014210:	f023 0303 	bic.w	r3, r3, #3
 8014214:	3304      	adds	r3, #4
 8014216:	f104 0015 	add.w	r0, r4, #21
 801421a:	4584      	cmp	ip, r0
 801421c:	bf38      	it	cc
 801421e:	2304      	movcc	r3, #4
 8014220:	50ca      	str	r2, [r1, r3]
 8014222:	b10a      	cbz	r2, 8014228 <__lshift+0xa4>
 8014224:	f108 0602 	add.w	r6, r8, #2
 8014228:	3e01      	subs	r6, #1
 801422a:	4638      	mov	r0, r7
 801422c:	612e      	str	r6, [r5, #16]
 801422e:	4621      	mov	r1, r4
 8014230:	f7ff fdd6 	bl	8013de0 <_Bfree>
 8014234:	4628      	mov	r0, r5
 8014236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801423a:	f842 0f04 	str.w	r0, [r2, #4]!
 801423e:	3301      	adds	r3, #1
 8014240:	e7c5      	b.n	80141ce <__lshift+0x4a>
 8014242:	3904      	subs	r1, #4
 8014244:	f853 2b04 	ldr.w	r2, [r3], #4
 8014248:	f841 2f04 	str.w	r2, [r1, #4]!
 801424c:	459c      	cmp	ip, r3
 801424e:	d8f9      	bhi.n	8014244 <__lshift+0xc0>
 8014250:	e7ea      	b.n	8014228 <__lshift+0xa4>
 8014252:	bf00      	nop
 8014254:	080157f7 	.word	0x080157f7
 8014258:	08015808 	.word	0x08015808

0801425c <__mcmp>:
 801425c:	b530      	push	{r4, r5, lr}
 801425e:	6902      	ldr	r2, [r0, #16]
 8014260:	690c      	ldr	r4, [r1, #16]
 8014262:	1b12      	subs	r2, r2, r4
 8014264:	d10e      	bne.n	8014284 <__mcmp+0x28>
 8014266:	f100 0314 	add.w	r3, r0, #20
 801426a:	3114      	adds	r1, #20
 801426c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014270:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014274:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014278:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801427c:	42a5      	cmp	r5, r4
 801427e:	d003      	beq.n	8014288 <__mcmp+0x2c>
 8014280:	d305      	bcc.n	801428e <__mcmp+0x32>
 8014282:	2201      	movs	r2, #1
 8014284:	4610      	mov	r0, r2
 8014286:	bd30      	pop	{r4, r5, pc}
 8014288:	4283      	cmp	r3, r0
 801428a:	d3f3      	bcc.n	8014274 <__mcmp+0x18>
 801428c:	e7fa      	b.n	8014284 <__mcmp+0x28>
 801428e:	f04f 32ff 	mov.w	r2, #4294967295
 8014292:	e7f7      	b.n	8014284 <__mcmp+0x28>

08014294 <__mdiff>:
 8014294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014298:	460c      	mov	r4, r1
 801429a:	4606      	mov	r6, r0
 801429c:	4611      	mov	r1, r2
 801429e:	4620      	mov	r0, r4
 80142a0:	4617      	mov	r7, r2
 80142a2:	f7ff ffdb 	bl	801425c <__mcmp>
 80142a6:	1e05      	subs	r5, r0, #0
 80142a8:	d110      	bne.n	80142cc <__mdiff+0x38>
 80142aa:	4629      	mov	r1, r5
 80142ac:	4630      	mov	r0, r6
 80142ae:	f7ff fd57 	bl	8013d60 <_Balloc>
 80142b2:	b930      	cbnz	r0, 80142c2 <__mdiff+0x2e>
 80142b4:	4b39      	ldr	r3, [pc, #228]	; (801439c <__mdiff+0x108>)
 80142b6:	4602      	mov	r2, r0
 80142b8:	f240 2132 	movw	r1, #562	; 0x232
 80142bc:	4838      	ldr	r0, [pc, #224]	; (80143a0 <__mdiff+0x10c>)
 80142be:	f000 fbf5 	bl	8014aac <__assert_func>
 80142c2:	2301      	movs	r3, #1
 80142c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80142c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142cc:	bfa4      	itt	ge
 80142ce:	463b      	movge	r3, r7
 80142d0:	4627      	movge	r7, r4
 80142d2:	4630      	mov	r0, r6
 80142d4:	6879      	ldr	r1, [r7, #4]
 80142d6:	bfa6      	itte	ge
 80142d8:	461c      	movge	r4, r3
 80142da:	2500      	movge	r5, #0
 80142dc:	2501      	movlt	r5, #1
 80142de:	f7ff fd3f 	bl	8013d60 <_Balloc>
 80142e2:	b920      	cbnz	r0, 80142ee <__mdiff+0x5a>
 80142e4:	4b2d      	ldr	r3, [pc, #180]	; (801439c <__mdiff+0x108>)
 80142e6:	4602      	mov	r2, r0
 80142e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80142ec:	e7e6      	b.n	80142bc <__mdiff+0x28>
 80142ee:	693e      	ldr	r6, [r7, #16]
 80142f0:	60c5      	str	r5, [r0, #12]
 80142f2:	6925      	ldr	r5, [r4, #16]
 80142f4:	f107 0114 	add.w	r1, r7, #20
 80142f8:	f104 0914 	add.w	r9, r4, #20
 80142fc:	f100 0e14 	add.w	lr, r0, #20
 8014300:	f107 0210 	add.w	r2, r7, #16
 8014304:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014308:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801430c:	46f2      	mov	sl, lr
 801430e:	2700      	movs	r7, #0
 8014310:	f859 3b04 	ldr.w	r3, [r9], #4
 8014314:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014318:	fa1f f883 	uxth.w	r8, r3
 801431c:	fa17 f78b 	uxtah	r7, r7, fp
 8014320:	0c1b      	lsrs	r3, r3, #16
 8014322:	eba7 0808 	sub.w	r8, r7, r8
 8014326:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801432a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801432e:	fa1f f888 	uxth.w	r8, r8
 8014332:	141f      	asrs	r7, r3, #16
 8014334:	454d      	cmp	r5, r9
 8014336:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801433a:	f84a 3b04 	str.w	r3, [sl], #4
 801433e:	d8e7      	bhi.n	8014310 <__mdiff+0x7c>
 8014340:	1b2b      	subs	r3, r5, r4
 8014342:	3b15      	subs	r3, #21
 8014344:	f023 0303 	bic.w	r3, r3, #3
 8014348:	3304      	adds	r3, #4
 801434a:	3415      	adds	r4, #21
 801434c:	42a5      	cmp	r5, r4
 801434e:	bf38      	it	cc
 8014350:	2304      	movcc	r3, #4
 8014352:	4419      	add	r1, r3
 8014354:	4473      	add	r3, lr
 8014356:	469e      	mov	lr, r3
 8014358:	460d      	mov	r5, r1
 801435a:	4565      	cmp	r5, ip
 801435c:	d30e      	bcc.n	801437c <__mdiff+0xe8>
 801435e:	f10c 0203 	add.w	r2, ip, #3
 8014362:	1a52      	subs	r2, r2, r1
 8014364:	f022 0203 	bic.w	r2, r2, #3
 8014368:	3903      	subs	r1, #3
 801436a:	458c      	cmp	ip, r1
 801436c:	bf38      	it	cc
 801436e:	2200      	movcc	r2, #0
 8014370:	441a      	add	r2, r3
 8014372:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014376:	b17b      	cbz	r3, 8014398 <__mdiff+0x104>
 8014378:	6106      	str	r6, [r0, #16]
 801437a:	e7a5      	b.n	80142c8 <__mdiff+0x34>
 801437c:	f855 8b04 	ldr.w	r8, [r5], #4
 8014380:	fa17 f488 	uxtah	r4, r7, r8
 8014384:	1422      	asrs	r2, r4, #16
 8014386:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801438a:	b2a4      	uxth	r4, r4
 801438c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014390:	f84e 4b04 	str.w	r4, [lr], #4
 8014394:	1417      	asrs	r7, r2, #16
 8014396:	e7e0      	b.n	801435a <__mdiff+0xc6>
 8014398:	3e01      	subs	r6, #1
 801439a:	e7ea      	b.n	8014372 <__mdiff+0xde>
 801439c:	080157f7 	.word	0x080157f7
 80143a0:	08015808 	.word	0x08015808

080143a4 <__d2b>:
 80143a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143a8:	4689      	mov	r9, r1
 80143aa:	2101      	movs	r1, #1
 80143ac:	ec57 6b10 	vmov	r6, r7, d0
 80143b0:	4690      	mov	r8, r2
 80143b2:	f7ff fcd5 	bl	8013d60 <_Balloc>
 80143b6:	4604      	mov	r4, r0
 80143b8:	b930      	cbnz	r0, 80143c8 <__d2b+0x24>
 80143ba:	4602      	mov	r2, r0
 80143bc:	4b25      	ldr	r3, [pc, #148]	; (8014454 <__d2b+0xb0>)
 80143be:	4826      	ldr	r0, [pc, #152]	; (8014458 <__d2b+0xb4>)
 80143c0:	f240 310a 	movw	r1, #778	; 0x30a
 80143c4:	f000 fb72 	bl	8014aac <__assert_func>
 80143c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80143cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80143d0:	bb35      	cbnz	r5, 8014420 <__d2b+0x7c>
 80143d2:	2e00      	cmp	r6, #0
 80143d4:	9301      	str	r3, [sp, #4]
 80143d6:	d028      	beq.n	801442a <__d2b+0x86>
 80143d8:	4668      	mov	r0, sp
 80143da:	9600      	str	r6, [sp, #0]
 80143dc:	f7ff fd8c 	bl	8013ef8 <__lo0bits>
 80143e0:	9900      	ldr	r1, [sp, #0]
 80143e2:	b300      	cbz	r0, 8014426 <__d2b+0x82>
 80143e4:	9a01      	ldr	r2, [sp, #4]
 80143e6:	f1c0 0320 	rsb	r3, r0, #32
 80143ea:	fa02 f303 	lsl.w	r3, r2, r3
 80143ee:	430b      	orrs	r3, r1
 80143f0:	40c2      	lsrs	r2, r0
 80143f2:	6163      	str	r3, [r4, #20]
 80143f4:	9201      	str	r2, [sp, #4]
 80143f6:	9b01      	ldr	r3, [sp, #4]
 80143f8:	61a3      	str	r3, [r4, #24]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	bf14      	ite	ne
 80143fe:	2202      	movne	r2, #2
 8014400:	2201      	moveq	r2, #1
 8014402:	6122      	str	r2, [r4, #16]
 8014404:	b1d5      	cbz	r5, 801443c <__d2b+0x98>
 8014406:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801440a:	4405      	add	r5, r0
 801440c:	f8c9 5000 	str.w	r5, [r9]
 8014410:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014414:	f8c8 0000 	str.w	r0, [r8]
 8014418:	4620      	mov	r0, r4
 801441a:	b003      	add	sp, #12
 801441c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014424:	e7d5      	b.n	80143d2 <__d2b+0x2e>
 8014426:	6161      	str	r1, [r4, #20]
 8014428:	e7e5      	b.n	80143f6 <__d2b+0x52>
 801442a:	a801      	add	r0, sp, #4
 801442c:	f7ff fd64 	bl	8013ef8 <__lo0bits>
 8014430:	9b01      	ldr	r3, [sp, #4]
 8014432:	6163      	str	r3, [r4, #20]
 8014434:	2201      	movs	r2, #1
 8014436:	6122      	str	r2, [r4, #16]
 8014438:	3020      	adds	r0, #32
 801443a:	e7e3      	b.n	8014404 <__d2b+0x60>
 801443c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014440:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014444:	f8c9 0000 	str.w	r0, [r9]
 8014448:	6918      	ldr	r0, [r3, #16]
 801444a:	f7ff fd35 	bl	8013eb8 <__hi0bits>
 801444e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014452:	e7df      	b.n	8014414 <__d2b+0x70>
 8014454:	080157f7 	.word	0x080157f7
 8014458:	08015808 	.word	0x08015808

0801445c <_calloc_r>:
 801445c:	b513      	push	{r0, r1, r4, lr}
 801445e:	434a      	muls	r2, r1
 8014460:	4611      	mov	r1, r2
 8014462:	9201      	str	r2, [sp, #4]
 8014464:	f7fd fd84 	bl	8011f70 <_malloc_r>
 8014468:	4604      	mov	r4, r0
 801446a:	b118      	cbz	r0, 8014474 <_calloc_r+0x18>
 801446c:	9a01      	ldr	r2, [sp, #4]
 801446e:	2100      	movs	r1, #0
 8014470:	f7fd fd75 	bl	8011f5e <memset>
 8014474:	4620      	mov	r0, r4
 8014476:	b002      	add	sp, #8
 8014478:	bd10      	pop	{r4, pc}
	...

0801447c <_free_r>:
 801447c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801447e:	2900      	cmp	r1, #0
 8014480:	d048      	beq.n	8014514 <_free_r+0x98>
 8014482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014486:	9001      	str	r0, [sp, #4]
 8014488:	2b00      	cmp	r3, #0
 801448a:	f1a1 0404 	sub.w	r4, r1, #4
 801448e:	bfb8      	it	lt
 8014490:	18e4      	addlt	r4, r4, r3
 8014492:	f7ff fc59 	bl	8013d48 <__malloc_lock>
 8014496:	4a20      	ldr	r2, [pc, #128]	; (8014518 <_free_r+0x9c>)
 8014498:	9801      	ldr	r0, [sp, #4]
 801449a:	6813      	ldr	r3, [r2, #0]
 801449c:	4615      	mov	r5, r2
 801449e:	b933      	cbnz	r3, 80144ae <_free_r+0x32>
 80144a0:	6063      	str	r3, [r4, #4]
 80144a2:	6014      	str	r4, [r2, #0]
 80144a4:	b003      	add	sp, #12
 80144a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144aa:	f7ff bc53 	b.w	8013d54 <__malloc_unlock>
 80144ae:	42a3      	cmp	r3, r4
 80144b0:	d90b      	bls.n	80144ca <_free_r+0x4e>
 80144b2:	6821      	ldr	r1, [r4, #0]
 80144b4:	1862      	adds	r2, r4, r1
 80144b6:	4293      	cmp	r3, r2
 80144b8:	bf04      	itt	eq
 80144ba:	681a      	ldreq	r2, [r3, #0]
 80144bc:	685b      	ldreq	r3, [r3, #4]
 80144be:	6063      	str	r3, [r4, #4]
 80144c0:	bf04      	itt	eq
 80144c2:	1852      	addeq	r2, r2, r1
 80144c4:	6022      	streq	r2, [r4, #0]
 80144c6:	602c      	str	r4, [r5, #0]
 80144c8:	e7ec      	b.n	80144a4 <_free_r+0x28>
 80144ca:	461a      	mov	r2, r3
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	b10b      	cbz	r3, 80144d4 <_free_r+0x58>
 80144d0:	42a3      	cmp	r3, r4
 80144d2:	d9fa      	bls.n	80144ca <_free_r+0x4e>
 80144d4:	6811      	ldr	r1, [r2, #0]
 80144d6:	1855      	adds	r5, r2, r1
 80144d8:	42a5      	cmp	r5, r4
 80144da:	d10b      	bne.n	80144f4 <_free_r+0x78>
 80144dc:	6824      	ldr	r4, [r4, #0]
 80144de:	4421      	add	r1, r4
 80144e0:	1854      	adds	r4, r2, r1
 80144e2:	42a3      	cmp	r3, r4
 80144e4:	6011      	str	r1, [r2, #0]
 80144e6:	d1dd      	bne.n	80144a4 <_free_r+0x28>
 80144e8:	681c      	ldr	r4, [r3, #0]
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	6053      	str	r3, [r2, #4]
 80144ee:	4421      	add	r1, r4
 80144f0:	6011      	str	r1, [r2, #0]
 80144f2:	e7d7      	b.n	80144a4 <_free_r+0x28>
 80144f4:	d902      	bls.n	80144fc <_free_r+0x80>
 80144f6:	230c      	movs	r3, #12
 80144f8:	6003      	str	r3, [r0, #0]
 80144fa:	e7d3      	b.n	80144a4 <_free_r+0x28>
 80144fc:	6825      	ldr	r5, [r4, #0]
 80144fe:	1961      	adds	r1, r4, r5
 8014500:	428b      	cmp	r3, r1
 8014502:	bf04      	itt	eq
 8014504:	6819      	ldreq	r1, [r3, #0]
 8014506:	685b      	ldreq	r3, [r3, #4]
 8014508:	6063      	str	r3, [r4, #4]
 801450a:	bf04      	itt	eq
 801450c:	1949      	addeq	r1, r1, r5
 801450e:	6021      	streq	r1, [r4, #0]
 8014510:	6054      	str	r4, [r2, #4]
 8014512:	e7c7      	b.n	80144a4 <_free_r+0x28>
 8014514:	b003      	add	sp, #12
 8014516:	bd30      	pop	{r4, r5, pc}
 8014518:	20010840 	.word	0x20010840

0801451c <__ssputs_r>:
 801451c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014520:	688e      	ldr	r6, [r1, #8]
 8014522:	429e      	cmp	r6, r3
 8014524:	4682      	mov	sl, r0
 8014526:	460c      	mov	r4, r1
 8014528:	4690      	mov	r8, r2
 801452a:	461f      	mov	r7, r3
 801452c:	d838      	bhi.n	80145a0 <__ssputs_r+0x84>
 801452e:	898a      	ldrh	r2, [r1, #12]
 8014530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014534:	d032      	beq.n	801459c <__ssputs_r+0x80>
 8014536:	6825      	ldr	r5, [r4, #0]
 8014538:	6909      	ldr	r1, [r1, #16]
 801453a:	eba5 0901 	sub.w	r9, r5, r1
 801453e:	6965      	ldr	r5, [r4, #20]
 8014540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014548:	3301      	adds	r3, #1
 801454a:	444b      	add	r3, r9
 801454c:	106d      	asrs	r5, r5, #1
 801454e:	429d      	cmp	r5, r3
 8014550:	bf38      	it	cc
 8014552:	461d      	movcc	r5, r3
 8014554:	0553      	lsls	r3, r2, #21
 8014556:	d531      	bpl.n	80145bc <__ssputs_r+0xa0>
 8014558:	4629      	mov	r1, r5
 801455a:	f7fd fd09 	bl	8011f70 <_malloc_r>
 801455e:	4606      	mov	r6, r0
 8014560:	b950      	cbnz	r0, 8014578 <__ssputs_r+0x5c>
 8014562:	230c      	movs	r3, #12
 8014564:	f8ca 3000 	str.w	r3, [sl]
 8014568:	89a3      	ldrh	r3, [r4, #12]
 801456a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801456e:	81a3      	strh	r3, [r4, #12]
 8014570:	f04f 30ff 	mov.w	r0, #4294967295
 8014574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014578:	6921      	ldr	r1, [r4, #16]
 801457a:	464a      	mov	r2, r9
 801457c:	f7fd fce1 	bl	8011f42 <memcpy>
 8014580:	89a3      	ldrh	r3, [r4, #12]
 8014582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801458a:	81a3      	strh	r3, [r4, #12]
 801458c:	6126      	str	r6, [r4, #16]
 801458e:	6165      	str	r5, [r4, #20]
 8014590:	444e      	add	r6, r9
 8014592:	eba5 0509 	sub.w	r5, r5, r9
 8014596:	6026      	str	r6, [r4, #0]
 8014598:	60a5      	str	r5, [r4, #8]
 801459a:	463e      	mov	r6, r7
 801459c:	42be      	cmp	r6, r7
 801459e:	d900      	bls.n	80145a2 <__ssputs_r+0x86>
 80145a0:	463e      	mov	r6, r7
 80145a2:	4632      	mov	r2, r6
 80145a4:	6820      	ldr	r0, [r4, #0]
 80145a6:	4641      	mov	r1, r8
 80145a8:	f000 fae4 	bl	8014b74 <memmove>
 80145ac:	68a3      	ldr	r3, [r4, #8]
 80145ae:	6822      	ldr	r2, [r4, #0]
 80145b0:	1b9b      	subs	r3, r3, r6
 80145b2:	4432      	add	r2, r6
 80145b4:	60a3      	str	r3, [r4, #8]
 80145b6:	6022      	str	r2, [r4, #0]
 80145b8:	2000      	movs	r0, #0
 80145ba:	e7db      	b.n	8014574 <__ssputs_r+0x58>
 80145bc:	462a      	mov	r2, r5
 80145be:	f000 faf3 	bl	8014ba8 <_realloc_r>
 80145c2:	4606      	mov	r6, r0
 80145c4:	2800      	cmp	r0, #0
 80145c6:	d1e1      	bne.n	801458c <__ssputs_r+0x70>
 80145c8:	6921      	ldr	r1, [r4, #16]
 80145ca:	4650      	mov	r0, sl
 80145cc:	f7ff ff56 	bl	801447c <_free_r>
 80145d0:	e7c7      	b.n	8014562 <__ssputs_r+0x46>
	...

080145d4 <_svfiprintf_r>:
 80145d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d8:	4698      	mov	r8, r3
 80145da:	898b      	ldrh	r3, [r1, #12]
 80145dc:	061b      	lsls	r3, r3, #24
 80145de:	b09d      	sub	sp, #116	; 0x74
 80145e0:	4607      	mov	r7, r0
 80145e2:	460d      	mov	r5, r1
 80145e4:	4614      	mov	r4, r2
 80145e6:	d50e      	bpl.n	8014606 <_svfiprintf_r+0x32>
 80145e8:	690b      	ldr	r3, [r1, #16]
 80145ea:	b963      	cbnz	r3, 8014606 <_svfiprintf_r+0x32>
 80145ec:	2140      	movs	r1, #64	; 0x40
 80145ee:	f7fd fcbf 	bl	8011f70 <_malloc_r>
 80145f2:	6028      	str	r0, [r5, #0]
 80145f4:	6128      	str	r0, [r5, #16]
 80145f6:	b920      	cbnz	r0, 8014602 <_svfiprintf_r+0x2e>
 80145f8:	230c      	movs	r3, #12
 80145fa:	603b      	str	r3, [r7, #0]
 80145fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014600:	e0d1      	b.n	80147a6 <_svfiprintf_r+0x1d2>
 8014602:	2340      	movs	r3, #64	; 0x40
 8014604:	616b      	str	r3, [r5, #20]
 8014606:	2300      	movs	r3, #0
 8014608:	9309      	str	r3, [sp, #36]	; 0x24
 801460a:	2320      	movs	r3, #32
 801460c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014610:	f8cd 800c 	str.w	r8, [sp, #12]
 8014614:	2330      	movs	r3, #48	; 0x30
 8014616:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80147c0 <_svfiprintf_r+0x1ec>
 801461a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801461e:	f04f 0901 	mov.w	r9, #1
 8014622:	4623      	mov	r3, r4
 8014624:	469a      	mov	sl, r3
 8014626:	f813 2b01 	ldrb.w	r2, [r3], #1
 801462a:	b10a      	cbz	r2, 8014630 <_svfiprintf_r+0x5c>
 801462c:	2a25      	cmp	r2, #37	; 0x25
 801462e:	d1f9      	bne.n	8014624 <_svfiprintf_r+0x50>
 8014630:	ebba 0b04 	subs.w	fp, sl, r4
 8014634:	d00b      	beq.n	801464e <_svfiprintf_r+0x7a>
 8014636:	465b      	mov	r3, fp
 8014638:	4622      	mov	r2, r4
 801463a:	4629      	mov	r1, r5
 801463c:	4638      	mov	r0, r7
 801463e:	f7ff ff6d 	bl	801451c <__ssputs_r>
 8014642:	3001      	adds	r0, #1
 8014644:	f000 80aa 	beq.w	801479c <_svfiprintf_r+0x1c8>
 8014648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801464a:	445a      	add	r2, fp
 801464c:	9209      	str	r2, [sp, #36]	; 0x24
 801464e:	f89a 3000 	ldrb.w	r3, [sl]
 8014652:	2b00      	cmp	r3, #0
 8014654:	f000 80a2 	beq.w	801479c <_svfiprintf_r+0x1c8>
 8014658:	2300      	movs	r3, #0
 801465a:	f04f 32ff 	mov.w	r2, #4294967295
 801465e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014662:	f10a 0a01 	add.w	sl, sl, #1
 8014666:	9304      	str	r3, [sp, #16]
 8014668:	9307      	str	r3, [sp, #28]
 801466a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801466e:	931a      	str	r3, [sp, #104]	; 0x68
 8014670:	4654      	mov	r4, sl
 8014672:	2205      	movs	r2, #5
 8014674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014678:	4851      	ldr	r0, [pc, #324]	; (80147c0 <_svfiprintf_r+0x1ec>)
 801467a:	f7eb fdb1 	bl	80001e0 <memchr>
 801467e:	9a04      	ldr	r2, [sp, #16]
 8014680:	b9d8      	cbnz	r0, 80146ba <_svfiprintf_r+0xe6>
 8014682:	06d0      	lsls	r0, r2, #27
 8014684:	bf44      	itt	mi
 8014686:	2320      	movmi	r3, #32
 8014688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801468c:	0711      	lsls	r1, r2, #28
 801468e:	bf44      	itt	mi
 8014690:	232b      	movmi	r3, #43	; 0x2b
 8014692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014696:	f89a 3000 	ldrb.w	r3, [sl]
 801469a:	2b2a      	cmp	r3, #42	; 0x2a
 801469c:	d015      	beq.n	80146ca <_svfiprintf_r+0xf6>
 801469e:	9a07      	ldr	r2, [sp, #28]
 80146a0:	4654      	mov	r4, sl
 80146a2:	2000      	movs	r0, #0
 80146a4:	f04f 0c0a 	mov.w	ip, #10
 80146a8:	4621      	mov	r1, r4
 80146aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146ae:	3b30      	subs	r3, #48	; 0x30
 80146b0:	2b09      	cmp	r3, #9
 80146b2:	d94e      	bls.n	8014752 <_svfiprintf_r+0x17e>
 80146b4:	b1b0      	cbz	r0, 80146e4 <_svfiprintf_r+0x110>
 80146b6:	9207      	str	r2, [sp, #28]
 80146b8:	e014      	b.n	80146e4 <_svfiprintf_r+0x110>
 80146ba:	eba0 0308 	sub.w	r3, r0, r8
 80146be:	fa09 f303 	lsl.w	r3, r9, r3
 80146c2:	4313      	orrs	r3, r2
 80146c4:	9304      	str	r3, [sp, #16]
 80146c6:	46a2      	mov	sl, r4
 80146c8:	e7d2      	b.n	8014670 <_svfiprintf_r+0x9c>
 80146ca:	9b03      	ldr	r3, [sp, #12]
 80146cc:	1d19      	adds	r1, r3, #4
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	9103      	str	r1, [sp, #12]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	bfbb      	ittet	lt
 80146d6:	425b      	neglt	r3, r3
 80146d8:	f042 0202 	orrlt.w	r2, r2, #2
 80146dc:	9307      	strge	r3, [sp, #28]
 80146de:	9307      	strlt	r3, [sp, #28]
 80146e0:	bfb8      	it	lt
 80146e2:	9204      	strlt	r2, [sp, #16]
 80146e4:	7823      	ldrb	r3, [r4, #0]
 80146e6:	2b2e      	cmp	r3, #46	; 0x2e
 80146e8:	d10c      	bne.n	8014704 <_svfiprintf_r+0x130>
 80146ea:	7863      	ldrb	r3, [r4, #1]
 80146ec:	2b2a      	cmp	r3, #42	; 0x2a
 80146ee:	d135      	bne.n	801475c <_svfiprintf_r+0x188>
 80146f0:	9b03      	ldr	r3, [sp, #12]
 80146f2:	1d1a      	adds	r2, r3, #4
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	9203      	str	r2, [sp, #12]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	bfb8      	it	lt
 80146fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8014700:	3402      	adds	r4, #2
 8014702:	9305      	str	r3, [sp, #20]
 8014704:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80147d0 <_svfiprintf_r+0x1fc>
 8014708:	7821      	ldrb	r1, [r4, #0]
 801470a:	2203      	movs	r2, #3
 801470c:	4650      	mov	r0, sl
 801470e:	f7eb fd67 	bl	80001e0 <memchr>
 8014712:	b140      	cbz	r0, 8014726 <_svfiprintf_r+0x152>
 8014714:	2340      	movs	r3, #64	; 0x40
 8014716:	eba0 000a 	sub.w	r0, r0, sl
 801471a:	fa03 f000 	lsl.w	r0, r3, r0
 801471e:	9b04      	ldr	r3, [sp, #16]
 8014720:	4303      	orrs	r3, r0
 8014722:	3401      	adds	r4, #1
 8014724:	9304      	str	r3, [sp, #16]
 8014726:	f814 1b01 	ldrb.w	r1, [r4], #1
 801472a:	4826      	ldr	r0, [pc, #152]	; (80147c4 <_svfiprintf_r+0x1f0>)
 801472c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014730:	2206      	movs	r2, #6
 8014732:	f7eb fd55 	bl	80001e0 <memchr>
 8014736:	2800      	cmp	r0, #0
 8014738:	d038      	beq.n	80147ac <_svfiprintf_r+0x1d8>
 801473a:	4b23      	ldr	r3, [pc, #140]	; (80147c8 <_svfiprintf_r+0x1f4>)
 801473c:	bb1b      	cbnz	r3, 8014786 <_svfiprintf_r+0x1b2>
 801473e:	9b03      	ldr	r3, [sp, #12]
 8014740:	3307      	adds	r3, #7
 8014742:	f023 0307 	bic.w	r3, r3, #7
 8014746:	3308      	adds	r3, #8
 8014748:	9303      	str	r3, [sp, #12]
 801474a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801474c:	4433      	add	r3, r6
 801474e:	9309      	str	r3, [sp, #36]	; 0x24
 8014750:	e767      	b.n	8014622 <_svfiprintf_r+0x4e>
 8014752:	fb0c 3202 	mla	r2, ip, r2, r3
 8014756:	460c      	mov	r4, r1
 8014758:	2001      	movs	r0, #1
 801475a:	e7a5      	b.n	80146a8 <_svfiprintf_r+0xd4>
 801475c:	2300      	movs	r3, #0
 801475e:	3401      	adds	r4, #1
 8014760:	9305      	str	r3, [sp, #20]
 8014762:	4619      	mov	r1, r3
 8014764:	f04f 0c0a 	mov.w	ip, #10
 8014768:	4620      	mov	r0, r4
 801476a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801476e:	3a30      	subs	r2, #48	; 0x30
 8014770:	2a09      	cmp	r2, #9
 8014772:	d903      	bls.n	801477c <_svfiprintf_r+0x1a8>
 8014774:	2b00      	cmp	r3, #0
 8014776:	d0c5      	beq.n	8014704 <_svfiprintf_r+0x130>
 8014778:	9105      	str	r1, [sp, #20]
 801477a:	e7c3      	b.n	8014704 <_svfiprintf_r+0x130>
 801477c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014780:	4604      	mov	r4, r0
 8014782:	2301      	movs	r3, #1
 8014784:	e7f0      	b.n	8014768 <_svfiprintf_r+0x194>
 8014786:	ab03      	add	r3, sp, #12
 8014788:	9300      	str	r3, [sp, #0]
 801478a:	462a      	mov	r2, r5
 801478c:	4b0f      	ldr	r3, [pc, #60]	; (80147cc <_svfiprintf_r+0x1f8>)
 801478e:	a904      	add	r1, sp, #16
 8014790:	4638      	mov	r0, r7
 8014792:	f7fd fce7 	bl	8012164 <_printf_float>
 8014796:	1c42      	adds	r2, r0, #1
 8014798:	4606      	mov	r6, r0
 801479a:	d1d6      	bne.n	801474a <_svfiprintf_r+0x176>
 801479c:	89ab      	ldrh	r3, [r5, #12]
 801479e:	065b      	lsls	r3, r3, #25
 80147a0:	f53f af2c 	bmi.w	80145fc <_svfiprintf_r+0x28>
 80147a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80147a6:	b01d      	add	sp, #116	; 0x74
 80147a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ac:	ab03      	add	r3, sp, #12
 80147ae:	9300      	str	r3, [sp, #0]
 80147b0:	462a      	mov	r2, r5
 80147b2:	4b06      	ldr	r3, [pc, #24]	; (80147cc <_svfiprintf_r+0x1f8>)
 80147b4:	a904      	add	r1, sp, #16
 80147b6:	4638      	mov	r0, r7
 80147b8:	f7fd ff78 	bl	80126ac <_printf_i>
 80147bc:	e7eb      	b.n	8014796 <_svfiprintf_r+0x1c2>
 80147be:	bf00      	nop
 80147c0:	08015964 	.word	0x08015964
 80147c4:	0801596e 	.word	0x0801596e
 80147c8:	08012165 	.word	0x08012165
 80147cc:	0801451d 	.word	0x0801451d
 80147d0:	0801596a 	.word	0x0801596a

080147d4 <__sfputc_r>:
 80147d4:	6893      	ldr	r3, [r2, #8]
 80147d6:	3b01      	subs	r3, #1
 80147d8:	2b00      	cmp	r3, #0
 80147da:	b410      	push	{r4}
 80147dc:	6093      	str	r3, [r2, #8]
 80147de:	da08      	bge.n	80147f2 <__sfputc_r+0x1e>
 80147e0:	6994      	ldr	r4, [r2, #24]
 80147e2:	42a3      	cmp	r3, r4
 80147e4:	db01      	blt.n	80147ea <__sfputc_r+0x16>
 80147e6:	290a      	cmp	r1, #10
 80147e8:	d103      	bne.n	80147f2 <__sfputc_r+0x1e>
 80147ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147ee:	f7fe ba0b 	b.w	8012c08 <__swbuf_r>
 80147f2:	6813      	ldr	r3, [r2, #0]
 80147f4:	1c58      	adds	r0, r3, #1
 80147f6:	6010      	str	r0, [r2, #0]
 80147f8:	7019      	strb	r1, [r3, #0]
 80147fa:	4608      	mov	r0, r1
 80147fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014800:	4770      	bx	lr

08014802 <__sfputs_r>:
 8014802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014804:	4606      	mov	r6, r0
 8014806:	460f      	mov	r7, r1
 8014808:	4614      	mov	r4, r2
 801480a:	18d5      	adds	r5, r2, r3
 801480c:	42ac      	cmp	r4, r5
 801480e:	d101      	bne.n	8014814 <__sfputs_r+0x12>
 8014810:	2000      	movs	r0, #0
 8014812:	e007      	b.n	8014824 <__sfputs_r+0x22>
 8014814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014818:	463a      	mov	r2, r7
 801481a:	4630      	mov	r0, r6
 801481c:	f7ff ffda 	bl	80147d4 <__sfputc_r>
 8014820:	1c43      	adds	r3, r0, #1
 8014822:	d1f3      	bne.n	801480c <__sfputs_r+0xa>
 8014824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014828 <_vfiprintf_r>:
 8014828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801482c:	460d      	mov	r5, r1
 801482e:	b09d      	sub	sp, #116	; 0x74
 8014830:	4614      	mov	r4, r2
 8014832:	4698      	mov	r8, r3
 8014834:	4606      	mov	r6, r0
 8014836:	b118      	cbz	r0, 8014840 <_vfiprintf_r+0x18>
 8014838:	6983      	ldr	r3, [r0, #24]
 801483a:	b90b      	cbnz	r3, 8014840 <_vfiprintf_r+0x18>
 801483c:	f7fd fabc 	bl	8011db8 <__sinit>
 8014840:	4b89      	ldr	r3, [pc, #548]	; (8014a68 <_vfiprintf_r+0x240>)
 8014842:	429d      	cmp	r5, r3
 8014844:	d11b      	bne.n	801487e <_vfiprintf_r+0x56>
 8014846:	6875      	ldr	r5, [r6, #4]
 8014848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801484a:	07d9      	lsls	r1, r3, #31
 801484c:	d405      	bmi.n	801485a <_vfiprintf_r+0x32>
 801484e:	89ab      	ldrh	r3, [r5, #12]
 8014850:	059a      	lsls	r2, r3, #22
 8014852:	d402      	bmi.n	801485a <_vfiprintf_r+0x32>
 8014854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014856:	f7fd fb72 	bl	8011f3e <__retarget_lock_acquire_recursive>
 801485a:	89ab      	ldrh	r3, [r5, #12]
 801485c:	071b      	lsls	r3, r3, #28
 801485e:	d501      	bpl.n	8014864 <_vfiprintf_r+0x3c>
 8014860:	692b      	ldr	r3, [r5, #16]
 8014862:	b9eb      	cbnz	r3, 80148a0 <_vfiprintf_r+0x78>
 8014864:	4629      	mov	r1, r5
 8014866:	4630      	mov	r0, r6
 8014868:	f7fe fa32 	bl	8012cd0 <__swsetup_r>
 801486c:	b1c0      	cbz	r0, 80148a0 <_vfiprintf_r+0x78>
 801486e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014870:	07dc      	lsls	r4, r3, #31
 8014872:	d50e      	bpl.n	8014892 <_vfiprintf_r+0x6a>
 8014874:	f04f 30ff 	mov.w	r0, #4294967295
 8014878:	b01d      	add	sp, #116	; 0x74
 801487a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801487e:	4b7b      	ldr	r3, [pc, #492]	; (8014a6c <_vfiprintf_r+0x244>)
 8014880:	429d      	cmp	r5, r3
 8014882:	d101      	bne.n	8014888 <_vfiprintf_r+0x60>
 8014884:	68b5      	ldr	r5, [r6, #8]
 8014886:	e7df      	b.n	8014848 <_vfiprintf_r+0x20>
 8014888:	4b79      	ldr	r3, [pc, #484]	; (8014a70 <_vfiprintf_r+0x248>)
 801488a:	429d      	cmp	r5, r3
 801488c:	bf08      	it	eq
 801488e:	68f5      	ldreq	r5, [r6, #12]
 8014890:	e7da      	b.n	8014848 <_vfiprintf_r+0x20>
 8014892:	89ab      	ldrh	r3, [r5, #12]
 8014894:	0598      	lsls	r0, r3, #22
 8014896:	d4ed      	bmi.n	8014874 <_vfiprintf_r+0x4c>
 8014898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801489a:	f7fd fb51 	bl	8011f40 <__retarget_lock_release_recursive>
 801489e:	e7e9      	b.n	8014874 <_vfiprintf_r+0x4c>
 80148a0:	2300      	movs	r3, #0
 80148a2:	9309      	str	r3, [sp, #36]	; 0x24
 80148a4:	2320      	movs	r3, #32
 80148a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80148ae:	2330      	movs	r3, #48	; 0x30
 80148b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014a74 <_vfiprintf_r+0x24c>
 80148b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148b8:	f04f 0901 	mov.w	r9, #1
 80148bc:	4623      	mov	r3, r4
 80148be:	469a      	mov	sl, r3
 80148c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148c4:	b10a      	cbz	r2, 80148ca <_vfiprintf_r+0xa2>
 80148c6:	2a25      	cmp	r2, #37	; 0x25
 80148c8:	d1f9      	bne.n	80148be <_vfiprintf_r+0x96>
 80148ca:	ebba 0b04 	subs.w	fp, sl, r4
 80148ce:	d00b      	beq.n	80148e8 <_vfiprintf_r+0xc0>
 80148d0:	465b      	mov	r3, fp
 80148d2:	4622      	mov	r2, r4
 80148d4:	4629      	mov	r1, r5
 80148d6:	4630      	mov	r0, r6
 80148d8:	f7ff ff93 	bl	8014802 <__sfputs_r>
 80148dc:	3001      	adds	r0, #1
 80148de:	f000 80aa 	beq.w	8014a36 <_vfiprintf_r+0x20e>
 80148e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148e4:	445a      	add	r2, fp
 80148e6:	9209      	str	r2, [sp, #36]	; 0x24
 80148e8:	f89a 3000 	ldrb.w	r3, [sl]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	f000 80a2 	beq.w	8014a36 <_vfiprintf_r+0x20e>
 80148f2:	2300      	movs	r3, #0
 80148f4:	f04f 32ff 	mov.w	r2, #4294967295
 80148f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148fc:	f10a 0a01 	add.w	sl, sl, #1
 8014900:	9304      	str	r3, [sp, #16]
 8014902:	9307      	str	r3, [sp, #28]
 8014904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014908:	931a      	str	r3, [sp, #104]	; 0x68
 801490a:	4654      	mov	r4, sl
 801490c:	2205      	movs	r2, #5
 801490e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014912:	4858      	ldr	r0, [pc, #352]	; (8014a74 <_vfiprintf_r+0x24c>)
 8014914:	f7eb fc64 	bl	80001e0 <memchr>
 8014918:	9a04      	ldr	r2, [sp, #16]
 801491a:	b9d8      	cbnz	r0, 8014954 <_vfiprintf_r+0x12c>
 801491c:	06d1      	lsls	r1, r2, #27
 801491e:	bf44      	itt	mi
 8014920:	2320      	movmi	r3, #32
 8014922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014926:	0713      	lsls	r3, r2, #28
 8014928:	bf44      	itt	mi
 801492a:	232b      	movmi	r3, #43	; 0x2b
 801492c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014930:	f89a 3000 	ldrb.w	r3, [sl]
 8014934:	2b2a      	cmp	r3, #42	; 0x2a
 8014936:	d015      	beq.n	8014964 <_vfiprintf_r+0x13c>
 8014938:	9a07      	ldr	r2, [sp, #28]
 801493a:	4654      	mov	r4, sl
 801493c:	2000      	movs	r0, #0
 801493e:	f04f 0c0a 	mov.w	ip, #10
 8014942:	4621      	mov	r1, r4
 8014944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014948:	3b30      	subs	r3, #48	; 0x30
 801494a:	2b09      	cmp	r3, #9
 801494c:	d94e      	bls.n	80149ec <_vfiprintf_r+0x1c4>
 801494e:	b1b0      	cbz	r0, 801497e <_vfiprintf_r+0x156>
 8014950:	9207      	str	r2, [sp, #28]
 8014952:	e014      	b.n	801497e <_vfiprintf_r+0x156>
 8014954:	eba0 0308 	sub.w	r3, r0, r8
 8014958:	fa09 f303 	lsl.w	r3, r9, r3
 801495c:	4313      	orrs	r3, r2
 801495e:	9304      	str	r3, [sp, #16]
 8014960:	46a2      	mov	sl, r4
 8014962:	e7d2      	b.n	801490a <_vfiprintf_r+0xe2>
 8014964:	9b03      	ldr	r3, [sp, #12]
 8014966:	1d19      	adds	r1, r3, #4
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	9103      	str	r1, [sp, #12]
 801496c:	2b00      	cmp	r3, #0
 801496e:	bfbb      	ittet	lt
 8014970:	425b      	neglt	r3, r3
 8014972:	f042 0202 	orrlt.w	r2, r2, #2
 8014976:	9307      	strge	r3, [sp, #28]
 8014978:	9307      	strlt	r3, [sp, #28]
 801497a:	bfb8      	it	lt
 801497c:	9204      	strlt	r2, [sp, #16]
 801497e:	7823      	ldrb	r3, [r4, #0]
 8014980:	2b2e      	cmp	r3, #46	; 0x2e
 8014982:	d10c      	bne.n	801499e <_vfiprintf_r+0x176>
 8014984:	7863      	ldrb	r3, [r4, #1]
 8014986:	2b2a      	cmp	r3, #42	; 0x2a
 8014988:	d135      	bne.n	80149f6 <_vfiprintf_r+0x1ce>
 801498a:	9b03      	ldr	r3, [sp, #12]
 801498c:	1d1a      	adds	r2, r3, #4
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	9203      	str	r2, [sp, #12]
 8014992:	2b00      	cmp	r3, #0
 8014994:	bfb8      	it	lt
 8014996:	f04f 33ff 	movlt.w	r3, #4294967295
 801499a:	3402      	adds	r4, #2
 801499c:	9305      	str	r3, [sp, #20]
 801499e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014a84 <_vfiprintf_r+0x25c>
 80149a2:	7821      	ldrb	r1, [r4, #0]
 80149a4:	2203      	movs	r2, #3
 80149a6:	4650      	mov	r0, sl
 80149a8:	f7eb fc1a 	bl	80001e0 <memchr>
 80149ac:	b140      	cbz	r0, 80149c0 <_vfiprintf_r+0x198>
 80149ae:	2340      	movs	r3, #64	; 0x40
 80149b0:	eba0 000a 	sub.w	r0, r0, sl
 80149b4:	fa03 f000 	lsl.w	r0, r3, r0
 80149b8:	9b04      	ldr	r3, [sp, #16]
 80149ba:	4303      	orrs	r3, r0
 80149bc:	3401      	adds	r4, #1
 80149be:	9304      	str	r3, [sp, #16]
 80149c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149c4:	482c      	ldr	r0, [pc, #176]	; (8014a78 <_vfiprintf_r+0x250>)
 80149c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80149ca:	2206      	movs	r2, #6
 80149cc:	f7eb fc08 	bl	80001e0 <memchr>
 80149d0:	2800      	cmp	r0, #0
 80149d2:	d03f      	beq.n	8014a54 <_vfiprintf_r+0x22c>
 80149d4:	4b29      	ldr	r3, [pc, #164]	; (8014a7c <_vfiprintf_r+0x254>)
 80149d6:	bb1b      	cbnz	r3, 8014a20 <_vfiprintf_r+0x1f8>
 80149d8:	9b03      	ldr	r3, [sp, #12]
 80149da:	3307      	adds	r3, #7
 80149dc:	f023 0307 	bic.w	r3, r3, #7
 80149e0:	3308      	adds	r3, #8
 80149e2:	9303      	str	r3, [sp, #12]
 80149e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149e6:	443b      	add	r3, r7
 80149e8:	9309      	str	r3, [sp, #36]	; 0x24
 80149ea:	e767      	b.n	80148bc <_vfiprintf_r+0x94>
 80149ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80149f0:	460c      	mov	r4, r1
 80149f2:	2001      	movs	r0, #1
 80149f4:	e7a5      	b.n	8014942 <_vfiprintf_r+0x11a>
 80149f6:	2300      	movs	r3, #0
 80149f8:	3401      	adds	r4, #1
 80149fa:	9305      	str	r3, [sp, #20]
 80149fc:	4619      	mov	r1, r3
 80149fe:	f04f 0c0a 	mov.w	ip, #10
 8014a02:	4620      	mov	r0, r4
 8014a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a08:	3a30      	subs	r2, #48	; 0x30
 8014a0a:	2a09      	cmp	r2, #9
 8014a0c:	d903      	bls.n	8014a16 <_vfiprintf_r+0x1ee>
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d0c5      	beq.n	801499e <_vfiprintf_r+0x176>
 8014a12:	9105      	str	r1, [sp, #20]
 8014a14:	e7c3      	b.n	801499e <_vfiprintf_r+0x176>
 8014a16:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a1a:	4604      	mov	r4, r0
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	e7f0      	b.n	8014a02 <_vfiprintf_r+0x1da>
 8014a20:	ab03      	add	r3, sp, #12
 8014a22:	9300      	str	r3, [sp, #0]
 8014a24:	462a      	mov	r2, r5
 8014a26:	4b16      	ldr	r3, [pc, #88]	; (8014a80 <_vfiprintf_r+0x258>)
 8014a28:	a904      	add	r1, sp, #16
 8014a2a:	4630      	mov	r0, r6
 8014a2c:	f7fd fb9a 	bl	8012164 <_printf_float>
 8014a30:	4607      	mov	r7, r0
 8014a32:	1c78      	adds	r0, r7, #1
 8014a34:	d1d6      	bne.n	80149e4 <_vfiprintf_r+0x1bc>
 8014a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a38:	07d9      	lsls	r1, r3, #31
 8014a3a:	d405      	bmi.n	8014a48 <_vfiprintf_r+0x220>
 8014a3c:	89ab      	ldrh	r3, [r5, #12]
 8014a3e:	059a      	lsls	r2, r3, #22
 8014a40:	d402      	bmi.n	8014a48 <_vfiprintf_r+0x220>
 8014a42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a44:	f7fd fa7c 	bl	8011f40 <__retarget_lock_release_recursive>
 8014a48:	89ab      	ldrh	r3, [r5, #12]
 8014a4a:	065b      	lsls	r3, r3, #25
 8014a4c:	f53f af12 	bmi.w	8014874 <_vfiprintf_r+0x4c>
 8014a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a52:	e711      	b.n	8014878 <_vfiprintf_r+0x50>
 8014a54:	ab03      	add	r3, sp, #12
 8014a56:	9300      	str	r3, [sp, #0]
 8014a58:	462a      	mov	r2, r5
 8014a5a:	4b09      	ldr	r3, [pc, #36]	; (8014a80 <_vfiprintf_r+0x258>)
 8014a5c:	a904      	add	r1, sp, #16
 8014a5e:	4630      	mov	r0, r6
 8014a60:	f7fd fe24 	bl	80126ac <_printf_i>
 8014a64:	e7e4      	b.n	8014a30 <_vfiprintf_r+0x208>
 8014a66:	bf00      	nop
 8014a68:	080156fc 	.word	0x080156fc
 8014a6c:	0801571c 	.word	0x0801571c
 8014a70:	080156dc 	.word	0x080156dc
 8014a74:	08015964 	.word	0x08015964
 8014a78:	0801596e 	.word	0x0801596e
 8014a7c:	08012165 	.word	0x08012165
 8014a80:	08014803 	.word	0x08014803
 8014a84:	0801596a 	.word	0x0801596a

08014a88 <_read_r>:
 8014a88:	b538      	push	{r3, r4, r5, lr}
 8014a8a:	4d07      	ldr	r5, [pc, #28]	; (8014aa8 <_read_r+0x20>)
 8014a8c:	4604      	mov	r4, r0
 8014a8e:	4608      	mov	r0, r1
 8014a90:	4611      	mov	r1, r2
 8014a92:	2200      	movs	r2, #0
 8014a94:	602a      	str	r2, [r5, #0]
 8014a96:	461a      	mov	r2, r3
 8014a98:	f7ed fbbc 	bl	8002214 <_read>
 8014a9c:	1c43      	adds	r3, r0, #1
 8014a9e:	d102      	bne.n	8014aa6 <_read_r+0x1e>
 8014aa0:	682b      	ldr	r3, [r5, #0]
 8014aa2:	b103      	cbz	r3, 8014aa6 <_read_r+0x1e>
 8014aa4:	6023      	str	r3, [r4, #0]
 8014aa6:	bd38      	pop	{r3, r4, r5, pc}
 8014aa8:	20011034 	.word	0x20011034

08014aac <__assert_func>:
 8014aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014aae:	4614      	mov	r4, r2
 8014ab0:	461a      	mov	r2, r3
 8014ab2:	4b09      	ldr	r3, [pc, #36]	; (8014ad8 <__assert_func+0x2c>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	4605      	mov	r5, r0
 8014ab8:	68d8      	ldr	r0, [r3, #12]
 8014aba:	b14c      	cbz	r4, 8014ad0 <__assert_func+0x24>
 8014abc:	4b07      	ldr	r3, [pc, #28]	; (8014adc <__assert_func+0x30>)
 8014abe:	9100      	str	r1, [sp, #0]
 8014ac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014ac4:	4906      	ldr	r1, [pc, #24]	; (8014ae0 <__assert_func+0x34>)
 8014ac6:	462b      	mov	r3, r5
 8014ac8:	f000 f80e 	bl	8014ae8 <fiprintf>
 8014acc:	f000 f89f 	bl	8014c0e <abort>
 8014ad0:	4b04      	ldr	r3, [pc, #16]	; (8014ae4 <__assert_func+0x38>)
 8014ad2:	461c      	mov	r4, r3
 8014ad4:	e7f3      	b.n	8014abe <__assert_func+0x12>
 8014ad6:	bf00      	nop
 8014ad8:	20000594 	.word	0x20000594
 8014adc:	08015975 	.word	0x08015975
 8014ae0:	08015982 	.word	0x08015982
 8014ae4:	080159b0 	.word	0x080159b0

08014ae8 <fiprintf>:
 8014ae8:	b40e      	push	{r1, r2, r3}
 8014aea:	b503      	push	{r0, r1, lr}
 8014aec:	4601      	mov	r1, r0
 8014aee:	ab03      	add	r3, sp, #12
 8014af0:	4805      	ldr	r0, [pc, #20]	; (8014b08 <fiprintf+0x20>)
 8014af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014af6:	6800      	ldr	r0, [r0, #0]
 8014af8:	9301      	str	r3, [sp, #4]
 8014afa:	f7ff fe95 	bl	8014828 <_vfiprintf_r>
 8014afe:	b002      	add	sp, #8
 8014b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b04:	b003      	add	sp, #12
 8014b06:	4770      	bx	lr
 8014b08:	20000594 	.word	0x20000594

08014b0c <_fstat_r>:
 8014b0c:	b538      	push	{r3, r4, r5, lr}
 8014b0e:	4d07      	ldr	r5, [pc, #28]	; (8014b2c <_fstat_r+0x20>)
 8014b10:	2300      	movs	r3, #0
 8014b12:	4604      	mov	r4, r0
 8014b14:	4608      	mov	r0, r1
 8014b16:	4611      	mov	r1, r2
 8014b18:	602b      	str	r3, [r5, #0]
 8014b1a:	f7ed fba4 	bl	8002266 <_fstat>
 8014b1e:	1c43      	adds	r3, r0, #1
 8014b20:	d102      	bne.n	8014b28 <_fstat_r+0x1c>
 8014b22:	682b      	ldr	r3, [r5, #0]
 8014b24:	b103      	cbz	r3, 8014b28 <_fstat_r+0x1c>
 8014b26:	6023      	str	r3, [r4, #0]
 8014b28:	bd38      	pop	{r3, r4, r5, pc}
 8014b2a:	bf00      	nop
 8014b2c:	20011034 	.word	0x20011034

08014b30 <_isatty_r>:
 8014b30:	b538      	push	{r3, r4, r5, lr}
 8014b32:	4d06      	ldr	r5, [pc, #24]	; (8014b4c <_isatty_r+0x1c>)
 8014b34:	2300      	movs	r3, #0
 8014b36:	4604      	mov	r4, r0
 8014b38:	4608      	mov	r0, r1
 8014b3a:	602b      	str	r3, [r5, #0]
 8014b3c:	f7ed fba3 	bl	8002286 <_isatty>
 8014b40:	1c43      	adds	r3, r0, #1
 8014b42:	d102      	bne.n	8014b4a <_isatty_r+0x1a>
 8014b44:	682b      	ldr	r3, [r5, #0]
 8014b46:	b103      	cbz	r3, 8014b4a <_isatty_r+0x1a>
 8014b48:	6023      	str	r3, [r4, #0]
 8014b4a:	bd38      	pop	{r3, r4, r5, pc}
 8014b4c:	20011034 	.word	0x20011034

08014b50 <__ascii_mbtowc>:
 8014b50:	b082      	sub	sp, #8
 8014b52:	b901      	cbnz	r1, 8014b56 <__ascii_mbtowc+0x6>
 8014b54:	a901      	add	r1, sp, #4
 8014b56:	b142      	cbz	r2, 8014b6a <__ascii_mbtowc+0x1a>
 8014b58:	b14b      	cbz	r3, 8014b6e <__ascii_mbtowc+0x1e>
 8014b5a:	7813      	ldrb	r3, [r2, #0]
 8014b5c:	600b      	str	r3, [r1, #0]
 8014b5e:	7812      	ldrb	r2, [r2, #0]
 8014b60:	1e10      	subs	r0, r2, #0
 8014b62:	bf18      	it	ne
 8014b64:	2001      	movne	r0, #1
 8014b66:	b002      	add	sp, #8
 8014b68:	4770      	bx	lr
 8014b6a:	4610      	mov	r0, r2
 8014b6c:	e7fb      	b.n	8014b66 <__ascii_mbtowc+0x16>
 8014b6e:	f06f 0001 	mvn.w	r0, #1
 8014b72:	e7f8      	b.n	8014b66 <__ascii_mbtowc+0x16>

08014b74 <memmove>:
 8014b74:	4288      	cmp	r0, r1
 8014b76:	b510      	push	{r4, lr}
 8014b78:	eb01 0402 	add.w	r4, r1, r2
 8014b7c:	d902      	bls.n	8014b84 <memmove+0x10>
 8014b7e:	4284      	cmp	r4, r0
 8014b80:	4623      	mov	r3, r4
 8014b82:	d807      	bhi.n	8014b94 <memmove+0x20>
 8014b84:	1e43      	subs	r3, r0, #1
 8014b86:	42a1      	cmp	r1, r4
 8014b88:	d008      	beq.n	8014b9c <memmove+0x28>
 8014b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b92:	e7f8      	b.n	8014b86 <memmove+0x12>
 8014b94:	4402      	add	r2, r0
 8014b96:	4601      	mov	r1, r0
 8014b98:	428a      	cmp	r2, r1
 8014b9a:	d100      	bne.n	8014b9e <memmove+0x2a>
 8014b9c:	bd10      	pop	{r4, pc}
 8014b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ba6:	e7f7      	b.n	8014b98 <memmove+0x24>

08014ba8 <_realloc_r>:
 8014ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014baa:	4607      	mov	r7, r0
 8014bac:	4614      	mov	r4, r2
 8014bae:	460e      	mov	r6, r1
 8014bb0:	b921      	cbnz	r1, 8014bbc <_realloc_r+0x14>
 8014bb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014bb6:	4611      	mov	r1, r2
 8014bb8:	f7fd b9da 	b.w	8011f70 <_malloc_r>
 8014bbc:	b922      	cbnz	r2, 8014bc8 <_realloc_r+0x20>
 8014bbe:	f7ff fc5d 	bl	801447c <_free_r>
 8014bc2:	4625      	mov	r5, r4
 8014bc4:	4628      	mov	r0, r5
 8014bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bc8:	f000 f828 	bl	8014c1c <_malloc_usable_size_r>
 8014bcc:	42a0      	cmp	r0, r4
 8014bce:	d20f      	bcs.n	8014bf0 <_realloc_r+0x48>
 8014bd0:	4621      	mov	r1, r4
 8014bd2:	4638      	mov	r0, r7
 8014bd4:	f7fd f9cc 	bl	8011f70 <_malloc_r>
 8014bd8:	4605      	mov	r5, r0
 8014bda:	2800      	cmp	r0, #0
 8014bdc:	d0f2      	beq.n	8014bc4 <_realloc_r+0x1c>
 8014bde:	4631      	mov	r1, r6
 8014be0:	4622      	mov	r2, r4
 8014be2:	f7fd f9ae 	bl	8011f42 <memcpy>
 8014be6:	4631      	mov	r1, r6
 8014be8:	4638      	mov	r0, r7
 8014bea:	f7ff fc47 	bl	801447c <_free_r>
 8014bee:	e7e9      	b.n	8014bc4 <_realloc_r+0x1c>
 8014bf0:	4635      	mov	r5, r6
 8014bf2:	e7e7      	b.n	8014bc4 <_realloc_r+0x1c>

08014bf4 <__ascii_wctomb>:
 8014bf4:	b149      	cbz	r1, 8014c0a <__ascii_wctomb+0x16>
 8014bf6:	2aff      	cmp	r2, #255	; 0xff
 8014bf8:	bf85      	ittet	hi
 8014bfa:	238a      	movhi	r3, #138	; 0x8a
 8014bfc:	6003      	strhi	r3, [r0, #0]
 8014bfe:	700a      	strbls	r2, [r1, #0]
 8014c00:	f04f 30ff 	movhi.w	r0, #4294967295
 8014c04:	bf98      	it	ls
 8014c06:	2001      	movls	r0, #1
 8014c08:	4770      	bx	lr
 8014c0a:	4608      	mov	r0, r1
 8014c0c:	4770      	bx	lr

08014c0e <abort>:
 8014c0e:	b508      	push	{r3, lr}
 8014c10:	2006      	movs	r0, #6
 8014c12:	f000 f833 	bl	8014c7c <raise>
 8014c16:	2001      	movs	r0, #1
 8014c18:	f7ed faf2 	bl	8002200 <_exit>

08014c1c <_malloc_usable_size_r>:
 8014c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c20:	1f18      	subs	r0, r3, #4
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	bfbc      	itt	lt
 8014c26:	580b      	ldrlt	r3, [r1, r0]
 8014c28:	18c0      	addlt	r0, r0, r3
 8014c2a:	4770      	bx	lr

08014c2c <_raise_r>:
 8014c2c:	291f      	cmp	r1, #31
 8014c2e:	b538      	push	{r3, r4, r5, lr}
 8014c30:	4604      	mov	r4, r0
 8014c32:	460d      	mov	r5, r1
 8014c34:	d904      	bls.n	8014c40 <_raise_r+0x14>
 8014c36:	2316      	movs	r3, #22
 8014c38:	6003      	str	r3, [r0, #0]
 8014c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c3e:	bd38      	pop	{r3, r4, r5, pc}
 8014c40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014c42:	b112      	cbz	r2, 8014c4a <_raise_r+0x1e>
 8014c44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c48:	b94b      	cbnz	r3, 8014c5e <_raise_r+0x32>
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	f000 f830 	bl	8014cb0 <_getpid_r>
 8014c50:	462a      	mov	r2, r5
 8014c52:	4601      	mov	r1, r0
 8014c54:	4620      	mov	r0, r4
 8014c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c5a:	f000 b817 	b.w	8014c8c <_kill_r>
 8014c5e:	2b01      	cmp	r3, #1
 8014c60:	d00a      	beq.n	8014c78 <_raise_r+0x4c>
 8014c62:	1c59      	adds	r1, r3, #1
 8014c64:	d103      	bne.n	8014c6e <_raise_r+0x42>
 8014c66:	2316      	movs	r3, #22
 8014c68:	6003      	str	r3, [r0, #0]
 8014c6a:	2001      	movs	r0, #1
 8014c6c:	e7e7      	b.n	8014c3e <_raise_r+0x12>
 8014c6e:	2400      	movs	r4, #0
 8014c70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014c74:	4628      	mov	r0, r5
 8014c76:	4798      	blx	r3
 8014c78:	2000      	movs	r0, #0
 8014c7a:	e7e0      	b.n	8014c3e <_raise_r+0x12>

08014c7c <raise>:
 8014c7c:	4b02      	ldr	r3, [pc, #8]	; (8014c88 <raise+0xc>)
 8014c7e:	4601      	mov	r1, r0
 8014c80:	6818      	ldr	r0, [r3, #0]
 8014c82:	f7ff bfd3 	b.w	8014c2c <_raise_r>
 8014c86:	bf00      	nop
 8014c88:	20000594 	.word	0x20000594

08014c8c <_kill_r>:
 8014c8c:	b538      	push	{r3, r4, r5, lr}
 8014c8e:	4d07      	ldr	r5, [pc, #28]	; (8014cac <_kill_r+0x20>)
 8014c90:	2300      	movs	r3, #0
 8014c92:	4604      	mov	r4, r0
 8014c94:	4608      	mov	r0, r1
 8014c96:	4611      	mov	r1, r2
 8014c98:	602b      	str	r3, [r5, #0]
 8014c9a:	f7ed faa1 	bl	80021e0 <_kill>
 8014c9e:	1c43      	adds	r3, r0, #1
 8014ca0:	d102      	bne.n	8014ca8 <_kill_r+0x1c>
 8014ca2:	682b      	ldr	r3, [r5, #0]
 8014ca4:	b103      	cbz	r3, 8014ca8 <_kill_r+0x1c>
 8014ca6:	6023      	str	r3, [r4, #0]
 8014ca8:	bd38      	pop	{r3, r4, r5, pc}
 8014caa:	bf00      	nop
 8014cac:	20011034 	.word	0x20011034

08014cb0 <_getpid_r>:
 8014cb0:	f7ed ba8e 	b.w	80021d0 <_getpid>

08014cb4 <trunc>:
 8014cb4:	ec51 0b10 	vmov	r0, r1, d0
 8014cb8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014cbc:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8014cc0:	2b13      	cmp	r3, #19
 8014cc2:	b5d0      	push	{r4, r6, r7, lr}
 8014cc4:	460c      	mov	r4, r1
 8014cc6:	dc10      	bgt.n	8014cea <trunc+0x36>
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	bfa5      	ittet	ge
 8014ccc:	4a11      	ldrge	r2, [pc, #68]	; (8014d14 <trunc+0x60>)
 8014cce:	fa42 f303 	asrge.w	r3, r2, r3
 8014cd2:	2100      	movlt	r1, #0
 8014cd4:	2100      	movge	r1, #0
 8014cd6:	bfb9      	ittee	lt
 8014cd8:	2000      	movlt	r0, #0
 8014cda:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8014cde:	2000      	movge	r0, #0
 8014ce0:	ea24 0103 	bicge.w	r1, r4, r3
 8014ce4:	ec41 0b10 	vmov	d0, r0, r1
 8014ce8:	bdd0      	pop	{r4, r6, r7, pc}
 8014cea:	2b33      	cmp	r3, #51	; 0x33
 8014cec:	dd08      	ble.n	8014d00 <trunc+0x4c>
 8014cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014cf2:	d1f7      	bne.n	8014ce4 <trunc+0x30>
 8014cf4:	ee10 2a10 	vmov	r2, s0
 8014cf8:	460b      	mov	r3, r1
 8014cfa:	f7eb fac7 	bl	800028c <__adddf3>
 8014cfe:	e7f1      	b.n	8014ce4 <trunc+0x30>
 8014d00:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8014d04:	f04f 33ff 	mov.w	r3, #4294967295
 8014d08:	fa23 f202 	lsr.w	r2, r3, r2
 8014d0c:	ea20 0602 	bic.w	r6, r0, r2
 8014d10:	4630      	mov	r0, r6
 8014d12:	e7e7      	b.n	8014ce4 <trunc+0x30>
 8014d14:	000fffff 	.word	0x000fffff

08014d18 <_init>:
 8014d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d1a:	bf00      	nop
 8014d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d1e:	bc08      	pop	{r3}
 8014d20:	469e      	mov	lr, r3
 8014d22:	4770      	bx	lr

08014d24 <_fini>:
 8014d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d26:	bf00      	nop
 8014d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d2a:	bc08      	pop	{r3}
 8014d2c:	469e      	mov	lr, r3
 8014d2e:	4770      	bx	lr
