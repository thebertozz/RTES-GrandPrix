
RTES_FB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  0800e590  0800e590  0001e590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edd4  0800edd4  00020320  2**0
                  CONTENTS
  4 .ARM          00000008  0800edd4  0800edd4  0001edd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eddc  0800eddc  00020320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eddc  0800eddc  0001eddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ede0  0800ede0  0001ede0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000320  20000000  0800ede4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000102b4  20000320  0800f104  00020320  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200105d4  0800f104  000205d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a0ff  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000575e  00000000  00000000  0005a44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a80  00000000  00000000  0005fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002878  00000000  00000000  00062630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf06  00000000  00000000  00064ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027589  00000000  00000000  00091dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010cee9  00000000  00000000  000b9337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c6220  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c618  00000000  00000000  001c6274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000320 	.word	0x20000320
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e574 	.word	0x0800e574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000324 	.word	0x20000324
 80001cc:	0800e574 	.word	0x0800e574

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x30>)
 8000eb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2000033c 	.word	0x2000033c
 8000ed0:	20000400 	.word	0x20000400

08000ed4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,10);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	230a      	movs	r3, #10
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <_write+0x24>)
 8000eea:	f008 fce1 	bl	80098b0 <HAL_UART_Transmit>
return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200103f4 	.word	0x200103f4

08000efc <computeCurrentCarPosition>:

char* computeCurrentCarPosition() {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0

	//TODO: access sensors data in mutual exclusion

	int value = sensors.accelerometer_value.x;
 8000f02:	4b58      	ldr	r3, [pc, #352]	; (8001064 <computeCurrentCarPosition+0x168>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	607b      	str	r3, [r7, #4]

	if (value < 0 && value > -100) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	da05      	bge.n	8000f1a <computeCurrentCarPosition+0x1e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000f14:	db01      	blt.n	8000f1a <computeCurrentCarPosition+0x1e>

		return "|         *          |\r\n";
 8000f16:	4b54      	ldr	r3, [pc, #336]	; (8001068 <computeCurrentCarPosition+0x16c>)
 8000f18:	e09d      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value < -100 && value > -200) {
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000f20:	da05      	bge.n	8000f2e <computeCurrentCarPosition+0x32>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8000f28:	db01      	blt.n	8000f2e <computeCurrentCarPosition+0x32>

		return "|        *           |\r\n";
 8000f2a:	4b50      	ldr	r3, [pc, #320]	; (800106c <computeCurrentCarPosition+0x170>)
 8000f2c:	e093      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value < -200 && value > -300) {
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8000f34:	da05      	bge.n	8000f42 <computeCurrentCarPosition+0x46>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8000f3c:	dd01      	ble.n	8000f42 <computeCurrentCarPosition+0x46>

		return "|       *            |\r\n";
 8000f3e:	4b4c      	ldr	r3, [pc, #304]	; (8001070 <computeCurrentCarPosition+0x174>)
 8000f40:	e089      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value < -300 && value > -400) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8000f48:	da05      	bge.n	8000f56 <computeCurrentCarPosition+0x5a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8000f50:	dd01      	ble.n	8000f56 <computeCurrentCarPosition+0x5a>

		return "|      *             |\r\n";
 8000f52:	4b48      	ldr	r3, [pc, #288]	; (8001074 <computeCurrentCarPosition+0x178>)
 8000f54:	e07f      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value < -400 && value > -500) {
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8000f5c:	da05      	bge.n	8000f6a <computeCurrentCarPosition+0x6e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000f64:	dd01      	ble.n	8000f6a <computeCurrentCarPosition+0x6e>

		return "|      *             |\r\n";
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <computeCurrentCarPosition+0x178>)
 8000f68:	e075      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value < -500 && value > -600) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000f70:	da05      	bge.n	8000f7e <computeCurrentCarPosition+0x82>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8000f78:	dd01      	ble.n	8000f7e <computeCurrentCarPosition+0x82>

		return "|    *               |\r\n";
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <computeCurrentCarPosition+0x17c>)
 8000f7c:	e06b      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value < -600 && value > -700) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8000f84:	da05      	bge.n	8000f92 <computeCurrentCarPosition+0x96>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 8000f8c:	dd01      	ble.n	8000f92 <computeCurrentCarPosition+0x96>

		return "|   *                |\r\n";
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <computeCurrentCarPosition+0x180>)
 8000f90:	e061      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value < -700 && value > -800) {
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 8000f98:	da05      	bge.n	8000fa6 <computeCurrentCarPosition+0xaa>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8000fa0:	dd01      	ble.n	8000fa6 <computeCurrentCarPosition+0xaa>

		return "|  *                 |\r\n";
 8000fa2:	4b37      	ldr	r3, [pc, #220]	; (8001080 <computeCurrentCarPosition+0x184>)
 8000fa4:	e057      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value < -800) {
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8000fac:	da01      	bge.n	8000fb2 <computeCurrentCarPosition+0xb6>

		return "|*                   |\r\n";
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <computeCurrentCarPosition+0x188>)
 8000fb0:	e051      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value > 0 && value < 100) {
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dd04      	ble.n	8000fc2 <computeCurrentCarPosition+0xc6>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b63      	cmp	r3, #99	; 0x63
 8000fbc:	dc01      	bgt.n	8000fc2 <computeCurrentCarPosition+0xc6>

		return "|          *         |\r\n";
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <computeCurrentCarPosition+0x18c>)
 8000fc0:	e049      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value > 100 && value < 200) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b64      	cmp	r3, #100	; 0x64
 8000fc6:	dd04      	ble.n	8000fd2 <computeCurrentCarPosition+0xd6>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2bc7      	cmp	r3, #199	; 0xc7
 8000fcc:	dc01      	bgt.n	8000fd2 <computeCurrentCarPosition+0xd6>

		return "|           *        |\r\n";
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <computeCurrentCarPosition+0x190>)
 8000fd0:	e041      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value > 200 && value < 300) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2bc8      	cmp	r3, #200	; 0xc8
 8000fd6:	dd05      	ble.n	8000fe4 <computeCurrentCarPosition+0xe8>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fde:	da01      	bge.n	8000fe4 <computeCurrentCarPosition+0xe8>

		return "|            *       |\r\n";
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <computeCurrentCarPosition+0x194>)
 8000fe2:	e038      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value > 300 && value < 400) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fea:	dd05      	ble.n	8000ff8 <computeCurrentCarPosition+0xfc>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ff2:	da01      	bge.n	8000ff8 <computeCurrentCarPosition+0xfc>

		return "|             *      |\r\n";
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <computeCurrentCarPosition+0x198>)
 8000ff6:	e02e      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value > 400 && value < 500) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ffe:	dd05      	ble.n	800100c <computeCurrentCarPosition+0x110>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001006:	da01      	bge.n	800100c <computeCurrentCarPosition+0x110>

		return "|              *     |\r\n";
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <computeCurrentCarPosition+0x19c>)
 800100a:	e024      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value > 500 && value < 600) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001012:	dd05      	ble.n	8001020 <computeCurrentCarPosition+0x124>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800101a:	da01      	bge.n	8001020 <computeCurrentCarPosition+0x124>

		return "|               *    |\r\n";
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <computeCurrentCarPosition+0x1a0>)
 800101e:	e01a      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value > 600 && value < 700) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001026:	dd05      	ble.n	8001034 <computeCurrentCarPosition+0x138>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800102e:	da01      	bge.n	8001034 <computeCurrentCarPosition+0x138>

		return "|                *   |\r\n";
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <computeCurrentCarPosition+0x1a4>)
 8001032:	e010      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	} else if (value > 700 && value < 800) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800103a:	dd05      	ble.n	8001048 <computeCurrentCarPosition+0x14c>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001042:	da01      	bge.n	8001048 <computeCurrentCarPosition+0x14c>

		return "|                 *  |\r\n";
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <computeCurrentCarPosition+0x1a8>)
 8001046:	e006      	b.n	8001056 <computeCurrentCarPosition+0x15a>


	} else if (value > 800) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800104e:	dd01      	ble.n	8001054 <computeCurrentCarPosition+0x158>

		return "|                   *|\r\n";
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <computeCurrentCarPosition+0x1ac>)
 8001052:	e000      	b.n	8001056 <computeCurrentCarPosition+0x15a>

	}

	else {

		return "|          *         |\r\n";
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <computeCurrentCarPosition+0x18c>)
	}

}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	2001047c 	.word	0x2001047c
 8001068:	0800e5e8 	.word	0x0800e5e8
 800106c:	0800e604 	.word	0x0800e604
 8001070:	0800e620 	.word	0x0800e620
 8001074:	0800e63c 	.word	0x0800e63c
 8001078:	0800e658 	.word	0x0800e658
 800107c:	0800e674 	.word	0x0800e674
 8001080:	0800e690 	.word	0x0800e690
 8001084:	0800e6ac 	.word	0x0800e6ac
 8001088:	0800e6c8 	.word	0x0800e6c8
 800108c:	0800e6e4 	.word	0x0800e6e4
 8001090:	0800e700 	.word	0x0800e700
 8001094:	0800e71c 	.word	0x0800e71c
 8001098:	0800e738 	.word	0x0800e738
 800109c:	0800e754 	.word	0x0800e754
 80010a0:	0800e770 	.word	0x0800e770
 80010a4:	0800e78c 	.word	0x0800e78c
 80010a8:	0800e7a8 	.word	0x0800e7a8

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b5b0      	push	{r4, r5, r7, lr}
 80010ae:	b0a4      	sub	sp, #144	; 0x90
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b2:	f004 fcbc 	bl	8005a2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 f8b1 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ba:	f000 f9ef 	bl	800149c <MX_GPIO_Init>
  MX_I2C2_Init();
 80010be:	f000 f90f 	bl	80012e0 <MX_I2C2_Init>
  MX_SPI3_Init();
 80010c2:	f000 f94d 	bl	8001360 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80010c6:	f000 f989 	bl	80013dc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80010ca:	f000 f9b7 	bl	800143c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  	//User button
  	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80010ce:	2100      	movs	r1, #0
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 ffcd 	bl	8002070 <BSP_PB_Init>

	//Temperature
	BSP_TSENSOR_Init();
 80010d6:	f002 f8c5 	bl	8003264 <BSP_TSENSOR_Init>
	printf(tmpSensorMsg);
 80010da:	4842      	ldr	r0, [pc, #264]	; (80011e4 <main+0x138>)
 80010dc:	f00b f8ec 	bl	800c2b8 <iprintf>
	//HAL_UART_Transmit(&huart1,tmpSensorMsg,sizeof(tmpSensorMsg),1000);

//	//Humidity
	BSP_HSENSOR_Init();
 80010e0:	f001 fe6e 	bl	8002dc0 <BSP_HSENSOR_Init>
	printf(hmdSensorMsg);
 80010e4:	4840      	ldr	r0, [pc, #256]	; (80011e8 <main+0x13c>)
 80010e6:	f00b f8e7 	bl	800c2b8 <iprintf>
	//HAL_UART_Transmit(&huart1,hmdSensorMsg,sizeof(hmdSensorMsg),1000);

//	//Pressure
	BSP_PSENSOR_Init();
 80010ea:	f002 f88d 	bl	8003208 <BSP_PSENSOR_Init>
	printf(prsSensorMsg);
 80010ee:	483f      	ldr	r0, [pc, #252]	; (80011ec <main+0x140>)
 80010f0:	f00b f8e2 	bl	800c2b8 <iprintf>
	//HAL_UART_Transmit(&huart1,prsSensorMsg,sizeof(prsSensorMsg),1000);

	//Motion sensors

	//BSP_MOTION_SENSOR_Init(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_GYRO);
	BSP_MOTION_SENSOR_Init(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO);
 80010f4:	2102      	movs	r1, #2
 80010f6:	2000      	movs	r0, #0
 80010f8:	f001 fe90 	bl	8002e1c <BSP_MOTION_SENSOR_Init>

	//BSP_MOTION_SENSOR_Enable(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_GYRO);
	BSP_MOTION_SENSOR_Enable(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO);
 80010fc:	2102      	movs	r1, #2
 80010fe:	2000      	movs	r0, #0
 8001100:	f001 fedc 	bl	8002ebc <BSP_MOTION_SENSOR_Enable>

	//VL53L0X_PROXIMITY_Init();

	//Struct elements initialization

	sensors.humidity_value = 0;
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <main+0x144>)
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
	sensors.pressure_value = 0;
 800110c:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <main+0x144>)
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
	sensors.temperature_value = 0;
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <main+0x144>)
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
	sensors.proximity = 0;
 800111c:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <main+0x144>)
 800111e:	2200      	movs	r2, #0
 8001120:	849a      	strh	r2, [r3, #36]	; 0x24
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <main+0x148>)
 8001124:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001128:	461d      	mov	r5, r3
 800112a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001132:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001136:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f009 f85b 	bl	800a1f8 <osThreadCreate>
 8001142:	4603      	mov	r3, r0
 8001144:	4a2c      	ldr	r2, [pc, #176]	; (80011f8 <main+0x14c>)
 8001146:	6013      	str	r3, [r2, #0]

  /* definition and creation of serialPrintTask */
  osThreadDef(serialPrintTask, startSerialPrintTask, osPriorityNormal, 0, 1024);
 8001148:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <main+0x150>)
 800114a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800114e:	461d      	mov	r5, r3
 8001150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001154:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  serialPrintTaskHandle = osThreadCreate(osThread(serialPrintTask), NULL);
 800115c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f009 f848 	bl	800a1f8 <osThreadCreate>
 8001168:	4603      	mov	r3, r0
 800116a:	4a25      	ldr	r2, [pc, #148]	; (8001200 <main+0x154>)
 800116c:	6013      	str	r3, [r2, #0]

  /* definition and creation of userButtonTask */
  osThreadDef(userButtonTask, startUserButtonTask, osPriorityAboveNormal, 0, 1024);
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <main+0x158>)
 8001170:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001174:	461d      	mov	r5, r3
 8001176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800117e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  userButtonTaskHandle = osThreadCreate(osThread(userButtonTask), NULL);
 8001182:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f009 f835 	bl	800a1f8 <osThreadCreate>
 800118e:	4603      	mov	r3, r0
 8001190:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <main+0x15c>)
 8001192:	6013      	str	r3, [r2, #0]

  /* definition and creation of environmentalSensorsTask */
  osThreadDef(environmentalSensorsTask, startEnvironmentalSensorsTask, osPriorityNormal, 0, 1024);
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <main+0x160>)
 8001196:	f107 0420 	add.w	r4, r7, #32
 800119a:	461d      	mov	r5, r3
 800119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  environmentalSensorsTaskHandle = osThreadCreate(osThread(environmentalSensorsTask), NULL);
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f009 f822 	bl	800a1f8 <osThreadCreate>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <main+0x164>)
 80011b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of gyroscopeTask */
  osThreadDef(gyroscopeTask, startGyroscopeTask, osPriorityNormal, 0, 1024);
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <main+0x168>)
 80011bc:	1d3c      	adds	r4, r7, #4
 80011be:	461d      	mov	r5, r3
 80011c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gyroscopeTaskHandle = osThreadCreate(osThread(gyroscopeTask), NULL);
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f009 f811 	bl	800a1f8 <osThreadCreate>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <main+0x16c>)
 80011da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011dc:	f009 f805 	bl	800a1ea <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80011e0:	e7fe      	b.n	80011e0 <main+0x134>
 80011e2:	bf00      	nop
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000030 	.word	0x20000030
 80011ec:	2000005c 	.word	0x2000005c
 80011f0:	2001047c 	.word	0x2001047c
 80011f4:	0800e7c4 	.word	0x0800e7c4
 80011f8:	200102b0 	.word	0x200102b0
 80011fc:	0800e7e0 	.word	0x0800e7e0
 8001200:	20010478 	.word	0x20010478
 8001204:	0800e7fc 	.word	0x0800e7fc
 8001208:	200103ec 	.word	0x200103ec
 800120c:	0800e818 	.word	0x0800e818
 8001210:	200103f0 	.word	0x200103f0
 8001214:	0800e834 	.word	0x0800e834
 8001218:	200102b4 	.word	0x200102b4

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b096      	sub	sp, #88	; 0x58
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2244      	movs	r2, #68	; 0x44
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f00a fb77 	bl	800b91e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800123e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001242:	f005 fdd9 	bl	8006df8 <HAL_PWREx_ControlVoltageScaling>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800124c:	f000 fbd2 	bl	80019f4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001250:	f005 fdb4 	bl	8006dbc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <SystemClock_Config+0xc0>)
 8001256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125a:	4a20      	ldr	r2, [pc, #128]	; (80012dc <SystemClock_Config+0xc0>)
 800125c:	f023 0318 	bic.w	r3, r3, #24
 8001260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001264:	2314      	movs	r3, #20
 8001266:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800126c:	2301      	movs	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001274:	2360      	movs	r3, #96	; 0x60
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800127c:	2301      	movs	r3, #1
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001284:	2328      	movs	r3, #40	; 0x28
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001288:	2307      	movs	r3, #7
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800128c:	2302      	movs	r3, #2
 800128e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4618      	mov	r0, r3
 800129a:	f005 fe03 	bl	8006ea4 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012a4:	f000 fba6 	bl	80019f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2303      	movs	r3, #3
 80012ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	2104      	movs	r1, #4
 80012c0:	4618      	mov	r0, r3
 80012c2:	f006 f9d5 	bl	8007670 <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012cc:	f000 fb92 	bl	80019f4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012d0:	f007 fc5a 	bl	8008b88 <HAL_RCCEx_EnableMSIPLLMode>
}
 80012d4:	bf00      	nop
 80012d6:	3758      	adds	r7, #88	; 0x58
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000

080012e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_I2C2_Init+0x74>)
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <MX_I2C2_Init+0x78>)
 80012e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_I2C2_Init+0x74>)
 80012ec:	4a1b      	ldr	r2, [pc, #108]	; (800135c <MX_I2C2_Init+0x7c>)
 80012ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_I2C2_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_I2C2_Init+0x74>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_I2C2_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_I2C2_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_I2C2_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_I2C2_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_I2C2_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800131a:	480e      	ldr	r0, [pc, #56]	; (8001354 <MX_I2C2_Init+0x74>)
 800131c:	f004 ff93 	bl	8006246 <HAL_I2C_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001326:	f000 fb65 	bl	80019f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4809      	ldr	r0, [pc, #36]	; (8001354 <MX_I2C2_Init+0x74>)
 800132e:	f005 fcad 	bl	8006c8c <HAL_I2CEx_ConfigAnalogFilter>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001338:	f000 fb5c 	bl	80019f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800133c:	2100      	movs	r1, #0
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_I2C2_Init+0x74>)
 8001340:	f005 fcef 	bl	8006d22 <HAL_I2CEx_ConfigDigitalFilter>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800134a:	f000 fb53 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2001033c 	.word	0x2001033c
 8001358:	40005800 	.word	0x40005800
 800135c:	10909cec 	.word	0x10909cec

08001360 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_SPI3_Init+0x74>)
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <MX_SPI3_Init+0x78>)
 8001368:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_SPI3_Init+0x74>)
 800136c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001370:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_SPI3_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_SPI3_Init+0x74>)
 800137a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800137e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_SPI3_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_SPI3_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_SPI3_Init+0x74>)
 800138e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001392:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_SPI3_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_SPI3_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_SPI3_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_SPI3_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_SPI3_Init+0x74>)
 80013ae:	2207      	movs	r2, #7
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_SPI3_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_SPI3_Init+0x74>)
 80013ba:	2208      	movs	r2, #8
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_SPI3_Init+0x74>)
 80013c0:	f007 feb4 	bl	800912c <HAL_SPI_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013ca:	f000 fb13 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20010388 	.word	0x20010388
 80013d8:	40003c00 	.word	0x40003c00

080013dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <MX_USART1_UART_Init+0x5c>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_USART1_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_USART1_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001420:	f008 f9f8 	bl	8009814 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800142a:	f000 fae3 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200103f4 	.word	0x200103f4
 8001438:	40013800 	.word	0x40013800

0800143c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <MX_USART3_UART_Init+0x5c>)
 8001444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_USART3_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_USART3_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_USART3_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001480:	f008 f9c8 	bl	8009814 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800148a:	f000 fab3 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200102b8 	.word	0x200102b8
 8001498:	40004800 	.word	0x40004800

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b2:	4bba      	ldr	r3, [pc, #744]	; (800179c <MX_GPIO_Init+0x300>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4ab9      	ldr	r2, [pc, #740]	; (800179c <MX_GPIO_Init+0x300>)
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4bb7      	ldr	r3, [pc, #732]	; (800179c <MX_GPIO_Init+0x300>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	4bb4      	ldr	r3, [pc, #720]	; (800179c <MX_GPIO_Init+0x300>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4ab3      	ldr	r2, [pc, #716]	; (800179c <MX_GPIO_Init+0x300>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4bb1      	ldr	r3, [pc, #708]	; (800179c <MX_GPIO_Init+0x300>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4bae      	ldr	r3, [pc, #696]	; (800179c <MX_GPIO_Init+0x300>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4aad      	ldr	r2, [pc, #692]	; (800179c <MX_GPIO_Init+0x300>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4bab      	ldr	r3, [pc, #684]	; (800179c <MX_GPIO_Init+0x300>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4ba8      	ldr	r3, [pc, #672]	; (800179c <MX_GPIO_Init+0x300>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4aa7      	ldr	r2, [pc, #668]	; (800179c <MX_GPIO_Init+0x300>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4ba5      	ldr	r3, [pc, #660]	; (800179c <MX_GPIO_Init+0x300>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001512:	4ba2      	ldr	r3, [pc, #648]	; (800179c <MX_GPIO_Init+0x300>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4aa1      	ldr	r2, [pc, #644]	; (800179c <MX_GPIO_Init+0x300>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b9f      	ldr	r3, [pc, #636]	; (800179c <MX_GPIO_Init+0x300>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001530:	489b      	ldr	r0, [pc, #620]	; (80017a0 <MX_GPIO_Init+0x304>)
 8001532:	f004 fe4d 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f248 1104 	movw	r1, #33028	; 0x8104
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f004 fe46 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001544:	2200      	movs	r2, #0
 8001546:	f24f 0114 	movw	r1, #61460	; 0xf014
 800154a:	4896      	ldr	r0, [pc, #600]	; (80017a4 <MX_GPIO_Init+0x308>)
 800154c:	f004 fe40 	bl	80061d0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f241 0181 	movw	r1, #4225	; 0x1081
 8001556:	4894      	ldr	r0, [pc, #592]	; (80017a8 <MX_GPIO_Init+0x30c>)
 8001558:	f004 fe3a 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001562:	4891      	ldr	r0, [pc, #580]	; (80017a8 <MX_GPIO_Init+0x30c>)
 8001564:	f004 fe34 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800156e:	488f      	ldr	r0, [pc, #572]	; (80017ac <MX_GPIO_Init+0x310>)
 8001570:	f004 fe2e 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2120      	movs	r1, #32
 8001578:	488a      	ldr	r0, [pc, #552]	; (80017a4 <MX_GPIO_Init+0x308>)
 800157a:	f004 fe29 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2101      	movs	r1, #1
 8001582:	4887      	ldr	r0, [pc, #540]	; (80017a0 <MX_GPIO_Init+0x304>)
 8001584:	f004 fe24 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001588:	f240 1315 	movw	r3, #277	; 0x115
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	487f      	ldr	r0, [pc, #508]	; (80017a0 <MX_GPIO_Init+0x304>)
 80015a2:	f004 fb5f 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80015a6:	236a      	movs	r3, #106	; 0x6a
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015aa:	4b81      	ldr	r3, [pc, #516]	; (80017b0 <MX_GPIO_Init+0x314>)
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4879      	ldr	r0, [pc, #484]	; (80017a0 <MX_GPIO_Init+0x304>)
 80015ba:	f004 fb53 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80015be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c4:	4b7b      	ldr	r3, [pc, #492]	; (80017b4 <MX_GPIO_Init+0x318>)
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4876      	ldr	r0, [pc, #472]	; (80017ac <MX_GPIO_Init+0x310>)
 80015d4:	f004 fb46 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80015d8:	233f      	movs	r3, #63	; 0x3f
 80015da:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015dc:	230b      	movs	r3, #11
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4870      	ldr	r0, [pc, #448]	; (80017ac <MX_GPIO_Init+0x310>)
 80015ec:	f004 fb3a 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80015f0:	2303      	movs	r3, #3
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001600:	2308      	movs	r3, #8
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160e:	f004 fb29 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001612:	f248 1304 	movw	r3, #33028	; 0x8104
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f004 fb19 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001632:	2308      	movs	r3, #8
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001642:	2301      	movs	r3, #1
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001650:	f004 fb08 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001654:	2310      	movs	r3, #16
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001658:	230b      	movs	r3, #11
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f004 fafb 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800166e:	23e0      	movs	r3, #224	; 0xe0
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800167e:	2305      	movs	r3, #5
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f004 faea 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001690:	2301      	movs	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001694:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <MX_GPIO_Init+0x314>)
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4840      	ldr	r0, [pc, #256]	; (80017a4 <MX_GPIO_Init+0x308>)
 80016a4:	f004 fade 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80016a8:	2302      	movs	r3, #2
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016ac:	230b      	movs	r3, #11
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	483a      	ldr	r0, [pc, #232]	; (80017a4 <MX_GPIO_Init+0x308>)
 80016bc:	f004 fad2 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016c0:	f24f 0334 	movw	r3, #61492	; 0xf034
 80016c4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4832      	ldr	r0, [pc, #200]	; (80017a4 <MX_GPIO_Init+0x308>)
 80016da:	f004 fac3 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80016de:	f44f 7320 	mov.w	r3, #640	; 0x280
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016f0:	2306      	movs	r3, #6
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4829      	ldr	r0, [pc, #164]	; (80017a0 <MX_GPIO_Init+0x304>)
 80016fc:	f004 fab2 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001700:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001704:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001712:	230a      	movs	r3, #10
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4820      	ldr	r0, [pc, #128]	; (80017a0 <MX_GPIO_Init+0x304>)
 800171e:	f004 faa1 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001722:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001726:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <MX_GPIO_Init+0x314>)
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	481c      	ldr	r0, [pc, #112]	; (80017a8 <MX_GPIO_Init+0x30c>)
 8001738:	f004 fa94 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800173c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4814      	ldr	r0, [pc, #80]	; (80017a8 <MX_GPIO_Init+0x30c>)
 8001756:	f004 fa85 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800175a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480e      	ldr	r0, [pc, #56]	; (80017ac <MX_GPIO_Init+0x310>)
 8001774:	f004 fa76 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001778:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_GPIO_Init+0x314>)
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4807      	ldr	r0, [pc, #28]	; (80017ac <MX_GPIO_Init+0x310>)
 800178e:	f004 fa69 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	2300      	movs	r3, #0
 800179a:	e00d      	b.n	80017b8 <MX_GPIO_Init+0x31c>
 800179c:	40021000 	.word	0x40021000
 80017a0:	48001000 	.word	0x48001000
 80017a4:	48000400 	.word	0x48000400
 80017a8:	48000c00 	.word	0x48000c00
 80017ac:	48000800 	.word	0x48000800
 80017b0:	10110000 	.word	0x10110000
 80017b4:	10210000 	.word	0x10210000
 80017b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c8:	f004 fa4c 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80017cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017de:	230a      	movs	r3, #10
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f004 fa3a 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80017f0:	2302      	movs	r3, #2
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001800:	2305      	movs	r3, #5
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	481c      	ldr	r0, [pc, #112]	; (800187c <MX_GPIO_Init+0x3e0>)
 800180c:	f004 fa2a 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001810:	2378      	movs	r3, #120	; 0x78
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001820:	2307      	movs	r3, #7
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4814      	ldr	r0, [pc, #80]	; (800187c <MX_GPIO_Init+0x3e0>)
 800182c:	f004 fa1a 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001830:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001836:	2312      	movs	r3, #18
 8001838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001842:	2304      	movs	r3, #4
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_GPIO_Init+0x3e4>)
 800184e:	f004 fa09 	bl	8005c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2105      	movs	r1, #5
 8001856:	2017      	movs	r0, #23
 8001858:	f004 f9da 	bl	8005c10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800185c:	2017      	movs	r0, #23
 800185e:	f004 f9f3 	bl	8005c48 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2105      	movs	r1, #5
 8001866:	2028      	movs	r0, #40	; 0x28
 8001868:	f004 f9d2 	bl	8005c10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800186c:	2028      	movs	r0, #40	; 0x28
 800186e:	f004 f9eb 	bl	8005c48 <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	48000c00 	.word	0x48000c00
 8001880:	48000400 	.word	0x48000400

08001884 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1000);
 800188c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001890:	f008 fcfe 	bl	800a290 <osDelay>
 8001894:	e7fa      	b.n	800188c <StartDefaultTask+0x8>

08001896 <startSerialPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSerialPrintTask */
void startSerialPrintTask(void const * argument)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
//	  		snprintf(str_gyro,100, "DISTANCE = %d \n\r,", sensors.proximity);
//	  		HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),1000);

	  		//printf("\n\r");

	  		osDelay(1000);
 800189e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018a2:	f008 fcf5 	bl	800a290 <osDelay>
 80018a6:	e7fa      	b.n	800189e <startSerialPrintTask+0x8>

080018a8 <startUserButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUserButtonTask */
void startUserButtonTask(void const * argument)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUserButtonTask */
  /* Infinite loop */
  for(;;)
  {
	if (isReadingActivated == 0) {
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <startUserButtonTask+0x68>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d11b      	bne.n	80018f0 <startUserButtonTask+0x48>

		printf("Press the USER button to activate the weather station \n\r");
 80018b8:	4816      	ldr	r0, [pc, #88]	; (8001914 <startUserButtonTask+0x6c>)
 80018ba:	f00a fcfd 	bl	800c2b8 <iprintf>
		while(BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET);
 80018be:	bf00      	nop
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 fc2b 	bl	800211c <BSP_PB_GetState>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f9      	beq.n	80018c0 <startUserButtonTask+0x18>
		while(BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_SET);
 80018cc:	bf00      	nop
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 fc24 	bl	800211c <BSP_PB_GetState>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d0f9      	beq.n	80018ce <startUserButtonTask+0x26>
		printf("Button pressed, starting sensors readings \n\r");
 80018da:	480f      	ldr	r0, [pc, #60]	; (8001918 <startUserButtonTask+0x70>)
 80018dc:	f00a fcec 	bl	800c2b8 <iprintf>
		isReadingActivated = 1;
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <startUserButtonTask+0x68>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
		//osThreadSetPriority(userButtonTaskHandle, osPriorityIdle);
		osDelay(1000);
 80018e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ea:	f008 fcd1 	bl	800a290 <osDelay>
 80018ee:	e7df      	b.n	80018b0 <startUserButtonTask+0x8>

	} else {

		if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) { //For detecting a long press
 80018f0:	2000      	movs	r0, #0
 80018f2:	f000 fc13 	bl	800211c <BSP_PB_GetState>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <startUserButtonTask+0x60>

			printf("Detected a button in reset state, preempting sensor tasks \n\r");
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <startUserButtonTask+0x74>)
 80018fe:	f00a fcdb 	bl	800c2b8 <iprintf>
			isReadingActivated = 0;
 8001902:	4b03      	ldr	r3, [pc, #12]	; (8001910 <startUserButtonTask+0x68>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
		}

		osDelay(1);
 8001908:	2001      	movs	r0, #1
 800190a:	f008 fcc1 	bl	800a290 <osDelay>
	if (isReadingActivated == 0) {
 800190e:	e7cf      	b.n	80018b0 <startUserButtonTask+0x8>
 8001910:	20000664 	.word	0x20000664
 8001914:	0800e850 	.word	0x0800e850
 8001918:	0800e88c 	.word	0x0800e88c
 800191c:	0800e8bc 	.word	0x0800e8bc

08001920 <startEnvironmentalSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startEnvironmentalSensorsTask */
void startEnvironmentalSensorsTask(void const * argument)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEnvironmentalSensorsTask */
  /* Infinite loop */
  for(;;)
  {
	  //TODO: Access sensors data struct mutual exclusion
	  sensors.temperature_value = BSP_TSENSOR_ReadTemp();
 8001928:	f001 fcb8 	bl	800329c <BSP_TSENSOR_ReadTemp>
 800192c:	eef0 7a40 	vmov.f32	s15, s0
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <startEnvironmentalSensorsTask+0x3c>)
 8001932:	edc3 7a00 	vstr	s15, [r3]


	  //TODO: Access sensors data struct in mutual exclusion
	  sensors.humidity_value = BSP_HSENSOR_ReadHumidity();
 8001936:	f001 fa63 	bl	8002e00 <BSP_HSENSOR_ReadHumidity>
 800193a:	eef0 7a40 	vmov.f32	s15, s0
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <startEnvironmentalSensorsTask+0x3c>)
 8001940:	edc3 7a01 	vstr	s15, [r3, #4]

	  //TODO: Access sensors data struct in mutual exclusion
	  sensors.pressure_value = BSP_PSENSOR_ReadPressure();
 8001944:	f001 fc80 	bl	8003248 <BSP_PSENSOR_ReadPressure>
 8001948:	eef0 7a40 	vmov.f32	s15, s0
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <startEnvironmentalSensorsTask+0x3c>)
 800194e:	edc3 7a02 	vstr	s15, [r3, #8]

	  osDelay(1000);
 8001952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001956:	f008 fc9b 	bl	800a290 <osDelay>
	  sensors.temperature_value = BSP_TSENSOR_ReadTemp();
 800195a:	e7e5      	b.n	8001928 <startEnvironmentalSensorsTask+0x8>
 800195c:	2001047c 	.word	0x2001047c

08001960 <startGyroscopeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGyroscopeTask */
void startGyroscopeTask(void const * argument)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGyroscopeTask */
  /* Infinite loop */
  for(;;)
  {
	  		BSP_MOTION_SENSOR_Axes_t  acc_value = {0, 0, 0};
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
	  		BSP_MOTION_SENSOR_Axes_t  gyr_value = {0, 0, 0};
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
	  		//BSP_MOTION_SENSOR_Axes_t  mag_value = {0, 0, 0};

	  		BSP_MOTION_SENSOR_GetAxes(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_ACCELERO, &acc_value);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	461a      	mov	r2, r3
 8001986:	2102      	movs	r1, #2
 8001988:	2000      	movs	r0, #0
 800198a:	f001 faf7 	bl	8002f7c <BSP_MOTION_SENSOR_GetAxes>
	  		//BSP_MOTION_SENSOR_GetAxes(INSTANCE_GYROSCOPE_ACCELEROMETER, MOTION_GYRO, &gyr_value);

	  		sensors.accelerometer_value = acc_value;
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <startGyroscopeTask+0x64>)
 8001990:	330c      	adds	r3, #12
 8001992:	f107 0214 	add.w	r2, r7, #20
 8001996:	ca07      	ldmia	r2, {r0, r1, r2}
 8001998:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  		//snprintf(str_gyro,100, "ACC-X\": %ld, \"ACC-Y\": %ld, \"ACC-Z\": %ld \r\n", acc_value.x, acc_value.y, acc_value.z);
	  		//HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),1000);

	  		//char position[100] = ;

	  		snprintf(str_gyro,100, computeCurrentCarPosition());
 800199c:	f7ff faae 	bl	8000efc <computeCurrentCarPosition>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	2164      	movs	r1, #100	; 0x64
 80019a6:	4808      	ldr	r0, [pc, #32]	; (80019c8 <startGyroscopeTask+0x68>)
 80019a8:	f00a fd18 	bl	800c3dc <sniprintf>
	  		HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),1000);
 80019ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b0:	2264      	movs	r2, #100	; 0x64
 80019b2:	4905      	ldr	r1, [pc, #20]	; (80019c8 <startGyroscopeTask+0x68>)
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <startGyroscopeTask+0x6c>)
 80019b6:	f007 ff7b 	bl	80098b0 <HAL_UART_Transmit>
	  //
	  //		proximity_value = VL53L0X_PROXIMITY_GetDistance();
	  ////
	  //		sensors.proximity = proximity_value;

	  		osDelay(500);
 80019ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019be:	f008 fc67 	bl	800a290 <osDelay>
  {
 80019c2:	e7d1      	b.n	8001968 <startGyroscopeTask+0x8>
 80019c4:	2001047c 	.word	0x2001047c
 80019c8:	20000600 	.word	0x20000600
 80019cc:	200103f4 	.word	0x200103f4

080019d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019e2:	f004 f83d 	bl	8005a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40001000 	.word	0x40001000

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>
	...

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6613      	str	r3, [r2, #96]	; 0x60
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	210f      	movs	r1, #15
 8001a3a:	f06f 0001 	mvn.w	r0, #1
 8001a3e:	f004 f8e7 	bl	8005c10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000

08001a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b0ac      	sub	sp, #176	; 0xb0
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2288      	movs	r2, #136	; 0x88
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f009 ff54 	bl	800b91e <memset>
  if(hi2c->Instance==I2C2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <HAL_I2C_MspInit+0xb0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d13b      	bne.n	8001af8 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f006 f827 	bl	8007ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a98:	f7ff ffac 	bl	80019f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_I2C_MspInit+0xb4>)
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa0:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <HAL_I2C_MspInit+0xb4>)
 8001aa2:	f043 0302 	orr.w	r3, r3, #2
 8001aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_I2C_MspInit+0xb4>)
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001ab4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001abc:	2312      	movs	r3, #18
 8001abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480b      	ldr	r0, [pc, #44]	; (8001b08 <HAL_I2C_MspInit+0xb8>)
 8001adc:	f004 f8c2 	bl	8005c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_I2C_MspInit+0xb4>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_I2C_MspInit+0xb4>)
 8001ae6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aea:	6593      	str	r3, [r2, #88]	; 0x58
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_I2C_MspInit+0xb4>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001af8:	bf00      	nop
 8001afa:	37b0      	adds	r7, #176	; 0xb0
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40005800 	.word	0x40005800
 8001b04:	40021000 	.word	0x40021000
 8001b08:	48000400 	.word	0x48000400

08001b0c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_I2C_MspDeInit+0x3c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d10f      	bne.n	8001b3e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_I2C_MspDeInit+0x40>)
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_I2C_MspDeInit+0x40>)
 8001b24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b28:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b2e:	4808      	ldr	r0, [pc, #32]	; (8001b50 <HAL_I2C_MspDeInit+0x44>)
 8001b30:	f004 fa42 	bl	8005fb8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_I2C_MspDeInit+0x44>)
 8001b3a:	f004 fa3d 	bl	8005fb8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40005800 	.word	0x40005800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	48000400 	.word	0x48000400

08001b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <HAL_SPI_MspInit+0x7c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d128      	bne.n	8001bc8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_SPI_MspInit+0x80>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <HAL_SPI_MspInit+0x80>)
 8001b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b80:	6593      	str	r3, [r2, #88]	; 0x58
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_SPI_MspInit+0x80>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_SPI_MspInit+0x80>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a10      	ldr	r2, [pc, #64]	; (8001bd4 <HAL_SPI_MspInit+0x80>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_SPI_MspInit+0x80>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001ba6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bb8:	2306      	movs	r3, #6
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <HAL_SPI_MspInit+0x84>)
 8001bc4:	f004 f84e 	bl	8005c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001bc8:	bf00      	nop
 8001bca:	3728      	adds	r7, #40	; 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40003c00 	.word	0x40003c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	48000800 	.word	0x48000800

08001bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b0ae      	sub	sp, #184	; 0xb8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2288      	movs	r2, #136	; 0x88
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f009 fe8e 	bl	800b91e <memset>
  if(huart->Instance==USART1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a42      	ldr	r2, [pc, #264]	; (8001d10 <HAL_UART_MspInit+0x134>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d13b      	bne.n	8001c84 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c10:	2300      	movs	r3, #0
 8001c12:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f005 ff61 	bl	8007ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c24:	f7ff fee6 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c28:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2c:	4a39      	ldr	r2, [pc, #228]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c32:	6613      	str	r3, [r2, #96]	; 0x60
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	4a33      	ldr	r2, [pc, #204]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001c58:	23c0      	movs	r3, #192	; 0xc0
 8001c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c70:	2307      	movs	r3, #7
 8001c72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4826      	ldr	r0, [pc, #152]	; (8001d18 <HAL_UART_MspInit+0x13c>)
 8001c7e:	f003 fff1 	bl	8005c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c82:	e040      	b.n	8001d06 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <HAL_UART_MspInit+0x140>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d13b      	bne.n	8001d06 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f005 ff20 	bl	8007ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001ca6:	f7ff fea5 	bl	80019f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	4a13      	ldr	r2, [pc, #76]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001cda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <HAL_UART_MspInit+0x144>)
 8001d02:	f003 ffaf 	bl	8005c64 <HAL_GPIO_Init>
}
 8001d06:	bf00      	nop
 8001d08:	37b8      	adds	r7, #184	; 0xb8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	40004800 	.word	0x40004800
 8001d20:	48000c00 	.word	0x48000c00

08001d24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	2036      	movs	r0, #54	; 0x36
 8001d3a:	f003 ff69 	bl	8005c10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d3e:	2036      	movs	r0, #54	; 0x36
 8001d40:	f003 ff82 	bl	8005c48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_InitTick+0x9c>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_InitTick+0x9c>)
 8001d4a:	f043 0310 	orr.w	r3, r3, #16
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_InitTick+0x9c>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d5c:	f107 0210 	add.w	r2, r7, #16
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 fe28 	bl	80079bc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d6c:	f005 fdfa 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8001d70:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <HAL_InitTick+0xa0>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0c9b      	lsrs	r3, r3, #18
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_InitTick+0xa4>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <HAL_InitTick+0xa8>)
 8001d84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_InitTick+0xa4>)
 8001d88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d8c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_InitTick+0xa4>)
 8001d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d92:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_InitTick+0xa4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_InitTick+0xa4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001da0:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <HAL_InitTick+0xa4>)
 8001da2:	f007 fa66 	bl	8009272 <HAL_TIM_Base_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d104      	bne.n	8001db6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001dac:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <HAL_InitTick+0xa4>)
 8001dae:	f007 fac1 	bl	8009334 <HAL_TIM_Base_Start_IT>
 8001db2:	4603      	mov	r3, r0
 8001db4:	e000      	b.n	8001db8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3730      	adds	r7, #48	; 0x30
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	431bde83 	.word	0x431bde83
 8001dc8:	200104a4 	.word	0x200104a4
 8001dcc:	40001000 	.word	0x40001000

08001dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <NMI_Handler+0x4>

08001dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <MemManage_Handler+0x4>

08001de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <UsageFault_Handler+0x4>

08001dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001e00:	2020      	movs	r0, #32
 8001e02:	f004 f9fd 	bl	8006200 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001e06:	2040      	movs	r0, #64	; 0x40
 8001e08:	f004 f9fa 	bl	8006200 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D11_Pin);
 8001e0c:	2080      	movs	r0, #128	; 0x80
 8001e0e:	f004 f9f7 	bl	8006200 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ISM43362_RST_Pin);
 8001e12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e16:	f004 f9f3 	bl	8006200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_CLK_Pin);
 8001e22:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e26:	f004 f9eb 	bl	8006200 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_NCS_Pin);
 8001e2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e2e:	f004 f9e7 	bl	8006200 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001e32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e36:	f004 f9e3 	bl	8006200 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO2_Pin);
 8001e3a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e3e:	f004 f9df 	bl	8006200 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO3_Pin);
 8001e42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e46:	f004 f9db 	bl	8006200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <TIM6_DAC_IRQHandler+0x10>)
 8001e56:	f007 fadd 	bl	8009414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200104a4 	.word	0x200104a4

08001e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
	return 1;
 8001e68:	2301      	movs	r3, #1
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_kill>:

int _kill(int pid, int sig)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e7e:	f009 fc1d 	bl	800b6bc <__errno>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2216      	movs	r2, #22
 8001e86:	601a      	str	r2, [r3, #0]
	return -1;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_exit>:

void _exit (int status)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ffe7 	bl	8001e74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea6:	e7fe      	b.n	8001ea6 <_exit+0x12>

08001ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e00a      	b.n	8001ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eba:	f3af 8000 	nop.w
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	60ba      	str	r2, [r7, #8]
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dbf0      	blt.n	8001eba <_read+0x12>
	}

return len;
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_isatty>:

int _isatty(int file)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	return 1;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <_sbrk+0x5c>)
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <_sbrk+0x60>)
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <_sbrk+0x64>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <_sbrk+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d207      	bcs.n	8001f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f7c:	f009 fb9e 	bl	800b6bc <__errno>
 8001f80:	4603      	mov	r3, r0
 8001f82:	220c      	movs	r2, #12
 8001f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	e009      	b.n	8001fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <_sbrk+0x64>)
 8001f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20018000 	.word	0x20018000
 8001fac:	00000400 	.word	0x00000400
 8001fb0:	20000668 	.word	0x20000668
 8001fb4:	200105d8 	.word	0x200105d8

08001fb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <SystemInit+0x5c>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <SystemInit+0x5c>)
 8001fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <SystemInit+0x60>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a11      	ldr	r2, [pc, #68]	; (8002018 <SystemInit+0x60>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <SystemInit+0x60>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <SystemInit+0x60>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <SystemInit+0x60>)
 8001fe4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001fe8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001fec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <SystemInit+0x60>)
 8001ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <SystemInit+0x60>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a07      	ldr	r2, [pc, #28]	; (8002018 <SystemInit+0x60>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <SystemInit+0x60>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000ed00 	.word	0xe000ed00
 8002018:	40021000 	.word	0x40021000

0800201c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002054 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002020:	f7ff ffca 	bl	8001fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002024:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002026:	e003      	b.n	8002030 <LoopCopyDataInit>

08002028 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800202a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800202c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800202e:	3104      	adds	r1, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002030:	480a      	ldr	r0, [pc, #40]	; (800205c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002034:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002036:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002038:	d3f6      	bcc.n	8002028 <CopyDataInit>
	ldr	r2, =_sbss
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <LoopForever+0x12>)
	b	LoopFillZerobss
 800203c:	e002      	b.n	8002044 <LoopFillZerobss>

0800203e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800203e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002040:	f842 3b04 	str.w	r3, [r2], #4

08002044 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <LoopForever+0x16>)
	cmp	r2, r3
 8002046:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002048:	d3f9      	bcc.n	800203e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204a:	f009 fc33 	bl	800b8b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800204e:	f7ff f82d 	bl	80010ac <main>

08002052 <LoopForever>:

LoopForever:
    b LoopForever
 8002052:	e7fe      	b.n	8002052 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002054:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002058:	0800ede4 	.word	0x0800ede4
	ldr	r0, =_sdata
 800205c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002060:	20000320 	.word	0x20000320
	ldr	r2, =_sbss
 8002064:	20000320 	.word	0x20000320
	ldr	r3, = _ebss
 8002068:	200105d4 	.word	0x200105d4

0800206c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC1_2_IRQHandler>
	...

08002070 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	460a      	mov	r2, r1
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	4613      	mov	r3, r2
 800207e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <BSP_PB_Init+0xa0>)
 8002082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002084:	4a22      	ldr	r2, [pc, #136]	; (8002110 <BSP_PB_Init+0xa0>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208c:	4b20      	ldr	r3, [pc, #128]	; (8002110 <BSP_PB_Init+0xa0>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002098:	79bb      	ldrb	r3, [r7, #6]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d112      	bne.n	80020c4 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800209e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a2:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80020a8:	2301      	movs	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	4a18      	ldr	r2, [pc, #96]	; (8002114 <BSP_PB_Init+0xa4>)
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	f107 020c 	add.w	r2, r7, #12
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fdd0 	bl	8005c64 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80020c4:	79bb      	ldrb	r3, [r7, #6]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d11e      	bne.n	8002108 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80020ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ce:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <BSP_PB_Init+0xa8>)
 80020da:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <BSP_PB_Init+0xa4>)
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	f107 020c 	add.w	r2, r7, #12
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fdba 	bl	8005c64 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80020f0:	2328      	movs	r3, #40	; 0x28
 80020f2:	b25b      	sxtb	r3, r3
 80020f4:	2200      	movs	r2, #0
 80020f6:	210f      	movs	r1, #15
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 fd89 	bl	8005c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80020fe:	2328      	movs	r3, #40	; 0x28
 8002100:	b25b      	sxtb	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fda0 	bl	8005c48 <HAL_NVIC_EnableIRQ>
  }
}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	2000008c 	.word	0x2000008c
 8002118:	10110000 	.word	0x10110000

0800211c <BSP_PB_GetState>:
  *                 This parameter can be one of the following values:
  *                   @arg  BUTTON_USER  User Push Button 
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	4a06      	ldr	r2, [pc, #24]	; (8002144 <BSP_PB_GetState+0x28>)
 800212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f004 f833 	bl	80061a0 <HAL_GPIO_ReadPin>
 800213a:	4603      	mov	r3, r0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	2000008c 	.word	0x2000008c

08002148 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <I2Cx_MspInit+0xa8>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <I2Cx_MspInit+0xa8>)
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215c:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <I2Cx_MspInit+0xa8>)
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002168:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800216c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800216e:	2312      	movs	r3, #18
 8002170:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002172:	2301      	movs	r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800217a:	2304      	movs	r3, #4
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	481b      	ldr	r0, [pc, #108]	; (80021f4 <I2Cx_MspInit+0xac>)
 8002186:	f003 fd6d 	bl	8005c64 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4818      	ldr	r0, [pc, #96]	; (80021f4 <I2Cx_MspInit+0xac>)
 8002192:	f003 fd67 	bl	8005c64 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <I2Cx_MspInit+0xa8>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <I2Cx_MspInit+0xa8>)
 800219c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021a0:	6593      	str	r3, [r2, #88]	; 0x58
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <I2Cx_MspInit+0xa8>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <I2Cx_MspInit+0xa8>)
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <I2Cx_MspInit+0xa8>)
 80021b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <I2Cx_MspInit+0xa8>)
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <I2Cx_MspInit+0xa8>)
 80021c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80021c4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	210f      	movs	r1, #15
 80021ca:	2021      	movs	r0, #33	; 0x21
 80021cc:	f003 fd20 	bl	8005c10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80021d0:	2021      	movs	r0, #33	; 0x21
 80021d2:	f003 fd39 	bl	8005c48 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	210f      	movs	r1, #15
 80021da:	2022      	movs	r0, #34	; 0x22
 80021dc:	f003 fd18 	bl	8005c10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80021e0:	2022      	movs	r0, #34	; 0x22
 80021e2:	f003 fd31 	bl	8005c48 <HAL_NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	48000400 	.word	0x48000400

080021f8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <I2Cx_Init+0x54>)
 8002204:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <I2Cx_Init+0x58>)
 800220a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff89 	bl	8002148 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f004 f805 	bl	8006246 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800223c:	2100      	movs	r1, #0
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f004 fd24 	bl	8006c8c <HAL_I2CEx_ConfigAnalogFilter>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40005800 	.word	0x40005800
 8002250:	00702681 	.word	0x00702681

08002254 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af04      	add	r7, sp, #16
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	4608      	mov	r0, r1
 800225e:	4611      	mov	r1, r2
 8002260:	461a      	mov	r2, r3
 8002262:	4603      	mov	r3, r0
 8002264:	72fb      	strb	r3, [r7, #11]
 8002266:	460b      	mov	r3, r1
 8002268:	813b      	strh	r3, [r7, #8]
 800226a:	4613      	mov	r3, r2
 800226c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002272:	7afb      	ldrb	r3, [r7, #11]
 8002274:	b299      	uxth	r1, r3
 8002276:	88f8      	ldrh	r0, [r7, #6]
 8002278:	893a      	ldrh	r2, [r7, #8]
 800227a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227e:	9302      	str	r3, [sp, #8]
 8002280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4603      	mov	r3, r0
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f004 f9ae 	bl	80065ec <HAL_I2C_Mem_Read>
 8002290:	4603      	mov	r3, r0
 8002292:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	4619      	mov	r1, r3
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f832 	bl	8002308 <I2Cx_Error>
  }
  return status;
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b08a      	sub	sp, #40	; 0x28
 80022b2:	af04      	add	r7, sp, #16
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	4608      	mov	r0, r1
 80022b8:	4611      	mov	r1, r2
 80022ba:	461a      	mov	r2, r3
 80022bc:	4603      	mov	r3, r0
 80022be:	72fb      	strb	r3, [r7, #11]
 80022c0:	460b      	mov	r3, r1
 80022c2:	813b      	strh	r3, [r7, #8]
 80022c4:	4613      	mov	r3, r2
 80022c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	b299      	uxth	r1, r3
 80022d0:	88f8      	ldrh	r0, [r7, #6]
 80022d2:	893a      	ldrh	r2, [r7, #8]
 80022d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d8:	9302      	str	r3, [sp, #8]
 80022da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	4603      	mov	r3, r0
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f004 f86d 	bl	80063c4 <HAL_I2C_Mem_Write>
 80022ea:	4603      	mov	r3, r0
 80022ec:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	4619      	mov	r1, r3
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f805 	bl	8002308 <I2Cx_Error>
  }
  return status;
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f004 f825 	bl	8006364 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ff6c 	bl	80021f8 <I2Cx_Init>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <SENSOR_IO_Init+0x10>)
 800232e:	f7ff ff63 	bl	80021f8 <I2Cx_Init>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20010574 	.word	0x20010574

0800233c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af02      	add	r7, sp, #8
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	460b      	mov	r3, r1
 8002348:	71bb      	strb	r3, [r7, #6]
 800234a:	4613      	mov	r3, r2
 800234c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800234e:	79bb      	ldrb	r3, [r7, #6]
 8002350:	b29a      	uxth	r2, r3
 8002352:	79f9      	ldrb	r1, [r7, #7]
 8002354:	2301      	movs	r3, #1
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	1d7b      	adds	r3, r7, #5
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2301      	movs	r3, #1
 800235e:	4803      	ldr	r0, [pc, #12]	; (800236c <SENSOR_IO_Write+0x30>)
 8002360:	f7ff ffa5 	bl	80022ae <I2Cx_WriteMultiple>
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20010574 	.word	0x20010574

08002370 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af02      	add	r7, sp, #8
 8002376:	4603      	mov	r3, r0
 8002378:	460a      	mov	r2, r1
 800237a:	71fb      	strb	r3, [r7, #7]
 800237c:	4613      	mov	r3, r2
 800237e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002384:	79bb      	ldrb	r3, [r7, #6]
 8002386:	b29a      	uxth	r2, r3
 8002388:	79f9      	ldrb	r1, [r7, #7]
 800238a:	2301      	movs	r3, #1
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	f107 030f 	add.w	r3, r7, #15
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2301      	movs	r3, #1
 8002396:	4804      	ldr	r0, [pc, #16]	; (80023a8 <SENSOR_IO_Read+0x38>)
 8002398:	f7ff ff5c 	bl	8002254 <I2Cx_ReadMultiple>

  return read_value;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20010574 	.word	0x20010574

080023ac <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	603a      	str	r2, [r7, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
 80023ba:	460b      	mov	r3, r1
 80023bc:	71bb      	strb	r3, [r7, #6]
 80023be:	4613      	mov	r3, r2
 80023c0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80023c2:	79bb      	ldrb	r3, [r7, #6]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	79f9      	ldrb	r1, [r7, #7]
 80023c8:	88bb      	ldrh	r3, [r7, #4]
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2301      	movs	r3, #1
 80023d2:	4804      	ldr	r0, [pc, #16]	; (80023e4 <SENSOR_IO_ReadMultiple+0x38>)
 80023d4:	f7ff ff3e 	bl	8002254 <I2Cx_ReadMultiple>
 80023d8:	4603      	mov	r3, r0
 80023da:	b29b      	uxth	r3, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20010574 	.word	0x20010574

080023e8 <BSP_I2C2_Init>:
/**
  * @brief  Initialize BSP I2C2.
  * @retval BSP status.
  */
int32_t BSP_I2C2_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <BSP_I2C2_Init+0x70>)
 80023f4:	4a19      	ldr	r2, [pc, #100]	; (800245c <BSP_I2C2_Init+0x74>)
 80023f6:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <BSP_I2C2_Init+0x78>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11b      	bne.n	8002438 <BSP_I2C2_Init+0x50>
  {
    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8002400:	4815      	ldr	r0, [pc, #84]	; (8002458 <BSP_I2C2_Init+0x70>)
 8002402:	f004 fa0d 	bl	8006820 <HAL_I2C_GetState>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d115      	bne.n	8002438 <BSP_I2C2_Init+0x50>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C2_MspInit(&hbus_i2c2);
 800240c:	4812      	ldr	r0, [pc, #72]	; (8002458 <BSP_I2C2_Init+0x70>)
 800240e:	f000 f8b3 	bl	8002578 <I2C2_MspInit>

      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2C2), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8002412:	2080      	movs	r0, #128	; 0x80
 8002414:	f005 fe4e 	bl	80080b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002418:	4603      	mov	r3, r0
 800241a:	4912      	ldr	r1, [pc, #72]	; (8002464 <BSP_I2C2_Init+0x7c>)
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f9c7 	bl	80027b0 <I2C_GetTiming>
 8002422:	4603      	mov	r3, r0
 8002424:	4619      	mov	r1, r3
 8002426:	480c      	ldr	r0, [pc, #48]	; (8002458 <BSP_I2C2_Init+0x70>)
 8002428:	f000 f876 	bl	8002518 <MX_I2C2_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <BSP_I2C2_Init+0x50>
      {
        status = BSP_ERROR_BUS_FAILURE;
 8002432:	f06f 0307 	mvn.w	r3, #7
 8002436:	607b      	str	r3, [r7, #4]
        }
      }
#endif
    }
  }
  if (I2c2InitCounter < 0xFFFFFFFFU)
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <BSP_I2C2_Init+0x78>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d004      	beq.n	800244c <BSP_I2C2_Init+0x64>
  {
    I2c2InitCounter++;
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <BSP_I2C2_Init+0x78>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	4a05      	ldr	r2, [pc, #20]	; (8002460 <BSP_I2C2_Init+0x78>)
 800244a:	6013      	str	r3, [r2, #0]
  }
  return status;
 800244c:	687b      	ldr	r3, [r7, #4]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000670 	.word	0x20000670
 800245c:	40005800 	.word	0x40005800
 8002460:	2000066c 	.word	0x2000066c
 8002464:	000186a0 	.word	0x000186a0

08002468 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize BSP I2C2.
  * @retval BSP status.
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]

  if (I2c2InitCounter > 0U)
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <BSP_I2C2_DeInit+0x48>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d014      	beq.n	80024a4 <BSP_I2C2_DeInit+0x3c>
  {
    I2c2InitCounter--;
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <BSP_I2C2_DeInit+0x48>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3b01      	subs	r3, #1
 8002480:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <BSP_I2C2_DeInit+0x48>)
 8002482:	6013      	str	r3, [r2, #0]
    if (I2c2InitCounter == 0U)
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <BSP_I2C2_DeInit+0x48>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <BSP_I2C2_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C2_MspDeInit(&hbus_i2c2);
 800248c:	4809      	ldr	r0, [pc, #36]	; (80024b4 <BSP_I2C2_DeInit+0x4c>)
 800248e:	f000 f8cb 	bl	8002628 <I2C2_MspDeInit>
#endif

      /* De-Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8002492:	4808      	ldr	r0, [pc, #32]	; (80024b4 <BSP_I2C2_DeInit+0x4c>)
 8002494:	f003 ff66 	bl	8006364 <HAL_I2C_DeInit>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <BSP_I2C2_DeInit+0x3c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 800249e:	f06f 0303 	mvn.w	r3, #3
 80024a2:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return status;
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000066c 	.word	0x2000066c
 80024b4:	20000670 	.word	0x20000670

080024b8 <BSP_I2C2_WriteReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60ba      	str	r2, [r7, #8]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	81fb      	strh	r3, [r7, #14]
 80024c6:	460b      	mov	r3, r1
 80024c8:	81bb      	strh	r3, [r7, #12]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  return I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 80024ce:	89b9      	ldrh	r1, [r7, #12]
 80024d0:	89f8      	ldrh	r0, [r7, #14]
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2201      	movs	r2, #1
 80024da:	f000 f8c1 	bl	8002660 <I2C2_WriteReg>
 80024de:	4603      	mov	r3, r0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60ba      	str	r2, [r7, #8]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	81fb      	strh	r3, [r7, #14]
 80024f6:	460b      	mov	r3, r1
 80024f8:	81bb      	strh	r3, [r7, #12]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 80024fe:	89b9      	ldrh	r1, [r7, #12]
 8002500:	89f8      	ldrh	r0, [r7, #14]
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2201      	movs	r2, #1
 800250a:	f000 f8fd 	bl	8002708 <I2C2_ReadReg>
 800250e:	4603      	mov	r3, r0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <MX_I2C2_Init>:
  * @param  hI2c I2C handle.
  * @param  timing I2C timing.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  hI2c->Init.Timing           = timing;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	621a      	str	r2, [r3, #32]

  return HAL_I2C_Init(hI2c);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f003 fe77 	bl	8006246 <HAL_I2C_Init>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <BSP_GetTick>:
/**
  * @brief  Provide a tick value in millisecond.
  * @retval Tick value.
  */
int32_t BSP_GetTick(void)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
  uint32_t ret;
  ret = HAL_GetTick();
 8002568:	f003 fa8e 	bl	8005a88 <HAL_GetTick>
 800256c:	6078      	str	r0, [r7, #4]
  return (int32_t)ret;
 800256e:	687b      	ldr	r3, [r7, #4]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <I2C2_MspInit>:
  * @brief  Initialize I2C2 MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <I2C2_MspInit+0xa8>)
 8002582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <I2C2_MspInit+0xa8>)
 8002586:	f043 0302 	orr.w	r3, r3, #2
 800258a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <I2C2_MspInit+0xa8>)
 800258e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	693b      	ldr	r3, [r7, #16]
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <I2C2_MspInit+0xa8>)
 800259a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259c:	4a20      	ldr	r2, [pc, #128]	; (8002620 <I2C2_MspInit+0xa8>)
 800259e:	f043 0302 	orr.w	r3, r3, #2
 80025a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <I2C2_MspInit+0xa8>)
 80025a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C2_SCL_GPIO_PIN;
 80025b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80025b6:	2312      	movs	r3, #18
 80025b8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80025be:	2302      	movs	r3, #2
 80025c0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SCL_GPIO_AF;
 80025c2:	2304      	movs	r3, #4
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4815      	ldr	r0, [pc, #84]	; (8002624 <I2C2_MspInit+0xac>)
 80025ce:	f003 fb49 	bl	8005c64 <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C2_SDA_GPIO_PIN;
 80025d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025d6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C2_SDA_GPIO_AF;
 80025d8:	2304      	movs	r3, #4
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	4619      	mov	r1, r3
 80025e2:	4810      	ldr	r0, [pc, #64]	; (8002624 <I2C2_MspInit+0xac>)
 80025e4:	f003 fb3e 	bl	8005c64 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <I2C2_MspInit+0xa8>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <I2C2_MspInit+0xa8>)
 80025ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025f2:	6593      	str	r3, [r2, #88]	; 0x58
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <I2C2_MspInit+0xa8>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <I2C2_MspInit+0xa8>)
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	4a06      	ldr	r2, [pc, #24]	; (8002620 <I2C2_MspInit+0xa8>)
 8002606:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800260a:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <I2C2_MspInit+0xa8>)
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	4a03      	ldr	r2, [pc, #12]	; (8002620 <I2C2_MspInit+0xa8>)
 8002612:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002616:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002618:	bf00      	nop
 800261a:	3728      	adds	r7, #40	; 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	48000400 	.word	0x48000400

08002628 <I2C2_MspDeInit>:
  * @brief  DeInitialize I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* De-initialiaze I2C SCL and SDA */
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002634:	4808      	ldr	r0, [pc, #32]	; (8002658 <I2C2_MspDeInit+0x30>)
 8002636:	f003 fcbf 	bl	8005fb8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 800263a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800263e:	4806      	ldr	r0, [pc, #24]	; (8002658 <I2C2_MspDeInit+0x30>)
 8002640:	f003 fcba 	bl	8005fb8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <I2C2_MspDeInit+0x34>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <I2C2_MspDeInit+0x34>)
 800264a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800264e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	48000400 	.word	0x48000400
 800265c:	40021000 	.word	0x40021000

08002660 <I2C2_WriteReg>:
  * @param  pData      The target register values to be written.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af04      	add	r7, sp, #16
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	4603      	mov	r3, r0
 800266a:	81fb      	strh	r3, [r7, #14]
 800266c:	460b      	mov	r3, r1
 800266e:	81bb      	strh	r3, [r7, #12]
 8002670:	4613      	mov	r3, r2
 8002672:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C2_TIMEOUT) != HAL_OK)
 8002678:	8978      	ldrh	r0, [r7, #10]
 800267a:	89ba      	ldrh	r2, [r7, #12]
 800267c:	89f9      	ldrh	r1, [r7, #14]
 800267e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002682:	9302      	str	r3, [sp, #8]
 8002684:	8c3b      	ldrh	r3, [r7, #32]
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	4603      	mov	r3, r0
 800268e:	481d      	ldr	r0, [pc, #116]	; (8002704 <I2C2_WriteReg+0xa4>)
 8002690:	f003 fe98 	bl	80063c4 <HAL_I2C_Mem_Write>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02f      	beq.n	80026fa <I2C2_WriteReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c2);
 800269a:	481a      	ldr	r0, [pc, #104]	; (8002704 <I2C2_WriteReg+0xa4>)
 800269c:	f004 f8ce 	bl	800683c <HAL_I2C_GetError>
 80026a0:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <I2C2_WriteReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 80026ac:	f06f 0366 	mvn.w	r3, #102	; 0x66
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e022      	b.n	80026fa <I2C2_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <I2C2_WriteReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 80026be:	f06f 0364 	mvn.w	r3, #100	; 0x64
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e019      	b.n	80026fa <I2C2_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <I2C2_WriteReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80026d0:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e010      	b.n	80026fa <I2C2_WriteReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d104      	bne.n	80026ec <I2C2_WriteReg+0x8c>
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <I2C2_WriteReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 80026ec:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e002      	b.n	80026fa <I2C2_WriteReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 80026f4:	f06f 0303 	mvn.w	r3, #3
 80026f8:	617b      	str	r3, [r7, #20]
    }    
  }

  return status;
 80026fa:	697b      	ldr	r3, [r7, #20]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000670 	.word	0x20000670

08002708 <I2C2_ReadReg>:
  * @param  pData      The target register values to be read.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af04      	add	r7, sp, #16
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	4603      	mov	r3, r0
 8002712:	81fb      	strh	r3, [r7, #14]
 8002714:	460b      	mov	r3, r1
 8002716:	81bb      	strh	r3, [r7, #12]
 8002718:	4613      	mov	r3, r2
 800271a:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C2_TIMEOUT) != HAL_OK)
 8002720:	8978      	ldrh	r0, [r7, #10]
 8002722:	89ba      	ldrh	r2, [r7, #12]
 8002724:	89f9      	ldrh	r1, [r7, #14]
 8002726:	f242 7310 	movw	r3, #10000	; 0x2710
 800272a:	9302      	str	r3, [sp, #8]
 800272c:	8c3b      	ldrh	r3, [r7, #32]
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	4603      	mov	r3, r0
 8002736:	481d      	ldr	r0, [pc, #116]	; (80027ac <I2C2_ReadReg+0xa4>)
 8002738:	f003 ff58 	bl	80065ec <HAL_I2C_Mem_Read>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d02f      	beq.n	80027a2 <I2C2_ReadReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c2);
 8002742:	481a      	ldr	r0, [pc, #104]	; (80027ac <I2C2_ReadReg+0xa4>)
 8002744:	f004 f87a 	bl	800683c <HAL_I2C_GetError>
 8002748:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <I2C2_ReadReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 8002754:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e022      	b.n	80027a2 <I2C2_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <I2C2_ReadReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 8002766:	f06f 0364 	mvn.w	r3, #100	; 0x64
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	e019      	b.n	80027a2 <I2C2_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <I2C2_ReadReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002778:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	e010      	b.n	80027a2 <I2C2_ReadReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d104      	bne.n	8002794 <I2C2_ReadReg+0x8c>
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <I2C2_ReadReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 8002794:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e002      	b.n	80027a2 <I2C2_ReadReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 800279c:	f06f 0303 	mvn.w	r3, #3
 80027a0:	617b      	str	r3, [r7, #20]
    }    
  }

  return status;
 80027a2:	697b      	ldr	r3, [r7, #20]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000670 	.word	0x20000670

080027b0 <I2C_GetTiming>:
  * @param  clock_src_hz I2C clock source in Hz.
  * @param  i2cfreq_hz Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_hz, uint32_t i2cfreq_hz)
{
 80027b0:	b5b0      	push	{r4, r5, r7, lr}
 80027b2:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	6018      	str	r0, [r3, #0]
 80027bc:	463b      	mov	r3, r7
 80027be:	6019      	str	r1, [r3, #0]
  uint32_t ret = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  uint32_t speed;
  uint32_t is_valid_speed = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
  uint32_t p_prev = PRESC_MAX;
 80027cc:	2310      	movs	r3, #16
 80027ce:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
  int32_t  sdadel_min, sdadel_max;
  int32_t  scldel_min;
  struct   i2c_timings_s *s;
  struct   i2c_timings_s valid_timing[VALID_PRESC_NBR];
  uint16_t p, l, a, h;
  uint32_t valid_timing_nbr = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec

  const struct i2c_specs_s i2c_specs[3] =
 80027d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027dc:	4ad1      	ldr	r2, [pc, #836]	; (8002b24 <I2C_GetTiming+0x374>)
 80027de:	4618      	mov	r0, r3
 80027e0:	4611      	mov	r1, r2
 80027e2:	2378      	movs	r3, #120	; 0x78
 80027e4:	461a      	mov	r2, r3
 80027e6:	f009 f88c 	bl	800b902 <memcpy>
      .sudat_min = 50,
      .l_min = 500,
      .h_min = 260,
    }
  };
  const struct i2c_setup_s i2c_user_setup[3] =
 80027ea:	f107 030c 	add.w	r3, r7, #12
 80027ee:	4ace      	ldr	r2, [pc, #824]	; (8002b28 <I2C_GetTiming+0x378>)
 80027f0:	461c      	mov	r4, r3
 80027f2:	4615      	mov	r5, r2
 80027f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      .dnf = 0,
      .analog_filter = 1
    }
  };

  for (speed = 0; speed <= (uint32_t) I2C_SPEED_FAST_PLUS; speed++)
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800280a:	e026      	b.n	800285a <I2C_GetTiming+0xaa>
  {
    if ((i2cfreq_hz >= i2c_specs[speed].rate_min) && (i2cfreq_hz <= i2c_specs[speed].rate_max))
 800280c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002810:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	3304      	adds	r3, #4
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	463a      	mov	r2, r7
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d312      	bcc.n	8002850 <I2C_GetTiming+0xa0>
 800282a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800282e:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	3308      	adds	r3, #8
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	463a      	mov	r2, r7
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d803      	bhi.n	8002850 <I2C_GetTiming+0xa0>
    {
      is_valid_speed = 1;
 8002848:	2301      	movs	r3, #1
 800284a:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
      break;
 800284e:	e008      	b.n	8002862 <I2C_GetTiming+0xb2>
  for (speed = 0; speed <= (uint32_t) I2C_SPEED_FAST_PLUS; speed++)
 8002850:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002854:	3301      	adds	r3, #1
 8002856:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800285a:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800285e:	2b02      	cmp	r3, #2
 8002860:	d9d4      	bls.n	800280c <I2C_GetTiming+0x5c>
    }
  }

  if ((is_valid_speed != 0U) && (speed  <= (uint32_t) I2C_SPEED_FAST_PLUS))
 8002862:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 82a1 	beq.w	8002dae <I2C_GetTiming+0x5fe>
 800286c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002870:	2b02      	cmp	r3, #2
 8002872:	f200 829c 	bhi.w	8002dae <I2C_GetTiming+0x5fe>
  {
    i2cclk = DIV_ROUND_CLOSEST(NSEC_PER_SEC, clock_src_hz);
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	085a      	lsrs	r2, r3, #1
 800287c:	4bab      	ldr	r3, [pc, #684]	; (8002b2c <I2C_GetTiming+0x37c>)
 800287e:	4413      	add	r3, r2
 8002880:	1d3a      	adds	r2, r7, #4
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	fbb3 f3f2 	udiv	r3, r3, r2
 8002888:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    i2cspeed = DIV_ROUND_CLOSEST(NSEC_PER_SEC, i2cfreq_hz);
 800288c:	463b      	mov	r3, r7
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	085a      	lsrs	r2, r3, #1
 8002892:	4ba6      	ldr	r3, [pc, #664]	; (8002b2c <I2C_GetTiming+0x37c>)
 8002894:	4413      	add	r3, r2
 8002896:	463a      	mov	r2, r7
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	fbb3 f3f2 	udiv	r3, r3, r2
 800289e:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    clk_error_prev = i2cspeed;
 80028a2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80028a6:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304

    /* Analog and Digital Filters */
    af_delay_min = (i2c_user_setup[speed].analog_filter == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 80028aa:	f107 020c 	add.w	r2, r7, #12
 80028ae:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	4413      	add	r3, r2
 80028b6:	330c      	adds	r3, #12
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <I2C_GetTiming+0x112>
 80028be:	2332      	movs	r3, #50	; 0x32
 80028c0:	e000      	b.n	80028c4 <I2C_GetTiming+0x114>
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
    af_delay_max = (i2c_user_setup[speed].analog_filter == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 80028c8:	f107 020c 	add.w	r2, r7, #12
 80028cc:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	4413      	add	r3, r2
 80028d4:	330c      	adds	r3, #12
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d102      	bne.n	80028e2 <I2C_GetTiming+0x132>
 80028dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80028e0:	e000      	b.n	80028e4 <I2C_GetTiming+0x134>
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
    dnf_delay    = i2c_user_setup[speed].dnf * i2cclk;
 80028e8:	f107 020c 	add.w	r2, r7, #12
 80028ec:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	4413      	add	r3, r2
 80028f4:	3308      	adds	r3, #8
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    sdadel_min   = (int32_t) i2c_user_setup[speed].fall_time - (int32_t) i2c_specs[speed].hddat_min - (int32_t) af_delay_min - (((int32_t) i2c_user_setup[speed].dnf + 3) * (int32_t) i2cclk);
 8002904:	f107 020c 	add.w	r2, r7, #12
 8002908:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800291a:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	3314      	adds	r3, #20
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	1ac2      	subs	r2, r0, r3
 800292e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	f107 010c 	add.w	r1, r7, #12
 8002938:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	440b      	add	r3, r1
 8002940:	3308      	adds	r3, #8
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3303      	adds	r3, #3
 8002946:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    sdadel_max   = (int32_t) i2c_specs[speed].vddat_max - (int32_t) i2c_user_setup[speed].rise_time - (int32_t) af_delay_max - (((int32_t) i2c_user_setup[speed].dnf + 4) * (int32_t) i2cclk);
 8002954:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002958:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	3318      	adds	r3, #24
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	f107 020c 	add.w	r2, r7, #12
 8002970:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	4413      	add	r3, r2
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	1aca      	subs	r2, r1, r3
 800297c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8002980:	1ad2      	subs	r2, r2, r3
 8002982:	f107 010c 	add.w	r1, r7, #12
 8002986:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	440b      	add	r3, r1
 800298e:	3308      	adds	r3, #8
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3304      	adds	r3, #4
 8002994:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    scldel_min   = (int32_t) i2c_user_setup[speed].rise_time + (int32_t) i2c_specs[speed].sudat_min;
 80029a2:	f107 020c 	add.w	r2, r7, #12
 80029a6:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	4413      	add	r3, r2
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80029b6:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	331c      	adds	r3, #28
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4403      	add	r3, r0
 80029ca:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
    if (sdadel_min < 0)
 80029ce:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	da02      	bge.n	80029dc <I2C_GetTiming+0x22c>
    {
      sdadel_min = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    }
    if (sdadel_max < 0)
 80029dc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	da02      	bge.n	80029ea <I2C_GetTiming+0x23a>
    {
      sdadel_max = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    }

    /* Compute possible values for PRESC, SCLDEL and SDADEL */
    for (p = 0; p < PRESC_MAX; p++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	f8a7 32f6 	strh.w	r3, [r7, #758]	; 0x2f6
 80029f0:	e08b      	b.n	8002b0a <I2C_GetTiming+0x35a>
    {
      for (l = 0; l < SCLDEL_MAX; l++)
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 80029f8:	e07d      	b.n	8002af6 <I2C_GetTiming+0x346>
      {
        int32_t scldel = ((int32_t) l + 1) * ((int32_t) p + 1) * (int32_t) i2cclk;
 80029fa:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 80029fe:	3301      	adds	r3, #1
 8002a00:	f8b7 22f6 	ldrh.w	r2, [r7, #758]	; 0x2f6
 8002a04:	3201      	adds	r2, #1
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
        if (scldel < scldel_min)
 8002a16:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8002a1a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	db63      	blt.n	8002aea <I2C_GetTiming+0x33a>
        {
          continue;
        }
        for (a = 0; a < SDADEL_MAX; a++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
 8002a28:	e05a      	b.n	8002ae0 <I2C_GetTiming+0x330>
        {
          int32_t sdadel = (((int32_t) a * ((int32_t) p + 1)) + 1) * (int32_t) i2cclk;
 8002a2a:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002a2e:	f8b7 22f6 	ldrh.w	r2, [r7, #758]	; 0x2f6
 8002a32:	3201      	adds	r2, #1
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
          if (((sdadel >= sdadel_min) && (sdadel <= sdadel_max))&& (p != p_prev))
 8002a46:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8002a4a:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	db41      	blt.n	8002ad6 <I2C_GetTiming+0x326>
 8002a52:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8002a56:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	dc3b      	bgt.n	8002ad6 <I2C_GetTiming+0x326>
 8002a5e:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002a62:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d035      	beq.n	8002ad6 <I2C_GetTiming+0x326>
          {
            valid_timing[valid_timing_nbr].presc = (uint8_t) p;
 8002a6a:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002a6e:	b2d8      	uxtb	r0, r3
 8002a70:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002a74:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	440b      	add	r3, r1
 8002a80:	4602      	mov	r2, r0
 8002a82:	701a      	strb	r2, [r3, #0]
            valid_timing[valid_timing_nbr].scldel = (uint8_t) l;
 8002a84:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002a88:	b2d8      	uxtb	r0, r3
 8002a8a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002a8e:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	440b      	add	r3, r1
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	701a      	strb	r2, [r3, #0]
            valid_timing[valid_timing_nbr].sdadel = (uint8_t) a;
 8002aa0:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002aa4:	b2d8      	uxtb	r0, r3
 8002aa6:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002aaa:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	4602      	mov	r2, r0
 8002aba:	701a      	strb	r2, [r3, #0]
            p_prev = p;
 8002abc:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002ac0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
            valid_timing_nbr ++;
 8002ac4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
            if(valid_timing_nbr >= VALID_PRESC_NBR)
 8002ace:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002ad2:	2b63      	cmp	r3, #99	; 0x63
 8002ad4:	d824      	bhi.n	8002b20 <I2C_GetTiming+0x370>
        for (a = 0; a < SDADEL_MAX; a++)
 8002ad6:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002ada:	3301      	adds	r3, #1
 8002adc:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
 8002ae0:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d9a0      	bls.n	8002a2a <I2C_GetTiming+0x27a>
 8002ae8:	e000      	b.n	8002aec <I2C_GetTiming+0x33c>
          continue;
 8002aea:	bf00      	nop
      for (l = 0; l < SCLDEL_MAX; l++)
 8002aec:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002af0:	3301      	adds	r3, #1
 8002af2:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 8002af6:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	f67f af7d 	bls.w	80029fa <I2C_GetTiming+0x24a>
    for (p = 0; p < PRESC_MAX; p++)
 8002b00:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002b04:	3301      	adds	r3, #1
 8002b06:	f8a7 32f6 	strh.w	r3, [r7, #758]	; 0x2f6
 8002b0a:	f8b7 32f6 	ldrh.w	r3, [r7, #758]	; 0x2f6
 8002b0e:	2b0f      	cmp	r3, #15
 8002b10:	f67f af6f 	bls.w	80029f2 <I2C_GetTiming+0x242>
          }
        }
      }
    }

    if (valid_timing_nbr == 0U)
 8002b14:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <I2C_GetTiming+0x380>
    {
      return 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e148      	b.n	8002db2 <I2C_GetTiming+0x602>
              goto Compute_scll_sclh;
 8002b20:	bf00      	nop
 8002b22:	e006      	b.n	8002b32 <I2C_GetTiming+0x382>
 8002b24:	0800e8fc 	.word	0x0800e8fc
 8002b28:	0800e974 	.word	0x0800e974
 8002b2c:	3b9aca00 	.word	0x3b9aca00
    }

Compute_scll_sclh:
 8002b30:	bf00      	nop
    tsync = af_delay_min + dnf_delay + (2U * i2cclk);
 8002b32:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8002b36:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002b3a:	441a      	add	r2, r3
 8002b3c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4413      	add	r3, r2
 8002b44:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    s = NULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
    clk_max = NSEC_PER_SEC / i2c_specs[speed].rate_min;
 8002b4e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002b52:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	3304      	adds	r3, #4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a95      	ldr	r2, [pc, #596]	; (8002dbc <I2C_GetTiming+0x60c>)
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    clk_min = NSEC_PER_SEC / i2c_specs[speed].rate_max;
 8002b6e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002b72:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	3308      	adds	r3, #8
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a8d      	ldr	r2, [pc, #564]	; (8002dbc <I2C_GetTiming+0x60c>)
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
    *   (SCL Low Period - Analog/Digital filters) / 4.
    * - SCL High Period has to be lower than High Period of the SCL Clock
    *   defined by I2C Specification
    * - I2C Clock has to be lower than SCL High Period
    */
    for (uint32_t count = 0; count < valid_timing_nbr; count++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8002b94:	e0e1      	b.n	8002d5a <I2C_GetTiming+0x5aa>
    {
      uint32_t prescaler = ((uint32_t) valid_timing[count].presc + 1U) * i2cclk;
 8002b96:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002b9a:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
      for (l = 0; l < SCLL_MAX; l++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 8002bbc:	e0c3      	b.n	8002d46 <I2C_GetTiming+0x596>
      {
        uint32_t tscl_l = (((uint32_t) l + 1U) * prescaler) + tsync;
 8002bbe:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
        if ((tscl_l < i2c_specs[speed].l_min) || (i2cclk >= ((tscl_l - af_delay_min - dnf_delay) / 4U)))
 8002bd6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002bda:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	3320      	adds	r3, #32
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	f0c0 80a2 	bcc.w	8002d3a <I2C_GetTiming+0x58a>
 8002bf6:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8002bfa:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8002bfe:	1ad2      	subs	r2, r2, r3
 8002c00:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f080 8094 	bcs.w	8002d3a <I2C_GetTiming+0x58a>
        {
          continue;
        }
        for (h = 0; h < SCLH_MAX; h++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8a7 32f0 	strh.w	r3, [r7, #752]	; 0x2f0
 8002c18:	e089      	b.n	8002d2e <I2C_GetTiming+0x57e>
        {
          uint32_t tscl_h = (((uint32_t) h + 1U) * prescaler) + tsync;
 8002c1a:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
          uint32_t tscl = tscl_l + tscl_h + i2c_user_setup[speed].rise_time + i2c_user_setup[speed].fall_time;
 8002c32:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8002c36:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002c3a:	441a      	add	r2, r3
 8002c3c:	f107 010c 	add.w	r1, r7, #12
 8002c40:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	440b      	add	r3, r1
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	441a      	add	r2, r3
 8002c4c:	f107 010c 	add.w	r1, r7, #12
 8002c50:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	440b      	add	r3, r1
 8002c58:	3304      	adds	r3, #4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= i2c_specs[speed].h_min) && (i2cclk < tscl_h))
 8002c62:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002c66:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d35a      	bcc.n	8002d24 <I2C_GetTiming+0x574>
 8002c6e:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002c72:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d854      	bhi.n	8002d24 <I2C_GetTiming+0x574>
 8002c7a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002c7e:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3324      	adds	r3, #36	; 0x24
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d345      	bcc.n	8002d24 <I2C_GetTiming+0x574>
 8002c98:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8002c9c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d23f      	bcs.n	8002d24 <I2C_GetTiming+0x574>
          {
            int32_t clk_error = (int32_t) tscl - (int32_t) i2cspeed;
 8002ca4:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002ca8:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            if (clk_error < 0)
 8002cb2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da04      	bge.n	8002cc4 <I2C_GetTiming+0x514>
            {
              clk_error = -clk_error;
 8002cba:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8002cbe:	425b      	negs	r3, r3
 8002cc0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            }
            /* save the solution with the lowest clock error */
            if (clk_error < (int32_t) clk_error_prev)
 8002cc4:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8002cc8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	da29      	bge.n	8002d24 <I2C_GetTiming+0x574>
            {
              clk_error_prev = (uint32_t) clk_error;
 8002cd0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8002cd4:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
              valid_timing[count].scll = (uint8_t) l;
 8002cd8:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002cdc:	b2d8      	uxtb	r0, r3
 8002cde:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002ce2:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	440b      	add	r3, r1
 8002cee:	3304      	adds	r3, #4
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	701a      	strb	r2, [r3, #0]
              valid_timing[count].sclh = (uint8_t) h;
 8002cf4:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 8002cf8:	b2d8      	uxtb	r0, r3
 8002cfa:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002cfe:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	3303      	adds	r3, #3
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	701a      	strb	r2, [r3, #0]
              s = &valid_timing[count];
 8002d10:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002d14:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
        for (h = 0; h < SCLH_MAX; h++)
 8002d24:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f8a7 32f0 	strh.w	r3, [r7, #752]	; 0x2f0
 8002d2e:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 8002d32:	2bff      	cmp	r3, #255	; 0xff
 8002d34:	f67f af71 	bls.w	8002c1a <I2C_GetTiming+0x46a>
 8002d38:	e000      	b.n	8002d3c <I2C_GetTiming+0x58c>
          continue;
 8002d3a:	bf00      	nop
      for (l = 0; l < SCLL_MAX; l++)
 8002d3c:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002d40:	3301      	adds	r3, #1
 8002d42:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 8002d46:	f8b7 32f4 	ldrh.w	r3, [r7, #756]	; 0x2f4
 8002d4a:	2bff      	cmp	r3, #255	; 0xff
 8002d4c:	f67f af37 	bls.w	8002bbe <I2C_GetTiming+0x40e>
    for (uint32_t count = 0; count < valid_timing_nbr; count++)
 8002d50:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002d54:	3301      	adds	r3, #1
 8002d56:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8002d5a:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002d5e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002d62:	429a      	cmp	r2, r3
 8002d64:	f4ff af17 	bcc.w	8002b96 <I2C_GetTiming+0x3e6>
            }
          }
        }
      }
    }
    if (s == NULL)
 8002d68:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <I2C_GetTiming+0x5c4>
    {
      return 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e01e      	b.n	8002db2 <I2C_GetTiming+0x602>
    }
    ret = (((uint32_t) s->presc & 0xFU) << 28) | (((uint32_t) s->scldel & 0xFU) << 20) | (((uint32_t) s->sdadel & 0xFU) << 16) | (((uint32_t) s->sclh & 0xFFU) << 8) | (((uint32_t) s->scll & 0xFFU) << 0);
 8002d74:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	071a      	lsls	r2, r3, #28
 8002d7c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8002d80:	785b      	ldrb	r3, [r3, #1]
 8002d82:	051b      	lsls	r3, r3, #20
 8002d84:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8002d8e:	789b      	ldrb	r3, [r3, #2]
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d96:	431a      	orrs	r2, r3
 8002d98:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8002d9c:	78db      	ldrb	r3, [r3, #3]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8002da6:	7912      	ldrb	r2, [r2, #4]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  }
  
  return ret;
 8002dae:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	f507 7746 	add.w	r7, r7, #792	; 0x318
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bdb0      	pop	{r4, r5, r7, pc}
 8002dbc:	3b9aca00 	.word	0x3b9aca00

08002dc0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <BSP_HSENSOR_Init+0x38>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	20be      	movs	r0, #190	; 0xbe
 8002dcc:	4798      	blx	r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2bbc      	cmp	r3, #188	; 0xbc
 8002dd2:	d002      	beq.n	8002dda <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	e009      	b.n	8002dee <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <BSP_HSENSOR_Init+0x3c>)
 8002ddc:	4a06      	ldr	r2, [pc, #24]	; (8002df8 <BSP_HSENSOR_Init+0x38>)
 8002dde:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <BSP_HSENSOR_Init+0x3c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	20be      	movs	r0, #190	; 0xbe
 8002de8:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002dee:	687b      	ldr	r3, [r7, #4]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000090 	.word	0x20000090
 8002dfc:	200006bc 	.word	0x200006bc

08002e00 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	20be      	movs	r0, #190	; 0xbe
 8002e0c:	4798      	blx	r3
 8002e0e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002e12:	eeb0 0a67 	vmov.f32	s0, s15
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	200006bc 	.word	0x200006bc

08002e1c <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d903      	bls.n	8002e38 <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8002e30:	f06f 0301 	mvn.w	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	e03a      	b.n	8002eae <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d108      	bne.n	8002e50 <BSP_MOTION_SENSOR_Init+0x34>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <BSP_MOTION_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002e48:	f06f 030a 	mvn.w	r3, #10
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	e02e      	b.n	8002eae <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d108      	bne.n	8002e68 <BSP_MOTION_SENSOR_Init+0x4c>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <BSP_MOTION_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002e60:	f06f 030a 	mvn.w	r3, #10
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e022      	b.n	8002eae <BSP_MOTION_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <BSP_MOTION_SENSOR_Init+0x66>
    {
      if (LSM6DSL_Probe(Functions) != BSP_ERROR_NONE)
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	f000 f8e8 	bl	8003044 <LSM6DSL_Probe>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8002e7a:	f06f 0304 	mvn.w	r3, #4
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e008      	b.n	8002e94 <BSP_MOTION_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      if (LIS3MDL_Probe(Functions) != BSP_ERROR_NONE)
 8002e82:	6838      	ldr	r0, [r7, #0]
 8002e84:	f000 f954 	bl	8003130 <LIS3MDL_Probe>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8002e8e:	f06f 0304 	mvn.w	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
      }
    }
    
    if (status == BSP_ERROR_NONE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <BSP_MOTION_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 8002e9a:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <BSP_MOTION_SENSOR_Init+0x9c>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <BSP_MOTION_SENSOR_Init+0x9c>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200006c0 	.word	0x200006c0

08002ebc <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d903      	bls.n	8002ed8 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8002ed0:	f06f 0301 	mvn.w	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	e045      	b.n	8002f64 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d108      	bne.n	8002ef0 <BSP_MOTION_SENSOR_Enable+0x34>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <BSP_MOTION_SENSOR_Enable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002ee8:	f06f 030a 	mvn.w	r3, #10
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e039      	b.n	8002f64 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d108      	bne.n	8002f08 <BSP_MOTION_SENSOR_Enable+0x4c>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <BSP_MOTION_SENSOR_Enable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002f00:	f06f 030a 	mvn.w	r3, #10
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	e02d      	b.n	8002f64 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8002f08:	4a19      	ldr	r2, [pc, #100]	; (8002f70 <BSP_MOTION_SENSOR_Enable+0xb4>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d103      	bne.n	8002f20 <BSP_MOTION_SENSOR_Enable+0x64>
  {
    status = BSP_ERROR_NO_INIT;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e021      	b.n	8002f64 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GyroIdx : ((Function == MOTION_ACCELERO) ? AcceleroIdx : MagnetoIdx);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d006      	beq.n	8002f34 <BSP_MOTION_SENSOR_Enable+0x78>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d101      	bne.n	8002f30 <BSP_MOTION_SENSOR_Enable+0x74>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e002      	b.n	8002f36 <BSP_MOTION_SENSOR_Enable+0x7a>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e000      	b.n	8002f36 <BSP_MOTION_SENSOR_Enable+0x7a>
 8002f34:	2300      	movs	r3, #0
 8002f36:	72fb      	strb	r3, [r7, #11]
    if(Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 8002f38:	7af9      	ldrb	r1, [r7, #11]
 8002f3a:	480e      	ldr	r0, [pc, #56]	; (8002f74 <BSP_MOTION_SENSOR_Enable+0xb8>)
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	440b      	add	r3, r1
 8002f46:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	490a      	ldr	r1, [pc, #40]	; (8002f78 <BSP_MOTION_SENSOR_Enable+0xbc>)
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002f54:	4610      	mov	r0, r2
 8002f56:	4798      	blx	r3
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	da02      	bge.n	8002f64 <BSP_MOTION_SENSOR_Enable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8002f5e:	f06f 0304 	mvn.w	r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8002f64:	68fb      	ldr	r3, [r7, #12]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200006c0 	.word	0x200006c0
 8002f74:	200006d8 	.word	0x200006d8
 8002f78:	200006c8 	.word	0x200006c8

08002f7c <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d802      	bhi.n	8002f98 <BSP_MOTION_SENSOR_GetAxes+0x1c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d103      	bne.n	8002fa0 <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8002f98:	f06f 0301 	mvn.w	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e046      	b.n	800302e <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <BSP_MOTION_SENSOR_GetAxes+0x3c>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <BSP_MOTION_SENSOR_GetAxes+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002fb0:	f06f 030a 	mvn.w	r3, #10
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e03a      	b.n	800302e <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d108      	bne.n	8002fd0 <BSP_MOTION_SENSOR_GetAxes+0x54>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <BSP_MOTION_SENSOR_GetAxes+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002fc8:	f06f 030a 	mvn.w	r3, #10
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e02e      	b.n	800302e <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <BSP_MOTION_SENSOR_GetAxes+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e022      	b.n	800302e <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GyroIdx : ((Function == MOTION_ACCELERO) ? AcceleroIdx : MagnetoIdx);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d006      	beq.n	8002ffc <BSP_MOTION_SENSOR_GetAxes+0x80>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d101      	bne.n	8002ff8 <BSP_MOTION_SENSOR_GetAxes+0x7c>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e002      	b.n	8002ffe <BSP_MOTION_SENSOR_GetAxes+0x82>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e000      	b.n	8002ffe <BSP_MOTION_SENSOR_GetAxes+0x82>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 8003000:	7cf9      	ldrb	r1, [r7, #19]
 8003002:	480e      	ldr	r0, [pc, #56]	; (800303c <BSP_MOTION_SENSOR_GetAxes+0xc0>)
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	440b      	add	r3, r1
 800300e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	490a      	ldr	r1, [pc, #40]	; (8003040 <BSP_MOTION_SENSOR_GetAxes+0xc4>)
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4610      	mov	r0, r2
 8003020:	4798      	blx	r3
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	da02      	bge.n	800302e <BSP_MOTION_SENSOR_GetAxes+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003028:	f06f 0304 	mvn.w	r3, #4
 800302c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800302e:	697b      	ldr	r3, [r7, #20]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	200006c0 	.word	0x200006c0
 800303c:	200006d8 	.word	0x200006d8
 8003040:	200006c8 	.word	0x200006c8

08003044 <LSM6DSL_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t LSM6DSL_Probe(uint32_t Functions)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08c      	sub	sp, #48	; 0x30
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 800304c:	2300      	movs	r3, #0
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LSM6DSL_IO_t            IOCtx;
  uint8_t                 lsm6dsl_id;
  static LSM6DSL_Object_t LSM6DSL_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = LSM6DSL_I2C_BUS;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = LSM6DSL_I2C_ADD_L;
 8003054:	23d5      	movs	r3, #213	; 0xd5
 8003056:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8003058:	4b29      	ldr	r3, [pc, #164]	; (8003100 <LSM6DSL_Probe+0xbc>)
 800305a:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 800305c:	4b29      	ldr	r3, [pc, #164]	; (8003104 <LSM6DSL_Probe+0xc0>)
 800305e:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8003060:	4b29      	ldr	r3, [pc, #164]	; (8003108 <LSM6DSL_Probe+0xc4>)
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <LSM6DSL_Probe+0xc8>)
 8003066:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8003068:	4b29      	ldr	r3, [pc, #164]	; (8003110 <LSM6DSL_Probe+0xcc>)
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LSM6DSL_RegisterBusIO(&LSM6DSL_Obj, &IOCtx) != LSM6DSL_OK)
 800306c:	f107 0310 	add.w	r3, r7, #16
 8003070:	4619      	mov	r1, r3
 8003072:	4828      	ldr	r0, [pc, #160]	; (8003114 <LSM6DSL_Probe+0xd0>)
 8003074:	f001 fa3a 	bl	80044ec <LSM6DSL_RegisterBusIO>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <LSM6DSL_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 800307e:	f06f 0307 	mvn.w	r3, #7
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003084:	e037      	b.n	80030f6 <LSM6DSL_Probe+0xb2>
  }
  else if (LSM6DSL_ReadID(&LSM6DSL_Obj, &lsm6dsl_id) != LSM6DSL_OK)
 8003086:	f107 030f 	add.w	r3, r7, #15
 800308a:	4619      	mov	r1, r3
 800308c:	4821      	ldr	r0, [pc, #132]	; (8003114 <LSM6DSL_Probe+0xd0>)
 800308e:	f001 fb23 	bl	80046d8 <LSM6DSL_ReadID>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <LSM6DSL_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8003098:	f06f 0304 	mvn.w	r3, #4
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309e:	e02a      	b.n	80030f6 <LSM6DSL_Probe+0xb2>
  }
  else if (lsm6dsl_id != LSM6DSL_ID)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b6a      	cmp	r3, #106	; 0x6a
 80030a4:	d003      	beq.n	80030ae <LSM6DSL_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 80030a6:	f06f 0306 	mvn.w	r3, #6
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ac:	e023      	b.n	80030f6 <LSM6DSL_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &LSM6DSL_Obj;
 80030ae:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <LSM6DSL_Probe+0xd4>)
 80030b0:	4a18      	ldr	r2, [pc, #96]	; (8003114 <LSM6DSL_Probe+0xd0>)
 80030b2:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &LSM6DSL_COMMON_Driver;
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <LSM6DSL_Probe+0xd8>)
 80030b6:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <LSM6DSL_Probe+0xdc>)
 80030b8:	601a      	str	r2, [r3, #0]
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <LSM6DSL_Probe+0xd8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a15      	ldr	r2, [pc, #84]	; (8003118 <LSM6DSL_Probe+0xd4>)
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	4610      	mov	r0, r2
 80030c6:	4798      	blx	r3
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da03      	bge.n	80030d6 <LSM6DSL_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80030ce:	f06f 0304 	mvn.w	r3, #4
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d4:	e00f      	b.n	80030f6 <LSM6DSL_Probe+0xb2>
    }
    else
    {
      if ((Functions & MOTION_GYRO) != 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <LSM6DSL_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GyroIdx] = (MOTION_SENSOR_FuncDrv_t *) &LSM6DSL_GYRO_Driver;
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <LSM6DSL_Probe+0xe0>)
 80030e2:	4a11      	ldr	r2, [pc, #68]	; (8003128 <LSM6DSL_Probe+0xe4>)
 80030e4:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <LSM6DSL_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][AcceleroIdx] = (MOTION_SENSOR_FuncDrv_t *) &LSM6DSL_ACC_Driver;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <LSM6DSL_Probe+0xe0>)
 80030f2:	4a0e      	ldr	r2, [pc, #56]	; (800312c <LSM6DSL_Probe+0xe8>)
 80030f4:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3730      	adds	r7, #48	; 0x30
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	080023e9 	.word	0x080023e9
 8003104:	08002469 	.word	0x08002469
 8003108:	080024e9 	.word	0x080024e9
 800310c:	080024b9 	.word	0x080024b9
 8003110:	08002563 	.word	0x08002563
 8003114:	200006f0 	.word	0x200006f0
 8003118:	200006c8 	.word	0x200006c8
 800311c:	200006d0 	.word	0x200006d0
 8003120:	200000ec 	.word	0x200000ec
 8003124:	200006d8 	.word	0x200006d8
 8003128:	20000120 	.word	0x20000120
 800312c:	200000fc 	.word	0x200000fc

08003130 <LIS3MDL_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t LIS3MDL_Probe(uint32_t Functions)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08c      	sub	sp, #48	; 0x30
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8003138:	2300      	movs	r3, #0
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LIS3MDL_IO_t            IOCtx;
  uint8_t                 lis3mdl_id;
  static LIS3MDL_Object_t LIS3MDL_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = LIS3MDL_I2C_BUS;
 800313c:	2300      	movs	r3, #0
 800313e:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = LIS3MDL_I2C_ADD_H;
 8003140:	233d      	movs	r3, #61	; 0x3d
 8003142:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <LIS3MDL_Probe+0xac>)
 8003146:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <LIS3MDL_Probe+0xb0>)
 800314a:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <LIS3MDL_Probe+0xb4>)
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8003150:	4b25      	ldr	r3, [pc, #148]	; (80031e8 <LIS3MDL_Probe+0xb8>)
 8003152:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <LIS3MDL_Probe+0xbc>)
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS3MDL_RegisterBusIO(&LIS3MDL_Obj, &IOCtx) != LIS3MDL_OK)
 8003158:	f107 0310 	add.w	r3, r7, #16
 800315c:	4619      	mov	r1, r3
 800315e:	4824      	ldr	r0, [pc, #144]	; (80031f0 <LIS3MDL_Probe+0xc0>)
 8003160:	f000 fa3c 	bl	80035dc <LIS3MDL_RegisterBusIO>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <LIS3MDL_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 800316a:	f06f 0307 	mvn.w	r3, #7
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003170:	e02f      	b.n	80031d2 <LIS3MDL_Probe+0xa2>
  }
  else if (LIS3MDL_ReadID(&LIS3MDL_Obj, &lis3mdl_id) != LIS3MDL_OK)
 8003172:	f107 030f 	add.w	r3, r7, #15
 8003176:	4619      	mov	r1, r3
 8003178:	481d      	ldr	r0, [pc, #116]	; (80031f0 <LIS3MDL_Probe+0xc0>)
 800317a:	f000 fae7 	bl	800374c <LIS3MDL_ReadID>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <LIS3MDL_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8003184:	f06f 0304 	mvn.w	r3, #4
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318a:	e022      	b.n	80031d2 <LIS3MDL_Probe+0xa2>
  }
  else if (lis3mdl_id != LIS3MDL_ID)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b3d      	cmp	r3, #61	; 0x3d
 8003190:	d003      	beq.n	800319a <LIS3MDL_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8003192:	f06f 0306 	mvn.w	r3, #6
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003198:	e01b      	b.n	80031d2 <LIS3MDL_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &LIS3MDL_Obj;
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <LIS3MDL_Probe+0xc4>)
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <LIS3MDL_Probe+0xc0>)
 800319e:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &LIS3MDL_COMMON_Driver;
 80031a0:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <LIS3MDL_Probe+0xc8>)
 80031a2:	4a16      	ldr	r2, [pc, #88]	; (80031fc <LIS3MDL_Probe+0xcc>)
 80031a4:	605a      	str	r2, [r3, #4]
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <LIS3MDL_Probe+0xc8>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <LIS3MDL_Probe+0xc4>)
 80031ae:	6852      	ldr	r2, [r2, #4]
 80031b0:	4610      	mov	r0, r2
 80031b2:	4798      	blx	r3
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	da03      	bge.n	80031c2 <LIS3MDL_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80031ba:	f06f 0304 	mvn.w	r3, #4
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c0:	e007      	b.n	80031d2 <LIS3MDL_Probe+0xa2>
    }
    else
    {
      if ((Functions & MOTION_MAGNETO) != 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <LIS3MDL_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MagnetoIdx] = (MOTION_SENSOR_FuncDrv_t *) &LIS3MDL_MAG_Driver;
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <LIS3MDL_Probe+0xd0>)
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <LIS3MDL_Probe+0xd4>)
 80031d0:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 80031d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3730      	adds	r7, #48	; 0x30
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	080023e9 	.word	0x080023e9
 80031e0:	08002469 	.word	0x08002469
 80031e4:	080024e9 	.word	0x080024e9
 80031e8:	080024b9 	.word	0x080024b9
 80031ec:	08002563 	.word	0x08002563
 80031f0:	20000720 	.word	0x20000720
 80031f4:	200006c8 	.word	0x200006c8
 80031f8:	200006d0 	.word	0x200006d0
 80031fc:	200000ac 	.word	0x200000ac
 8003200:	200006d8 	.word	0x200006d8
 8003204:	200000bc 	.word	0x200000bc

08003208 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800320e:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <BSP_PSENSOR_Init+0x38>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	20ba      	movs	r0, #186	; 0xba
 8003214:	4798      	blx	r3
 8003216:	4603      	mov	r3, r0
 8003218:	2bb1      	cmp	r3, #177	; 0xb1
 800321a:	d002      	beq.n	8003222 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	e009      	b.n	8003236 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <BSP_PSENSOR_Init+0x3c>)
 8003224:	4a06      	ldr	r2, [pc, #24]	; (8003240 <BSP_PSENSOR_Init+0x38>)
 8003226:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <BSP_PSENSOR_Init+0x3c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	20ba      	movs	r0, #186	; 0xba
 8003230:	4798      	blx	r3
    ret = PSENSOR_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003236:	687b      	ldr	r3, [r7, #4]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200000e0 	.word	0x200000e0
 8003244:	2000074c 	.word	0x2000074c

08003248 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800324c:	4b04      	ldr	r3, [pc, #16]	; (8003260 <BSP_PSENSOR_ReadPressure+0x18>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	20ba      	movs	r0, #186	; 0xba
 8003254:	4798      	blx	r3
 8003256:	eef0 7a40 	vmov.f32	s15, s0
}
 800325a:	eeb0 0a67 	vmov.f32	s0, s15
 800325e:	bd80      	pop	{r7, pc}
 8003260:	2000074c 	.word	0x2000074c

08003264 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <BSP_TSENSOR_Init+0x30>)
 8003270:	4a09      	ldr	r2, [pc, #36]	; (8003298 <BSP_TSENSOR_Init+0x34>)
 8003272:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003274:	f7ff f858 	bl	8002328 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <BSP_TSENSOR_Init+0x30>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2100      	movs	r1, #0
 8003280:	20be      	movs	r0, #190	; 0xbe
 8003282:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003288:	79fb      	ldrb	r3, [r7, #7]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000750 	.word	0x20000750
 8003298:	2000009c 	.word	0x2000009c

0800329c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <BSP_TSENSOR_ReadTemp+0x18>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	20be      	movs	r0, #190	; 0xbe
 80032a8:	4798      	blx	r3
 80032aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80032ae:	eeb0 0a67 	vmov.f32	s0, s15
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000750 	.word	0x20000750

080032b8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2120      	movs	r1, #32
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff f851 	bl	8002370 <SENSOR_IO_Read>
 80032ce:	4603      	mov	r3, r0
 80032d0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	f023 0304 	bic.w	r3, r3, #4
 80032d8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	f023 0303 	bic.w	r3, r3, #3
 80032e8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032f8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	2120      	movs	r1, #32
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff f81a 	bl	800233c <SENSOR_IO_Write>
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800331e:	f7ff f803 	bl	8002328 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	210f      	movs	r1, #15
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f821 	bl	8002370 <SENSOR_IO_Read>
 800332e:	4603      	mov	r3, r0
 8003330:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	b2d8      	uxtb	r0, r3
 800334a:	f107 020c 	add.w	r2, r7, #12
 800334e:	2302      	movs	r3, #2
 8003350:	21b0      	movs	r1, #176	; 0xb0
 8003352:	f7ff f82b 	bl	80023ac <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8003356:	7b3b      	ldrb	r3, [r7, #12]
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800335e:	7b7b      	ldrb	r3, [r7, #13]
 8003360:	085b      	lsrs	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	b2d8      	uxtb	r0, r3
 800336a:	f107 020c 	add.w	r2, r7, #12
 800336e:	2302      	movs	r3, #2
 8003370:	21b6      	movs	r1, #182	; 0xb6
 8003372:	f7ff f81b 	bl	80023ac <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003376:	7b7b      	ldrb	r3, [r7, #13]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	b21a      	sxth	r2, r3
 800337c:	7b3b      	ldrb	r3, [r7, #12]
 800337e:	b21b      	sxth	r3, r3
 8003380:	4313      	orrs	r3, r2
 8003382:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	b2d8      	uxtb	r0, r3
 8003388:	f107 020c 	add.w	r2, r7, #12
 800338c:	2302      	movs	r3, #2
 800338e:	21ba      	movs	r1, #186	; 0xba
 8003390:	f7ff f80c 	bl	80023ac <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003394:	7b7b      	ldrb	r3, [r7, #13]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	b21a      	sxth	r2, r3
 800339a:	7b3b      	ldrb	r3, [r7, #12]
 800339c:	b21b      	sxth	r3, r3
 800339e:	4313      	orrs	r3, r2
 80033a0:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	b2d8      	uxtb	r0, r3
 80033a6:	f107 020c 	add.w	r2, r7, #12
 80033aa:	2302      	movs	r3, #2
 80033ac:	21a8      	movs	r1, #168	; 0xa8
 80033ae:	f7fe fffd 	bl	80023ac <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80033b2:	7b7b      	ldrb	r3, [r7, #13]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	b21a      	sxth	r2, r3
 80033b8:	7b3b      	ldrb	r3, [r7, #12]
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	4313      	orrs	r3, r2
 80033be:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80033c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80033d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	ee07 3a90 	vmov	s15, r3
 80033e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80033e8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80033ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800340a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8003412:	edd7 7a04 	vldr	s15, [r7, #16]
 8003416:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800341a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800341e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8003422:	edd7 7a04 	vldr	s15, [r7, #16]
 8003426:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800346c <HTS221_H_ReadHumidity+0x130>
 800342a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	dd01      	ble.n	8003438 <HTS221_H_ReadHumidity+0xfc>
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HTS221_H_ReadHumidity+0x134>)
 8003436:	e00a      	b.n	800344e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8003438:	edd7 7a04 	vldr	s15, [r7, #16]
 800343c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	d502      	bpl.n	800344c <HTS221_H_ReadHumidity+0x110>
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e000      	b.n	800344e <HTS221_H_ReadHumidity+0x112>
 800344c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800344e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8003450:	edd7 7a04 	vldr	s15, [r7, #16]
 8003454:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003458:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800345c:	eef0 7a66 	vmov.f32	s15, s13
}
 8003460:	eeb0 0a67 	vmov.f32	s0, s15
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	447a0000 	.word	0x447a0000
 8003470:	447a0000 	.word	0x447a0000

08003474 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	6039      	str	r1, [r7, #0]
 800347e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2120      	movs	r1, #32
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe ff72 	bl	8002370 <SENSOR_IO_Read>
 800348c:	4603      	mov	r3, r0
 800348e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	f023 0304 	bic.w	r3, r3, #4
 8003496:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	f043 0304 	orr.w	r3, r3, #4
 800349e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034b6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	2120      	movs	r1, #32
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe ff3b 	bl	800233c <SENSOR_IO_Write>
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	b2d8      	uxtb	r0, r3
 80034dc:	f107 0208 	add.w	r2, r7, #8
 80034e0:	2302      	movs	r3, #2
 80034e2:	21b2      	movs	r1, #178	; 0xb2
 80034e4:	f7fe ff62 	bl	80023ac <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2135      	movs	r1, #53	; 0x35
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe ff3e 	bl	8002370 <SENSOR_IO_Read>
 80034f4:	4603      	mov	r3, r0
 80034f6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80034f8:	7ffb      	ldrb	r3, [r7, #31]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	b21b      	sxth	r3, r3
 80034fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003502:	b21a      	sxth	r2, r3
 8003504:	7a3b      	ldrb	r3, [r7, #8]
 8003506:	b21b      	sxth	r3, r3
 8003508:	4313      	orrs	r3, r2
 800350a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800350c:	7ffb      	ldrb	r3, [r7, #31]
 800350e:	019b      	lsls	r3, r3, #6
 8003510:	b21b      	sxth	r3, r3
 8003512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003516:	b21a      	sxth	r2, r3
 8003518:	7a7b      	ldrb	r3, [r7, #9]
 800351a:	b21b      	sxth	r3, r3
 800351c:	4313      	orrs	r3, r2
 800351e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003520:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003524:	10db      	asrs	r3, r3, #3
 8003526:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003528:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800352c:	10db      	asrs	r3, r3, #3
 800352e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	b2d8      	uxtb	r0, r3
 8003534:	f107 0208 	add.w	r2, r7, #8
 8003538:	2304      	movs	r3, #4
 800353a:	21bc      	movs	r1, #188	; 0xbc
 800353c:	f7fe ff36 	bl	80023ac <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003540:	7a7b      	ldrb	r3, [r7, #9]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	b21a      	sxth	r2, r3
 8003546:	7a3b      	ldrb	r3, [r7, #8]
 8003548:	b21b      	sxth	r3, r3
 800354a:	4313      	orrs	r3, r2
 800354c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	b21a      	sxth	r2, r3
 8003554:	7abb      	ldrb	r3, [r7, #10]
 8003556:	b21b      	sxth	r3, r3
 8003558:	4313      	orrs	r3, r2
 800355a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	b2d8      	uxtb	r0, r3
 8003560:	f107 0208 	add.w	r2, r7, #8
 8003564:	2302      	movs	r3, #2
 8003566:	21aa      	movs	r1, #170	; 0xaa
 8003568:	f7fe ff20 	bl	80023ac <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800356c:	7a7b      	ldrb	r3, [r7, #9]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	b21a      	sxth	r2, r3
 8003572:	7a3b      	ldrb	r3, [r7, #8]
 8003574:	b21b      	sxth	r3, r3
 8003576:	4313      	orrs	r3, r2
 8003578:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800357a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800357e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800358c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003590:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800359e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80035a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80035a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80035bc:	ee07 3a90 	vmov	s15, r3
 80035c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	ee07 3a90 	vmov	s15, r3
}
 80035d2:	eeb0 0a67 	vmov.f32	s0, s15
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <LIS3MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_RegisterBusIO(LIS3MDL_Object_t *pObj, LIS3MDL_IO_t *pIO)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3MDL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <LIS3MDL_RegisterBusIO+0x1c>
  {
    ret = LIS3MDL_ERROR;
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e04d      	b.n	8003694 <LIS3MDL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	7b1a      	ldrb	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <LIS3MDL_RegisterBusIO+0xc4>)
 8003634:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <LIS3MDL_RegisterBusIO+0xc8>)
 800363a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <LIS3MDL_RegisterBusIO+0x76>
    {
      ret = LIS3MDL_ERROR;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	e020      	b.n	8003694 <LIS3MDL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS3MDL_OK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4798      	blx	r3
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <LIS3MDL_RegisterBusIO+0x8a>
    {
      ret = LIS3MDL_ERROR;
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e016      	b.n	8003694 <LIS3MDL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS3MDL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d112      	bne.n	8003694 <LIS3MDL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10d      	bne.n	8003694 <LIS3MDL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x07;
 8003678:	2307      	movs	r3, #7
 800367a:	72fb      	strb	r3, [r7, #11]

          if (LIS3MDL_Write_Reg(pObj, LIS3MDL_CTRL_REG3, data) != LIS3MDL_OK)
 800367c:	7afb      	ldrb	r3, [r7, #11]
 800367e:	461a      	mov	r2, r3
 8003680:	2122      	movs	r1, #34	; 0x22
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fb51 	bl	8003d2a <LIS3MDL_Write_Reg>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <LIS3MDL_RegisterBusIO+0xb8>
          {
            ret = LIS3MDL_ERROR;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295
 8003692:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 8003694:	68fb      	ldr	r3, [r7, #12]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	08003d61 	.word	0x08003d61
 80036a4:	08003dc3 	.word	0x08003dc3

080036a8 <LIS3MDL_Init>:
  * @brief  Component initialization
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_Init(LIS3MDL_Object_t *pObj)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Operating mode selection - power down */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_POWER_DOWN) != LIS3MDL_OK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	331c      	adds	r3, #28
 80036b4:	2102      	movs	r1, #2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fdac 	bl	8004214 <lis3mdl_operating_mode_set>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <LIS3MDL_Init+0x20>
  {
    return LIS3MDL_ERROR;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
 80036c6:	e025      	b.n	8003714 <LIS3MDL_Init+0x6c>
  }

  /* Enable BDU */
  if (lis3mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS3MDL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	331c      	adds	r3, #28
 80036cc:	2101      	movs	r1, #1
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fdc6 	bl	8004260 <lis3mdl_block_data_update_set>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <LIS3MDL_Init+0x38>
  {
    return LIS3MDL_ERROR;
 80036da:	f04f 33ff 	mov.w	r3, #4294967295
 80036de:	e019      	b.n	8003714 <LIS3MDL_Init+0x6c>
  }

  /* Set Output data rate. */
  if (LIS3MDL_MAG_SetOutputDataRate(pObj, 80.0f) != LIS3MDL_OK)
 80036e0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800371c <LIS3MDL_Init+0x74>
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f9db 	bl	8003aa0 <LIS3MDL_MAG_SetOutputDataRate>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <LIS3MDL_Init+0x4e>
  {
    return LIS3MDL_ERROR;
 80036f0:	f04f 33ff 	mov.w	r3, #4294967295
 80036f4:	e00e      	b.n	8003714 <LIS3MDL_Init+0x6c>
  }

  /* Full scale selection. */
  if (LIS3MDL_MAG_SetFullScale(pObj, 4) != LIS3MDL_OK)
 80036f6:	2104      	movs	r1, #4
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fa73 	bl	8003be4 <LIS3MDL_MAG_SetFullScale>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <LIS3MDL_Init+0x62>
  {
    return LIS3MDL_ERROR;
 8003704:	f04f 33ff 	mov.w	r3, #4294967295
 8003708:	e004      	b.n	8003714 <LIS3MDL_Init+0x6c>
  }

  pObj->is_initialized = 1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS3MDL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	42a00000 	.word	0x42a00000

08003720 <LIS3MDL_DeInit>:
 * @brief Deinitialize the LIS3MDL sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_DeInit(LIS3MDL_Object_t *pObj)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS3MDL_MAG_Disable(pObj) != LIS3MDL_OK)
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f873 	bl	8003814 <LIS3MDL_MAG_Disable>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <LIS3MDL_DeInit+0x1a>
  {
    return LIS3MDL_ERROR;
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
 8003738:	e004      	b.n	8003744 <LIS3MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS3MDL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <LIS3MDL_ReadID>:
  * @param  pObj pointer to Component object
  * @param  Id pointer to Component ID
  * @retval Component status
  */
int32_t LIS3MDL_ReadID(LIS3MDL_Object_t *pObj, uint8_t *Id)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  if (lis3mdl_device_id_get(&(pObj->Ctx), Id) != LIS3MDL_OK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	331c      	adds	r3, #28
 800375a:	6839      	ldr	r1, [r7, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fdf0 	bl	8004342 <lis3mdl_device_id_get>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <LIS3MDL_ReadID+0x22>
  {
    return LIS3MDL_ERROR;
 8003768:	f04f 33ff 	mov.w	r3, #4294967295
 800376c:	e000      	b.n	8003770 <LIS3MDL_ReadID+0x24>
  }

  return LIS3MDL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <LIS3MDL_GetCapabilities>:
  * @param  pObj pointer to Component object
  * @param  Capabilities pointer to LIS3MDL sensor capabilities
  * @retval Component status
  */
int32_t LIS3MDL_GetCapabilities(LIS3MDL_Object_t *pObj, LIS3MDL_Capabilities_t *Capabilities)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2201      	movs	r2, #1
 8003792:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2200      	movs	r2, #0
 800379e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 16;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2210      	movs	r2, #16
 80037aa:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 80.0f;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <LIS3MDL_GetCapabilities+0x58>)
 80037c0:	619a      	str	r2, [r3, #24]
  return LIS3MDL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	42a00000 	.word	0x42a00000

080037d4 <LIS3MDL_MAG_Enable>:
 * @brief Enable the LIS3MDL accelerometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_Enable(LIS3MDL_Object_t *pObj)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <LIS3MDL_MAG_Enable+0x16>
  {
    return LIS3MDL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e010      	b.n	800380c <LIS3MDL_MAG_Enable+0x38>
  }

  /* Operating mode selection - continuous */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_CONTINUOUS_MODE) != LIS3MDL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	331c      	adds	r3, #28
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fd0f 	bl	8004214 <lis3mdl_operating_mode_set>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <LIS3MDL_MAG_Enable+0x2e>
  {
    return LIS3MDL_ERROR;
 80037fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003800:	e004      	b.n	800380c <LIS3MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3MDL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <LIS3MDL_MAG_Disable>:
 * @brief Disable the LIS3MDL accelerometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_Disable(LIS3MDL_Object_t *pObj)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <LIS3MDL_MAG_Disable+0x16>
  {
    return LIS3MDL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e010      	b.n	800384c <LIS3MDL_MAG_Disable+0x38>
  }

  /* Operating mode selection - power down */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_POWER_DOWN) != LIS3MDL_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	331c      	adds	r3, #28
 800382e:	2102      	movs	r1, #2
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fcef 	bl	8004214 <lis3mdl_operating_mode_set>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <LIS3MDL_MAG_Disable+0x2e>
  {
    return LIS3MDL_ERROR;
 800383c:	f04f 33ff 	mov.w	r3, #4294967295
 8003840:	e004      	b.n	800384c <LIS3MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3MDL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <LIS3MDL_MAG_GetSensitivity>:
 * @param pObj the device pObj
 * @param Sensitivity pointer to Sensitivity value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetSensitivity(LIS3MDL_Object_t *pObj, float *Sensitivity)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lis3mdl_full_scale_get(&(pObj->Ctx), &full_scale) != LIS3MDL_OK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	331c      	adds	r3, #28
 8003862:	f107 020f 	add.w	r2, r7, #15
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fc9b 	bl	80041a4 <lis3mdl_full_scale_get>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <LIS3MDL_MAG_GetSensitivity+0x26>
  {
    return LIS3MDL_ERROR;
 8003874:	f04f 33ff 	mov.w	r3, #4294967295
 8003878:	e020      	b.n	80038bc <LIS3MDL_MAG_GetSensitivity+0x68>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d81b      	bhi.n	80038b8 <LIS3MDL_MAG_GetSensitivity+0x64>
 8003880:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <LIS3MDL_MAG_GetSensitivity+0x34>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	08003899 	.word	0x08003899
 800388c:	080038a1 	.word	0x080038a1
 8003890:	080038a9 	.word	0x080038a9
 8003894:	080038b1 	.word	0x080038b1
  {
    case LIS3MDL_4_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_4GAUSS;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <LIS3MDL_MAG_GetSensitivity+0x70>)
 800389c:	601a      	str	r2, [r3, #0]
      break;
 800389e:	e00c      	b.n	80038ba <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_8_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_8GAUSS;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <LIS3MDL_MAG_GetSensitivity+0x74>)
 80038a4:	601a      	str	r2, [r3, #0]
      break;
 80038a6:	e008      	b.n	80038ba <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_12_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_12GAUSS;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	4a08      	ldr	r2, [pc, #32]	; (80038cc <LIS3MDL_MAG_GetSensitivity+0x78>)
 80038ac:	601a      	str	r2, [r3, #0]
      break;
 80038ae:	e004      	b.n	80038ba <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_16_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_16GAUSS;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <LIS3MDL_MAG_GetSensitivity+0x7c>)
 80038b4:	601a      	str	r2, [r3, #0]
      break;
 80038b6:	e000      	b.n	80038ba <LIS3MDL_MAG_GetSensitivity+0x66>
    default:
      break;
 80038b8:	bf00      	nop
  }

  return LIS3MDL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	3e158106 	.word	0x3e158106
 80038c8:	3e958106 	.word	0x3e958106
 80038cc:	3ee04189 	.word	0x3ee04189
 80038d0:	3f158106 	.word	0x3f158106

080038d4 <LIS3MDL_MAG_GetOutputDataRate>:
 * @param pObj the device pObj
 * @param Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetOutputDataRate(LIS3MDL_Object_t *pObj, float *Odr)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  lis3mdl_om_t odr_low_level;

  /* Get current output data rate. */
  if (lis3mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS3MDL_OK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	331c      	adds	r3, #28
 80038e2:	f107 020f 	add.w	r2, r7, #15
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fb11 	bl	8003f10 <lis3mdl_data_rate_get>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <LIS3MDL_MAG_GetOutputDataRate+0x26>
  {
    return LIS3MDL_ERROR;
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
 80038f8:	e0b6      	b.n	8003a68 <LIS3MDL_MAG_GetOutputDataRate+0x194>
  }

  switch (odr_low_level)
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b3e      	cmp	r3, #62	; 0x3e
 80038fe:	f200 80b1 	bhi.w	8003a64 <LIS3MDL_MAG_GetOutputDataRate+0x190>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <LIS3MDL_MAG_GetOutputDataRate+0x34>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	08003a05 	.word	0x08003a05
 800390c:	08003a5d 	.word	0x08003a5d
 8003910:	08003a0d 	.word	0x08003a0d
 8003914:	08003a65 	.word	0x08003a65
 8003918:	08003a15 	.word	0x08003a15
 800391c:	08003a65 	.word	0x08003a65
 8003920:	08003a1d 	.word	0x08003a1d
 8003924:	08003a65 	.word	0x08003a65
 8003928:	08003a25 	.word	0x08003a25
 800392c:	08003a65 	.word	0x08003a65
 8003930:	08003a2d 	.word	0x08003a2d
 8003934:	08003a65 	.word	0x08003a65
 8003938:	08003a35 	.word	0x08003a35
 800393c:	08003a65 	.word	0x08003a65
 8003940:	08003a3d 	.word	0x08003a3d
 8003944:	08003a65 	.word	0x08003a65
 8003948:	08003a65 	.word	0x08003a65
 800394c:	08003a55 	.word	0x08003a55
 8003950:	08003a0d 	.word	0x08003a0d
 8003954:	08003a65 	.word	0x08003a65
 8003958:	08003a15 	.word	0x08003a15
 800395c:	08003a65 	.word	0x08003a65
 8003960:	08003a1d 	.word	0x08003a1d
 8003964:	08003a65 	.word	0x08003a65
 8003968:	08003a25 	.word	0x08003a25
 800396c:	08003a65 	.word	0x08003a65
 8003970:	08003a2d 	.word	0x08003a2d
 8003974:	08003a65 	.word	0x08003a65
 8003978:	08003a35 	.word	0x08003a35
 800397c:	08003a65 	.word	0x08003a65
 8003980:	08003a3d 	.word	0x08003a3d
 8003984:	08003a65 	.word	0x08003a65
 8003988:	08003a65 	.word	0x08003a65
 800398c:	08003a4d 	.word	0x08003a4d
 8003990:	08003a0d 	.word	0x08003a0d
 8003994:	08003a65 	.word	0x08003a65
 8003998:	08003a15 	.word	0x08003a15
 800399c:	08003a65 	.word	0x08003a65
 80039a0:	08003a1d 	.word	0x08003a1d
 80039a4:	08003a65 	.word	0x08003a65
 80039a8:	08003a25 	.word	0x08003a25
 80039ac:	08003a65 	.word	0x08003a65
 80039b0:	08003a2d 	.word	0x08003a2d
 80039b4:	08003a65 	.word	0x08003a65
 80039b8:	08003a35 	.word	0x08003a35
 80039bc:	08003a65 	.word	0x08003a65
 80039c0:	08003a3d 	.word	0x08003a3d
 80039c4:	08003a65 	.word	0x08003a65
 80039c8:	08003a65 	.word	0x08003a65
 80039cc:	08003a45 	.word	0x08003a45
 80039d0:	08003a0d 	.word	0x08003a0d
 80039d4:	08003a65 	.word	0x08003a65
 80039d8:	08003a15 	.word	0x08003a15
 80039dc:	08003a65 	.word	0x08003a65
 80039e0:	08003a1d 	.word	0x08003a1d
 80039e4:	08003a65 	.word	0x08003a65
 80039e8:	08003a25 	.word	0x08003a25
 80039ec:	08003a65 	.word	0x08003a65
 80039f0:	08003a2d 	.word	0x08003a2d
 80039f4:	08003a65 	.word	0x08003a65
 80039f8:	08003a35 	.word	0x08003a35
 80039fc:	08003a65 	.word	0x08003a65
 8003a00:	08003a3d 	.word	0x08003a3d
  {
    case LIS3MDL_LP_Hz625:
      *Odr = 0.625f;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <LIS3MDL_MAG_GetOutputDataRate+0x19c>)
 8003a08:	601a      	str	r2, [r3, #0]
      break;
 8003a0a:	e02c      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1Hz25:
    case LIS3MDL_MP_1Hz25:
    case LIS3MDL_HP_1Hz25:
    case LIS3MDL_UHP_1Hz25:
      *Odr = 1.250f;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <LIS3MDL_MAG_GetOutputDataRate+0x1a0>)
 8003a10:	601a      	str	r2, [r3, #0]
      break;
 8003a12:	e028      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_2Hz5:
    case LIS3MDL_MP_2Hz5:
    case LIS3MDL_HP_2Hz5:
    case LIS3MDL_UHP_2Hz5:
      *Odr = 2.500f;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <LIS3MDL_MAG_GetOutputDataRate+0x1a4>)
 8003a18:	601a      	str	r2, [r3, #0]
      break;
 8003a1a:	e024      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_5Hz:
    case LIS3MDL_MP_5Hz:
    case LIS3MDL_HP_5Hz:
    case LIS3MDL_UHP_5Hz:
      *Odr = 5.000f;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <LIS3MDL_MAG_GetOutputDataRate+0x1a8>)
 8003a20:	601a      	str	r2, [r3, #0]
      break;
 8003a22:	e020      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_10Hz:
    case LIS3MDL_MP_10Hz:
    case LIS3MDL_HP_10Hz:
    case LIS3MDL_UHP_10Hz:
      *Odr = 10.000f;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4a16      	ldr	r2, [pc, #88]	; (8003a80 <LIS3MDL_MAG_GetOutputDataRate+0x1ac>)
 8003a28:	601a      	str	r2, [r3, #0]
      break;
 8003a2a:	e01c      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_20Hz:
    case LIS3MDL_MP_20Hz:
    case LIS3MDL_HP_20Hz:
    case LIS3MDL_UHP_20Hz:
      *Odr = 20.000f;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <LIS3MDL_MAG_GetOutputDataRate+0x1b0>)
 8003a30:	601a      	str	r2, [r3, #0]
      break;
 8003a32:	e018      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_40Hz:
    case LIS3MDL_MP_40Hz:
    case LIS3MDL_HP_40Hz:
    case LIS3MDL_UHP_40Hz:
      *Odr = 40.000f;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <LIS3MDL_MAG_GetOutputDataRate+0x1b4>)
 8003a38:	601a      	str	r2, [r3, #0]
      break;
 8003a3a:	e014      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_80Hz:
    case LIS3MDL_MP_80Hz:
    case LIS3MDL_HP_80Hz:
    case LIS3MDL_UHP_80Hz:
      *Odr = 80.000f;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <LIS3MDL_MAG_GetOutputDataRate+0x1b8>)
 8003a40:	601a      	str	r2, [r3, #0]
      break;
 8003a42:	e010      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_UHP_155Hz:
      *Odr = 155.000f;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <LIS3MDL_MAG_GetOutputDataRate+0x1bc>)
 8003a48:	601a      	str	r2, [r3, #0]
      break;
 8003a4a:	e00c      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_HP_300Hz:
      *Odr = 300.000f;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4a11      	ldr	r2, [pc, #68]	; (8003a94 <LIS3MDL_MAG_GetOutputDataRate+0x1c0>)
 8003a50:	601a      	str	r2, [r3, #0]
      break;
 8003a52:	e008      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_MP_560Hz:
      *Odr = 560.000f;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <LIS3MDL_MAG_GetOutputDataRate+0x1c4>)
 8003a58:	601a      	str	r2, [r3, #0]
      break;
 8003a5a:	e004      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1kHz:
      *Odr = 1000.000f;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4a0f      	ldr	r2, [pc, #60]	; (8003a9c <LIS3MDL_MAG_GetOutputDataRate+0x1c8>)
 8003a60:	601a      	str	r2, [r3, #0]
      break;
 8003a62:	e000      	b.n	8003a66 <LIS3MDL_MAG_GetOutputDataRate+0x192>
    default:
      break;
 8003a64:	bf00      	nop
  }

  return LIS3MDL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	3f200000 	.word	0x3f200000
 8003a74:	3fa00000 	.word	0x3fa00000
 8003a78:	40200000 	.word	0x40200000
 8003a7c:	40a00000 	.word	0x40a00000
 8003a80:	41200000 	.word	0x41200000
 8003a84:	41a00000 	.word	0x41a00000
 8003a88:	42200000 	.word	0x42200000
 8003a8c:	42a00000 	.word	0x42a00000
 8003a90:	431b0000 	.word	0x431b0000
 8003a94:	43960000 	.word	0x43960000
 8003a98:	440c0000 	.word	0x440c0000
 8003a9c:	447a0000 	.word	0x447a0000

08003aa0 <LIS3MDL_MAG_SetOutputDataRate>:
 * @param pObj the device pObj
 * @param Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_SetOutputDataRate(LIS3MDL_Object_t *pObj, float Odr)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	ed87 0a00 	vstr	s0, [r7]
  lis3mdl_om_t new_odr;

  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
            : (Odr <=  1.250f) ? LIS3MDL_LP_1Hz25
 8003aac:	edd7 7a00 	vldr	s15, [r7]
 8003ab0:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 8003ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abc:	d801      	bhi.n	8003ac2 <LIS3MDL_MAG_SetOutputDataRate+0x22>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e042      	b.n	8003b48 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003ac2:	edd7 7a00 	vldr	s15, [r7]
 8003ac6:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8003aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad2:	d801      	bhi.n	8003ad8 <LIS3MDL_MAG_SetOutputDataRate+0x38>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e037      	b.n	8003b48 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003ad8:	edd7 7a00 	vldr	s15, [r7]
 8003adc:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	d801      	bhi.n	8003aee <LIS3MDL_MAG_SetOutputDataRate+0x4e>
 8003aea:	2304      	movs	r3, #4
 8003aec:	e02c      	b.n	8003b48 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003aee:	edd7 7a00 	vldr	s15, [r7]
 8003af2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afe:	d801      	bhi.n	8003b04 <LIS3MDL_MAG_SetOutputDataRate+0x64>
 8003b00:	2306      	movs	r3, #6
 8003b02:	e021      	b.n	8003b48 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003b04:	edd7 7a00 	vldr	s15, [r7]
 8003b08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b14:	d801      	bhi.n	8003b1a <LIS3MDL_MAG_SetOutputDataRate+0x7a>
 8003b16:	2308      	movs	r3, #8
 8003b18:	e016      	b.n	8003b48 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003b1a:	edd7 7a00 	vldr	s15, [r7]
 8003b1e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2a:	d801      	bhi.n	8003b30 <LIS3MDL_MAG_SetOutputDataRate+0x90>
 8003b2c:	230a      	movs	r3, #10
 8003b2e:	e00b      	b.n	8003b48 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003b30:	edd7 7a00 	vldr	s15, [r7]
 8003b34:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003b70 <LIS3MDL_MAG_SetOutputDataRate+0xd0>
 8003b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b40:	d801      	bhi.n	8003b46 <LIS3MDL_MAG_SetOutputDataRate+0xa6>
 8003b42:	230c      	movs	r3, #12
 8003b44:	e000      	b.n	8003b48 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003b46:	230e      	movs	r3, #14
  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
 8003b48:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 10.000f) ? LIS3MDL_LP_10Hz
            : (Odr <= 20.000f) ? LIS3MDL_LP_20Hz
            : (Odr <= 40.000f) ? LIS3MDL_LP_40Hz
            :                      LIS3MDL_LP_80Hz;

  if (lis3mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS3MDL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	331c      	adds	r3, #28
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f996 	bl	8003e84 <lis3mdl_data_rate_set>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <LIS3MDL_MAG_SetOutputDataRate+0xc4>
  {
    return LIS3MDL_ERROR;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	e000      	b.n	8003b66 <LIS3MDL_MAG_SetOutputDataRate+0xc6>
  }

  return LIS3MDL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	42200000 	.word	0x42200000

08003b74 <LIS3MDL_MAG_GetFullScale>:
 * @param pObj the device pObj
 * @param FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetFullScale(LIS3MDL_Object_t *pObj, int32_t  *FullScale)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis3mdl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS3MDL_OK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	331c      	adds	r3, #28
 8003b82:	f107 020f 	add.w	r2, r7, #15
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fb0b 	bl	80041a4 <lis3mdl_full_scale_get>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <LIS3MDL_MAG_GetFullScale+0x26>
  {
    return LIS3MDL_ERROR;
 8003b94:	f04f 33ff 	mov.w	r3, #4294967295
 8003b98:	e020      	b.n	8003bdc <LIS3MDL_MAG_GetFullScale+0x68>
  }

  switch (fs_low_level)
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d81b      	bhi.n	8003bd8 <LIS3MDL_MAG_GetFullScale+0x64>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <LIS3MDL_MAG_GetFullScale+0x34>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003bc1 	.word	0x08003bc1
 8003bb0:	08003bc9 	.word	0x08003bc9
 8003bb4:	08003bd1 	.word	0x08003bd1
  {
    case LIS3MDL_4_GAUSS:
      *FullScale = 4;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2204      	movs	r2, #4
 8003bbc:	601a      	str	r2, [r3, #0]
      break;
 8003bbe:	e00c      	b.n	8003bda <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_8_GAUSS:
      *FullScale = 8;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	601a      	str	r2, [r3, #0]
      break;
 8003bc6:	e008      	b.n	8003bda <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_12_GAUSS:
      *FullScale = 12;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	220c      	movs	r2, #12
 8003bcc:	601a      	str	r2, [r3, #0]
      break;
 8003bce:	e004      	b.n	8003bda <LIS3MDL_MAG_GetFullScale+0x66>
    case LIS3MDL_16_GAUSS:
      *FullScale = 16;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	601a      	str	r2, [r3, #0]
      break;
 8003bd6:	e000      	b.n	8003bda <LIS3MDL_MAG_GetFullScale+0x66>
    default:
      break;
 8003bd8:	bf00      	nop
  }

  return LIS3MDL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <LIS3MDL_MAG_SetFullScale>:
 * @param pObj the device pObj
 * @param FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_SetFullScale(LIS3MDL_Object_t *pObj, int32_t FullScale)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t new_fs;

  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
           : (FullScale <= 8) ? LIS3MDL_8_GAUSS
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	dd0b      	ble.n	8003c0c <LIS3MDL_MAG_SetFullScale+0x28>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	dd06      	ble.n	8003c08 <LIS3MDL_MAG_SetFullScale+0x24>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	dc01      	bgt.n	8003c04 <LIS3MDL_MAG_SetFullScale+0x20>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e004      	b.n	8003c0e <LIS3MDL_MAG_SetFullScale+0x2a>
 8003c04:	2303      	movs	r3, #3
 8003c06:	e002      	b.n	8003c0e <LIS3MDL_MAG_SetFullScale+0x2a>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <LIS3MDL_MAG_SetFullScale+0x2a>
 8003c0c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
 8003c0e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 12) ? LIS3MDL_12_GAUSS
           :                       LIS3MDL_16_GAUSS;

  if (lis3mdl_full_scale_set(&(pObj->Ctx), new_fs) != LIS3MDL_OK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	331c      	adds	r3, #28
 8003c14:	7bfa      	ldrb	r2, [r7, #15]
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fa9d 	bl	8004158 <lis3mdl_full_scale_set>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <LIS3MDL_MAG_SetFullScale+0x46>
  {
    return LIS3MDL_ERROR;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e000      	b.n	8003c2c <LIS3MDL_MAG_SetFullScale+0x48>
  }

  return LIS3MDL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <LIS3MDL_MAG_GetAxesRaw>:
 * @param pObj the device pObj
 * @param Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetAxesRaw(LIS3MDL_Object_t *pObj, LIS3MDL_AxesRaw_t *Value)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  lis3mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis3mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3MDL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	331c      	adds	r3, #28
 8003c42:	f107 0208 	add.w	r2, r7, #8
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fb2f 	bl	80042ac <lis3mdl_magnetic_raw_get>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <LIS3MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS3MDL_ERROR;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
 8003c58:	e00c      	b.n	8003c74 <LIS3MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003c5a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003c62:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003c6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	809a      	strh	r2, [r3, #4]

  return LIS3MDL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <LIS3MDL_MAG_GetAxes>:
 * @param pObj the device pObj
 * @param MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_MAG_GetAxes(LIS3MDL_Object_t *pObj, LIS3MDL_Axes_t *MagneticField)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  lis3mdl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lis3mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3MDL_OK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	331c      	adds	r3, #28
 8003c90:	f107 0210 	add.w	r2, r7, #16
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fb08 	bl	80042ac <lis3mdl_magnetic_raw_get>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <LIS3MDL_MAG_GetAxes+0x2c>
  {
    return LIS3MDL_ERROR;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	e03c      	b.n	8003d22 <LIS3MDL_MAG_GetAxes+0xa6>
  }

  /* Get LIS3MDL actual sensitivity. */
  if (LIS3MDL_MAG_GetSensitivity(pObj, &sensitivity) != LIS3MDL_OK)
 8003ca8:	f107 030c 	add.w	r3, r7, #12
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fdd0 	bl	8003854 <LIS3MDL_MAG_GetSensitivity>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <LIS3MDL_MAG_GetAxes+0x44>
  {
    return LIS3MDL_ERROR;
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbe:	e030      	b.n	8003d22 <LIS3MDL_MAG_GetAxes+0xa6>
  }

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003cc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003cc4:	ee07 3a90 	vmov	s15, r3
 8003cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cd8:	ee17 2a90 	vmov	r2, s15
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003ce0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cf8:	ee17 2a90 	vmov	r2, s15
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003d00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d04:	ee07 3a90 	vmov	s15, r3
 8003d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d18:	ee17 2a90 	vmov	r2, s15
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	609a      	str	r2, [r3, #8]

  return LIS3MDL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <LIS3MDL_Write_Reg>:
 * @param Reg address to be written
 * @param Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS3MDL_Write_Reg(LIS3MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	70fb      	strb	r3, [r7, #3]
 8003d36:	4613      	mov	r3, r2
 8003d38:	70bb      	strb	r3, [r7, #2]
  if (lis3mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS3MDL_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f103 001c 	add.w	r0, r3, #28
 8003d40:	1cba      	adds	r2, r7, #2
 8003d42:	78f9      	ldrb	r1, [r7, #3]
 8003d44:	2301      	movs	r3, #1
 8003d46:	f000 f885 	bl	8003e54 <lis3mdl_write_reg>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <LIS3MDL_Write_Reg+0x2c>
  {
    return LIS3MDL_ERROR;
 8003d50:	f04f 33ff 	mov.w	r3, #4294967295
 8003d54:	e000      	b.n	8003d58 <LIS3MDL_Write_Reg+0x2e>
  }

  return LIS3MDL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <ReadRegWrap>:
  * @brief  Wrap Read register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	72fb      	strb	r3, [r7, #11]
 8003d70:	4613      	mov	r3, r2
 8003d72:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10e      	bne.n	8003d9e <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	695c      	ldr	r4, [r3, #20]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	7b1b      	ldrb	r3, [r3, #12]
 8003d88:	b298      	uxth	r0, r3
 8003d8a:	7afb      	ldrb	r3, [r7, #11]
 8003d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	b299      	uxth	r1, r3
 8003d94:	893b      	ldrh	r3, [r7, #8]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	47a0      	blx	r4
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	e00d      	b.n	8003dba <ReadRegWrap+0x5a>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	695c      	ldr	r4, [r3, #20]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	7b1b      	ldrb	r3, [r3, #12]
 8003da6:	b298      	uxth	r0, r3
 8003da8:	7afb      	ldrb	r3, [r7, #11]
 8003daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	b299      	uxth	r1, r3
 8003db2:	893b      	ldrh	r3, [r7, #8]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	47a0      	blx	r4
 8003db8:	4603      	mov	r3, r0
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd90      	pop	{r4, r7, pc}

08003dc2 <WriteRegWrap>:
  * @brief  Wrap Write register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003dc2:	b590      	push	{r4, r7, lr}
 8003dc4:	b087      	sub	sp, #28
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	460b      	mov	r3, r1
 8003dd0:	72fb      	strb	r3, [r7, #11]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10e      	bne.n	8003e00 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	691c      	ldr	r4, [r3, #16]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	7b1b      	ldrb	r3, [r3, #12]
 8003dea:	b298      	uxth	r0, r3
 8003dec:	7afb      	ldrb	r3, [r7, #11]
 8003dee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	b299      	uxth	r1, r3
 8003df6:	893b      	ldrh	r3, [r7, #8]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	47a0      	blx	r4
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	e00d      	b.n	8003e1c <WriteRegWrap+0x5a>
  }
  else   /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	691c      	ldr	r4, [r3, #16]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	7b1b      	ldrb	r3, [r3, #12]
 8003e08:	b298      	uxth	r0, r3
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
 8003e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	b299      	uxth	r1, r3
 8003e14:	893b      	ldrh	r3, [r7, #8]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	47a0      	blx	r4
 8003e1a:	4603      	mov	r3, r0
  }
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd90      	pop	{r4, r7, pc}

08003e24 <lis3mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	607a      	str	r2, [r7, #4]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	460b      	mov	r3, r1
 8003e32:	72fb      	strb	r3, [r7, #11]
 8003e34:	4613      	mov	r3, r2
 8003e36:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685c      	ldr	r4, [r3, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6898      	ldr	r0, [r3, #8]
 8003e40:	893b      	ldrh	r3, [r7, #8]
 8003e42:	7af9      	ldrb	r1, [r7, #11]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	47a0      	blx	r4
 8003e48:	6178      	str	r0, [r7, #20]
  return ret;
 8003e4a:	697b      	ldr	r3, [r7, #20]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd90      	pop	{r4, r7, pc}

08003e54 <lis3mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	460b      	mov	r3, r1
 8003e62:	72fb      	strb	r3, [r7, #11]
 8003e64:	4613      	mov	r3, r2
 8003e66:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681c      	ldr	r4, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6898      	ldr	r0, [r3, #8]
 8003e70:	893b      	ldrh	r3, [r7, #8]
 8003e72:	7af9      	ldrb	r1, [r7, #11]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	47a0      	blx	r4
 8003e78:	6178      	str	r0, [r7, #20]
  return ret;
 8003e7a:	697b      	ldr	r3, [r7, #20]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd90      	pop	{r4, r7, pc}

08003e84 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8003e90:	f107 0210 	add.w	r2, r7, #16
 8003e94:	2301      	movs	r3, #1
 8003e96:	2120      	movs	r1, #32
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ffc3 	bl	8003e24 <lis3mdl_read_reg>
 8003e9e:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	7c3b      	ldrb	r3, [r7, #16]
 8003eb0:	f362 0346 	bfi	r3, r2, #1, #6
 8003eb4:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8003eb6:	f107 0210 	add.w	r2, r7, #16
 8003eba:	2301      	movs	r3, #1
 8003ebc:	2120      	movs	r1, #32
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff ffc8 	bl	8003e54 <lis3mdl_write_reg>
 8003ec4:	6178      	str	r0, [r7, #20]
  }
  
  if (ret == 0)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8003ecc:	f107 020c 	add.w	r2, r7, #12
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	2123      	movs	r1, #35	; 0x23
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ffa5 	bl	8003e24 <lis3mdl_read_reg>
 8003eda:	6178      	str	r0, [r7, #20]
  }
  
  if (ret == 0)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d111      	bne.n	8003f06 <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	7b3b      	ldrb	r3, [r7, #12]
 8003ef0:	f362 0383 	bfi	r3, r2, #2, #2
 8003ef4:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 8003ef6:	f107 020c 	add.w	r2, r7, #12
 8003efa:	2301      	movs	r3, #1
 8003efc:	2123      	movs	r1, #35	; 0x23
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff ffa8 	bl	8003e54 <lis3mdl_write_reg>
 8003f04:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg4, 1);
  }

  return ret;
 8003f06:	697b      	ldr	r3, [r7, #20]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <lis3mdl_data_rate_get>:
  * @param  val      Get the values of om in reg CTRL_REG1(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_get(stmdev_ctx_t *ctx, lis3mdl_om_t *val)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  /* z axis, ctrl_reg4 -> omz is aligned with x/y axis ctrl_reg1 -> om*/
  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8003f1a:	f107 0208 	add.w	r2, r7, #8
 8003f1e:	2301      	movs	r3, #1
 8003f20:	2120      	movs	r1, #32
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ff7e 	bl	8003e24 <lis3mdl_read_reg>
 8003f28:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.om)
 8003f2a:	7a3b      	ldrb	r3, [r7, #8]
 8003f2c:	f3c3 0345 	ubfx	r3, r3, #1, #6
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b3e      	cmp	r3, #62	; 0x3e
 8003f34:	f200 8106 	bhi.w	8004144 <lis3mdl_data_rate_get+0x234>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <lis3mdl_data_rate_get+0x30>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	0800403d 	.word	0x0800403d
 8003f44:	08004045 	.word	0x08004045
 8003f48:	08004065 	.word	0x08004065
 8003f4c:	08004145 	.word	0x08004145
 8003f50:	0800406d 	.word	0x0800406d
 8003f54:	08004145 	.word	0x08004145
 8003f58:	08004075 	.word	0x08004075
 8003f5c:	08004145 	.word	0x08004145
 8003f60:	0800407d 	.word	0x0800407d
 8003f64:	08004145 	.word	0x08004145
 8003f68:	08004085 	.word	0x08004085
 8003f6c:	08004145 	.word	0x08004145
 8003f70:	0800408d 	.word	0x0800408d
 8003f74:	08004145 	.word	0x08004145
 8003f78:	08004095 	.word	0x08004095
 8003f7c:	08004145 	.word	0x08004145
 8003f80:	08004145 	.word	0x08004145
 8003f84:	0800404d 	.word	0x0800404d
 8003f88:	0800409d 	.word	0x0800409d
 8003f8c:	08004145 	.word	0x08004145
 8003f90:	080040a5 	.word	0x080040a5
 8003f94:	08004145 	.word	0x08004145
 8003f98:	080040ad 	.word	0x080040ad
 8003f9c:	08004145 	.word	0x08004145
 8003fa0:	080040b5 	.word	0x080040b5
 8003fa4:	08004145 	.word	0x08004145
 8003fa8:	080040bd 	.word	0x080040bd
 8003fac:	08004145 	.word	0x08004145
 8003fb0:	080040c5 	.word	0x080040c5
 8003fb4:	08004145 	.word	0x08004145
 8003fb8:	080040cd 	.word	0x080040cd
 8003fbc:	08004145 	.word	0x08004145
 8003fc0:	08004145 	.word	0x08004145
 8003fc4:	08004055 	.word	0x08004055
 8003fc8:	080040d5 	.word	0x080040d5
 8003fcc:	08004145 	.word	0x08004145
 8003fd0:	080040dd 	.word	0x080040dd
 8003fd4:	08004145 	.word	0x08004145
 8003fd8:	080040e5 	.word	0x080040e5
 8003fdc:	08004145 	.word	0x08004145
 8003fe0:	080040ed 	.word	0x080040ed
 8003fe4:	08004145 	.word	0x08004145
 8003fe8:	080040f5 	.word	0x080040f5
 8003fec:	08004145 	.word	0x08004145
 8003ff0:	080040fd 	.word	0x080040fd
 8003ff4:	08004145 	.word	0x08004145
 8003ff8:	08004105 	.word	0x08004105
 8003ffc:	08004145 	.word	0x08004145
 8004000:	08004145 	.word	0x08004145
 8004004:	0800405d 	.word	0x0800405d
 8004008:	0800410d 	.word	0x0800410d
 800400c:	08004145 	.word	0x08004145
 8004010:	08004115 	.word	0x08004115
 8004014:	08004145 	.word	0x08004145
 8004018:	0800411d 	.word	0x0800411d
 800401c:	08004145 	.word	0x08004145
 8004020:	08004125 	.word	0x08004125
 8004024:	08004145 	.word	0x08004145
 8004028:	0800412d 	.word	0x0800412d
 800402c:	08004145 	.word	0x08004145
 8004030:	08004135 	.word	0x08004135
 8004034:	08004145 	.word	0x08004145
 8004038:	0800413d 	.word	0x0800413d
  {
    case LIS3MDL_LP_Hz625:
      *val = LIS3MDL_LP_Hz625;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
      break;
 8004042:	e083      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_1kHz:
      *val = LIS3MDL_LP_1kHz;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	701a      	strb	r2, [r3, #0]
      break;
 800404a:	e07f      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_560Hz:
      *val = LIS3MDL_MP_560Hz;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2211      	movs	r2, #17
 8004050:	701a      	strb	r2, [r3, #0]
      break;
 8004052:	e07b      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_300Hz:
      *val = LIS3MDL_HP_300Hz;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2221      	movs	r2, #33	; 0x21
 8004058:	701a      	strb	r2, [r3, #0]
      break;
 800405a:	e077      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_155Hz:
      *val = LIS3MDL_UHP_155Hz;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2231      	movs	r2, #49	; 0x31
 8004060:	701a      	strb	r2, [r3, #0]
      break;
 8004062:	e073      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_1Hz25:
      *val = LIS3MDL_LP_1Hz25;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2202      	movs	r2, #2
 8004068:	701a      	strb	r2, [r3, #0]
      break;
 800406a:	e06f      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_2Hz5:
      *val = LIS3MDL_LP_2Hz5;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2204      	movs	r2, #4
 8004070:	701a      	strb	r2, [r3, #0]
      break;
 8004072:	e06b      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_5Hz:
      *val = LIS3MDL_LP_5Hz;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2206      	movs	r2, #6
 8004078:	701a      	strb	r2, [r3, #0]
      break;
 800407a:	e067      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_10Hz:
      *val = LIS3MDL_LP_10Hz;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2208      	movs	r2, #8
 8004080:	701a      	strb	r2, [r3, #0]
      break;
 8004082:	e063      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_20Hz:
      *val = LIS3MDL_LP_20Hz;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	220a      	movs	r2, #10
 8004088:	701a      	strb	r2, [r3, #0]
      break;
 800408a:	e05f      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_40Hz:
      *val = LIS3MDL_LP_40Hz;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	220c      	movs	r2, #12
 8004090:	701a      	strb	r2, [r3, #0]
      break;
 8004092:	e05b      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_LP_80Hz:
      *val = LIS3MDL_LP_80Hz;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	220e      	movs	r2, #14
 8004098:	701a      	strb	r2, [r3, #0]
      break;
 800409a:	e057      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_1Hz25:
      *val = LIS3MDL_MP_1Hz25;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2212      	movs	r2, #18
 80040a0:	701a      	strb	r2, [r3, #0]
      break;
 80040a2:	e053      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_2Hz5:
      *val = LIS3MDL_MP_2Hz5;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2214      	movs	r2, #20
 80040a8:	701a      	strb	r2, [r3, #0]
      break;
 80040aa:	e04f      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_5Hz:
      *val = LIS3MDL_MP_5Hz;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2216      	movs	r2, #22
 80040b0:	701a      	strb	r2, [r3, #0]
      break;
 80040b2:	e04b      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_10Hz:
      *val = LIS3MDL_MP_10Hz;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2218      	movs	r2, #24
 80040b8:	701a      	strb	r2, [r3, #0]
      break;
 80040ba:	e047      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_20Hz:
      *val = LIS3MDL_MP_20Hz;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	221a      	movs	r2, #26
 80040c0:	701a      	strb	r2, [r3, #0]
      break;
 80040c2:	e043      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_40Hz:
      *val = LIS3MDL_MP_40Hz;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	221c      	movs	r2, #28
 80040c8:	701a      	strb	r2, [r3, #0]
      break;
 80040ca:	e03f      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_MP_80Hz:
      *val = LIS3MDL_MP_80Hz;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	221e      	movs	r2, #30
 80040d0:	701a      	strb	r2, [r3, #0]
      break;
 80040d2:	e03b      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_1Hz25:
      *val = LIS3MDL_HP_1Hz25;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2222      	movs	r2, #34	; 0x22
 80040d8:	701a      	strb	r2, [r3, #0]
      break;
 80040da:	e037      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_2Hz5:
      *val = LIS3MDL_HP_2Hz5;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2224      	movs	r2, #36	; 0x24
 80040e0:	701a      	strb	r2, [r3, #0]
      break;
 80040e2:	e033      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_5Hz:
      *val = LIS3MDL_HP_5Hz;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2226      	movs	r2, #38	; 0x26
 80040e8:	701a      	strb	r2, [r3, #0]
      break;
 80040ea:	e02f      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_10Hz:
      *val = LIS3MDL_HP_10Hz;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2228      	movs	r2, #40	; 0x28
 80040f0:	701a      	strb	r2, [r3, #0]
      break;
 80040f2:	e02b      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_20Hz:
      *val = LIS3MDL_HP_20Hz;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	222a      	movs	r2, #42	; 0x2a
 80040f8:	701a      	strb	r2, [r3, #0]
      break;
 80040fa:	e027      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_40Hz:
      *val = LIS3MDL_HP_40Hz;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	222c      	movs	r2, #44	; 0x2c
 8004100:	701a      	strb	r2, [r3, #0]
      break;
 8004102:	e023      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_HP_80Hz:
      *val = LIS3MDL_HP_80Hz;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	222e      	movs	r2, #46	; 0x2e
 8004108:	701a      	strb	r2, [r3, #0]
      break;
 800410a:	e01f      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_1Hz25:
      *val = LIS3MDL_UHP_1Hz25;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2232      	movs	r2, #50	; 0x32
 8004110:	701a      	strb	r2, [r3, #0]
      break;
 8004112:	e01b      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_2Hz5:
      *val = LIS3MDL_UHP_2Hz5;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2234      	movs	r2, #52	; 0x34
 8004118:	701a      	strb	r2, [r3, #0]
      break;
 800411a:	e017      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_5Hz:
      *val = LIS3MDL_UHP_5Hz;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2236      	movs	r2, #54	; 0x36
 8004120:	701a      	strb	r2, [r3, #0]
      break;
 8004122:	e013      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_10Hz:
      *val = LIS3MDL_UHP_10Hz;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2238      	movs	r2, #56	; 0x38
 8004128:	701a      	strb	r2, [r3, #0]
      break;
 800412a:	e00f      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_20Hz:
      *val = LIS3MDL_UHP_20Hz;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	223a      	movs	r2, #58	; 0x3a
 8004130:	701a      	strb	r2, [r3, #0]
      break;
 8004132:	e00b      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_40Hz:
      *val = LIS3MDL_UHP_40Hz;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	223c      	movs	r2, #60	; 0x3c
 8004138:	701a      	strb	r2, [r3, #0]
      break;
 800413a:	e007      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    case LIS3MDL_UHP_80Hz:
      *val = LIS3MDL_UHP_80Hz;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	223e      	movs	r2, #62	; 0x3e
 8004140:	701a      	strb	r2, [r3, #0]
      break;
 8004142:	e003      	b.n	800414c <lis3mdl_data_rate_get+0x23c>
    default:
      *val = LIS3MDL_UHP_80Hz;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	223e      	movs	r2, #62	; 0x3e
 8004148:	701a      	strb	r2, [r3, #0]
      break;
 800414a:	bf00      	nop
  }

  return ret;
 800414c:	68fb      	ldr	r3, [r7, #12]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop

08004158 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004164:	f107 0208 	add.w	r2, r7, #8
 8004168:	2301      	movs	r3, #1
 800416a:	2121      	movs	r1, #33	; 0x21
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fe59 	bl	8003e24 <lis3mdl_read_reg>
 8004172:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	b2da      	uxtb	r2, r3
 8004182:	7a3b      	ldrb	r3, [r7, #8]
 8004184:	f362 1346 	bfi	r3, r2, #5, #2
 8004188:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800418a:	f107 0208 	add.w	r2, r7, #8
 800418e:	2301      	movs	r3, #1
 8004190:	2121      	movs	r1, #33	; 0x21
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fe5e 	bl	8003e54 <lis3mdl_write_reg>
 8004198:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <lis3mdl_full_scale_get>:
  * @param  val      get the values of fs in reg CTRL_REG2(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_get(stmdev_ctx_t *ctx, lis3mdl_fs_t *val)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 80041ae:	f107 0208 	add.w	r2, r7, #8
 80041b2:	2301      	movs	r3, #1
 80041b4:	2121      	movs	r1, #33	; 0x21
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fe34 	bl	8003e24 <lis3mdl_read_reg>
 80041bc:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg2.fs)
 80041be:	7a3b      	ldrb	r3, [r7, #8]
 80041c0:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d81a      	bhi.n	8004200 <lis3mdl_full_scale_get+0x5c>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <lis3mdl_full_scale_get+0x2c>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041e9 	.word	0x080041e9
 80041d8:	080041f1 	.word	0x080041f1
 80041dc:	080041f9 	.word	0x080041f9
  {
    case LIS3MDL_4_GAUSS:
      *val = LIS3MDL_4_GAUSS;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
      break;
 80041e6:	e00f      	b.n	8004208 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_8_GAUSS:
      *val = LIS3MDL_8_GAUSS;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2201      	movs	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]
      break;
 80041ee:	e00b      	b.n	8004208 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_12_GAUSS:
      *val = LIS3MDL_12_GAUSS;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2202      	movs	r2, #2
 80041f4:	701a      	strb	r2, [r3, #0]
      break;
 80041f6:	e007      	b.n	8004208 <lis3mdl_full_scale_get+0x64>
    case LIS3MDL_16_GAUSS:
      *val = LIS3MDL_16_GAUSS;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2203      	movs	r2, #3
 80041fc:	701a      	strb	r2, [r3, #0]
      break;
 80041fe:	e003      	b.n	8004208 <lis3mdl_full_scale_get+0x64>
    default:
      *val = LIS3MDL_4_GAUSS;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
      break;
 8004206:	bf00      	nop
  }

  return ret;
 8004208:	68fb      	ldr	r3, [r7, #12]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop

08004214 <lis3mdl_operating_mode_set>:
  * @param  val      change the values of md in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx, lis3mdl_md_t val)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 8004220:	f107 0208 	add.w	r2, r7, #8
 8004224:	2301      	movs	r3, #1
 8004226:	2122      	movs	r1, #34	; 0x22
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff fdfb 	bl	8003e24 <lis3mdl_read_reg>
 800422e:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	b2da      	uxtb	r2, r3
 800423e:	7a3b      	ldrb	r3, [r7, #8]
 8004240:	f362 0301 	bfi	r3, r2, #0, #2
 8004244:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
 8004246:	f107 0208 	add.w	r2, r7, #8
 800424a:	2301      	movs	r3, #1
 800424c:	2122      	movs	r1, #34	; 0x22
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fe00 	bl	8003e54 <lis3mdl_write_reg>
 8004254:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 800426c:	f107 0208 	add.w	r2, r7, #8
 8004270:	2301      	movs	r3, #1
 8004272:	2124      	movs	r1, #36	; 0x24
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff fdd5 	bl	8003e24 <lis3mdl_read_reg>
 800427a:	60f8      	str	r0, [r7, #12]
  if(ret == 0)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10f      	bne.n	80042a2 <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	b2da      	uxtb	r2, r3
 800428a:	7a3b      	ldrb	r3, [r7, #8]
 800428c:	f362 1386 	bfi	r3, r2, #6, #1
 8004290:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t*)&ctrl_reg5, 1);
 8004292:	f107 0208 	add.w	r2, r7, #8
 8004296:	2301      	movs	r3, #1
 8004298:	2124      	movs	r1, #36	; 0x24
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff fdda 	bl	8003e54 <lis3mdl_write_reg>
 80042a0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80042a2:	68fb      	ldr	r3, [r7, #12]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t*) buff, 6);
 80042b6:	f107 020c 	add.w	r2, r7, #12
 80042ba:	2306      	movs	r3, #6
 80042bc:	2128      	movs	r1, #40	; 0x28
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fdb0 	bl	8003e24 <lis3mdl_read_reg>
 80042c4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80042c6:	7b7b      	ldrb	r3, [r7, #13]
 80042c8:	b21a      	sxth	r2, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	b29a      	uxth	r2, r3
 80042da:	7b3b      	ldrb	r3, [r7, #12]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	4413      	add	r3, r2
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	b21a      	sxth	r2, r3
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	3302      	adds	r3, #2
 80042ee:	b212      	sxth	r2, r2
 80042f0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	3302      	adds	r3, #2
 80042f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	b29a      	uxth	r2, r3
 8004300:	7bbb      	ldrb	r3, [r7, #14]
 8004302:	b29b      	uxth	r3, r3
 8004304:	4413      	add	r3, r2
 8004306:	b29a      	uxth	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	3302      	adds	r3, #2
 800430c:	b212      	sxth	r2, r2
 800430e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004310:	7c7a      	ldrb	r2, [r7, #17]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	3304      	adds	r3, #4
 8004316:	b212      	sxth	r2, r2
 8004318:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	3304      	adds	r3, #4
 800431e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004322:	b29b      	uxth	r3, r3
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	b29a      	uxth	r2, r3
 8004328:	7c3b      	ldrb	r3, [r7, #16]
 800432a:	b29b      	uxth	r3, r3
 800432c:	4413      	add	r3, r2
 800432e:	b29a      	uxth	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	3304      	adds	r3, #4
 8004334:	b212      	sxth	r2, r2
 8004336:	801a      	strh	r2, [r3, #0]

  return ret;
 8004338:	697b      	ldr	r3, [r7, #20]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
  int32_t ret;  
  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t*) buff, 1);
 800434c:	2301      	movs	r3, #1
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	210f      	movs	r1, #15
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff fd66 	bl	8003e24 <lis3mdl_read_reg>
 8004358:	60f8      	str	r0, [r7, #12]
  return ret;
 800435a:	68fb      	ldr	r3, [r7, #12]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 f87b 	bl	800446c <LPS22HB_Init>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	4603      	mov	r3, r0
 8004386:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800438c:	f7fd ffcc 	bl	8002328 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	210f      	movs	r1, #15
 8004396:	4618      	mov	r0, r3
 8004398:	f7fd ffea 	bl	8002370 <SENSOR_IO_Read>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80043ba:	2300      	movs	r3, #0
 80043bc:	74fb      	strb	r3, [r7, #19]
 80043be:	e013      	b.n	80043e8 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	3328      	adds	r3, #40	; 0x28
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	7cfc      	ldrb	r4, [r7, #19]
 80043cc:	4619      	mov	r1, r3
 80043ce:	4610      	mov	r0, r2
 80043d0:	f7fd ffce 	bl	8002370 <SENSOR_IO_Read>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461a      	mov	r2, r3
 80043d8:	f107 0318 	add.w	r3, r7, #24
 80043dc:	4423      	add	r3, r4
 80043de:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	3301      	adds	r3, #1
 80043e6:	74fb      	strb	r3, [r7, #19]
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d9e8      	bls.n	80043c0 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	74fb      	strb	r3, [r7, #19]
 80043f2:	e010      	b.n	8004416 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	f107 0218 	add.w	r2, r7, #24
 80043fa:	4413      	add	r3, r2
 80043fc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004400:	461a      	mov	r2, r3
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	3301      	adds	r3, #1
 8004414:	74fb      	strb	r3, [r7, #19]
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d9eb      	bls.n	80043f4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800442c:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2264      	movs	r2, #100	; 0x64
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	da01      	bge.n	8004442 <LPS22HB_P_ReadPressure+0x96>
 800443e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004442:	131b      	asrs	r3, r3, #12
 8004444:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	ee07 3a90 	vmov	s15, r3
 800444c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004450:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004468 <LPS22HB_P_ReadPressure+0xbc>
 8004454:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004458:	eef0 7a66 	vmov.f32	s15, s13
}
 800445c:	eeb0 0a67 	vmov.f32	s0, s15
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	bd90      	pop	{r4, r7, pc}
 8004466:	bf00      	nop
 8004468:	42c80000 	.word	0x42c80000

0800446c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	211a      	movs	r1, #26
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd ff77 	bl	8002370 <SENSOR_IO_Read>
 8004482:	4603      	mov	r3, r0
 8004484:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	7bfa      	ldrb	r2, [r7, #15]
 800449c:	211a      	movs	r1, #26
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fd ff4c 	bl	800233c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2110      	movs	r1, #16
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fd ff60 	bl	8002370 <SENSOR_IO_Read>
 80044b0:	4603      	mov	r3, r0
 80044b2:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80044c2:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	f023 0302 	bic.w	r3, r3, #2
 80044ca:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	f043 0302 	orr.w	r3, r3, #2
 80044d2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	7bfa      	ldrb	r2, [r7, #15]
 80044da:	2110      	movs	r1, #16
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fd ff2d 	bl	800233c <SENSOR_IO_Write>
}  
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004500:	f04f 33ff 	mov.w	r3, #4294967295
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e04d      	b.n	80045a4 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	7b1a      	ldrb	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a1b      	ldr	r2, [pc, #108]	; (80045b0 <LSM6DSL_RegisterBusIO+0xc4>)
 8004544:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <LSM6DSL_RegisterBusIO+0xc8>)
 800454a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e020      	b.n	80045a4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4798      	blx	r3
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800456e:	f04f 33ff 	mov.w	r3, #4294967295
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e016      	b.n	80045a4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d112      	bne.n	80045a4 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10d      	bne.n	80045a4 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004588:	230c      	movs	r3, #12
 800458a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800458c:	7afb      	ldrb	r3, [r7, #11]
 800458e:	461a      	mov	r2, r3
 8004590:	2112      	movs	r1, #18
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fd2d 	bl	8004ff2 <LSM6DSL_Write_Reg>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800459e:	f04f 33ff 	mov.w	r3, #4294967295
 80045a2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80045a4:	68fb      	ldr	r3, [r7, #12]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	08005461 	.word	0x08005461
 80045b4:	08005497 	.word	0x08005497

080045b8 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	331c      	adds	r3, #28
 80045c4:	2101      	movs	r1, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 f9e5 	bl	8005996 <lsm6dsl_auto_increment_set>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80045d2:	f04f 33ff 	mov.w	r3, #4294967295
 80045d6:	e054      	b.n	8004682 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	331c      	adds	r3, #28
 80045dc:	2101      	movs	r1, #1
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 f980 	bl	80058e4 <lsm6dsl_block_data_update_set>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80045ea:	f04f 33ff 	mov.w	r3, #4294967295
 80045ee:	e048      	b.n	8004682 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	331c      	adds	r3, #28
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f001 f9f3 	bl	80059e2 <lsm6dsl_fifo_mode_set>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004602:	f04f 33ff 	mov.w	r3, #4294967295
 8004606:	e03c      	b.n	8004682 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2204      	movs	r2, #4
 800460c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	331c      	adds	r3, #28
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f000 ffe6 	bl	80055e8 <lsm6dsl_xl_data_rate_set>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8004622:	f04f 33ff 	mov.w	r3, #4294967295
 8004626:	e02c      	b.n	8004682 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	331c      	adds	r3, #28
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f000 ff7c 	bl	800552c <lsm6dsl_xl_full_scale_set>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800463a:	f04f 33ff 	mov.w	r3, #4294967295
 800463e:	e020      	b.n	8004682 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2204      	movs	r2, #4
 8004644:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	331c      	adds	r3, #28
 800464c:	2100      	movs	r1, #0
 800464e:	4618      	mov	r0, r3
 8004650:	f001 f8c0 	bl	80057d4 <lsm6dsl_gy_data_rate_set>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800465a:	f04f 33ff 	mov.w	r3, #4294967295
 800465e:	e010      	b.n	8004682 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	331c      	adds	r3, #28
 8004664:	2106      	movs	r1, #6
 8004666:	4618      	mov	r0, r3
 8004668:	f001 f84c 	bl	8005704 <lsm6dsl_gy_full_scale_set>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
 8004676:	e004      	b.n	8004682 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f888 	bl	80047a8 <LSM6DSL_ACC_Disable>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
 80046a2:	e015      	b.n	80046d0 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fa9a 	bl	8004bde <LSM6DSL_GYRO_Disable>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80046b0:	f04f 33ff 	mov.w	r3, #4294967295
 80046b4:	e00c      	b.n	80046d0 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	331c      	adds	r3, #28
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 f943 	bl	8005974 <lsm6dsl_device_id_get>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80046f4:	f04f 33ff 	mov.w	r3, #4294967295
 80046f8:	e000      	b.n	80046fc <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2201      	movs	r2, #1
 8004718:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2200      	movs	r2, #0
 800471e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800472c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2210      	movs	r2, #16
 8004732:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	4a07      	ldr	r2, [pc, #28]	; (800475c <LSM6DSL_GetCapabilities+0x58>)
 800473e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	4a06      	ldr	r2, [pc, #24]	; (800475c <LSM6DSL_GetCapabilities+0x58>)
 8004744:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	45d02000 	.word	0x45d02000

08004760 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	e014      	b.n	80047a0 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f103 021c 	add.w	r2, r3, #28
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f000 ff2f 	bl	80055e8 <lsm6dsl_xl_data_rate_set>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004790:	f04f 33ff 	mov.w	r3, #4294967295
 8004794:	e004      	b.n	80047a0 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e01f      	b.n	80047fe <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f103 021c 	add.w	r2, r3, #28
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	332b      	adds	r3, #43	; 0x2b
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f000 ff32 	bl	8005634 <lsm6dsl_xl_data_rate_get>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80047d6:	f04f 33ff 	mov.w	r3, #4294967295
 80047da:	e010      	b.n	80047fe <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	331c      	adds	r3, #28
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 ff00 	bl	80055e8 <lsm6dsl_xl_data_rate_set>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80047ee:	f04f 33ff 	mov.w	r3, #4294967295
 80047f2:	e004      	b.n	80047fe <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	331c      	adds	r3, #28
 800481a:	f107 020b 	add.w	r2, r7, #11
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fea9 	bl	8005578 <lsm6dsl_xl_full_scale_get>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800482c:	f04f 33ff 	mov.w	r3, #4294967295
 8004830:	e023      	b.n	800487a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004832:	7afb      	ldrb	r3, [r7, #11]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d81b      	bhi.n	8004870 <LSM6DSL_ACC_GetSensitivity+0x68>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004851 	.word	0x08004851
 8004844:	08004869 	.word	0x08004869
 8004848:	08004859 	.word	0x08004859
 800484c:	08004861 	.word	0x08004861
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4a0c      	ldr	r2, [pc, #48]	; (8004884 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004854:	601a      	str	r2, [r3, #0]
      break;
 8004856:	e00f      	b.n	8004878 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4a0b      	ldr	r2, [pc, #44]	; (8004888 <LSM6DSL_ACC_GetSensitivity+0x80>)
 800485c:	601a      	str	r2, [r3, #0]
      break;
 800485e:	e00b      	b.n	8004878 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	4a0a      	ldr	r2, [pc, #40]	; (800488c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004864:	601a      	str	r2, [r3, #0]
      break;
 8004866:	e007      	b.n	8004878 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4a09      	ldr	r2, [pc, #36]	; (8004890 <LSM6DSL_ACC_GetSensitivity+0x88>)
 800486c:	601a      	str	r2, [r3, #0]
      break;
 800486e:	e003      	b.n	8004878 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004870:	f04f 33ff 	mov.w	r3, #4294967295
 8004874:	60fb      	str	r3, [r7, #12]
      break;
 8004876:	bf00      	nop
  }

  return ret;
 8004878:	68fb      	ldr	r3, [r7, #12]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	3d79db23 	.word	0x3d79db23
 8004888:	3df9db23 	.word	0x3df9db23
 800488c:	3e79db23 	.word	0x3e79db23
 8004890:	3ef9db23 	.word	0x3ef9db23

08004894 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	331c      	adds	r3, #28
 80048a6:	f107 020b 	add.w	r2, r7, #11
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fec1 	bl	8005634 <lsm6dsl_xl_data_rate_get>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
 80048bc:	e054      	b.n	8004968 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80048be:	7afb      	ldrb	r3, [r7, #11]
 80048c0:	2b0b      	cmp	r3, #11
 80048c2:	d84c      	bhi.n	800495e <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048fd 	.word	0x080048fd
 80048d0:	0800490f 	.word	0x0800490f
 80048d4:	08004917 	.word	0x08004917
 80048d8:	0800491f 	.word	0x0800491f
 80048dc:	08004927 	.word	0x08004927
 80048e0:	0800492f 	.word	0x0800492f
 80048e4:	08004937 	.word	0x08004937
 80048e8:	0800493f 	.word	0x0800493f
 80048ec:	08004947 	.word	0x08004947
 80048f0:	0800494f 	.word	0x0800494f
 80048f4:	08004957 	.word	0x08004957
 80048f8:	08004907 	.word	0x08004907
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
      break;
 8004904:	e02f      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	4a19      	ldr	r2, [pc, #100]	; (8004970 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 800490a:	601a      	str	r2, [r3, #0]
      break;
 800490c:	e02b      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	4a18      	ldr	r2, [pc, #96]	; (8004974 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004912:	601a      	str	r2, [r3, #0]
      break;
 8004914:	e027      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	4a17      	ldr	r2, [pc, #92]	; (8004978 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 800491a:	601a      	str	r2, [r3, #0]
      break;
 800491c:	e023      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	4a16      	ldr	r2, [pc, #88]	; (800497c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8004922:	601a      	str	r2, [r3, #0]
      break;
 8004924:	e01f      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	4a15      	ldr	r2, [pc, #84]	; (8004980 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 800492a:	601a      	str	r2, [r3, #0]
      break;
 800492c:	e01b      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	4a14      	ldr	r2, [pc, #80]	; (8004984 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004932:	601a      	str	r2, [r3, #0]
      break;
 8004934:	e017      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	4a13      	ldr	r2, [pc, #76]	; (8004988 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 800493a:	601a      	str	r2, [r3, #0]
      break;
 800493c:	e013      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	4a12      	ldr	r2, [pc, #72]	; (800498c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004942:	601a      	str	r2, [r3, #0]
      break;
 8004944:	e00f      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	4a11      	ldr	r2, [pc, #68]	; (8004990 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 800494a:	601a      	str	r2, [r3, #0]
      break;
 800494c:	e00b      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	4a10      	ldr	r2, [pc, #64]	; (8004994 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8004952:	601a      	str	r2, [r3, #0]
      break;
 8004954:	e007      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	4a0f      	ldr	r2, [pc, #60]	; (8004998 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 800495a:	601a      	str	r2, [r3, #0]
      break;
 800495c:	e003      	b.n	8004966 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800495e:	f04f 33ff 	mov.w	r3, #4294967295
 8004962:	60fb      	str	r3, [r7, #12]
      break;
 8004964:	bf00      	nop
  }

  return ret;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	3fcccccd 	.word	0x3fcccccd
 8004974:	41480000 	.word	0x41480000
 8004978:	41d00000 	.word	0x41d00000
 800497c:	42500000 	.word	0x42500000
 8004980:	42d00000 	.word	0x42d00000
 8004984:	43500000 	.word	0x43500000
 8004988:	43d00000 	.word	0x43d00000
 800498c:	44504000 	.word	0x44504000
 8004990:	44cf8000 	.word	0x44cf8000
 8004994:	45502000 	.word	0x45502000
 8004998:	45d02000 	.word	0x45d02000

0800499c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d106      	bne.n	80049c0 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80049b2:	ed97 0a00 	vldr	s0, [r7]
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fb36 	bl	8005028 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80049bc:	4603      	mov	r3, r0
 80049be:	e005      	b.n	80049cc <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80049c0:	ed97 0a00 	vldr	s0, [r7]
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fbbb 	bl	8005140 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80049ca:	4603      	mov	r3, r0
  }
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	331c      	adds	r3, #28
 80049e6:	f107 020b 	add.w	r2, r7, #11
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fdc3 	bl	8005578 <lsm6dsl_xl_full_scale_get>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80049f8:	f04f 33ff 	mov.w	r3, #4294967295
 80049fc:	e023      	b.n	8004a46 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80049fe:	7afb      	ldrb	r3, [r7, #11]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d81b      	bhi.n	8004a3c <LSM6DSL_ACC_GetFullScale+0x68>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <LSM6DSL_ACC_GetFullScale+0x38>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a1d 	.word	0x08004a1d
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004a25 	.word	0x08004a25
 8004a18:	08004a2d 	.word	0x08004a2d
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	601a      	str	r2, [r3, #0]
      break;
 8004a22:	e00f      	b.n	8004a44 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2204      	movs	r2, #4
 8004a28:	601a      	str	r2, [r3, #0]
      break;
 8004a2a:	e00b      	b.n	8004a44 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2208      	movs	r2, #8
 8004a30:	601a      	str	r2, [r3, #0]
      break;
 8004a32:	e007      	b.n	8004a44 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2210      	movs	r2, #16
 8004a38:	601a      	str	r2, [r3, #0]
      break;
 8004a3a:	e003      	b.n	8004a44 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a40:	60fb      	str	r3, [r7, #12]
      break;
 8004a42:	bf00      	nop
  }

  return ret;
 8004a44:	68fb      	ldr	r3, [r7, #12]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop

08004a50 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	dd0b      	ble.n	8004a78 <LSM6DSL_ACC_SetFullScale+0x28>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	dd06      	ble.n	8004a74 <LSM6DSL_ACC_SetFullScale+0x24>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	dc01      	bgt.n	8004a70 <LSM6DSL_ACC_SetFullScale+0x20>
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e004      	b.n	8004a7a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e002      	b.n	8004a7a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e000      	b.n	8004a7a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a78:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004a7a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	331c      	adds	r3, #28
 8004a80:	7bfa      	ldrb	r2, [r7, #15]
 8004a82:	4611      	mov	r1, r2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fd51 	bl	800552c <lsm6dsl_xl_full_scale_set>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295
 8004a94:	e000      	b.n	8004a98 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	331c      	adds	r3, #28
 8004aae:	f107 0208 	add.w	r2, r7, #8
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 ff4c 	bl	8005952 <lsm6dsl_acceleration_raw_get>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac4:	e00c      	b.n	8004ae0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004ac6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004ace:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004ad6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	331c      	adds	r3, #28
 8004afc:	f107 0210 	add.w	r2, r7, #16
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 ff25 	bl	8005952 <lsm6dsl_acceleration_raw_get>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b12:	e03c      	b.n	8004b8e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004b14:	f107 030c 	add.w	r3, r7, #12
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fe74 	bl	8004808 <LSM6DSL_ACC_GetSensitivity>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2a:	e030      	b.n	8004b8e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004b2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b30:	ee07 3a90 	vmov	s15, r3
 8004b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b38:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b44:	ee17 2a90 	vmov	r2, s15
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004b4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b50:	ee07 3a90 	vmov	s15, r3
 8004b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b58:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b64:	ee17 2a90 	vmov	r2, s15
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004b6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b70:	ee07 3a90 	vmov	s15, r3
 8004b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b84:	ee17 2a90 	vmov	r2, s15
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e014      	b.n	8004bd6 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f103 021c 	add.w	r2, r3, #28
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f000 fe0a 	bl	80057d4 <lsm6dsl_gy_data_rate_set>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bca:	e004      	b.n	8004bd6 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e01f      	b.n	8004c34 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f103 021c 	add.w	r2, r3, #28
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	332c      	adds	r3, #44	; 0x2c
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f000 fe0d 	bl	8005820 <lsm6dsl_gy_data_rate_get>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c10:	e010      	b.n	8004c34 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	331c      	adds	r3, #28
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fddb 	bl	80057d4 <lsm6dsl_gy_data_rate_set>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295
 8004c28:	e004      	b.n	8004c34 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	331c      	adds	r3, #28
 8004c4e:	f107 020b 	add.w	r2, r7, #11
 8004c52:	4611      	mov	r1, r2
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fd7b 	bl	8005750 <lsm6dsl_gy_full_scale_get>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004c60:	f04f 33ff 	mov.w	r3, #4294967295
 8004c64:	e02d      	b.n	8004cc2 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004c66:	7afb      	ldrb	r3, [r7, #11]
 8004c68:	2b06      	cmp	r3, #6
 8004c6a:	d825      	bhi.n	8004cb8 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004c6c:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c72:	bf00      	nop
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004c91 	.word	0x08004c91
 8004c7c:	08004ca1 	.word	0x08004ca1
 8004c80:	08004cb9 	.word	0x08004cb9
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cb9 	.word	0x08004cb9
 8004c8c:	08004cb1 	.word	0x08004cb1
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	4a0e      	ldr	r2, [pc, #56]	; (8004ccc <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004c94:	601a      	str	r2, [r3, #0]
      break;
 8004c96:	e013      	b.n	8004cc0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	4a0d      	ldr	r2, [pc, #52]	; (8004cd0 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004c9c:	601a      	str	r2, [r3, #0]
      break;
 8004c9e:	e00f      	b.n	8004cc0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004ca4:	601a      	str	r2, [r3, #0]
      break;
 8004ca6:	e00b      	b.n	8004cc0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	4a0b      	ldr	r2, [pc, #44]	; (8004cd8 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004cac:	601a      	str	r2, [r3, #0]
      break;
 8004cae:	e007      	b.n	8004cc0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004cb4:	601a      	str	r2, [r3, #0]
      break;
 8004cb6:	e003      	b.n	8004cc0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cbc:	60fb      	str	r3, [r7, #12]
      break;
 8004cbe:	bf00      	nop
  }

  return ret;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	408c0000 	.word	0x408c0000
 8004cd0:	410c0000 	.word	0x410c0000
 8004cd4:	418c0000 	.word	0x418c0000
 8004cd8:	420c0000 	.word	0x420c0000
 8004cdc:	428c0000 	.word	0x428c0000

08004ce0 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	331c      	adds	r3, #28
 8004cf2:	f107 020b 	add.w	r2, r7, #11
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fd91 	bl	8005820 <lsm6dsl_gy_data_rate_get>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004d04:	f04f 33ff 	mov.w	r3, #4294967295
 8004d08:	e04e      	b.n	8004da8 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
 8004d0c:	2b0a      	cmp	r3, #10
 8004d0e:	d846      	bhi.n	8004d9e <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004d10:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d16:	bf00      	nop
 8004d18:	08004d45 	.word	0x08004d45
 8004d1c:	08004d4f 	.word	0x08004d4f
 8004d20:	08004d57 	.word	0x08004d57
 8004d24:	08004d5f 	.word	0x08004d5f
 8004d28:	08004d67 	.word	0x08004d67
 8004d2c:	08004d6f 	.word	0x08004d6f
 8004d30:	08004d77 	.word	0x08004d77
 8004d34:	08004d7f 	.word	0x08004d7f
 8004d38:	08004d87 	.word	0x08004d87
 8004d3c:	08004d8f 	.word	0x08004d8f
 8004d40:	08004d97 	.word	0x08004d97
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
      break;
 8004d4c:	e02b      	b.n	8004da6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	4a17      	ldr	r2, [pc, #92]	; (8004db0 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004d52:	601a      	str	r2, [r3, #0]
      break;
 8004d54:	e027      	b.n	8004da6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	4a16      	ldr	r2, [pc, #88]	; (8004db4 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004d5a:	601a      	str	r2, [r3, #0]
      break;
 8004d5c:	e023      	b.n	8004da6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	4a15      	ldr	r2, [pc, #84]	; (8004db8 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004d62:	601a      	str	r2, [r3, #0]
      break;
 8004d64:	e01f      	b.n	8004da6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	4a14      	ldr	r2, [pc, #80]	; (8004dbc <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004d6a:	601a      	str	r2, [r3, #0]
      break;
 8004d6c:	e01b      	b.n	8004da6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004d72:	601a      	str	r2, [r3, #0]
      break;
 8004d74:	e017      	b.n	8004da6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	4a12      	ldr	r2, [pc, #72]	; (8004dc4 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004d7a:	601a      	str	r2, [r3, #0]
      break;
 8004d7c:	e013      	b.n	8004da6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004d82:	601a      	str	r2, [r3, #0]
      break;
 8004d84:	e00f      	b.n	8004da6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004d8a:	601a      	str	r2, [r3, #0]
      break;
 8004d8c:	e00b      	b.n	8004da6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	4a0f      	ldr	r2, [pc, #60]	; (8004dd0 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004d92:	601a      	str	r2, [r3, #0]
      break;
 8004d94:	e007      	b.n	8004da6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	4a0e      	ldr	r2, [pc, #56]	; (8004dd4 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004d9a:	601a      	str	r2, [r3, #0]
      break;
 8004d9c:	e003      	b.n	8004da6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004da2:	60fb      	str	r3, [r7, #12]
      break;
 8004da4:	bf00      	nop
  }

  return ret;
 8004da6:	68fb      	ldr	r3, [r7, #12]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	41480000 	.word	0x41480000
 8004db4:	41d00000 	.word	0x41d00000
 8004db8:	42500000 	.word	0x42500000
 8004dbc:	42d00000 	.word	0x42d00000
 8004dc0:	43500000 	.word	0x43500000
 8004dc4:	43d00000 	.word	0x43d00000
 8004dc8:	44504000 	.word	0x44504000
 8004dcc:	44cf8000 	.word	0x44cf8000
 8004dd0:	45502000 	.word	0x45502000
 8004dd4:	45d02000 	.word	0x45d02000

08004dd8 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d106      	bne.n	8004dfc <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004dee:	ed97 0a00 	vldr	s0, [r7]
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fa26 	bl	8005244 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	e005      	b.n	8004e08 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004dfc:	ed97 0a00 	vldr	s0, [r7]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 faab 	bl	800535c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004e06:	4603      	mov	r3, r0
  }
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	331c      	adds	r3, #28
 8004e22:	f107 020b 	add.w	r2, r7, #11
 8004e26:	4611      	mov	r1, r2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fc91 	bl	8005750 <lsm6dsl_gy_full_scale_get>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004e34:	f04f 33ff 	mov.w	r3, #4294967295
 8004e38:	e030      	b.n	8004e9c <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004e3a:	7afb      	ldrb	r3, [r7, #11]
 8004e3c:	2b06      	cmp	r3, #6
 8004e3e:	d828      	bhi.n	8004e92 <LSM6DSL_GYRO_GetFullScale+0x82>
 8004e40:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e6d 	.word	0x08004e6d
 8004e4c:	08004e65 	.word	0x08004e65
 8004e50:	08004e75 	.word	0x08004e75
 8004e54:	08004e93 	.word	0x08004e93
 8004e58:	08004e7f 	.word	0x08004e7f
 8004e5c:	08004e93 	.word	0x08004e93
 8004e60:	08004e89 	.word	0x08004e89
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	227d      	movs	r2, #125	; 0x7d
 8004e68:	601a      	str	r2, [r3, #0]
      break;
 8004e6a:	e016      	b.n	8004e9a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	22fa      	movs	r2, #250	; 0xfa
 8004e70:	601a      	str	r2, [r3, #0]
      break;
 8004e72:	e012      	b.n	8004e9a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e7a:	601a      	str	r2, [r3, #0]
      break;
 8004e7c:	e00d      	b.n	8004e9a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e84:	601a      	str	r2, [r3, #0]
      break;
 8004e86:	e008      	b.n	8004e9a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004e8e:	601a      	str	r2, [r3, #0]
      break;
 8004e90:	e003      	b.n	8004e9a <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004e92:	f04f 33ff 	mov.w	r3, #4294967295
 8004e96:	60fb      	str	r3, [r7, #12]
      break;
 8004e98:	bf00      	nop
  }

  return ret;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b7d      	cmp	r3, #125	; 0x7d
 8004eb2:	dd12      	ble.n	8004eda <LSM6DSL_GYRO_SetFullScale+0x36>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2bfa      	cmp	r3, #250	; 0xfa
 8004eb8:	dd0d      	ble.n	8004ed6 <LSM6DSL_GYRO_SetFullScale+0x32>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ec0:	dd07      	ble.n	8004ed2 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ec8:	dc01      	bgt.n	8004ece <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004eca:	2304      	movs	r3, #4
 8004ecc:	e006      	b.n	8004edc <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ece:	2306      	movs	r3, #6
 8004ed0:	e004      	b.n	8004edc <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e002      	b.n	8004edc <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <LSM6DSL_GYRO_SetFullScale+0x38>
 8004eda:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004edc:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	331c      	adds	r3, #28
 8004ee2:	7bfa      	ldrb	r2, [r7, #15]
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fc0c 	bl	8005704 <lsm6dsl_gy_full_scale_set>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	e000      	b.n	8004efa <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	331c      	adds	r3, #28
 8004f10:	f107 0208 	add.w	r2, r7, #8
 8004f14:	4611      	mov	r1, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fd0a 	bl	8005930 <lsm6dsl_angular_rate_raw_get>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004f22:	f04f 33ff 	mov.w	r3, #4294967295
 8004f26:	e00c      	b.n	8004f42 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004f28:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004f30:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004f38:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b086      	sub	sp, #24
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	331c      	adds	r3, #28
 8004f58:	f107 0210 	add.w	r2, r7, #16
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fce6 	bl	8005930 <lsm6dsl_angular_rate_raw_get>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6e:	e03c      	b.n	8004fea <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004f70:	f107 030c 	add.w	r3, r7, #12
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff fe60 	bl	8004c3c <LSM6DSL_GYRO_GetSensitivity>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295
 8004f86:	e030      	b.n	8004fea <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004f88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f94:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fa0:	ee17 2a90 	vmov	r2, s15
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004fa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004fac:	ee07 3a90 	vmov	s15, r3
 8004fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fc0:	ee17 2a90 	vmov	r2, s15
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004fc8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004fcc:	ee07 3a90 	vmov	s15, r3
 8004fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fe0:	ee17 2a90 	vmov	r2, s15
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	70fb      	strb	r3, [r7, #3]
 8004ffe:	4613      	mov	r3, r2
 8005000:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f103 001c 	add.w	r0, r3, #28
 8005008:	1cba      	adds	r2, r7, #2
 800500a:	78f9      	ldrb	r1, [r7, #3]
 800500c:	2301      	movs	r3, #1
 800500e:	f000 fa75 	bl	80054fc <lsm6dsl_write_reg>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8005018:	f04f 33ff 	mov.w	r3, #4294967295
 800501c:	e000      	b.n	8005020 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005034:	edd7 7a00 	vldr	s15, [r7]
 8005038:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800503c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005044:	d801      	bhi.n	800504a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005046:	2301      	movs	r3, #1
 8005048:	e058      	b.n	80050fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800504a:	edd7 7a00 	vldr	s15, [r7]
 800504e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505a:	d801      	bhi.n	8005060 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 800505c:	2302      	movs	r3, #2
 800505e:	e04d      	b.n	80050fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005060:	edd7 7a00 	vldr	s15, [r7]
 8005064:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005124 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8005068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800506c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005070:	d801      	bhi.n	8005076 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005072:	2303      	movs	r3, #3
 8005074:	e042      	b.n	80050fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005076:	edd7 7a00 	vldr	s15, [r7]
 800507a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005128 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800507e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005086:	d801      	bhi.n	800508c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005088:	2304      	movs	r3, #4
 800508a:	e037      	b.n	80050fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800508c:	edd7 7a00 	vldr	s15, [r7]
 8005090:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800512c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509c:	d801      	bhi.n	80050a2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800509e:	2305      	movs	r3, #5
 80050a0:	e02c      	b.n	80050fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050a2:	edd7 7a00 	vldr	s15, [r7]
 80050a6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005130 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80050aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b2:	d801      	bhi.n	80050b8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80050b4:	2306      	movs	r3, #6
 80050b6:	e021      	b.n	80050fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050b8:	edd7 7a00 	vldr	s15, [r7]
 80050bc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005134 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80050c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	d801      	bhi.n	80050ce <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80050ca:	2307      	movs	r3, #7
 80050cc:	e016      	b.n	80050fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050ce:	edd7 7a00 	vldr	s15, [r7]
 80050d2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005138 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80050d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050de:	d801      	bhi.n	80050e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80050e0:	2308      	movs	r3, #8
 80050e2:	e00b      	b.n	80050fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050e4:	edd7 7a00 	vldr	s15, [r7]
 80050e8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800513c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80050ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f4:	d801      	bhi.n	80050fa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80050f6:	2309      	movs	r3, #9
 80050f8:	e000      	b.n	80050fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050fa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80050fc:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	331c      	adds	r3, #28
 8005102:	7bfa      	ldrb	r2, [r7, #15]
 8005104:	4611      	mov	r1, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fa6e 	bl	80055e8 <lsm6dsl_xl_data_rate_set>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8005112:	f04f 33ff 	mov.w	r3, #4294967295
 8005116:	e000      	b.n	800511a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	42500000 	.word	0x42500000
 8005128:	42d00000 	.word	0x42d00000
 800512c:	43500000 	.word	0x43500000
 8005130:	43d00000 	.word	0x43d00000
 8005134:	44504000 	.word	0x44504000
 8005138:	44cf8000 	.word	0x44cf8000
 800513c:	45502000 	.word	0x45502000

08005140 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800514c:	edd7 7a00 	vldr	s15, [r7]
 8005150:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515c:	d801      	bhi.n	8005162 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800515e:	2301      	movs	r3, #1
 8005160:	e058      	b.n	8005214 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005162:	edd7 7a00 	vldr	s15, [r7]
 8005166:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800516a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800516e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005172:	d801      	bhi.n	8005178 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005174:	2302      	movs	r3, #2
 8005176:	e04d      	b.n	8005214 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005178:	edd7 7a00 	vldr	s15, [r7]
 800517c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005228 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005188:	d801      	bhi.n	800518e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800518a:	2303      	movs	r3, #3
 800518c:	e042      	b.n	8005214 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800518e:	edd7 7a00 	vldr	s15, [r7]
 8005192:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800522c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800519a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519e:	d801      	bhi.n	80051a4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80051a0:	2304      	movs	r3, #4
 80051a2:	e037      	b.n	8005214 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051a4:	edd7 7a00 	vldr	s15, [r7]
 80051a8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005230 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80051ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b4:	d801      	bhi.n	80051ba <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80051b6:	2305      	movs	r3, #5
 80051b8:	e02c      	b.n	8005214 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051ba:	edd7 7a00 	vldr	s15, [r7]
 80051be:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005234 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80051c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ca:	d801      	bhi.n	80051d0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80051cc:	2306      	movs	r3, #6
 80051ce:	e021      	b.n	8005214 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051d0:	edd7 7a00 	vldr	s15, [r7]
 80051d4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005238 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80051d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e0:	d801      	bhi.n	80051e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80051e2:	2307      	movs	r3, #7
 80051e4:	e016      	b.n	8005214 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051e6:	edd7 7a00 	vldr	s15, [r7]
 80051ea:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800523c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80051ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f6:	d801      	bhi.n	80051fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80051f8:	2308      	movs	r3, #8
 80051fa:	e00b      	b.n	8005214 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051fc:	edd7 7a00 	vldr	s15, [r7]
 8005200:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005240 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520c:	d801      	bhi.n	8005212 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800520e:	2309      	movs	r3, #9
 8005210:	e000      	b.n	8005214 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005212:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	42500000 	.word	0x42500000
 800522c:	42d00000 	.word	0x42d00000
 8005230:	43500000 	.word	0x43500000
 8005234:	43d00000 	.word	0x43d00000
 8005238:	44504000 	.word	0x44504000
 800523c:	44cf8000 	.word	0x44cf8000
 8005240:	45502000 	.word	0x45502000

08005244 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005250:	edd7 7a00 	vldr	s15, [r7]
 8005254:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800525c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005260:	d801      	bhi.n	8005266 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005262:	2301      	movs	r3, #1
 8005264:	e058      	b.n	8005318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005266:	edd7 7a00 	vldr	s15, [r7]
 800526a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800526e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005276:	d801      	bhi.n	800527c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005278:	2302      	movs	r3, #2
 800527a:	e04d      	b.n	8005318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800527c:	edd7 7a00 	vldr	s15, [r7]
 8005280:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005340 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528c:	d801      	bhi.n	8005292 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800528e:	2303      	movs	r3, #3
 8005290:	e042      	b.n	8005318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005292:	edd7 7a00 	vldr	s15, [r7]
 8005296:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005344 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800529a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800529e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a2:	d801      	bhi.n	80052a8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80052a4:	2304      	movs	r3, #4
 80052a6:	e037      	b.n	8005318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052a8:	edd7 7a00 	vldr	s15, [r7]
 80052ac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005348 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80052b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b8:	d801      	bhi.n	80052be <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80052ba:	2305      	movs	r3, #5
 80052bc:	e02c      	b.n	8005318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052be:	edd7 7a00 	vldr	s15, [r7]
 80052c2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800534c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80052c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ce:	d801      	bhi.n	80052d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80052d0:	2306      	movs	r3, #6
 80052d2:	e021      	b.n	8005318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052d4:	edd7 7a00 	vldr	s15, [r7]
 80052d8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005350 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80052dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e4:	d801      	bhi.n	80052ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80052e6:	2307      	movs	r3, #7
 80052e8:	e016      	b.n	8005318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052ea:	edd7 7a00 	vldr	s15, [r7]
 80052ee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005354 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80052f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fa:	d801      	bhi.n	8005300 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80052fc:	2308      	movs	r3, #8
 80052fe:	e00b      	b.n	8005318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005300:	edd7 7a00 	vldr	s15, [r7]
 8005304:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005358 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800530c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005310:	d801      	bhi.n	8005316 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005312:	2309      	movs	r3, #9
 8005314:	e000      	b.n	8005318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005316:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005318:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	331c      	adds	r3, #28
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fa56 	bl	80057d4 <lsm6dsl_gy_data_rate_set>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	e000      	b.n	8005336 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	42500000 	.word	0x42500000
 8005344:	42d00000 	.word	0x42d00000
 8005348:	43500000 	.word	0x43500000
 800534c:	43d00000 	.word	0x43d00000
 8005350:	44504000 	.word	0x44504000
 8005354:	44cf8000 	.word	0x44cf8000
 8005358:	45502000 	.word	0x45502000

0800535c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005368:	edd7 7a00 	vldr	s15, [r7]
 800536c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005378:	d801      	bhi.n	800537e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800537a:	2301      	movs	r3, #1
 800537c:	e058      	b.n	8005430 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800537e:	edd7 7a00 	vldr	s15, [r7]
 8005382:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800538a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538e:	d801      	bhi.n	8005394 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005390:	2302      	movs	r3, #2
 8005392:	e04d      	b.n	8005430 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005394:	edd7 7a00 	vldr	s15, [r7]
 8005398:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005444 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800539c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a4:	d801      	bhi.n	80053aa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80053a6:	2303      	movs	r3, #3
 80053a8:	e042      	b.n	8005430 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053aa:	edd7 7a00 	vldr	s15, [r7]
 80053ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005448 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80053b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ba:	d801      	bhi.n	80053c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80053bc:	2304      	movs	r3, #4
 80053be:	e037      	b.n	8005430 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053c0:	edd7 7a00 	vldr	s15, [r7]
 80053c4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800544c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80053c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d0:	d801      	bhi.n	80053d6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80053d2:	2305      	movs	r3, #5
 80053d4:	e02c      	b.n	8005430 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053d6:	edd7 7a00 	vldr	s15, [r7]
 80053da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005450 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80053de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e6:	d801      	bhi.n	80053ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80053e8:	2306      	movs	r3, #6
 80053ea:	e021      	b.n	8005430 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053ec:	edd7 7a00 	vldr	s15, [r7]
 80053f0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005454 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80053f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fc:	d801      	bhi.n	8005402 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80053fe:	2307      	movs	r3, #7
 8005400:	e016      	b.n	8005430 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005402:	edd7 7a00 	vldr	s15, [r7]
 8005406:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005458 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800540a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005412:	d801      	bhi.n	8005418 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005414:	2308      	movs	r3, #8
 8005416:	e00b      	b.n	8005430 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005418:	edd7 7a00 	vldr	s15, [r7]
 800541c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800545c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005428:	d801      	bhi.n	800542e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800542a:	2309      	movs	r3, #9
 800542c:	e000      	b.n	8005430 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800542e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	42500000 	.word	0x42500000
 8005448:	42d00000 	.word	0x42d00000
 800544c:	43500000 	.word	0x43500000
 8005450:	43d00000 	.word	0x43d00000
 8005454:	44504000 	.word	0x44504000
 8005458:	44cf8000 	.word	0x44cf8000
 800545c:	45502000 	.word	0x45502000

08005460 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	461a      	mov	r2, r3
 800546c:	460b      	mov	r3, r1
 800546e:	72fb      	strb	r3, [r7, #11]
 8005470:	4613      	mov	r3, r2
 8005472:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	695c      	ldr	r4, [r3, #20]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	7b1b      	ldrb	r3, [r3, #12]
 8005480:	b298      	uxth	r0, r3
 8005482:	7afb      	ldrb	r3, [r7, #11]
 8005484:	b299      	uxth	r1, r3
 8005486:	893b      	ldrh	r3, [r7, #8]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	47a0      	blx	r4
 800548c:	4603      	mov	r3, r0
}
 800548e:	4618      	mov	r0, r3
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	bd90      	pop	{r4, r7, pc}

08005496 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005496:	b590      	push	{r4, r7, lr}
 8005498:	b087      	sub	sp, #28
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	461a      	mov	r2, r3
 80054a2:	460b      	mov	r3, r1
 80054a4:	72fb      	strb	r3, [r7, #11]
 80054a6:	4613      	mov	r3, r2
 80054a8:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	691c      	ldr	r4, [r3, #16]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	7b1b      	ldrb	r3, [r3, #12]
 80054b6:	b298      	uxth	r0, r3
 80054b8:	7afb      	ldrb	r3, [r7, #11]
 80054ba:	b299      	uxth	r1, r3
 80054bc:	893b      	ldrh	r3, [r7, #8]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	47a0      	blx	r4
 80054c2:	4603      	mov	r3, r0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd90      	pop	{r4, r7, pc}

080054cc <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	461a      	mov	r2, r3
 80054d8:	460b      	mov	r3, r1
 80054da:	72fb      	strb	r3, [r7, #11]
 80054dc:	4613      	mov	r3, r2
 80054de:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685c      	ldr	r4, [r3, #4]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6898      	ldr	r0, [r3, #8]
 80054e8:	893b      	ldrh	r3, [r7, #8]
 80054ea:	7af9      	ldrb	r1, [r7, #11]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	47a0      	blx	r4
 80054f0:	6178      	str	r0, [r7, #20]
  return ret;
 80054f2:	697b      	ldr	r3, [r7, #20]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd90      	pop	{r4, r7, pc}

080054fc <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	607a      	str	r2, [r7, #4]
 8005506:	461a      	mov	r2, r3
 8005508:	460b      	mov	r3, r1
 800550a:	72fb      	strb	r3, [r7, #11]
 800550c:	4613      	mov	r3, r2
 800550e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681c      	ldr	r4, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6898      	ldr	r0, [r3, #8]
 8005518:	893b      	ldrh	r3, [r7, #8]
 800551a:	7af9      	ldrb	r1, [r7, #11]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	47a0      	blx	r4
 8005520:	6178      	str	r0, [r7, #20]
  return ret;
 8005522:	697b      	ldr	r3, [r7, #20]
}
 8005524:	4618      	mov	r0, r3
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	bd90      	pop	{r4, r7, pc}

0800552c <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005538:	f107 0208 	add.w	r2, r7, #8
 800553c:	2301      	movs	r3, #1
 800553e:	2110      	movs	r1, #16
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ffc3 	bl	80054cc <lsm6dsl_read_reg>
 8005546:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10f      	bne.n	800556e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	b2da      	uxtb	r2, r3
 8005556:	7a3b      	ldrb	r3, [r7, #8]
 8005558:	f362 0383 	bfi	r3, r2, #2, #2
 800555c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800555e:	f107 0208 	add.w	r2, r7, #8
 8005562:	2301      	movs	r3, #1
 8005564:	2110      	movs	r1, #16
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff ffc8 	bl	80054fc <lsm6dsl_write_reg>
 800556c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800556e:	68fb      	ldr	r3, [r7, #12]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005582:	f107 0208 	add.w	r2, r7, #8
 8005586:	2301      	movs	r3, #1
 8005588:	2110      	movs	r1, #16
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ff9e 	bl	80054cc <lsm6dsl_read_reg>
 8005590:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8005592:	7a3b      	ldrb	r3, [r7, #8]
 8005594:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b03      	cmp	r3, #3
 800559c:	d81a      	bhi.n	80055d4 <lsm6dsl_xl_full_scale_get+0x5c>
 800559e:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <lsm6dsl_xl_full_scale_get+0x2c>)
 80055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a4:	080055b5 	.word	0x080055b5
 80055a8:	080055bd 	.word	0x080055bd
 80055ac:	080055c5 	.word	0x080055c5
 80055b0:	080055cd 	.word	0x080055cd
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
      break;
 80055ba:	e00f      	b.n	80055dc <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2201      	movs	r2, #1
 80055c0:	701a      	strb	r2, [r3, #0]
      break;
 80055c2:	e00b      	b.n	80055dc <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2202      	movs	r2, #2
 80055c8:	701a      	strb	r2, [r3, #0]
      break;
 80055ca:	e007      	b.n	80055dc <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2203      	movs	r2, #3
 80055d0:	701a      	strb	r2, [r3, #0]
      break;
 80055d2:	e003      	b.n	80055dc <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2204      	movs	r2, #4
 80055d8:	701a      	strb	r2, [r3, #0]
      break;
 80055da:	bf00      	nop
  }

  return ret;
 80055dc:	68fb      	ldr	r3, [r7, #12]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop

080055e8 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80055f4:	f107 0208 	add.w	r2, r7, #8
 80055f8:	2301      	movs	r3, #1
 80055fa:	2110      	movs	r1, #16
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff ff65 	bl	80054cc <lsm6dsl_read_reg>
 8005602:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10f      	bne.n	800562a <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	b2da      	uxtb	r2, r3
 8005612:	7a3b      	ldrb	r3, [r7, #8]
 8005614:	f362 1307 	bfi	r3, r2, #4, #4
 8005618:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800561a:	f107 0208 	add.w	r2, r7, #8
 800561e:	2301      	movs	r3, #1
 8005620:	2110      	movs	r1, #16
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff ff6a 	bl	80054fc <lsm6dsl_write_reg>
 8005628:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800562a:	68fb      	ldr	r3, [r7, #12]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800563e:	f107 0208 	add.w	r2, r7, #8
 8005642:	2301      	movs	r3, #1
 8005644:	2110      	movs	r1, #16
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff ff40 	bl	80054cc <lsm6dsl_read_reg>
 800564c:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 800564e:	7a3b      	ldrb	r3, [r7, #8]
 8005650:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b0b      	cmp	r3, #11
 8005658:	d84a      	bhi.n	80056f0 <lsm6dsl_xl_data_rate_get+0xbc>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <lsm6dsl_xl_data_rate_get+0x2c>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005691 	.word	0x08005691
 8005664:	08005699 	.word	0x08005699
 8005668:	080056a1 	.word	0x080056a1
 800566c:	080056a9 	.word	0x080056a9
 8005670:	080056b1 	.word	0x080056b1
 8005674:	080056b9 	.word	0x080056b9
 8005678:	080056c1 	.word	0x080056c1
 800567c:	080056c9 	.word	0x080056c9
 8005680:	080056d1 	.word	0x080056d1
 8005684:	080056d9 	.word	0x080056d9
 8005688:	080056e1 	.word	0x080056e1
 800568c:	080056e9 	.word	0x080056e9
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2200      	movs	r2, #0
 8005694:	701a      	strb	r2, [r3, #0]
      break;
 8005696:	e02f      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2201      	movs	r2, #1
 800569c:	701a      	strb	r2, [r3, #0]
      break;
 800569e:	e02b      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2202      	movs	r2, #2
 80056a4:	701a      	strb	r2, [r3, #0]
      break;
 80056a6:	e027      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2203      	movs	r2, #3
 80056ac:	701a      	strb	r2, [r3, #0]
      break;
 80056ae:	e023      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2204      	movs	r2, #4
 80056b4:	701a      	strb	r2, [r3, #0]
      break;
 80056b6:	e01f      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2205      	movs	r2, #5
 80056bc:	701a      	strb	r2, [r3, #0]
      break;
 80056be:	e01b      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2206      	movs	r2, #6
 80056c4:	701a      	strb	r2, [r3, #0]
      break;
 80056c6:	e017      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2207      	movs	r2, #7
 80056cc:	701a      	strb	r2, [r3, #0]
      break;
 80056ce:	e013      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2208      	movs	r2, #8
 80056d4:	701a      	strb	r2, [r3, #0]
      break;
 80056d6:	e00f      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2209      	movs	r2, #9
 80056dc:	701a      	strb	r2, [r3, #0]
      break;
 80056de:	e00b      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	220a      	movs	r2, #10
 80056e4:	701a      	strb	r2, [r3, #0]
      break;
 80056e6:	e007      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	220b      	movs	r2, #11
 80056ec:	701a      	strb	r2, [r3, #0]
      break;
 80056ee:	e003      	b.n	80056f8 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	220c      	movs	r2, #12
 80056f4:	701a      	strb	r2, [r3, #0]
      break;
 80056f6:	bf00      	nop
  }

  return ret;
 80056f8:	68fb      	ldr	r3, [r7, #12]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop

08005704 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005710:	f107 0208 	add.w	r2, r7, #8
 8005714:	2301      	movs	r3, #1
 8005716:	2111      	movs	r1, #17
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fed7 	bl	80054cc <lsm6dsl_read_reg>
 800571e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	b2da      	uxtb	r2, r3
 800572e:	7a3b      	ldrb	r3, [r7, #8]
 8005730:	f362 0343 	bfi	r3, r2, #1, #3
 8005734:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005736:	f107 0208 	add.w	r2, r7, #8
 800573a:	2301      	movs	r3, #1
 800573c:	2111      	movs	r1, #17
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fedc 	bl	80054fc <lsm6dsl_write_reg>
 8005744:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005746:	68fb      	ldr	r3, [r7, #12]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800575a:	f107 0208 	add.w	r2, r7, #8
 800575e:	2301      	movs	r3, #1
 8005760:	2111      	movs	r1, #17
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff feb2 	bl	80054cc <lsm6dsl_read_reg>
 8005768:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 800576a:	7a3b      	ldrb	r3, [r7, #8]
 800576c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b06      	cmp	r3, #6
 8005774:	d824      	bhi.n	80057c0 <lsm6dsl_gy_full_scale_get+0x70>
 8005776:	a201      	add	r2, pc, #4	; (adr r2, 800577c <lsm6dsl_gy_full_scale_get+0x2c>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	08005799 	.word	0x08005799
 8005780:	080057a1 	.word	0x080057a1
 8005784:	080057a9 	.word	0x080057a9
 8005788:	080057c1 	.word	0x080057c1
 800578c:	080057b1 	.word	0x080057b1
 8005790:	080057c1 	.word	0x080057c1
 8005794:	080057b9 	.word	0x080057b9
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
      break;
 800579e:	e013      	b.n	80057c8 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2201      	movs	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
      break;
 80057a6:	e00f      	b.n	80057c8 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2202      	movs	r2, #2
 80057ac:	701a      	strb	r2, [r3, #0]
      break;
 80057ae:	e00b      	b.n	80057c8 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2204      	movs	r2, #4
 80057b4:	701a      	strb	r2, [r3, #0]
      break;
 80057b6:	e007      	b.n	80057c8 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2206      	movs	r2, #6
 80057bc:	701a      	strb	r2, [r3, #0]
      break;
 80057be:	e003      	b.n	80057c8 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2207      	movs	r2, #7
 80057c4:	701a      	strb	r2, [r3, #0]
      break;
 80057c6:	bf00      	nop
  }

  return ret;
 80057c8:	68fb      	ldr	r3, [r7, #12]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop

080057d4 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80057e0:	f107 0208 	add.w	r2, r7, #8
 80057e4:	2301      	movs	r3, #1
 80057e6:	2111      	movs	r1, #17
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff fe6f 	bl	80054cc <lsm6dsl_read_reg>
 80057ee:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10f      	bne.n	8005816 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	7a3b      	ldrb	r3, [r7, #8]
 8005800:	f362 1307 	bfi	r3, r2, #4, #4
 8005804:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005806:	f107 0208 	add.w	r2, r7, #8
 800580a:	2301      	movs	r3, #1
 800580c:	2111      	movs	r1, #17
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fe74 	bl	80054fc <lsm6dsl_write_reg>
 8005814:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005816:	68fb      	ldr	r3, [r7, #12]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800582a:	f107 0208 	add.w	r2, r7, #8
 800582e:	2301      	movs	r3, #1
 8005830:	2111      	movs	r1, #17
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff fe4a 	bl	80054cc <lsm6dsl_read_reg>
 8005838:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 800583a:	7a3b      	ldrb	r3, [r7, #8]
 800583c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b0a      	cmp	r3, #10
 8005844:	d844      	bhi.n	80058d0 <lsm6dsl_gy_data_rate_get+0xb0>
 8005846:	a201      	add	r2, pc, #4	; (adr r2, 800584c <lsm6dsl_gy_data_rate_get+0x2c>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	08005879 	.word	0x08005879
 8005850:	08005881 	.word	0x08005881
 8005854:	08005889 	.word	0x08005889
 8005858:	08005891 	.word	0x08005891
 800585c:	08005899 	.word	0x08005899
 8005860:	080058a1 	.word	0x080058a1
 8005864:	080058a9 	.word	0x080058a9
 8005868:	080058b1 	.word	0x080058b1
 800586c:	080058b9 	.word	0x080058b9
 8005870:	080058c1 	.word	0x080058c1
 8005874:	080058c9 	.word	0x080058c9
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
      break;
 800587e:	e02b      	b.n	80058d8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2201      	movs	r2, #1
 8005884:	701a      	strb	r2, [r3, #0]
      break;
 8005886:	e027      	b.n	80058d8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2202      	movs	r2, #2
 800588c:	701a      	strb	r2, [r3, #0]
      break;
 800588e:	e023      	b.n	80058d8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2203      	movs	r2, #3
 8005894:	701a      	strb	r2, [r3, #0]
      break;
 8005896:	e01f      	b.n	80058d8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2204      	movs	r2, #4
 800589c:	701a      	strb	r2, [r3, #0]
      break;
 800589e:	e01b      	b.n	80058d8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2205      	movs	r2, #5
 80058a4:	701a      	strb	r2, [r3, #0]
      break;
 80058a6:	e017      	b.n	80058d8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2206      	movs	r2, #6
 80058ac:	701a      	strb	r2, [r3, #0]
      break;
 80058ae:	e013      	b.n	80058d8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2207      	movs	r2, #7
 80058b4:	701a      	strb	r2, [r3, #0]
      break;
 80058b6:	e00f      	b.n	80058d8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2208      	movs	r2, #8
 80058bc:	701a      	strb	r2, [r3, #0]
      break;
 80058be:	e00b      	b.n	80058d8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2209      	movs	r2, #9
 80058c4:	701a      	strb	r2, [r3, #0]
      break;
 80058c6:	e007      	b.n	80058d8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	220a      	movs	r2, #10
 80058cc:	701a      	strb	r2, [r3, #0]
      break;
 80058ce:	e003      	b.n	80058d8 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	220b      	movs	r2, #11
 80058d4:	701a      	strb	r2, [r3, #0]
      break;
 80058d6:	bf00      	nop
  }

  return ret;
 80058d8:	68fb      	ldr	r3, [r7, #12]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop

080058e4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80058f0:	f107 0208 	add.w	r2, r7, #8
 80058f4:	2301      	movs	r3, #1
 80058f6:	2112      	movs	r1, #18
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fde7 	bl	80054cc <lsm6dsl_read_reg>
 80058fe:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10f      	bne.n	8005926 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	b2da      	uxtb	r2, r3
 800590e:	7a3b      	ldrb	r3, [r7, #8]
 8005910:	f362 1386 	bfi	r3, r2, #6, #1
 8005914:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005916:	f107 0208 	add.w	r2, r7, #8
 800591a:	2301      	movs	r3, #1
 800591c:	2112      	movs	r1, #18
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff fdec 	bl	80054fc <lsm6dsl_write_reg>
 8005924:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005926:	68fb      	ldr	r3, [r7, #12]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800593a:	2306      	movs	r3, #6
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	2122      	movs	r1, #34	; 0x22
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fdc3 	bl	80054cc <lsm6dsl_read_reg>
 8005946:	60f8      	str	r0, [r7, #12]
  return ret;
 8005948:	68fb      	ldr	r3, [r7, #12]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800595c:	2306      	movs	r3, #6
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	2128      	movs	r1, #40	; 0x28
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fdb2 	bl	80054cc <lsm6dsl_read_reg>
 8005968:	60f8      	str	r0, [r7, #12]
  return ret;
 800596a:	68fb      	ldr	r3, [r7, #12]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800597e:	2301      	movs	r3, #1
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	210f      	movs	r1, #15
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff fda1 	bl	80054cc <lsm6dsl_read_reg>
 800598a:	60f8      	str	r0, [r7, #12]
  return ret;
 800598c:	68fb      	ldr	r3, [r7, #12]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80059a2:	f107 0208 	add.w	r2, r7, #8
 80059a6:	2301      	movs	r3, #1
 80059a8:	2112      	movs	r1, #18
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fd8e 	bl	80054cc <lsm6dsl_read_reg>
 80059b0:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10f      	bne.n	80059d8 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	7a3b      	ldrb	r3, [r7, #8]
 80059c2:	f362 0382 	bfi	r3, r2, #2, #1
 80059c6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80059c8:	f107 0208 	add.w	r2, r7, #8
 80059cc:	2301      	movs	r3, #1
 80059ce:	2112      	movs	r1, #18
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff fd93 	bl	80054fc <lsm6dsl_write_reg>
 80059d6:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80059d8:	68fb      	ldr	r3, [r7, #12]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	460b      	mov	r3, r1
 80059ec:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 80059ee:	f107 0208 	add.w	r2, r7, #8
 80059f2:	2301      	movs	r3, #1
 80059f4:	210a      	movs	r1, #10
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fd68 	bl	80054cc <lsm6dsl_read_reg>
 80059fc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10f      	bne.n	8005a24 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	7a3b      	ldrb	r3, [r7, #8]
 8005a0e:	f362 0302 	bfi	r3, r2, #0, #3
 8005a12:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8005a14:	f107 0208 	add.w	r2, r7, #8
 8005a18:	2301      	movs	r3, #1
 8005a1a:	210a      	movs	r1, #10
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff fd6d 	bl	80054fc <lsm6dsl_write_reg>
 8005a22:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005a24:	68fb      	ldr	r3, [r7, #12]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a38:	2003      	movs	r0, #3
 8005a3a:	f000 f8de 	bl	8005bfa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a3e:	200f      	movs	r0, #15
 8005a40:	f7fc f970 	bl	8001d24 <HAL_InitTick>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	71fb      	strb	r3, [r7, #7]
 8005a4e:	e001      	b.n	8005a54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a50:	f7fb ffd6 	bl	8001a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a54:	79fb      	ldrb	r3, [r7, #7]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_IncTick+0x20>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <HAL_IncTick+0x24>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4413      	add	r3, r2
 8005a70:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <HAL_IncTick+0x24>)
 8005a72:	6013      	str	r3, [r2, #0]
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000148 	.word	0x20000148
 8005a84:	200105c0 	.word	0x200105c0

08005a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <HAL_GetTick+0x14>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	200105c0 	.word	0x200105c0

08005aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005abc:	4013      	ands	r3, r2
 8005abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ad2:	4a04      	ldr	r2, [pc, #16]	; (8005ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	60d3      	str	r3, [r2, #12]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	e000ed00 	.word	0xe000ed00

08005ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <__NVIC_GetPriorityGrouping+0x18>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	0a1b      	lsrs	r3, r3, #8
 8005af2:	f003 0307 	and.w	r3, r3, #7
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	db0b      	blt.n	8005b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	f003 021f 	and.w	r2, r3, #31
 8005b1c:	4907      	ldr	r1, [pc, #28]	; (8005b3c <__NVIC_EnableIRQ+0x38>)
 8005b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	2001      	movs	r0, #1
 8005b26:	fa00 f202 	lsl.w	r2, r0, r2
 8005b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	e000e100 	.word	0xe000e100

08005b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	6039      	str	r1, [r7, #0]
 8005b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	db0a      	blt.n	8005b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	490c      	ldr	r1, [pc, #48]	; (8005b8c <__NVIC_SetPriority+0x4c>)
 8005b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5e:	0112      	lsls	r2, r2, #4
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	440b      	add	r3, r1
 8005b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b68:	e00a      	b.n	8005b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	4908      	ldr	r1, [pc, #32]	; (8005b90 <__NVIC_SetPriority+0x50>)
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	3b04      	subs	r3, #4
 8005b78:	0112      	lsls	r2, r2, #4
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	761a      	strb	r2, [r3, #24]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	e000e100 	.word	0xe000e100
 8005b90:	e000ed00 	.word	0xe000ed00

08005b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f1c3 0307 	rsb	r3, r3, #7
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	bf28      	it	cs
 8005bb2:	2304      	movcs	r3, #4
 8005bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d902      	bls.n	8005bc4 <NVIC_EncodePriority+0x30>
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	3b03      	subs	r3, #3
 8005bc2:	e000      	b.n	8005bc6 <NVIC_EncodePriority+0x32>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	43da      	mvns	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	fa01 f303 	lsl.w	r3, r1, r3
 8005be6:	43d9      	mvns	r1, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bec:	4313      	orrs	r3, r2
         );
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3724      	adds	r7, #36	; 0x24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff ff4c 	bl	8005aa0 <__NVIC_SetPriorityGrouping>
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c22:	f7ff ff61 	bl	8005ae8 <__NVIC_GetPriorityGrouping>
 8005c26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	6978      	ldr	r0, [r7, #20]
 8005c2e:	f7ff ffb1 	bl	8005b94 <NVIC_EncodePriority>
 8005c32:	4602      	mov	r2, r0
 8005c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c38:	4611      	mov	r1, r2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff ff80 	bl	8005b40 <__NVIC_SetPriority>
}
 8005c40:	bf00      	nop
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff ff54 	bl	8005b04 <__NVIC_EnableIRQ>
}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c72:	e17f      	b.n	8005f74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	2101      	movs	r1, #1
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c80:	4013      	ands	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 8171 	beq.w	8005f6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d00b      	beq.n	8005cac <HAL_GPIO_Init+0x48>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d007      	beq.n	8005cac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ca0:	2b11      	cmp	r3, #17
 8005ca2:	d003      	beq.n	8005cac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2b12      	cmp	r3, #18
 8005caa:	d130      	bne.n	8005d0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	091b      	lsrs	r3, r3, #4
 8005cf8:	f003 0201 	and.w	r2, r3, #1
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d118      	bne.n	8005d4c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005d20:	2201      	movs	r2, #1
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	08db      	lsrs	r3, r3, #3
 8005d36:	f003 0201 	and.w	r2, r3, #1
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	2203      	movs	r2, #3
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4013      	ands	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d003      	beq.n	8005d8c <HAL_GPIO_Init+0x128>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2b12      	cmp	r3, #18
 8005d8a:	d123      	bne.n	8005dd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	08da      	lsrs	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3208      	adds	r2, #8
 8005d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	220f      	movs	r2, #15
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	43db      	mvns	r3, r3
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4013      	ands	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	08da      	lsrs	r2, r3, #3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3208      	adds	r2, #8
 8005dce:	6939      	ldr	r1, [r7, #16]
 8005dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	2203      	movs	r2, #3
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4013      	ands	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f003 0203 	and.w	r2, r3, #3
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80ac 	beq.w	8005f6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e16:	4b5f      	ldr	r3, [pc, #380]	; (8005f94 <HAL_GPIO_Init+0x330>)
 8005e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1a:	4a5e      	ldr	r2, [pc, #376]	; (8005f94 <HAL_GPIO_Init+0x330>)
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	6613      	str	r3, [r2, #96]	; 0x60
 8005e22:	4b5c      	ldr	r3, [pc, #368]	; (8005f94 <HAL_GPIO_Init+0x330>)
 8005e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e2e:	4a5a      	ldr	r2, [pc, #360]	; (8005f98 <HAL_GPIO_Init+0x334>)
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	089b      	lsrs	r3, r3, #2
 8005e34:	3302      	adds	r3, #2
 8005e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	220f      	movs	r2, #15
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e58:	d025      	beq.n	8005ea6 <HAL_GPIO_Init+0x242>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a4f      	ldr	r2, [pc, #316]	; (8005f9c <HAL_GPIO_Init+0x338>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01f      	beq.n	8005ea2 <HAL_GPIO_Init+0x23e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a4e      	ldr	r2, [pc, #312]	; (8005fa0 <HAL_GPIO_Init+0x33c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d019      	beq.n	8005e9e <HAL_GPIO_Init+0x23a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a4d      	ldr	r2, [pc, #308]	; (8005fa4 <HAL_GPIO_Init+0x340>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_GPIO_Init+0x236>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a4c      	ldr	r2, [pc, #304]	; (8005fa8 <HAL_GPIO_Init+0x344>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00d      	beq.n	8005e96 <HAL_GPIO_Init+0x232>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a4b      	ldr	r2, [pc, #300]	; (8005fac <HAL_GPIO_Init+0x348>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d007      	beq.n	8005e92 <HAL_GPIO_Init+0x22e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a4a      	ldr	r2, [pc, #296]	; (8005fb0 <HAL_GPIO_Init+0x34c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d101      	bne.n	8005e8e <HAL_GPIO_Init+0x22a>
 8005e8a:	2306      	movs	r3, #6
 8005e8c:	e00c      	b.n	8005ea8 <HAL_GPIO_Init+0x244>
 8005e8e:	2307      	movs	r3, #7
 8005e90:	e00a      	b.n	8005ea8 <HAL_GPIO_Init+0x244>
 8005e92:	2305      	movs	r3, #5
 8005e94:	e008      	b.n	8005ea8 <HAL_GPIO_Init+0x244>
 8005e96:	2304      	movs	r3, #4
 8005e98:	e006      	b.n	8005ea8 <HAL_GPIO_Init+0x244>
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e004      	b.n	8005ea8 <HAL_GPIO_Init+0x244>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e002      	b.n	8005ea8 <HAL_GPIO_Init+0x244>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <HAL_GPIO_Init+0x244>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	f002 0203 	and.w	r2, r2, #3
 8005eae:	0092      	lsls	r2, r2, #2
 8005eb0:	4093      	lsls	r3, r2
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005eb8:	4937      	ldr	r1, [pc, #220]	; (8005f98 <HAL_GPIO_Init+0x334>)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	089b      	lsrs	r3, r3, #2
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005ec6:	4b3b      	ldr	r3, [pc, #236]	; (8005fb4 <HAL_GPIO_Init+0x350>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005eea:	4a32      	ldr	r2, [pc, #200]	; (8005fb4 <HAL_GPIO_Init+0x350>)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005ef0:	4b30      	ldr	r3, [pc, #192]	; (8005fb4 <HAL_GPIO_Init+0x350>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4013      	ands	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f14:	4a27      	ldr	r2, [pc, #156]	; (8005fb4 <HAL_GPIO_Init+0x350>)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f1a:	4b26      	ldr	r3, [pc, #152]	; (8005fb4 <HAL_GPIO_Init+0x350>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	43db      	mvns	r3, r3
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4013      	ands	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f3e:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <HAL_GPIO_Init+0x350>)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f44:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <HAL_GPIO_Init+0x350>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4013      	ands	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f68:	4a12      	ldr	r2, [pc, #72]	; (8005fb4 <HAL_GPIO_Init+0x350>)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	3301      	adds	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f47f ae78 	bne.w	8005c74 <HAL_GPIO_Init+0x10>
  }
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40021000 	.word	0x40021000
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	48000400 	.word	0x48000400
 8005fa0:	48000800 	.word	0x48000800
 8005fa4:	48000c00 	.word	0x48000c00
 8005fa8:	48001000 	.word	0x48001000
 8005fac:	48001400 	.word	0x48001400
 8005fb0:	48001800 	.word	0x48001800
 8005fb4:	40010400 	.word	0x40010400

08005fb8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005fc6:	e0cd      	b.n	8006164 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005fc8:	2201      	movs	r2, #1
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 80c0 	beq.w	800615e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005fde:	4a68      	ldr	r2, [pc, #416]	; (8006180 <HAL_GPIO_DeInit+0x1c8>)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	089b      	lsrs	r3, r3, #2
 8005fe4:	3302      	adds	r3, #2
 8005fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	220f      	movs	r2, #15
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006006:	d025      	beq.n	8006054 <HAL_GPIO_DeInit+0x9c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a5e      	ldr	r2, [pc, #376]	; (8006184 <HAL_GPIO_DeInit+0x1cc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d01f      	beq.n	8006050 <HAL_GPIO_DeInit+0x98>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a5d      	ldr	r2, [pc, #372]	; (8006188 <HAL_GPIO_DeInit+0x1d0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d019      	beq.n	800604c <HAL_GPIO_DeInit+0x94>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a5c      	ldr	r2, [pc, #368]	; (800618c <HAL_GPIO_DeInit+0x1d4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d013      	beq.n	8006048 <HAL_GPIO_DeInit+0x90>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a5b      	ldr	r2, [pc, #364]	; (8006190 <HAL_GPIO_DeInit+0x1d8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00d      	beq.n	8006044 <HAL_GPIO_DeInit+0x8c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a5a      	ldr	r2, [pc, #360]	; (8006194 <HAL_GPIO_DeInit+0x1dc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d007      	beq.n	8006040 <HAL_GPIO_DeInit+0x88>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a59      	ldr	r2, [pc, #356]	; (8006198 <HAL_GPIO_DeInit+0x1e0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <HAL_GPIO_DeInit+0x84>
 8006038:	2306      	movs	r3, #6
 800603a:	e00c      	b.n	8006056 <HAL_GPIO_DeInit+0x9e>
 800603c:	2307      	movs	r3, #7
 800603e:	e00a      	b.n	8006056 <HAL_GPIO_DeInit+0x9e>
 8006040:	2305      	movs	r3, #5
 8006042:	e008      	b.n	8006056 <HAL_GPIO_DeInit+0x9e>
 8006044:	2304      	movs	r3, #4
 8006046:	e006      	b.n	8006056 <HAL_GPIO_DeInit+0x9e>
 8006048:	2303      	movs	r3, #3
 800604a:	e004      	b.n	8006056 <HAL_GPIO_DeInit+0x9e>
 800604c:	2302      	movs	r3, #2
 800604e:	e002      	b.n	8006056 <HAL_GPIO_DeInit+0x9e>
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <HAL_GPIO_DeInit+0x9e>
 8006054:	2300      	movs	r3, #0
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	f002 0203 	and.w	r2, r2, #3
 800605c:	0092      	lsls	r2, r2, #2
 800605e:	4093      	lsls	r3, r2
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	429a      	cmp	r2, r3
 8006064:	d132      	bne.n	80060cc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006066:	4b4d      	ldr	r3, [pc, #308]	; (800619c <HAL_GPIO_DeInit+0x1e4>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	43db      	mvns	r3, r3
 800606e:	494b      	ldr	r1, [pc, #300]	; (800619c <HAL_GPIO_DeInit+0x1e4>)
 8006070:	4013      	ands	r3, r2
 8006072:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006074:	4b49      	ldr	r3, [pc, #292]	; (800619c <HAL_GPIO_DeInit+0x1e4>)
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	43db      	mvns	r3, r3
 800607c:	4947      	ldr	r1, [pc, #284]	; (800619c <HAL_GPIO_DeInit+0x1e4>)
 800607e:	4013      	ands	r3, r2
 8006080:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006082:	4b46      	ldr	r3, [pc, #280]	; (800619c <HAL_GPIO_DeInit+0x1e4>)
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	43db      	mvns	r3, r3
 800608a:	4944      	ldr	r1, [pc, #272]	; (800619c <HAL_GPIO_DeInit+0x1e4>)
 800608c:	4013      	ands	r3, r2
 800608e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8006090:	4b42      	ldr	r3, [pc, #264]	; (800619c <HAL_GPIO_DeInit+0x1e4>)
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	43db      	mvns	r3, r3
 8006098:	4940      	ldr	r1, [pc, #256]	; (800619c <HAL_GPIO_DeInit+0x1e4>)
 800609a:	4013      	ands	r3, r2
 800609c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f003 0303 	and.w	r3, r3, #3
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	220f      	movs	r2, #15
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80060ae:	4a34      	ldr	r2, [pc, #208]	; (8006180 <HAL_GPIO_DeInit+0x1c8>)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	089b      	lsrs	r3, r3, #2
 80060b4:	3302      	adds	r3, #2
 80060b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	43da      	mvns	r2, r3
 80060be:	4830      	ldr	r0, [pc, #192]	; (8006180 <HAL_GPIO_DeInit+0x1c8>)
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	089b      	lsrs	r3, r3, #2
 80060c4:	400a      	ands	r2, r1
 80060c6:	3302      	adds	r3, #2
 80060c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	2103      	movs	r1, #3
 80060d6:	fa01 f303 	lsl.w	r3, r1, r3
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	08da      	lsrs	r2, r3, #3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3208      	adds	r2, #8
 80060e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	220f      	movs	r2, #15
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	08d2      	lsrs	r2, r2, #3
 8006100:	4019      	ands	r1, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3208      	adds	r2, #8
 8006106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	2103      	movs	r1, #3
 8006114:	fa01 f303 	lsl.w	r3, r1, r3
 8006118:	43db      	mvns	r3, r3
 800611a:	401a      	ands	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	2101      	movs	r1, #1
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	fa01 f303 	lsl.w	r3, r1, r3
 800612c:	43db      	mvns	r3, r3
 800612e:	401a      	ands	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	2103      	movs	r1, #3
 800613e:	fa01 f303 	lsl.w	r3, r1, r3
 8006142:	43db      	mvns	r3, r3
 8006144:	401a      	ands	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614e:	2101      	movs	r1, #1
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	fa01 f303 	lsl.w	r3, r1, r3
 8006156:	43db      	mvns	r3, r3
 8006158:	401a      	ands	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	3301      	adds	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	f47f af2b 	bne.w	8005fc8 <HAL_GPIO_DeInit+0x10>
  }
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	40010000 	.word	0x40010000
 8006184:	48000400 	.word	0x48000400
 8006188:	48000800 	.word	0x48000800
 800618c:	48000c00 	.word	0x48000c00
 8006190:	48001000 	.word	0x48001000
 8006194:	48001400 	.word	0x48001400
 8006198:	48001800 	.word	0x48001800
 800619c:	40010400 	.word	0x40010400

080061a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	887b      	ldrh	r3, [r7, #2]
 80061b2:	4013      	ands	r3, r2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
 80061bc:	e001      	b.n	80061c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	807b      	strh	r3, [r7, #2]
 80061dc:	4613      	mov	r3, r2
 80061de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061e0:	787b      	ldrb	r3, [r7, #1]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061e6:	887a      	ldrh	r2, [r7, #2]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80061ec:	e002      	b.n	80061f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061ee:	887a      	ldrh	r2, [r7, #2]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800620a:	4b08      	ldr	r3, [pc, #32]	; (800622c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	4013      	ands	r3, r2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d006      	beq.n	8006224 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006216:	4a05      	ldr	r2, [pc, #20]	; (800622c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 f806 	bl	8006230 <HAL_GPIO_EXTI_Callback>
  }
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40010400 	.word	0x40010400

08006230 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e081      	b.n	800635c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d106      	bne.n	8006272 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7fb fbef 	bl	8001a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2224      	movs	r2, #36	; 0x24
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0201 	bic.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006296:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d107      	bne.n	80062c0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062bc:	609a      	str	r2, [r3, #8]
 80062be:	e006      	b.n	80062ce <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80062cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d104      	bne.n	80062e0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006302:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	ea42 0103 	orr.w	r1, r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	021a      	lsls	r2, r3, #8
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69d9      	ldr	r1, [r3, #28]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1a      	ldr	r2, [r3, #32]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0201 	orr.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e021      	b.n	80063ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2224      	movs	r2, #36	; 0x24
 800637a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0201 	bic.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fb fbbc 	bl	8001b0c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	4608      	mov	r0, r1
 80063ce:	4611      	mov	r1, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	817b      	strh	r3, [r7, #10]
 80063d6:	460b      	mov	r3, r1
 80063d8:	813b      	strh	r3, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	f040 80f9 	bne.w	80065de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_I2C_Mem_Write+0x34>
 80063f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d105      	bne.n	8006404 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e0ed      	b.n	80065e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_I2C_Mem_Write+0x4e>
 800640e:	2302      	movs	r3, #2
 8006410:	e0e6      	b.n	80065e0 <HAL_I2C_Mem_Write+0x21c>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800641a:	f7ff fb35 	bl	8005a88 <HAL_GetTick>
 800641e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	2319      	movs	r3, #25
 8006426:	2201      	movs	r2, #1
 8006428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 fadd 	bl	80069ec <I2C_WaitOnFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e0d1      	b.n	80065e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2221      	movs	r2, #33	; 0x21
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2240      	movs	r2, #64	; 0x40
 8006448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a3a      	ldr	r2, [r7, #32]
 8006456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800645c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006464:	88f8      	ldrh	r0, [r7, #6]
 8006466:	893a      	ldrh	r2, [r7, #8]
 8006468:	8979      	ldrh	r1, [r7, #10]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	4603      	mov	r3, r0
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 f9ed 	bl	8006854 <I2C_RequestMemoryWrite>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d005      	beq.n	800648c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e0a9      	b.n	80065e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006490:	b29b      	uxth	r3, r3
 8006492:	2bff      	cmp	r3, #255	; 0xff
 8006494:	d90e      	bls.n	80064b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	22ff      	movs	r2, #255	; 0xff
 800649a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	8979      	ldrh	r1, [r7, #10]
 80064a4:	2300      	movs	r3, #0
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 fbbf 	bl	8006c30 <I2C_TransferConfig>
 80064b2:	e00f      	b.n	80064d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	8979      	ldrh	r1, [r7, #10]
 80064c6:	2300      	movs	r3, #0
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 fbae 	bl	8006c30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 fac7 	bl	8006a6c <I2C_WaitOnTXISFlagUntilTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e07b      	b.n	80065e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d034      	beq.n	800658c <HAL_I2C_Mem_Write+0x1c8>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006526:	2b00      	cmp	r3, #0
 8006528:	d130      	bne.n	800658c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	2200      	movs	r2, #0
 8006532:	2180      	movs	r1, #128	; 0x80
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fa59 	bl	80069ec <I2C_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e04d      	b.n	80065e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006548:	b29b      	uxth	r3, r3
 800654a:	2bff      	cmp	r3, #255	; 0xff
 800654c:	d90e      	bls.n	800656c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	22ff      	movs	r2, #255	; 0xff
 8006552:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006558:	b2da      	uxtb	r2, r3
 800655a:	8979      	ldrh	r1, [r7, #10]
 800655c:	2300      	movs	r3, #0
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fb63 	bl	8006c30 <I2C_TransferConfig>
 800656a:	e00f      	b.n	800658c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657a:	b2da      	uxtb	r2, r3
 800657c:	8979      	ldrh	r1, [r7, #10]
 800657e:	2300      	movs	r3, #0
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 fb52 	bl	8006c30 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d19e      	bne.n	80064d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 faa6 	bl	8006aec <I2C_WaitOnSTOPFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e01a      	b.n	80065e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2220      	movs	r2, #32
 80065b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6859      	ldr	r1, [r3, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <HAL_I2C_Mem_Write+0x224>)
 80065be:	400b      	ands	r3, r1
 80065c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	e000      	b.n	80065e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80065de:	2302      	movs	r3, #2
  }
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	fe00e800 	.word	0xfe00e800

080065ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	817b      	strh	r3, [r7, #10]
 80065fe:	460b      	mov	r3, r1
 8006600:	813b      	strh	r3, [r7, #8]
 8006602:	4613      	mov	r3, r2
 8006604:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b20      	cmp	r3, #32
 8006610:	f040 80fd 	bne.w	800680e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <HAL_I2C_Mem_Read+0x34>
 800661a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	d105      	bne.n	800662c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006626:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e0f1      	b.n	8006810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_I2C_Mem_Read+0x4e>
 8006636:	2302      	movs	r3, #2
 8006638:	e0ea      	b.n	8006810 <HAL_I2C_Mem_Read+0x224>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006642:	f7ff fa21 	bl	8005a88 <HAL_GetTick>
 8006646:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	2319      	movs	r3, #25
 800664e:	2201      	movs	r2, #1
 8006650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f9c9 	bl	80069ec <I2C_WaitOnFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e0d5      	b.n	8006810 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2222      	movs	r2, #34	; 0x22
 8006668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2240      	movs	r2, #64	; 0x40
 8006670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a3a      	ldr	r2, [r7, #32]
 800667e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800668c:	88f8      	ldrh	r0, [r7, #6]
 800668e:	893a      	ldrh	r2, [r7, #8]
 8006690:	8979      	ldrh	r1, [r7, #10]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	9301      	str	r3, [sp, #4]
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	4603      	mov	r3, r0
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f92d 	bl	80068fc <I2C_RequestMemoryRead>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0ad      	b.n	8006810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2bff      	cmp	r3, #255	; 0xff
 80066bc:	d90e      	bls.n	80066dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	22ff      	movs	r2, #255	; 0xff
 80066c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	8979      	ldrh	r1, [r7, #10]
 80066cc:	4b52      	ldr	r3, [pc, #328]	; (8006818 <HAL_I2C_Mem_Read+0x22c>)
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 faab 	bl	8006c30 <I2C_TransferConfig>
 80066da:	e00f      	b.n	80066fc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	8979      	ldrh	r1, [r7, #10]
 80066ee:	4b4a      	ldr	r3, [pc, #296]	; (8006818 <HAL_I2C_Mem_Read+0x22c>)
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 fa9a 	bl	8006c30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	2200      	movs	r2, #0
 8006704:	2104      	movs	r1, #4
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 f970 	bl	80069ec <I2C_WaitOnFlagUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e07c      	b.n	8006810 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d034      	beq.n	80067bc <HAL_I2C_Mem_Read+0x1d0>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006756:	2b00      	cmp	r3, #0
 8006758:	d130      	bne.n	80067bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	2200      	movs	r2, #0
 8006762:	2180      	movs	r1, #128	; 0x80
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f941 	bl	80069ec <I2C_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e04d      	b.n	8006810 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006778:	b29b      	uxth	r3, r3
 800677a:	2bff      	cmp	r3, #255	; 0xff
 800677c:	d90e      	bls.n	800679c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	22ff      	movs	r2, #255	; 0xff
 8006782:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006788:	b2da      	uxtb	r2, r3
 800678a:	8979      	ldrh	r1, [r7, #10]
 800678c:	2300      	movs	r3, #0
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fa4b 	bl	8006c30 <I2C_TransferConfig>
 800679a:	e00f      	b.n	80067bc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	8979      	ldrh	r1, [r7, #10]
 80067ae:	2300      	movs	r3, #0
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fa3a 	bl	8006c30 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d19a      	bne.n	80066fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 f98e 	bl	8006aec <I2C_WaitOnSTOPFlagUntilTimeout>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e01a      	b.n	8006810 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2220      	movs	r2, #32
 80067e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6859      	ldr	r1, [r3, #4]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	4b0b      	ldr	r3, [pc, #44]	; (800681c <HAL_I2C_Mem_Read+0x230>)
 80067ee:	400b      	ands	r3, r1
 80067f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	e000      	b.n	8006810 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800680e:	2302      	movs	r3, #2
  }
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	80002400 	.word	0x80002400
 800681c:	fe00e800 	.word	0xfe00e800

08006820 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800682e:	b2db      	uxtb	r3, r3
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af02      	add	r7, sp, #8
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	4608      	mov	r0, r1
 800685e:	4611      	mov	r1, r2
 8006860:	461a      	mov	r2, r3
 8006862:	4603      	mov	r3, r0
 8006864:	817b      	strh	r3, [r7, #10]
 8006866:	460b      	mov	r3, r1
 8006868:	813b      	strh	r3, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	b2da      	uxtb	r2, r3
 8006872:	8979      	ldrh	r1, [r7, #10]
 8006874:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <I2C_RequestMemoryWrite+0xa4>)
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f9d7 	bl	8006c30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	69b9      	ldr	r1, [r7, #24]
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f8f0 	bl	8006a6c <I2C_WaitOnTXISFlagUntilTimeout>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e02c      	b.n	80068f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d105      	bne.n	80068a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800689c:	893b      	ldrh	r3, [r7, #8]
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	629a      	str	r2, [r3, #40]	; 0x28
 80068a6:	e015      	b.n	80068d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80068a8:	893b      	ldrh	r3, [r7, #8]
 80068aa:	0a1b      	lsrs	r3, r3, #8
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	69b9      	ldr	r1, [r7, #24]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f8d6 	bl	8006a6c <I2C_WaitOnTXISFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e012      	b.n	80068f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068ca:	893b      	ldrh	r3, [r7, #8]
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	2200      	movs	r2, #0
 80068dc:	2180      	movs	r1, #128	; 0x80
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f884 	bl	80069ec <I2C_WaitOnFlagUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	80002000 	.word	0x80002000

080068fc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af02      	add	r7, sp, #8
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	4608      	mov	r0, r1
 8006906:	4611      	mov	r1, r2
 8006908:	461a      	mov	r2, r3
 800690a:	4603      	mov	r3, r0
 800690c:	817b      	strh	r3, [r7, #10]
 800690e:	460b      	mov	r3, r1
 8006910:	813b      	strh	r3, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	b2da      	uxtb	r2, r3
 800691a:	8979      	ldrh	r1, [r7, #10]
 800691c:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <I2C_RequestMemoryRead+0xa4>)
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	2300      	movs	r3, #0
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f984 	bl	8006c30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	69b9      	ldr	r1, [r7, #24]
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f89d 	bl	8006a6c <I2C_WaitOnTXISFlagUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e02c      	b.n	8006996 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800693c:	88fb      	ldrh	r3, [r7, #6]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d105      	bne.n	800694e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006942:	893b      	ldrh	r3, [r7, #8]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	629a      	str	r2, [r3, #40]	; 0x28
 800694c:	e015      	b.n	800697a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800694e:	893b      	ldrh	r3, [r7, #8]
 8006950:	0a1b      	lsrs	r3, r3, #8
 8006952:	b29b      	uxth	r3, r3
 8006954:	b2da      	uxtb	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	69b9      	ldr	r1, [r7, #24]
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f883 	bl	8006a6c <I2C_WaitOnTXISFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e012      	b.n	8006996 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006970:	893b      	ldrh	r3, [r7, #8]
 8006972:	b2da      	uxtb	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2200      	movs	r2, #0
 8006982:	2140      	movs	r1, #64	; 0x40
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f831 	bl	80069ec <I2C_WaitOnFlagUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	80002000 	.word	0x80002000

080069a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d103      	bne.n	80069c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2200      	movs	r2, #0
 80069c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d007      	beq.n	80069e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	619a      	str	r2, [r3, #24]
  }
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069fc:	e022      	b.n	8006a44 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d01e      	beq.n	8006a44 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a06:	f7ff f83f 	bl	8005a88 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d302      	bcc.n	8006a1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d113      	bne.n	8006a44 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a20:	f043 0220 	orr.w	r2, r3, #32
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e00f      	b.n	8006a64 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	bf0c      	ite	eq
 8006a54:	2301      	moveq	r3, #1
 8006a56:	2300      	movne	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d0cd      	beq.n	80069fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a78:	e02c      	b.n	8006ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f870 	bl	8006b64 <I2C_IsAcknowledgeFailed>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e02a      	b.n	8006ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d01e      	beq.n	8006ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a96:	f7fe fff7 	bl	8005a88 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d302      	bcc.n	8006aac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d113      	bne.n	8006ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	f043 0220 	orr.w	r2, r3, #32
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e007      	b.n	8006ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d1cb      	bne.n	8006a7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006af8:	e028      	b.n	8006b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f830 	bl	8006b64 <I2C_IsAcknowledgeFailed>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e026      	b.n	8006b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0e:	f7fe ffbb 	bl	8005a88 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d302      	bcc.n	8006b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d113      	bne.n	8006b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b28:	f043 0220 	orr.w	r2, r3, #32
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e007      	b.n	8006b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d1cf      	bne.n	8006afa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f003 0310 	and.w	r3, r3, #16
 8006b7a:	2b10      	cmp	r3, #16
 8006b7c:	d151      	bne.n	8006c22 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b7e:	e022      	b.n	8006bc6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	d01e      	beq.n	8006bc6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b88:	f7fe ff7e 	bl	8005a88 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d302      	bcc.n	8006b9e <I2C_IsAcknowledgeFailed+0x3a>
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d113      	bne.n	8006bc6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba2:	f043 0220 	orr.w	r2, r3, #32
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e02e      	b.n	8006c24 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d1d5      	bne.n	8006b80 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2210      	movs	r2, #16
 8006bda:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2220      	movs	r2, #32
 8006be2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff fedd 	bl	80069a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6859      	ldr	r1, [r3, #4]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <I2C_IsAcknowledgeFailed+0xc8>)
 8006bf6:	400b      	ands	r3, r1
 8006bf8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfe:	f043 0204 	orr.w	r2, r3, #4
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	fe00e800 	.word	0xfe00e800

08006c30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	607b      	str	r3, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	817b      	strh	r3, [r7, #10]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	0d5b      	lsrs	r3, r3, #21
 8006c4c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c50:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <I2C_TransferConfig+0x58>)
 8006c52:	430b      	orrs	r3, r1
 8006c54:	43db      	mvns	r3, r3
 8006c56:	ea02 0103 	and.w	r1, r2, r3
 8006c5a:	897b      	ldrh	r3, [r7, #10]
 8006c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c60:	7a7b      	ldrb	r3, [r7, #9]
 8006c62:	041b      	lsls	r3, r3, #16
 8006c64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006c7a:	bf00      	nop
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	03ff63ff 	.word	0x03ff63ff

08006c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d138      	bne.n	8006d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cac:	2302      	movs	r3, #2
 8006cae:	e032      	b.n	8006d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2224      	movs	r2, #36	; 0x24
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0201 	bic.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6819      	ldr	r1, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d139      	bne.n	8006dac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e033      	b.n	8006dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2224      	movs	r2, #36	; 0x24
 8006d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	e000      	b.n	8006dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dac:	2302      	movs	r3, #2
  }
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dc0:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a04      	ldr	r2, [pc, #16]	; (8006dd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40007000 	.word	0x40007000

08006ddc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006de0:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40007000 	.word	0x40007000

08006df8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e06:	d130      	bne.n	8006e6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e08:	4b23      	ldr	r3, [pc, #140]	; (8006e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e14:	d038      	beq.n	8006e88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e16:	4b20      	ldr	r3, [pc, #128]	; (8006e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e1e:	4a1e      	ldr	r2, [pc, #120]	; (8006e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e26:	4b1d      	ldr	r3, [pc, #116]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2232      	movs	r2, #50	; 0x32
 8006e2c:	fb02 f303 	mul.w	r3, r2, r3
 8006e30:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	0c9b      	lsrs	r3, r3, #18
 8006e38:	3301      	adds	r3, #1
 8006e3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e3c:	e002      	b.n	8006e44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e44:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e50:	d102      	bne.n	8006e58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f2      	bne.n	8006e3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e58:	4b0f      	ldr	r3, [pc, #60]	; (8006e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e64:	d110      	bne.n	8006e88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e00f      	b.n	8006e8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e76:	d007      	beq.n	8006e88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e78:	4b07      	ldr	r3, [pc, #28]	; (8006e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e80:	4a05      	ldr	r2, [pc, #20]	; (8006e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40007000 	.word	0x40007000
 8006e9c:	20000088 	.word	0x20000088
 8006ea0:	431bde83 	.word	0x431bde83

08006ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e3d4      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eb6:	4ba1      	ldr	r3, [pc, #644]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 030c 	and.w	r3, r3, #12
 8006ebe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ec0:	4b9e      	ldr	r3, [pc, #632]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0310 	and.w	r3, r3, #16
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80e4 	beq.w	80070a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d007      	beq.n	8006eee <HAL_RCC_OscConfig+0x4a>
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b0c      	cmp	r3, #12
 8006ee2:	f040 808b 	bne.w	8006ffc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	f040 8087 	bne.w	8006ffc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006eee:	4b93      	ldr	r3, [pc, #588]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <HAL_RCC_OscConfig+0x62>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e3ac      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1a      	ldr	r2, [r3, #32]
 8006f0a:	4b8c      	ldr	r3, [pc, #560]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <HAL_RCC_OscConfig+0x7c>
 8006f16:	4b89      	ldr	r3, [pc, #548]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f1e:	e005      	b.n	8006f2c <HAL_RCC_OscConfig+0x88>
 8006f20:	4b86      	ldr	r3, [pc, #536]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f26:	091b      	lsrs	r3, r3, #4
 8006f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d223      	bcs.n	8006f78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fd73 	bl	8007a20 <RCC_SetFlashLatencyFromMSIRange>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e38d      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f44:	4b7d      	ldr	r3, [pc, #500]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a7c      	ldr	r2, [pc, #496]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f4a:	f043 0308 	orr.w	r3, r3, #8
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	4b7a      	ldr	r3, [pc, #488]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	4977      	ldr	r1, [pc, #476]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f62:	4b76      	ldr	r3, [pc, #472]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	4972      	ldr	r1, [pc, #456]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	604b      	str	r3, [r1, #4]
 8006f76:	e025      	b.n	8006fc4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f78:	4b70      	ldr	r3, [pc, #448]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a6f      	ldr	r2, [pc, #444]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f7e:	f043 0308 	orr.w	r3, r3, #8
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	4b6d      	ldr	r3, [pc, #436]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	496a      	ldr	r1, [pc, #424]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f96:	4b69      	ldr	r3, [pc, #420]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	4965      	ldr	r1, [pc, #404]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d109      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fd33 	bl	8007a20 <RCC_SetFlashLatencyFromMSIRange>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e34d      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fc4:	f000 fc36 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	4b5c      	ldr	r3, [pc, #368]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	091b      	lsrs	r3, r3, #4
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	495a      	ldr	r1, [pc, #360]	; (8007140 <HAL_RCC_OscConfig+0x29c>)
 8006fd6:	5ccb      	ldrb	r3, [r1, r3]
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe0:	4a58      	ldr	r2, [pc, #352]	; (8007144 <HAL_RCC_OscConfig+0x2a0>)
 8006fe2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006fe4:	4b58      	ldr	r3, [pc, #352]	; (8007148 <HAL_RCC_OscConfig+0x2a4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fa fe9b 	bl	8001d24 <HAL_InitTick>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d052      	beq.n	800709e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	e331      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d032      	beq.n	800706a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007004:	4b4d      	ldr	r3, [pc, #308]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a4c      	ldr	r2, [pc, #304]	; (800713c <HAL_RCC_OscConfig+0x298>)
 800700a:	f043 0301 	orr.w	r3, r3, #1
 800700e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007010:	f7fe fd3a 	bl	8005a88 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007018:	f7fe fd36 	bl	8005a88 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e31a      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800702a:	4b44      	ldr	r3, [pc, #272]	; (800713c <HAL_RCC_OscConfig+0x298>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f0      	beq.n	8007018 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007036:	4b41      	ldr	r3, [pc, #260]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a40      	ldr	r2, [pc, #256]	; (800713c <HAL_RCC_OscConfig+0x298>)
 800703c:	f043 0308 	orr.w	r3, r3, #8
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	4b3e      	ldr	r3, [pc, #248]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	493b      	ldr	r1, [pc, #236]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007050:	4313      	orrs	r3, r2
 8007052:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007054:	4b39      	ldr	r3, [pc, #228]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	021b      	lsls	r3, r3, #8
 8007062:	4936      	ldr	r1, [pc, #216]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007064:	4313      	orrs	r3, r2
 8007066:	604b      	str	r3, [r1, #4]
 8007068:	e01a      	b.n	80070a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800706a:	4b34      	ldr	r3, [pc, #208]	; (800713c <HAL_RCC_OscConfig+0x298>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a33      	ldr	r2, [pc, #204]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007070:	f023 0301 	bic.w	r3, r3, #1
 8007074:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007076:	f7fe fd07 	bl	8005a88 <HAL_GetTick>
 800707a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800707c:	e008      	b.n	8007090 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800707e:	f7fe fd03 	bl	8005a88 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d901      	bls.n	8007090 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e2e7      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007090:	4b2a      	ldr	r3, [pc, #168]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1f0      	bne.n	800707e <HAL_RCC_OscConfig+0x1da>
 800709c:	e000      	b.n	80070a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800709e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d074      	beq.n	8007196 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b08      	cmp	r3, #8
 80070b0:	d005      	beq.n	80070be <HAL_RCC_OscConfig+0x21a>
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	2b0c      	cmp	r3, #12
 80070b6:	d10e      	bne.n	80070d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d10b      	bne.n	80070d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070be:	4b1f      	ldr	r3, [pc, #124]	; (800713c <HAL_RCC_OscConfig+0x298>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d064      	beq.n	8007194 <HAL_RCC_OscConfig+0x2f0>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d160      	bne.n	8007194 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e2c4      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070de:	d106      	bne.n	80070ee <HAL_RCC_OscConfig+0x24a>
 80070e0:	4b16      	ldr	r3, [pc, #88]	; (800713c <HAL_RCC_OscConfig+0x298>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a15      	ldr	r2, [pc, #84]	; (800713c <HAL_RCC_OscConfig+0x298>)
 80070e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	e01d      	b.n	800712a <HAL_RCC_OscConfig+0x286>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070f6:	d10c      	bne.n	8007112 <HAL_RCC_OscConfig+0x26e>
 80070f8:	4b10      	ldr	r3, [pc, #64]	; (800713c <HAL_RCC_OscConfig+0x298>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a0f      	ldr	r2, [pc, #60]	; (800713c <HAL_RCC_OscConfig+0x298>)
 80070fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	4b0d      	ldr	r3, [pc, #52]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a0c      	ldr	r2, [pc, #48]	; (800713c <HAL_RCC_OscConfig+0x298>)
 800710a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	e00b      	b.n	800712a <HAL_RCC_OscConfig+0x286>
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a09      	ldr	r2, [pc, #36]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	4b07      	ldr	r3, [pc, #28]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a06      	ldr	r2, [pc, #24]	; (800713c <HAL_RCC_OscConfig+0x298>)
 8007124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007128:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01c      	beq.n	800716c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007132:	f7fe fca9 	bl	8005a88 <HAL_GetTick>
 8007136:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007138:	e011      	b.n	800715e <HAL_RCC_OscConfig+0x2ba>
 800713a:	bf00      	nop
 800713c:	40021000 	.word	0x40021000
 8007140:	0800e9ac 	.word	0x0800e9ac
 8007144:	20000088 	.word	0x20000088
 8007148:	20000144 	.word	0x20000144
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800714c:	f7fe fc9c 	bl	8005a88 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b64      	cmp	r3, #100	; 0x64
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e280      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800715e:	4baf      	ldr	r3, [pc, #700]	; (800741c <HAL_RCC_OscConfig+0x578>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f0      	beq.n	800714c <HAL_RCC_OscConfig+0x2a8>
 800716a:	e014      	b.n	8007196 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716c:	f7fe fc8c 	bl	8005a88 <HAL_GetTick>
 8007170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007174:	f7fe fc88 	bl	8005a88 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b64      	cmp	r3, #100	; 0x64
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e26c      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007186:	4ba5      	ldr	r3, [pc, #660]	; (800741c <HAL_RCC_OscConfig+0x578>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f0      	bne.n	8007174 <HAL_RCC_OscConfig+0x2d0>
 8007192:	e000      	b.n	8007196 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d060      	beq.n	8007264 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d005      	beq.n	80071b4 <HAL_RCC_OscConfig+0x310>
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b0c      	cmp	r3, #12
 80071ac:	d119      	bne.n	80071e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d116      	bne.n	80071e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071b4:	4b99      	ldr	r3, [pc, #612]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <HAL_RCC_OscConfig+0x328>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e249      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071cc:	4b93      	ldr	r3, [pc, #588]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	061b      	lsls	r3, r3, #24
 80071da:	4990      	ldr	r1, [pc, #576]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071e0:	e040      	b.n	8007264 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d023      	beq.n	8007232 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071ea:	4b8c      	ldr	r3, [pc, #560]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a8b      	ldr	r2, [pc, #556]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80071f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f6:	f7fe fc47 	bl	8005a88 <HAL_GetTick>
 80071fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071fc:	e008      	b.n	8007210 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071fe:	f7fe fc43 	bl	8005a88 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e227      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007210:	4b82      	ldr	r3, [pc, #520]	; (800741c <HAL_RCC_OscConfig+0x578>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0f0      	beq.n	80071fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800721c:	4b7f      	ldr	r3, [pc, #508]	; (800741c <HAL_RCC_OscConfig+0x578>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	061b      	lsls	r3, r3, #24
 800722a:	497c      	ldr	r1, [pc, #496]	; (800741c <HAL_RCC_OscConfig+0x578>)
 800722c:	4313      	orrs	r3, r2
 800722e:	604b      	str	r3, [r1, #4]
 8007230:	e018      	b.n	8007264 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007232:	4b7a      	ldr	r3, [pc, #488]	; (800741c <HAL_RCC_OscConfig+0x578>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a79      	ldr	r2, [pc, #484]	; (800741c <HAL_RCC_OscConfig+0x578>)
 8007238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800723c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723e:	f7fe fc23 	bl	8005a88 <HAL_GetTick>
 8007242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007244:	e008      	b.n	8007258 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007246:	f7fe fc1f 	bl	8005a88 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d901      	bls.n	8007258 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e203      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007258:	4b70      	ldr	r3, [pc, #448]	; (800741c <HAL_RCC_OscConfig+0x578>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1f0      	bne.n	8007246 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	2b00      	cmp	r3, #0
 800726e:	d03c      	beq.n	80072ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01c      	beq.n	80072b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007278:	4b68      	ldr	r3, [pc, #416]	; (800741c <HAL_RCC_OscConfig+0x578>)
 800727a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800727e:	4a67      	ldr	r2, [pc, #412]	; (800741c <HAL_RCC_OscConfig+0x578>)
 8007280:	f043 0301 	orr.w	r3, r3, #1
 8007284:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007288:	f7fe fbfe 	bl	8005a88 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007290:	f7fe fbfa 	bl	8005a88 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e1de      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072a2:	4b5e      	ldr	r3, [pc, #376]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80072a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0ef      	beq.n	8007290 <HAL_RCC_OscConfig+0x3ec>
 80072b0:	e01b      	b.n	80072ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072b2:	4b5a      	ldr	r3, [pc, #360]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80072b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072b8:	4a58      	ldr	r2, [pc, #352]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80072ba:	f023 0301 	bic.w	r3, r3, #1
 80072be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c2:	f7fe fbe1 	bl	8005a88 <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072c8:	e008      	b.n	80072dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072ca:	f7fe fbdd 	bl	8005a88 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e1c1      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072dc:	4b4f      	ldr	r3, [pc, #316]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80072de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1ef      	bne.n	80072ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80a6 	beq.w	8007444 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072f8:	2300      	movs	r3, #0
 80072fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80072fc:	4b47      	ldr	r3, [pc, #284]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80072fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10d      	bne.n	8007324 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007308:	4b44      	ldr	r3, [pc, #272]	; (800741c <HAL_RCC_OscConfig+0x578>)
 800730a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730c:	4a43      	ldr	r2, [pc, #268]	; (800741c <HAL_RCC_OscConfig+0x578>)
 800730e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007312:	6593      	str	r3, [r2, #88]	; 0x58
 8007314:	4b41      	ldr	r3, [pc, #260]	; (800741c <HAL_RCC_OscConfig+0x578>)
 8007316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731c:	60bb      	str	r3, [r7, #8]
 800731e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007320:	2301      	movs	r3, #1
 8007322:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007324:	4b3e      	ldr	r3, [pc, #248]	; (8007420 <HAL_RCC_OscConfig+0x57c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732c:	2b00      	cmp	r3, #0
 800732e:	d118      	bne.n	8007362 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007330:	4b3b      	ldr	r3, [pc, #236]	; (8007420 <HAL_RCC_OscConfig+0x57c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a3a      	ldr	r2, [pc, #232]	; (8007420 <HAL_RCC_OscConfig+0x57c>)
 8007336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800733a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800733c:	f7fe fba4 	bl	8005a88 <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007344:	f7fe fba0 	bl	8005a88 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e184      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007356:	4b32      	ldr	r3, [pc, #200]	; (8007420 <HAL_RCC_OscConfig+0x57c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0f0      	beq.n	8007344 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d108      	bne.n	800737c <HAL_RCC_OscConfig+0x4d8>
 800736a:	4b2c      	ldr	r3, [pc, #176]	; (800741c <HAL_RCC_OscConfig+0x578>)
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007370:	4a2a      	ldr	r2, [pc, #168]	; (800741c <HAL_RCC_OscConfig+0x578>)
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800737a:	e024      	b.n	80073c6 <HAL_RCC_OscConfig+0x522>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b05      	cmp	r3, #5
 8007382:	d110      	bne.n	80073a6 <HAL_RCC_OscConfig+0x502>
 8007384:	4b25      	ldr	r3, [pc, #148]	; (800741c <HAL_RCC_OscConfig+0x578>)
 8007386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738a:	4a24      	ldr	r2, [pc, #144]	; (800741c <HAL_RCC_OscConfig+0x578>)
 800738c:	f043 0304 	orr.w	r3, r3, #4
 8007390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007394:	4b21      	ldr	r3, [pc, #132]	; (800741c <HAL_RCC_OscConfig+0x578>)
 8007396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739a:	4a20      	ldr	r2, [pc, #128]	; (800741c <HAL_RCC_OscConfig+0x578>)
 800739c:	f043 0301 	orr.w	r3, r3, #1
 80073a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80073a4:	e00f      	b.n	80073c6 <HAL_RCC_OscConfig+0x522>
 80073a6:	4b1d      	ldr	r3, [pc, #116]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80073a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ac:	4a1b      	ldr	r2, [pc, #108]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80073b6:	4b19      	ldr	r3, [pc, #100]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80073b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073bc:	4a17      	ldr	r2, [pc, #92]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80073be:	f023 0304 	bic.w	r3, r3, #4
 80073c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d016      	beq.n	80073fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ce:	f7fe fb5b 	bl	8005a88 <HAL_GetTick>
 80073d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073d4:	e00a      	b.n	80073ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073d6:	f7fe fb57 	bl	8005a88 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d901      	bls.n	80073ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e139      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073ec:	4b0b      	ldr	r3, [pc, #44]	; (800741c <HAL_RCC_OscConfig+0x578>)
 80073ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0ed      	beq.n	80073d6 <HAL_RCC_OscConfig+0x532>
 80073fa:	e01a      	b.n	8007432 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fc:	f7fe fb44 	bl	8005a88 <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007402:	e00f      	b.n	8007424 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007404:	f7fe fb40 	bl	8005a88 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007412:	4293      	cmp	r3, r2
 8007414:	d906      	bls.n	8007424 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e122      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
 800741a:	bf00      	nop
 800741c:	40021000 	.word	0x40021000
 8007420:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007424:	4b90      	ldr	r3, [pc, #576]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 8007426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e8      	bne.n	8007404 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007432:	7ffb      	ldrb	r3, [r7, #31]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d105      	bne.n	8007444 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007438:	4b8b      	ldr	r3, [pc, #556]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 800743a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743c:	4a8a      	ldr	r2, [pc, #552]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 800743e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007442:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8108 	beq.w	800765e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	2b02      	cmp	r3, #2
 8007454:	f040 80d0 	bne.w	80075f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007458:	4b83      	ldr	r3, [pc, #524]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f003 0203 	and.w	r2, r3, #3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	429a      	cmp	r2, r3
 800746a:	d130      	bne.n	80074ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	3b01      	subs	r3, #1
 8007478:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800747a:	429a      	cmp	r2, r3
 800747c:	d127      	bne.n	80074ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007488:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800748a:	429a      	cmp	r2, r3
 800748c:	d11f      	bne.n	80074ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007498:	2a07      	cmp	r2, #7
 800749a:	bf14      	ite	ne
 800749c:	2201      	movne	r2, #1
 800749e:	2200      	moveq	r2, #0
 80074a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d113      	bne.n	80074ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b0:	085b      	lsrs	r3, r3, #1
 80074b2:	3b01      	subs	r3, #1
 80074b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d109      	bne.n	80074ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	3b01      	subs	r3, #1
 80074c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d06e      	beq.n	80075ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b0c      	cmp	r3, #12
 80074d2:	d069      	beq.n	80075a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80074d4:	4b64      	ldr	r3, [pc, #400]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d105      	bne.n	80074ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80074e0:	4b61      	ldr	r3, [pc, #388]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0b7      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80074f0:	4b5d      	ldr	r3, [pc, #372]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a5c      	ldr	r2, [pc, #368]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 80074f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80074fc:	f7fe fac4 	bl	8005a88 <HAL_GetTick>
 8007500:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007504:	f7fe fac0 	bl	8005a88 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b02      	cmp	r3, #2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e0a4      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007516:	4b54      	ldr	r3, [pc, #336]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f0      	bne.n	8007504 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007522:	4b51      	ldr	r3, [pc, #324]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	4b51      	ldr	r3, [pc, #324]	; (800766c <HAL_RCC_OscConfig+0x7c8>)
 8007528:	4013      	ands	r3, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007532:	3a01      	subs	r2, #1
 8007534:	0112      	lsls	r2, r2, #4
 8007536:	4311      	orrs	r1, r2
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800753c:	0212      	lsls	r2, r2, #8
 800753e:	4311      	orrs	r1, r2
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007544:	0852      	lsrs	r2, r2, #1
 8007546:	3a01      	subs	r2, #1
 8007548:	0552      	lsls	r2, r2, #21
 800754a:	4311      	orrs	r1, r2
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007550:	0852      	lsrs	r2, r2, #1
 8007552:	3a01      	subs	r2, #1
 8007554:	0652      	lsls	r2, r2, #25
 8007556:	4311      	orrs	r1, r2
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800755c:	0912      	lsrs	r2, r2, #4
 800755e:	0452      	lsls	r2, r2, #17
 8007560:	430a      	orrs	r2, r1
 8007562:	4941      	ldr	r1, [pc, #260]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 8007564:	4313      	orrs	r3, r2
 8007566:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007568:	4b3f      	ldr	r3, [pc, #252]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a3e      	ldr	r2, [pc, #248]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 800756e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007572:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007574:	4b3c      	ldr	r3, [pc, #240]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	4a3b      	ldr	r2, [pc, #236]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 800757a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800757e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007580:	f7fe fa82 	bl	8005a88 <HAL_GetTick>
 8007584:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007588:	f7fe fa7e 	bl	8005a88 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e062      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800759a:	4b33      	ldr	r3, [pc, #204]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0f0      	beq.n	8007588 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075a6:	e05a      	b.n	800765e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e059      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ac:	4b2e      	ldr	r3, [pc, #184]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d152      	bne.n	800765e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80075b8:	4b2b      	ldr	r3, [pc, #172]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2a      	ldr	r2, [pc, #168]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 80075be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075c4:	4b28      	ldr	r3, [pc, #160]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	4a27      	ldr	r2, [pc, #156]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 80075ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075d0:	f7fe fa5a 	bl	8005a88 <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d8:	f7fe fa56 	bl	8005a88 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e03a      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ea:	4b1f      	ldr	r3, [pc, #124]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0x734>
 80075f6:	e032      	b.n	800765e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	2b0c      	cmp	r3, #12
 80075fc:	d02d      	beq.n	800765a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075fe:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a19      	ldr	r2, [pc, #100]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 8007604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007608:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800760a:	4b17      	ldr	r3, [pc, #92]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d105      	bne.n	8007622 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007616:	4b14      	ldr	r3, [pc, #80]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	4a13      	ldr	r2, [pc, #76]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 800761c:	f023 0303 	bic.w	r3, r3, #3
 8007620:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007622:	4b11      	ldr	r3, [pc, #68]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	4a10      	ldr	r2, [pc, #64]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 8007628:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800762c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007630:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007632:	f7fe fa29 	bl	8005a88 <HAL_GetTick>
 8007636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007638:	e008      	b.n	800764c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800763a:	f7fe fa25 	bl	8005a88 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2b02      	cmp	r3, #2
 8007646:	d901      	bls.n	800764c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e009      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800764c:	4b06      	ldr	r3, [pc, #24]	; (8007668 <HAL_RCC_OscConfig+0x7c4>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1f0      	bne.n	800763a <HAL_RCC_OscConfig+0x796>
 8007658:	e001      	b.n	800765e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e000      	b.n	8007660 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40021000 	.word	0x40021000
 800766c:	f99d808c 	.word	0xf99d808c

08007670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e0c8      	b.n	8007816 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007684:	4b66      	ldr	r3, [pc, #408]	; (8007820 <HAL_RCC_ClockConfig+0x1b0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d910      	bls.n	80076b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007692:	4b63      	ldr	r3, [pc, #396]	; (8007820 <HAL_RCC_ClockConfig+0x1b0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f023 0207 	bic.w	r2, r3, #7
 800769a:	4961      	ldr	r1, [pc, #388]	; (8007820 <HAL_RCC_ClockConfig+0x1b0>)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	4313      	orrs	r3, r2
 80076a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a2:	4b5f      	ldr	r3, [pc, #380]	; (8007820 <HAL_RCC_ClockConfig+0x1b0>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d001      	beq.n	80076b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0b0      	b.n	8007816 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d04c      	beq.n	800775a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d107      	bne.n	80076d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076c8:	4b56      	ldr	r3, [pc, #344]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d121      	bne.n	8007718 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e09e      	b.n	8007816 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d107      	bne.n	80076f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076e0:	4b50      	ldr	r3, [pc, #320]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d115      	bne.n	8007718 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e092      	b.n	8007816 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d107      	bne.n	8007708 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076f8:	4b4a      	ldr	r3, [pc, #296]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d109      	bne.n	8007718 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e086      	b.n	8007816 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007708:	4b46      	ldr	r3, [pc, #280]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e07e      	b.n	8007816 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007718:	4b42      	ldr	r3, [pc, #264]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f023 0203 	bic.w	r2, r3, #3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	493f      	ldr	r1, [pc, #252]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 8007726:	4313      	orrs	r3, r2
 8007728:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772a:	f7fe f9ad 	bl	8005a88 <HAL_GetTick>
 800772e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007730:	e00a      	b.n	8007748 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007732:	f7fe f9a9 	bl	8005a88 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007740:	4293      	cmp	r3, r2
 8007742:	d901      	bls.n	8007748 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e066      	b.n	8007816 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007748:	4b36      	ldr	r3, [pc, #216]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f003 020c 	and.w	r2, r3, #12
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	429a      	cmp	r2, r3
 8007758:	d1eb      	bne.n	8007732 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d008      	beq.n	8007778 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007766:	4b2f      	ldr	r3, [pc, #188]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	492c      	ldr	r1, [pc, #176]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 8007774:	4313      	orrs	r3, r2
 8007776:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007778:	4b29      	ldr	r3, [pc, #164]	; (8007820 <HAL_RCC_ClockConfig+0x1b0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d210      	bcs.n	80077a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007786:	4b26      	ldr	r3, [pc, #152]	; (8007820 <HAL_RCC_ClockConfig+0x1b0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f023 0207 	bic.w	r2, r3, #7
 800778e:	4924      	ldr	r1, [pc, #144]	; (8007820 <HAL_RCC_ClockConfig+0x1b0>)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	4313      	orrs	r3, r2
 8007794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007796:	4b22      	ldr	r3, [pc, #136]	; (8007820 <HAL_RCC_ClockConfig+0x1b0>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d001      	beq.n	80077a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e036      	b.n	8007816 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d008      	beq.n	80077c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077b4:	4b1b      	ldr	r3, [pc, #108]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	4918      	ldr	r1, [pc, #96]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077d2:	4b14      	ldr	r3, [pc, #80]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	00db      	lsls	r3, r3, #3
 80077e0:	4910      	ldr	r1, [pc, #64]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077e6:	f000 f825 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 80077ea:	4602      	mov	r2, r0
 80077ec:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <HAL_RCC_ClockConfig+0x1b4>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	091b      	lsrs	r3, r3, #4
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	490c      	ldr	r1, [pc, #48]	; (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 80077f8:	5ccb      	ldrb	r3, [r1, r3]
 80077fa:	f003 031f 	and.w	r3, r3, #31
 80077fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007802:	4a0a      	ldr	r2, [pc, #40]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 8007804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007806:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <HAL_RCC_ClockConfig+0x1c0>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	f7fa fa8a 	bl	8001d24 <HAL_InitTick>
 8007810:	4603      	mov	r3, r0
 8007812:	72fb      	strb	r3, [r7, #11]

  return status;
 8007814:	7afb      	ldrb	r3, [r7, #11]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	40022000 	.word	0x40022000
 8007824:	40021000 	.word	0x40021000
 8007828:	0800e9ac 	.word	0x0800e9ac
 800782c:	20000088 	.word	0x20000088
 8007830:	20000144 	.word	0x20000144

08007834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007834:	b480      	push	{r7}
 8007836:	b089      	sub	sp, #36	; 0x24
 8007838:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	61fb      	str	r3, [r7, #28]
 800783e:	2300      	movs	r3, #0
 8007840:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007842:	4b3e      	ldr	r3, [pc, #248]	; (800793c <HAL_RCC_GetSysClockFreq+0x108>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 030c 	and.w	r3, r3, #12
 800784a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800784c:	4b3b      	ldr	r3, [pc, #236]	; (800793c <HAL_RCC_GetSysClockFreq+0x108>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_RCC_GetSysClockFreq+0x34>
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2b0c      	cmp	r3, #12
 8007860:	d121      	bne.n	80078a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d11e      	bne.n	80078a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007868:	4b34      	ldr	r3, [pc, #208]	; (800793c <HAL_RCC_GetSysClockFreq+0x108>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b00      	cmp	r3, #0
 8007872:	d107      	bne.n	8007884 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007874:	4b31      	ldr	r3, [pc, #196]	; (800793c <HAL_RCC_GetSysClockFreq+0x108>)
 8007876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	f003 030f 	and.w	r3, r3, #15
 8007880:	61fb      	str	r3, [r7, #28]
 8007882:	e005      	b.n	8007890 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007884:	4b2d      	ldr	r3, [pc, #180]	; (800793c <HAL_RCC_GetSysClockFreq+0x108>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	091b      	lsrs	r3, r3, #4
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007890:	4a2b      	ldr	r2, [pc, #172]	; (8007940 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007898:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10d      	bne.n	80078bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078a4:	e00a      	b.n	80078bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	d102      	bne.n	80078b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078ac:	4b25      	ldr	r3, [pc, #148]	; (8007944 <HAL_RCC_GetSysClockFreq+0x110>)
 80078ae:	61bb      	str	r3, [r7, #24]
 80078b0:	e004      	b.n	80078bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d101      	bne.n	80078bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078b8:	4b23      	ldr	r3, [pc, #140]	; (8007948 <HAL_RCC_GetSysClockFreq+0x114>)
 80078ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b0c      	cmp	r3, #12
 80078c0:	d134      	bne.n	800792c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078c2:	4b1e      	ldr	r3, [pc, #120]	; (800793c <HAL_RCC_GetSysClockFreq+0x108>)
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f003 0303 	and.w	r3, r3, #3
 80078ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d003      	beq.n	80078da <HAL_RCC_GetSysClockFreq+0xa6>
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d003      	beq.n	80078e0 <HAL_RCC_GetSysClockFreq+0xac>
 80078d8:	e005      	b.n	80078e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80078da:	4b1a      	ldr	r3, [pc, #104]	; (8007944 <HAL_RCC_GetSysClockFreq+0x110>)
 80078dc:	617b      	str	r3, [r7, #20]
      break;
 80078de:	e005      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80078e0:	4b19      	ldr	r3, [pc, #100]	; (8007948 <HAL_RCC_GetSysClockFreq+0x114>)
 80078e2:	617b      	str	r3, [r7, #20]
      break;
 80078e4:	e002      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	617b      	str	r3, [r7, #20]
      break;
 80078ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078ec:	4b13      	ldr	r3, [pc, #76]	; (800793c <HAL_RCC_GetSysClockFreq+0x108>)
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	091b      	lsrs	r3, r3, #4
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	3301      	adds	r3, #1
 80078f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80078fa:	4b10      	ldr	r3, [pc, #64]	; (800793c <HAL_RCC_GetSysClockFreq+0x108>)
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	fb02 f203 	mul.w	r2, r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007910:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007912:	4b0a      	ldr	r3, [pc, #40]	; (800793c <HAL_RCC_GetSysClockFreq+0x108>)
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	0e5b      	lsrs	r3, r3, #25
 8007918:	f003 0303 	and.w	r3, r3, #3
 800791c:	3301      	adds	r3, #1
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	fbb2 f3f3 	udiv	r3, r2, r3
 800792a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800792c:	69bb      	ldr	r3, [r7, #24]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3724      	adds	r7, #36	; 0x24
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40021000 	.word	0x40021000
 8007940:	0800e9c4 	.word	0x0800e9c4
 8007944:	00f42400 	.word	0x00f42400
 8007948:	007a1200 	.word	0x007a1200

0800794c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007950:	4b03      	ldr	r3, [pc, #12]	; (8007960 <HAL_RCC_GetHCLKFreq+0x14>)
 8007952:	681b      	ldr	r3, [r3, #0]
}
 8007954:	4618      	mov	r0, r3
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	20000088 	.word	0x20000088

08007964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007968:	f7ff fff0 	bl	800794c <HAL_RCC_GetHCLKFreq>
 800796c:	4602      	mov	r2, r0
 800796e:	4b06      	ldr	r3, [pc, #24]	; (8007988 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	0a1b      	lsrs	r3, r3, #8
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	4904      	ldr	r1, [pc, #16]	; (800798c <HAL_RCC_GetPCLK1Freq+0x28>)
 800797a:	5ccb      	ldrb	r3, [r1, r3]
 800797c:	f003 031f 	and.w	r3, r3, #31
 8007980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007984:	4618      	mov	r0, r3
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40021000 	.word	0x40021000
 800798c:	0800e9bc 	.word	0x0800e9bc

08007990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007994:	f7ff ffda 	bl	800794c <HAL_RCC_GetHCLKFreq>
 8007998:	4602      	mov	r2, r0
 800799a:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	0adb      	lsrs	r3, r3, #11
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	4904      	ldr	r1, [pc, #16]	; (80079b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079a6:	5ccb      	ldrb	r3, [r1, r3]
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40021000 	.word	0x40021000
 80079b8:	0800e9bc 	.word	0x0800e9bc

080079bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	220f      	movs	r2, #15
 80079ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80079cc:	4b12      	ldr	r3, [pc, #72]	; (8007a18 <HAL_RCC_GetClockConfig+0x5c>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f003 0203 	and.w	r2, r3, #3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80079d8:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <HAL_RCC_GetClockConfig+0x5c>)
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80079e4:	4b0c      	ldr	r3, [pc, #48]	; (8007a18 <HAL_RCC_GetClockConfig+0x5c>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80079f0:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <HAL_RCC_GetClockConfig+0x5c>)
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	08db      	lsrs	r3, r3, #3
 80079f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80079fe:	4b07      	ldr	r3, [pc, #28]	; (8007a1c <HAL_RCC_GetClockConfig+0x60>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0207 	and.w	r2, r3, #7
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	601a      	str	r2, [r3, #0]
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	40021000 	.word	0x40021000
 8007a1c:	40022000 	.word	0x40022000

08007a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a28:	2300      	movs	r3, #0
 8007a2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a2c:	4b2a      	ldr	r3, [pc, #168]	; (8007ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a38:	f7ff f9d0 	bl	8006ddc <HAL_PWREx_GetVoltageRange>
 8007a3c:	6178      	str	r0, [r7, #20]
 8007a3e:	e014      	b.n	8007a6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a40:	4b25      	ldr	r3, [pc, #148]	; (8007ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a44:	4a24      	ldr	r2, [pc, #144]	; (8007ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8007a4c:	4b22      	ldr	r3, [pc, #136]	; (8007ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a58:	f7ff f9c0 	bl	8006ddc <HAL_PWREx_GetVoltageRange>
 8007a5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a5e:	4b1e      	ldr	r3, [pc, #120]	; (8007ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a62:	4a1d      	ldr	r2, [pc, #116]	; (8007ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a70:	d10b      	bne.n	8007a8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b80      	cmp	r3, #128	; 0x80
 8007a76:	d919      	bls.n	8007aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2ba0      	cmp	r3, #160	; 0xa0
 8007a7c:	d902      	bls.n	8007a84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a7e:	2302      	movs	r3, #2
 8007a80:	613b      	str	r3, [r7, #16]
 8007a82:	e013      	b.n	8007aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a84:	2301      	movs	r3, #1
 8007a86:	613b      	str	r3, [r7, #16]
 8007a88:	e010      	b.n	8007aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b80      	cmp	r3, #128	; 0x80
 8007a8e:	d902      	bls.n	8007a96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a90:	2303      	movs	r3, #3
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	e00a      	b.n	8007aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b80      	cmp	r3, #128	; 0x80
 8007a9a:	d102      	bne.n	8007aa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	e004      	b.n	8007aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b70      	cmp	r3, #112	; 0x70
 8007aa6:	d101      	bne.n	8007aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007aac:	4b0b      	ldr	r3, [pc, #44]	; (8007adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f023 0207 	bic.w	r2, r3, #7
 8007ab4:	4909      	ldr	r1, [pc, #36]	; (8007adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007abc:	4b07      	ldr	r3, [pc, #28]	; (8007adc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0307 	and.w	r3, r3, #7
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d001      	beq.n	8007ace <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	40021000 	.word	0x40021000
 8007adc:	40022000 	.word	0x40022000

08007ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ae8:	2300      	movs	r3, #0
 8007aea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007aec:	2300      	movs	r3, #0
 8007aee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d041      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b04:	d02a      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007b06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b0a:	d824      	bhi.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b10:	d008      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b16:	d81e      	bhi.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b20:	d010      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b22:	e018      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007b24:	4b86      	ldr	r3, [pc, #536]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4a85      	ldr	r2, [pc, #532]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b30:	e015      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3304      	adds	r3, #4
 8007b36:	2100      	movs	r1, #0
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 f835 	bl	8008ba8 <RCCEx_PLLSAI1_Config>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b42:	e00c      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3320      	adds	r3, #32
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f001 f920 	bl	8008d90 <RCCEx_PLLSAI2_Config>
 8007b50:	4603      	mov	r3, r0
 8007b52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b54:	e003      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	74fb      	strb	r3, [r7, #19]
      break;
 8007b5a:	e000      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b5e:	7cfb      	ldrb	r3, [r7, #19]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10b      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b64:	4b76      	ldr	r3, [pc, #472]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b72:	4973      	ldr	r1, [pc, #460]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b7a:	e001      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	7cfb      	ldrb	r3, [r7, #19]
 8007b7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d041      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b94:	d02a      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007b96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b9a:	d824      	bhi.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007b9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ba0:	d008      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ba6:	d81e      	bhi.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bb0:	d010      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007bb2:	e018      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007bb4:	4b62      	ldr	r3, [pc, #392]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	4a61      	ldr	r2, [pc, #388]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bbe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007bc0:	e015      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 ffed 	bl	8008ba8 <RCCEx_PLLSAI1_Config>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007bd2:	e00c      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3320      	adds	r3, #32
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 f8d8 	bl	8008d90 <RCCEx_PLLSAI2_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007be4:	e003      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	74fb      	strb	r3, [r7, #19]
      break;
 8007bea:	e000      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bee:	7cfb      	ldrb	r3, [r7, #19]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10b      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007bf4:	4b52      	ldr	r3, [pc, #328]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c02:	494f      	ldr	r1, [pc, #316]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007c0a:	e001      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0c:	7cfb      	ldrb	r3, [r7, #19]
 8007c0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 80a0 	beq.w	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c22:	4b47      	ldr	r3, [pc, #284]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007c32:	2300      	movs	r3, #0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00d      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c38:	4b41      	ldr	r3, [pc, #260]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3c:	4a40      	ldr	r2, [pc, #256]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c42:	6593      	str	r3, [r2, #88]	; 0x58
 8007c44:	4b3e      	ldr	r3, [pc, #248]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c50:	2301      	movs	r3, #1
 8007c52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c54:	4b3b      	ldr	r3, [pc, #236]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a3a      	ldr	r2, [pc, #232]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c60:	f7fd ff12 	bl	8005a88 <HAL_GetTick>
 8007c64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c66:	e009      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c68:	f7fd ff0e 	bl	8005a88 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d902      	bls.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	74fb      	strb	r3, [r7, #19]
        break;
 8007c7a:	e005      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c7c:	4b31      	ldr	r3, [pc, #196]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0ef      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007c88:	7cfb      	ldrb	r3, [r7, #19]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d15c      	bne.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c8e:	4b2c      	ldr	r3, [pc, #176]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d01f      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d019      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007cac:	4b24      	ldr	r3, [pc, #144]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cb8:	4b21      	ldr	r3, [pc, #132]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbe:	4a20      	ldr	r2, [pc, #128]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cc8:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cce:	4a1c      	ldr	r2, [pc, #112]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cd8:	4a19      	ldr	r2, [pc, #100]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d016      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cea:	f7fd fecd 	bl	8005a88 <HAL_GetTick>
 8007cee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cf0:	e00b      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf2:	f7fd fec9 	bl	8005a88 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d902      	bls.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	74fb      	strb	r3, [r7, #19]
            break;
 8007d08:	e006      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0ec      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007d18:	7cfb      	ldrb	r3, [r7, #19]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10c      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d1e:	4b08      	ldr	r3, [pc, #32]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d2e:	4904      	ldr	r1, [pc, #16]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d36:	e009      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d38:	7cfb      	ldrb	r3, [r7, #19]
 8007d3a:	74bb      	strb	r3, [r7, #18]
 8007d3c:	e006      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007d3e:	bf00      	nop
 8007d40:	40021000 	.word	0x40021000
 8007d44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d48:	7cfb      	ldrb	r3, [r7, #19]
 8007d4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d4c:	7c7b      	ldrb	r3, [r7, #17]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d105      	bne.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d52:	4b9e      	ldr	r3, [pc, #632]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	4a9d      	ldr	r2, [pc, #628]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d6a:	4b98      	ldr	r3, [pc, #608]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d70:	f023 0203 	bic.w	r2, r3, #3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	4994      	ldr	r1, [pc, #592]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d8c:	4b8f      	ldr	r3, [pc, #572]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d92:	f023 020c 	bic.w	r2, r3, #12
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9a:	498c      	ldr	r1, [pc, #560]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0304 	and.w	r3, r3, #4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dae:	4b87      	ldr	r3, [pc, #540]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	4983      	ldr	r1, [pc, #524]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0308 	and.w	r3, r3, #8
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007dd0:	4b7e      	ldr	r3, [pc, #504]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dde:	497b      	ldr	r1, [pc, #492]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0310 	and.w	r3, r3, #16
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007df2:	4b76      	ldr	r3, [pc, #472]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e00:	4972      	ldr	r1, [pc, #456]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e14:	4b6d      	ldr	r3, [pc, #436]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e22:	496a      	ldr	r1, [pc, #424]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e36:	4b65      	ldr	r3, [pc, #404]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e44:	4961      	ldr	r1, [pc, #388]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e58:	4b5c      	ldr	r3, [pc, #368]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e66:	4959      	ldr	r1, [pc, #356]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e7a:	4b54      	ldr	r3, [pc, #336]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e88:	4950      	ldr	r1, [pc, #320]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e9c:	4b4b      	ldr	r3, [pc, #300]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eaa:	4948      	ldr	r1, [pc, #288]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ebe:	4b43      	ldr	r3, [pc, #268]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ecc:	493f      	ldr	r1, [pc, #252]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d028      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ee0:	4b3a      	ldr	r3, [pc, #232]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eee:	4937      	ldr	r1, [pc, #220]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007efa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007efe:	d106      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f00:	4b32      	ldr	r3, [pc, #200]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	4a31      	ldr	r2, [pc, #196]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f0a:	60d3      	str	r3, [r2, #12]
 8007f0c:	e011      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f16:	d10c      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fe42 	bl	8008ba8 <RCCEx_PLLSAI1_Config>
 8007f24:	4603      	mov	r3, r0
 8007f26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007f28:	7cfb      	ldrb	r3, [r7, #19]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007f2e:	7cfb      	ldrb	r3, [r7, #19]
 8007f30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d028      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f3e:	4b23      	ldr	r3, [pc, #140]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4c:	491f      	ldr	r1, [pc, #124]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f5c:	d106      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f5e:	4b1b      	ldr	r3, [pc, #108]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	4a1a      	ldr	r2, [pc, #104]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f68:	60d3      	str	r3, [r2, #12]
 8007f6a:	e011      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f74:	d10c      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fe13 	bl	8008ba8 <RCCEx_PLLSAI1_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f86:	7cfb      	ldrb	r3, [r7, #19]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007f8c:	7cfb      	ldrb	r3, [r7, #19]
 8007f8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d02b      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f9c:	4b0b      	ldr	r3, [pc, #44]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007faa:	4908      	ldr	r1, [pc, #32]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fba:	d109      	bne.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fbc:	4b03      	ldr	r3, [pc, #12]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	4a02      	ldr	r2, [pc, #8]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fc6:	60d3      	str	r3, [r2, #12]
 8007fc8:	e014      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007fca:	bf00      	nop
 8007fcc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fd8:	d10c      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	2101      	movs	r1, #1
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fde1 	bl	8008ba8 <RCCEx_PLLSAI1_Config>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fea:	7cfb      	ldrb	r3, [r7, #19]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007ff0:	7cfb      	ldrb	r3, [r7, #19]
 8007ff2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d02f      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008000:	4b2b      	ldr	r3, [pc, #172]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008006:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800800e:	4928      	ldr	r1, [pc, #160]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008010:	4313      	orrs	r3, r2
 8008012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800801a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800801e:	d10d      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3304      	adds	r3, #4
 8008024:	2102      	movs	r1, #2
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fdbe 	bl	8008ba8 <RCCEx_PLLSAI1_Config>
 800802c:	4603      	mov	r3, r0
 800802e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008030:	7cfb      	ldrb	r3, [r7, #19]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d014      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008036:	7cfb      	ldrb	r3, [r7, #19]
 8008038:	74bb      	strb	r3, [r7, #18]
 800803a:	e011      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008044:	d10c      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3320      	adds	r3, #32
 800804a:	2102      	movs	r1, #2
 800804c:	4618      	mov	r0, r3
 800804e:	f000 fe9f 	bl	8008d90 <RCCEx_PLLSAI2_Config>
 8008052:	4603      	mov	r3, r0
 8008054:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008056:	7cfb      	ldrb	r3, [r7, #19]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800805c:	7cfb      	ldrb	r3, [r7, #19]
 800805e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00a      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800806c:	4b10      	ldr	r3, [pc, #64]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800806e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008072:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800807a:	490d      	ldr	r1, [pc, #52]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800807c:	4313      	orrs	r3, r2
 800807e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800808e:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008094:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800809e:	4904      	ldr	r1, [pc, #16]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80080a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	40021000 	.word	0x40021000

080080b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80080bc:	2300      	movs	r3, #0
 80080be:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c6:	d13e      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80080c8:	4bbe      	ldr	r3, [pc, #760]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80080ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080d2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080da:	d028      	beq.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080e2:	f200 853e 	bhi.w	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ec:	d005      	beq.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f4:	d00e      	beq.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80080f6:	f000 bd34 	b.w	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80080fa:	4bb2      	ldr	r3, [pc, #712]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80080fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b02      	cmp	r3, #2
 8008106:	f040 852e 	bne.w	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 800810a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800810e:	61fb      	str	r3, [r7, #28]
      break;
 8008110:	f000 bd29 	b.w	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008114:	4bab      	ldr	r3, [pc, #684]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8008116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b02      	cmp	r3, #2
 8008120:	f040 8523 	bne.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 8008124:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008128:	61fb      	str	r3, [r7, #28]
      break;
 800812a:	f000 bd1e 	b.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800812e:	4ba5      	ldr	r3, [pc, #660]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008136:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800813a:	f040 8518 	bne.w	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 800813e:	4ba2      	ldr	r3, [pc, #648]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8008140:	61fb      	str	r3, [r7, #28]
      break;
 8008142:	f000 bd14 	b.w	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008146:	4b9f      	ldr	r3, [pc, #636]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2b03      	cmp	r3, #3
 8008154:	d036      	beq.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b03      	cmp	r3, #3
 800815a:	d840      	bhi.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d003      	beq.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d020      	beq.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008168:	e039      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800816a:	4b96      	ldr	r3, [pc, #600]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b02      	cmp	r3, #2
 8008174:	d116      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008176:	4b93      	ldr	r3, [pc, #588]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008182:	4b90      	ldr	r3, [pc, #576]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	091b      	lsrs	r3, r3, #4
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	e005      	b.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800818e:	4b8d      	ldr	r3, [pc, #564]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8008190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008194:	0a1b      	lsrs	r3, r3, #8
 8008196:	f003 030f 	and.w	r3, r3, #15
 800819a:	4a8c      	ldr	r2, [pc, #560]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 800819c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80081a2:	e01f      	b.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61bb      	str	r3, [r7, #24]
      break;
 80081a8:	e01c      	b.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081aa:	4b86      	ldr	r3, [pc, #536]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081b6:	d102      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80081b8:	4b85      	ldr	r3, [pc, #532]	; (80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 80081ba:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80081bc:	e012      	b.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	61bb      	str	r3, [r7, #24]
      break;
 80081c2:	e00f      	b.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081c4:	4b7f      	ldr	r3, [pc, #508]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081d0:	d102      	bne.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80081d2:	4b80      	ldr	r3, [pc, #512]	; (80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 80081d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80081d6:	e005      	b.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	61bb      	str	r3, [r7, #24]
      break;
 80081dc:	e002      	b.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	61bb      	str	r3, [r7, #24]
      break;
 80081e2:	bf00      	nop
    }

    switch(PeriphClk)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081ea:	f000 80d2 	beq.w	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081f4:	f200 84bd 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081fe:	f000 80c8 	beq.w	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008208:	f200 84b3 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008212:	f000 835b 	beq.w	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800821c:	f200 84a9 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008226:	f000 847f 	beq.w	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008230:	f200 849f 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800823a:	f000 82ce 	beq.w	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008244:	f200 8495 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800824e:	f000 80a0 	beq.w	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008258:	f200 848b 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008262:	f000 808f 	beq.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800826c:	f200 8481 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008276:	d07e      	beq.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800827e:	f200 8478 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008288:	f000 8404 	beq.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008292:	f200 846e 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800829c:	f000 83b0 	beq.w	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a6:	f200 8464 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b0:	f000 837a 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ba:	f200 845a 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b80      	cmp	r3, #128	; 0x80
 80082c2:	f000 8345 	beq.w	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b80      	cmp	r3, #128	; 0x80
 80082ca:	f200 8452 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	d84b      	bhi.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 844b 	beq.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3b01      	subs	r3, #1
 80082e0:	2b1f      	cmp	r3, #31
 80082e2:	f200 8446 	bhi.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80082e6:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	080084d7 	.word	0x080084d7
 80082f0:	08008547 	.word	0x08008547
 80082f4:	08008b73 	.word	0x08008b73
 80082f8:	080085db 	.word	0x080085db
 80082fc:	08008b73 	.word	0x08008b73
 8008300:	08008b73 	.word	0x08008b73
 8008304:	08008b73 	.word	0x08008b73
 8008308:	08008653 	.word	0x08008653
 800830c:	08008b73 	.word	0x08008b73
 8008310:	08008b73 	.word	0x08008b73
 8008314:	08008b73 	.word	0x08008b73
 8008318:	08008b73 	.word	0x08008b73
 800831c:	08008b73 	.word	0x08008b73
 8008320:	08008b73 	.word	0x08008b73
 8008324:	08008b73 	.word	0x08008b73
 8008328:	080086d7 	.word	0x080086d7
 800832c:	08008b73 	.word	0x08008b73
 8008330:	08008b73 	.word	0x08008b73
 8008334:	08008b73 	.word	0x08008b73
 8008338:	08008b73 	.word	0x08008b73
 800833c:	08008b73 	.word	0x08008b73
 8008340:	08008b73 	.word	0x08008b73
 8008344:	08008b73 	.word	0x08008b73
 8008348:	08008b73 	.word	0x08008b73
 800834c:	08008b73 	.word	0x08008b73
 8008350:	08008b73 	.word	0x08008b73
 8008354:	08008b73 	.word	0x08008b73
 8008358:	08008b73 	.word	0x08008b73
 800835c:	08008b73 	.word	0x08008b73
 8008360:	08008b73 	.word	0x08008b73
 8008364:	08008b73 	.word	0x08008b73
 8008368:	08008759 	.word	0x08008759
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	f000 82bd 	beq.w	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008374:	e3fd      	b.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008376:	69b9      	ldr	r1, [r7, #24]
 8008378:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800837c:	f000 fde6 	bl	8008f4c <RCCEx_GetSAIxPeriphCLKFreq>
 8008380:	61f8      	str	r0, [r7, #28]
      break;
 8008382:	e3f7      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8008384:	69b9      	ldr	r1, [r7, #24]
 8008386:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800838a:	f000 fddf 	bl	8008f4c <RCCEx_GetSAIxPeriphCLKFreq>
 800838e:	61f8      	str	r0, [r7, #28]
      break;
 8008390:	e3f0      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008392:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8008394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008398:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800839c:	613b      	str	r3, [r7, #16]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80083a4:	d018      	beq.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80083ac:	f200 808b 	bhi.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083b6:	d059      	beq.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083be:	d028      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 80083c0:	e081      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80083c2:	bf00      	nop
 80083c4:	40021000 	.word	0x40021000
 80083c8:	0003d090 	.word	0x0003d090
 80083cc:	0800e9c4 	.word	0x0800e9c4
 80083d0:	00f42400 	.word	0x00f42400
 80083d4:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80083d8:	4bae      	ldr	r3, [pc, #696]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d172      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80083e4:	4bab      	ldr	r3, [pc, #684]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 80083f0:	4ba8      	ldr	r3, [pc, #672]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	091b      	lsrs	r3, r3, #4
 80083f6:	f003 030f 	and.w	r3, r3, #15
 80083fa:	e005      	b.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80083fc:	4ba5      	ldr	r3, [pc, #660]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80083fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008402:	0a1b      	lsrs	r3, r3, #8
 8008404:	f003 030f 	and.w	r3, r3, #15
 8008408:	4aa3      	ldr	r2, [pc, #652]	; (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800840a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800840e:	61fb      	str	r3, [r7, #28]
          break;
 8008410:	e05b      	b.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008412:	4ba0      	ldr	r3, [pc, #640]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800841e:	d156      	bne.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008420:	4b9c      	ldr	r3, [pc, #624]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800842c:	d14f      	bne.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800842e:	4b99      	ldr	r3, [pc, #612]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	0a1b      	lsrs	r3, r3, #8
 8008434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008438:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	fb02 f203 	mul.w	r2, r2, r3
 8008442:	4b94      	ldr	r3, [pc, #592]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	091b      	lsrs	r3, r3, #4
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	3301      	adds	r3, #1
 800844e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008452:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008454:	4b8f      	ldr	r3, [pc, #572]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	0d5b      	lsrs	r3, r3, #21
 800845a:	f003 0303 	and.w	r3, r3, #3
 800845e:	3301      	adds	r3, #1
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	fbb2 f3f3 	udiv	r3, r2, r3
 8008468:	61fb      	str	r3, [r7, #28]
          break;
 800846a:	e030      	b.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800846c:	4b89      	ldr	r3, [pc, #548]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008478:	d12b      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800847a:	4b86      	ldr	r3, [pc, #536]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008486:	d124      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008488:	4b82      	ldr	r3, [pc, #520]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	0a1b      	lsrs	r3, r3, #8
 800848e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008492:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	fb02 f203 	mul.w	r2, r2, r3
 800849c:	4b7d      	ldr	r3, [pc, #500]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	091b      	lsrs	r3, r3, #4
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	3301      	adds	r3, #1
 80084a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ac:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80084ae:	4b79      	ldr	r3, [pc, #484]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	0d5b      	lsrs	r3, r3, #21
 80084b4:	f003 0303 	and.w	r3, r3, #3
 80084b8:	3301      	adds	r3, #1
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c2:	61fb      	str	r3, [r7, #28]
          break;
 80084c4:	e005      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 80084c6:	bf00      	nop
 80084c8:	e354      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80084ca:	bf00      	nop
 80084cc:	e352      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80084ce:	bf00      	nop
 80084d0:	e350      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80084d2:	bf00      	nop
        break;
 80084d4:	e34e      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80084d6:	4b6f      	ldr	r3, [pc, #444]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80084d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	613b      	str	r3, [r7, #16]
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d828      	bhi.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 80084e8:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	08008501 	.word	0x08008501
 80084f4:	08008509 	.word	0x08008509
 80084f8:	08008511 	.word	0x08008511
 80084fc:	08008525 	.word	0x08008525
          frequency = HAL_RCC_GetPCLK2Freq();
 8008500:	f7ff fa46 	bl	8007990 <HAL_RCC_GetPCLK2Freq>
 8008504:	61f8      	str	r0, [r7, #28]
          break;
 8008506:	e01d      	b.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 8008508:	f7ff f994 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 800850c:	61f8      	str	r0, [r7, #28]
          break;
 800850e:	e019      	b.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008510:	4b60      	ldr	r3, [pc, #384]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800851c:	d10f      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 800851e:	4b5f      	ldr	r3, [pc, #380]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8008520:	61fb      	str	r3, [r7, #28]
          break;
 8008522:	e00c      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008524:	4b5b      	ldr	r3, [pc, #364]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b02      	cmp	r3, #2
 8008530:	d107      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 8008532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008536:	61fb      	str	r3, [r7, #28]
          break;
 8008538:	e003      	b.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 800853a:	bf00      	nop
 800853c:	e31a      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800853e:	bf00      	nop
 8008540:	e318      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8008542:	bf00      	nop
        break;
 8008544:	e316      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008546:	4b53      	ldr	r3, [pc, #332]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854c:	f003 030c 	and.w	r3, r3, #12
 8008550:	613b      	str	r3, [r7, #16]
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2b0c      	cmp	r3, #12
 8008556:	d83a      	bhi.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8008558:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	08008595 	.word	0x08008595
 8008564:	080085cf 	.word	0x080085cf
 8008568:	080085cf 	.word	0x080085cf
 800856c:	080085cf 	.word	0x080085cf
 8008570:	0800859d 	.word	0x0800859d
 8008574:	080085cf 	.word	0x080085cf
 8008578:	080085cf 	.word	0x080085cf
 800857c:	080085cf 	.word	0x080085cf
 8008580:	080085a5 	.word	0x080085a5
 8008584:	080085cf 	.word	0x080085cf
 8008588:	080085cf 	.word	0x080085cf
 800858c:	080085cf 	.word	0x080085cf
 8008590:	080085b9 	.word	0x080085b9
          frequency = HAL_RCC_GetPCLK1Freq();
 8008594:	f7ff f9e6 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8008598:	61f8      	str	r0, [r7, #28]
          break;
 800859a:	e01d      	b.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 800859c:	f7ff f94a 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 80085a0:	61f8      	str	r0, [r7, #28]
          break;
 80085a2:	e019      	b.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085a4:	4b3b      	ldr	r3, [pc, #236]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b0:	d10f      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 80085b2:	4b3a      	ldr	r3, [pc, #232]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80085b4:	61fb      	str	r3, [r7, #28]
          break;
 80085b6:	e00c      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085b8:	4b36      	ldr	r3, [pc, #216]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80085ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d107      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 80085c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ca:	61fb      	str	r3, [r7, #28]
          break;
 80085cc:	e003      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 80085ce:	bf00      	nop
 80085d0:	e2d0      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80085d2:	bf00      	nop
 80085d4:	e2ce      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80085d6:	bf00      	nop
        break;
 80085d8:	e2cc      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80085da:	4b2e      	ldr	r3, [pc, #184]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80085dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80085e4:	613b      	str	r3, [r7, #16]
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	2b30      	cmp	r3, #48	; 0x30
 80085ea:	d021      	beq.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	2b30      	cmp	r3, #48	; 0x30
 80085f0:	d829      	bhi.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	d011      	beq.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d823      	bhi.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	2b10      	cmp	r3, #16
 8008608:	d004      	beq.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 800860a:	e01c      	b.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 800860c:	f7ff f9aa 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8008610:	61f8      	str	r0, [r7, #28]
          break;
 8008612:	e01d      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008614:	f7ff f90e 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 8008618:	61f8      	str	r0, [r7, #28]
          break;
 800861a:	e019      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800861c:	4b1d      	ldr	r3, [pc, #116]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008628:	d10f      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 800862a:	4b1c      	ldr	r3, [pc, #112]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800862c:	61fb      	str	r3, [r7, #28]
          break;
 800862e:	e00c      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008630:	4b18      	ldr	r3, [pc, #96]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b02      	cmp	r3, #2
 800863c:	d107      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 800863e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008642:	61fb      	str	r3, [r7, #28]
          break;
 8008644:	e003      	b.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 8008646:	bf00      	nop
 8008648:	e294      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800864a:	bf00      	nop
 800864c:	e292      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800864e:	bf00      	nop
        break;
 8008650:	e290      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008652:	4b10      	ldr	r3, [pc, #64]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008658:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800865c:	613b      	str	r3, [r7, #16]
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	2bc0      	cmp	r3, #192	; 0xc0
 8008662:	d027      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2bc0      	cmp	r3, #192	; 0xc0
 8008668:	d82f      	bhi.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	2b80      	cmp	r3, #128	; 0x80
 800866e:	d017      	beq.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b80      	cmp	r3, #128	; 0x80
 8008674:	d829      	bhi.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	2b40      	cmp	r3, #64	; 0x40
 8008680:	d004      	beq.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 8008682:	e022      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008684:	f7ff f96e 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8008688:	61f8      	str	r0, [r7, #28]
          break;
 800868a:	e023      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 800868c:	f7ff f8d2 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 8008690:	61f8      	str	r0, [r7, #28]
          break;
 8008692:	e01f      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8008694:	40021000 	.word	0x40021000
 8008698:	0800e9c4 	.word	0x0800e9c4
 800869c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086a0:	4ba9      	ldr	r3, [pc, #676]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ac:	d10f      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 80086ae:	4ba7      	ldr	r3, [pc, #668]	; (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 80086b0:	61fb      	str	r3, [r7, #28]
          break;
 80086b2:	e00c      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086b4:	4ba4      	ldr	r3, [pc, #656]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80086b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d107      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 80086c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086c6:	61fb      	str	r3, [r7, #28]
          break;
 80086c8:	e003      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 80086ca:	bf00      	nop
 80086cc:	e252      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80086ce:	bf00      	nop
 80086d0:	e250      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80086d2:	bf00      	nop
        break;
 80086d4:	e24e      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80086d6:	4b9c      	ldr	r3, [pc, #624]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80086d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e0:	613b      	str	r3, [r7, #16]
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086e8:	d025      	beq.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086f0:	d82c      	bhi.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f8:	d013      	beq.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008700:	d824      	bhi.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800870e:	d004      	beq.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 8008710:	e01c      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008712:	f7ff f927 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8008716:	61f8      	str	r0, [r7, #28]
          break;
 8008718:	e01d      	b.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 800871a:	f7ff f88b 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 800871e:	61f8      	str	r0, [r7, #28]
          break;
 8008720:	e019      	b.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008722:	4b89      	ldr	r3, [pc, #548]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800872a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800872e:	d10f      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 8008730:	4b86      	ldr	r3, [pc, #536]	; (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8008732:	61fb      	str	r3, [r7, #28]
          break;
 8008734:	e00c      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008736:	4b84      	ldr	r3, [pc, #528]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8008738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b02      	cmp	r3, #2
 8008742:	d107      	bne.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 8008744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008748:	61fb      	str	r3, [r7, #28]
          break;
 800874a:	e003      	b.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 800874c:	bf00      	nop
 800874e:	e211      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8008750:	bf00      	nop
 8008752:	e20f      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8008754:	bf00      	nop
        break;
 8008756:	e20d      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008758:	4b7b      	ldr	r3, [pc, #492]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800875a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800875e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008762:	613b      	str	r3, [r7, #16]
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800876a:	d025      	beq.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008772:	d82c      	bhi.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800877a:	d013      	beq.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008782:	d824      	bhi.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d004      	beq.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008790:	d004      	beq.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 8008792:	e01c      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008794:	f7ff f8e6 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8008798:	61f8      	str	r0, [r7, #28]
          break;
 800879a:	e01d      	b.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 800879c:	f7ff f84a 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 80087a0:	61f8      	str	r0, [r7, #28]
          break;
 80087a2:	e019      	b.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087a4:	4b68      	ldr	r3, [pc, #416]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b0:	d10f      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 80087b2:	4b66      	ldr	r3, [pc, #408]	; (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 80087b4:	61fb      	str	r3, [r7, #28]
          break;
 80087b6:	e00c      	b.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80087b8:	4b63      	ldr	r3, [pc, #396]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80087ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d107      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 80087c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ca:	61fb      	str	r3, [r7, #28]
          break;
 80087cc:	e003      	b.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80087ce:	bf00      	nop
 80087d0:	e1d0      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80087d2:	bf00      	nop
 80087d4:	e1ce      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80087d6:	bf00      	nop
        break;
 80087d8:	e1cc      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80087da:	4b5b      	ldr	r3, [pc, #364]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80087dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087e4:	613b      	str	r3, [r7, #16]
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ec:	d00c      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087f4:	d864      	bhi.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087fc:	d008      	beq.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008804:	d030      	beq.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8008806:	e05b      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008808:	f7ff f814 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 800880c:	61f8      	str	r0, [r7, #28]
          break;
 800880e:	e05c      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008810:	4b4d      	ldr	r3, [pc, #308]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800881c:	d152      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 800881e:	4b4a      	ldr	r3, [pc, #296]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d04c      	beq.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800882a:	4b47      	ldr	r3, [pc, #284]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	0a1b      	lsrs	r3, r3, #8
 8008830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008834:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	fb02 f203 	mul.w	r2, r2, r3
 800883e:	4b42      	ldr	r3, [pc, #264]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	091b      	lsrs	r3, r3, #4
 8008844:	f003 0307 	and.w	r3, r3, #7
 8008848:	3301      	adds	r3, #1
 800884a:	fbb2 f3f3 	udiv	r3, r2, r3
 800884e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8008850:	4b3d      	ldr	r3, [pc, #244]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	0e5b      	lsrs	r3, r3, #25
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	3301      	adds	r3, #1
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	fbb2 f3f3 	udiv	r3, r2, r3
 8008864:	61fb      	str	r3, [r7, #28]
          break;
 8008866:	e02d      	b.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8008868:	4b37      	ldr	r3, [pc, #220]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008874:	d128      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8008876:	4b34      	ldr	r3, [pc, #208]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d022      	beq.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008882:	4b31      	ldr	r3, [pc, #196]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	0a1b      	lsrs	r3, r3, #8
 8008888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	fb02 f203 	mul.w	r2, r2, r3
 8008896:	4b2c      	ldr	r3, [pc, #176]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	091b      	lsrs	r3, r3, #4
 800889c:	f003 0307 	and.w	r3, r3, #7
 80088a0:	3301      	adds	r3, #1
 80088a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80088a8:	4b27      	ldr	r3, [pc, #156]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	0e5b      	lsrs	r3, r3, #25
 80088ae:	f003 0303 	and.w	r3, r3, #3
 80088b2:	3301      	adds	r3, #1
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088bc:	61fb      	str	r3, [r7, #28]
          break;
 80088be:	e003      	b.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 80088c0:	bf00      	nop
 80088c2:	e157      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80088c4:	bf00      	nop
 80088c6:	e155      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80088c8:	bf00      	nop
        break;
 80088ca:	e153      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80088cc:	4b1e      	ldr	r3, [pc, #120]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80088ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088d6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d103      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 80088de:	f7ff f857 	bl	8007990 <HAL_RCC_GetPCLK2Freq>
 80088e2:	61f8      	str	r0, [r7, #28]
        break;
 80088e4:	e146      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 80088e6:	f7fe ffa5 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 80088ea:	61f8      	str	r0, [r7, #28]
        break;
 80088ec:	e142      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80088ee:	4b16      	ldr	r3, [pc, #88]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80088f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80088f8:	613b      	str	r3, [r7, #16]
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008900:	d013      	beq.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008908:	d819      	bhi.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d004      	beq.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008916:	d004      	beq.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8008918:	e011      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800891a:	f7ff f823 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 800891e:	61f8      	str	r0, [r7, #28]
          break;
 8008920:	e010      	b.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 8008922:	f7fe ff87 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 8008926:	61f8      	str	r0, [r7, #28]
          break;
 8008928:	e00c      	b.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800892a:	4b07      	ldr	r3, [pc, #28]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008936:	d104      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 8008938:	4b04      	ldr	r3, [pc, #16]	; (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800893a:	61fb      	str	r3, [r7, #28]
          break;
 800893c:	e001      	b.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 800893e:	bf00      	nop
 8008940:	e118      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8008942:	bf00      	nop
        break;
 8008944:	e116      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008946:	bf00      	nop
 8008948:	40021000 	.word	0x40021000
 800894c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008950:	4b8b      	ldr	r3, [pc, #556]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008956:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800895a:	613b      	str	r3, [r7, #16]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008962:	d013      	beq.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800896a:	d819      	bhi.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d004      	beq.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008978:	d004      	beq.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 800897a:	e011      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800897c:	f7fe fff2 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8008980:	61f8      	str	r0, [r7, #28]
          break;
 8008982:	e010      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8008984:	f7fe ff56 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 8008988:	61f8      	str	r0, [r7, #28]
          break;
 800898a:	e00c      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800898c:	4b7c      	ldr	r3, [pc, #496]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008998:	d104      	bne.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800899a:	4b7a      	ldr	r3, [pc, #488]	; (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800899c:	61fb      	str	r3, [r7, #28]
          break;
 800899e:	e001      	b.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80089a0:	bf00      	nop
 80089a2:	e0e7      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80089a4:	bf00      	nop
        break;
 80089a6:	e0e5      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80089a8:	4b75      	ldr	r3, [pc, #468]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80089b2:	613b      	str	r3, [r7, #16]
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ba:	d013      	beq.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089c2:	d819      	bhi.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d004      	beq.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d0:	d004      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 80089d2:	e011      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 80089d4:	f7fe ffc6 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 80089d8:	61f8      	str	r0, [r7, #28]
          break;
 80089da:	e010      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 80089dc:	f7fe ff2a 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 80089e0:	61f8      	str	r0, [r7, #28]
          break;
 80089e2:	e00c      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089e4:	4b66      	ldr	r3, [pc, #408]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089f0:	d104      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 80089f2:	4b64      	ldr	r3, [pc, #400]	; (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80089f4:	61fb      	str	r3, [r7, #28]
          break;
 80089f6:	e001      	b.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 80089f8:	bf00      	nop
 80089fa:	e0bb      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80089fc:	bf00      	nop
        break;
 80089fe:	e0b9      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008a00:	4b5f      	ldr	r3, [pc, #380]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a06:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008a0a:	613b      	str	r3, [r7, #16]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008a12:	d02c      	beq.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008a1a:	d833      	bhi.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a22:	d01a      	beq.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a2a:	d82b      	bhi.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d004      	beq.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a38:	d004      	beq.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 8008a3a:	e023      	b.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a3c:	f7fe ff92 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8008a40:	61f8      	str	r0, [r7, #28]
          break;
 8008a42:	e026      	b.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008a44:	4b4e      	ldr	r3, [pc, #312]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d11a      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 8008a52:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008a56:	61fb      	str	r3, [r7, #28]
          break;
 8008a58:	e016      	b.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a5a:	4b49      	ldr	r3, [pc, #292]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a66:	d111      	bne.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 8008a68:	4b46      	ldr	r3, [pc, #280]	; (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008a6a:	61fb      	str	r3, [r7, #28]
          break;
 8008a6c:	e00e      	b.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008a6e:	4b44      	ldr	r3, [pc, #272]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d109      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 8008a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a80:	61fb      	str	r3, [r7, #28]
          break;
 8008a82:	e005      	b.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8008a84:	bf00      	nop
 8008a86:	e075      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8008a88:	bf00      	nop
 8008a8a:	e073      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8008a8c:	bf00      	nop
 8008a8e:	e071      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8008a90:	bf00      	nop
        break;
 8008a92:	e06f      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008a94:	4b3a      	ldr	r3, [pc, #232]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008a9e:	613b      	str	r3, [r7, #16]
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aa6:	d02c      	beq.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aae:	d833      	bhi.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ab6:	d01a      	beq.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008abe:	d82b      	bhi.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008acc:	d004      	beq.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8008ace:	e023      	b.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ad0:	f7fe ff48 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8008ad4:	61f8      	str	r0, [r7, #28]
          break;
 8008ad6:	e026      	b.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008ad8:	4b29      	ldr	r3, [pc, #164]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ade:	f003 0302 	and.w	r3, r3, #2
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d11a      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8008ae6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008aea:	61fb      	str	r3, [r7, #28]
          break;
 8008aec:	e016      	b.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008aee:	4b24      	ldr	r3, [pc, #144]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008afa:	d111      	bne.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8008afc:	4b21      	ldr	r3, [pc, #132]	; (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008afe:	61fb      	str	r3, [r7, #28]
          break;
 8008b00:	e00e      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b02:	4b1f      	ldr	r3, [pc, #124]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d109      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8008b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b14:	61fb      	str	r3, [r7, #28]
          break;
 8008b16:	e005      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8008b18:	bf00      	nop
 8008b1a:	e02b      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8008b1c:	bf00      	nop
 8008b1e:	e029      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8008b20:	bf00      	nop
 8008b22:	e027      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8008b24:	bf00      	nop
        break;
 8008b26:	e025      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008b28:	4b15      	ldr	r3, [pc, #84]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d004      	beq.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b40:	d004      	beq.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 8008b42:	e00d      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b44:	f7fe ff0e 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8008b48:	61f8      	str	r0, [r7, #28]
          break;
 8008b4a:	e009      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b4c:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b58:	d101      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8008b5a:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008b5c:	61fb      	str	r3, [r7, #28]
          break;
 8008b5e:	bf00      	nop
        break;
 8008b60:	e008      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8008b62:	bf00      	nop
 8008b64:	e006      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8008b66:	bf00      	nop
 8008b68:	e004      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8008b6a:	bf00      	nop
 8008b6c:	e002      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8008b6e:	bf00      	nop
 8008b70:	e000      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8008b72:	bf00      	nop
    }
  }

  return(frequency);
 8008b74:	69fb      	ldr	r3, [r7, #28]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3720      	adds	r7, #32
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	40021000 	.word	0x40021000
 8008b84:	00f42400 	.word	0x00f42400

08008b88 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008b8c:	4b05      	ldr	r3, [pc, #20]	; (8008ba4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a04      	ldr	r2, [pc, #16]	; (8008ba4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008b92:	f043 0304 	orr.w	r3, r3, #4
 8008b96:	6013      	str	r3, [r2, #0]
}
 8008b98:	bf00      	nop
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	40021000 	.word	0x40021000

08008ba8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008bb6:	4b75      	ldr	r3, [pc, #468]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d018      	beq.n	8008bf4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008bc2:	4b72      	ldr	r3, [pc, #456]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	f003 0203 	and.w	r2, r3, #3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d10d      	bne.n	8008bee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
       ||
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008bda:	4b6c      	ldr	r3, [pc, #432]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	091b      	lsrs	r3, r3, #4
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
       ||
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d047      	beq.n	8008c7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	73fb      	strb	r3, [r7, #15]
 8008bf2:	e044      	b.n	8008c7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d018      	beq.n	8008c2e <RCCEx_PLLSAI1_Config+0x86>
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d825      	bhi.n	8008c4c <RCCEx_PLLSAI1_Config+0xa4>
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d002      	beq.n	8008c0a <RCCEx_PLLSAI1_Config+0x62>
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d009      	beq.n	8008c1c <RCCEx_PLLSAI1_Config+0x74>
 8008c08:	e020      	b.n	8008c4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008c0a:	4b60      	ldr	r3, [pc, #384]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d11d      	bne.n	8008c52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c1a:	e01a      	b.n	8008c52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008c1c:	4b5b      	ldr	r3, [pc, #364]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d116      	bne.n	8008c56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c2c:	e013      	b.n	8008c56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008c2e:	4b57      	ldr	r3, [pc, #348]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10f      	bne.n	8008c5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008c3a:	4b54      	ldr	r3, [pc, #336]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c4a:	e006      	b.n	8008c5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c50:	e004      	b.n	8008c5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c52:	bf00      	nop
 8008c54:	e002      	b.n	8008c5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c56:	bf00      	nop
 8008c58:	e000      	b.n	8008c5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10d      	bne.n	8008c7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008c62:	4b4a      	ldr	r3, [pc, #296]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6819      	ldr	r1, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	011b      	lsls	r3, r3, #4
 8008c76:	430b      	orrs	r3, r1
 8008c78:	4944      	ldr	r1, [pc, #272]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d17d      	bne.n	8008d80 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008c84:	4b41      	ldr	r3, [pc, #260]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a40      	ldr	r2, [pc, #256]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c90:	f7fc fefa 	bl	8005a88 <HAL_GetTick>
 8008c94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008c96:	e009      	b.n	8008cac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c98:	f7fc fef6 	bl	8005a88 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d902      	bls.n	8008cac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	73fb      	strb	r3, [r7, #15]
        break;
 8008caa:	e005      	b.n	8008cb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008cac:	4b37      	ldr	r3, [pc, #220]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1ef      	bne.n	8008c98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d160      	bne.n	8008d80 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d111      	bne.n	8008ce8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008cc4:	4b31      	ldr	r3, [pc, #196]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	6892      	ldr	r2, [r2, #8]
 8008cd4:	0211      	lsls	r1, r2, #8
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	68d2      	ldr	r2, [r2, #12]
 8008cda:	0912      	lsrs	r2, r2, #4
 8008cdc:	0452      	lsls	r2, r2, #17
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	492a      	ldr	r1, [pc, #168]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	610b      	str	r3, [r1, #16]
 8008ce6:	e027      	b.n	8008d38 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d112      	bne.n	8008d14 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008cee:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008cf6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	6892      	ldr	r2, [r2, #8]
 8008cfe:	0211      	lsls	r1, r2, #8
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	6912      	ldr	r2, [r2, #16]
 8008d04:	0852      	lsrs	r2, r2, #1
 8008d06:	3a01      	subs	r2, #1
 8008d08:	0552      	lsls	r2, r2, #21
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	491f      	ldr	r1, [pc, #124]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	610b      	str	r3, [r1, #16]
 8008d12:	e011      	b.n	8008d38 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d14:	4b1d      	ldr	r3, [pc, #116]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008d1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6892      	ldr	r2, [r2, #8]
 8008d24:	0211      	lsls	r1, r2, #8
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6952      	ldr	r2, [r2, #20]
 8008d2a:	0852      	lsrs	r2, r2, #1
 8008d2c:	3a01      	subs	r2, #1
 8008d2e:	0652      	lsls	r2, r2, #25
 8008d30:	430a      	orrs	r2, r1
 8008d32:	4916      	ldr	r1, [pc, #88]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008d38:	4b14      	ldr	r3, [pc, #80]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a13      	ldr	r2, [pc, #76]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d44:	f7fc fea0 	bl	8005a88 <HAL_GetTick>
 8008d48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008d4a:	e009      	b.n	8008d60 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d4c:	f7fc fe9c 	bl	8005a88 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d902      	bls.n	8008d60 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	73fb      	strb	r3, [r7, #15]
          break;
 8008d5e:	e005      	b.n	8008d6c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008d60:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0ef      	beq.n	8008d4c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008d72:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d74:	691a      	ldr	r2, [r3, #16]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	4904      	ldr	r1, [pc, #16]	; (8008d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	40021000 	.word	0x40021000

08008d90 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008d9e:	4b6a      	ldr	r3, [pc, #424]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d018      	beq.n	8008ddc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008daa:	4b67      	ldr	r3, [pc, #412]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f003 0203 	and.w	r2, r3, #3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d10d      	bne.n	8008dd6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
       ||
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d009      	beq.n	8008dd6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008dc2:	4b61      	ldr	r3, [pc, #388]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	091b      	lsrs	r3, r3, #4
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
       ||
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d047      	beq.n	8008e66 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	73fb      	strb	r3, [r7, #15]
 8008dda:	e044      	b.n	8008e66 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d018      	beq.n	8008e16 <RCCEx_PLLSAI2_Config+0x86>
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d825      	bhi.n	8008e34 <RCCEx_PLLSAI2_Config+0xa4>
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d002      	beq.n	8008df2 <RCCEx_PLLSAI2_Config+0x62>
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d009      	beq.n	8008e04 <RCCEx_PLLSAI2_Config+0x74>
 8008df0:	e020      	b.n	8008e34 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008df2:	4b55      	ldr	r3, [pc, #340]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d11d      	bne.n	8008e3a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e02:	e01a      	b.n	8008e3a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008e04:	4b50      	ldr	r3, [pc, #320]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d116      	bne.n	8008e3e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e14:	e013      	b.n	8008e3e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008e16:	4b4c      	ldr	r3, [pc, #304]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10f      	bne.n	8008e42 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008e22:	4b49      	ldr	r3, [pc, #292]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d109      	bne.n	8008e42 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e32:	e006      	b.n	8008e42 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	73fb      	strb	r3, [r7, #15]
      break;
 8008e38:	e004      	b.n	8008e44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008e3a:	bf00      	nop
 8008e3c:	e002      	b.n	8008e44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008e3e:	bf00      	nop
 8008e40:	e000      	b.n	8008e44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008e42:	bf00      	nop
    }

    if(status == HAL_OK)
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10d      	bne.n	8008e66 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008e4a:	4b3f      	ldr	r3, [pc, #252]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6819      	ldr	r1, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	011b      	lsls	r3, r3, #4
 8008e5e:	430b      	orrs	r3, r1
 8008e60:	4939      	ldr	r1, [pc, #228]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d167      	bne.n	8008f3c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008e6c:	4b36      	ldr	r3, [pc, #216]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a35      	ldr	r2, [pc, #212]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e78:	f7fc fe06 	bl	8005a88 <HAL_GetTick>
 8008e7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008e7e:	e009      	b.n	8008e94 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008e80:	f7fc fe02 	bl	8005a88 <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d902      	bls.n	8008e94 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	73fb      	strb	r3, [r7, #15]
        break;
 8008e92:	e005      	b.n	8008ea0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008e94:	4b2c      	ldr	r3, [pc, #176]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1ef      	bne.n	8008e80 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d14a      	bne.n	8008f3c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d111      	bne.n	8008ed0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008eac:	4b26      	ldr	r3, [pc, #152]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	6892      	ldr	r2, [r2, #8]
 8008ebc:	0211      	lsls	r1, r2, #8
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	68d2      	ldr	r2, [r2, #12]
 8008ec2:	0912      	lsrs	r2, r2, #4
 8008ec4:	0452      	lsls	r2, r2, #17
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	491f      	ldr	r1, [pc, #124]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	614b      	str	r3, [r1, #20]
 8008ece:	e011      	b.n	8008ef4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008ed0:	4b1d      	ldr	r3, [pc, #116]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008ed8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	6892      	ldr	r2, [r2, #8]
 8008ee0:	0211      	lsls	r1, r2, #8
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	6912      	ldr	r2, [r2, #16]
 8008ee6:	0852      	lsrs	r2, r2, #1
 8008ee8:	3a01      	subs	r2, #1
 8008eea:	0652      	lsls	r2, r2, #25
 8008eec:	430a      	orrs	r2, r1
 8008eee:	4916      	ldr	r1, [pc, #88]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008ef4:	4b14      	ldr	r3, [pc, #80]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a13      	ldr	r2, [pc, #76]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008efe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f00:	f7fc fdc2 	bl	8005a88 <HAL_GetTick>
 8008f04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008f06:	e009      	b.n	8008f1c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008f08:	f7fc fdbe 	bl	8005a88 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d902      	bls.n	8008f1c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	73fb      	strb	r3, [r7, #15]
          break;
 8008f1a:	e005      	b.n	8008f28 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008f1c:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d0ef      	beq.n	8008f08 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d106      	bne.n	8008f3c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008f2e:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f30:	695a      	ldr	r2, [r3, #20]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	4904      	ldr	r1, [pc, #16]	; (8008f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	40021000 	.word	0x40021000

08008f4c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b089      	sub	sp, #36	; 0x24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f68:	d10c      	bne.n	8008f84 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008f6a:	4b6e      	ldr	r3, [pc, #440]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f70:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008f74:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f7c:	d112      	bne.n	8008fa4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008f7e:	4b6a      	ldr	r3, [pc, #424]	; (8009128 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008f80:	61fb      	str	r3, [r7, #28]
 8008f82:	e00f      	b.n	8008fa4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f8a:	d10b      	bne.n	8008fa4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008f8c:	4b65      	ldr	r3, [pc, #404]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f92:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008f96:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f9e:	d101      	bne.n	8008fa4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008fa0:	4b61      	ldr	r3, [pc, #388]	; (8009128 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008fa2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f040 80b4 	bne.w	8009114 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fb6:	d003      	beq.n	8008fc0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fbe:	d135      	bne.n	800902c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008fc0:	4b58      	ldr	r3, [pc, #352]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fcc:	f040 80a1 	bne.w	8009112 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8008fd0:	4b54      	ldr	r3, [pc, #336]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f000 809a 	beq.w	8009112 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008fde:	4b51      	ldr	r3, [pc, #324]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	091b      	lsrs	r3, r3, #4
 8008fe4:	f003 0307 	and.w	r3, r3, #7
 8008fe8:	3301      	adds	r3, #1
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008ff2:	4b4c      	ldr	r3, [pc, #304]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	0a1b      	lsrs	r3, r3, #8
 8008ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009004:	4b47      	ldr	r3, [pc, #284]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8009010:	2311      	movs	r3, #17
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	e001      	b.n	800901a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8009016:	2307      	movs	r3, #7
 8009018:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	fb02 f203 	mul.w	r2, r2, r3
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	fbb2 f3f3 	udiv	r3, r2, r3
 8009028:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800902a:	e072      	b.n	8009112 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d133      	bne.n	800909a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8009032:	4b3c      	ldr	r3, [pc, #240]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800903a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800903e:	d169      	bne.n	8009114 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8009040:	4b38      	ldr	r3, [pc, #224]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d063      	beq.n	8009114 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800904c:	4b35      	ldr	r3, [pc, #212]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	091b      	lsrs	r3, r3, #4
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	3301      	adds	r3, #1
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	fbb2 f3f3 	udiv	r3, r2, r3
 800905e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009060:	4b30      	ldr	r3, [pc, #192]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	0a1b      	lsrs	r3, r3, #8
 8009066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800906a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10a      	bne.n	8009088 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8009072:	4b2c      	ldr	r3, [pc, #176]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800907e:	2311      	movs	r3, #17
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	e001      	b.n	8009088 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8009084:	2307      	movs	r3, #7
 8009086:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	fb02 f203 	mul.w	r2, r2, r3
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	fbb2 f3f3 	udiv	r3, r2, r3
 8009096:	61fb      	str	r3, [r7, #28]
 8009098:	e03c      	b.n	8009114 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090a0:	d003      	beq.n	80090aa <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090a8:	d134      	bne.n	8009114 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80090aa:	4b1e      	ldr	r3, [pc, #120]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090b6:	d12d      	bne.n	8009114 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80090b8:	4b1a      	ldr	r3, [pc, #104]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d027      	beq.n	8009114 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80090c4:	4b17      	ldr	r3, [pc, #92]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	091b      	lsrs	r3, r3, #4
 80090ca:	f003 0307 	and.w	r3, r3, #7
 80090ce:	3301      	adds	r3, #1
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80090d8:	4b12      	ldr	r3, [pc, #72]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	0a1b      	lsrs	r3, r3, #8
 80090de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80090ea:	4b0e      	ldr	r3, [pc, #56]	; (8009124 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80090f6:	2311      	movs	r3, #17
 80090f8:	617b      	str	r3, [r7, #20]
 80090fa:	e001      	b.n	8009100 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80090fc:	2307      	movs	r3, #7
 80090fe:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	fb02 f203 	mul.w	r2, r2, r3
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	fbb2 f3f3 	udiv	r3, r2, r3
 800910e:	61fb      	str	r3, [r7, #28]
 8009110:	e000      	b.n	8009114 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009112:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8009114:	69fb      	ldr	r3, [r7, #28]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3724      	adds	r7, #36	; 0x24
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	40021000 	.word	0x40021000
 8009128:	001fff68 	.word	0x001fff68

0800912c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e095      	b.n	800926a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	2b00      	cmp	r3, #0
 8009144:	d108      	bne.n	8009158 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800914e:	d009      	beq.n	8009164 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	61da      	str	r2, [r3, #28]
 8009156:	e005      	b.n	8009164 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7f8 fce8 	bl	8001b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800919a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091a4:	d902      	bls.n	80091ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	e002      	b.n	80091b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80091ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80091ba:	d007      	beq.n	80091cc <HAL_SPI_Init+0xa0>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091c4:	d002      	beq.n	80091cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80091dc:	431a      	orrs	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	431a      	orrs	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	431a      	orrs	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009204:	431a      	orrs	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920e:	ea42 0103 	orr.w	r1, r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	0c1b      	lsrs	r3, r3, #16
 8009228:	f003 0204 	and.w	r2, r3, #4
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	f003 0310 	and.w	r3, r3, #16
 8009234:	431a      	orrs	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923a:	f003 0308 	and.w	r3, r3, #8
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009248:	ea42 0103 	orr.w	r1, r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b082      	sub	sp, #8
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e049      	b.n	8009318 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	d106      	bne.n	800929e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f841 	bl	8009320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2202      	movs	r2, #2
 80092a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	3304      	adds	r3, #4
 80092ae:	4619      	mov	r1, r3
 80092b0:	4610      	mov	r0, r2
 80092b2:	f000 f9f7 	bl	80096a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	d001      	beq.n	800934c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e04f      	b.n	80093ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68da      	ldr	r2, [r3, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f042 0201 	orr.w	r2, r2, #1
 8009362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a23      	ldr	r2, [pc, #140]	; (80093f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d01d      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009376:	d018      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1f      	ldr	r2, [pc, #124]	; (80093fc <HAL_TIM_Base_Start_IT+0xc8>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d013      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1e      	ldr	r2, [pc, #120]	; (8009400 <HAL_TIM_Base_Start_IT+0xcc>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00e      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1c      	ldr	r2, [pc, #112]	; (8009404 <HAL_TIM_Base_Start_IT+0xd0>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d009      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1b      	ldr	r2, [pc, #108]	; (8009408 <HAL_TIM_Base_Start_IT+0xd4>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d004      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a19      	ldr	r2, [pc, #100]	; (800940c <HAL_TIM_Base_Start_IT+0xd8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d115      	bne.n	80093d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	4b17      	ldr	r3, [pc, #92]	; (8009410 <HAL_TIM_Base_Start_IT+0xdc>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b06      	cmp	r3, #6
 80093ba:	d015      	beq.n	80093e8 <HAL_TIM_Base_Start_IT+0xb4>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093c2:	d011      	beq.n	80093e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0201 	orr.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093d4:	e008      	b.n	80093e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f042 0201 	orr.w	r2, r2, #1
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	e000      	b.n	80093ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	40012c00 	.word	0x40012c00
 80093fc:	40000400 	.word	0x40000400
 8009400:	40000800 	.word	0x40000800
 8009404:	40000c00 	.word	0x40000c00
 8009408:	40013400 	.word	0x40013400
 800940c:	40014000 	.word	0x40014000
 8009410:	00010007 	.word	0x00010007

08009414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	2b02      	cmp	r3, #2
 8009428:	d122      	bne.n	8009470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b02      	cmp	r3, #2
 8009436:	d11b      	bne.n	8009470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f06f 0202 	mvn.w	r2, #2
 8009440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	f003 0303 	and.w	r3, r3, #3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f905 	bl	8009666 <HAL_TIM_IC_CaptureCallback>
 800945c:	e005      	b.n	800946a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f8f7 	bl	8009652 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f908 	bl	800967a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f003 0304 	and.w	r3, r3, #4
 800947a:	2b04      	cmp	r3, #4
 800947c:	d122      	bne.n	80094c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b04      	cmp	r3, #4
 800948a:	d11b      	bne.n	80094c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f06f 0204 	mvn.w	r2, #4
 8009494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2202      	movs	r2, #2
 800949a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d003      	beq.n	80094b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f8db 	bl	8009666 <HAL_TIM_IC_CaptureCallback>
 80094b0:	e005      	b.n	80094be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f8cd 	bl	8009652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f8de 	bl	800967a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f003 0308 	and.w	r3, r3, #8
 80094ce:	2b08      	cmp	r3, #8
 80094d0:	d122      	bne.n	8009518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f003 0308 	and.w	r3, r3, #8
 80094dc:	2b08      	cmp	r3, #8
 80094de:	d11b      	bne.n	8009518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f06f 0208 	mvn.w	r2, #8
 80094e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2204      	movs	r2, #4
 80094ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	f003 0303 	and.w	r3, r3, #3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f8b1 	bl	8009666 <HAL_TIM_IC_CaptureCallback>
 8009504:	e005      	b.n	8009512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f8a3 	bl	8009652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f8b4 	bl	800967a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	f003 0310 	and.w	r3, r3, #16
 8009522:	2b10      	cmp	r3, #16
 8009524:	d122      	bne.n	800956c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	f003 0310 	and.w	r3, r3, #16
 8009530:	2b10      	cmp	r3, #16
 8009532:	d11b      	bne.n	800956c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f06f 0210 	mvn.w	r2, #16
 800953c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2208      	movs	r2, #8
 8009542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f887 	bl	8009666 <HAL_TIM_IC_CaptureCallback>
 8009558:	e005      	b.n	8009566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f879 	bl	8009652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f88a 	bl	800967a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b01      	cmp	r3, #1
 8009578:	d10e      	bne.n	8009598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	2b01      	cmp	r3, #1
 8009586:	d107      	bne.n	8009598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f06f 0201 	mvn.w	r2, #1
 8009590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7f8 fa1c 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a2:	2b80      	cmp	r3, #128	; 0x80
 80095a4:	d10e      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b0:	2b80      	cmp	r3, #128	; 0x80
 80095b2:	d107      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f914 	bl	80097ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095d2:	d10e      	bne.n	80095f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095de:	2b80      	cmp	r3, #128	; 0x80
 80095e0:	d107      	bne.n	80095f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f907 	bl	8009800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fc:	2b40      	cmp	r3, #64	; 0x40
 80095fe:	d10e      	bne.n	800961e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960a:	2b40      	cmp	r3, #64	; 0x40
 800960c:	d107      	bne.n	800961e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f838 	bl	800968e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b20      	cmp	r3, #32
 800962a:	d10e      	bne.n	800964a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	f003 0320 	and.w	r3, r3, #32
 8009636:	2b20      	cmp	r3, #32
 8009638:	d107      	bne.n	800964a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f06f 0220 	mvn.w	r2, #32
 8009642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f8c7 	bl	80097d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800964a:	bf00      	nop
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800965a:	bf00      	nop
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800966e:	bf00      	nop
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009682:	bf00      	nop
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009696:	bf00      	nop
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
	...

080096a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a40      	ldr	r2, [pc, #256]	; (80097b8 <TIM_Base_SetConfig+0x114>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d013      	beq.n	80096e4 <TIM_Base_SetConfig+0x40>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c2:	d00f      	beq.n	80096e4 <TIM_Base_SetConfig+0x40>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a3d      	ldr	r2, [pc, #244]	; (80097bc <TIM_Base_SetConfig+0x118>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d00b      	beq.n	80096e4 <TIM_Base_SetConfig+0x40>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a3c      	ldr	r2, [pc, #240]	; (80097c0 <TIM_Base_SetConfig+0x11c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d007      	beq.n	80096e4 <TIM_Base_SetConfig+0x40>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a3b      	ldr	r2, [pc, #236]	; (80097c4 <TIM_Base_SetConfig+0x120>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d003      	beq.n	80096e4 <TIM_Base_SetConfig+0x40>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a3a      	ldr	r2, [pc, #232]	; (80097c8 <TIM_Base_SetConfig+0x124>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d108      	bne.n	80096f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a2f      	ldr	r2, [pc, #188]	; (80097b8 <TIM_Base_SetConfig+0x114>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d01f      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009704:	d01b      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a2c      	ldr	r2, [pc, #176]	; (80097bc <TIM_Base_SetConfig+0x118>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d017      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a2b      	ldr	r2, [pc, #172]	; (80097c0 <TIM_Base_SetConfig+0x11c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d013      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a2a      	ldr	r2, [pc, #168]	; (80097c4 <TIM_Base_SetConfig+0x120>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00f      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a29      	ldr	r2, [pc, #164]	; (80097c8 <TIM_Base_SetConfig+0x124>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d00b      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a28      	ldr	r2, [pc, #160]	; (80097cc <TIM_Base_SetConfig+0x128>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d007      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a27      	ldr	r2, [pc, #156]	; (80097d0 <TIM_Base_SetConfig+0x12c>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d003      	beq.n	800973e <TIM_Base_SetConfig+0x9a>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a26      	ldr	r2, [pc, #152]	; (80097d4 <TIM_Base_SetConfig+0x130>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d108      	bne.n	8009750 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	4313      	orrs	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	689a      	ldr	r2, [r3, #8]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a10      	ldr	r2, [pc, #64]	; (80097b8 <TIM_Base_SetConfig+0x114>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00f      	beq.n	800979c <TIM_Base_SetConfig+0xf8>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a12      	ldr	r2, [pc, #72]	; (80097c8 <TIM_Base_SetConfig+0x124>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d00b      	beq.n	800979c <TIM_Base_SetConfig+0xf8>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a11      	ldr	r2, [pc, #68]	; (80097cc <TIM_Base_SetConfig+0x128>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d007      	beq.n	800979c <TIM_Base_SetConfig+0xf8>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a10      	ldr	r2, [pc, #64]	; (80097d0 <TIM_Base_SetConfig+0x12c>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d003      	beq.n	800979c <TIM_Base_SetConfig+0xf8>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a0f      	ldr	r2, [pc, #60]	; (80097d4 <TIM_Base_SetConfig+0x130>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d103      	bne.n	80097a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	691a      	ldr	r2, [r3, #16]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	615a      	str	r2, [r3, #20]
}
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	40012c00 	.word	0x40012c00
 80097bc:	40000400 	.word	0x40000400
 80097c0:	40000800 	.word	0x40000800
 80097c4:	40000c00 	.word	0x40000c00
 80097c8:	40013400 	.word	0x40013400
 80097cc:	40014000 	.word	0x40014000
 80097d0:	40014400 	.word	0x40014400
 80097d4:	40014800 	.word	0x40014800

080097d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e040      	b.n	80098a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800982a:	2b00      	cmp	r3, #0
 800982c:	d106      	bne.n	800983c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7f8 f9d0 	bl	8001bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2224      	movs	r2, #36	; 0x24
 8009840:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0201 	bic.w	r2, r2, #1
 8009850:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f8c0 	bl	80099d8 <UART_SetConfig>
 8009858:	4603      	mov	r3, r0
 800985a:	2b01      	cmp	r3, #1
 800985c:	d101      	bne.n	8009862 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e022      	b.n	80098a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fb3e 	bl	8009eec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800987e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	689a      	ldr	r2, [r3, #8]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800988e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0201 	orr.w	r2, r2, #1
 800989e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fbc5 	bl	800a030 <UART_CheckIdleState>
 80098a6:	4603      	mov	r3, r0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08a      	sub	sp, #40	; 0x28
 80098b4:	af02      	add	r7, sp, #8
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	4613      	mov	r3, r2
 80098be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098c4:	2b20      	cmp	r3, #32
 80098c6:	f040 8082 	bne.w	80099ce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <HAL_UART_Transmit+0x26>
 80098d0:	88fb      	ldrh	r3, [r7, #6]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e07a      	b.n	80099d0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d101      	bne.n	80098e8 <HAL_UART_Transmit+0x38>
 80098e4:	2302      	movs	r3, #2
 80098e6:	e073      	b.n	80099d0 <HAL_UART_Transmit+0x120>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2221      	movs	r2, #33	; 0x21
 80098fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098fe:	f7fc f8c3 	bl	8005a88 <HAL_GetTick>
 8009902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	88fa      	ldrh	r2, [r7, #6]
 8009908:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	88fa      	ldrh	r2, [r7, #6]
 8009910:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991c:	d108      	bne.n	8009930 <HAL_UART_Transmit+0x80>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d104      	bne.n	8009930 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009926:	2300      	movs	r3, #0
 8009928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	61bb      	str	r3, [r7, #24]
 800992e:	e003      	b.n	8009938 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009934:	2300      	movs	r3, #0
 8009936:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009940:	e02d      	b.n	800999e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2200      	movs	r2, #0
 800994a:	2180      	movs	r1, #128	; 0x80
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 fbb8 	bl	800a0c2 <UART_WaitOnFlagUntilTimeout>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	e039      	b.n	80099d0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10b      	bne.n	800997a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	881a      	ldrh	r2, [r3, #0]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800996e:	b292      	uxth	r2, r2
 8009970:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	3302      	adds	r3, #2
 8009976:	61bb      	str	r3, [r7, #24]
 8009978:	e008      	b.n	800998c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	781a      	ldrb	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	b292      	uxth	r2, r2
 8009984:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	3301      	adds	r3, #1
 800998a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009992:	b29b      	uxth	r3, r3
 8009994:	3b01      	subs	r3, #1
 8009996:	b29a      	uxth	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1cb      	bne.n	8009942 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2200      	movs	r2, #0
 80099b2:	2140      	movs	r1, #64	; 0x40
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 fb84 	bl	800a0c2 <UART_WaitOnFlagUntilTimeout>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e005      	b.n	80099d0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2220      	movs	r2, #32
 80099c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	e000      	b.n	80099d0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80099ce:	2302      	movs	r3, #2
  }
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3720      	adds	r7, #32
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099d8:	b5b0      	push	{r4, r5, r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	431a      	orrs	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	431a      	orrs	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4bad      	ldr	r3, [pc, #692]	; (8009cb8 <UART_SetConfig+0x2e0>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	6812      	ldr	r2, [r2, #0]
 8009a0a:	69f9      	ldr	r1, [r7, #28]
 8009a0c:	430b      	orrs	r3, r1
 8009a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4aa2      	ldr	r2, [pc, #648]	; (8009cbc <UART_SetConfig+0x2e4>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d004      	beq.n	8009a40 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	69fa      	ldr	r2, [r7, #28]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	430a      	orrs	r2, r1
 8009a52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a99      	ldr	r2, [pc, #612]	; (8009cc0 <UART_SetConfig+0x2e8>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d121      	bne.n	8009aa2 <UART_SetConfig+0xca>
 8009a5e:	4b99      	ldr	r3, [pc, #612]	; (8009cc4 <UART_SetConfig+0x2ec>)
 8009a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a64:	f003 0303 	and.w	r3, r3, #3
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d817      	bhi.n	8009a9c <UART_SetConfig+0xc4>
 8009a6c:	a201      	add	r2, pc, #4	; (adr r2, 8009a74 <UART_SetConfig+0x9c>)
 8009a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a72:	bf00      	nop
 8009a74:	08009a85 	.word	0x08009a85
 8009a78:	08009a91 	.word	0x08009a91
 8009a7c:	08009a8b 	.word	0x08009a8b
 8009a80:	08009a97 	.word	0x08009a97
 8009a84:	2301      	movs	r3, #1
 8009a86:	76fb      	strb	r3, [r7, #27]
 8009a88:	e0e7      	b.n	8009c5a <UART_SetConfig+0x282>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	76fb      	strb	r3, [r7, #27]
 8009a8e:	e0e4      	b.n	8009c5a <UART_SetConfig+0x282>
 8009a90:	2304      	movs	r3, #4
 8009a92:	76fb      	strb	r3, [r7, #27]
 8009a94:	e0e1      	b.n	8009c5a <UART_SetConfig+0x282>
 8009a96:	2308      	movs	r3, #8
 8009a98:	76fb      	strb	r3, [r7, #27]
 8009a9a:	e0de      	b.n	8009c5a <UART_SetConfig+0x282>
 8009a9c:	2310      	movs	r3, #16
 8009a9e:	76fb      	strb	r3, [r7, #27]
 8009aa0:	e0db      	b.n	8009c5a <UART_SetConfig+0x282>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a88      	ldr	r2, [pc, #544]	; (8009cc8 <UART_SetConfig+0x2f0>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d132      	bne.n	8009b12 <UART_SetConfig+0x13a>
 8009aac:	4b85      	ldr	r3, [pc, #532]	; (8009cc4 <UART_SetConfig+0x2ec>)
 8009aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab2:	f003 030c 	and.w	r3, r3, #12
 8009ab6:	2b0c      	cmp	r3, #12
 8009ab8:	d828      	bhi.n	8009b0c <UART_SetConfig+0x134>
 8009aba:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <UART_SetConfig+0xe8>)
 8009abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac0:	08009af5 	.word	0x08009af5
 8009ac4:	08009b0d 	.word	0x08009b0d
 8009ac8:	08009b0d 	.word	0x08009b0d
 8009acc:	08009b0d 	.word	0x08009b0d
 8009ad0:	08009b01 	.word	0x08009b01
 8009ad4:	08009b0d 	.word	0x08009b0d
 8009ad8:	08009b0d 	.word	0x08009b0d
 8009adc:	08009b0d 	.word	0x08009b0d
 8009ae0:	08009afb 	.word	0x08009afb
 8009ae4:	08009b0d 	.word	0x08009b0d
 8009ae8:	08009b0d 	.word	0x08009b0d
 8009aec:	08009b0d 	.word	0x08009b0d
 8009af0:	08009b07 	.word	0x08009b07
 8009af4:	2300      	movs	r3, #0
 8009af6:	76fb      	strb	r3, [r7, #27]
 8009af8:	e0af      	b.n	8009c5a <UART_SetConfig+0x282>
 8009afa:	2302      	movs	r3, #2
 8009afc:	76fb      	strb	r3, [r7, #27]
 8009afe:	e0ac      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b00:	2304      	movs	r3, #4
 8009b02:	76fb      	strb	r3, [r7, #27]
 8009b04:	e0a9      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b06:	2308      	movs	r3, #8
 8009b08:	76fb      	strb	r3, [r7, #27]
 8009b0a:	e0a6      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	76fb      	strb	r3, [r7, #27]
 8009b10:	e0a3      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a6d      	ldr	r2, [pc, #436]	; (8009ccc <UART_SetConfig+0x2f4>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d120      	bne.n	8009b5e <UART_SetConfig+0x186>
 8009b1c:	4b69      	ldr	r3, [pc, #420]	; (8009cc4 <UART_SetConfig+0x2ec>)
 8009b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b26:	2b30      	cmp	r3, #48	; 0x30
 8009b28:	d013      	beq.n	8009b52 <UART_SetConfig+0x17a>
 8009b2a:	2b30      	cmp	r3, #48	; 0x30
 8009b2c:	d814      	bhi.n	8009b58 <UART_SetConfig+0x180>
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	d009      	beq.n	8009b46 <UART_SetConfig+0x16e>
 8009b32:	2b20      	cmp	r3, #32
 8009b34:	d810      	bhi.n	8009b58 <UART_SetConfig+0x180>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <UART_SetConfig+0x168>
 8009b3a:	2b10      	cmp	r3, #16
 8009b3c:	d006      	beq.n	8009b4c <UART_SetConfig+0x174>
 8009b3e:	e00b      	b.n	8009b58 <UART_SetConfig+0x180>
 8009b40:	2300      	movs	r3, #0
 8009b42:	76fb      	strb	r3, [r7, #27]
 8009b44:	e089      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b46:	2302      	movs	r3, #2
 8009b48:	76fb      	strb	r3, [r7, #27]
 8009b4a:	e086      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	76fb      	strb	r3, [r7, #27]
 8009b50:	e083      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b52:	2308      	movs	r3, #8
 8009b54:	76fb      	strb	r3, [r7, #27]
 8009b56:	e080      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	76fb      	strb	r3, [r7, #27]
 8009b5c:	e07d      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a5b      	ldr	r2, [pc, #364]	; (8009cd0 <UART_SetConfig+0x2f8>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d120      	bne.n	8009baa <UART_SetConfig+0x1d2>
 8009b68:	4b56      	ldr	r3, [pc, #344]	; (8009cc4 <UART_SetConfig+0x2ec>)
 8009b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b72:	2bc0      	cmp	r3, #192	; 0xc0
 8009b74:	d013      	beq.n	8009b9e <UART_SetConfig+0x1c6>
 8009b76:	2bc0      	cmp	r3, #192	; 0xc0
 8009b78:	d814      	bhi.n	8009ba4 <UART_SetConfig+0x1cc>
 8009b7a:	2b80      	cmp	r3, #128	; 0x80
 8009b7c:	d009      	beq.n	8009b92 <UART_SetConfig+0x1ba>
 8009b7e:	2b80      	cmp	r3, #128	; 0x80
 8009b80:	d810      	bhi.n	8009ba4 <UART_SetConfig+0x1cc>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <UART_SetConfig+0x1b4>
 8009b86:	2b40      	cmp	r3, #64	; 0x40
 8009b88:	d006      	beq.n	8009b98 <UART_SetConfig+0x1c0>
 8009b8a:	e00b      	b.n	8009ba4 <UART_SetConfig+0x1cc>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	76fb      	strb	r3, [r7, #27]
 8009b90:	e063      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b92:	2302      	movs	r3, #2
 8009b94:	76fb      	strb	r3, [r7, #27]
 8009b96:	e060      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b98:	2304      	movs	r3, #4
 8009b9a:	76fb      	strb	r3, [r7, #27]
 8009b9c:	e05d      	b.n	8009c5a <UART_SetConfig+0x282>
 8009b9e:	2308      	movs	r3, #8
 8009ba0:	76fb      	strb	r3, [r7, #27]
 8009ba2:	e05a      	b.n	8009c5a <UART_SetConfig+0x282>
 8009ba4:	2310      	movs	r3, #16
 8009ba6:	76fb      	strb	r3, [r7, #27]
 8009ba8:	e057      	b.n	8009c5a <UART_SetConfig+0x282>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a49      	ldr	r2, [pc, #292]	; (8009cd4 <UART_SetConfig+0x2fc>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d125      	bne.n	8009c00 <UART_SetConfig+0x228>
 8009bb4:	4b43      	ldr	r3, [pc, #268]	; (8009cc4 <UART_SetConfig+0x2ec>)
 8009bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bc2:	d017      	beq.n	8009bf4 <UART_SetConfig+0x21c>
 8009bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bc8:	d817      	bhi.n	8009bfa <UART_SetConfig+0x222>
 8009bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bce:	d00b      	beq.n	8009be8 <UART_SetConfig+0x210>
 8009bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bd4:	d811      	bhi.n	8009bfa <UART_SetConfig+0x222>
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <UART_SetConfig+0x20a>
 8009bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bde:	d006      	beq.n	8009bee <UART_SetConfig+0x216>
 8009be0:	e00b      	b.n	8009bfa <UART_SetConfig+0x222>
 8009be2:	2300      	movs	r3, #0
 8009be4:	76fb      	strb	r3, [r7, #27]
 8009be6:	e038      	b.n	8009c5a <UART_SetConfig+0x282>
 8009be8:	2302      	movs	r3, #2
 8009bea:	76fb      	strb	r3, [r7, #27]
 8009bec:	e035      	b.n	8009c5a <UART_SetConfig+0x282>
 8009bee:	2304      	movs	r3, #4
 8009bf0:	76fb      	strb	r3, [r7, #27]
 8009bf2:	e032      	b.n	8009c5a <UART_SetConfig+0x282>
 8009bf4:	2308      	movs	r3, #8
 8009bf6:	76fb      	strb	r3, [r7, #27]
 8009bf8:	e02f      	b.n	8009c5a <UART_SetConfig+0x282>
 8009bfa:	2310      	movs	r3, #16
 8009bfc:	76fb      	strb	r3, [r7, #27]
 8009bfe:	e02c      	b.n	8009c5a <UART_SetConfig+0x282>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a2d      	ldr	r2, [pc, #180]	; (8009cbc <UART_SetConfig+0x2e4>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d125      	bne.n	8009c56 <UART_SetConfig+0x27e>
 8009c0a:	4b2e      	ldr	r3, [pc, #184]	; (8009cc4 <UART_SetConfig+0x2ec>)
 8009c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009c14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c18:	d017      	beq.n	8009c4a <UART_SetConfig+0x272>
 8009c1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c1e:	d817      	bhi.n	8009c50 <UART_SetConfig+0x278>
 8009c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c24:	d00b      	beq.n	8009c3e <UART_SetConfig+0x266>
 8009c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c2a:	d811      	bhi.n	8009c50 <UART_SetConfig+0x278>
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <UART_SetConfig+0x260>
 8009c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c34:	d006      	beq.n	8009c44 <UART_SetConfig+0x26c>
 8009c36:	e00b      	b.n	8009c50 <UART_SetConfig+0x278>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	76fb      	strb	r3, [r7, #27]
 8009c3c:	e00d      	b.n	8009c5a <UART_SetConfig+0x282>
 8009c3e:	2302      	movs	r3, #2
 8009c40:	76fb      	strb	r3, [r7, #27]
 8009c42:	e00a      	b.n	8009c5a <UART_SetConfig+0x282>
 8009c44:	2304      	movs	r3, #4
 8009c46:	76fb      	strb	r3, [r7, #27]
 8009c48:	e007      	b.n	8009c5a <UART_SetConfig+0x282>
 8009c4a:	2308      	movs	r3, #8
 8009c4c:	76fb      	strb	r3, [r7, #27]
 8009c4e:	e004      	b.n	8009c5a <UART_SetConfig+0x282>
 8009c50:	2310      	movs	r3, #16
 8009c52:	76fb      	strb	r3, [r7, #27]
 8009c54:	e001      	b.n	8009c5a <UART_SetConfig+0x282>
 8009c56:	2310      	movs	r3, #16
 8009c58:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a17      	ldr	r2, [pc, #92]	; (8009cbc <UART_SetConfig+0x2e4>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	f040 8087 	bne.w	8009d74 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c66:	7efb      	ldrb	r3, [r7, #27]
 8009c68:	2b08      	cmp	r3, #8
 8009c6a:	d837      	bhi.n	8009cdc <UART_SetConfig+0x304>
 8009c6c:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <UART_SetConfig+0x29c>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009c99 	.word	0x08009c99
 8009c78:	08009cdd 	.word	0x08009cdd
 8009c7c:	08009ca1 	.word	0x08009ca1
 8009c80:	08009cdd 	.word	0x08009cdd
 8009c84:	08009ca7 	.word	0x08009ca7
 8009c88:	08009cdd 	.word	0x08009cdd
 8009c8c:	08009cdd 	.word	0x08009cdd
 8009c90:	08009cdd 	.word	0x08009cdd
 8009c94:	08009caf 	.word	0x08009caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c98:	f7fd fe64 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8009c9c:	6178      	str	r0, [r7, #20]
        break;
 8009c9e:	e022      	b.n	8009ce6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ca0:	4b0d      	ldr	r3, [pc, #52]	; (8009cd8 <UART_SetConfig+0x300>)
 8009ca2:	617b      	str	r3, [r7, #20]
        break;
 8009ca4:	e01f      	b.n	8009ce6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ca6:	f7fd fdc5 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 8009caa:	6178      	str	r0, [r7, #20]
        break;
 8009cac:	e01b      	b.n	8009ce6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cb2:	617b      	str	r3, [r7, #20]
        break;
 8009cb4:	e017      	b.n	8009ce6 <UART_SetConfig+0x30e>
 8009cb6:	bf00      	nop
 8009cb8:	efff69f3 	.word	0xefff69f3
 8009cbc:	40008000 	.word	0x40008000
 8009cc0:	40013800 	.word	0x40013800
 8009cc4:	40021000 	.word	0x40021000
 8009cc8:	40004400 	.word	0x40004400
 8009ccc:	40004800 	.word	0x40004800
 8009cd0:	40004c00 	.word	0x40004c00
 8009cd4:	40005000 	.word	0x40005000
 8009cd8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	76bb      	strb	r3, [r7, #26]
        break;
 8009ce4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 80f1 	beq.w	8009ed0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	4413      	add	r3, r2
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d305      	bcc.n	8009d0a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d902      	bls.n	8009d10 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	76bb      	strb	r3, [r7, #26]
 8009d0e:	e0df      	b.n	8009ed0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f04f 0100 	mov.w	r1, #0
 8009d18:	f04f 0200 	mov.w	r2, #0
 8009d1c:	f04f 0300 	mov.w	r3, #0
 8009d20:	020b      	lsls	r3, r1, #8
 8009d22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d26:	0202      	lsls	r2, r0, #8
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	6849      	ldr	r1, [r1, #4]
 8009d2c:	0849      	lsrs	r1, r1, #1
 8009d2e:	4608      	mov	r0, r1
 8009d30:	f04f 0100 	mov.w	r1, #0
 8009d34:	1814      	adds	r4, r2, r0
 8009d36:	eb43 0501 	adc.w	r5, r3, r1
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f04f 0300 	mov.w	r3, #0
 8009d44:	4620      	mov	r0, r4
 8009d46:	4629      	mov	r1, r5
 8009d48:	f7f6 ff2e 	bl	8000ba8 <__aeabi_uldivmod>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4613      	mov	r3, r2
 8009d52:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d5a:	d308      	bcc.n	8009d6e <UART_SetConfig+0x396>
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d62:	d204      	bcs.n	8009d6e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	60da      	str	r2, [r3, #12]
 8009d6c:	e0b0      	b.n	8009ed0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	76bb      	strb	r3, [r7, #26]
 8009d72:	e0ad      	b.n	8009ed0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d7c:	d15c      	bne.n	8009e38 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8009d7e:	7efb      	ldrb	r3, [r7, #27]
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d828      	bhi.n	8009dd6 <UART_SetConfig+0x3fe>
 8009d84:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <UART_SetConfig+0x3b4>)
 8009d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8a:	bf00      	nop
 8009d8c:	08009db1 	.word	0x08009db1
 8009d90:	08009db9 	.word	0x08009db9
 8009d94:	08009dc1 	.word	0x08009dc1
 8009d98:	08009dd7 	.word	0x08009dd7
 8009d9c:	08009dc7 	.word	0x08009dc7
 8009da0:	08009dd7 	.word	0x08009dd7
 8009da4:	08009dd7 	.word	0x08009dd7
 8009da8:	08009dd7 	.word	0x08009dd7
 8009dac:	08009dcf 	.word	0x08009dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009db0:	f7fd fdd8 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8009db4:	6178      	str	r0, [r7, #20]
        break;
 8009db6:	e013      	b.n	8009de0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009db8:	f7fd fdea 	bl	8007990 <HAL_RCC_GetPCLK2Freq>
 8009dbc:	6178      	str	r0, [r7, #20]
        break;
 8009dbe:	e00f      	b.n	8009de0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dc0:	4b49      	ldr	r3, [pc, #292]	; (8009ee8 <UART_SetConfig+0x510>)
 8009dc2:	617b      	str	r3, [r7, #20]
        break;
 8009dc4:	e00c      	b.n	8009de0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dc6:	f7fd fd35 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 8009dca:	6178      	str	r0, [r7, #20]
        break;
 8009dcc:	e008      	b.n	8009de0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dd2:	617b      	str	r3, [r7, #20]
        break;
 8009dd4:	e004      	b.n	8009de0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	76bb      	strb	r3, [r7, #26]
        break;
 8009dde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d074      	beq.n	8009ed0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	005a      	lsls	r2, r3, #1
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	085b      	lsrs	r3, r3, #1
 8009df0:	441a      	add	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b0f      	cmp	r3, #15
 8009e02:	d916      	bls.n	8009e32 <UART_SetConfig+0x45a>
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e0a:	d212      	bcs.n	8009e32 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	f023 030f 	bic.w	r3, r3, #15
 8009e14:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	085b      	lsrs	r3, r3, #1
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f003 0307 	and.w	r3, r3, #7
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	89fb      	ldrh	r3, [r7, #14]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	89fa      	ldrh	r2, [r7, #14]
 8009e2e:	60da      	str	r2, [r3, #12]
 8009e30:	e04e      	b.n	8009ed0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	76bb      	strb	r3, [r7, #26]
 8009e36:	e04b      	b.n	8009ed0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e38:	7efb      	ldrb	r3, [r7, #27]
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d827      	bhi.n	8009e8e <UART_SetConfig+0x4b6>
 8009e3e:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <UART_SetConfig+0x46c>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e69 	.word	0x08009e69
 8009e48:	08009e71 	.word	0x08009e71
 8009e4c:	08009e79 	.word	0x08009e79
 8009e50:	08009e8f 	.word	0x08009e8f
 8009e54:	08009e7f 	.word	0x08009e7f
 8009e58:	08009e8f 	.word	0x08009e8f
 8009e5c:	08009e8f 	.word	0x08009e8f
 8009e60:	08009e8f 	.word	0x08009e8f
 8009e64:	08009e87 	.word	0x08009e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e68:	f7fd fd7c 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8009e6c:	6178      	str	r0, [r7, #20]
        break;
 8009e6e:	e013      	b.n	8009e98 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e70:	f7fd fd8e 	bl	8007990 <HAL_RCC_GetPCLK2Freq>
 8009e74:	6178      	str	r0, [r7, #20]
        break;
 8009e76:	e00f      	b.n	8009e98 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e78:	4b1b      	ldr	r3, [pc, #108]	; (8009ee8 <UART_SetConfig+0x510>)
 8009e7a:	617b      	str	r3, [r7, #20]
        break;
 8009e7c:	e00c      	b.n	8009e98 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e7e:	f7fd fcd9 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 8009e82:	6178      	str	r0, [r7, #20]
        break;
 8009e84:	e008      	b.n	8009e98 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e8a:	617b      	str	r3, [r7, #20]
        break;
 8009e8c:	e004      	b.n	8009e98 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	76bb      	strb	r3, [r7, #26]
        break;
 8009e96:	bf00      	nop
    }

    if (pclk != 0U)
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d018      	beq.n	8009ed0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	085a      	lsrs	r2, r3, #1
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	441a      	add	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2b0f      	cmp	r3, #15
 8009eb8:	d908      	bls.n	8009ecc <UART_SetConfig+0x4f4>
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ec0:	d204      	bcs.n	8009ecc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	60da      	str	r2, [r3, #12]
 8009eca:	e001      	b.n	8009ed0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009edc:	7ebb      	ldrb	r3, [r7, #26]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3720      	adds	r7, #32
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	00f42400 	.word	0x00f42400

08009eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	f003 0301 	and.w	r3, r3, #1
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00a      	beq.n	8009f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00a      	beq.n	8009f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	f003 0304 	and.w	r3, r3, #4
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00a      	beq.n	8009f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	f003 0308 	and.w	r3, r3, #8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00a      	beq.n	8009f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f80:	f003 0310 	and.w	r3, r3, #16
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00a      	beq.n	8009f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa2:	f003 0320 	and.w	r3, r3, #32
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00a      	beq.n	8009fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d01a      	beq.n	800a002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fea:	d10a      	bne.n	800a002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	430a      	orrs	r2, r1
 800a022:	605a      	str	r2, [r3, #4]
  }
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af02      	add	r7, sp, #8
 800a036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a040:	f7fb fd22 	bl	8005a88 <HAL_GetTick>
 800a044:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0308 	and.w	r3, r3, #8
 800a050:	2b08      	cmp	r3, #8
 800a052:	d10e      	bne.n	800a072 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f82d 	bl	800a0c2 <UART_WaitOnFlagUntilTimeout>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e023      	b.n	800a0ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d10e      	bne.n	800a09e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a080:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f817 	bl	800a0c2 <UART_WaitOnFlagUntilTimeout>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a09a:	2303      	movs	r3, #3
 800a09c:	e00d      	b.n	800a0ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	603b      	str	r3, [r7, #0]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0d2:	e05e      	b.n	800a192 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0da:	d05a      	beq.n	800a192 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0dc:	f7fb fcd4 	bl	8005a88 <HAL_GetTick>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	69ba      	ldr	r2, [r7, #24]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d302      	bcc.n	800a0f2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d11b      	bne.n	800a12a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a100:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	689a      	ldr	r2, [r3, #8]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f022 0201 	bic.w	r2, r2, #1
 800a110:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2220      	movs	r2, #32
 800a116:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2220      	movs	r2, #32
 800a11c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e043      	b.n	800a1b2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0304 	and.w	r3, r3, #4
 800a134:	2b00      	cmp	r3, #0
 800a136:	d02c      	beq.n	800a192 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a146:	d124      	bne.n	800a192 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a150:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a160:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	689a      	ldr	r2, [r3, #8]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f022 0201 	bic.w	r2, r2, #1
 800a170:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2220      	movs	r2, #32
 800a176:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2220      	movs	r2, #32
 800a17c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2220      	movs	r2, #32
 800a182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e00f      	b.n	800a1b2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	69da      	ldr	r2, [r3, #28]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	4013      	ands	r3, r2
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	bf0c      	ite	eq
 800a1a2:	2301      	moveq	r3, #1
 800a1a4:	2300      	movne	r3, #0
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	79fb      	ldrb	r3, [r7, #7]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d091      	beq.n	800a0d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a1c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1cc:	2b84      	cmp	r3, #132	; 0x84
 800a1ce:	d005      	beq.n	800a1dc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a1d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	3303      	adds	r3, #3
 800a1da:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a1ee:	f000 fafd 	bl	800a7ec <vTaskStartScheduler>
  
  return osOK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1fa:	b089      	sub	sp, #36	; 0x24
 800a1fc:	af04      	add	r7, sp, #16
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	695b      	ldr	r3, [r3, #20]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d020      	beq.n	800a24c <osThreadCreate+0x54>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d01c      	beq.n	800a24c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685c      	ldr	r4, [r3, #4]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681d      	ldr	r5, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	691e      	ldr	r6, [r3, #16]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a224:	4618      	mov	r0, r3
 800a226:	f7ff ffc8 	bl	800a1ba <makeFreeRtosPriority>
 800a22a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a234:	9202      	str	r2, [sp, #8]
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	9100      	str	r1, [sp, #0]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	4632      	mov	r2, r6
 800a23e:	4629      	mov	r1, r5
 800a240:	4620      	mov	r0, r4
 800a242:	f000 f8ed 	bl	800a420 <xTaskCreateStatic>
 800a246:	4603      	mov	r3, r0
 800a248:	60fb      	str	r3, [r7, #12]
 800a24a:	e01c      	b.n	800a286 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685c      	ldr	r4, [r3, #4]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a258:	b29e      	uxth	r6, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff ffaa 	bl	800a1ba <makeFreeRtosPriority>
 800a266:	4602      	mov	r2, r0
 800a268:	f107 030c 	add.w	r3, r7, #12
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	9200      	str	r2, [sp, #0]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	4632      	mov	r2, r6
 800a274:	4629      	mov	r1, r5
 800a276:	4620      	mov	r0, r4
 800a278:	f000 f92f 	bl	800a4da <xTaskCreate>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d001      	beq.n	800a286 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a282:	2300      	movs	r3, #0
 800a284:	e000      	b.n	800a288 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a286:	68fb      	ldr	r3, [r7, #12]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a290 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <osDelay+0x16>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	e000      	b.n	800a2a8 <osDelay+0x18>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 fa6b 	bl	800a784 <vTaskDelay>
  
  return osOK;
 800a2ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f103 0208 	add.w	r2, r3, #8
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f103 0208 	add.w	r2, r3, #8
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f103 0208 	add.w	r2, r3, #8
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a306:	bf00      	nop
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a312:	b480      	push	{r7}
 800a314:	b085      	sub	sp, #20
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	689a      	ldr	r2, [r3, #8]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	601a      	str	r2, [r3, #0]
}
 800a34e:	bf00      	nop
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a35a:	b480      	push	{r7}
 800a35c:	b085      	sub	sp, #20
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a370:	d103      	bne.n	800a37a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	60fb      	str	r3, [r7, #12]
 800a378:	e00c      	b.n	800a394 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3308      	adds	r3, #8
 800a37e:	60fb      	str	r3, [r7, #12]
 800a380:	e002      	b.n	800a388 <vListInsert+0x2e>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	60fb      	str	r3, [r7, #12]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	429a      	cmp	r2, r3
 800a392:	d2f6      	bcs.n	800a382 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	683a      	ldr	r2, [r7, #0]
 800a3a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	601a      	str	r2, [r3, #0]
}
 800a3c0:	bf00      	nop
 800a3c2:	3714      	adds	r7, #20
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	6892      	ldr	r2, [r2, #8]
 800a3e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	6852      	ldr	r2, [r2, #4]
 800a3ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d103      	bne.n	800a400 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689a      	ldr	r2, [r3, #8]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	1e5a      	subs	r2, r3, #1
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a420:	b580      	push	{r7, lr}
 800a422:	b08e      	sub	sp, #56	; 0x38
 800a424:	af04      	add	r7, sp, #16
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <xTaskCreateStatic+0x46>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	61fb      	str	r3, [r7, #28]
}
 800a462:	bf00      	nop
 800a464:	e7fe      	b.n	800a464 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a466:	23c4      	movs	r3, #196	; 0xc4
 800a468:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2bc4      	cmp	r3, #196	; 0xc4
 800a46e:	d00a      	beq.n	800a486 <xTaskCreateStatic+0x66>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	61bb      	str	r3, [r7, #24]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a486:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d01e      	beq.n	800a4cc <xTaskCreateStatic+0xac>
 800a48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01b      	beq.n	800a4cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a49c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9303      	str	r3, [sp, #12]
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	9302      	str	r3, [sp, #8]
 800a4ae:	f107 0314 	add.w	r3, r7, #20
 800a4b2:	9301      	str	r3, [sp, #4]
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	68b9      	ldr	r1, [r7, #8]
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 f850 	bl	800a564 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4c6:	f000 f8f3 	bl	800a6b0 <prvAddNewTaskToReadyList>
 800a4ca:	e001      	b.n	800a4d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4d0:	697b      	ldr	r3, [r7, #20]
	}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3728      	adds	r7, #40	; 0x28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b08c      	sub	sp, #48	; 0x30
 800a4de:	af04      	add	r7, sp, #16
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	603b      	str	r3, [r7, #0]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4ea:	88fb      	ldrh	r3, [r7, #6]
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fefa 	bl	800b2e8 <pvPortMalloc>
 800a4f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00e      	beq.n	800a51a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4fc:	20c4      	movs	r0, #196	; 0xc4
 800a4fe:	f000 fef3 	bl	800b2e8 <pvPortMalloc>
 800a502:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d003      	beq.n	800a512 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	631a      	str	r2, [r3, #48]	; 0x30
 800a510:	e005      	b.n	800a51e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a512:	6978      	ldr	r0, [r7, #20]
 800a514:	f000 ffb4 	bl	800b480 <vPortFree>
 800a518:	e001      	b.n	800a51e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d017      	beq.n	800a554 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a52c:	88fa      	ldrh	r2, [r7, #6]
 800a52e:	2300      	movs	r3, #0
 800a530:	9303      	str	r3, [sp, #12]
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	9302      	str	r3, [sp, #8]
 800a536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	68b9      	ldr	r1, [r7, #8]
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f80e 	bl	800a564 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a548:	69f8      	ldr	r0, [r7, #28]
 800a54a:	f000 f8b1 	bl	800a6b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a54e:	2301      	movs	r3, #1
 800a550:	61bb      	str	r3, [r7, #24]
 800a552:	e002      	b.n	800a55a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a554:	f04f 33ff 	mov.w	r3, #4294967295
 800a558:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a55a:	69bb      	ldr	r3, [r7, #24]
	}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3720      	adds	r7, #32
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
 800a570:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	461a      	mov	r2, r3
 800a57c:	21a5      	movs	r1, #165	; 0xa5
 800a57e:	f001 f9ce 	bl	800b91e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a58c:	3b01      	subs	r3, #1
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	f023 0307 	bic.w	r3, r3, #7
 800a59a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f003 0307 	and.w	r3, r3, #7
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00a      	beq.n	800a5bc <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	617b      	str	r3, [r7, #20]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d01f      	beq.n	800a602 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	61fb      	str	r3, [r7, #28]
 800a5c6:	e012      	b.n	800a5ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	7819      	ldrb	r1, [r3, #0]
 800a5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	3334      	adds	r3, #52	; 0x34
 800a5d8:	460a      	mov	r2, r1
 800a5da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d006      	beq.n	800a5f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	61fb      	str	r3, [r7, #28]
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	2b1f      	cmp	r3, #31
 800a5f2:	d9e9      	bls.n	800a5c8 <prvInitialiseNewTask+0x64>
 800a5f4:	e000      	b.n	800a5f8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a5f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800a600:	e003      	b.n	800a60a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	2b06      	cmp	r3, #6
 800a60e:	d901      	bls.n	800a614 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a610:	2306      	movs	r3, #6
 800a612:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a618:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a61e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	2200      	movs	r2, #0
 800a624:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a628:	3304      	adds	r3, #4
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff fe64 	bl	800a2f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	3318      	adds	r3, #24
 800a634:	4618      	mov	r0, r3
 800a636:	f7ff fe5f 	bl	800a2f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a63e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	f1c3 0207 	rsb	r2, r3, #7
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a64e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	2200      	movs	r2, #0
 800a654:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a662:	335c      	adds	r3, #92	; 0x5c
 800a664:	2260      	movs	r2, #96	; 0x60
 800a666:	2100      	movs	r1, #0
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 f958 	bl	800b91e <memset>
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	4a0c      	ldr	r2, [pc, #48]	; (800a6a4 <prvInitialiseNewTask+0x140>)
 800a672:	661a      	str	r2, [r3, #96]	; 0x60
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	4a0c      	ldr	r2, [pc, #48]	; (800a6a8 <prvInitialiseNewTask+0x144>)
 800a678:	665a      	str	r2, [r3, #100]	; 0x64
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	4a0b      	ldr	r2, [pc, #44]	; (800a6ac <prvInitialiseNewTask+0x148>)
 800a67e:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	68f9      	ldr	r1, [r7, #12]
 800a684:	69b8      	ldr	r0, [r7, #24]
 800a686:	f000 fc1f 	bl	800aec8 <pxPortInitialiseStack>
 800a68a:	4602      	mov	r2, r0
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a692:	2b00      	cmp	r3, #0
 800a694:	d002      	beq.n	800a69c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a69a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a69c:	bf00      	nop
 800a69e:	3720      	adds	r7, #32
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	0800ea14 	.word	0x0800ea14
 800a6a8:	0800ea34 	.word	0x0800ea34
 800a6ac:	0800e9f4 	.word	0x0800e9f4

0800a6b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6b8:	f000 fd34 	bl	800b124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6bc:	4b2a      	ldr	r3, [pc, #168]	; (800a768 <prvAddNewTaskToReadyList+0xb8>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	4a29      	ldr	r2, [pc, #164]	; (800a768 <prvAddNewTaskToReadyList+0xb8>)
 800a6c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6c6:	4b29      	ldr	r3, [pc, #164]	; (800a76c <prvAddNewTaskToReadyList+0xbc>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d109      	bne.n	800a6e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6ce:	4a27      	ldr	r2, [pc, #156]	; (800a76c <prvAddNewTaskToReadyList+0xbc>)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6d4:	4b24      	ldr	r3, [pc, #144]	; (800a768 <prvAddNewTaskToReadyList+0xb8>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d110      	bne.n	800a6fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6dc:	f000 facc 	bl	800ac78 <prvInitialiseTaskLists>
 800a6e0:	e00d      	b.n	800a6fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6e2:	4b23      	ldr	r3, [pc, #140]	; (800a770 <prvAddNewTaskToReadyList+0xc0>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d109      	bne.n	800a6fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6ea:	4b20      	ldr	r3, [pc, #128]	; (800a76c <prvAddNewTaskToReadyList+0xbc>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d802      	bhi.n	800a6fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6f8:	4a1c      	ldr	r2, [pc, #112]	; (800a76c <prvAddNewTaskToReadyList+0xbc>)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6fe:	4b1d      	ldr	r3, [pc, #116]	; (800a774 <prvAddNewTaskToReadyList+0xc4>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3301      	adds	r3, #1
 800a704:	4a1b      	ldr	r2, [pc, #108]	; (800a774 <prvAddNewTaskToReadyList+0xc4>)
 800a706:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	2201      	movs	r2, #1
 800a70e:	409a      	lsls	r2, r3
 800a710:	4b19      	ldr	r3, [pc, #100]	; (800a778 <prvAddNewTaskToReadyList+0xc8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4313      	orrs	r3, r2
 800a716:	4a18      	ldr	r2, [pc, #96]	; (800a778 <prvAddNewTaskToReadyList+0xc8>)
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4a15      	ldr	r2, [pc, #84]	; (800a77c <prvAddNewTaskToReadyList+0xcc>)
 800a728:	441a      	add	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3304      	adds	r3, #4
 800a72e:	4619      	mov	r1, r3
 800a730:	4610      	mov	r0, r2
 800a732:	f7ff fdee 	bl	800a312 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a736:	f000 fd25 	bl	800b184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a73a:	4b0d      	ldr	r3, [pc, #52]	; (800a770 <prvAddNewTaskToReadyList+0xc0>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00e      	beq.n	800a760 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a742:	4b0a      	ldr	r3, [pc, #40]	; (800a76c <prvAddNewTaskToReadyList+0xbc>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d207      	bcs.n	800a760 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a750:	4b0b      	ldr	r3, [pc, #44]	; (800a780 <prvAddNewTaskToReadyList+0xd0>)
 800a752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a756:	601a      	str	r2, [r3, #0]
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a760:	bf00      	nop
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	20000854 	.word	0x20000854
 800a76c:	20000754 	.word	0x20000754
 800a770:	20000860 	.word	0x20000860
 800a774:	20000870 	.word	0x20000870
 800a778:	2000085c 	.word	0x2000085c
 800a77c:	20000758 	.word	0x20000758
 800a780:	e000ed04 	.word	0xe000ed04

0800a784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a78c:	2300      	movs	r3, #0
 800a78e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d017      	beq.n	800a7c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a796:	4b13      	ldr	r3, [pc, #76]	; (800a7e4 <vTaskDelay+0x60>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <vTaskDelay+0x30>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	60bb      	str	r3, [r7, #8]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7b4:	f000 f884 	bl	800a8c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fb1e 	bl	800adfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7c0:	f000 f88c 	bl	800a8dc <xTaskResumeAll>
 800a7c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d107      	bne.n	800a7dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <vTaskDelay+0x64>)
 800a7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7dc:	bf00      	nop
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	2000087c 	.word	0x2000087c
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b08a      	sub	sp, #40	; 0x28
 800a7f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7fa:	463a      	mov	r2, r7
 800a7fc:	1d39      	adds	r1, r7, #4
 800a7fe:	f107 0308 	add.w	r3, r7, #8
 800a802:	4618      	mov	r0, r3
 800a804:	f7f6 fb4c 	bl	8000ea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	9202      	str	r2, [sp, #8]
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	2300      	movs	r3, #0
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	2300      	movs	r3, #0
 800a818:	460a      	mov	r2, r1
 800a81a:	4921      	ldr	r1, [pc, #132]	; (800a8a0 <vTaskStartScheduler+0xb4>)
 800a81c:	4821      	ldr	r0, [pc, #132]	; (800a8a4 <vTaskStartScheduler+0xb8>)
 800a81e:	f7ff fdff 	bl	800a420 <xTaskCreateStatic>
 800a822:	4603      	mov	r3, r0
 800a824:	4a20      	ldr	r2, [pc, #128]	; (800a8a8 <vTaskStartScheduler+0xbc>)
 800a826:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a828:	4b1f      	ldr	r3, [pc, #124]	; (800a8a8 <vTaskStartScheduler+0xbc>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a830:	2301      	movs	r3, #1
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	e001      	b.n	800a83a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a836:	2300      	movs	r3, #0
 800a838:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d11b      	bne.n	800a878 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	613b      	str	r3, [r7, #16]
}
 800a852:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a854:	4b15      	ldr	r3, [pc, #84]	; (800a8ac <vTaskStartScheduler+0xc0>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	335c      	adds	r3, #92	; 0x5c
 800a85a:	4a15      	ldr	r2, [pc, #84]	; (800a8b0 <vTaskStartScheduler+0xc4>)
 800a85c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a85e:	4b15      	ldr	r3, [pc, #84]	; (800a8b4 <vTaskStartScheduler+0xc8>)
 800a860:	f04f 32ff 	mov.w	r2, #4294967295
 800a864:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a866:	4b14      	ldr	r3, [pc, #80]	; (800a8b8 <vTaskStartScheduler+0xcc>)
 800a868:	2201      	movs	r2, #1
 800a86a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a86c:	4b13      	ldr	r3, [pc, #76]	; (800a8bc <vTaskStartScheduler+0xd0>)
 800a86e:	2200      	movs	r2, #0
 800a870:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a872:	f000 fbb5 	bl	800afe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a876:	e00e      	b.n	800a896 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87e:	d10a      	bne.n	800a896 <vTaskStartScheduler+0xaa>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	60fb      	str	r3, [r7, #12]
}
 800a892:	bf00      	nop
 800a894:	e7fe      	b.n	800a894 <vTaskStartScheduler+0xa8>
}
 800a896:	bf00      	nop
 800a898:	3718      	adds	r7, #24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	0800e9a4 	.word	0x0800e9a4
 800a8a4:	0800ac49 	.word	0x0800ac49
 800a8a8:	20000878 	.word	0x20000878
 800a8ac:	20000754 	.word	0x20000754
 800a8b0:	20000150 	.word	0x20000150
 800a8b4:	20000874 	.word	0x20000874
 800a8b8:	20000860 	.word	0x20000860
 800a8bc:	20000858 	.word	0x20000858

0800a8c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8c4:	4b04      	ldr	r3, [pc, #16]	; (800a8d8 <vTaskSuspendAll+0x18>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	4a03      	ldr	r2, [pc, #12]	; (800a8d8 <vTaskSuspendAll+0x18>)
 800a8cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8ce:	bf00      	nop
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	2000087c 	.word	0x2000087c

0800a8dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8ea:	4b41      	ldr	r3, [pc, #260]	; (800a9f0 <xTaskResumeAll+0x114>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10a      	bne.n	800a908 <xTaskResumeAll+0x2c>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	603b      	str	r3, [r7, #0]
}
 800a904:	bf00      	nop
 800a906:	e7fe      	b.n	800a906 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a908:	f000 fc0c 	bl	800b124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a90c:	4b38      	ldr	r3, [pc, #224]	; (800a9f0 <xTaskResumeAll+0x114>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3b01      	subs	r3, #1
 800a912:	4a37      	ldr	r2, [pc, #220]	; (800a9f0 <xTaskResumeAll+0x114>)
 800a914:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a916:	4b36      	ldr	r3, [pc, #216]	; (800a9f0 <xTaskResumeAll+0x114>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d161      	bne.n	800a9e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a91e:	4b35      	ldr	r3, [pc, #212]	; (800a9f4 <xTaskResumeAll+0x118>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d05d      	beq.n	800a9e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a926:	e02e      	b.n	800a986 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a928:	4b33      	ldr	r3, [pc, #204]	; (800a9f8 <xTaskResumeAll+0x11c>)
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3318      	adds	r3, #24
 800a934:	4618      	mov	r0, r3
 800a936:	f7ff fd49 	bl	800a3cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3304      	adds	r3, #4
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff fd44 	bl	800a3cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a948:	2201      	movs	r2, #1
 800a94a:	409a      	lsls	r2, r3
 800a94c:	4b2b      	ldr	r3, [pc, #172]	; (800a9fc <xTaskResumeAll+0x120>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4313      	orrs	r3, r2
 800a952:	4a2a      	ldr	r2, [pc, #168]	; (800a9fc <xTaskResumeAll+0x120>)
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95a:	4613      	mov	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4a27      	ldr	r2, [pc, #156]	; (800aa00 <xTaskResumeAll+0x124>)
 800a964:	441a      	add	r2, r3
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3304      	adds	r3, #4
 800a96a:	4619      	mov	r1, r3
 800a96c:	4610      	mov	r0, r2
 800a96e:	f7ff fcd0 	bl	800a312 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a976:	4b23      	ldr	r3, [pc, #140]	; (800aa04 <xTaskResumeAll+0x128>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d302      	bcc.n	800a986 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a980:	4b21      	ldr	r3, [pc, #132]	; (800aa08 <xTaskResumeAll+0x12c>)
 800a982:	2201      	movs	r2, #1
 800a984:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a986:	4b1c      	ldr	r3, [pc, #112]	; (800a9f8 <xTaskResumeAll+0x11c>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1cc      	bne.n	800a928 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a994:	f000 fa12 	bl	800adbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a998:	4b1c      	ldr	r3, [pc, #112]	; (800aa0c <xTaskResumeAll+0x130>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d010      	beq.n	800a9c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9a4:	f000 f836 	bl	800aa14 <xTaskIncrementTick>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a9ae:	4b16      	ldr	r3, [pc, #88]	; (800aa08 <xTaskResumeAll+0x12c>)
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1f1      	bne.n	800a9a4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a9c0:	4b12      	ldr	r3, [pc, #72]	; (800aa0c <xTaskResumeAll+0x130>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9c6:	4b10      	ldr	r3, [pc, #64]	; (800aa08 <xTaskResumeAll+0x12c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d009      	beq.n	800a9e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9d2:	4b0f      	ldr	r3, [pc, #60]	; (800aa10 <xTaskResumeAll+0x134>)
 800a9d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9e2:	f000 fbcf 	bl	800b184 <vPortExitCritical>

	return xAlreadyYielded;
 800a9e6:	68bb      	ldr	r3, [r7, #8]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	2000087c 	.word	0x2000087c
 800a9f4:	20000854 	.word	0x20000854
 800a9f8:	20000814 	.word	0x20000814
 800a9fc:	2000085c 	.word	0x2000085c
 800aa00:	20000758 	.word	0x20000758
 800aa04:	20000754 	.word	0x20000754
 800aa08:	20000868 	.word	0x20000868
 800aa0c:	20000864 	.word	0x20000864
 800aa10:	e000ed04 	.word	0xe000ed04

0800aa14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa1e:	4b4e      	ldr	r3, [pc, #312]	; (800ab58 <xTaskIncrementTick+0x144>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f040 808e 	bne.w	800ab44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa28:	4b4c      	ldr	r3, [pc, #304]	; (800ab5c <xTaskIncrementTick+0x148>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa30:	4a4a      	ldr	r2, [pc, #296]	; (800ab5c <xTaskIncrementTick+0x148>)
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d120      	bne.n	800aa7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa3c:	4b48      	ldr	r3, [pc, #288]	; (800ab60 <xTaskIncrementTick+0x14c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00a      	beq.n	800aa5c <xTaskIncrementTick+0x48>
	__asm volatile
 800aa46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	603b      	str	r3, [r7, #0]
}
 800aa58:	bf00      	nop
 800aa5a:	e7fe      	b.n	800aa5a <xTaskIncrementTick+0x46>
 800aa5c:	4b40      	ldr	r3, [pc, #256]	; (800ab60 <xTaskIncrementTick+0x14c>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	4b40      	ldr	r3, [pc, #256]	; (800ab64 <xTaskIncrementTick+0x150>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a3e      	ldr	r2, [pc, #248]	; (800ab60 <xTaskIncrementTick+0x14c>)
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	4a3e      	ldr	r2, [pc, #248]	; (800ab64 <xTaskIncrementTick+0x150>)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6013      	str	r3, [r2, #0]
 800aa70:	4b3d      	ldr	r3, [pc, #244]	; (800ab68 <xTaskIncrementTick+0x154>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	4a3c      	ldr	r2, [pc, #240]	; (800ab68 <xTaskIncrementTick+0x154>)
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	f000 f99f 	bl	800adbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa7e:	4b3b      	ldr	r3, [pc, #236]	; (800ab6c <xTaskIncrementTick+0x158>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d348      	bcc.n	800ab1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa88:	4b35      	ldr	r3, [pc, #212]	; (800ab60 <xTaskIncrementTick+0x14c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d104      	bne.n	800aa9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa92:	4b36      	ldr	r3, [pc, #216]	; (800ab6c <xTaskIncrementTick+0x158>)
 800aa94:	f04f 32ff 	mov.w	r2, #4294967295
 800aa98:	601a      	str	r2, [r3, #0]
					break;
 800aa9a:	e03e      	b.n	800ab1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa9c:	4b30      	ldr	r3, [pc, #192]	; (800ab60 <xTaskIncrementTick+0x14c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d203      	bcs.n	800aabc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aab4:	4a2d      	ldr	r2, [pc, #180]	; (800ab6c <xTaskIncrementTick+0x158>)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aaba:	e02e      	b.n	800ab1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff fc83 	bl	800a3cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d004      	beq.n	800aad8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	3318      	adds	r3, #24
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff fc7a 	bl	800a3cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aadc:	2201      	movs	r2, #1
 800aade:	409a      	lsls	r2, r3
 800aae0:	4b23      	ldr	r3, [pc, #140]	; (800ab70 <xTaskIncrementTick+0x15c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	4a22      	ldr	r2, [pc, #136]	; (800ab70 <xTaskIncrementTick+0x15c>)
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaee:	4613      	mov	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4a1f      	ldr	r2, [pc, #124]	; (800ab74 <xTaskIncrementTick+0x160>)
 800aaf8:	441a      	add	r2, r3
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	3304      	adds	r3, #4
 800aafe:	4619      	mov	r1, r3
 800ab00:	4610      	mov	r0, r2
 800ab02:	f7ff fc06 	bl	800a312 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0a:	4b1b      	ldr	r3, [pc, #108]	; (800ab78 <xTaskIncrementTick+0x164>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d3b9      	bcc.n	800aa88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab14:	2301      	movs	r3, #1
 800ab16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab18:	e7b6      	b.n	800aa88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab1a:	4b17      	ldr	r3, [pc, #92]	; (800ab78 <xTaskIncrementTick+0x164>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab20:	4914      	ldr	r1, [pc, #80]	; (800ab74 <xTaskIncrementTick+0x160>)
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	440b      	add	r3, r1
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d901      	bls.n	800ab36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ab32:	2301      	movs	r3, #1
 800ab34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab36:	4b11      	ldr	r3, [pc, #68]	; (800ab7c <xTaskIncrementTick+0x168>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d007      	beq.n	800ab4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	617b      	str	r3, [r7, #20]
 800ab42:	e004      	b.n	800ab4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab44:	4b0e      	ldr	r3, [pc, #56]	; (800ab80 <xTaskIncrementTick+0x16c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	4a0d      	ldr	r2, [pc, #52]	; (800ab80 <xTaskIncrementTick+0x16c>)
 800ab4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab4e:	697b      	ldr	r3, [r7, #20]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	2000087c 	.word	0x2000087c
 800ab5c:	20000858 	.word	0x20000858
 800ab60:	2000080c 	.word	0x2000080c
 800ab64:	20000810 	.word	0x20000810
 800ab68:	2000086c 	.word	0x2000086c
 800ab6c:	20000874 	.word	0x20000874
 800ab70:	2000085c 	.word	0x2000085c
 800ab74:	20000758 	.word	0x20000758
 800ab78:	20000754 	.word	0x20000754
 800ab7c:	20000868 	.word	0x20000868
 800ab80:	20000864 	.word	0x20000864

0800ab84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab8a:	4b29      	ldr	r3, [pc, #164]	; (800ac30 <vTaskSwitchContext+0xac>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d003      	beq.n	800ab9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab92:	4b28      	ldr	r3, [pc, #160]	; (800ac34 <vTaskSwitchContext+0xb0>)
 800ab94:	2201      	movs	r2, #1
 800ab96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab98:	e044      	b.n	800ac24 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ab9a:	4b26      	ldr	r3, [pc, #152]	; (800ac34 <vTaskSwitchContext+0xb0>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aba0:	4b25      	ldr	r3, [pc, #148]	; (800ac38 <vTaskSwitchContext+0xb4>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	fab3 f383 	clz	r3, r3
 800abac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800abae:	7afb      	ldrb	r3, [r7, #11]
 800abb0:	f1c3 031f 	rsb	r3, r3, #31
 800abb4:	617b      	str	r3, [r7, #20]
 800abb6:	4921      	ldr	r1, [pc, #132]	; (800ac3c <vTaskSwitchContext+0xb8>)
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	4613      	mov	r3, r2
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	440b      	add	r3, r1
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10a      	bne.n	800abe0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	607b      	str	r3, [r7, #4]
}
 800abdc:	bf00      	nop
 800abde:	e7fe      	b.n	800abde <vTaskSwitchContext+0x5a>
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	4613      	mov	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	4413      	add	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4a14      	ldr	r2, [pc, #80]	; (800ac3c <vTaskSwitchContext+0xb8>)
 800abec:	4413      	add	r3, r2
 800abee:	613b      	str	r3, [r7, #16]
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	605a      	str	r2, [r3, #4]
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	3308      	adds	r3, #8
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d104      	bne.n	800ac10 <vTaskSwitchContext+0x8c>
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	605a      	str	r2, [r3, #4]
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	4a0a      	ldr	r2, [pc, #40]	; (800ac40 <vTaskSwitchContext+0xbc>)
 800ac18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac1a:	4b09      	ldr	r3, [pc, #36]	; (800ac40 <vTaskSwitchContext+0xbc>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	335c      	adds	r3, #92	; 0x5c
 800ac20:	4a08      	ldr	r2, [pc, #32]	; (800ac44 <vTaskSwitchContext+0xc0>)
 800ac22:	6013      	str	r3, [r2, #0]
}
 800ac24:	bf00      	nop
 800ac26:	371c      	adds	r7, #28
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	2000087c 	.word	0x2000087c
 800ac34:	20000868 	.word	0x20000868
 800ac38:	2000085c 	.word	0x2000085c
 800ac3c:	20000758 	.word	0x20000758
 800ac40:	20000754 	.word	0x20000754
 800ac44:	20000150 	.word	0x20000150

0800ac48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac50:	f000 f852 	bl	800acf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac54:	4b06      	ldr	r3, [pc, #24]	; (800ac70 <prvIdleTask+0x28>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d9f9      	bls.n	800ac50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac5c:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <prvIdleTask+0x2c>)
 800ac5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac6c:	e7f0      	b.n	800ac50 <prvIdleTask+0x8>
 800ac6e:	bf00      	nop
 800ac70:	20000758 	.word	0x20000758
 800ac74:	e000ed04 	.word	0xe000ed04

0800ac78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac7e:	2300      	movs	r3, #0
 800ac80:	607b      	str	r3, [r7, #4]
 800ac82:	e00c      	b.n	800ac9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4a12      	ldr	r2, [pc, #72]	; (800acd8 <prvInitialiseTaskLists+0x60>)
 800ac90:	4413      	add	r3, r2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7ff fb10 	bl	800a2b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	607b      	str	r3, [r7, #4]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b06      	cmp	r3, #6
 800aca2:	d9ef      	bls.n	800ac84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aca4:	480d      	ldr	r0, [pc, #52]	; (800acdc <prvInitialiseTaskLists+0x64>)
 800aca6:	f7ff fb07 	bl	800a2b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acaa:	480d      	ldr	r0, [pc, #52]	; (800ace0 <prvInitialiseTaskLists+0x68>)
 800acac:	f7ff fb04 	bl	800a2b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800acb0:	480c      	ldr	r0, [pc, #48]	; (800ace4 <prvInitialiseTaskLists+0x6c>)
 800acb2:	f7ff fb01 	bl	800a2b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acb6:	480c      	ldr	r0, [pc, #48]	; (800ace8 <prvInitialiseTaskLists+0x70>)
 800acb8:	f7ff fafe 	bl	800a2b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800acbc:	480b      	ldr	r0, [pc, #44]	; (800acec <prvInitialiseTaskLists+0x74>)
 800acbe:	f7ff fafb 	bl	800a2b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800acc2:	4b0b      	ldr	r3, [pc, #44]	; (800acf0 <prvInitialiseTaskLists+0x78>)
 800acc4:	4a05      	ldr	r2, [pc, #20]	; (800acdc <prvInitialiseTaskLists+0x64>)
 800acc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acc8:	4b0a      	ldr	r3, [pc, #40]	; (800acf4 <prvInitialiseTaskLists+0x7c>)
 800acca:	4a05      	ldr	r2, [pc, #20]	; (800ace0 <prvInitialiseTaskLists+0x68>)
 800accc:	601a      	str	r2, [r3, #0]
}
 800acce:	bf00      	nop
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20000758 	.word	0x20000758
 800acdc:	200007e4 	.word	0x200007e4
 800ace0:	200007f8 	.word	0x200007f8
 800ace4:	20000814 	.word	0x20000814
 800ace8:	20000828 	.word	0x20000828
 800acec:	20000840 	.word	0x20000840
 800acf0:	2000080c 	.word	0x2000080c
 800acf4:	20000810 	.word	0x20000810

0800acf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acfe:	e019      	b.n	800ad34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad00:	f000 fa10 	bl	800b124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad04:	4b10      	ldr	r3, [pc, #64]	; (800ad48 <prvCheckTasksWaitingTermination+0x50>)
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3304      	adds	r3, #4
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7ff fb5b 	bl	800a3cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad16:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <prvCheckTasksWaitingTermination+0x54>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	4a0b      	ldr	r2, [pc, #44]	; (800ad4c <prvCheckTasksWaitingTermination+0x54>)
 800ad1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad20:	4b0b      	ldr	r3, [pc, #44]	; (800ad50 <prvCheckTasksWaitingTermination+0x58>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3b01      	subs	r3, #1
 800ad26:	4a0a      	ldr	r2, [pc, #40]	; (800ad50 <prvCheckTasksWaitingTermination+0x58>)
 800ad28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad2a:	f000 fa2b 	bl	800b184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f810 	bl	800ad54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad34:	4b06      	ldr	r3, [pc, #24]	; (800ad50 <prvCheckTasksWaitingTermination+0x58>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1e1      	bne.n	800ad00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad3c:	bf00      	nop
 800ad3e:	bf00      	nop
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20000828 	.word	0x20000828
 800ad4c:	20000854 	.word	0x20000854
 800ad50:	2000083c 	.word	0x2000083c

0800ad54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	335c      	adds	r3, #92	; 0x5c
 800ad60:	4618      	mov	r0, r3
 800ad62:	f001 facf 	bl	800c304 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d108      	bne.n	800ad82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad74:	4618      	mov	r0, r3
 800ad76:	f000 fb83 	bl	800b480 <vPortFree>
				vPortFree( pxTCB );
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fb80 	bl	800b480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad80:	e018      	b.n	800adb4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d103      	bne.n	800ad94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fb77 	bl	800b480 <vPortFree>
	}
 800ad92:	e00f      	b.n	800adb4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d00a      	beq.n	800adb4 <prvDeleteTCB+0x60>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	60fb      	str	r3, [r7, #12]
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <prvDeleteTCB+0x5e>
	}
 800adb4:	bf00      	nop
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adc2:	4b0c      	ldr	r3, [pc, #48]	; (800adf4 <prvResetNextTaskUnblockTime+0x38>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d104      	bne.n	800add6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800adcc:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <prvResetNextTaskUnblockTime+0x3c>)
 800adce:	f04f 32ff 	mov.w	r2, #4294967295
 800add2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800add4:	e008      	b.n	800ade8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add6:	4b07      	ldr	r3, [pc, #28]	; (800adf4 <prvResetNextTaskUnblockTime+0x38>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	4a04      	ldr	r2, [pc, #16]	; (800adf8 <prvResetNextTaskUnblockTime+0x3c>)
 800ade6:	6013      	str	r3, [r2, #0]
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	2000080c 	.word	0x2000080c
 800adf8:	20000874 	.word	0x20000874

0800adfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae06:	4b29      	ldr	r3, [pc, #164]	; (800aeac <prvAddCurrentTaskToDelayedList+0xb0>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae0c:	4b28      	ldr	r3, [pc, #160]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3304      	adds	r3, #4
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff fada 	bl	800a3cc <uxListRemove>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10b      	bne.n	800ae36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ae1e:	4b24      	ldr	r3, [pc, #144]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae24:	2201      	movs	r2, #1
 800ae26:	fa02 f303 	lsl.w	r3, r2, r3
 800ae2a:	43da      	mvns	r2, r3
 800ae2c:	4b21      	ldr	r3, [pc, #132]	; (800aeb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4013      	ands	r3, r2
 800ae32:	4a20      	ldr	r2, [pc, #128]	; (800aeb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae3c:	d10a      	bne.n	800ae54 <prvAddCurrentTaskToDelayedList+0x58>
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d007      	beq.n	800ae54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae44:	4b1a      	ldr	r3, [pc, #104]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3304      	adds	r3, #4
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	481a      	ldr	r0, [pc, #104]	; (800aeb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ae4e:	f7ff fa60 	bl	800a312 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae52:	e026      	b.n	800aea2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4413      	add	r3, r2
 800ae5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae5c:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d209      	bcs.n	800ae80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae6c:	4b13      	ldr	r3, [pc, #76]	; (800aebc <prvAddCurrentTaskToDelayedList+0xc0>)
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3304      	adds	r3, #4
 800ae76:	4619      	mov	r1, r3
 800ae78:	4610      	mov	r0, r2
 800ae7a:	f7ff fa6e 	bl	800a35a <vListInsert>
}
 800ae7e:	e010      	b.n	800aea2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae80:	4b0f      	ldr	r3, [pc, #60]	; (800aec0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	3304      	adds	r3, #4
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	f7ff fa64 	bl	800a35a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae92:	4b0c      	ldr	r3, [pc, #48]	; (800aec4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d202      	bcs.n	800aea2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ae9c:	4a09      	ldr	r2, [pc, #36]	; (800aec4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6013      	str	r3, [r2, #0]
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	20000858 	.word	0x20000858
 800aeb0:	20000754 	.word	0x20000754
 800aeb4:	2000085c 	.word	0x2000085c
 800aeb8:	20000840 	.word	0x20000840
 800aebc:	20000810 	.word	0x20000810
 800aec0:	2000080c 	.word	0x2000080c
 800aec4:	20000874 	.word	0x20000874

0800aec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	3b04      	subs	r3, #4
 800aed8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3b04      	subs	r3, #4
 800aee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	f023 0201 	bic.w	r2, r3, #1
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3b04      	subs	r3, #4
 800aef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aef8:	4a0c      	ldr	r2, [pc, #48]	; (800af2c <pxPortInitialiseStack+0x64>)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	3b14      	subs	r3, #20
 800af02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3b04      	subs	r3, #4
 800af0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f06f 0202 	mvn.w	r2, #2
 800af16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3b20      	subs	r3, #32
 800af1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af1e:	68fb      	ldr	r3, [r7, #12]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	0800af31 	.word	0x0800af31

0800af30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af3a:	4b12      	ldr	r3, [pc, #72]	; (800af84 <prvTaskExitError+0x54>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af42:	d00a      	beq.n	800af5a <prvTaskExitError+0x2a>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	60fb      	str	r3, [r7, #12]
}
 800af56:	bf00      	nop
 800af58:	e7fe      	b.n	800af58 <prvTaskExitError+0x28>
	__asm volatile
 800af5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5e:	f383 8811 	msr	BASEPRI, r3
 800af62:	f3bf 8f6f 	isb	sy
 800af66:	f3bf 8f4f 	dsb	sy
 800af6a:	60bb      	str	r3, [r7, #8]
}
 800af6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af6e:	bf00      	nop
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d0fc      	beq.n	800af70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af76:	bf00      	nop
 800af78:	bf00      	nop
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	2000014c 	.word	0x2000014c
	...

0800af90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af90:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <pxCurrentTCBConst2>)
 800af92:	6819      	ldr	r1, [r3, #0]
 800af94:	6808      	ldr	r0, [r1, #0]
 800af96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9a:	f380 8809 	msr	PSP, r0
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f04f 0000 	mov.w	r0, #0
 800afa6:	f380 8811 	msr	BASEPRI, r0
 800afaa:	4770      	bx	lr
 800afac:	f3af 8000 	nop.w

0800afb0 <pxCurrentTCBConst2>:
 800afb0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop

0800afb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800afb8:	4808      	ldr	r0, [pc, #32]	; (800afdc <prvPortStartFirstTask+0x24>)
 800afba:	6800      	ldr	r0, [r0, #0]
 800afbc:	6800      	ldr	r0, [r0, #0]
 800afbe:	f380 8808 	msr	MSP, r0
 800afc2:	f04f 0000 	mov.w	r0, #0
 800afc6:	f380 8814 	msr	CONTROL, r0
 800afca:	b662      	cpsie	i
 800afcc:	b661      	cpsie	f
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	df00      	svc	0
 800afd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afda:	bf00      	nop
 800afdc:	e000ed08 	.word	0xe000ed08

0800afe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afe6:	4b46      	ldr	r3, [pc, #280]	; (800b100 <xPortStartScheduler+0x120>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a46      	ldr	r2, [pc, #280]	; (800b104 <xPortStartScheduler+0x124>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d10a      	bne.n	800b006 <xPortStartScheduler+0x26>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	613b      	str	r3, [r7, #16]
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b006:	4b3e      	ldr	r3, [pc, #248]	; (800b100 <xPortStartScheduler+0x120>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a3f      	ldr	r2, [pc, #252]	; (800b108 <xPortStartScheduler+0x128>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d10a      	bne.n	800b026 <xPortStartScheduler+0x46>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	60fb      	str	r3, [r7, #12]
}
 800b022:	bf00      	nop
 800b024:	e7fe      	b.n	800b024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b026:	4b39      	ldr	r3, [pc, #228]	; (800b10c <xPortStartScheduler+0x12c>)
 800b028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	22ff      	movs	r2, #255	; 0xff
 800b036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	4b31      	ldr	r3, [pc, #196]	; (800b110 <xPortStartScheduler+0x130>)
 800b04c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b04e:	4b31      	ldr	r3, [pc, #196]	; (800b114 <xPortStartScheduler+0x134>)
 800b050:	2207      	movs	r2, #7
 800b052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b054:	e009      	b.n	800b06a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b056:	4b2f      	ldr	r3, [pc, #188]	; (800b114 <xPortStartScheduler+0x134>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	4a2d      	ldr	r2, [pc, #180]	; (800b114 <xPortStartScheduler+0x134>)
 800b05e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b060:	78fb      	ldrb	r3, [r7, #3]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	b2db      	uxtb	r3, r3
 800b068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b06a:	78fb      	ldrb	r3, [r7, #3]
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b072:	2b80      	cmp	r3, #128	; 0x80
 800b074:	d0ef      	beq.n	800b056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b076:	4b27      	ldr	r3, [pc, #156]	; (800b114 <xPortStartScheduler+0x134>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f1c3 0307 	rsb	r3, r3, #7
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d00a      	beq.n	800b098 <xPortStartScheduler+0xb8>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	60bb      	str	r3, [r7, #8]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b098:	4b1e      	ldr	r3, [pc, #120]	; (800b114 <xPortStartScheduler+0x134>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	4a1d      	ldr	r2, [pc, #116]	; (800b114 <xPortStartScheduler+0x134>)
 800b0a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0a2:	4b1c      	ldr	r3, [pc, #112]	; (800b114 <xPortStartScheduler+0x134>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0aa:	4a1a      	ldr	r2, [pc, #104]	; (800b114 <xPortStartScheduler+0x134>)
 800b0ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b0b6:	4b18      	ldr	r3, [pc, #96]	; (800b118 <xPortStartScheduler+0x138>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a17      	ldr	r2, [pc, #92]	; (800b118 <xPortStartScheduler+0x138>)
 800b0bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0c2:	4b15      	ldr	r3, [pc, #84]	; (800b118 <xPortStartScheduler+0x138>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a14      	ldr	r2, [pc, #80]	; (800b118 <xPortStartScheduler+0x138>)
 800b0c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b0cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0ce:	f000 f8dd 	bl	800b28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0d2:	4b12      	ldr	r3, [pc, #72]	; (800b11c <xPortStartScheduler+0x13c>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0d8:	f000 f8fc 	bl	800b2d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0dc:	4b10      	ldr	r3, [pc, #64]	; (800b120 <xPortStartScheduler+0x140>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a0f      	ldr	r2, [pc, #60]	; (800b120 <xPortStartScheduler+0x140>)
 800b0e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0e8:	f7ff ff66 	bl	800afb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0ec:	f7ff fd4a 	bl	800ab84 <vTaskSwitchContext>
	prvTaskExitError();
 800b0f0:	f7ff ff1e 	bl	800af30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3718      	adds	r7, #24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	e000ed00 	.word	0xe000ed00
 800b104:	410fc271 	.word	0x410fc271
 800b108:	410fc270 	.word	0x410fc270
 800b10c:	e000e400 	.word	0xe000e400
 800b110:	20000880 	.word	0x20000880
 800b114:	20000884 	.word	0x20000884
 800b118:	e000ed20 	.word	0xe000ed20
 800b11c:	2000014c 	.word	0x2000014c
 800b120:	e000ef34 	.word	0xe000ef34

0800b124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	607b      	str	r3, [r7, #4]
}
 800b13c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b13e:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <vPortEnterCritical+0x58>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3301      	adds	r3, #1
 800b144:	4a0d      	ldr	r2, [pc, #52]	; (800b17c <vPortEnterCritical+0x58>)
 800b146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b148:	4b0c      	ldr	r3, [pc, #48]	; (800b17c <vPortEnterCritical+0x58>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d10f      	bne.n	800b170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b150:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <vPortEnterCritical+0x5c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <vPortEnterCritical+0x4c>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	603b      	str	r3, [r7, #0]
}
 800b16c:	bf00      	nop
 800b16e:	e7fe      	b.n	800b16e <vPortEnterCritical+0x4a>
	}
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	2000014c 	.word	0x2000014c
 800b180:	e000ed04 	.word	0xe000ed04

0800b184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b18a:	4b12      	ldr	r3, [pc, #72]	; (800b1d4 <vPortExitCritical+0x50>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10a      	bne.n	800b1a8 <vPortExitCritical+0x24>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	607b      	str	r3, [r7, #4]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	4a09      	ldr	r2, [pc, #36]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1b2:	4b08      	ldr	r3, [pc, #32]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d105      	bne.n	800b1c6 <vPortExitCritical+0x42>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b1c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1c6:	bf00      	nop
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	2000014c 	.word	0x2000014c
	...

0800b1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1e0:	f3ef 8009 	mrs	r0, PSP
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	4b15      	ldr	r3, [pc, #84]	; (800b240 <pxCurrentTCBConst>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	f01e 0f10 	tst.w	lr, #16
 800b1f0:	bf08      	it	eq
 800b1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fa:	6010      	str	r0, [r2, #0]
 800b1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b200:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b204:	f380 8811 	msr	BASEPRI, r0
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f7ff fcb8 	bl	800ab84 <vTaskSwitchContext>
 800b214:	f04f 0000 	mov.w	r0, #0
 800b218:	f380 8811 	msr	BASEPRI, r0
 800b21c:	bc09      	pop	{r0, r3}
 800b21e:	6819      	ldr	r1, [r3, #0]
 800b220:	6808      	ldr	r0, [r1, #0]
 800b222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b226:	f01e 0f10 	tst.w	lr, #16
 800b22a:	bf08      	it	eq
 800b22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b230:	f380 8809 	msr	PSP, r0
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	f3af 8000 	nop.w

0800b240 <pxCurrentTCBConst>:
 800b240:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop

0800b248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	607b      	str	r3, [r7, #4]
}
 800b260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b262:	f7ff fbd7 	bl	800aa14 <xTaskIncrementTick>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b26c:	4b06      	ldr	r3, [pc, #24]	; (800b288 <SysTick_Handler+0x40>)
 800b26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	2300      	movs	r3, #0
 800b276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	f383 8811 	msr	BASEPRI, r3
}
 800b27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	e000ed04 	.word	0xe000ed04

0800b28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b28c:	b480      	push	{r7}
 800b28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b290:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <vPortSetupTimerInterrupt+0x34>)
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b296:	4b0b      	ldr	r3, [pc, #44]	; (800b2c4 <vPortSetupTimerInterrupt+0x38>)
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b29c:	4b0a      	ldr	r3, [pc, #40]	; (800b2c8 <vPortSetupTimerInterrupt+0x3c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a0a      	ldr	r2, [pc, #40]	; (800b2cc <vPortSetupTimerInterrupt+0x40>)
 800b2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a6:	099b      	lsrs	r3, r3, #6
 800b2a8:	4a09      	ldr	r2, [pc, #36]	; (800b2d0 <vPortSetupTimerInterrupt+0x44>)
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2ae:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <vPortSetupTimerInterrupt+0x34>)
 800b2b0:	2207      	movs	r2, #7
 800b2b2:	601a      	str	r2, [r3, #0]
}
 800b2b4:	bf00      	nop
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	e000e010 	.word	0xe000e010
 800b2c4:	e000e018 	.word	0xe000e018
 800b2c8:	20000088 	.word	0x20000088
 800b2cc:	10624dd3 	.word	0x10624dd3
 800b2d0:	e000e014 	.word	0xe000e014

0800b2d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2e4 <vPortEnableVFP+0x10>
 800b2d8:	6801      	ldr	r1, [r0, #0]
 800b2da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b2de:	6001      	str	r1, [r0, #0]
 800b2e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2e2:	bf00      	nop
 800b2e4:	e000ed88 	.word	0xe000ed88

0800b2e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08a      	sub	sp, #40	; 0x28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b2f4:	f7ff fae4 	bl	800a8c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b2f8:	4b5b      	ldr	r3, [pc, #364]	; (800b468 <pvPortMalloc+0x180>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d101      	bne.n	800b304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b300:	f000 f920 	bl	800b544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b304:	4b59      	ldr	r3, [pc, #356]	; (800b46c <pvPortMalloc+0x184>)
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4013      	ands	r3, r2
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f040 8093 	bne.w	800b438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d01d      	beq.n	800b354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b318:	2208      	movs	r2, #8
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4413      	add	r3, r2
 800b31e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f003 0307 	and.w	r3, r3, #7
 800b326:	2b00      	cmp	r3, #0
 800b328:	d014      	beq.n	800b354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f023 0307 	bic.w	r3, r3, #7
 800b330:	3308      	adds	r3, #8
 800b332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f003 0307 	and.w	r3, r3, #7
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00a      	beq.n	800b354 <pvPortMalloc+0x6c>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	617b      	str	r3, [r7, #20]
}
 800b350:	bf00      	nop
 800b352:	e7fe      	b.n	800b352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d06e      	beq.n	800b438 <pvPortMalloc+0x150>
 800b35a:	4b45      	ldr	r3, [pc, #276]	; (800b470 <pvPortMalloc+0x188>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	429a      	cmp	r2, r3
 800b362:	d869      	bhi.n	800b438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b364:	4b43      	ldr	r3, [pc, #268]	; (800b474 <pvPortMalloc+0x18c>)
 800b366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b368:	4b42      	ldr	r3, [pc, #264]	; (800b474 <pvPortMalloc+0x18c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b36e:	e004      	b.n	800b37a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	429a      	cmp	r2, r3
 800b382:	d903      	bls.n	800b38c <pvPortMalloc+0xa4>
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1f1      	bne.n	800b370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b38c:	4b36      	ldr	r3, [pc, #216]	; (800b468 <pvPortMalloc+0x180>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b392:	429a      	cmp	r2, r3
 800b394:	d050      	beq.n	800b438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2208      	movs	r2, #8
 800b39c:	4413      	add	r3, r2
 800b39e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	1ad2      	subs	r2, r2, r3
 800b3b0:	2308      	movs	r3, #8
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d91f      	bls.n	800b3f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4413      	add	r3, r2
 800b3be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	f003 0307 	and.w	r3, r3, #7
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00a      	beq.n	800b3e0 <pvPortMalloc+0xf8>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	613b      	str	r3, [r7, #16]
}
 800b3dc:	bf00      	nop
 800b3de:	e7fe      	b.n	800b3de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e2:	685a      	ldr	r2, [r3, #4]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	1ad2      	subs	r2, r2, r3
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b3f2:	69b8      	ldr	r0, [r7, #24]
 800b3f4:	f000 f908 	bl	800b608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3f8:	4b1d      	ldr	r3, [pc, #116]	; (800b470 <pvPortMalloc+0x188>)
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	4a1b      	ldr	r2, [pc, #108]	; (800b470 <pvPortMalloc+0x188>)
 800b404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b406:	4b1a      	ldr	r3, [pc, #104]	; (800b470 <pvPortMalloc+0x188>)
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <pvPortMalloc+0x190>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d203      	bcs.n	800b41a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b412:	4b17      	ldr	r3, [pc, #92]	; (800b470 <pvPortMalloc+0x188>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a18      	ldr	r2, [pc, #96]	; (800b478 <pvPortMalloc+0x190>)
 800b418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	4b13      	ldr	r3, [pc, #76]	; (800b46c <pvPortMalloc+0x184>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	431a      	orrs	r2, r3
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	2200      	movs	r2, #0
 800b42c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b42e:	4b13      	ldr	r3, [pc, #76]	; (800b47c <pvPortMalloc+0x194>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3301      	adds	r3, #1
 800b434:	4a11      	ldr	r2, [pc, #68]	; (800b47c <pvPortMalloc+0x194>)
 800b436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b438:	f7ff fa50 	bl	800a8dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	f003 0307 	and.w	r3, r3, #7
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00a      	beq.n	800b45c <pvPortMalloc+0x174>
	__asm volatile
 800b446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44a:	f383 8811 	msr	BASEPRI, r3
 800b44e:	f3bf 8f6f 	isb	sy
 800b452:	f3bf 8f4f 	dsb	sy
 800b456:	60fb      	str	r3, [r7, #12]
}
 800b458:	bf00      	nop
 800b45a:	e7fe      	b.n	800b45a <pvPortMalloc+0x172>
	return pvReturn;
 800b45c:	69fb      	ldr	r3, [r7, #28]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3728      	adds	r7, #40	; 0x28
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20010290 	.word	0x20010290
 800b46c:	200102a4 	.word	0x200102a4
 800b470:	20010294 	.word	0x20010294
 800b474:	20010288 	.word	0x20010288
 800b478:	20010298 	.word	0x20010298
 800b47c:	2001029c 	.word	0x2001029c

0800b480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d04d      	beq.n	800b52e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b492:	2308      	movs	r3, #8
 800b494:	425b      	negs	r3, r3
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	4413      	add	r3, r2
 800b49a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	685a      	ldr	r2, [r3, #4]
 800b4a4:	4b24      	ldr	r3, [pc, #144]	; (800b538 <vPortFree+0xb8>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10a      	bne.n	800b4c4 <vPortFree+0x44>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	60fb      	str	r3, [r7, #12]
}
 800b4c0:	bf00      	nop
 800b4c2:	e7fe      	b.n	800b4c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00a      	beq.n	800b4e2 <vPortFree+0x62>
	__asm volatile
 800b4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	60bb      	str	r3, [r7, #8]
}
 800b4de:	bf00      	nop
 800b4e0:	e7fe      	b.n	800b4e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	4b14      	ldr	r3, [pc, #80]	; (800b538 <vPortFree+0xb8>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d01e      	beq.n	800b52e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d11a      	bne.n	800b52e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	685a      	ldr	r2, [r3, #4]
 800b4fc:	4b0e      	ldr	r3, [pc, #56]	; (800b538 <vPortFree+0xb8>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	43db      	mvns	r3, r3
 800b502:	401a      	ands	r2, r3
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b508:	f7ff f9da 	bl	800a8c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	685a      	ldr	r2, [r3, #4]
 800b510:	4b0a      	ldr	r3, [pc, #40]	; (800b53c <vPortFree+0xbc>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4413      	add	r3, r2
 800b516:	4a09      	ldr	r2, [pc, #36]	; (800b53c <vPortFree+0xbc>)
 800b518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b51a:	6938      	ldr	r0, [r7, #16]
 800b51c:	f000 f874 	bl	800b608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b520:	4b07      	ldr	r3, [pc, #28]	; (800b540 <vPortFree+0xc0>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3301      	adds	r3, #1
 800b526:	4a06      	ldr	r2, [pc, #24]	; (800b540 <vPortFree+0xc0>)
 800b528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b52a:	f7ff f9d7 	bl	800a8dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b52e:	bf00      	nop
 800b530:	3718      	adds	r7, #24
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	200102a4 	.word	0x200102a4
 800b53c:	20010294 	.word	0x20010294
 800b540:	200102a0 	.word	0x200102a0

0800b544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b54a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800b54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b550:	4b27      	ldr	r3, [pc, #156]	; (800b5f0 <prvHeapInit+0xac>)
 800b552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f003 0307 	and.w	r3, r3, #7
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00c      	beq.n	800b578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3307      	adds	r3, #7
 800b562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f023 0307 	bic.w	r3, r3, #7
 800b56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	4a1f      	ldr	r2, [pc, #124]	; (800b5f0 <prvHeapInit+0xac>)
 800b574:	4413      	add	r3, r2
 800b576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b57c:	4a1d      	ldr	r2, [pc, #116]	; (800b5f4 <prvHeapInit+0xb0>)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b582:	4b1c      	ldr	r3, [pc, #112]	; (800b5f4 <prvHeapInit+0xb0>)
 800b584:	2200      	movs	r2, #0
 800b586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	4413      	add	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b590:	2208      	movs	r2, #8
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	1a9b      	subs	r3, r3, r2
 800b596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f023 0307 	bic.w	r3, r3, #7
 800b59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	4a15      	ldr	r2, [pc, #84]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5a6:	4b14      	ldr	r3, [pc, #80]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5ae:	4b12      	ldr	r3, [pc, #72]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	1ad2      	subs	r2, r2, r3
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5c4:	4b0c      	ldr	r3, [pc, #48]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	4a0a      	ldr	r2, [pc, #40]	; (800b5fc <prvHeapInit+0xb8>)
 800b5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	4a09      	ldr	r2, [pc, #36]	; (800b600 <prvHeapInit+0xbc>)
 800b5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5dc:	4b09      	ldr	r3, [pc, #36]	; (800b604 <prvHeapInit+0xc0>)
 800b5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b5e2:	601a      	str	r2, [r3, #0]
}
 800b5e4:	bf00      	nop
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	20000888 	.word	0x20000888
 800b5f4:	20010288 	.word	0x20010288
 800b5f8:	20010290 	.word	0x20010290
 800b5fc:	20010298 	.word	0x20010298
 800b600:	20010294 	.word	0x20010294
 800b604:	200102a4 	.word	0x200102a4

0800b608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b610:	4b28      	ldr	r3, [pc, #160]	; (800b6b4 <prvInsertBlockIntoFreeList+0xac>)
 800b612:	60fb      	str	r3, [r7, #12]
 800b614:	e002      	b.n	800b61c <prvInsertBlockIntoFreeList+0x14>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	60fb      	str	r3, [r7, #12]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	429a      	cmp	r2, r3
 800b624:	d8f7      	bhi.n	800b616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	4413      	add	r3, r2
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	429a      	cmp	r2, r3
 800b636:	d108      	bne.n	800b64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	441a      	add	r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	441a      	add	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d118      	bne.n	800b690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	429a      	cmp	r2, r3
 800b668:	d00d      	beq.n	800b686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	441a      	add	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	601a      	str	r2, [r3, #0]
 800b684:	e008      	b.n	800b698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b686:	4b0c      	ldr	r3, [pc, #48]	; (800b6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	e003      	b.n	800b698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d002      	beq.n	800b6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6a6:	bf00      	nop
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	20010288 	.word	0x20010288
 800b6b8:	20010290 	.word	0x20010290

0800b6bc <__errno>:
 800b6bc:	4b01      	ldr	r3, [pc, #4]	; (800b6c4 <__errno+0x8>)
 800b6be:	6818      	ldr	r0, [r3, #0]
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	20000150 	.word	0x20000150

0800b6c8 <std>:
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	b510      	push	{r4, lr}
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	e9c0 3300 	strd	r3, r3, [r0]
 800b6d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6d6:	6083      	str	r3, [r0, #8]
 800b6d8:	8181      	strh	r1, [r0, #12]
 800b6da:	6643      	str	r3, [r0, #100]	; 0x64
 800b6dc:	81c2      	strh	r2, [r0, #14]
 800b6de:	6183      	str	r3, [r0, #24]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	2208      	movs	r2, #8
 800b6e4:	305c      	adds	r0, #92	; 0x5c
 800b6e6:	f000 f91a 	bl	800b91e <memset>
 800b6ea:	4b05      	ldr	r3, [pc, #20]	; (800b700 <std+0x38>)
 800b6ec:	6263      	str	r3, [r4, #36]	; 0x24
 800b6ee:	4b05      	ldr	r3, [pc, #20]	; (800b704 <std+0x3c>)
 800b6f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6f2:	4b05      	ldr	r3, [pc, #20]	; (800b708 <std+0x40>)
 800b6f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6f6:	4b05      	ldr	r3, [pc, #20]	; (800b70c <std+0x44>)
 800b6f8:	6224      	str	r4, [r4, #32]
 800b6fa:	6323      	str	r3, [r4, #48]	; 0x30
 800b6fc:	bd10      	pop	{r4, pc}
 800b6fe:	bf00      	nop
 800b700:	0800c445 	.word	0x0800c445
 800b704:	0800c467 	.word	0x0800c467
 800b708:	0800c49f 	.word	0x0800c49f
 800b70c:	0800c4c3 	.word	0x0800c4c3

0800b710 <_cleanup_r>:
 800b710:	4901      	ldr	r1, [pc, #4]	; (800b718 <_cleanup_r+0x8>)
 800b712:	f000 b8af 	b.w	800b874 <_fwalk_reent>
 800b716:	bf00      	nop
 800b718:	0800d48d 	.word	0x0800d48d

0800b71c <__sfmoreglue>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	1e4a      	subs	r2, r1, #1
 800b720:	2568      	movs	r5, #104	; 0x68
 800b722:	4355      	muls	r5, r2
 800b724:	460e      	mov	r6, r1
 800b726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b72a:	f000 f901 	bl	800b930 <_malloc_r>
 800b72e:	4604      	mov	r4, r0
 800b730:	b140      	cbz	r0, 800b744 <__sfmoreglue+0x28>
 800b732:	2100      	movs	r1, #0
 800b734:	e9c0 1600 	strd	r1, r6, [r0]
 800b738:	300c      	adds	r0, #12
 800b73a:	60a0      	str	r0, [r4, #8]
 800b73c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b740:	f000 f8ed 	bl	800b91e <memset>
 800b744:	4620      	mov	r0, r4
 800b746:	bd70      	pop	{r4, r5, r6, pc}

0800b748 <__sfp_lock_acquire>:
 800b748:	4801      	ldr	r0, [pc, #4]	; (800b750 <__sfp_lock_acquire+0x8>)
 800b74a:	f000 b8d8 	b.w	800b8fe <__retarget_lock_acquire_recursive>
 800b74e:	bf00      	nop
 800b750:	200105cc 	.word	0x200105cc

0800b754 <__sfp_lock_release>:
 800b754:	4801      	ldr	r0, [pc, #4]	; (800b75c <__sfp_lock_release+0x8>)
 800b756:	f000 b8d3 	b.w	800b900 <__retarget_lock_release_recursive>
 800b75a:	bf00      	nop
 800b75c:	200105cc 	.word	0x200105cc

0800b760 <__sinit_lock_acquire>:
 800b760:	4801      	ldr	r0, [pc, #4]	; (800b768 <__sinit_lock_acquire+0x8>)
 800b762:	f000 b8cc 	b.w	800b8fe <__retarget_lock_acquire_recursive>
 800b766:	bf00      	nop
 800b768:	200105c7 	.word	0x200105c7

0800b76c <__sinit_lock_release>:
 800b76c:	4801      	ldr	r0, [pc, #4]	; (800b774 <__sinit_lock_release+0x8>)
 800b76e:	f000 b8c7 	b.w	800b900 <__retarget_lock_release_recursive>
 800b772:	bf00      	nop
 800b774:	200105c7 	.word	0x200105c7

0800b778 <__sinit>:
 800b778:	b510      	push	{r4, lr}
 800b77a:	4604      	mov	r4, r0
 800b77c:	f7ff fff0 	bl	800b760 <__sinit_lock_acquire>
 800b780:	69a3      	ldr	r3, [r4, #24]
 800b782:	b11b      	cbz	r3, 800b78c <__sinit+0x14>
 800b784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b788:	f7ff bff0 	b.w	800b76c <__sinit_lock_release>
 800b78c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b790:	6523      	str	r3, [r4, #80]	; 0x50
 800b792:	4b13      	ldr	r3, [pc, #76]	; (800b7e0 <__sinit+0x68>)
 800b794:	4a13      	ldr	r2, [pc, #76]	; (800b7e4 <__sinit+0x6c>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	62a2      	str	r2, [r4, #40]	; 0x28
 800b79a:	42a3      	cmp	r3, r4
 800b79c:	bf04      	itt	eq
 800b79e:	2301      	moveq	r3, #1
 800b7a0:	61a3      	streq	r3, [r4, #24]
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 f820 	bl	800b7e8 <__sfp>
 800b7a8:	6060      	str	r0, [r4, #4]
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f000 f81c 	bl	800b7e8 <__sfp>
 800b7b0:	60a0      	str	r0, [r4, #8]
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 f818 	bl	800b7e8 <__sfp>
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	60e0      	str	r0, [r4, #12]
 800b7bc:	2104      	movs	r1, #4
 800b7be:	6860      	ldr	r0, [r4, #4]
 800b7c0:	f7ff ff82 	bl	800b6c8 <std>
 800b7c4:	68a0      	ldr	r0, [r4, #8]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	2109      	movs	r1, #9
 800b7ca:	f7ff ff7d 	bl	800b6c8 <std>
 800b7ce:	68e0      	ldr	r0, [r4, #12]
 800b7d0:	2202      	movs	r2, #2
 800b7d2:	2112      	movs	r1, #18
 800b7d4:	f7ff ff78 	bl	800b6c8 <std>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	61a3      	str	r3, [r4, #24]
 800b7dc:	e7d2      	b.n	800b784 <__sinit+0xc>
 800b7de:	bf00      	nop
 800b7e0:	0800ea54 	.word	0x0800ea54
 800b7e4:	0800b711 	.word	0x0800b711

0800b7e8 <__sfp>:
 800b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ea:	4607      	mov	r7, r0
 800b7ec:	f7ff ffac 	bl	800b748 <__sfp_lock_acquire>
 800b7f0:	4b1e      	ldr	r3, [pc, #120]	; (800b86c <__sfp+0x84>)
 800b7f2:	681e      	ldr	r6, [r3, #0]
 800b7f4:	69b3      	ldr	r3, [r6, #24]
 800b7f6:	b913      	cbnz	r3, 800b7fe <__sfp+0x16>
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7ff ffbd 	bl	800b778 <__sinit>
 800b7fe:	3648      	adds	r6, #72	; 0x48
 800b800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b804:	3b01      	subs	r3, #1
 800b806:	d503      	bpl.n	800b810 <__sfp+0x28>
 800b808:	6833      	ldr	r3, [r6, #0]
 800b80a:	b30b      	cbz	r3, 800b850 <__sfp+0x68>
 800b80c:	6836      	ldr	r6, [r6, #0]
 800b80e:	e7f7      	b.n	800b800 <__sfp+0x18>
 800b810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b814:	b9d5      	cbnz	r5, 800b84c <__sfp+0x64>
 800b816:	4b16      	ldr	r3, [pc, #88]	; (800b870 <__sfp+0x88>)
 800b818:	60e3      	str	r3, [r4, #12]
 800b81a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b81e:	6665      	str	r5, [r4, #100]	; 0x64
 800b820:	f000 f86c 	bl	800b8fc <__retarget_lock_init_recursive>
 800b824:	f7ff ff96 	bl	800b754 <__sfp_lock_release>
 800b828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b82c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b830:	6025      	str	r5, [r4, #0]
 800b832:	61a5      	str	r5, [r4, #24]
 800b834:	2208      	movs	r2, #8
 800b836:	4629      	mov	r1, r5
 800b838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b83c:	f000 f86f 	bl	800b91e <memset>
 800b840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b848:	4620      	mov	r0, r4
 800b84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b84c:	3468      	adds	r4, #104	; 0x68
 800b84e:	e7d9      	b.n	800b804 <__sfp+0x1c>
 800b850:	2104      	movs	r1, #4
 800b852:	4638      	mov	r0, r7
 800b854:	f7ff ff62 	bl	800b71c <__sfmoreglue>
 800b858:	4604      	mov	r4, r0
 800b85a:	6030      	str	r0, [r6, #0]
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d1d5      	bne.n	800b80c <__sfp+0x24>
 800b860:	f7ff ff78 	bl	800b754 <__sfp_lock_release>
 800b864:	230c      	movs	r3, #12
 800b866:	603b      	str	r3, [r7, #0]
 800b868:	e7ee      	b.n	800b848 <__sfp+0x60>
 800b86a:	bf00      	nop
 800b86c:	0800ea54 	.word	0x0800ea54
 800b870:	ffff0001 	.word	0xffff0001

0800b874 <_fwalk_reent>:
 800b874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b878:	4606      	mov	r6, r0
 800b87a:	4688      	mov	r8, r1
 800b87c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b880:	2700      	movs	r7, #0
 800b882:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b886:	f1b9 0901 	subs.w	r9, r9, #1
 800b88a:	d505      	bpl.n	800b898 <_fwalk_reent+0x24>
 800b88c:	6824      	ldr	r4, [r4, #0]
 800b88e:	2c00      	cmp	r4, #0
 800b890:	d1f7      	bne.n	800b882 <_fwalk_reent+0xe>
 800b892:	4638      	mov	r0, r7
 800b894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b898:	89ab      	ldrh	r3, [r5, #12]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d907      	bls.n	800b8ae <_fwalk_reent+0x3a>
 800b89e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	d003      	beq.n	800b8ae <_fwalk_reent+0x3a>
 800b8a6:	4629      	mov	r1, r5
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	47c0      	blx	r8
 800b8ac:	4307      	orrs	r7, r0
 800b8ae:	3568      	adds	r5, #104	; 0x68
 800b8b0:	e7e9      	b.n	800b886 <_fwalk_reent+0x12>
	...

0800b8b4 <__libc_init_array>:
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	4d0d      	ldr	r5, [pc, #52]	; (800b8ec <__libc_init_array+0x38>)
 800b8b8:	4c0d      	ldr	r4, [pc, #52]	; (800b8f0 <__libc_init_array+0x3c>)
 800b8ba:	1b64      	subs	r4, r4, r5
 800b8bc:	10a4      	asrs	r4, r4, #2
 800b8be:	2600      	movs	r6, #0
 800b8c0:	42a6      	cmp	r6, r4
 800b8c2:	d109      	bne.n	800b8d8 <__libc_init_array+0x24>
 800b8c4:	4d0b      	ldr	r5, [pc, #44]	; (800b8f4 <__libc_init_array+0x40>)
 800b8c6:	4c0c      	ldr	r4, [pc, #48]	; (800b8f8 <__libc_init_array+0x44>)
 800b8c8:	f002 fe54 	bl	800e574 <_init>
 800b8cc:	1b64      	subs	r4, r4, r5
 800b8ce:	10a4      	asrs	r4, r4, #2
 800b8d0:	2600      	movs	r6, #0
 800b8d2:	42a6      	cmp	r6, r4
 800b8d4:	d105      	bne.n	800b8e2 <__libc_init_array+0x2e>
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}
 800b8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8dc:	4798      	blx	r3
 800b8de:	3601      	adds	r6, #1
 800b8e0:	e7ee      	b.n	800b8c0 <__libc_init_array+0xc>
 800b8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8e6:	4798      	blx	r3
 800b8e8:	3601      	adds	r6, #1
 800b8ea:	e7f2      	b.n	800b8d2 <__libc_init_array+0x1e>
 800b8ec:	0800eddc 	.word	0x0800eddc
 800b8f0:	0800eddc 	.word	0x0800eddc
 800b8f4:	0800eddc 	.word	0x0800eddc
 800b8f8:	0800ede0 	.word	0x0800ede0

0800b8fc <__retarget_lock_init_recursive>:
 800b8fc:	4770      	bx	lr

0800b8fe <__retarget_lock_acquire_recursive>:
 800b8fe:	4770      	bx	lr

0800b900 <__retarget_lock_release_recursive>:
 800b900:	4770      	bx	lr

0800b902 <memcpy>:
 800b902:	440a      	add	r2, r1
 800b904:	4291      	cmp	r1, r2
 800b906:	f100 33ff 	add.w	r3, r0, #4294967295
 800b90a:	d100      	bne.n	800b90e <memcpy+0xc>
 800b90c:	4770      	bx	lr
 800b90e:	b510      	push	{r4, lr}
 800b910:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b914:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b918:	4291      	cmp	r1, r2
 800b91a:	d1f9      	bne.n	800b910 <memcpy+0xe>
 800b91c:	bd10      	pop	{r4, pc}

0800b91e <memset>:
 800b91e:	4402      	add	r2, r0
 800b920:	4603      	mov	r3, r0
 800b922:	4293      	cmp	r3, r2
 800b924:	d100      	bne.n	800b928 <memset+0xa>
 800b926:	4770      	bx	lr
 800b928:	f803 1b01 	strb.w	r1, [r3], #1
 800b92c:	e7f9      	b.n	800b922 <memset+0x4>
	...

0800b930 <_malloc_r>:
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b932:	1ccd      	adds	r5, r1, #3
 800b934:	f025 0503 	bic.w	r5, r5, #3
 800b938:	3508      	adds	r5, #8
 800b93a:	2d0c      	cmp	r5, #12
 800b93c:	bf38      	it	cc
 800b93e:	250c      	movcc	r5, #12
 800b940:	2d00      	cmp	r5, #0
 800b942:	4606      	mov	r6, r0
 800b944:	db01      	blt.n	800b94a <_malloc_r+0x1a>
 800b946:	42a9      	cmp	r1, r5
 800b948:	d903      	bls.n	800b952 <_malloc_r+0x22>
 800b94a:	230c      	movs	r3, #12
 800b94c:	6033      	str	r3, [r6, #0]
 800b94e:	2000      	movs	r0, #0
 800b950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b952:	f001 fe59 	bl	800d608 <__malloc_lock>
 800b956:	4921      	ldr	r1, [pc, #132]	; (800b9dc <_malloc_r+0xac>)
 800b958:	680a      	ldr	r2, [r1, #0]
 800b95a:	4614      	mov	r4, r2
 800b95c:	b99c      	cbnz	r4, 800b986 <_malloc_r+0x56>
 800b95e:	4f20      	ldr	r7, [pc, #128]	; (800b9e0 <_malloc_r+0xb0>)
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	b923      	cbnz	r3, 800b96e <_malloc_r+0x3e>
 800b964:	4621      	mov	r1, r4
 800b966:	4630      	mov	r0, r6
 800b968:	f000 fd28 	bl	800c3bc <_sbrk_r>
 800b96c:	6038      	str	r0, [r7, #0]
 800b96e:	4629      	mov	r1, r5
 800b970:	4630      	mov	r0, r6
 800b972:	f000 fd23 	bl	800c3bc <_sbrk_r>
 800b976:	1c43      	adds	r3, r0, #1
 800b978:	d123      	bne.n	800b9c2 <_malloc_r+0x92>
 800b97a:	230c      	movs	r3, #12
 800b97c:	6033      	str	r3, [r6, #0]
 800b97e:	4630      	mov	r0, r6
 800b980:	f001 fe48 	bl	800d614 <__malloc_unlock>
 800b984:	e7e3      	b.n	800b94e <_malloc_r+0x1e>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	1b5b      	subs	r3, r3, r5
 800b98a:	d417      	bmi.n	800b9bc <_malloc_r+0x8c>
 800b98c:	2b0b      	cmp	r3, #11
 800b98e:	d903      	bls.n	800b998 <_malloc_r+0x68>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	441c      	add	r4, r3
 800b994:	6025      	str	r5, [r4, #0]
 800b996:	e004      	b.n	800b9a2 <_malloc_r+0x72>
 800b998:	6863      	ldr	r3, [r4, #4]
 800b99a:	42a2      	cmp	r2, r4
 800b99c:	bf0c      	ite	eq
 800b99e:	600b      	streq	r3, [r1, #0]
 800b9a0:	6053      	strne	r3, [r2, #4]
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f001 fe36 	bl	800d614 <__malloc_unlock>
 800b9a8:	f104 000b 	add.w	r0, r4, #11
 800b9ac:	1d23      	adds	r3, r4, #4
 800b9ae:	f020 0007 	bic.w	r0, r0, #7
 800b9b2:	1ac2      	subs	r2, r0, r3
 800b9b4:	d0cc      	beq.n	800b950 <_malloc_r+0x20>
 800b9b6:	1a1b      	subs	r3, r3, r0
 800b9b8:	50a3      	str	r3, [r4, r2]
 800b9ba:	e7c9      	b.n	800b950 <_malloc_r+0x20>
 800b9bc:	4622      	mov	r2, r4
 800b9be:	6864      	ldr	r4, [r4, #4]
 800b9c0:	e7cc      	b.n	800b95c <_malloc_r+0x2c>
 800b9c2:	1cc4      	adds	r4, r0, #3
 800b9c4:	f024 0403 	bic.w	r4, r4, #3
 800b9c8:	42a0      	cmp	r0, r4
 800b9ca:	d0e3      	beq.n	800b994 <_malloc_r+0x64>
 800b9cc:	1a21      	subs	r1, r4, r0
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f000 fcf4 	bl	800c3bc <_sbrk_r>
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	d1dd      	bne.n	800b994 <_malloc_r+0x64>
 800b9d8:	e7cf      	b.n	800b97a <_malloc_r+0x4a>
 800b9da:	bf00      	nop
 800b9dc:	200102a8 	.word	0x200102a8
 800b9e0:	200102ac 	.word	0x200102ac

0800b9e4 <__cvt>:
 800b9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e8:	ec55 4b10 	vmov	r4, r5, d0
 800b9ec:	2d00      	cmp	r5, #0
 800b9ee:	460e      	mov	r6, r1
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	462b      	mov	r3, r5
 800b9f4:	bfbb      	ittet	lt
 800b9f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b9fa:	461d      	movlt	r5, r3
 800b9fc:	2300      	movge	r3, #0
 800b9fe:	232d      	movlt	r3, #45	; 0x2d
 800ba00:	700b      	strb	r3, [r1, #0]
 800ba02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ba08:	4691      	mov	r9, r2
 800ba0a:	f023 0820 	bic.w	r8, r3, #32
 800ba0e:	bfbc      	itt	lt
 800ba10:	4622      	movlt	r2, r4
 800ba12:	4614      	movlt	r4, r2
 800ba14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba18:	d005      	beq.n	800ba26 <__cvt+0x42>
 800ba1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ba1e:	d100      	bne.n	800ba22 <__cvt+0x3e>
 800ba20:	3601      	adds	r6, #1
 800ba22:	2102      	movs	r1, #2
 800ba24:	e000      	b.n	800ba28 <__cvt+0x44>
 800ba26:	2103      	movs	r1, #3
 800ba28:	ab03      	add	r3, sp, #12
 800ba2a:	9301      	str	r3, [sp, #4]
 800ba2c:	ab02      	add	r3, sp, #8
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	ec45 4b10 	vmov	d0, r4, r5
 800ba34:	4653      	mov	r3, sl
 800ba36:	4632      	mov	r2, r6
 800ba38:	f000 feb6 	bl	800c7a8 <_dtoa_r>
 800ba3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ba40:	4607      	mov	r7, r0
 800ba42:	d102      	bne.n	800ba4a <__cvt+0x66>
 800ba44:	f019 0f01 	tst.w	r9, #1
 800ba48:	d022      	beq.n	800ba90 <__cvt+0xac>
 800ba4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba4e:	eb07 0906 	add.w	r9, r7, r6
 800ba52:	d110      	bne.n	800ba76 <__cvt+0x92>
 800ba54:	783b      	ldrb	r3, [r7, #0]
 800ba56:	2b30      	cmp	r3, #48	; 0x30
 800ba58:	d10a      	bne.n	800ba70 <__cvt+0x8c>
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4620      	mov	r0, r4
 800ba60:	4629      	mov	r1, r5
 800ba62:	f7f5 f831 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba66:	b918      	cbnz	r0, 800ba70 <__cvt+0x8c>
 800ba68:	f1c6 0601 	rsb	r6, r6, #1
 800ba6c:	f8ca 6000 	str.w	r6, [sl]
 800ba70:	f8da 3000 	ldr.w	r3, [sl]
 800ba74:	4499      	add	r9, r3
 800ba76:	2200      	movs	r2, #0
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	f7f5 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba82:	b108      	cbz	r0, 800ba88 <__cvt+0xa4>
 800ba84:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba88:	2230      	movs	r2, #48	; 0x30
 800ba8a:	9b03      	ldr	r3, [sp, #12]
 800ba8c:	454b      	cmp	r3, r9
 800ba8e:	d307      	bcc.n	800baa0 <__cvt+0xbc>
 800ba90:	9b03      	ldr	r3, [sp, #12]
 800ba92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba94:	1bdb      	subs	r3, r3, r7
 800ba96:	4638      	mov	r0, r7
 800ba98:	6013      	str	r3, [r2, #0]
 800ba9a:	b004      	add	sp, #16
 800ba9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa0:	1c59      	adds	r1, r3, #1
 800baa2:	9103      	str	r1, [sp, #12]
 800baa4:	701a      	strb	r2, [r3, #0]
 800baa6:	e7f0      	b.n	800ba8a <__cvt+0xa6>

0800baa8 <__exponent>:
 800baa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baaa:	4603      	mov	r3, r0
 800baac:	2900      	cmp	r1, #0
 800baae:	bfb8      	it	lt
 800bab0:	4249      	neglt	r1, r1
 800bab2:	f803 2b02 	strb.w	r2, [r3], #2
 800bab6:	bfb4      	ite	lt
 800bab8:	222d      	movlt	r2, #45	; 0x2d
 800baba:	222b      	movge	r2, #43	; 0x2b
 800babc:	2909      	cmp	r1, #9
 800babe:	7042      	strb	r2, [r0, #1]
 800bac0:	dd2a      	ble.n	800bb18 <__exponent+0x70>
 800bac2:	f10d 0407 	add.w	r4, sp, #7
 800bac6:	46a4      	mov	ip, r4
 800bac8:	270a      	movs	r7, #10
 800baca:	46a6      	mov	lr, r4
 800bacc:	460a      	mov	r2, r1
 800bace:	fb91 f6f7 	sdiv	r6, r1, r7
 800bad2:	fb07 1516 	mls	r5, r7, r6, r1
 800bad6:	3530      	adds	r5, #48	; 0x30
 800bad8:	2a63      	cmp	r2, #99	; 0x63
 800bada:	f104 34ff 	add.w	r4, r4, #4294967295
 800bade:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bae2:	4631      	mov	r1, r6
 800bae4:	dcf1      	bgt.n	800baca <__exponent+0x22>
 800bae6:	3130      	adds	r1, #48	; 0x30
 800bae8:	f1ae 0502 	sub.w	r5, lr, #2
 800baec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800baf0:	1c44      	adds	r4, r0, #1
 800baf2:	4629      	mov	r1, r5
 800baf4:	4561      	cmp	r1, ip
 800baf6:	d30a      	bcc.n	800bb0e <__exponent+0x66>
 800baf8:	f10d 0209 	add.w	r2, sp, #9
 800bafc:	eba2 020e 	sub.w	r2, r2, lr
 800bb00:	4565      	cmp	r5, ip
 800bb02:	bf88      	it	hi
 800bb04:	2200      	movhi	r2, #0
 800bb06:	4413      	add	r3, r2
 800bb08:	1a18      	subs	r0, r3, r0
 800bb0a:	b003      	add	sp, #12
 800bb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb12:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bb16:	e7ed      	b.n	800baf4 <__exponent+0x4c>
 800bb18:	2330      	movs	r3, #48	; 0x30
 800bb1a:	3130      	adds	r1, #48	; 0x30
 800bb1c:	7083      	strb	r3, [r0, #2]
 800bb1e:	70c1      	strb	r1, [r0, #3]
 800bb20:	1d03      	adds	r3, r0, #4
 800bb22:	e7f1      	b.n	800bb08 <__exponent+0x60>

0800bb24 <_printf_float>:
 800bb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb28:	ed2d 8b02 	vpush	{d8}
 800bb2c:	b08d      	sub	sp, #52	; 0x34
 800bb2e:	460c      	mov	r4, r1
 800bb30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb34:	4616      	mov	r6, r2
 800bb36:	461f      	mov	r7, r3
 800bb38:	4605      	mov	r5, r0
 800bb3a:	f001 fce3 	bl	800d504 <_localeconv_r>
 800bb3e:	f8d0 a000 	ldr.w	sl, [r0]
 800bb42:	4650      	mov	r0, sl
 800bb44:	f7f4 fb44 	bl	80001d0 <strlen>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	930a      	str	r3, [sp, #40]	; 0x28
 800bb4c:	6823      	ldr	r3, [r4, #0]
 800bb4e:	9305      	str	r3, [sp, #20]
 800bb50:	f8d8 3000 	ldr.w	r3, [r8]
 800bb54:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bb58:	3307      	adds	r3, #7
 800bb5a:	f023 0307 	bic.w	r3, r3, #7
 800bb5e:	f103 0208 	add.w	r2, r3, #8
 800bb62:	f8c8 2000 	str.w	r2, [r8]
 800bb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bb6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bb72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb76:	9307      	str	r3, [sp, #28]
 800bb78:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb7c:	ee08 0a10 	vmov	s16, r0
 800bb80:	4b9f      	ldr	r3, [pc, #636]	; (800be00 <_printf_float+0x2dc>)
 800bb82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb86:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8a:	f7f4 ffcf 	bl	8000b2c <__aeabi_dcmpun>
 800bb8e:	bb88      	cbnz	r0, 800bbf4 <_printf_float+0xd0>
 800bb90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb94:	4b9a      	ldr	r3, [pc, #616]	; (800be00 <_printf_float+0x2dc>)
 800bb96:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9a:	f7f4 ffa9 	bl	8000af0 <__aeabi_dcmple>
 800bb9e:	bb48      	cbnz	r0, 800bbf4 <_printf_float+0xd0>
 800bba0:	2200      	movs	r2, #0
 800bba2:	2300      	movs	r3, #0
 800bba4:	4640      	mov	r0, r8
 800bba6:	4649      	mov	r1, r9
 800bba8:	f7f4 ff98 	bl	8000adc <__aeabi_dcmplt>
 800bbac:	b110      	cbz	r0, 800bbb4 <_printf_float+0x90>
 800bbae:	232d      	movs	r3, #45	; 0x2d
 800bbb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbb4:	4b93      	ldr	r3, [pc, #588]	; (800be04 <_printf_float+0x2e0>)
 800bbb6:	4894      	ldr	r0, [pc, #592]	; (800be08 <_printf_float+0x2e4>)
 800bbb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bbbc:	bf94      	ite	ls
 800bbbe:	4698      	movls	r8, r3
 800bbc0:	4680      	movhi	r8, r0
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	6123      	str	r3, [r4, #16]
 800bbc6:	9b05      	ldr	r3, [sp, #20]
 800bbc8:	f023 0204 	bic.w	r2, r3, #4
 800bbcc:	6022      	str	r2, [r4, #0]
 800bbce:	f04f 0900 	mov.w	r9, #0
 800bbd2:	9700      	str	r7, [sp, #0]
 800bbd4:	4633      	mov	r3, r6
 800bbd6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bbd8:	4621      	mov	r1, r4
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f000 f9d8 	bl	800bf90 <_printf_common>
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	f040 8090 	bne.w	800bd06 <_printf_float+0x1e2>
 800bbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbea:	b00d      	add	sp, #52	; 0x34
 800bbec:	ecbd 8b02 	vpop	{d8}
 800bbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf4:	4642      	mov	r2, r8
 800bbf6:	464b      	mov	r3, r9
 800bbf8:	4640      	mov	r0, r8
 800bbfa:	4649      	mov	r1, r9
 800bbfc:	f7f4 ff96 	bl	8000b2c <__aeabi_dcmpun>
 800bc00:	b140      	cbz	r0, 800bc14 <_printf_float+0xf0>
 800bc02:	464b      	mov	r3, r9
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	bfbc      	itt	lt
 800bc08:	232d      	movlt	r3, #45	; 0x2d
 800bc0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc0e:	487f      	ldr	r0, [pc, #508]	; (800be0c <_printf_float+0x2e8>)
 800bc10:	4b7f      	ldr	r3, [pc, #508]	; (800be10 <_printf_float+0x2ec>)
 800bc12:	e7d1      	b.n	800bbb8 <_printf_float+0x94>
 800bc14:	6863      	ldr	r3, [r4, #4]
 800bc16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bc1a:	9206      	str	r2, [sp, #24]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	d13f      	bne.n	800bca0 <_printf_float+0x17c>
 800bc20:	2306      	movs	r3, #6
 800bc22:	6063      	str	r3, [r4, #4]
 800bc24:	9b05      	ldr	r3, [sp, #20]
 800bc26:	6861      	ldr	r1, [r4, #4]
 800bc28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	9303      	str	r3, [sp, #12]
 800bc30:	ab0a      	add	r3, sp, #40	; 0x28
 800bc32:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bc36:	ab09      	add	r3, sp, #36	; 0x24
 800bc38:	ec49 8b10 	vmov	d0, r8, r9
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	6022      	str	r2, [r4, #0]
 800bc40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bc44:	4628      	mov	r0, r5
 800bc46:	f7ff fecd 	bl	800b9e4 <__cvt>
 800bc4a:	9b06      	ldr	r3, [sp, #24]
 800bc4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc4e:	2b47      	cmp	r3, #71	; 0x47
 800bc50:	4680      	mov	r8, r0
 800bc52:	d108      	bne.n	800bc66 <_printf_float+0x142>
 800bc54:	1cc8      	adds	r0, r1, #3
 800bc56:	db02      	blt.n	800bc5e <_printf_float+0x13a>
 800bc58:	6863      	ldr	r3, [r4, #4]
 800bc5a:	4299      	cmp	r1, r3
 800bc5c:	dd41      	ble.n	800bce2 <_printf_float+0x1be>
 800bc5e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bc62:	fa5f fb8b 	uxtb.w	fp, fp
 800bc66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc6a:	d820      	bhi.n	800bcae <_printf_float+0x18a>
 800bc6c:	3901      	subs	r1, #1
 800bc6e:	465a      	mov	r2, fp
 800bc70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bc74:	9109      	str	r1, [sp, #36]	; 0x24
 800bc76:	f7ff ff17 	bl	800baa8 <__exponent>
 800bc7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc7c:	1813      	adds	r3, r2, r0
 800bc7e:	2a01      	cmp	r2, #1
 800bc80:	4681      	mov	r9, r0
 800bc82:	6123      	str	r3, [r4, #16]
 800bc84:	dc02      	bgt.n	800bc8c <_printf_float+0x168>
 800bc86:	6822      	ldr	r2, [r4, #0]
 800bc88:	07d2      	lsls	r2, r2, #31
 800bc8a:	d501      	bpl.n	800bc90 <_printf_float+0x16c>
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	6123      	str	r3, [r4, #16]
 800bc90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d09c      	beq.n	800bbd2 <_printf_float+0xae>
 800bc98:	232d      	movs	r3, #45	; 0x2d
 800bc9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc9e:	e798      	b.n	800bbd2 <_printf_float+0xae>
 800bca0:	9a06      	ldr	r2, [sp, #24]
 800bca2:	2a47      	cmp	r2, #71	; 0x47
 800bca4:	d1be      	bne.n	800bc24 <_printf_float+0x100>
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1bc      	bne.n	800bc24 <_printf_float+0x100>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e7b9      	b.n	800bc22 <_printf_float+0xfe>
 800bcae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bcb2:	d118      	bne.n	800bce6 <_printf_float+0x1c2>
 800bcb4:	2900      	cmp	r1, #0
 800bcb6:	6863      	ldr	r3, [r4, #4]
 800bcb8:	dd0b      	ble.n	800bcd2 <_printf_float+0x1ae>
 800bcba:	6121      	str	r1, [r4, #16]
 800bcbc:	b913      	cbnz	r3, 800bcc4 <_printf_float+0x1a0>
 800bcbe:	6822      	ldr	r2, [r4, #0]
 800bcc0:	07d0      	lsls	r0, r2, #31
 800bcc2:	d502      	bpl.n	800bcca <_printf_float+0x1a6>
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	440b      	add	r3, r1
 800bcc8:	6123      	str	r3, [r4, #16]
 800bcca:	65a1      	str	r1, [r4, #88]	; 0x58
 800bccc:	f04f 0900 	mov.w	r9, #0
 800bcd0:	e7de      	b.n	800bc90 <_printf_float+0x16c>
 800bcd2:	b913      	cbnz	r3, 800bcda <_printf_float+0x1b6>
 800bcd4:	6822      	ldr	r2, [r4, #0]
 800bcd6:	07d2      	lsls	r2, r2, #31
 800bcd8:	d501      	bpl.n	800bcde <_printf_float+0x1ba>
 800bcda:	3302      	adds	r3, #2
 800bcdc:	e7f4      	b.n	800bcc8 <_printf_float+0x1a4>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e7f2      	b.n	800bcc8 <_printf_float+0x1a4>
 800bce2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce8:	4299      	cmp	r1, r3
 800bcea:	db05      	blt.n	800bcf8 <_printf_float+0x1d4>
 800bcec:	6823      	ldr	r3, [r4, #0]
 800bcee:	6121      	str	r1, [r4, #16]
 800bcf0:	07d8      	lsls	r0, r3, #31
 800bcf2:	d5ea      	bpl.n	800bcca <_printf_float+0x1a6>
 800bcf4:	1c4b      	adds	r3, r1, #1
 800bcf6:	e7e7      	b.n	800bcc8 <_printf_float+0x1a4>
 800bcf8:	2900      	cmp	r1, #0
 800bcfa:	bfd4      	ite	le
 800bcfc:	f1c1 0202 	rsble	r2, r1, #2
 800bd00:	2201      	movgt	r2, #1
 800bd02:	4413      	add	r3, r2
 800bd04:	e7e0      	b.n	800bcc8 <_printf_float+0x1a4>
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	055a      	lsls	r2, r3, #21
 800bd0a:	d407      	bmi.n	800bd1c <_printf_float+0x1f8>
 800bd0c:	6923      	ldr	r3, [r4, #16]
 800bd0e:	4642      	mov	r2, r8
 800bd10:	4631      	mov	r1, r6
 800bd12:	4628      	mov	r0, r5
 800bd14:	47b8      	blx	r7
 800bd16:	3001      	adds	r0, #1
 800bd18:	d12c      	bne.n	800bd74 <_printf_float+0x250>
 800bd1a:	e764      	b.n	800bbe6 <_printf_float+0xc2>
 800bd1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd20:	f240 80e0 	bls.w	800bee4 <_printf_float+0x3c0>
 800bd24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f7f4 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d034      	beq.n	800bd9e <_printf_float+0x27a>
 800bd34:	4a37      	ldr	r2, [pc, #220]	; (800be14 <_printf_float+0x2f0>)
 800bd36:	2301      	movs	r3, #1
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	47b8      	blx	r7
 800bd3e:	3001      	adds	r0, #1
 800bd40:	f43f af51 	beq.w	800bbe6 <_printf_float+0xc2>
 800bd44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	db02      	blt.n	800bd52 <_printf_float+0x22e>
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	07d8      	lsls	r0, r3, #31
 800bd50:	d510      	bpl.n	800bd74 <_printf_float+0x250>
 800bd52:	ee18 3a10 	vmov	r3, s16
 800bd56:	4652      	mov	r2, sl
 800bd58:	4631      	mov	r1, r6
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	47b8      	blx	r7
 800bd5e:	3001      	adds	r0, #1
 800bd60:	f43f af41 	beq.w	800bbe6 <_printf_float+0xc2>
 800bd64:	f04f 0800 	mov.w	r8, #0
 800bd68:	f104 091a 	add.w	r9, r4, #26
 800bd6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	4543      	cmp	r3, r8
 800bd72:	dc09      	bgt.n	800bd88 <_printf_float+0x264>
 800bd74:	6823      	ldr	r3, [r4, #0]
 800bd76:	079b      	lsls	r3, r3, #30
 800bd78:	f100 8105 	bmi.w	800bf86 <_printf_float+0x462>
 800bd7c:	68e0      	ldr	r0, [r4, #12]
 800bd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd80:	4298      	cmp	r0, r3
 800bd82:	bfb8      	it	lt
 800bd84:	4618      	movlt	r0, r3
 800bd86:	e730      	b.n	800bbea <_printf_float+0xc6>
 800bd88:	2301      	movs	r3, #1
 800bd8a:	464a      	mov	r2, r9
 800bd8c:	4631      	mov	r1, r6
 800bd8e:	4628      	mov	r0, r5
 800bd90:	47b8      	blx	r7
 800bd92:	3001      	adds	r0, #1
 800bd94:	f43f af27 	beq.w	800bbe6 <_printf_float+0xc2>
 800bd98:	f108 0801 	add.w	r8, r8, #1
 800bd9c:	e7e6      	b.n	800bd6c <_printf_float+0x248>
 800bd9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	dc39      	bgt.n	800be18 <_printf_float+0x2f4>
 800bda4:	4a1b      	ldr	r2, [pc, #108]	; (800be14 <_printf_float+0x2f0>)
 800bda6:	2301      	movs	r3, #1
 800bda8:	4631      	mov	r1, r6
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b8      	blx	r7
 800bdae:	3001      	adds	r0, #1
 800bdb0:	f43f af19 	beq.w	800bbe6 <_printf_float+0xc2>
 800bdb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	d102      	bne.n	800bdc2 <_printf_float+0x29e>
 800bdbc:	6823      	ldr	r3, [r4, #0]
 800bdbe:	07d9      	lsls	r1, r3, #31
 800bdc0:	d5d8      	bpl.n	800bd74 <_printf_float+0x250>
 800bdc2:	ee18 3a10 	vmov	r3, s16
 800bdc6:	4652      	mov	r2, sl
 800bdc8:	4631      	mov	r1, r6
 800bdca:	4628      	mov	r0, r5
 800bdcc:	47b8      	blx	r7
 800bdce:	3001      	adds	r0, #1
 800bdd0:	f43f af09 	beq.w	800bbe6 <_printf_float+0xc2>
 800bdd4:	f04f 0900 	mov.w	r9, #0
 800bdd8:	f104 0a1a 	add.w	sl, r4, #26
 800bddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdde:	425b      	negs	r3, r3
 800bde0:	454b      	cmp	r3, r9
 800bde2:	dc01      	bgt.n	800bde8 <_printf_float+0x2c4>
 800bde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bde6:	e792      	b.n	800bd0e <_printf_float+0x1ea>
 800bde8:	2301      	movs	r3, #1
 800bdea:	4652      	mov	r2, sl
 800bdec:	4631      	mov	r1, r6
 800bdee:	4628      	mov	r0, r5
 800bdf0:	47b8      	blx	r7
 800bdf2:	3001      	adds	r0, #1
 800bdf4:	f43f aef7 	beq.w	800bbe6 <_printf_float+0xc2>
 800bdf8:	f109 0901 	add.w	r9, r9, #1
 800bdfc:	e7ee      	b.n	800bddc <_printf_float+0x2b8>
 800bdfe:	bf00      	nop
 800be00:	7fefffff 	.word	0x7fefffff
 800be04:	0800ea58 	.word	0x0800ea58
 800be08:	0800ea5c 	.word	0x0800ea5c
 800be0c:	0800ea64 	.word	0x0800ea64
 800be10:	0800ea60 	.word	0x0800ea60
 800be14:	0800ea68 	.word	0x0800ea68
 800be18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be1c:	429a      	cmp	r2, r3
 800be1e:	bfa8      	it	ge
 800be20:	461a      	movge	r2, r3
 800be22:	2a00      	cmp	r2, #0
 800be24:	4691      	mov	r9, r2
 800be26:	dc37      	bgt.n	800be98 <_printf_float+0x374>
 800be28:	f04f 0b00 	mov.w	fp, #0
 800be2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be30:	f104 021a 	add.w	r2, r4, #26
 800be34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be36:	9305      	str	r3, [sp, #20]
 800be38:	eba3 0309 	sub.w	r3, r3, r9
 800be3c:	455b      	cmp	r3, fp
 800be3e:	dc33      	bgt.n	800bea8 <_printf_float+0x384>
 800be40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be44:	429a      	cmp	r2, r3
 800be46:	db3b      	blt.n	800bec0 <_printf_float+0x39c>
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	07da      	lsls	r2, r3, #31
 800be4c:	d438      	bmi.n	800bec0 <_printf_float+0x39c>
 800be4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be50:	9b05      	ldr	r3, [sp, #20]
 800be52:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	eba2 0901 	sub.w	r9, r2, r1
 800be5a:	4599      	cmp	r9, r3
 800be5c:	bfa8      	it	ge
 800be5e:	4699      	movge	r9, r3
 800be60:	f1b9 0f00 	cmp.w	r9, #0
 800be64:	dc35      	bgt.n	800bed2 <_printf_float+0x3ae>
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be6e:	f104 0a1a 	add.w	sl, r4, #26
 800be72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be76:	1a9b      	subs	r3, r3, r2
 800be78:	eba3 0309 	sub.w	r3, r3, r9
 800be7c:	4543      	cmp	r3, r8
 800be7e:	f77f af79 	ble.w	800bd74 <_printf_float+0x250>
 800be82:	2301      	movs	r3, #1
 800be84:	4652      	mov	r2, sl
 800be86:	4631      	mov	r1, r6
 800be88:	4628      	mov	r0, r5
 800be8a:	47b8      	blx	r7
 800be8c:	3001      	adds	r0, #1
 800be8e:	f43f aeaa 	beq.w	800bbe6 <_printf_float+0xc2>
 800be92:	f108 0801 	add.w	r8, r8, #1
 800be96:	e7ec      	b.n	800be72 <_printf_float+0x34e>
 800be98:	4613      	mov	r3, r2
 800be9a:	4631      	mov	r1, r6
 800be9c:	4642      	mov	r2, r8
 800be9e:	4628      	mov	r0, r5
 800bea0:	47b8      	blx	r7
 800bea2:	3001      	adds	r0, #1
 800bea4:	d1c0      	bne.n	800be28 <_printf_float+0x304>
 800bea6:	e69e      	b.n	800bbe6 <_printf_float+0xc2>
 800bea8:	2301      	movs	r3, #1
 800beaa:	4631      	mov	r1, r6
 800beac:	4628      	mov	r0, r5
 800beae:	9205      	str	r2, [sp, #20]
 800beb0:	47b8      	blx	r7
 800beb2:	3001      	adds	r0, #1
 800beb4:	f43f ae97 	beq.w	800bbe6 <_printf_float+0xc2>
 800beb8:	9a05      	ldr	r2, [sp, #20]
 800beba:	f10b 0b01 	add.w	fp, fp, #1
 800bebe:	e7b9      	b.n	800be34 <_printf_float+0x310>
 800bec0:	ee18 3a10 	vmov	r3, s16
 800bec4:	4652      	mov	r2, sl
 800bec6:	4631      	mov	r1, r6
 800bec8:	4628      	mov	r0, r5
 800beca:	47b8      	blx	r7
 800becc:	3001      	adds	r0, #1
 800bece:	d1be      	bne.n	800be4e <_printf_float+0x32a>
 800bed0:	e689      	b.n	800bbe6 <_printf_float+0xc2>
 800bed2:	9a05      	ldr	r2, [sp, #20]
 800bed4:	464b      	mov	r3, r9
 800bed6:	4442      	add	r2, r8
 800bed8:	4631      	mov	r1, r6
 800beda:	4628      	mov	r0, r5
 800bedc:	47b8      	blx	r7
 800bede:	3001      	adds	r0, #1
 800bee0:	d1c1      	bne.n	800be66 <_printf_float+0x342>
 800bee2:	e680      	b.n	800bbe6 <_printf_float+0xc2>
 800bee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bee6:	2a01      	cmp	r2, #1
 800bee8:	dc01      	bgt.n	800beee <_printf_float+0x3ca>
 800beea:	07db      	lsls	r3, r3, #31
 800beec:	d538      	bpl.n	800bf60 <_printf_float+0x43c>
 800beee:	2301      	movs	r3, #1
 800bef0:	4642      	mov	r2, r8
 800bef2:	4631      	mov	r1, r6
 800bef4:	4628      	mov	r0, r5
 800bef6:	47b8      	blx	r7
 800bef8:	3001      	adds	r0, #1
 800befa:	f43f ae74 	beq.w	800bbe6 <_printf_float+0xc2>
 800befe:	ee18 3a10 	vmov	r3, s16
 800bf02:	4652      	mov	r2, sl
 800bf04:	4631      	mov	r1, r6
 800bf06:	4628      	mov	r0, r5
 800bf08:	47b8      	blx	r7
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	f43f ae6b 	beq.w	800bbe6 <_printf_float+0xc2>
 800bf10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf14:	2200      	movs	r2, #0
 800bf16:	2300      	movs	r3, #0
 800bf18:	f7f4 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf1c:	b9d8      	cbnz	r0, 800bf56 <_printf_float+0x432>
 800bf1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf20:	f108 0201 	add.w	r2, r8, #1
 800bf24:	3b01      	subs	r3, #1
 800bf26:	4631      	mov	r1, r6
 800bf28:	4628      	mov	r0, r5
 800bf2a:	47b8      	blx	r7
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	d10e      	bne.n	800bf4e <_printf_float+0x42a>
 800bf30:	e659      	b.n	800bbe6 <_printf_float+0xc2>
 800bf32:	2301      	movs	r3, #1
 800bf34:	4652      	mov	r2, sl
 800bf36:	4631      	mov	r1, r6
 800bf38:	4628      	mov	r0, r5
 800bf3a:	47b8      	blx	r7
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	f43f ae52 	beq.w	800bbe6 <_printf_float+0xc2>
 800bf42:	f108 0801 	add.w	r8, r8, #1
 800bf46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	4543      	cmp	r3, r8
 800bf4c:	dcf1      	bgt.n	800bf32 <_printf_float+0x40e>
 800bf4e:	464b      	mov	r3, r9
 800bf50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bf54:	e6dc      	b.n	800bd10 <_printf_float+0x1ec>
 800bf56:	f04f 0800 	mov.w	r8, #0
 800bf5a:	f104 0a1a 	add.w	sl, r4, #26
 800bf5e:	e7f2      	b.n	800bf46 <_printf_float+0x422>
 800bf60:	2301      	movs	r3, #1
 800bf62:	4642      	mov	r2, r8
 800bf64:	e7df      	b.n	800bf26 <_printf_float+0x402>
 800bf66:	2301      	movs	r3, #1
 800bf68:	464a      	mov	r2, r9
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	47b8      	blx	r7
 800bf70:	3001      	adds	r0, #1
 800bf72:	f43f ae38 	beq.w	800bbe6 <_printf_float+0xc2>
 800bf76:	f108 0801 	add.w	r8, r8, #1
 800bf7a:	68e3      	ldr	r3, [r4, #12]
 800bf7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf7e:	1a5b      	subs	r3, r3, r1
 800bf80:	4543      	cmp	r3, r8
 800bf82:	dcf0      	bgt.n	800bf66 <_printf_float+0x442>
 800bf84:	e6fa      	b.n	800bd7c <_printf_float+0x258>
 800bf86:	f04f 0800 	mov.w	r8, #0
 800bf8a:	f104 0919 	add.w	r9, r4, #25
 800bf8e:	e7f4      	b.n	800bf7a <_printf_float+0x456>

0800bf90 <_printf_common>:
 800bf90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf94:	4616      	mov	r6, r2
 800bf96:	4699      	mov	r9, r3
 800bf98:	688a      	ldr	r2, [r1, #8]
 800bf9a:	690b      	ldr	r3, [r1, #16]
 800bf9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	bfb8      	it	lt
 800bfa4:	4613      	movlt	r3, r2
 800bfa6:	6033      	str	r3, [r6, #0]
 800bfa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfac:	4607      	mov	r7, r0
 800bfae:	460c      	mov	r4, r1
 800bfb0:	b10a      	cbz	r2, 800bfb6 <_printf_common+0x26>
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	6033      	str	r3, [r6, #0]
 800bfb6:	6823      	ldr	r3, [r4, #0]
 800bfb8:	0699      	lsls	r1, r3, #26
 800bfba:	bf42      	ittt	mi
 800bfbc:	6833      	ldrmi	r3, [r6, #0]
 800bfbe:	3302      	addmi	r3, #2
 800bfc0:	6033      	strmi	r3, [r6, #0]
 800bfc2:	6825      	ldr	r5, [r4, #0]
 800bfc4:	f015 0506 	ands.w	r5, r5, #6
 800bfc8:	d106      	bne.n	800bfd8 <_printf_common+0x48>
 800bfca:	f104 0a19 	add.w	sl, r4, #25
 800bfce:	68e3      	ldr	r3, [r4, #12]
 800bfd0:	6832      	ldr	r2, [r6, #0]
 800bfd2:	1a9b      	subs	r3, r3, r2
 800bfd4:	42ab      	cmp	r3, r5
 800bfd6:	dc26      	bgt.n	800c026 <_printf_common+0x96>
 800bfd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bfdc:	1e13      	subs	r3, r2, #0
 800bfde:	6822      	ldr	r2, [r4, #0]
 800bfe0:	bf18      	it	ne
 800bfe2:	2301      	movne	r3, #1
 800bfe4:	0692      	lsls	r2, r2, #26
 800bfe6:	d42b      	bmi.n	800c040 <_printf_common+0xb0>
 800bfe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfec:	4649      	mov	r1, r9
 800bfee:	4638      	mov	r0, r7
 800bff0:	47c0      	blx	r8
 800bff2:	3001      	adds	r0, #1
 800bff4:	d01e      	beq.n	800c034 <_printf_common+0xa4>
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	68e5      	ldr	r5, [r4, #12]
 800bffa:	6832      	ldr	r2, [r6, #0]
 800bffc:	f003 0306 	and.w	r3, r3, #6
 800c000:	2b04      	cmp	r3, #4
 800c002:	bf08      	it	eq
 800c004:	1aad      	subeq	r5, r5, r2
 800c006:	68a3      	ldr	r3, [r4, #8]
 800c008:	6922      	ldr	r2, [r4, #16]
 800c00a:	bf0c      	ite	eq
 800c00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c010:	2500      	movne	r5, #0
 800c012:	4293      	cmp	r3, r2
 800c014:	bfc4      	itt	gt
 800c016:	1a9b      	subgt	r3, r3, r2
 800c018:	18ed      	addgt	r5, r5, r3
 800c01a:	2600      	movs	r6, #0
 800c01c:	341a      	adds	r4, #26
 800c01e:	42b5      	cmp	r5, r6
 800c020:	d11a      	bne.n	800c058 <_printf_common+0xc8>
 800c022:	2000      	movs	r0, #0
 800c024:	e008      	b.n	800c038 <_printf_common+0xa8>
 800c026:	2301      	movs	r3, #1
 800c028:	4652      	mov	r2, sl
 800c02a:	4649      	mov	r1, r9
 800c02c:	4638      	mov	r0, r7
 800c02e:	47c0      	blx	r8
 800c030:	3001      	adds	r0, #1
 800c032:	d103      	bne.n	800c03c <_printf_common+0xac>
 800c034:	f04f 30ff 	mov.w	r0, #4294967295
 800c038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c03c:	3501      	adds	r5, #1
 800c03e:	e7c6      	b.n	800bfce <_printf_common+0x3e>
 800c040:	18e1      	adds	r1, r4, r3
 800c042:	1c5a      	adds	r2, r3, #1
 800c044:	2030      	movs	r0, #48	; 0x30
 800c046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c04a:	4422      	add	r2, r4
 800c04c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c054:	3302      	adds	r3, #2
 800c056:	e7c7      	b.n	800bfe8 <_printf_common+0x58>
 800c058:	2301      	movs	r3, #1
 800c05a:	4622      	mov	r2, r4
 800c05c:	4649      	mov	r1, r9
 800c05e:	4638      	mov	r0, r7
 800c060:	47c0      	blx	r8
 800c062:	3001      	adds	r0, #1
 800c064:	d0e6      	beq.n	800c034 <_printf_common+0xa4>
 800c066:	3601      	adds	r6, #1
 800c068:	e7d9      	b.n	800c01e <_printf_common+0x8e>
	...

0800c06c <_printf_i>:
 800c06c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c070:	460c      	mov	r4, r1
 800c072:	4691      	mov	r9, r2
 800c074:	7e27      	ldrb	r7, [r4, #24]
 800c076:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c078:	2f78      	cmp	r7, #120	; 0x78
 800c07a:	4680      	mov	r8, r0
 800c07c:	469a      	mov	sl, r3
 800c07e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c082:	d807      	bhi.n	800c094 <_printf_i+0x28>
 800c084:	2f62      	cmp	r7, #98	; 0x62
 800c086:	d80a      	bhi.n	800c09e <_printf_i+0x32>
 800c088:	2f00      	cmp	r7, #0
 800c08a:	f000 80d8 	beq.w	800c23e <_printf_i+0x1d2>
 800c08e:	2f58      	cmp	r7, #88	; 0x58
 800c090:	f000 80a3 	beq.w	800c1da <_printf_i+0x16e>
 800c094:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c09c:	e03a      	b.n	800c114 <_printf_i+0xa8>
 800c09e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0a2:	2b15      	cmp	r3, #21
 800c0a4:	d8f6      	bhi.n	800c094 <_printf_i+0x28>
 800c0a6:	a001      	add	r0, pc, #4	; (adr r0, 800c0ac <_printf_i+0x40>)
 800c0a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c0ac:	0800c105 	.word	0x0800c105
 800c0b0:	0800c119 	.word	0x0800c119
 800c0b4:	0800c095 	.word	0x0800c095
 800c0b8:	0800c095 	.word	0x0800c095
 800c0bc:	0800c095 	.word	0x0800c095
 800c0c0:	0800c095 	.word	0x0800c095
 800c0c4:	0800c119 	.word	0x0800c119
 800c0c8:	0800c095 	.word	0x0800c095
 800c0cc:	0800c095 	.word	0x0800c095
 800c0d0:	0800c095 	.word	0x0800c095
 800c0d4:	0800c095 	.word	0x0800c095
 800c0d8:	0800c225 	.word	0x0800c225
 800c0dc:	0800c149 	.word	0x0800c149
 800c0e0:	0800c207 	.word	0x0800c207
 800c0e4:	0800c095 	.word	0x0800c095
 800c0e8:	0800c095 	.word	0x0800c095
 800c0ec:	0800c247 	.word	0x0800c247
 800c0f0:	0800c095 	.word	0x0800c095
 800c0f4:	0800c149 	.word	0x0800c149
 800c0f8:	0800c095 	.word	0x0800c095
 800c0fc:	0800c095 	.word	0x0800c095
 800c100:	0800c20f 	.word	0x0800c20f
 800c104:	680b      	ldr	r3, [r1, #0]
 800c106:	1d1a      	adds	r2, r3, #4
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	600a      	str	r2, [r1, #0]
 800c10c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c114:	2301      	movs	r3, #1
 800c116:	e0a3      	b.n	800c260 <_printf_i+0x1f4>
 800c118:	6825      	ldr	r5, [r4, #0]
 800c11a:	6808      	ldr	r0, [r1, #0]
 800c11c:	062e      	lsls	r6, r5, #24
 800c11e:	f100 0304 	add.w	r3, r0, #4
 800c122:	d50a      	bpl.n	800c13a <_printf_i+0xce>
 800c124:	6805      	ldr	r5, [r0, #0]
 800c126:	600b      	str	r3, [r1, #0]
 800c128:	2d00      	cmp	r5, #0
 800c12a:	da03      	bge.n	800c134 <_printf_i+0xc8>
 800c12c:	232d      	movs	r3, #45	; 0x2d
 800c12e:	426d      	negs	r5, r5
 800c130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c134:	485e      	ldr	r0, [pc, #376]	; (800c2b0 <_printf_i+0x244>)
 800c136:	230a      	movs	r3, #10
 800c138:	e019      	b.n	800c16e <_printf_i+0x102>
 800c13a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c13e:	6805      	ldr	r5, [r0, #0]
 800c140:	600b      	str	r3, [r1, #0]
 800c142:	bf18      	it	ne
 800c144:	b22d      	sxthne	r5, r5
 800c146:	e7ef      	b.n	800c128 <_printf_i+0xbc>
 800c148:	680b      	ldr	r3, [r1, #0]
 800c14a:	6825      	ldr	r5, [r4, #0]
 800c14c:	1d18      	adds	r0, r3, #4
 800c14e:	6008      	str	r0, [r1, #0]
 800c150:	0628      	lsls	r0, r5, #24
 800c152:	d501      	bpl.n	800c158 <_printf_i+0xec>
 800c154:	681d      	ldr	r5, [r3, #0]
 800c156:	e002      	b.n	800c15e <_printf_i+0xf2>
 800c158:	0669      	lsls	r1, r5, #25
 800c15a:	d5fb      	bpl.n	800c154 <_printf_i+0xe8>
 800c15c:	881d      	ldrh	r5, [r3, #0]
 800c15e:	4854      	ldr	r0, [pc, #336]	; (800c2b0 <_printf_i+0x244>)
 800c160:	2f6f      	cmp	r7, #111	; 0x6f
 800c162:	bf0c      	ite	eq
 800c164:	2308      	moveq	r3, #8
 800c166:	230a      	movne	r3, #10
 800c168:	2100      	movs	r1, #0
 800c16a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c16e:	6866      	ldr	r6, [r4, #4]
 800c170:	60a6      	str	r6, [r4, #8]
 800c172:	2e00      	cmp	r6, #0
 800c174:	bfa2      	ittt	ge
 800c176:	6821      	ldrge	r1, [r4, #0]
 800c178:	f021 0104 	bicge.w	r1, r1, #4
 800c17c:	6021      	strge	r1, [r4, #0]
 800c17e:	b90d      	cbnz	r5, 800c184 <_printf_i+0x118>
 800c180:	2e00      	cmp	r6, #0
 800c182:	d04d      	beq.n	800c220 <_printf_i+0x1b4>
 800c184:	4616      	mov	r6, r2
 800c186:	fbb5 f1f3 	udiv	r1, r5, r3
 800c18a:	fb03 5711 	mls	r7, r3, r1, r5
 800c18e:	5dc7      	ldrb	r7, [r0, r7]
 800c190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c194:	462f      	mov	r7, r5
 800c196:	42bb      	cmp	r3, r7
 800c198:	460d      	mov	r5, r1
 800c19a:	d9f4      	bls.n	800c186 <_printf_i+0x11a>
 800c19c:	2b08      	cmp	r3, #8
 800c19e:	d10b      	bne.n	800c1b8 <_printf_i+0x14c>
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	07df      	lsls	r7, r3, #31
 800c1a4:	d508      	bpl.n	800c1b8 <_printf_i+0x14c>
 800c1a6:	6923      	ldr	r3, [r4, #16]
 800c1a8:	6861      	ldr	r1, [r4, #4]
 800c1aa:	4299      	cmp	r1, r3
 800c1ac:	bfde      	ittt	le
 800c1ae:	2330      	movle	r3, #48	; 0x30
 800c1b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1b8:	1b92      	subs	r2, r2, r6
 800c1ba:	6122      	str	r2, [r4, #16]
 800c1bc:	f8cd a000 	str.w	sl, [sp]
 800c1c0:	464b      	mov	r3, r9
 800c1c2:	aa03      	add	r2, sp, #12
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	4640      	mov	r0, r8
 800c1c8:	f7ff fee2 	bl	800bf90 <_printf_common>
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	d14c      	bne.n	800c26a <_printf_i+0x1fe>
 800c1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d4:	b004      	add	sp, #16
 800c1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1da:	4835      	ldr	r0, [pc, #212]	; (800c2b0 <_printf_i+0x244>)
 800c1dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1e0:	6823      	ldr	r3, [r4, #0]
 800c1e2:	680e      	ldr	r6, [r1, #0]
 800c1e4:	061f      	lsls	r7, r3, #24
 800c1e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800c1ea:	600e      	str	r6, [r1, #0]
 800c1ec:	d514      	bpl.n	800c218 <_printf_i+0x1ac>
 800c1ee:	07d9      	lsls	r1, r3, #31
 800c1f0:	bf44      	itt	mi
 800c1f2:	f043 0320 	orrmi.w	r3, r3, #32
 800c1f6:	6023      	strmi	r3, [r4, #0]
 800c1f8:	b91d      	cbnz	r5, 800c202 <_printf_i+0x196>
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	f023 0320 	bic.w	r3, r3, #32
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	2310      	movs	r3, #16
 800c204:	e7b0      	b.n	800c168 <_printf_i+0xfc>
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	f043 0320 	orr.w	r3, r3, #32
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	2378      	movs	r3, #120	; 0x78
 800c210:	4828      	ldr	r0, [pc, #160]	; (800c2b4 <_printf_i+0x248>)
 800c212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c216:	e7e3      	b.n	800c1e0 <_printf_i+0x174>
 800c218:	065e      	lsls	r6, r3, #25
 800c21a:	bf48      	it	mi
 800c21c:	b2ad      	uxthmi	r5, r5
 800c21e:	e7e6      	b.n	800c1ee <_printf_i+0x182>
 800c220:	4616      	mov	r6, r2
 800c222:	e7bb      	b.n	800c19c <_printf_i+0x130>
 800c224:	680b      	ldr	r3, [r1, #0]
 800c226:	6826      	ldr	r6, [r4, #0]
 800c228:	6960      	ldr	r0, [r4, #20]
 800c22a:	1d1d      	adds	r5, r3, #4
 800c22c:	600d      	str	r5, [r1, #0]
 800c22e:	0635      	lsls	r5, r6, #24
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	d501      	bpl.n	800c238 <_printf_i+0x1cc>
 800c234:	6018      	str	r0, [r3, #0]
 800c236:	e002      	b.n	800c23e <_printf_i+0x1d2>
 800c238:	0671      	lsls	r1, r6, #25
 800c23a:	d5fb      	bpl.n	800c234 <_printf_i+0x1c8>
 800c23c:	8018      	strh	r0, [r3, #0]
 800c23e:	2300      	movs	r3, #0
 800c240:	6123      	str	r3, [r4, #16]
 800c242:	4616      	mov	r6, r2
 800c244:	e7ba      	b.n	800c1bc <_printf_i+0x150>
 800c246:	680b      	ldr	r3, [r1, #0]
 800c248:	1d1a      	adds	r2, r3, #4
 800c24a:	600a      	str	r2, [r1, #0]
 800c24c:	681e      	ldr	r6, [r3, #0]
 800c24e:	6862      	ldr	r2, [r4, #4]
 800c250:	2100      	movs	r1, #0
 800c252:	4630      	mov	r0, r6
 800c254:	f7f3 ffc4 	bl	80001e0 <memchr>
 800c258:	b108      	cbz	r0, 800c25e <_printf_i+0x1f2>
 800c25a:	1b80      	subs	r0, r0, r6
 800c25c:	6060      	str	r0, [r4, #4]
 800c25e:	6863      	ldr	r3, [r4, #4]
 800c260:	6123      	str	r3, [r4, #16]
 800c262:	2300      	movs	r3, #0
 800c264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c268:	e7a8      	b.n	800c1bc <_printf_i+0x150>
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	4632      	mov	r2, r6
 800c26e:	4649      	mov	r1, r9
 800c270:	4640      	mov	r0, r8
 800c272:	47d0      	blx	sl
 800c274:	3001      	adds	r0, #1
 800c276:	d0ab      	beq.n	800c1d0 <_printf_i+0x164>
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	079b      	lsls	r3, r3, #30
 800c27c:	d413      	bmi.n	800c2a6 <_printf_i+0x23a>
 800c27e:	68e0      	ldr	r0, [r4, #12]
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	4298      	cmp	r0, r3
 800c284:	bfb8      	it	lt
 800c286:	4618      	movlt	r0, r3
 800c288:	e7a4      	b.n	800c1d4 <_printf_i+0x168>
 800c28a:	2301      	movs	r3, #1
 800c28c:	4632      	mov	r2, r6
 800c28e:	4649      	mov	r1, r9
 800c290:	4640      	mov	r0, r8
 800c292:	47d0      	blx	sl
 800c294:	3001      	adds	r0, #1
 800c296:	d09b      	beq.n	800c1d0 <_printf_i+0x164>
 800c298:	3501      	adds	r5, #1
 800c29a:	68e3      	ldr	r3, [r4, #12]
 800c29c:	9903      	ldr	r1, [sp, #12]
 800c29e:	1a5b      	subs	r3, r3, r1
 800c2a0:	42ab      	cmp	r3, r5
 800c2a2:	dcf2      	bgt.n	800c28a <_printf_i+0x21e>
 800c2a4:	e7eb      	b.n	800c27e <_printf_i+0x212>
 800c2a6:	2500      	movs	r5, #0
 800c2a8:	f104 0619 	add.w	r6, r4, #25
 800c2ac:	e7f5      	b.n	800c29a <_printf_i+0x22e>
 800c2ae:	bf00      	nop
 800c2b0:	0800ea6a 	.word	0x0800ea6a
 800c2b4:	0800ea7b 	.word	0x0800ea7b

0800c2b8 <iprintf>:
 800c2b8:	b40f      	push	{r0, r1, r2, r3}
 800c2ba:	4b0a      	ldr	r3, [pc, #40]	; (800c2e4 <iprintf+0x2c>)
 800c2bc:	b513      	push	{r0, r1, r4, lr}
 800c2be:	681c      	ldr	r4, [r3, #0]
 800c2c0:	b124      	cbz	r4, 800c2cc <iprintf+0x14>
 800c2c2:	69a3      	ldr	r3, [r4, #24]
 800c2c4:	b913      	cbnz	r3, 800c2cc <iprintf+0x14>
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f7ff fa56 	bl	800b778 <__sinit>
 800c2cc:	ab05      	add	r3, sp, #20
 800c2ce:	9a04      	ldr	r2, [sp, #16]
 800c2d0:	68a1      	ldr	r1, [r4, #8]
 800c2d2:	9301      	str	r3, [sp, #4]
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f001 ff07 	bl	800e0e8 <_vfiprintf_r>
 800c2da:	b002      	add	sp, #8
 800c2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2e0:	b004      	add	sp, #16
 800c2e2:	4770      	bx	lr
 800c2e4:	20000150 	.word	0x20000150

0800c2e8 <cleanup_glue>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	6809      	ldr	r1, [r1, #0]
 800c2ee:	4605      	mov	r5, r0
 800c2f0:	b109      	cbz	r1, 800c2f6 <cleanup_glue+0xe>
 800c2f2:	f7ff fff9 	bl	800c2e8 <cleanup_glue>
 800c2f6:	4621      	mov	r1, r4
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2fe:	f001 bd1d 	b.w	800dd3c <_free_r>
	...

0800c304 <_reclaim_reent>:
 800c304:	4b2c      	ldr	r3, [pc, #176]	; (800c3b8 <_reclaim_reent+0xb4>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4283      	cmp	r3, r0
 800c30a:	b570      	push	{r4, r5, r6, lr}
 800c30c:	4604      	mov	r4, r0
 800c30e:	d051      	beq.n	800c3b4 <_reclaim_reent+0xb0>
 800c310:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c312:	b143      	cbz	r3, 800c326 <_reclaim_reent+0x22>
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d14a      	bne.n	800c3b0 <_reclaim_reent+0xac>
 800c31a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c31c:	6819      	ldr	r1, [r3, #0]
 800c31e:	b111      	cbz	r1, 800c326 <_reclaim_reent+0x22>
 800c320:	4620      	mov	r0, r4
 800c322:	f001 fd0b 	bl	800dd3c <_free_r>
 800c326:	6961      	ldr	r1, [r4, #20]
 800c328:	b111      	cbz	r1, 800c330 <_reclaim_reent+0x2c>
 800c32a:	4620      	mov	r0, r4
 800c32c:	f001 fd06 	bl	800dd3c <_free_r>
 800c330:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c332:	b111      	cbz	r1, 800c33a <_reclaim_reent+0x36>
 800c334:	4620      	mov	r0, r4
 800c336:	f001 fd01 	bl	800dd3c <_free_r>
 800c33a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c33c:	b111      	cbz	r1, 800c344 <_reclaim_reent+0x40>
 800c33e:	4620      	mov	r0, r4
 800c340:	f001 fcfc 	bl	800dd3c <_free_r>
 800c344:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c346:	b111      	cbz	r1, 800c34e <_reclaim_reent+0x4a>
 800c348:	4620      	mov	r0, r4
 800c34a:	f001 fcf7 	bl	800dd3c <_free_r>
 800c34e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c350:	b111      	cbz	r1, 800c358 <_reclaim_reent+0x54>
 800c352:	4620      	mov	r0, r4
 800c354:	f001 fcf2 	bl	800dd3c <_free_r>
 800c358:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c35a:	b111      	cbz	r1, 800c362 <_reclaim_reent+0x5e>
 800c35c:	4620      	mov	r0, r4
 800c35e:	f001 fced 	bl	800dd3c <_free_r>
 800c362:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c364:	b111      	cbz	r1, 800c36c <_reclaim_reent+0x68>
 800c366:	4620      	mov	r0, r4
 800c368:	f001 fce8 	bl	800dd3c <_free_r>
 800c36c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c36e:	b111      	cbz	r1, 800c376 <_reclaim_reent+0x72>
 800c370:	4620      	mov	r0, r4
 800c372:	f001 fce3 	bl	800dd3c <_free_r>
 800c376:	69a3      	ldr	r3, [r4, #24]
 800c378:	b1e3      	cbz	r3, 800c3b4 <_reclaim_reent+0xb0>
 800c37a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c37c:	4620      	mov	r0, r4
 800c37e:	4798      	blx	r3
 800c380:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c382:	b1b9      	cbz	r1, 800c3b4 <_reclaim_reent+0xb0>
 800c384:	4620      	mov	r0, r4
 800c386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c38a:	f7ff bfad 	b.w	800c2e8 <cleanup_glue>
 800c38e:	5949      	ldr	r1, [r1, r5]
 800c390:	b941      	cbnz	r1, 800c3a4 <_reclaim_reent+0xa0>
 800c392:	3504      	adds	r5, #4
 800c394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c396:	2d80      	cmp	r5, #128	; 0x80
 800c398:	68d9      	ldr	r1, [r3, #12]
 800c39a:	d1f8      	bne.n	800c38e <_reclaim_reent+0x8a>
 800c39c:	4620      	mov	r0, r4
 800c39e:	f001 fccd 	bl	800dd3c <_free_r>
 800c3a2:	e7ba      	b.n	800c31a <_reclaim_reent+0x16>
 800c3a4:	680e      	ldr	r6, [r1, #0]
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f001 fcc8 	bl	800dd3c <_free_r>
 800c3ac:	4631      	mov	r1, r6
 800c3ae:	e7ef      	b.n	800c390 <_reclaim_reent+0x8c>
 800c3b0:	2500      	movs	r5, #0
 800c3b2:	e7ef      	b.n	800c394 <_reclaim_reent+0x90>
 800c3b4:	bd70      	pop	{r4, r5, r6, pc}
 800c3b6:	bf00      	nop
 800c3b8:	20000150 	.word	0x20000150

0800c3bc <_sbrk_r>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4d06      	ldr	r5, [pc, #24]	; (800c3d8 <_sbrk_r+0x1c>)
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	4608      	mov	r0, r1
 800c3c6:	602b      	str	r3, [r5, #0]
 800c3c8:	f7f5 fdc0 	bl	8001f4c <_sbrk>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d102      	bne.n	800c3d6 <_sbrk_r+0x1a>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	b103      	cbz	r3, 800c3d6 <_sbrk_r+0x1a>
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
 800c3d8:	200105d0 	.word	0x200105d0

0800c3dc <sniprintf>:
 800c3dc:	b40c      	push	{r2, r3}
 800c3de:	b530      	push	{r4, r5, lr}
 800c3e0:	4b17      	ldr	r3, [pc, #92]	; (800c440 <sniprintf+0x64>)
 800c3e2:	1e0c      	subs	r4, r1, #0
 800c3e4:	681d      	ldr	r5, [r3, #0]
 800c3e6:	b09d      	sub	sp, #116	; 0x74
 800c3e8:	da08      	bge.n	800c3fc <sniprintf+0x20>
 800c3ea:	238b      	movs	r3, #139	; 0x8b
 800c3ec:	602b      	str	r3, [r5, #0]
 800c3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f2:	b01d      	add	sp, #116	; 0x74
 800c3f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3f8:	b002      	add	sp, #8
 800c3fa:	4770      	bx	lr
 800c3fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c400:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c404:	bf14      	ite	ne
 800c406:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c40a:	4623      	moveq	r3, r4
 800c40c:	9304      	str	r3, [sp, #16]
 800c40e:	9307      	str	r3, [sp, #28]
 800c410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c414:	9002      	str	r0, [sp, #8]
 800c416:	9006      	str	r0, [sp, #24]
 800c418:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c41c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c41e:	ab21      	add	r3, sp, #132	; 0x84
 800c420:	a902      	add	r1, sp, #8
 800c422:	4628      	mov	r0, r5
 800c424:	9301      	str	r3, [sp, #4]
 800c426:	f001 fd35 	bl	800de94 <_svfiprintf_r>
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	bfbc      	itt	lt
 800c42e:	238b      	movlt	r3, #139	; 0x8b
 800c430:	602b      	strlt	r3, [r5, #0]
 800c432:	2c00      	cmp	r4, #0
 800c434:	d0dd      	beq.n	800c3f2 <sniprintf+0x16>
 800c436:	9b02      	ldr	r3, [sp, #8]
 800c438:	2200      	movs	r2, #0
 800c43a:	701a      	strb	r2, [r3, #0]
 800c43c:	e7d9      	b.n	800c3f2 <sniprintf+0x16>
 800c43e:	bf00      	nop
 800c440:	20000150 	.word	0x20000150

0800c444 <__sread>:
 800c444:	b510      	push	{r4, lr}
 800c446:	460c      	mov	r4, r1
 800c448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44c:	f001 ff7c 	bl	800e348 <_read_r>
 800c450:	2800      	cmp	r0, #0
 800c452:	bfab      	itete	ge
 800c454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c456:	89a3      	ldrhlt	r3, [r4, #12]
 800c458:	181b      	addge	r3, r3, r0
 800c45a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c45e:	bfac      	ite	ge
 800c460:	6563      	strge	r3, [r4, #84]	; 0x54
 800c462:	81a3      	strhlt	r3, [r4, #12]
 800c464:	bd10      	pop	{r4, pc}

0800c466 <__swrite>:
 800c466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c46a:	461f      	mov	r7, r3
 800c46c:	898b      	ldrh	r3, [r1, #12]
 800c46e:	05db      	lsls	r3, r3, #23
 800c470:	4605      	mov	r5, r0
 800c472:	460c      	mov	r4, r1
 800c474:	4616      	mov	r6, r2
 800c476:	d505      	bpl.n	800c484 <__swrite+0x1e>
 800c478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c47c:	2302      	movs	r3, #2
 800c47e:	2200      	movs	r2, #0
 800c480:	f001 f844 	bl	800d50c <_lseek_r>
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c48a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c48e:	81a3      	strh	r3, [r4, #12]
 800c490:	4632      	mov	r2, r6
 800c492:	463b      	mov	r3, r7
 800c494:	4628      	mov	r0, r5
 800c496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c49a:	f000 b869 	b.w	800c570 <_write_r>

0800c49e <__sseek>:
 800c49e:	b510      	push	{r4, lr}
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a6:	f001 f831 	bl	800d50c <_lseek_r>
 800c4aa:	1c43      	adds	r3, r0, #1
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	bf15      	itete	ne
 800c4b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4ba:	81a3      	strheq	r3, [r4, #12]
 800c4bc:	bf18      	it	ne
 800c4be:	81a3      	strhne	r3, [r4, #12]
 800c4c0:	bd10      	pop	{r4, pc}

0800c4c2 <__sclose>:
 800c4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4c6:	f000 b8d3 	b.w	800c670 <_close_r>
	...

0800c4cc <__swbuf_r>:
 800c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ce:	460e      	mov	r6, r1
 800c4d0:	4614      	mov	r4, r2
 800c4d2:	4605      	mov	r5, r0
 800c4d4:	b118      	cbz	r0, 800c4de <__swbuf_r+0x12>
 800c4d6:	6983      	ldr	r3, [r0, #24]
 800c4d8:	b90b      	cbnz	r3, 800c4de <__swbuf_r+0x12>
 800c4da:	f7ff f94d 	bl	800b778 <__sinit>
 800c4de:	4b21      	ldr	r3, [pc, #132]	; (800c564 <__swbuf_r+0x98>)
 800c4e0:	429c      	cmp	r4, r3
 800c4e2:	d12b      	bne.n	800c53c <__swbuf_r+0x70>
 800c4e4:	686c      	ldr	r4, [r5, #4]
 800c4e6:	69a3      	ldr	r3, [r4, #24]
 800c4e8:	60a3      	str	r3, [r4, #8]
 800c4ea:	89a3      	ldrh	r3, [r4, #12]
 800c4ec:	071a      	lsls	r2, r3, #28
 800c4ee:	d52f      	bpl.n	800c550 <__swbuf_r+0x84>
 800c4f0:	6923      	ldr	r3, [r4, #16]
 800c4f2:	b36b      	cbz	r3, 800c550 <__swbuf_r+0x84>
 800c4f4:	6923      	ldr	r3, [r4, #16]
 800c4f6:	6820      	ldr	r0, [r4, #0]
 800c4f8:	1ac0      	subs	r0, r0, r3
 800c4fa:	6963      	ldr	r3, [r4, #20]
 800c4fc:	b2f6      	uxtb	r6, r6
 800c4fe:	4283      	cmp	r3, r0
 800c500:	4637      	mov	r7, r6
 800c502:	dc04      	bgt.n	800c50e <__swbuf_r+0x42>
 800c504:	4621      	mov	r1, r4
 800c506:	4628      	mov	r0, r5
 800c508:	f000 ffc0 	bl	800d48c <_fflush_r>
 800c50c:	bb30      	cbnz	r0, 800c55c <__swbuf_r+0x90>
 800c50e:	68a3      	ldr	r3, [r4, #8]
 800c510:	3b01      	subs	r3, #1
 800c512:	60a3      	str	r3, [r4, #8]
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	1c5a      	adds	r2, r3, #1
 800c518:	6022      	str	r2, [r4, #0]
 800c51a:	701e      	strb	r6, [r3, #0]
 800c51c:	6963      	ldr	r3, [r4, #20]
 800c51e:	3001      	adds	r0, #1
 800c520:	4283      	cmp	r3, r0
 800c522:	d004      	beq.n	800c52e <__swbuf_r+0x62>
 800c524:	89a3      	ldrh	r3, [r4, #12]
 800c526:	07db      	lsls	r3, r3, #31
 800c528:	d506      	bpl.n	800c538 <__swbuf_r+0x6c>
 800c52a:	2e0a      	cmp	r6, #10
 800c52c:	d104      	bne.n	800c538 <__swbuf_r+0x6c>
 800c52e:	4621      	mov	r1, r4
 800c530:	4628      	mov	r0, r5
 800c532:	f000 ffab 	bl	800d48c <_fflush_r>
 800c536:	b988      	cbnz	r0, 800c55c <__swbuf_r+0x90>
 800c538:	4638      	mov	r0, r7
 800c53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c53c:	4b0a      	ldr	r3, [pc, #40]	; (800c568 <__swbuf_r+0x9c>)
 800c53e:	429c      	cmp	r4, r3
 800c540:	d101      	bne.n	800c546 <__swbuf_r+0x7a>
 800c542:	68ac      	ldr	r4, [r5, #8]
 800c544:	e7cf      	b.n	800c4e6 <__swbuf_r+0x1a>
 800c546:	4b09      	ldr	r3, [pc, #36]	; (800c56c <__swbuf_r+0xa0>)
 800c548:	429c      	cmp	r4, r3
 800c54a:	bf08      	it	eq
 800c54c:	68ec      	ldreq	r4, [r5, #12]
 800c54e:	e7ca      	b.n	800c4e6 <__swbuf_r+0x1a>
 800c550:	4621      	mov	r1, r4
 800c552:	4628      	mov	r0, r5
 800c554:	f000 f81e 	bl	800c594 <__swsetup_r>
 800c558:	2800      	cmp	r0, #0
 800c55a:	d0cb      	beq.n	800c4f4 <__swbuf_r+0x28>
 800c55c:	f04f 37ff 	mov.w	r7, #4294967295
 800c560:	e7ea      	b.n	800c538 <__swbuf_r+0x6c>
 800c562:	bf00      	nop
 800c564:	0800ea14 	.word	0x0800ea14
 800c568:	0800ea34 	.word	0x0800ea34
 800c56c:	0800e9f4 	.word	0x0800e9f4

0800c570 <_write_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d07      	ldr	r5, [pc, #28]	; (800c590 <_write_r+0x20>)
 800c574:	4604      	mov	r4, r0
 800c576:	4608      	mov	r0, r1
 800c578:	4611      	mov	r1, r2
 800c57a:	2200      	movs	r2, #0
 800c57c:	602a      	str	r2, [r5, #0]
 800c57e:	461a      	mov	r2, r3
 800c580:	f7f4 fca8 	bl	8000ed4 <_write>
 800c584:	1c43      	adds	r3, r0, #1
 800c586:	d102      	bne.n	800c58e <_write_r+0x1e>
 800c588:	682b      	ldr	r3, [r5, #0]
 800c58a:	b103      	cbz	r3, 800c58e <_write_r+0x1e>
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	200105d0 	.word	0x200105d0

0800c594 <__swsetup_r>:
 800c594:	4b32      	ldr	r3, [pc, #200]	; (800c660 <__swsetup_r+0xcc>)
 800c596:	b570      	push	{r4, r5, r6, lr}
 800c598:	681d      	ldr	r5, [r3, #0]
 800c59a:	4606      	mov	r6, r0
 800c59c:	460c      	mov	r4, r1
 800c59e:	b125      	cbz	r5, 800c5aa <__swsetup_r+0x16>
 800c5a0:	69ab      	ldr	r3, [r5, #24]
 800c5a2:	b913      	cbnz	r3, 800c5aa <__swsetup_r+0x16>
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	f7ff f8e7 	bl	800b778 <__sinit>
 800c5aa:	4b2e      	ldr	r3, [pc, #184]	; (800c664 <__swsetup_r+0xd0>)
 800c5ac:	429c      	cmp	r4, r3
 800c5ae:	d10f      	bne.n	800c5d0 <__swsetup_r+0x3c>
 800c5b0:	686c      	ldr	r4, [r5, #4]
 800c5b2:	89a3      	ldrh	r3, [r4, #12]
 800c5b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5b8:	0719      	lsls	r1, r3, #28
 800c5ba:	d42c      	bmi.n	800c616 <__swsetup_r+0x82>
 800c5bc:	06dd      	lsls	r5, r3, #27
 800c5be:	d411      	bmi.n	800c5e4 <__swsetup_r+0x50>
 800c5c0:	2309      	movs	r3, #9
 800c5c2:	6033      	str	r3, [r6, #0]
 800c5c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c5c8:	81a3      	strh	r3, [r4, #12]
 800c5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ce:	e03e      	b.n	800c64e <__swsetup_r+0xba>
 800c5d0:	4b25      	ldr	r3, [pc, #148]	; (800c668 <__swsetup_r+0xd4>)
 800c5d2:	429c      	cmp	r4, r3
 800c5d4:	d101      	bne.n	800c5da <__swsetup_r+0x46>
 800c5d6:	68ac      	ldr	r4, [r5, #8]
 800c5d8:	e7eb      	b.n	800c5b2 <__swsetup_r+0x1e>
 800c5da:	4b24      	ldr	r3, [pc, #144]	; (800c66c <__swsetup_r+0xd8>)
 800c5dc:	429c      	cmp	r4, r3
 800c5de:	bf08      	it	eq
 800c5e0:	68ec      	ldreq	r4, [r5, #12]
 800c5e2:	e7e6      	b.n	800c5b2 <__swsetup_r+0x1e>
 800c5e4:	0758      	lsls	r0, r3, #29
 800c5e6:	d512      	bpl.n	800c60e <__swsetup_r+0x7a>
 800c5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5ea:	b141      	cbz	r1, 800c5fe <__swsetup_r+0x6a>
 800c5ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5f0:	4299      	cmp	r1, r3
 800c5f2:	d002      	beq.n	800c5fa <__swsetup_r+0x66>
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	f001 fba1 	bl	800dd3c <_free_r>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	6363      	str	r3, [r4, #52]	; 0x34
 800c5fe:	89a3      	ldrh	r3, [r4, #12]
 800c600:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c604:	81a3      	strh	r3, [r4, #12]
 800c606:	2300      	movs	r3, #0
 800c608:	6063      	str	r3, [r4, #4]
 800c60a:	6923      	ldr	r3, [r4, #16]
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	89a3      	ldrh	r3, [r4, #12]
 800c610:	f043 0308 	orr.w	r3, r3, #8
 800c614:	81a3      	strh	r3, [r4, #12]
 800c616:	6923      	ldr	r3, [r4, #16]
 800c618:	b94b      	cbnz	r3, 800c62e <__swsetup_r+0x9a>
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c624:	d003      	beq.n	800c62e <__swsetup_r+0x9a>
 800c626:	4621      	mov	r1, r4
 800c628:	4630      	mov	r0, r6
 800c62a:	f000 ffa5 	bl	800d578 <__smakebuf_r>
 800c62e:	89a0      	ldrh	r0, [r4, #12]
 800c630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c634:	f010 0301 	ands.w	r3, r0, #1
 800c638:	d00a      	beq.n	800c650 <__swsetup_r+0xbc>
 800c63a:	2300      	movs	r3, #0
 800c63c:	60a3      	str	r3, [r4, #8]
 800c63e:	6963      	ldr	r3, [r4, #20]
 800c640:	425b      	negs	r3, r3
 800c642:	61a3      	str	r3, [r4, #24]
 800c644:	6923      	ldr	r3, [r4, #16]
 800c646:	b943      	cbnz	r3, 800c65a <__swsetup_r+0xc6>
 800c648:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c64c:	d1ba      	bne.n	800c5c4 <__swsetup_r+0x30>
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
 800c650:	0781      	lsls	r1, r0, #30
 800c652:	bf58      	it	pl
 800c654:	6963      	ldrpl	r3, [r4, #20]
 800c656:	60a3      	str	r3, [r4, #8]
 800c658:	e7f4      	b.n	800c644 <__swsetup_r+0xb0>
 800c65a:	2000      	movs	r0, #0
 800c65c:	e7f7      	b.n	800c64e <__swsetup_r+0xba>
 800c65e:	bf00      	nop
 800c660:	20000150 	.word	0x20000150
 800c664:	0800ea14 	.word	0x0800ea14
 800c668:	0800ea34 	.word	0x0800ea34
 800c66c:	0800e9f4 	.word	0x0800e9f4

0800c670 <_close_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	4d06      	ldr	r5, [pc, #24]	; (800c68c <_close_r+0x1c>)
 800c674:	2300      	movs	r3, #0
 800c676:	4604      	mov	r4, r0
 800c678:	4608      	mov	r0, r1
 800c67a:	602b      	str	r3, [r5, #0]
 800c67c:	f7f5 fc31 	bl	8001ee2 <_close>
 800c680:	1c43      	adds	r3, r0, #1
 800c682:	d102      	bne.n	800c68a <_close_r+0x1a>
 800c684:	682b      	ldr	r3, [r5, #0]
 800c686:	b103      	cbz	r3, 800c68a <_close_r+0x1a>
 800c688:	6023      	str	r3, [r4, #0]
 800c68a:	bd38      	pop	{r3, r4, r5, pc}
 800c68c:	200105d0 	.word	0x200105d0

0800c690 <quorem>:
 800c690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	6903      	ldr	r3, [r0, #16]
 800c696:	690c      	ldr	r4, [r1, #16]
 800c698:	42a3      	cmp	r3, r4
 800c69a:	4607      	mov	r7, r0
 800c69c:	f2c0 8081 	blt.w	800c7a2 <quorem+0x112>
 800c6a0:	3c01      	subs	r4, #1
 800c6a2:	f101 0814 	add.w	r8, r1, #20
 800c6a6:	f100 0514 	add.w	r5, r0, #20
 800c6aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6ae:	9301      	str	r3, [sp, #4]
 800c6b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c6b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c6c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c6c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c6c8:	d331      	bcc.n	800c72e <quorem+0x9e>
 800c6ca:	f04f 0e00 	mov.w	lr, #0
 800c6ce:	4640      	mov	r0, r8
 800c6d0:	46ac      	mov	ip, r5
 800c6d2:	46f2      	mov	sl, lr
 800c6d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c6d8:	b293      	uxth	r3, r2
 800c6da:	fb06 e303 	mla	r3, r6, r3, lr
 800c6de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	ebaa 0303 	sub.w	r3, sl, r3
 800c6e8:	0c12      	lsrs	r2, r2, #16
 800c6ea:	f8dc a000 	ldr.w	sl, [ip]
 800c6ee:	fb06 e202 	mla	r2, r6, r2, lr
 800c6f2:	fa13 f38a 	uxtah	r3, r3, sl
 800c6f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6fa:	fa1f fa82 	uxth.w	sl, r2
 800c6fe:	f8dc 2000 	ldr.w	r2, [ip]
 800c702:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c706:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c710:	4581      	cmp	r9, r0
 800c712:	f84c 3b04 	str.w	r3, [ip], #4
 800c716:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c71a:	d2db      	bcs.n	800c6d4 <quorem+0x44>
 800c71c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c720:	b92b      	cbnz	r3, 800c72e <quorem+0x9e>
 800c722:	9b01      	ldr	r3, [sp, #4]
 800c724:	3b04      	subs	r3, #4
 800c726:	429d      	cmp	r5, r3
 800c728:	461a      	mov	r2, r3
 800c72a:	d32e      	bcc.n	800c78a <quorem+0xfa>
 800c72c:	613c      	str	r4, [r7, #16]
 800c72e:	4638      	mov	r0, r7
 800c730:	f001 f9f4 	bl	800db1c <__mcmp>
 800c734:	2800      	cmp	r0, #0
 800c736:	db24      	blt.n	800c782 <quorem+0xf2>
 800c738:	3601      	adds	r6, #1
 800c73a:	4628      	mov	r0, r5
 800c73c:	f04f 0c00 	mov.w	ip, #0
 800c740:	f858 2b04 	ldr.w	r2, [r8], #4
 800c744:	f8d0 e000 	ldr.w	lr, [r0]
 800c748:	b293      	uxth	r3, r2
 800c74a:	ebac 0303 	sub.w	r3, ip, r3
 800c74e:	0c12      	lsrs	r2, r2, #16
 800c750:	fa13 f38e 	uxtah	r3, r3, lr
 800c754:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c762:	45c1      	cmp	r9, r8
 800c764:	f840 3b04 	str.w	r3, [r0], #4
 800c768:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c76c:	d2e8      	bcs.n	800c740 <quorem+0xb0>
 800c76e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c776:	b922      	cbnz	r2, 800c782 <quorem+0xf2>
 800c778:	3b04      	subs	r3, #4
 800c77a:	429d      	cmp	r5, r3
 800c77c:	461a      	mov	r2, r3
 800c77e:	d30a      	bcc.n	800c796 <quorem+0x106>
 800c780:	613c      	str	r4, [r7, #16]
 800c782:	4630      	mov	r0, r6
 800c784:	b003      	add	sp, #12
 800c786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78a:	6812      	ldr	r2, [r2, #0]
 800c78c:	3b04      	subs	r3, #4
 800c78e:	2a00      	cmp	r2, #0
 800c790:	d1cc      	bne.n	800c72c <quorem+0x9c>
 800c792:	3c01      	subs	r4, #1
 800c794:	e7c7      	b.n	800c726 <quorem+0x96>
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	3b04      	subs	r3, #4
 800c79a:	2a00      	cmp	r2, #0
 800c79c:	d1f0      	bne.n	800c780 <quorem+0xf0>
 800c79e:	3c01      	subs	r4, #1
 800c7a0:	e7eb      	b.n	800c77a <quorem+0xea>
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	e7ee      	b.n	800c784 <quorem+0xf4>
	...

0800c7a8 <_dtoa_r>:
 800c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ac:	ed2d 8b02 	vpush	{d8}
 800c7b0:	ec57 6b10 	vmov	r6, r7, d0
 800c7b4:	b095      	sub	sp, #84	; 0x54
 800c7b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c7b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c7bc:	9105      	str	r1, [sp, #20]
 800c7be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c7c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7c8:	b975      	cbnz	r5, 800c7e8 <_dtoa_r+0x40>
 800c7ca:	2010      	movs	r0, #16
 800c7cc:	f000 ff14 	bl	800d5f8 <malloc>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	6260      	str	r0, [r4, #36]	; 0x24
 800c7d4:	b920      	cbnz	r0, 800c7e0 <_dtoa_r+0x38>
 800c7d6:	4bb2      	ldr	r3, [pc, #712]	; (800caa0 <_dtoa_r+0x2f8>)
 800c7d8:	21ea      	movs	r1, #234	; 0xea
 800c7da:	48b2      	ldr	r0, [pc, #712]	; (800caa4 <_dtoa_r+0x2fc>)
 800c7dc:	f001 fdc6 	bl	800e36c <__assert_func>
 800c7e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c7e4:	6005      	str	r5, [r0, #0]
 800c7e6:	60c5      	str	r5, [r0, #12]
 800c7e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7ea:	6819      	ldr	r1, [r3, #0]
 800c7ec:	b151      	cbz	r1, 800c804 <_dtoa_r+0x5c>
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	604a      	str	r2, [r1, #4]
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	4093      	lsls	r3, r2
 800c7f6:	608b      	str	r3, [r1, #8]
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	f000 ff51 	bl	800d6a0 <_Bfree>
 800c7fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c800:	2200      	movs	r2, #0
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	1e3b      	subs	r3, r7, #0
 800c806:	bfb9      	ittee	lt
 800c808:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c80c:	9303      	strlt	r3, [sp, #12]
 800c80e:	2300      	movge	r3, #0
 800c810:	f8c8 3000 	strge.w	r3, [r8]
 800c814:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c818:	4ba3      	ldr	r3, [pc, #652]	; (800caa8 <_dtoa_r+0x300>)
 800c81a:	bfbc      	itt	lt
 800c81c:	2201      	movlt	r2, #1
 800c81e:	f8c8 2000 	strlt.w	r2, [r8]
 800c822:	ea33 0309 	bics.w	r3, r3, r9
 800c826:	d11b      	bne.n	800c860 <_dtoa_r+0xb8>
 800c828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c82a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c82e:	6013      	str	r3, [r2, #0]
 800c830:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c834:	4333      	orrs	r3, r6
 800c836:	f000 857a 	beq.w	800d32e <_dtoa_r+0xb86>
 800c83a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c83c:	b963      	cbnz	r3, 800c858 <_dtoa_r+0xb0>
 800c83e:	4b9b      	ldr	r3, [pc, #620]	; (800caac <_dtoa_r+0x304>)
 800c840:	e024      	b.n	800c88c <_dtoa_r+0xe4>
 800c842:	4b9b      	ldr	r3, [pc, #620]	; (800cab0 <_dtoa_r+0x308>)
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	3308      	adds	r3, #8
 800c848:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c84a:	6013      	str	r3, [r2, #0]
 800c84c:	9800      	ldr	r0, [sp, #0]
 800c84e:	b015      	add	sp, #84	; 0x54
 800c850:	ecbd 8b02 	vpop	{d8}
 800c854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c858:	4b94      	ldr	r3, [pc, #592]	; (800caac <_dtoa_r+0x304>)
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	3303      	adds	r3, #3
 800c85e:	e7f3      	b.n	800c848 <_dtoa_r+0xa0>
 800c860:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c864:	2200      	movs	r2, #0
 800c866:	ec51 0b17 	vmov	r0, r1, d7
 800c86a:	2300      	movs	r3, #0
 800c86c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c870:	f7f4 f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c874:	4680      	mov	r8, r0
 800c876:	b158      	cbz	r0, 800c890 <_dtoa_r+0xe8>
 800c878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c87a:	2301      	movs	r3, #1
 800c87c:	6013      	str	r3, [r2, #0]
 800c87e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 8551 	beq.w	800d328 <_dtoa_r+0xb80>
 800c886:	488b      	ldr	r0, [pc, #556]	; (800cab4 <_dtoa_r+0x30c>)
 800c888:	6018      	str	r0, [r3, #0]
 800c88a:	1e43      	subs	r3, r0, #1
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	e7dd      	b.n	800c84c <_dtoa_r+0xa4>
 800c890:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c894:	aa12      	add	r2, sp, #72	; 0x48
 800c896:	a913      	add	r1, sp, #76	; 0x4c
 800c898:	4620      	mov	r0, r4
 800c89a:	f001 f9e3 	bl	800dc64 <__d2b>
 800c89e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8a2:	4683      	mov	fp, r0
 800c8a4:	2d00      	cmp	r5, #0
 800c8a6:	d07c      	beq.n	800c9a2 <_dtoa_r+0x1fa>
 800c8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c8ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c8b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c8ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c8be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c8c2:	4b7d      	ldr	r3, [pc, #500]	; (800cab8 <_dtoa_r+0x310>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	4639      	mov	r1, r7
 800c8ca:	f7f3 fcdd 	bl	8000288 <__aeabi_dsub>
 800c8ce:	a36e      	add	r3, pc, #440	; (adr r3, 800ca88 <_dtoa_r+0x2e0>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	f7f3 fe90 	bl	80005f8 <__aeabi_dmul>
 800c8d8:	a36d      	add	r3, pc, #436	; (adr r3, 800ca90 <_dtoa_r+0x2e8>)
 800c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8de:	f7f3 fcd5 	bl	800028c <__adddf3>
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	460f      	mov	r7, r1
 800c8e8:	f7f3 fe1c 	bl	8000524 <__aeabi_i2d>
 800c8ec:	a36a      	add	r3, pc, #424	; (adr r3, 800ca98 <_dtoa_r+0x2f0>)
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	f7f3 fe81 	bl	80005f8 <__aeabi_dmul>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	4639      	mov	r1, r7
 800c8fe:	f7f3 fcc5 	bl	800028c <__adddf3>
 800c902:	4606      	mov	r6, r0
 800c904:	460f      	mov	r7, r1
 800c906:	f7f4 f927 	bl	8000b58 <__aeabi_d2iz>
 800c90a:	2200      	movs	r2, #0
 800c90c:	4682      	mov	sl, r0
 800c90e:	2300      	movs	r3, #0
 800c910:	4630      	mov	r0, r6
 800c912:	4639      	mov	r1, r7
 800c914:	f7f4 f8e2 	bl	8000adc <__aeabi_dcmplt>
 800c918:	b148      	cbz	r0, 800c92e <_dtoa_r+0x186>
 800c91a:	4650      	mov	r0, sl
 800c91c:	f7f3 fe02 	bl	8000524 <__aeabi_i2d>
 800c920:	4632      	mov	r2, r6
 800c922:	463b      	mov	r3, r7
 800c924:	f7f4 f8d0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c928:	b908      	cbnz	r0, 800c92e <_dtoa_r+0x186>
 800c92a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c92e:	f1ba 0f16 	cmp.w	sl, #22
 800c932:	d854      	bhi.n	800c9de <_dtoa_r+0x236>
 800c934:	4b61      	ldr	r3, [pc, #388]	; (800cabc <_dtoa_r+0x314>)
 800c936:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c942:	f7f4 f8cb 	bl	8000adc <__aeabi_dcmplt>
 800c946:	2800      	cmp	r0, #0
 800c948:	d04b      	beq.n	800c9e2 <_dtoa_r+0x23a>
 800c94a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c94e:	2300      	movs	r3, #0
 800c950:	930e      	str	r3, [sp, #56]	; 0x38
 800c952:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c954:	1b5d      	subs	r5, r3, r5
 800c956:	1e6b      	subs	r3, r5, #1
 800c958:	9304      	str	r3, [sp, #16]
 800c95a:	bf43      	ittte	mi
 800c95c:	2300      	movmi	r3, #0
 800c95e:	f1c5 0801 	rsbmi	r8, r5, #1
 800c962:	9304      	strmi	r3, [sp, #16]
 800c964:	f04f 0800 	movpl.w	r8, #0
 800c968:	f1ba 0f00 	cmp.w	sl, #0
 800c96c:	db3b      	blt.n	800c9e6 <_dtoa_r+0x23e>
 800c96e:	9b04      	ldr	r3, [sp, #16]
 800c970:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c974:	4453      	add	r3, sl
 800c976:	9304      	str	r3, [sp, #16]
 800c978:	2300      	movs	r3, #0
 800c97a:	9306      	str	r3, [sp, #24]
 800c97c:	9b05      	ldr	r3, [sp, #20]
 800c97e:	2b09      	cmp	r3, #9
 800c980:	d869      	bhi.n	800ca56 <_dtoa_r+0x2ae>
 800c982:	2b05      	cmp	r3, #5
 800c984:	bfc4      	itt	gt
 800c986:	3b04      	subgt	r3, #4
 800c988:	9305      	strgt	r3, [sp, #20]
 800c98a:	9b05      	ldr	r3, [sp, #20]
 800c98c:	f1a3 0302 	sub.w	r3, r3, #2
 800c990:	bfcc      	ite	gt
 800c992:	2500      	movgt	r5, #0
 800c994:	2501      	movle	r5, #1
 800c996:	2b03      	cmp	r3, #3
 800c998:	d869      	bhi.n	800ca6e <_dtoa_r+0x2c6>
 800c99a:	e8df f003 	tbb	[pc, r3]
 800c99e:	4e2c      	.short	0x4e2c
 800c9a0:	5a4c      	.short	0x5a4c
 800c9a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c9a6:	441d      	add	r5, r3
 800c9a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c9ac:	2b20      	cmp	r3, #32
 800c9ae:	bfc1      	itttt	gt
 800c9b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c9b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c9b8:	fa09 f303 	lslgt.w	r3, r9, r3
 800c9bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c9c0:	bfda      	itte	le
 800c9c2:	f1c3 0320 	rsble	r3, r3, #32
 800c9c6:	fa06 f003 	lslle.w	r0, r6, r3
 800c9ca:	4318      	orrgt	r0, r3
 800c9cc:	f7f3 fd9a 	bl	8000504 <__aeabi_ui2d>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c9d8:	3d01      	subs	r5, #1
 800c9da:	9310      	str	r3, [sp, #64]	; 0x40
 800c9dc:	e771      	b.n	800c8c2 <_dtoa_r+0x11a>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e7b6      	b.n	800c950 <_dtoa_r+0x1a8>
 800c9e2:	900e      	str	r0, [sp, #56]	; 0x38
 800c9e4:	e7b5      	b.n	800c952 <_dtoa_r+0x1aa>
 800c9e6:	f1ca 0300 	rsb	r3, sl, #0
 800c9ea:	9306      	str	r3, [sp, #24]
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	eba8 080a 	sub.w	r8, r8, sl
 800c9f2:	930d      	str	r3, [sp, #52]	; 0x34
 800c9f4:	e7c2      	b.n	800c97c <_dtoa_r+0x1d4>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	9308      	str	r3, [sp, #32]
 800c9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	dc39      	bgt.n	800ca74 <_dtoa_r+0x2cc>
 800ca00:	f04f 0901 	mov.w	r9, #1
 800ca04:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca08:	464b      	mov	r3, r9
 800ca0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ca0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ca10:	2200      	movs	r2, #0
 800ca12:	6042      	str	r2, [r0, #4]
 800ca14:	2204      	movs	r2, #4
 800ca16:	f102 0614 	add.w	r6, r2, #20
 800ca1a:	429e      	cmp	r6, r3
 800ca1c:	6841      	ldr	r1, [r0, #4]
 800ca1e:	d92f      	bls.n	800ca80 <_dtoa_r+0x2d8>
 800ca20:	4620      	mov	r0, r4
 800ca22:	f000 fdfd 	bl	800d620 <_Balloc>
 800ca26:	9000      	str	r0, [sp, #0]
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d14b      	bne.n	800cac4 <_dtoa_r+0x31c>
 800ca2c:	4b24      	ldr	r3, [pc, #144]	; (800cac0 <_dtoa_r+0x318>)
 800ca2e:	4602      	mov	r2, r0
 800ca30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ca34:	e6d1      	b.n	800c7da <_dtoa_r+0x32>
 800ca36:	2301      	movs	r3, #1
 800ca38:	e7de      	b.n	800c9f8 <_dtoa_r+0x250>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	9308      	str	r3, [sp, #32]
 800ca3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca40:	eb0a 0903 	add.w	r9, sl, r3
 800ca44:	f109 0301 	add.w	r3, r9, #1
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	9301      	str	r3, [sp, #4]
 800ca4c:	bfb8      	it	lt
 800ca4e:	2301      	movlt	r3, #1
 800ca50:	e7dd      	b.n	800ca0e <_dtoa_r+0x266>
 800ca52:	2301      	movs	r3, #1
 800ca54:	e7f2      	b.n	800ca3c <_dtoa_r+0x294>
 800ca56:	2501      	movs	r5, #1
 800ca58:	2300      	movs	r3, #0
 800ca5a:	9305      	str	r3, [sp, #20]
 800ca5c:	9508      	str	r5, [sp, #32]
 800ca5e:	f04f 39ff 	mov.w	r9, #4294967295
 800ca62:	2200      	movs	r2, #0
 800ca64:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca68:	2312      	movs	r3, #18
 800ca6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ca6c:	e7cf      	b.n	800ca0e <_dtoa_r+0x266>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	9308      	str	r3, [sp, #32]
 800ca72:	e7f4      	b.n	800ca5e <_dtoa_r+0x2b6>
 800ca74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ca78:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca7c:	464b      	mov	r3, r9
 800ca7e:	e7c6      	b.n	800ca0e <_dtoa_r+0x266>
 800ca80:	3101      	adds	r1, #1
 800ca82:	6041      	str	r1, [r0, #4]
 800ca84:	0052      	lsls	r2, r2, #1
 800ca86:	e7c6      	b.n	800ca16 <_dtoa_r+0x26e>
 800ca88:	636f4361 	.word	0x636f4361
 800ca8c:	3fd287a7 	.word	0x3fd287a7
 800ca90:	8b60c8b3 	.word	0x8b60c8b3
 800ca94:	3fc68a28 	.word	0x3fc68a28
 800ca98:	509f79fb 	.word	0x509f79fb
 800ca9c:	3fd34413 	.word	0x3fd34413
 800caa0:	0800ea99 	.word	0x0800ea99
 800caa4:	0800eab0 	.word	0x0800eab0
 800caa8:	7ff00000 	.word	0x7ff00000
 800caac:	0800ea95 	.word	0x0800ea95
 800cab0:	0800ea8c 	.word	0x0800ea8c
 800cab4:	0800ea69 	.word	0x0800ea69
 800cab8:	3ff80000 	.word	0x3ff80000
 800cabc:	0800eba8 	.word	0x0800eba8
 800cac0:	0800eb0f 	.word	0x0800eb0f
 800cac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cac6:	9a00      	ldr	r2, [sp, #0]
 800cac8:	601a      	str	r2, [r3, #0]
 800caca:	9b01      	ldr	r3, [sp, #4]
 800cacc:	2b0e      	cmp	r3, #14
 800cace:	f200 80ad 	bhi.w	800cc2c <_dtoa_r+0x484>
 800cad2:	2d00      	cmp	r5, #0
 800cad4:	f000 80aa 	beq.w	800cc2c <_dtoa_r+0x484>
 800cad8:	f1ba 0f00 	cmp.w	sl, #0
 800cadc:	dd36      	ble.n	800cb4c <_dtoa_r+0x3a4>
 800cade:	4ac3      	ldr	r2, [pc, #780]	; (800cdec <_dtoa_r+0x644>)
 800cae0:	f00a 030f 	and.w	r3, sl, #15
 800cae4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cae8:	ed93 7b00 	vldr	d7, [r3]
 800caec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800caf0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800caf4:	eeb0 8a47 	vmov.f32	s16, s14
 800caf8:	eef0 8a67 	vmov.f32	s17, s15
 800cafc:	d016      	beq.n	800cb2c <_dtoa_r+0x384>
 800cafe:	4bbc      	ldr	r3, [pc, #752]	; (800cdf0 <_dtoa_r+0x648>)
 800cb00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb08:	f7f3 fea0 	bl	800084c <__aeabi_ddiv>
 800cb0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb10:	f007 070f 	and.w	r7, r7, #15
 800cb14:	2503      	movs	r5, #3
 800cb16:	4eb6      	ldr	r6, [pc, #728]	; (800cdf0 <_dtoa_r+0x648>)
 800cb18:	b957      	cbnz	r7, 800cb30 <_dtoa_r+0x388>
 800cb1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb1e:	ec53 2b18 	vmov	r2, r3, d8
 800cb22:	f7f3 fe93 	bl	800084c <__aeabi_ddiv>
 800cb26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb2a:	e029      	b.n	800cb80 <_dtoa_r+0x3d8>
 800cb2c:	2502      	movs	r5, #2
 800cb2e:	e7f2      	b.n	800cb16 <_dtoa_r+0x36e>
 800cb30:	07f9      	lsls	r1, r7, #31
 800cb32:	d508      	bpl.n	800cb46 <_dtoa_r+0x39e>
 800cb34:	ec51 0b18 	vmov	r0, r1, d8
 800cb38:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb3c:	f7f3 fd5c 	bl	80005f8 <__aeabi_dmul>
 800cb40:	ec41 0b18 	vmov	d8, r0, r1
 800cb44:	3501      	adds	r5, #1
 800cb46:	107f      	asrs	r7, r7, #1
 800cb48:	3608      	adds	r6, #8
 800cb4a:	e7e5      	b.n	800cb18 <_dtoa_r+0x370>
 800cb4c:	f000 80a6 	beq.w	800cc9c <_dtoa_r+0x4f4>
 800cb50:	f1ca 0600 	rsb	r6, sl, #0
 800cb54:	4ba5      	ldr	r3, [pc, #660]	; (800cdec <_dtoa_r+0x644>)
 800cb56:	4fa6      	ldr	r7, [pc, #664]	; (800cdf0 <_dtoa_r+0x648>)
 800cb58:	f006 020f 	and.w	r2, r6, #15
 800cb5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb68:	f7f3 fd46 	bl	80005f8 <__aeabi_dmul>
 800cb6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb70:	1136      	asrs	r6, r6, #4
 800cb72:	2300      	movs	r3, #0
 800cb74:	2502      	movs	r5, #2
 800cb76:	2e00      	cmp	r6, #0
 800cb78:	f040 8085 	bne.w	800cc86 <_dtoa_r+0x4de>
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1d2      	bne.n	800cb26 <_dtoa_r+0x37e>
 800cb80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f000 808c 	beq.w	800cca0 <_dtoa_r+0x4f8>
 800cb88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cb8c:	4b99      	ldr	r3, [pc, #612]	; (800cdf4 <_dtoa_r+0x64c>)
 800cb8e:	2200      	movs	r2, #0
 800cb90:	4630      	mov	r0, r6
 800cb92:	4639      	mov	r1, r7
 800cb94:	f7f3 ffa2 	bl	8000adc <__aeabi_dcmplt>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	f000 8081 	beq.w	800cca0 <_dtoa_r+0x4f8>
 800cb9e:	9b01      	ldr	r3, [sp, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d07d      	beq.n	800cca0 <_dtoa_r+0x4f8>
 800cba4:	f1b9 0f00 	cmp.w	r9, #0
 800cba8:	dd3c      	ble.n	800cc24 <_dtoa_r+0x47c>
 800cbaa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cbae:	9307      	str	r3, [sp, #28]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	4b91      	ldr	r3, [pc, #580]	; (800cdf8 <_dtoa_r+0x650>)
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	4639      	mov	r1, r7
 800cbb8:	f7f3 fd1e 	bl	80005f8 <__aeabi_dmul>
 800cbbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbc0:	3501      	adds	r5, #1
 800cbc2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cbc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cbca:	4628      	mov	r0, r5
 800cbcc:	f7f3 fcaa 	bl	8000524 <__aeabi_i2d>
 800cbd0:	4632      	mov	r2, r6
 800cbd2:	463b      	mov	r3, r7
 800cbd4:	f7f3 fd10 	bl	80005f8 <__aeabi_dmul>
 800cbd8:	4b88      	ldr	r3, [pc, #544]	; (800cdfc <_dtoa_r+0x654>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f7f3 fb56 	bl	800028c <__adddf3>
 800cbe0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cbe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbe8:	9303      	str	r3, [sp, #12]
 800cbea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d15c      	bne.n	800ccaa <_dtoa_r+0x502>
 800cbf0:	4b83      	ldr	r3, [pc, #524]	; (800ce00 <_dtoa_r+0x658>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	4639      	mov	r1, r7
 800cbf8:	f7f3 fb46 	bl	8000288 <__aeabi_dsub>
 800cbfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc00:	4606      	mov	r6, r0
 800cc02:	460f      	mov	r7, r1
 800cc04:	f7f3 ff88 	bl	8000b18 <__aeabi_dcmpgt>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	f040 8296 	bne.w	800d13a <_dtoa_r+0x992>
 800cc0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cc12:	4630      	mov	r0, r6
 800cc14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc18:	4639      	mov	r1, r7
 800cc1a:	f7f3 ff5f 	bl	8000adc <__aeabi_dcmplt>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	f040 8288 	bne.w	800d134 <_dtoa_r+0x98c>
 800cc24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f2c0 8158 	blt.w	800cee4 <_dtoa_r+0x73c>
 800cc34:	f1ba 0f0e 	cmp.w	sl, #14
 800cc38:	f300 8154 	bgt.w	800cee4 <_dtoa_r+0x73c>
 800cc3c:	4b6b      	ldr	r3, [pc, #428]	; (800cdec <_dtoa_r+0x644>)
 800cc3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc42:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f280 80e3 	bge.w	800ce14 <_dtoa_r+0x66c>
 800cc4e:	9b01      	ldr	r3, [sp, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f300 80df 	bgt.w	800ce14 <_dtoa_r+0x66c>
 800cc56:	f040 826d 	bne.w	800d134 <_dtoa_r+0x98c>
 800cc5a:	4b69      	ldr	r3, [pc, #420]	; (800ce00 <_dtoa_r+0x658>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	4640      	mov	r0, r8
 800cc60:	4649      	mov	r1, r9
 800cc62:	f7f3 fcc9 	bl	80005f8 <__aeabi_dmul>
 800cc66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc6a:	f7f3 ff4b 	bl	8000b04 <__aeabi_dcmpge>
 800cc6e:	9e01      	ldr	r6, [sp, #4]
 800cc70:	4637      	mov	r7, r6
 800cc72:	2800      	cmp	r0, #0
 800cc74:	f040 8243 	bne.w	800d0fe <_dtoa_r+0x956>
 800cc78:	9d00      	ldr	r5, [sp, #0]
 800cc7a:	2331      	movs	r3, #49	; 0x31
 800cc7c:	f805 3b01 	strb.w	r3, [r5], #1
 800cc80:	f10a 0a01 	add.w	sl, sl, #1
 800cc84:	e23f      	b.n	800d106 <_dtoa_r+0x95e>
 800cc86:	07f2      	lsls	r2, r6, #31
 800cc88:	d505      	bpl.n	800cc96 <_dtoa_r+0x4ee>
 800cc8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc8e:	f7f3 fcb3 	bl	80005f8 <__aeabi_dmul>
 800cc92:	3501      	adds	r5, #1
 800cc94:	2301      	movs	r3, #1
 800cc96:	1076      	asrs	r6, r6, #1
 800cc98:	3708      	adds	r7, #8
 800cc9a:	e76c      	b.n	800cb76 <_dtoa_r+0x3ce>
 800cc9c:	2502      	movs	r5, #2
 800cc9e:	e76f      	b.n	800cb80 <_dtoa_r+0x3d8>
 800cca0:	9b01      	ldr	r3, [sp, #4]
 800cca2:	f8cd a01c 	str.w	sl, [sp, #28]
 800cca6:	930c      	str	r3, [sp, #48]	; 0x30
 800cca8:	e78d      	b.n	800cbc6 <_dtoa_r+0x41e>
 800ccaa:	9900      	ldr	r1, [sp, #0]
 800ccac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ccae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccb0:	4b4e      	ldr	r3, [pc, #312]	; (800cdec <_dtoa_r+0x644>)
 800ccb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccb6:	4401      	add	r1, r0
 800ccb8:	9102      	str	r1, [sp, #8]
 800ccba:	9908      	ldr	r1, [sp, #32]
 800ccbc:	eeb0 8a47 	vmov.f32	s16, s14
 800ccc0:	eef0 8a67 	vmov.f32	s17, s15
 800ccc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cccc:	2900      	cmp	r1, #0
 800ccce:	d045      	beq.n	800cd5c <_dtoa_r+0x5b4>
 800ccd0:	494c      	ldr	r1, [pc, #304]	; (800ce04 <_dtoa_r+0x65c>)
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	f7f3 fdba 	bl	800084c <__aeabi_ddiv>
 800ccd8:	ec53 2b18 	vmov	r2, r3, d8
 800ccdc:	f7f3 fad4 	bl	8000288 <__aeabi_dsub>
 800cce0:	9d00      	ldr	r5, [sp, #0]
 800cce2:	ec41 0b18 	vmov	d8, r0, r1
 800cce6:	4639      	mov	r1, r7
 800cce8:	4630      	mov	r0, r6
 800ccea:	f7f3 ff35 	bl	8000b58 <__aeabi_d2iz>
 800ccee:	900c      	str	r0, [sp, #48]	; 0x30
 800ccf0:	f7f3 fc18 	bl	8000524 <__aeabi_i2d>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	4639      	mov	r1, r7
 800ccfc:	f7f3 fac4 	bl	8000288 <__aeabi_dsub>
 800cd00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd02:	3330      	adds	r3, #48	; 0x30
 800cd04:	f805 3b01 	strb.w	r3, [r5], #1
 800cd08:	ec53 2b18 	vmov	r2, r3, d8
 800cd0c:	4606      	mov	r6, r0
 800cd0e:	460f      	mov	r7, r1
 800cd10:	f7f3 fee4 	bl	8000adc <__aeabi_dcmplt>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d165      	bne.n	800cde4 <_dtoa_r+0x63c>
 800cd18:	4632      	mov	r2, r6
 800cd1a:	463b      	mov	r3, r7
 800cd1c:	4935      	ldr	r1, [pc, #212]	; (800cdf4 <_dtoa_r+0x64c>)
 800cd1e:	2000      	movs	r0, #0
 800cd20:	f7f3 fab2 	bl	8000288 <__aeabi_dsub>
 800cd24:	ec53 2b18 	vmov	r2, r3, d8
 800cd28:	f7f3 fed8 	bl	8000adc <__aeabi_dcmplt>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	f040 80b9 	bne.w	800cea4 <_dtoa_r+0x6fc>
 800cd32:	9b02      	ldr	r3, [sp, #8]
 800cd34:	429d      	cmp	r5, r3
 800cd36:	f43f af75 	beq.w	800cc24 <_dtoa_r+0x47c>
 800cd3a:	4b2f      	ldr	r3, [pc, #188]	; (800cdf8 <_dtoa_r+0x650>)
 800cd3c:	ec51 0b18 	vmov	r0, r1, d8
 800cd40:	2200      	movs	r2, #0
 800cd42:	f7f3 fc59 	bl	80005f8 <__aeabi_dmul>
 800cd46:	4b2c      	ldr	r3, [pc, #176]	; (800cdf8 <_dtoa_r+0x650>)
 800cd48:	ec41 0b18 	vmov	d8, r0, r1
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	4630      	mov	r0, r6
 800cd50:	4639      	mov	r1, r7
 800cd52:	f7f3 fc51 	bl	80005f8 <__aeabi_dmul>
 800cd56:	4606      	mov	r6, r0
 800cd58:	460f      	mov	r7, r1
 800cd5a:	e7c4      	b.n	800cce6 <_dtoa_r+0x53e>
 800cd5c:	ec51 0b17 	vmov	r0, r1, d7
 800cd60:	f7f3 fc4a 	bl	80005f8 <__aeabi_dmul>
 800cd64:	9b02      	ldr	r3, [sp, #8]
 800cd66:	9d00      	ldr	r5, [sp, #0]
 800cd68:	930c      	str	r3, [sp, #48]	; 0x30
 800cd6a:	ec41 0b18 	vmov	d8, r0, r1
 800cd6e:	4639      	mov	r1, r7
 800cd70:	4630      	mov	r0, r6
 800cd72:	f7f3 fef1 	bl	8000b58 <__aeabi_d2iz>
 800cd76:	9011      	str	r0, [sp, #68]	; 0x44
 800cd78:	f7f3 fbd4 	bl	8000524 <__aeabi_i2d>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	460b      	mov	r3, r1
 800cd80:	4630      	mov	r0, r6
 800cd82:	4639      	mov	r1, r7
 800cd84:	f7f3 fa80 	bl	8000288 <__aeabi_dsub>
 800cd88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd8a:	3330      	adds	r3, #48	; 0x30
 800cd8c:	f805 3b01 	strb.w	r3, [r5], #1
 800cd90:	9b02      	ldr	r3, [sp, #8]
 800cd92:	429d      	cmp	r5, r3
 800cd94:	4606      	mov	r6, r0
 800cd96:	460f      	mov	r7, r1
 800cd98:	f04f 0200 	mov.w	r2, #0
 800cd9c:	d134      	bne.n	800ce08 <_dtoa_r+0x660>
 800cd9e:	4b19      	ldr	r3, [pc, #100]	; (800ce04 <_dtoa_r+0x65c>)
 800cda0:	ec51 0b18 	vmov	r0, r1, d8
 800cda4:	f7f3 fa72 	bl	800028c <__adddf3>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	460b      	mov	r3, r1
 800cdac:	4630      	mov	r0, r6
 800cdae:	4639      	mov	r1, r7
 800cdb0:	f7f3 feb2 	bl	8000b18 <__aeabi_dcmpgt>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d175      	bne.n	800cea4 <_dtoa_r+0x6fc>
 800cdb8:	ec53 2b18 	vmov	r2, r3, d8
 800cdbc:	4911      	ldr	r1, [pc, #68]	; (800ce04 <_dtoa_r+0x65c>)
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	f7f3 fa62 	bl	8000288 <__aeabi_dsub>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	4630      	mov	r0, r6
 800cdca:	4639      	mov	r1, r7
 800cdcc:	f7f3 fe86 	bl	8000adc <__aeabi_dcmplt>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	f43f af27 	beq.w	800cc24 <_dtoa_r+0x47c>
 800cdd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cdd8:	1e6b      	subs	r3, r5, #1
 800cdda:	930c      	str	r3, [sp, #48]	; 0x30
 800cddc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cde0:	2b30      	cmp	r3, #48	; 0x30
 800cde2:	d0f8      	beq.n	800cdd6 <_dtoa_r+0x62e>
 800cde4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cde8:	e04a      	b.n	800ce80 <_dtoa_r+0x6d8>
 800cdea:	bf00      	nop
 800cdec:	0800eba8 	.word	0x0800eba8
 800cdf0:	0800eb80 	.word	0x0800eb80
 800cdf4:	3ff00000 	.word	0x3ff00000
 800cdf8:	40240000 	.word	0x40240000
 800cdfc:	401c0000 	.word	0x401c0000
 800ce00:	40140000 	.word	0x40140000
 800ce04:	3fe00000 	.word	0x3fe00000
 800ce08:	4baf      	ldr	r3, [pc, #700]	; (800d0c8 <_dtoa_r+0x920>)
 800ce0a:	f7f3 fbf5 	bl	80005f8 <__aeabi_dmul>
 800ce0e:	4606      	mov	r6, r0
 800ce10:	460f      	mov	r7, r1
 800ce12:	e7ac      	b.n	800cd6e <_dtoa_r+0x5c6>
 800ce14:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce18:	9d00      	ldr	r5, [sp, #0]
 800ce1a:	4642      	mov	r2, r8
 800ce1c:	464b      	mov	r3, r9
 800ce1e:	4630      	mov	r0, r6
 800ce20:	4639      	mov	r1, r7
 800ce22:	f7f3 fd13 	bl	800084c <__aeabi_ddiv>
 800ce26:	f7f3 fe97 	bl	8000b58 <__aeabi_d2iz>
 800ce2a:	9002      	str	r0, [sp, #8]
 800ce2c:	f7f3 fb7a 	bl	8000524 <__aeabi_i2d>
 800ce30:	4642      	mov	r2, r8
 800ce32:	464b      	mov	r3, r9
 800ce34:	f7f3 fbe0 	bl	80005f8 <__aeabi_dmul>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	4639      	mov	r1, r7
 800ce40:	f7f3 fa22 	bl	8000288 <__aeabi_dsub>
 800ce44:	9e02      	ldr	r6, [sp, #8]
 800ce46:	9f01      	ldr	r7, [sp, #4]
 800ce48:	3630      	adds	r6, #48	; 0x30
 800ce4a:	f805 6b01 	strb.w	r6, [r5], #1
 800ce4e:	9e00      	ldr	r6, [sp, #0]
 800ce50:	1bae      	subs	r6, r5, r6
 800ce52:	42b7      	cmp	r7, r6
 800ce54:	4602      	mov	r2, r0
 800ce56:	460b      	mov	r3, r1
 800ce58:	d137      	bne.n	800ceca <_dtoa_r+0x722>
 800ce5a:	f7f3 fa17 	bl	800028c <__adddf3>
 800ce5e:	4642      	mov	r2, r8
 800ce60:	464b      	mov	r3, r9
 800ce62:	4606      	mov	r6, r0
 800ce64:	460f      	mov	r7, r1
 800ce66:	f7f3 fe57 	bl	8000b18 <__aeabi_dcmpgt>
 800ce6a:	b9c8      	cbnz	r0, 800cea0 <_dtoa_r+0x6f8>
 800ce6c:	4642      	mov	r2, r8
 800ce6e:	464b      	mov	r3, r9
 800ce70:	4630      	mov	r0, r6
 800ce72:	4639      	mov	r1, r7
 800ce74:	f7f3 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce78:	b110      	cbz	r0, 800ce80 <_dtoa_r+0x6d8>
 800ce7a:	9b02      	ldr	r3, [sp, #8]
 800ce7c:	07d9      	lsls	r1, r3, #31
 800ce7e:	d40f      	bmi.n	800cea0 <_dtoa_r+0x6f8>
 800ce80:	4620      	mov	r0, r4
 800ce82:	4659      	mov	r1, fp
 800ce84:	f000 fc0c 	bl	800d6a0 <_Bfree>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	702b      	strb	r3, [r5, #0]
 800ce8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce8e:	f10a 0001 	add.w	r0, sl, #1
 800ce92:	6018      	str	r0, [r3, #0]
 800ce94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f43f acd8 	beq.w	800c84c <_dtoa_r+0xa4>
 800ce9c:	601d      	str	r5, [r3, #0]
 800ce9e:	e4d5      	b.n	800c84c <_dtoa_r+0xa4>
 800cea0:	f8cd a01c 	str.w	sl, [sp, #28]
 800cea4:	462b      	mov	r3, r5
 800cea6:	461d      	mov	r5, r3
 800cea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ceac:	2a39      	cmp	r2, #57	; 0x39
 800ceae:	d108      	bne.n	800cec2 <_dtoa_r+0x71a>
 800ceb0:	9a00      	ldr	r2, [sp, #0]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d1f7      	bne.n	800cea6 <_dtoa_r+0x6fe>
 800ceb6:	9a07      	ldr	r2, [sp, #28]
 800ceb8:	9900      	ldr	r1, [sp, #0]
 800ceba:	3201      	adds	r2, #1
 800cebc:	9207      	str	r2, [sp, #28]
 800cebe:	2230      	movs	r2, #48	; 0x30
 800cec0:	700a      	strb	r2, [r1, #0]
 800cec2:	781a      	ldrb	r2, [r3, #0]
 800cec4:	3201      	adds	r2, #1
 800cec6:	701a      	strb	r2, [r3, #0]
 800cec8:	e78c      	b.n	800cde4 <_dtoa_r+0x63c>
 800ceca:	4b7f      	ldr	r3, [pc, #508]	; (800d0c8 <_dtoa_r+0x920>)
 800cecc:	2200      	movs	r2, #0
 800cece:	f7f3 fb93 	bl	80005f8 <__aeabi_dmul>
 800ced2:	2200      	movs	r2, #0
 800ced4:	2300      	movs	r3, #0
 800ced6:	4606      	mov	r6, r0
 800ced8:	460f      	mov	r7, r1
 800ceda:	f7f3 fdf5 	bl	8000ac8 <__aeabi_dcmpeq>
 800cede:	2800      	cmp	r0, #0
 800cee0:	d09b      	beq.n	800ce1a <_dtoa_r+0x672>
 800cee2:	e7cd      	b.n	800ce80 <_dtoa_r+0x6d8>
 800cee4:	9a08      	ldr	r2, [sp, #32]
 800cee6:	2a00      	cmp	r2, #0
 800cee8:	f000 80c4 	beq.w	800d074 <_dtoa_r+0x8cc>
 800ceec:	9a05      	ldr	r2, [sp, #20]
 800ceee:	2a01      	cmp	r2, #1
 800cef0:	f300 80a8 	bgt.w	800d044 <_dtoa_r+0x89c>
 800cef4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cef6:	2a00      	cmp	r2, #0
 800cef8:	f000 80a0 	beq.w	800d03c <_dtoa_r+0x894>
 800cefc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cf00:	9e06      	ldr	r6, [sp, #24]
 800cf02:	4645      	mov	r5, r8
 800cf04:	9a04      	ldr	r2, [sp, #16]
 800cf06:	2101      	movs	r1, #1
 800cf08:	441a      	add	r2, r3
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	4498      	add	r8, r3
 800cf0e:	9204      	str	r2, [sp, #16]
 800cf10:	f000 fc82 	bl	800d818 <__i2b>
 800cf14:	4607      	mov	r7, r0
 800cf16:	2d00      	cmp	r5, #0
 800cf18:	dd0b      	ble.n	800cf32 <_dtoa_r+0x78a>
 800cf1a:	9b04      	ldr	r3, [sp, #16]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	dd08      	ble.n	800cf32 <_dtoa_r+0x78a>
 800cf20:	42ab      	cmp	r3, r5
 800cf22:	9a04      	ldr	r2, [sp, #16]
 800cf24:	bfa8      	it	ge
 800cf26:	462b      	movge	r3, r5
 800cf28:	eba8 0803 	sub.w	r8, r8, r3
 800cf2c:	1aed      	subs	r5, r5, r3
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	9b06      	ldr	r3, [sp, #24]
 800cf34:	b1fb      	cbz	r3, 800cf76 <_dtoa_r+0x7ce>
 800cf36:	9b08      	ldr	r3, [sp, #32]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 809f 	beq.w	800d07c <_dtoa_r+0x8d4>
 800cf3e:	2e00      	cmp	r6, #0
 800cf40:	dd11      	ble.n	800cf66 <_dtoa_r+0x7be>
 800cf42:	4639      	mov	r1, r7
 800cf44:	4632      	mov	r2, r6
 800cf46:	4620      	mov	r0, r4
 800cf48:	f000 fd22 	bl	800d990 <__pow5mult>
 800cf4c:	465a      	mov	r2, fp
 800cf4e:	4601      	mov	r1, r0
 800cf50:	4607      	mov	r7, r0
 800cf52:	4620      	mov	r0, r4
 800cf54:	f000 fc76 	bl	800d844 <__multiply>
 800cf58:	4659      	mov	r1, fp
 800cf5a:	9007      	str	r0, [sp, #28]
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f000 fb9f 	bl	800d6a0 <_Bfree>
 800cf62:	9b07      	ldr	r3, [sp, #28]
 800cf64:	469b      	mov	fp, r3
 800cf66:	9b06      	ldr	r3, [sp, #24]
 800cf68:	1b9a      	subs	r2, r3, r6
 800cf6a:	d004      	beq.n	800cf76 <_dtoa_r+0x7ce>
 800cf6c:	4659      	mov	r1, fp
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f000 fd0e 	bl	800d990 <__pow5mult>
 800cf74:	4683      	mov	fp, r0
 800cf76:	2101      	movs	r1, #1
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f000 fc4d 	bl	800d818 <__i2b>
 800cf7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	4606      	mov	r6, r0
 800cf84:	dd7c      	ble.n	800d080 <_dtoa_r+0x8d8>
 800cf86:	461a      	mov	r2, r3
 800cf88:	4601      	mov	r1, r0
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f000 fd00 	bl	800d990 <__pow5mult>
 800cf90:	9b05      	ldr	r3, [sp, #20]
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	4606      	mov	r6, r0
 800cf96:	dd76      	ble.n	800d086 <_dtoa_r+0x8de>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	9306      	str	r3, [sp, #24]
 800cf9c:	6933      	ldr	r3, [r6, #16]
 800cf9e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cfa2:	6918      	ldr	r0, [r3, #16]
 800cfa4:	f000 fbe8 	bl	800d778 <__hi0bits>
 800cfa8:	f1c0 0020 	rsb	r0, r0, #32
 800cfac:	9b04      	ldr	r3, [sp, #16]
 800cfae:	4418      	add	r0, r3
 800cfb0:	f010 001f 	ands.w	r0, r0, #31
 800cfb4:	f000 8086 	beq.w	800d0c4 <_dtoa_r+0x91c>
 800cfb8:	f1c0 0320 	rsb	r3, r0, #32
 800cfbc:	2b04      	cmp	r3, #4
 800cfbe:	dd7f      	ble.n	800d0c0 <_dtoa_r+0x918>
 800cfc0:	f1c0 001c 	rsb	r0, r0, #28
 800cfc4:	9b04      	ldr	r3, [sp, #16]
 800cfc6:	4403      	add	r3, r0
 800cfc8:	4480      	add	r8, r0
 800cfca:	4405      	add	r5, r0
 800cfcc:	9304      	str	r3, [sp, #16]
 800cfce:	f1b8 0f00 	cmp.w	r8, #0
 800cfd2:	dd05      	ble.n	800cfe0 <_dtoa_r+0x838>
 800cfd4:	4659      	mov	r1, fp
 800cfd6:	4642      	mov	r2, r8
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f000 fd33 	bl	800da44 <__lshift>
 800cfde:	4683      	mov	fp, r0
 800cfe0:	9b04      	ldr	r3, [sp, #16]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	dd05      	ble.n	800cff2 <_dtoa_r+0x84a>
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	461a      	mov	r2, r3
 800cfea:	4620      	mov	r0, r4
 800cfec:	f000 fd2a 	bl	800da44 <__lshift>
 800cff0:	4606      	mov	r6, r0
 800cff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d069      	beq.n	800d0cc <_dtoa_r+0x924>
 800cff8:	4631      	mov	r1, r6
 800cffa:	4658      	mov	r0, fp
 800cffc:	f000 fd8e 	bl	800db1c <__mcmp>
 800d000:	2800      	cmp	r0, #0
 800d002:	da63      	bge.n	800d0cc <_dtoa_r+0x924>
 800d004:	2300      	movs	r3, #0
 800d006:	4659      	mov	r1, fp
 800d008:	220a      	movs	r2, #10
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 fb6a 	bl	800d6e4 <__multadd>
 800d010:	9b08      	ldr	r3, [sp, #32]
 800d012:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d016:	4683      	mov	fp, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 818f 	beq.w	800d33c <_dtoa_r+0xb94>
 800d01e:	4639      	mov	r1, r7
 800d020:	2300      	movs	r3, #0
 800d022:	220a      	movs	r2, #10
 800d024:	4620      	mov	r0, r4
 800d026:	f000 fb5d 	bl	800d6e4 <__multadd>
 800d02a:	f1b9 0f00 	cmp.w	r9, #0
 800d02e:	4607      	mov	r7, r0
 800d030:	f300 808e 	bgt.w	800d150 <_dtoa_r+0x9a8>
 800d034:	9b05      	ldr	r3, [sp, #20]
 800d036:	2b02      	cmp	r3, #2
 800d038:	dc50      	bgt.n	800d0dc <_dtoa_r+0x934>
 800d03a:	e089      	b.n	800d150 <_dtoa_r+0x9a8>
 800d03c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d03e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d042:	e75d      	b.n	800cf00 <_dtoa_r+0x758>
 800d044:	9b01      	ldr	r3, [sp, #4]
 800d046:	1e5e      	subs	r6, r3, #1
 800d048:	9b06      	ldr	r3, [sp, #24]
 800d04a:	42b3      	cmp	r3, r6
 800d04c:	bfbf      	itttt	lt
 800d04e:	9b06      	ldrlt	r3, [sp, #24]
 800d050:	9606      	strlt	r6, [sp, #24]
 800d052:	1af2      	sublt	r2, r6, r3
 800d054:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d056:	bfb6      	itet	lt
 800d058:	189b      	addlt	r3, r3, r2
 800d05a:	1b9e      	subge	r6, r3, r6
 800d05c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d05e:	9b01      	ldr	r3, [sp, #4]
 800d060:	bfb8      	it	lt
 800d062:	2600      	movlt	r6, #0
 800d064:	2b00      	cmp	r3, #0
 800d066:	bfb5      	itete	lt
 800d068:	eba8 0503 	sublt.w	r5, r8, r3
 800d06c:	9b01      	ldrge	r3, [sp, #4]
 800d06e:	2300      	movlt	r3, #0
 800d070:	4645      	movge	r5, r8
 800d072:	e747      	b.n	800cf04 <_dtoa_r+0x75c>
 800d074:	9e06      	ldr	r6, [sp, #24]
 800d076:	9f08      	ldr	r7, [sp, #32]
 800d078:	4645      	mov	r5, r8
 800d07a:	e74c      	b.n	800cf16 <_dtoa_r+0x76e>
 800d07c:	9a06      	ldr	r2, [sp, #24]
 800d07e:	e775      	b.n	800cf6c <_dtoa_r+0x7c4>
 800d080:	9b05      	ldr	r3, [sp, #20]
 800d082:	2b01      	cmp	r3, #1
 800d084:	dc18      	bgt.n	800d0b8 <_dtoa_r+0x910>
 800d086:	9b02      	ldr	r3, [sp, #8]
 800d088:	b9b3      	cbnz	r3, 800d0b8 <_dtoa_r+0x910>
 800d08a:	9b03      	ldr	r3, [sp, #12]
 800d08c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d090:	b9a3      	cbnz	r3, 800d0bc <_dtoa_r+0x914>
 800d092:	9b03      	ldr	r3, [sp, #12]
 800d094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d098:	0d1b      	lsrs	r3, r3, #20
 800d09a:	051b      	lsls	r3, r3, #20
 800d09c:	b12b      	cbz	r3, 800d0aa <_dtoa_r+0x902>
 800d09e:	9b04      	ldr	r3, [sp, #16]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	9304      	str	r3, [sp, #16]
 800d0a4:	f108 0801 	add.w	r8, r8, #1
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	9306      	str	r3, [sp, #24]
 800d0ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f47f af74 	bne.w	800cf9c <_dtoa_r+0x7f4>
 800d0b4:	2001      	movs	r0, #1
 800d0b6:	e779      	b.n	800cfac <_dtoa_r+0x804>
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	e7f6      	b.n	800d0aa <_dtoa_r+0x902>
 800d0bc:	9b02      	ldr	r3, [sp, #8]
 800d0be:	e7f4      	b.n	800d0aa <_dtoa_r+0x902>
 800d0c0:	d085      	beq.n	800cfce <_dtoa_r+0x826>
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	301c      	adds	r0, #28
 800d0c6:	e77d      	b.n	800cfc4 <_dtoa_r+0x81c>
 800d0c8:	40240000 	.word	0x40240000
 800d0cc:	9b01      	ldr	r3, [sp, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	dc38      	bgt.n	800d144 <_dtoa_r+0x99c>
 800d0d2:	9b05      	ldr	r3, [sp, #20]
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	dd35      	ble.n	800d144 <_dtoa_r+0x99c>
 800d0d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d0dc:	f1b9 0f00 	cmp.w	r9, #0
 800d0e0:	d10d      	bne.n	800d0fe <_dtoa_r+0x956>
 800d0e2:	4631      	mov	r1, r6
 800d0e4:	464b      	mov	r3, r9
 800d0e6:	2205      	movs	r2, #5
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f000 fafb 	bl	800d6e4 <__multadd>
 800d0ee:	4601      	mov	r1, r0
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	4658      	mov	r0, fp
 800d0f4:	f000 fd12 	bl	800db1c <__mcmp>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	f73f adbd 	bgt.w	800cc78 <_dtoa_r+0x4d0>
 800d0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d100:	9d00      	ldr	r5, [sp, #0]
 800d102:	ea6f 0a03 	mvn.w	sl, r3
 800d106:	f04f 0800 	mov.w	r8, #0
 800d10a:	4631      	mov	r1, r6
 800d10c:	4620      	mov	r0, r4
 800d10e:	f000 fac7 	bl	800d6a0 <_Bfree>
 800d112:	2f00      	cmp	r7, #0
 800d114:	f43f aeb4 	beq.w	800ce80 <_dtoa_r+0x6d8>
 800d118:	f1b8 0f00 	cmp.w	r8, #0
 800d11c:	d005      	beq.n	800d12a <_dtoa_r+0x982>
 800d11e:	45b8      	cmp	r8, r7
 800d120:	d003      	beq.n	800d12a <_dtoa_r+0x982>
 800d122:	4641      	mov	r1, r8
 800d124:	4620      	mov	r0, r4
 800d126:	f000 fabb 	bl	800d6a0 <_Bfree>
 800d12a:	4639      	mov	r1, r7
 800d12c:	4620      	mov	r0, r4
 800d12e:	f000 fab7 	bl	800d6a0 <_Bfree>
 800d132:	e6a5      	b.n	800ce80 <_dtoa_r+0x6d8>
 800d134:	2600      	movs	r6, #0
 800d136:	4637      	mov	r7, r6
 800d138:	e7e1      	b.n	800d0fe <_dtoa_r+0x956>
 800d13a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d13c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d140:	4637      	mov	r7, r6
 800d142:	e599      	b.n	800cc78 <_dtoa_r+0x4d0>
 800d144:	9b08      	ldr	r3, [sp, #32]
 800d146:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 80fd 	beq.w	800d34a <_dtoa_r+0xba2>
 800d150:	2d00      	cmp	r5, #0
 800d152:	dd05      	ble.n	800d160 <_dtoa_r+0x9b8>
 800d154:	4639      	mov	r1, r7
 800d156:	462a      	mov	r2, r5
 800d158:	4620      	mov	r0, r4
 800d15a:	f000 fc73 	bl	800da44 <__lshift>
 800d15e:	4607      	mov	r7, r0
 800d160:	9b06      	ldr	r3, [sp, #24]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d05c      	beq.n	800d220 <_dtoa_r+0xa78>
 800d166:	6879      	ldr	r1, [r7, #4]
 800d168:	4620      	mov	r0, r4
 800d16a:	f000 fa59 	bl	800d620 <_Balloc>
 800d16e:	4605      	mov	r5, r0
 800d170:	b928      	cbnz	r0, 800d17e <_dtoa_r+0x9d6>
 800d172:	4b80      	ldr	r3, [pc, #512]	; (800d374 <_dtoa_r+0xbcc>)
 800d174:	4602      	mov	r2, r0
 800d176:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d17a:	f7ff bb2e 	b.w	800c7da <_dtoa_r+0x32>
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	3202      	adds	r2, #2
 800d182:	0092      	lsls	r2, r2, #2
 800d184:	f107 010c 	add.w	r1, r7, #12
 800d188:	300c      	adds	r0, #12
 800d18a:	f7fe fbba 	bl	800b902 <memcpy>
 800d18e:	2201      	movs	r2, #1
 800d190:	4629      	mov	r1, r5
 800d192:	4620      	mov	r0, r4
 800d194:	f000 fc56 	bl	800da44 <__lshift>
 800d198:	9b00      	ldr	r3, [sp, #0]
 800d19a:	3301      	adds	r3, #1
 800d19c:	9301      	str	r3, [sp, #4]
 800d19e:	9b00      	ldr	r3, [sp, #0]
 800d1a0:	444b      	add	r3, r9
 800d1a2:	9307      	str	r3, [sp, #28]
 800d1a4:	9b02      	ldr	r3, [sp, #8]
 800d1a6:	f003 0301 	and.w	r3, r3, #1
 800d1aa:	46b8      	mov	r8, r7
 800d1ac:	9306      	str	r3, [sp, #24]
 800d1ae:	4607      	mov	r7, r0
 800d1b0:	9b01      	ldr	r3, [sp, #4]
 800d1b2:	4631      	mov	r1, r6
 800d1b4:	3b01      	subs	r3, #1
 800d1b6:	4658      	mov	r0, fp
 800d1b8:	9302      	str	r3, [sp, #8]
 800d1ba:	f7ff fa69 	bl	800c690 <quorem>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	3330      	adds	r3, #48	; 0x30
 800d1c2:	9004      	str	r0, [sp, #16]
 800d1c4:	4641      	mov	r1, r8
 800d1c6:	4658      	mov	r0, fp
 800d1c8:	9308      	str	r3, [sp, #32]
 800d1ca:	f000 fca7 	bl	800db1c <__mcmp>
 800d1ce:	463a      	mov	r2, r7
 800d1d0:	4681      	mov	r9, r0
 800d1d2:	4631      	mov	r1, r6
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f000 fcbd 	bl	800db54 <__mdiff>
 800d1da:	68c2      	ldr	r2, [r0, #12]
 800d1dc:	9b08      	ldr	r3, [sp, #32]
 800d1de:	4605      	mov	r5, r0
 800d1e0:	bb02      	cbnz	r2, 800d224 <_dtoa_r+0xa7c>
 800d1e2:	4601      	mov	r1, r0
 800d1e4:	4658      	mov	r0, fp
 800d1e6:	f000 fc99 	bl	800db1c <__mcmp>
 800d1ea:	9b08      	ldr	r3, [sp, #32]
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d1f6:	f000 fa53 	bl	800d6a0 <_Bfree>
 800d1fa:	9b05      	ldr	r3, [sp, #20]
 800d1fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1fe:	9d01      	ldr	r5, [sp, #4]
 800d200:	ea43 0102 	orr.w	r1, r3, r2
 800d204:	9b06      	ldr	r3, [sp, #24]
 800d206:	430b      	orrs	r3, r1
 800d208:	9b08      	ldr	r3, [sp, #32]
 800d20a:	d10d      	bne.n	800d228 <_dtoa_r+0xa80>
 800d20c:	2b39      	cmp	r3, #57	; 0x39
 800d20e:	d029      	beq.n	800d264 <_dtoa_r+0xabc>
 800d210:	f1b9 0f00 	cmp.w	r9, #0
 800d214:	dd01      	ble.n	800d21a <_dtoa_r+0xa72>
 800d216:	9b04      	ldr	r3, [sp, #16]
 800d218:	3331      	adds	r3, #49	; 0x31
 800d21a:	9a02      	ldr	r2, [sp, #8]
 800d21c:	7013      	strb	r3, [r2, #0]
 800d21e:	e774      	b.n	800d10a <_dtoa_r+0x962>
 800d220:	4638      	mov	r0, r7
 800d222:	e7b9      	b.n	800d198 <_dtoa_r+0x9f0>
 800d224:	2201      	movs	r2, #1
 800d226:	e7e2      	b.n	800d1ee <_dtoa_r+0xa46>
 800d228:	f1b9 0f00 	cmp.w	r9, #0
 800d22c:	db06      	blt.n	800d23c <_dtoa_r+0xa94>
 800d22e:	9905      	ldr	r1, [sp, #20]
 800d230:	ea41 0909 	orr.w	r9, r1, r9
 800d234:	9906      	ldr	r1, [sp, #24]
 800d236:	ea59 0101 	orrs.w	r1, r9, r1
 800d23a:	d120      	bne.n	800d27e <_dtoa_r+0xad6>
 800d23c:	2a00      	cmp	r2, #0
 800d23e:	ddec      	ble.n	800d21a <_dtoa_r+0xa72>
 800d240:	4659      	mov	r1, fp
 800d242:	2201      	movs	r2, #1
 800d244:	4620      	mov	r0, r4
 800d246:	9301      	str	r3, [sp, #4]
 800d248:	f000 fbfc 	bl	800da44 <__lshift>
 800d24c:	4631      	mov	r1, r6
 800d24e:	4683      	mov	fp, r0
 800d250:	f000 fc64 	bl	800db1c <__mcmp>
 800d254:	2800      	cmp	r0, #0
 800d256:	9b01      	ldr	r3, [sp, #4]
 800d258:	dc02      	bgt.n	800d260 <_dtoa_r+0xab8>
 800d25a:	d1de      	bne.n	800d21a <_dtoa_r+0xa72>
 800d25c:	07da      	lsls	r2, r3, #31
 800d25e:	d5dc      	bpl.n	800d21a <_dtoa_r+0xa72>
 800d260:	2b39      	cmp	r3, #57	; 0x39
 800d262:	d1d8      	bne.n	800d216 <_dtoa_r+0xa6e>
 800d264:	9a02      	ldr	r2, [sp, #8]
 800d266:	2339      	movs	r3, #57	; 0x39
 800d268:	7013      	strb	r3, [r2, #0]
 800d26a:	462b      	mov	r3, r5
 800d26c:	461d      	mov	r5, r3
 800d26e:	3b01      	subs	r3, #1
 800d270:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d274:	2a39      	cmp	r2, #57	; 0x39
 800d276:	d050      	beq.n	800d31a <_dtoa_r+0xb72>
 800d278:	3201      	adds	r2, #1
 800d27a:	701a      	strb	r2, [r3, #0]
 800d27c:	e745      	b.n	800d10a <_dtoa_r+0x962>
 800d27e:	2a00      	cmp	r2, #0
 800d280:	dd03      	ble.n	800d28a <_dtoa_r+0xae2>
 800d282:	2b39      	cmp	r3, #57	; 0x39
 800d284:	d0ee      	beq.n	800d264 <_dtoa_r+0xabc>
 800d286:	3301      	adds	r3, #1
 800d288:	e7c7      	b.n	800d21a <_dtoa_r+0xa72>
 800d28a:	9a01      	ldr	r2, [sp, #4]
 800d28c:	9907      	ldr	r1, [sp, #28]
 800d28e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d292:	428a      	cmp	r2, r1
 800d294:	d02a      	beq.n	800d2ec <_dtoa_r+0xb44>
 800d296:	4659      	mov	r1, fp
 800d298:	2300      	movs	r3, #0
 800d29a:	220a      	movs	r2, #10
 800d29c:	4620      	mov	r0, r4
 800d29e:	f000 fa21 	bl	800d6e4 <__multadd>
 800d2a2:	45b8      	cmp	r8, r7
 800d2a4:	4683      	mov	fp, r0
 800d2a6:	f04f 0300 	mov.w	r3, #0
 800d2aa:	f04f 020a 	mov.w	r2, #10
 800d2ae:	4641      	mov	r1, r8
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	d107      	bne.n	800d2c4 <_dtoa_r+0xb1c>
 800d2b4:	f000 fa16 	bl	800d6e4 <__multadd>
 800d2b8:	4680      	mov	r8, r0
 800d2ba:	4607      	mov	r7, r0
 800d2bc:	9b01      	ldr	r3, [sp, #4]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	9301      	str	r3, [sp, #4]
 800d2c2:	e775      	b.n	800d1b0 <_dtoa_r+0xa08>
 800d2c4:	f000 fa0e 	bl	800d6e4 <__multadd>
 800d2c8:	4639      	mov	r1, r7
 800d2ca:	4680      	mov	r8, r0
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	220a      	movs	r2, #10
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f000 fa07 	bl	800d6e4 <__multadd>
 800d2d6:	4607      	mov	r7, r0
 800d2d8:	e7f0      	b.n	800d2bc <_dtoa_r+0xb14>
 800d2da:	f1b9 0f00 	cmp.w	r9, #0
 800d2de:	9a00      	ldr	r2, [sp, #0]
 800d2e0:	bfcc      	ite	gt
 800d2e2:	464d      	movgt	r5, r9
 800d2e4:	2501      	movle	r5, #1
 800d2e6:	4415      	add	r5, r2
 800d2e8:	f04f 0800 	mov.w	r8, #0
 800d2ec:	4659      	mov	r1, fp
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	9301      	str	r3, [sp, #4]
 800d2f4:	f000 fba6 	bl	800da44 <__lshift>
 800d2f8:	4631      	mov	r1, r6
 800d2fa:	4683      	mov	fp, r0
 800d2fc:	f000 fc0e 	bl	800db1c <__mcmp>
 800d300:	2800      	cmp	r0, #0
 800d302:	dcb2      	bgt.n	800d26a <_dtoa_r+0xac2>
 800d304:	d102      	bne.n	800d30c <_dtoa_r+0xb64>
 800d306:	9b01      	ldr	r3, [sp, #4]
 800d308:	07db      	lsls	r3, r3, #31
 800d30a:	d4ae      	bmi.n	800d26a <_dtoa_r+0xac2>
 800d30c:	462b      	mov	r3, r5
 800d30e:	461d      	mov	r5, r3
 800d310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d314:	2a30      	cmp	r2, #48	; 0x30
 800d316:	d0fa      	beq.n	800d30e <_dtoa_r+0xb66>
 800d318:	e6f7      	b.n	800d10a <_dtoa_r+0x962>
 800d31a:	9a00      	ldr	r2, [sp, #0]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d1a5      	bne.n	800d26c <_dtoa_r+0xac4>
 800d320:	f10a 0a01 	add.w	sl, sl, #1
 800d324:	2331      	movs	r3, #49	; 0x31
 800d326:	e779      	b.n	800d21c <_dtoa_r+0xa74>
 800d328:	4b13      	ldr	r3, [pc, #76]	; (800d378 <_dtoa_r+0xbd0>)
 800d32a:	f7ff baaf 	b.w	800c88c <_dtoa_r+0xe4>
 800d32e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d330:	2b00      	cmp	r3, #0
 800d332:	f47f aa86 	bne.w	800c842 <_dtoa_r+0x9a>
 800d336:	4b11      	ldr	r3, [pc, #68]	; (800d37c <_dtoa_r+0xbd4>)
 800d338:	f7ff baa8 	b.w	800c88c <_dtoa_r+0xe4>
 800d33c:	f1b9 0f00 	cmp.w	r9, #0
 800d340:	dc03      	bgt.n	800d34a <_dtoa_r+0xba2>
 800d342:	9b05      	ldr	r3, [sp, #20]
 800d344:	2b02      	cmp	r3, #2
 800d346:	f73f aec9 	bgt.w	800d0dc <_dtoa_r+0x934>
 800d34a:	9d00      	ldr	r5, [sp, #0]
 800d34c:	4631      	mov	r1, r6
 800d34e:	4658      	mov	r0, fp
 800d350:	f7ff f99e 	bl	800c690 <quorem>
 800d354:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d358:	f805 3b01 	strb.w	r3, [r5], #1
 800d35c:	9a00      	ldr	r2, [sp, #0]
 800d35e:	1aaa      	subs	r2, r5, r2
 800d360:	4591      	cmp	r9, r2
 800d362:	ddba      	ble.n	800d2da <_dtoa_r+0xb32>
 800d364:	4659      	mov	r1, fp
 800d366:	2300      	movs	r3, #0
 800d368:	220a      	movs	r2, #10
 800d36a:	4620      	mov	r0, r4
 800d36c:	f000 f9ba 	bl	800d6e4 <__multadd>
 800d370:	4683      	mov	fp, r0
 800d372:	e7eb      	b.n	800d34c <_dtoa_r+0xba4>
 800d374:	0800eb0f 	.word	0x0800eb0f
 800d378:	0800ea68 	.word	0x0800ea68
 800d37c:	0800ea8c 	.word	0x0800ea8c

0800d380 <__sflush_r>:
 800d380:	898a      	ldrh	r2, [r1, #12]
 800d382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d386:	4605      	mov	r5, r0
 800d388:	0710      	lsls	r0, r2, #28
 800d38a:	460c      	mov	r4, r1
 800d38c:	d458      	bmi.n	800d440 <__sflush_r+0xc0>
 800d38e:	684b      	ldr	r3, [r1, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	dc05      	bgt.n	800d3a0 <__sflush_r+0x20>
 800d394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d396:	2b00      	cmp	r3, #0
 800d398:	dc02      	bgt.n	800d3a0 <__sflush_r+0x20>
 800d39a:	2000      	movs	r0, #0
 800d39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3a2:	2e00      	cmp	r6, #0
 800d3a4:	d0f9      	beq.n	800d39a <__sflush_r+0x1a>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3ac:	682f      	ldr	r7, [r5, #0]
 800d3ae:	602b      	str	r3, [r5, #0]
 800d3b0:	d032      	beq.n	800d418 <__sflush_r+0x98>
 800d3b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	075a      	lsls	r2, r3, #29
 800d3b8:	d505      	bpl.n	800d3c6 <__sflush_r+0x46>
 800d3ba:	6863      	ldr	r3, [r4, #4]
 800d3bc:	1ac0      	subs	r0, r0, r3
 800d3be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3c0:	b10b      	cbz	r3, 800d3c6 <__sflush_r+0x46>
 800d3c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3c4:	1ac0      	subs	r0, r0, r3
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3cc:	6a21      	ldr	r1, [r4, #32]
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	47b0      	blx	r6
 800d3d2:	1c43      	adds	r3, r0, #1
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	d106      	bne.n	800d3e6 <__sflush_r+0x66>
 800d3d8:	6829      	ldr	r1, [r5, #0]
 800d3da:	291d      	cmp	r1, #29
 800d3dc:	d82c      	bhi.n	800d438 <__sflush_r+0xb8>
 800d3de:	4a2a      	ldr	r2, [pc, #168]	; (800d488 <__sflush_r+0x108>)
 800d3e0:	40ca      	lsrs	r2, r1
 800d3e2:	07d6      	lsls	r6, r2, #31
 800d3e4:	d528      	bpl.n	800d438 <__sflush_r+0xb8>
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	6062      	str	r2, [r4, #4]
 800d3ea:	04d9      	lsls	r1, r3, #19
 800d3ec:	6922      	ldr	r2, [r4, #16]
 800d3ee:	6022      	str	r2, [r4, #0]
 800d3f0:	d504      	bpl.n	800d3fc <__sflush_r+0x7c>
 800d3f2:	1c42      	adds	r2, r0, #1
 800d3f4:	d101      	bne.n	800d3fa <__sflush_r+0x7a>
 800d3f6:	682b      	ldr	r3, [r5, #0]
 800d3f8:	b903      	cbnz	r3, 800d3fc <__sflush_r+0x7c>
 800d3fa:	6560      	str	r0, [r4, #84]	; 0x54
 800d3fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3fe:	602f      	str	r7, [r5, #0]
 800d400:	2900      	cmp	r1, #0
 800d402:	d0ca      	beq.n	800d39a <__sflush_r+0x1a>
 800d404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d408:	4299      	cmp	r1, r3
 800d40a:	d002      	beq.n	800d412 <__sflush_r+0x92>
 800d40c:	4628      	mov	r0, r5
 800d40e:	f000 fc95 	bl	800dd3c <_free_r>
 800d412:	2000      	movs	r0, #0
 800d414:	6360      	str	r0, [r4, #52]	; 0x34
 800d416:	e7c1      	b.n	800d39c <__sflush_r+0x1c>
 800d418:	6a21      	ldr	r1, [r4, #32]
 800d41a:	2301      	movs	r3, #1
 800d41c:	4628      	mov	r0, r5
 800d41e:	47b0      	blx	r6
 800d420:	1c41      	adds	r1, r0, #1
 800d422:	d1c7      	bne.n	800d3b4 <__sflush_r+0x34>
 800d424:	682b      	ldr	r3, [r5, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d0c4      	beq.n	800d3b4 <__sflush_r+0x34>
 800d42a:	2b1d      	cmp	r3, #29
 800d42c:	d001      	beq.n	800d432 <__sflush_r+0xb2>
 800d42e:	2b16      	cmp	r3, #22
 800d430:	d101      	bne.n	800d436 <__sflush_r+0xb6>
 800d432:	602f      	str	r7, [r5, #0]
 800d434:	e7b1      	b.n	800d39a <__sflush_r+0x1a>
 800d436:	89a3      	ldrh	r3, [r4, #12]
 800d438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d43c:	81a3      	strh	r3, [r4, #12]
 800d43e:	e7ad      	b.n	800d39c <__sflush_r+0x1c>
 800d440:	690f      	ldr	r7, [r1, #16]
 800d442:	2f00      	cmp	r7, #0
 800d444:	d0a9      	beq.n	800d39a <__sflush_r+0x1a>
 800d446:	0793      	lsls	r3, r2, #30
 800d448:	680e      	ldr	r6, [r1, #0]
 800d44a:	bf08      	it	eq
 800d44c:	694b      	ldreq	r3, [r1, #20]
 800d44e:	600f      	str	r7, [r1, #0]
 800d450:	bf18      	it	ne
 800d452:	2300      	movne	r3, #0
 800d454:	eba6 0807 	sub.w	r8, r6, r7
 800d458:	608b      	str	r3, [r1, #8]
 800d45a:	f1b8 0f00 	cmp.w	r8, #0
 800d45e:	dd9c      	ble.n	800d39a <__sflush_r+0x1a>
 800d460:	6a21      	ldr	r1, [r4, #32]
 800d462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d464:	4643      	mov	r3, r8
 800d466:	463a      	mov	r2, r7
 800d468:	4628      	mov	r0, r5
 800d46a:	47b0      	blx	r6
 800d46c:	2800      	cmp	r0, #0
 800d46e:	dc06      	bgt.n	800d47e <__sflush_r+0xfe>
 800d470:	89a3      	ldrh	r3, [r4, #12]
 800d472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d476:	81a3      	strh	r3, [r4, #12]
 800d478:	f04f 30ff 	mov.w	r0, #4294967295
 800d47c:	e78e      	b.n	800d39c <__sflush_r+0x1c>
 800d47e:	4407      	add	r7, r0
 800d480:	eba8 0800 	sub.w	r8, r8, r0
 800d484:	e7e9      	b.n	800d45a <__sflush_r+0xda>
 800d486:	bf00      	nop
 800d488:	20400001 	.word	0x20400001

0800d48c <_fflush_r>:
 800d48c:	b538      	push	{r3, r4, r5, lr}
 800d48e:	690b      	ldr	r3, [r1, #16]
 800d490:	4605      	mov	r5, r0
 800d492:	460c      	mov	r4, r1
 800d494:	b913      	cbnz	r3, 800d49c <_fflush_r+0x10>
 800d496:	2500      	movs	r5, #0
 800d498:	4628      	mov	r0, r5
 800d49a:	bd38      	pop	{r3, r4, r5, pc}
 800d49c:	b118      	cbz	r0, 800d4a6 <_fflush_r+0x1a>
 800d49e:	6983      	ldr	r3, [r0, #24]
 800d4a0:	b90b      	cbnz	r3, 800d4a6 <_fflush_r+0x1a>
 800d4a2:	f7fe f969 	bl	800b778 <__sinit>
 800d4a6:	4b14      	ldr	r3, [pc, #80]	; (800d4f8 <_fflush_r+0x6c>)
 800d4a8:	429c      	cmp	r4, r3
 800d4aa:	d11b      	bne.n	800d4e4 <_fflush_r+0x58>
 800d4ac:	686c      	ldr	r4, [r5, #4]
 800d4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d0ef      	beq.n	800d496 <_fflush_r+0xa>
 800d4b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4b8:	07d0      	lsls	r0, r2, #31
 800d4ba:	d404      	bmi.n	800d4c6 <_fflush_r+0x3a>
 800d4bc:	0599      	lsls	r1, r3, #22
 800d4be:	d402      	bmi.n	800d4c6 <_fflush_r+0x3a>
 800d4c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4c2:	f7fe fa1c 	bl	800b8fe <__retarget_lock_acquire_recursive>
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	4621      	mov	r1, r4
 800d4ca:	f7ff ff59 	bl	800d380 <__sflush_r>
 800d4ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4d0:	07da      	lsls	r2, r3, #31
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	d4e0      	bmi.n	800d498 <_fflush_r+0xc>
 800d4d6:	89a3      	ldrh	r3, [r4, #12]
 800d4d8:	059b      	lsls	r3, r3, #22
 800d4da:	d4dd      	bmi.n	800d498 <_fflush_r+0xc>
 800d4dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4de:	f7fe fa0f 	bl	800b900 <__retarget_lock_release_recursive>
 800d4e2:	e7d9      	b.n	800d498 <_fflush_r+0xc>
 800d4e4:	4b05      	ldr	r3, [pc, #20]	; (800d4fc <_fflush_r+0x70>)
 800d4e6:	429c      	cmp	r4, r3
 800d4e8:	d101      	bne.n	800d4ee <_fflush_r+0x62>
 800d4ea:	68ac      	ldr	r4, [r5, #8]
 800d4ec:	e7df      	b.n	800d4ae <_fflush_r+0x22>
 800d4ee:	4b04      	ldr	r3, [pc, #16]	; (800d500 <_fflush_r+0x74>)
 800d4f0:	429c      	cmp	r4, r3
 800d4f2:	bf08      	it	eq
 800d4f4:	68ec      	ldreq	r4, [r5, #12]
 800d4f6:	e7da      	b.n	800d4ae <_fflush_r+0x22>
 800d4f8:	0800ea14 	.word	0x0800ea14
 800d4fc:	0800ea34 	.word	0x0800ea34
 800d500:	0800e9f4 	.word	0x0800e9f4

0800d504 <_localeconv_r>:
 800d504:	4800      	ldr	r0, [pc, #0]	; (800d508 <_localeconv_r+0x4>)
 800d506:	4770      	bx	lr
 800d508:	200002a4 	.word	0x200002a4

0800d50c <_lseek_r>:
 800d50c:	b538      	push	{r3, r4, r5, lr}
 800d50e:	4d07      	ldr	r5, [pc, #28]	; (800d52c <_lseek_r+0x20>)
 800d510:	4604      	mov	r4, r0
 800d512:	4608      	mov	r0, r1
 800d514:	4611      	mov	r1, r2
 800d516:	2200      	movs	r2, #0
 800d518:	602a      	str	r2, [r5, #0]
 800d51a:	461a      	mov	r2, r3
 800d51c:	f7f4 fd08 	bl	8001f30 <_lseek>
 800d520:	1c43      	adds	r3, r0, #1
 800d522:	d102      	bne.n	800d52a <_lseek_r+0x1e>
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	b103      	cbz	r3, 800d52a <_lseek_r+0x1e>
 800d528:	6023      	str	r3, [r4, #0]
 800d52a:	bd38      	pop	{r3, r4, r5, pc}
 800d52c:	200105d0 	.word	0x200105d0

0800d530 <__swhatbuf_r>:
 800d530:	b570      	push	{r4, r5, r6, lr}
 800d532:	460e      	mov	r6, r1
 800d534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d538:	2900      	cmp	r1, #0
 800d53a:	b096      	sub	sp, #88	; 0x58
 800d53c:	4614      	mov	r4, r2
 800d53e:	461d      	mov	r5, r3
 800d540:	da07      	bge.n	800d552 <__swhatbuf_r+0x22>
 800d542:	2300      	movs	r3, #0
 800d544:	602b      	str	r3, [r5, #0]
 800d546:	89b3      	ldrh	r3, [r6, #12]
 800d548:	061a      	lsls	r2, r3, #24
 800d54a:	d410      	bmi.n	800d56e <__swhatbuf_r+0x3e>
 800d54c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d550:	e00e      	b.n	800d570 <__swhatbuf_r+0x40>
 800d552:	466a      	mov	r2, sp
 800d554:	f000 ff3a 	bl	800e3cc <_fstat_r>
 800d558:	2800      	cmp	r0, #0
 800d55a:	dbf2      	blt.n	800d542 <__swhatbuf_r+0x12>
 800d55c:	9a01      	ldr	r2, [sp, #4]
 800d55e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d562:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d566:	425a      	negs	r2, r3
 800d568:	415a      	adcs	r2, r3
 800d56a:	602a      	str	r2, [r5, #0]
 800d56c:	e7ee      	b.n	800d54c <__swhatbuf_r+0x1c>
 800d56e:	2340      	movs	r3, #64	; 0x40
 800d570:	2000      	movs	r0, #0
 800d572:	6023      	str	r3, [r4, #0]
 800d574:	b016      	add	sp, #88	; 0x58
 800d576:	bd70      	pop	{r4, r5, r6, pc}

0800d578 <__smakebuf_r>:
 800d578:	898b      	ldrh	r3, [r1, #12]
 800d57a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d57c:	079d      	lsls	r5, r3, #30
 800d57e:	4606      	mov	r6, r0
 800d580:	460c      	mov	r4, r1
 800d582:	d507      	bpl.n	800d594 <__smakebuf_r+0x1c>
 800d584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	6123      	str	r3, [r4, #16]
 800d58c:	2301      	movs	r3, #1
 800d58e:	6163      	str	r3, [r4, #20]
 800d590:	b002      	add	sp, #8
 800d592:	bd70      	pop	{r4, r5, r6, pc}
 800d594:	ab01      	add	r3, sp, #4
 800d596:	466a      	mov	r2, sp
 800d598:	f7ff ffca 	bl	800d530 <__swhatbuf_r>
 800d59c:	9900      	ldr	r1, [sp, #0]
 800d59e:	4605      	mov	r5, r0
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f7fe f9c5 	bl	800b930 <_malloc_r>
 800d5a6:	b948      	cbnz	r0, 800d5bc <__smakebuf_r+0x44>
 800d5a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ac:	059a      	lsls	r2, r3, #22
 800d5ae:	d4ef      	bmi.n	800d590 <__smakebuf_r+0x18>
 800d5b0:	f023 0303 	bic.w	r3, r3, #3
 800d5b4:	f043 0302 	orr.w	r3, r3, #2
 800d5b8:	81a3      	strh	r3, [r4, #12]
 800d5ba:	e7e3      	b.n	800d584 <__smakebuf_r+0xc>
 800d5bc:	4b0d      	ldr	r3, [pc, #52]	; (800d5f4 <__smakebuf_r+0x7c>)
 800d5be:	62b3      	str	r3, [r6, #40]	; 0x28
 800d5c0:	89a3      	ldrh	r3, [r4, #12]
 800d5c2:	6020      	str	r0, [r4, #0]
 800d5c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5c8:	81a3      	strh	r3, [r4, #12]
 800d5ca:	9b00      	ldr	r3, [sp, #0]
 800d5cc:	6163      	str	r3, [r4, #20]
 800d5ce:	9b01      	ldr	r3, [sp, #4]
 800d5d0:	6120      	str	r0, [r4, #16]
 800d5d2:	b15b      	cbz	r3, 800d5ec <__smakebuf_r+0x74>
 800d5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f000 ff09 	bl	800e3f0 <_isatty_r>
 800d5de:	b128      	cbz	r0, 800d5ec <__smakebuf_r+0x74>
 800d5e0:	89a3      	ldrh	r3, [r4, #12]
 800d5e2:	f023 0303 	bic.w	r3, r3, #3
 800d5e6:	f043 0301 	orr.w	r3, r3, #1
 800d5ea:	81a3      	strh	r3, [r4, #12]
 800d5ec:	89a0      	ldrh	r0, [r4, #12]
 800d5ee:	4305      	orrs	r5, r0
 800d5f0:	81a5      	strh	r5, [r4, #12]
 800d5f2:	e7cd      	b.n	800d590 <__smakebuf_r+0x18>
 800d5f4:	0800b711 	.word	0x0800b711

0800d5f8 <malloc>:
 800d5f8:	4b02      	ldr	r3, [pc, #8]	; (800d604 <malloc+0xc>)
 800d5fa:	4601      	mov	r1, r0
 800d5fc:	6818      	ldr	r0, [r3, #0]
 800d5fe:	f7fe b997 	b.w	800b930 <_malloc_r>
 800d602:	bf00      	nop
 800d604:	20000150 	.word	0x20000150

0800d608 <__malloc_lock>:
 800d608:	4801      	ldr	r0, [pc, #4]	; (800d610 <__malloc_lock+0x8>)
 800d60a:	f7fe b978 	b.w	800b8fe <__retarget_lock_acquire_recursive>
 800d60e:	bf00      	nop
 800d610:	200105c8 	.word	0x200105c8

0800d614 <__malloc_unlock>:
 800d614:	4801      	ldr	r0, [pc, #4]	; (800d61c <__malloc_unlock+0x8>)
 800d616:	f7fe b973 	b.w	800b900 <__retarget_lock_release_recursive>
 800d61a:	bf00      	nop
 800d61c:	200105c8 	.word	0x200105c8

0800d620 <_Balloc>:
 800d620:	b570      	push	{r4, r5, r6, lr}
 800d622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d624:	4604      	mov	r4, r0
 800d626:	460d      	mov	r5, r1
 800d628:	b976      	cbnz	r6, 800d648 <_Balloc+0x28>
 800d62a:	2010      	movs	r0, #16
 800d62c:	f7ff ffe4 	bl	800d5f8 <malloc>
 800d630:	4602      	mov	r2, r0
 800d632:	6260      	str	r0, [r4, #36]	; 0x24
 800d634:	b920      	cbnz	r0, 800d640 <_Balloc+0x20>
 800d636:	4b18      	ldr	r3, [pc, #96]	; (800d698 <_Balloc+0x78>)
 800d638:	4818      	ldr	r0, [pc, #96]	; (800d69c <_Balloc+0x7c>)
 800d63a:	2166      	movs	r1, #102	; 0x66
 800d63c:	f000 fe96 	bl	800e36c <__assert_func>
 800d640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d644:	6006      	str	r6, [r0, #0]
 800d646:	60c6      	str	r6, [r0, #12]
 800d648:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d64a:	68f3      	ldr	r3, [r6, #12]
 800d64c:	b183      	cbz	r3, 800d670 <_Balloc+0x50>
 800d64e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d656:	b9b8      	cbnz	r0, 800d688 <_Balloc+0x68>
 800d658:	2101      	movs	r1, #1
 800d65a:	fa01 f605 	lsl.w	r6, r1, r5
 800d65e:	1d72      	adds	r2, r6, #5
 800d660:	0092      	lsls	r2, r2, #2
 800d662:	4620      	mov	r0, r4
 800d664:	f000 fb5a 	bl	800dd1c <_calloc_r>
 800d668:	b160      	cbz	r0, 800d684 <_Balloc+0x64>
 800d66a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d66e:	e00e      	b.n	800d68e <_Balloc+0x6e>
 800d670:	2221      	movs	r2, #33	; 0x21
 800d672:	2104      	movs	r1, #4
 800d674:	4620      	mov	r0, r4
 800d676:	f000 fb51 	bl	800dd1c <_calloc_r>
 800d67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d67c:	60f0      	str	r0, [r6, #12]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1e4      	bne.n	800d64e <_Balloc+0x2e>
 800d684:	2000      	movs	r0, #0
 800d686:	bd70      	pop	{r4, r5, r6, pc}
 800d688:	6802      	ldr	r2, [r0, #0]
 800d68a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d68e:	2300      	movs	r3, #0
 800d690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d694:	e7f7      	b.n	800d686 <_Balloc+0x66>
 800d696:	bf00      	nop
 800d698:	0800ea99 	.word	0x0800ea99
 800d69c:	0800eb20 	.word	0x0800eb20

0800d6a0 <_Bfree>:
 800d6a0:	b570      	push	{r4, r5, r6, lr}
 800d6a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6a4:	4605      	mov	r5, r0
 800d6a6:	460c      	mov	r4, r1
 800d6a8:	b976      	cbnz	r6, 800d6c8 <_Bfree+0x28>
 800d6aa:	2010      	movs	r0, #16
 800d6ac:	f7ff ffa4 	bl	800d5f8 <malloc>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	6268      	str	r0, [r5, #36]	; 0x24
 800d6b4:	b920      	cbnz	r0, 800d6c0 <_Bfree+0x20>
 800d6b6:	4b09      	ldr	r3, [pc, #36]	; (800d6dc <_Bfree+0x3c>)
 800d6b8:	4809      	ldr	r0, [pc, #36]	; (800d6e0 <_Bfree+0x40>)
 800d6ba:	218a      	movs	r1, #138	; 0x8a
 800d6bc:	f000 fe56 	bl	800e36c <__assert_func>
 800d6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6c4:	6006      	str	r6, [r0, #0]
 800d6c6:	60c6      	str	r6, [r0, #12]
 800d6c8:	b13c      	cbz	r4, 800d6da <_Bfree+0x3a>
 800d6ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d6cc:	6862      	ldr	r2, [r4, #4]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6d4:	6021      	str	r1, [r4, #0]
 800d6d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d6da:	bd70      	pop	{r4, r5, r6, pc}
 800d6dc:	0800ea99 	.word	0x0800ea99
 800d6e0:	0800eb20 	.word	0x0800eb20

0800d6e4 <__multadd>:
 800d6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e8:	690e      	ldr	r6, [r1, #16]
 800d6ea:	4607      	mov	r7, r0
 800d6ec:	4698      	mov	r8, r3
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	f101 0014 	add.w	r0, r1, #20
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	6805      	ldr	r5, [r0, #0]
 800d6f8:	b2a9      	uxth	r1, r5
 800d6fa:	fb02 8101 	mla	r1, r2, r1, r8
 800d6fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d702:	0c2d      	lsrs	r5, r5, #16
 800d704:	fb02 c505 	mla	r5, r2, r5, ip
 800d708:	b289      	uxth	r1, r1
 800d70a:	3301      	adds	r3, #1
 800d70c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d710:	429e      	cmp	r6, r3
 800d712:	f840 1b04 	str.w	r1, [r0], #4
 800d716:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d71a:	dcec      	bgt.n	800d6f6 <__multadd+0x12>
 800d71c:	f1b8 0f00 	cmp.w	r8, #0
 800d720:	d022      	beq.n	800d768 <__multadd+0x84>
 800d722:	68a3      	ldr	r3, [r4, #8]
 800d724:	42b3      	cmp	r3, r6
 800d726:	dc19      	bgt.n	800d75c <__multadd+0x78>
 800d728:	6861      	ldr	r1, [r4, #4]
 800d72a:	4638      	mov	r0, r7
 800d72c:	3101      	adds	r1, #1
 800d72e:	f7ff ff77 	bl	800d620 <_Balloc>
 800d732:	4605      	mov	r5, r0
 800d734:	b928      	cbnz	r0, 800d742 <__multadd+0x5e>
 800d736:	4602      	mov	r2, r0
 800d738:	4b0d      	ldr	r3, [pc, #52]	; (800d770 <__multadd+0x8c>)
 800d73a:	480e      	ldr	r0, [pc, #56]	; (800d774 <__multadd+0x90>)
 800d73c:	21b5      	movs	r1, #181	; 0xb5
 800d73e:	f000 fe15 	bl	800e36c <__assert_func>
 800d742:	6922      	ldr	r2, [r4, #16]
 800d744:	3202      	adds	r2, #2
 800d746:	f104 010c 	add.w	r1, r4, #12
 800d74a:	0092      	lsls	r2, r2, #2
 800d74c:	300c      	adds	r0, #12
 800d74e:	f7fe f8d8 	bl	800b902 <memcpy>
 800d752:	4621      	mov	r1, r4
 800d754:	4638      	mov	r0, r7
 800d756:	f7ff ffa3 	bl	800d6a0 <_Bfree>
 800d75a:	462c      	mov	r4, r5
 800d75c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d760:	3601      	adds	r6, #1
 800d762:	f8c3 8014 	str.w	r8, [r3, #20]
 800d766:	6126      	str	r6, [r4, #16]
 800d768:	4620      	mov	r0, r4
 800d76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d76e:	bf00      	nop
 800d770:	0800eb0f 	.word	0x0800eb0f
 800d774:	0800eb20 	.word	0x0800eb20

0800d778 <__hi0bits>:
 800d778:	0c03      	lsrs	r3, r0, #16
 800d77a:	041b      	lsls	r3, r3, #16
 800d77c:	b9d3      	cbnz	r3, 800d7b4 <__hi0bits+0x3c>
 800d77e:	0400      	lsls	r0, r0, #16
 800d780:	2310      	movs	r3, #16
 800d782:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d786:	bf04      	itt	eq
 800d788:	0200      	lsleq	r0, r0, #8
 800d78a:	3308      	addeq	r3, #8
 800d78c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d790:	bf04      	itt	eq
 800d792:	0100      	lsleq	r0, r0, #4
 800d794:	3304      	addeq	r3, #4
 800d796:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d79a:	bf04      	itt	eq
 800d79c:	0080      	lsleq	r0, r0, #2
 800d79e:	3302      	addeq	r3, #2
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	db05      	blt.n	800d7b0 <__hi0bits+0x38>
 800d7a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d7a8:	f103 0301 	add.w	r3, r3, #1
 800d7ac:	bf08      	it	eq
 800d7ae:	2320      	moveq	r3, #32
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	4770      	bx	lr
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	e7e4      	b.n	800d782 <__hi0bits+0xa>

0800d7b8 <__lo0bits>:
 800d7b8:	6803      	ldr	r3, [r0, #0]
 800d7ba:	f013 0207 	ands.w	r2, r3, #7
 800d7be:	4601      	mov	r1, r0
 800d7c0:	d00b      	beq.n	800d7da <__lo0bits+0x22>
 800d7c2:	07da      	lsls	r2, r3, #31
 800d7c4:	d424      	bmi.n	800d810 <__lo0bits+0x58>
 800d7c6:	0798      	lsls	r0, r3, #30
 800d7c8:	bf49      	itett	mi
 800d7ca:	085b      	lsrmi	r3, r3, #1
 800d7cc:	089b      	lsrpl	r3, r3, #2
 800d7ce:	2001      	movmi	r0, #1
 800d7d0:	600b      	strmi	r3, [r1, #0]
 800d7d2:	bf5c      	itt	pl
 800d7d4:	600b      	strpl	r3, [r1, #0]
 800d7d6:	2002      	movpl	r0, #2
 800d7d8:	4770      	bx	lr
 800d7da:	b298      	uxth	r0, r3
 800d7dc:	b9b0      	cbnz	r0, 800d80c <__lo0bits+0x54>
 800d7de:	0c1b      	lsrs	r3, r3, #16
 800d7e0:	2010      	movs	r0, #16
 800d7e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d7e6:	bf04      	itt	eq
 800d7e8:	0a1b      	lsreq	r3, r3, #8
 800d7ea:	3008      	addeq	r0, #8
 800d7ec:	071a      	lsls	r2, r3, #28
 800d7ee:	bf04      	itt	eq
 800d7f0:	091b      	lsreq	r3, r3, #4
 800d7f2:	3004      	addeq	r0, #4
 800d7f4:	079a      	lsls	r2, r3, #30
 800d7f6:	bf04      	itt	eq
 800d7f8:	089b      	lsreq	r3, r3, #2
 800d7fa:	3002      	addeq	r0, #2
 800d7fc:	07da      	lsls	r2, r3, #31
 800d7fe:	d403      	bmi.n	800d808 <__lo0bits+0x50>
 800d800:	085b      	lsrs	r3, r3, #1
 800d802:	f100 0001 	add.w	r0, r0, #1
 800d806:	d005      	beq.n	800d814 <__lo0bits+0x5c>
 800d808:	600b      	str	r3, [r1, #0]
 800d80a:	4770      	bx	lr
 800d80c:	4610      	mov	r0, r2
 800d80e:	e7e8      	b.n	800d7e2 <__lo0bits+0x2a>
 800d810:	2000      	movs	r0, #0
 800d812:	4770      	bx	lr
 800d814:	2020      	movs	r0, #32
 800d816:	4770      	bx	lr

0800d818 <__i2b>:
 800d818:	b510      	push	{r4, lr}
 800d81a:	460c      	mov	r4, r1
 800d81c:	2101      	movs	r1, #1
 800d81e:	f7ff feff 	bl	800d620 <_Balloc>
 800d822:	4602      	mov	r2, r0
 800d824:	b928      	cbnz	r0, 800d832 <__i2b+0x1a>
 800d826:	4b05      	ldr	r3, [pc, #20]	; (800d83c <__i2b+0x24>)
 800d828:	4805      	ldr	r0, [pc, #20]	; (800d840 <__i2b+0x28>)
 800d82a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d82e:	f000 fd9d 	bl	800e36c <__assert_func>
 800d832:	2301      	movs	r3, #1
 800d834:	6144      	str	r4, [r0, #20]
 800d836:	6103      	str	r3, [r0, #16]
 800d838:	bd10      	pop	{r4, pc}
 800d83a:	bf00      	nop
 800d83c:	0800eb0f 	.word	0x0800eb0f
 800d840:	0800eb20 	.word	0x0800eb20

0800d844 <__multiply>:
 800d844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d848:	4614      	mov	r4, r2
 800d84a:	690a      	ldr	r2, [r1, #16]
 800d84c:	6923      	ldr	r3, [r4, #16]
 800d84e:	429a      	cmp	r2, r3
 800d850:	bfb8      	it	lt
 800d852:	460b      	movlt	r3, r1
 800d854:	460d      	mov	r5, r1
 800d856:	bfbc      	itt	lt
 800d858:	4625      	movlt	r5, r4
 800d85a:	461c      	movlt	r4, r3
 800d85c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d860:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d864:	68ab      	ldr	r3, [r5, #8]
 800d866:	6869      	ldr	r1, [r5, #4]
 800d868:	eb0a 0709 	add.w	r7, sl, r9
 800d86c:	42bb      	cmp	r3, r7
 800d86e:	b085      	sub	sp, #20
 800d870:	bfb8      	it	lt
 800d872:	3101      	addlt	r1, #1
 800d874:	f7ff fed4 	bl	800d620 <_Balloc>
 800d878:	b930      	cbnz	r0, 800d888 <__multiply+0x44>
 800d87a:	4602      	mov	r2, r0
 800d87c:	4b42      	ldr	r3, [pc, #264]	; (800d988 <__multiply+0x144>)
 800d87e:	4843      	ldr	r0, [pc, #268]	; (800d98c <__multiply+0x148>)
 800d880:	f240 115d 	movw	r1, #349	; 0x15d
 800d884:	f000 fd72 	bl	800e36c <__assert_func>
 800d888:	f100 0614 	add.w	r6, r0, #20
 800d88c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d890:	4633      	mov	r3, r6
 800d892:	2200      	movs	r2, #0
 800d894:	4543      	cmp	r3, r8
 800d896:	d31e      	bcc.n	800d8d6 <__multiply+0x92>
 800d898:	f105 0c14 	add.w	ip, r5, #20
 800d89c:	f104 0314 	add.w	r3, r4, #20
 800d8a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d8a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d8a8:	9202      	str	r2, [sp, #8]
 800d8aa:	ebac 0205 	sub.w	r2, ip, r5
 800d8ae:	3a15      	subs	r2, #21
 800d8b0:	f022 0203 	bic.w	r2, r2, #3
 800d8b4:	3204      	adds	r2, #4
 800d8b6:	f105 0115 	add.w	r1, r5, #21
 800d8ba:	458c      	cmp	ip, r1
 800d8bc:	bf38      	it	cc
 800d8be:	2204      	movcc	r2, #4
 800d8c0:	9201      	str	r2, [sp, #4]
 800d8c2:	9a02      	ldr	r2, [sp, #8]
 800d8c4:	9303      	str	r3, [sp, #12]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d808      	bhi.n	800d8dc <__multiply+0x98>
 800d8ca:	2f00      	cmp	r7, #0
 800d8cc:	dc55      	bgt.n	800d97a <__multiply+0x136>
 800d8ce:	6107      	str	r7, [r0, #16]
 800d8d0:	b005      	add	sp, #20
 800d8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d6:	f843 2b04 	str.w	r2, [r3], #4
 800d8da:	e7db      	b.n	800d894 <__multiply+0x50>
 800d8dc:	f8b3 a000 	ldrh.w	sl, [r3]
 800d8e0:	f1ba 0f00 	cmp.w	sl, #0
 800d8e4:	d020      	beq.n	800d928 <__multiply+0xe4>
 800d8e6:	f105 0e14 	add.w	lr, r5, #20
 800d8ea:	46b1      	mov	r9, r6
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d8f2:	f8d9 b000 	ldr.w	fp, [r9]
 800d8f6:	b2a1      	uxth	r1, r4
 800d8f8:	fa1f fb8b 	uxth.w	fp, fp
 800d8fc:	fb0a b101 	mla	r1, sl, r1, fp
 800d900:	4411      	add	r1, r2
 800d902:	f8d9 2000 	ldr.w	r2, [r9]
 800d906:	0c24      	lsrs	r4, r4, #16
 800d908:	0c12      	lsrs	r2, r2, #16
 800d90a:	fb0a 2404 	mla	r4, sl, r4, r2
 800d90e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d912:	b289      	uxth	r1, r1
 800d914:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d918:	45f4      	cmp	ip, lr
 800d91a:	f849 1b04 	str.w	r1, [r9], #4
 800d91e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d922:	d8e4      	bhi.n	800d8ee <__multiply+0xaa>
 800d924:	9901      	ldr	r1, [sp, #4]
 800d926:	5072      	str	r2, [r6, r1]
 800d928:	9a03      	ldr	r2, [sp, #12]
 800d92a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d92e:	3304      	adds	r3, #4
 800d930:	f1b9 0f00 	cmp.w	r9, #0
 800d934:	d01f      	beq.n	800d976 <__multiply+0x132>
 800d936:	6834      	ldr	r4, [r6, #0]
 800d938:	f105 0114 	add.w	r1, r5, #20
 800d93c:	46b6      	mov	lr, r6
 800d93e:	f04f 0a00 	mov.w	sl, #0
 800d942:	880a      	ldrh	r2, [r1, #0]
 800d944:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d948:	fb09 b202 	mla	r2, r9, r2, fp
 800d94c:	4492      	add	sl, r2
 800d94e:	b2a4      	uxth	r4, r4
 800d950:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d954:	f84e 4b04 	str.w	r4, [lr], #4
 800d958:	f851 4b04 	ldr.w	r4, [r1], #4
 800d95c:	f8be 2000 	ldrh.w	r2, [lr]
 800d960:	0c24      	lsrs	r4, r4, #16
 800d962:	fb09 2404 	mla	r4, r9, r4, r2
 800d966:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d96a:	458c      	cmp	ip, r1
 800d96c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d970:	d8e7      	bhi.n	800d942 <__multiply+0xfe>
 800d972:	9a01      	ldr	r2, [sp, #4]
 800d974:	50b4      	str	r4, [r6, r2]
 800d976:	3604      	adds	r6, #4
 800d978:	e7a3      	b.n	800d8c2 <__multiply+0x7e>
 800d97a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1a5      	bne.n	800d8ce <__multiply+0x8a>
 800d982:	3f01      	subs	r7, #1
 800d984:	e7a1      	b.n	800d8ca <__multiply+0x86>
 800d986:	bf00      	nop
 800d988:	0800eb0f 	.word	0x0800eb0f
 800d98c:	0800eb20 	.word	0x0800eb20

0800d990 <__pow5mult>:
 800d990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d994:	4615      	mov	r5, r2
 800d996:	f012 0203 	ands.w	r2, r2, #3
 800d99a:	4606      	mov	r6, r0
 800d99c:	460f      	mov	r7, r1
 800d99e:	d007      	beq.n	800d9b0 <__pow5mult+0x20>
 800d9a0:	4c25      	ldr	r4, [pc, #148]	; (800da38 <__pow5mult+0xa8>)
 800d9a2:	3a01      	subs	r2, #1
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9aa:	f7ff fe9b 	bl	800d6e4 <__multadd>
 800d9ae:	4607      	mov	r7, r0
 800d9b0:	10ad      	asrs	r5, r5, #2
 800d9b2:	d03d      	beq.n	800da30 <__pow5mult+0xa0>
 800d9b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9b6:	b97c      	cbnz	r4, 800d9d8 <__pow5mult+0x48>
 800d9b8:	2010      	movs	r0, #16
 800d9ba:	f7ff fe1d 	bl	800d5f8 <malloc>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	6270      	str	r0, [r6, #36]	; 0x24
 800d9c2:	b928      	cbnz	r0, 800d9d0 <__pow5mult+0x40>
 800d9c4:	4b1d      	ldr	r3, [pc, #116]	; (800da3c <__pow5mult+0xac>)
 800d9c6:	481e      	ldr	r0, [pc, #120]	; (800da40 <__pow5mult+0xb0>)
 800d9c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d9cc:	f000 fcce 	bl	800e36c <__assert_func>
 800d9d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9d4:	6004      	str	r4, [r0, #0]
 800d9d6:	60c4      	str	r4, [r0, #12]
 800d9d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d9dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9e0:	b94c      	cbnz	r4, 800d9f6 <__pow5mult+0x66>
 800d9e2:	f240 2171 	movw	r1, #625	; 0x271
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	f7ff ff16 	bl	800d818 <__i2b>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	6003      	str	r3, [r0, #0]
 800d9f6:	f04f 0900 	mov.w	r9, #0
 800d9fa:	07eb      	lsls	r3, r5, #31
 800d9fc:	d50a      	bpl.n	800da14 <__pow5mult+0x84>
 800d9fe:	4639      	mov	r1, r7
 800da00:	4622      	mov	r2, r4
 800da02:	4630      	mov	r0, r6
 800da04:	f7ff ff1e 	bl	800d844 <__multiply>
 800da08:	4639      	mov	r1, r7
 800da0a:	4680      	mov	r8, r0
 800da0c:	4630      	mov	r0, r6
 800da0e:	f7ff fe47 	bl	800d6a0 <_Bfree>
 800da12:	4647      	mov	r7, r8
 800da14:	106d      	asrs	r5, r5, #1
 800da16:	d00b      	beq.n	800da30 <__pow5mult+0xa0>
 800da18:	6820      	ldr	r0, [r4, #0]
 800da1a:	b938      	cbnz	r0, 800da2c <__pow5mult+0x9c>
 800da1c:	4622      	mov	r2, r4
 800da1e:	4621      	mov	r1, r4
 800da20:	4630      	mov	r0, r6
 800da22:	f7ff ff0f 	bl	800d844 <__multiply>
 800da26:	6020      	str	r0, [r4, #0]
 800da28:	f8c0 9000 	str.w	r9, [r0]
 800da2c:	4604      	mov	r4, r0
 800da2e:	e7e4      	b.n	800d9fa <__pow5mult+0x6a>
 800da30:	4638      	mov	r0, r7
 800da32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da36:	bf00      	nop
 800da38:	0800ec70 	.word	0x0800ec70
 800da3c:	0800ea99 	.word	0x0800ea99
 800da40:	0800eb20 	.word	0x0800eb20

0800da44 <__lshift>:
 800da44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da48:	460c      	mov	r4, r1
 800da4a:	6849      	ldr	r1, [r1, #4]
 800da4c:	6923      	ldr	r3, [r4, #16]
 800da4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da52:	68a3      	ldr	r3, [r4, #8]
 800da54:	4607      	mov	r7, r0
 800da56:	4691      	mov	r9, r2
 800da58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da5c:	f108 0601 	add.w	r6, r8, #1
 800da60:	42b3      	cmp	r3, r6
 800da62:	db0b      	blt.n	800da7c <__lshift+0x38>
 800da64:	4638      	mov	r0, r7
 800da66:	f7ff fddb 	bl	800d620 <_Balloc>
 800da6a:	4605      	mov	r5, r0
 800da6c:	b948      	cbnz	r0, 800da82 <__lshift+0x3e>
 800da6e:	4602      	mov	r2, r0
 800da70:	4b28      	ldr	r3, [pc, #160]	; (800db14 <__lshift+0xd0>)
 800da72:	4829      	ldr	r0, [pc, #164]	; (800db18 <__lshift+0xd4>)
 800da74:	f240 11d9 	movw	r1, #473	; 0x1d9
 800da78:	f000 fc78 	bl	800e36c <__assert_func>
 800da7c:	3101      	adds	r1, #1
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	e7ee      	b.n	800da60 <__lshift+0x1c>
 800da82:	2300      	movs	r3, #0
 800da84:	f100 0114 	add.w	r1, r0, #20
 800da88:	f100 0210 	add.w	r2, r0, #16
 800da8c:	4618      	mov	r0, r3
 800da8e:	4553      	cmp	r3, sl
 800da90:	db33      	blt.n	800dafa <__lshift+0xb6>
 800da92:	6920      	ldr	r0, [r4, #16]
 800da94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da98:	f104 0314 	add.w	r3, r4, #20
 800da9c:	f019 091f 	ands.w	r9, r9, #31
 800daa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800daa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800daa8:	d02b      	beq.n	800db02 <__lshift+0xbe>
 800daaa:	f1c9 0e20 	rsb	lr, r9, #32
 800daae:	468a      	mov	sl, r1
 800dab0:	2200      	movs	r2, #0
 800dab2:	6818      	ldr	r0, [r3, #0]
 800dab4:	fa00 f009 	lsl.w	r0, r0, r9
 800dab8:	4302      	orrs	r2, r0
 800daba:	f84a 2b04 	str.w	r2, [sl], #4
 800dabe:	f853 2b04 	ldr.w	r2, [r3], #4
 800dac2:	459c      	cmp	ip, r3
 800dac4:	fa22 f20e 	lsr.w	r2, r2, lr
 800dac8:	d8f3      	bhi.n	800dab2 <__lshift+0x6e>
 800daca:	ebac 0304 	sub.w	r3, ip, r4
 800dace:	3b15      	subs	r3, #21
 800dad0:	f023 0303 	bic.w	r3, r3, #3
 800dad4:	3304      	adds	r3, #4
 800dad6:	f104 0015 	add.w	r0, r4, #21
 800dada:	4584      	cmp	ip, r0
 800dadc:	bf38      	it	cc
 800dade:	2304      	movcc	r3, #4
 800dae0:	50ca      	str	r2, [r1, r3]
 800dae2:	b10a      	cbz	r2, 800dae8 <__lshift+0xa4>
 800dae4:	f108 0602 	add.w	r6, r8, #2
 800dae8:	3e01      	subs	r6, #1
 800daea:	4638      	mov	r0, r7
 800daec:	612e      	str	r6, [r5, #16]
 800daee:	4621      	mov	r1, r4
 800daf0:	f7ff fdd6 	bl	800d6a0 <_Bfree>
 800daf4:	4628      	mov	r0, r5
 800daf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800dafe:	3301      	adds	r3, #1
 800db00:	e7c5      	b.n	800da8e <__lshift+0x4a>
 800db02:	3904      	subs	r1, #4
 800db04:	f853 2b04 	ldr.w	r2, [r3], #4
 800db08:	f841 2f04 	str.w	r2, [r1, #4]!
 800db0c:	459c      	cmp	ip, r3
 800db0e:	d8f9      	bhi.n	800db04 <__lshift+0xc0>
 800db10:	e7ea      	b.n	800dae8 <__lshift+0xa4>
 800db12:	bf00      	nop
 800db14:	0800eb0f 	.word	0x0800eb0f
 800db18:	0800eb20 	.word	0x0800eb20

0800db1c <__mcmp>:
 800db1c:	b530      	push	{r4, r5, lr}
 800db1e:	6902      	ldr	r2, [r0, #16]
 800db20:	690c      	ldr	r4, [r1, #16]
 800db22:	1b12      	subs	r2, r2, r4
 800db24:	d10e      	bne.n	800db44 <__mcmp+0x28>
 800db26:	f100 0314 	add.w	r3, r0, #20
 800db2a:	3114      	adds	r1, #20
 800db2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db3c:	42a5      	cmp	r5, r4
 800db3e:	d003      	beq.n	800db48 <__mcmp+0x2c>
 800db40:	d305      	bcc.n	800db4e <__mcmp+0x32>
 800db42:	2201      	movs	r2, #1
 800db44:	4610      	mov	r0, r2
 800db46:	bd30      	pop	{r4, r5, pc}
 800db48:	4283      	cmp	r3, r0
 800db4a:	d3f3      	bcc.n	800db34 <__mcmp+0x18>
 800db4c:	e7fa      	b.n	800db44 <__mcmp+0x28>
 800db4e:	f04f 32ff 	mov.w	r2, #4294967295
 800db52:	e7f7      	b.n	800db44 <__mcmp+0x28>

0800db54 <__mdiff>:
 800db54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db58:	460c      	mov	r4, r1
 800db5a:	4606      	mov	r6, r0
 800db5c:	4611      	mov	r1, r2
 800db5e:	4620      	mov	r0, r4
 800db60:	4617      	mov	r7, r2
 800db62:	f7ff ffdb 	bl	800db1c <__mcmp>
 800db66:	1e05      	subs	r5, r0, #0
 800db68:	d110      	bne.n	800db8c <__mdiff+0x38>
 800db6a:	4629      	mov	r1, r5
 800db6c:	4630      	mov	r0, r6
 800db6e:	f7ff fd57 	bl	800d620 <_Balloc>
 800db72:	b930      	cbnz	r0, 800db82 <__mdiff+0x2e>
 800db74:	4b39      	ldr	r3, [pc, #228]	; (800dc5c <__mdiff+0x108>)
 800db76:	4602      	mov	r2, r0
 800db78:	f240 2132 	movw	r1, #562	; 0x232
 800db7c:	4838      	ldr	r0, [pc, #224]	; (800dc60 <__mdiff+0x10c>)
 800db7e:	f000 fbf5 	bl	800e36c <__assert_func>
 800db82:	2301      	movs	r3, #1
 800db84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8c:	bfa4      	itt	ge
 800db8e:	463b      	movge	r3, r7
 800db90:	4627      	movge	r7, r4
 800db92:	4630      	mov	r0, r6
 800db94:	6879      	ldr	r1, [r7, #4]
 800db96:	bfa6      	itte	ge
 800db98:	461c      	movge	r4, r3
 800db9a:	2500      	movge	r5, #0
 800db9c:	2501      	movlt	r5, #1
 800db9e:	f7ff fd3f 	bl	800d620 <_Balloc>
 800dba2:	b920      	cbnz	r0, 800dbae <__mdiff+0x5a>
 800dba4:	4b2d      	ldr	r3, [pc, #180]	; (800dc5c <__mdiff+0x108>)
 800dba6:	4602      	mov	r2, r0
 800dba8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dbac:	e7e6      	b.n	800db7c <__mdiff+0x28>
 800dbae:	693e      	ldr	r6, [r7, #16]
 800dbb0:	60c5      	str	r5, [r0, #12]
 800dbb2:	6925      	ldr	r5, [r4, #16]
 800dbb4:	f107 0114 	add.w	r1, r7, #20
 800dbb8:	f104 0914 	add.w	r9, r4, #20
 800dbbc:	f100 0e14 	add.w	lr, r0, #20
 800dbc0:	f107 0210 	add.w	r2, r7, #16
 800dbc4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dbc8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dbcc:	46f2      	mov	sl, lr
 800dbce:	2700      	movs	r7, #0
 800dbd0:	f859 3b04 	ldr.w	r3, [r9], #4
 800dbd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dbd8:	fa1f f883 	uxth.w	r8, r3
 800dbdc:	fa17 f78b 	uxtah	r7, r7, fp
 800dbe0:	0c1b      	lsrs	r3, r3, #16
 800dbe2:	eba7 0808 	sub.w	r8, r7, r8
 800dbe6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dbea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dbee:	fa1f f888 	uxth.w	r8, r8
 800dbf2:	141f      	asrs	r7, r3, #16
 800dbf4:	454d      	cmp	r5, r9
 800dbf6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dbfa:	f84a 3b04 	str.w	r3, [sl], #4
 800dbfe:	d8e7      	bhi.n	800dbd0 <__mdiff+0x7c>
 800dc00:	1b2b      	subs	r3, r5, r4
 800dc02:	3b15      	subs	r3, #21
 800dc04:	f023 0303 	bic.w	r3, r3, #3
 800dc08:	3304      	adds	r3, #4
 800dc0a:	3415      	adds	r4, #21
 800dc0c:	42a5      	cmp	r5, r4
 800dc0e:	bf38      	it	cc
 800dc10:	2304      	movcc	r3, #4
 800dc12:	4419      	add	r1, r3
 800dc14:	4473      	add	r3, lr
 800dc16:	469e      	mov	lr, r3
 800dc18:	460d      	mov	r5, r1
 800dc1a:	4565      	cmp	r5, ip
 800dc1c:	d30e      	bcc.n	800dc3c <__mdiff+0xe8>
 800dc1e:	f10c 0203 	add.w	r2, ip, #3
 800dc22:	1a52      	subs	r2, r2, r1
 800dc24:	f022 0203 	bic.w	r2, r2, #3
 800dc28:	3903      	subs	r1, #3
 800dc2a:	458c      	cmp	ip, r1
 800dc2c:	bf38      	it	cc
 800dc2e:	2200      	movcc	r2, #0
 800dc30:	441a      	add	r2, r3
 800dc32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dc36:	b17b      	cbz	r3, 800dc58 <__mdiff+0x104>
 800dc38:	6106      	str	r6, [r0, #16]
 800dc3a:	e7a5      	b.n	800db88 <__mdiff+0x34>
 800dc3c:	f855 8b04 	ldr.w	r8, [r5], #4
 800dc40:	fa17 f488 	uxtah	r4, r7, r8
 800dc44:	1422      	asrs	r2, r4, #16
 800dc46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dc4a:	b2a4      	uxth	r4, r4
 800dc4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dc50:	f84e 4b04 	str.w	r4, [lr], #4
 800dc54:	1417      	asrs	r7, r2, #16
 800dc56:	e7e0      	b.n	800dc1a <__mdiff+0xc6>
 800dc58:	3e01      	subs	r6, #1
 800dc5a:	e7ea      	b.n	800dc32 <__mdiff+0xde>
 800dc5c:	0800eb0f 	.word	0x0800eb0f
 800dc60:	0800eb20 	.word	0x0800eb20

0800dc64 <__d2b>:
 800dc64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc68:	4689      	mov	r9, r1
 800dc6a:	2101      	movs	r1, #1
 800dc6c:	ec57 6b10 	vmov	r6, r7, d0
 800dc70:	4690      	mov	r8, r2
 800dc72:	f7ff fcd5 	bl	800d620 <_Balloc>
 800dc76:	4604      	mov	r4, r0
 800dc78:	b930      	cbnz	r0, 800dc88 <__d2b+0x24>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	4b25      	ldr	r3, [pc, #148]	; (800dd14 <__d2b+0xb0>)
 800dc7e:	4826      	ldr	r0, [pc, #152]	; (800dd18 <__d2b+0xb4>)
 800dc80:	f240 310a 	movw	r1, #778	; 0x30a
 800dc84:	f000 fb72 	bl	800e36c <__assert_func>
 800dc88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dc8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc90:	bb35      	cbnz	r5, 800dce0 <__d2b+0x7c>
 800dc92:	2e00      	cmp	r6, #0
 800dc94:	9301      	str	r3, [sp, #4]
 800dc96:	d028      	beq.n	800dcea <__d2b+0x86>
 800dc98:	4668      	mov	r0, sp
 800dc9a:	9600      	str	r6, [sp, #0]
 800dc9c:	f7ff fd8c 	bl	800d7b8 <__lo0bits>
 800dca0:	9900      	ldr	r1, [sp, #0]
 800dca2:	b300      	cbz	r0, 800dce6 <__d2b+0x82>
 800dca4:	9a01      	ldr	r2, [sp, #4]
 800dca6:	f1c0 0320 	rsb	r3, r0, #32
 800dcaa:	fa02 f303 	lsl.w	r3, r2, r3
 800dcae:	430b      	orrs	r3, r1
 800dcb0:	40c2      	lsrs	r2, r0
 800dcb2:	6163      	str	r3, [r4, #20]
 800dcb4:	9201      	str	r2, [sp, #4]
 800dcb6:	9b01      	ldr	r3, [sp, #4]
 800dcb8:	61a3      	str	r3, [r4, #24]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	bf14      	ite	ne
 800dcbe:	2202      	movne	r2, #2
 800dcc0:	2201      	moveq	r2, #1
 800dcc2:	6122      	str	r2, [r4, #16]
 800dcc4:	b1d5      	cbz	r5, 800dcfc <__d2b+0x98>
 800dcc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dcca:	4405      	add	r5, r0
 800dccc:	f8c9 5000 	str.w	r5, [r9]
 800dcd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dcd4:	f8c8 0000 	str.w	r0, [r8]
 800dcd8:	4620      	mov	r0, r4
 800dcda:	b003      	add	sp, #12
 800dcdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dce4:	e7d5      	b.n	800dc92 <__d2b+0x2e>
 800dce6:	6161      	str	r1, [r4, #20]
 800dce8:	e7e5      	b.n	800dcb6 <__d2b+0x52>
 800dcea:	a801      	add	r0, sp, #4
 800dcec:	f7ff fd64 	bl	800d7b8 <__lo0bits>
 800dcf0:	9b01      	ldr	r3, [sp, #4]
 800dcf2:	6163      	str	r3, [r4, #20]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	6122      	str	r2, [r4, #16]
 800dcf8:	3020      	adds	r0, #32
 800dcfa:	e7e3      	b.n	800dcc4 <__d2b+0x60>
 800dcfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd04:	f8c9 0000 	str.w	r0, [r9]
 800dd08:	6918      	ldr	r0, [r3, #16]
 800dd0a:	f7ff fd35 	bl	800d778 <__hi0bits>
 800dd0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd12:	e7df      	b.n	800dcd4 <__d2b+0x70>
 800dd14:	0800eb0f 	.word	0x0800eb0f
 800dd18:	0800eb20 	.word	0x0800eb20

0800dd1c <_calloc_r>:
 800dd1c:	b513      	push	{r0, r1, r4, lr}
 800dd1e:	434a      	muls	r2, r1
 800dd20:	4611      	mov	r1, r2
 800dd22:	9201      	str	r2, [sp, #4]
 800dd24:	f7fd fe04 	bl	800b930 <_malloc_r>
 800dd28:	4604      	mov	r4, r0
 800dd2a:	b118      	cbz	r0, 800dd34 <_calloc_r+0x18>
 800dd2c:	9a01      	ldr	r2, [sp, #4]
 800dd2e:	2100      	movs	r1, #0
 800dd30:	f7fd fdf5 	bl	800b91e <memset>
 800dd34:	4620      	mov	r0, r4
 800dd36:	b002      	add	sp, #8
 800dd38:	bd10      	pop	{r4, pc}
	...

0800dd3c <_free_r>:
 800dd3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd3e:	2900      	cmp	r1, #0
 800dd40:	d048      	beq.n	800ddd4 <_free_r+0x98>
 800dd42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd46:	9001      	str	r0, [sp, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f1a1 0404 	sub.w	r4, r1, #4
 800dd4e:	bfb8      	it	lt
 800dd50:	18e4      	addlt	r4, r4, r3
 800dd52:	f7ff fc59 	bl	800d608 <__malloc_lock>
 800dd56:	4a20      	ldr	r2, [pc, #128]	; (800ddd8 <_free_r+0x9c>)
 800dd58:	9801      	ldr	r0, [sp, #4]
 800dd5a:	6813      	ldr	r3, [r2, #0]
 800dd5c:	4615      	mov	r5, r2
 800dd5e:	b933      	cbnz	r3, 800dd6e <_free_r+0x32>
 800dd60:	6063      	str	r3, [r4, #4]
 800dd62:	6014      	str	r4, [r2, #0]
 800dd64:	b003      	add	sp, #12
 800dd66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd6a:	f7ff bc53 	b.w	800d614 <__malloc_unlock>
 800dd6e:	42a3      	cmp	r3, r4
 800dd70:	d90b      	bls.n	800dd8a <_free_r+0x4e>
 800dd72:	6821      	ldr	r1, [r4, #0]
 800dd74:	1862      	adds	r2, r4, r1
 800dd76:	4293      	cmp	r3, r2
 800dd78:	bf04      	itt	eq
 800dd7a:	681a      	ldreq	r2, [r3, #0]
 800dd7c:	685b      	ldreq	r3, [r3, #4]
 800dd7e:	6063      	str	r3, [r4, #4]
 800dd80:	bf04      	itt	eq
 800dd82:	1852      	addeq	r2, r2, r1
 800dd84:	6022      	streq	r2, [r4, #0]
 800dd86:	602c      	str	r4, [r5, #0]
 800dd88:	e7ec      	b.n	800dd64 <_free_r+0x28>
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	b10b      	cbz	r3, 800dd94 <_free_r+0x58>
 800dd90:	42a3      	cmp	r3, r4
 800dd92:	d9fa      	bls.n	800dd8a <_free_r+0x4e>
 800dd94:	6811      	ldr	r1, [r2, #0]
 800dd96:	1855      	adds	r5, r2, r1
 800dd98:	42a5      	cmp	r5, r4
 800dd9a:	d10b      	bne.n	800ddb4 <_free_r+0x78>
 800dd9c:	6824      	ldr	r4, [r4, #0]
 800dd9e:	4421      	add	r1, r4
 800dda0:	1854      	adds	r4, r2, r1
 800dda2:	42a3      	cmp	r3, r4
 800dda4:	6011      	str	r1, [r2, #0]
 800dda6:	d1dd      	bne.n	800dd64 <_free_r+0x28>
 800dda8:	681c      	ldr	r4, [r3, #0]
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	6053      	str	r3, [r2, #4]
 800ddae:	4421      	add	r1, r4
 800ddb0:	6011      	str	r1, [r2, #0]
 800ddb2:	e7d7      	b.n	800dd64 <_free_r+0x28>
 800ddb4:	d902      	bls.n	800ddbc <_free_r+0x80>
 800ddb6:	230c      	movs	r3, #12
 800ddb8:	6003      	str	r3, [r0, #0]
 800ddba:	e7d3      	b.n	800dd64 <_free_r+0x28>
 800ddbc:	6825      	ldr	r5, [r4, #0]
 800ddbe:	1961      	adds	r1, r4, r5
 800ddc0:	428b      	cmp	r3, r1
 800ddc2:	bf04      	itt	eq
 800ddc4:	6819      	ldreq	r1, [r3, #0]
 800ddc6:	685b      	ldreq	r3, [r3, #4]
 800ddc8:	6063      	str	r3, [r4, #4]
 800ddca:	bf04      	itt	eq
 800ddcc:	1949      	addeq	r1, r1, r5
 800ddce:	6021      	streq	r1, [r4, #0]
 800ddd0:	6054      	str	r4, [r2, #4]
 800ddd2:	e7c7      	b.n	800dd64 <_free_r+0x28>
 800ddd4:	b003      	add	sp, #12
 800ddd6:	bd30      	pop	{r4, r5, pc}
 800ddd8:	200102a8 	.word	0x200102a8

0800dddc <__ssputs_r>:
 800dddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dde0:	688e      	ldr	r6, [r1, #8]
 800dde2:	429e      	cmp	r6, r3
 800dde4:	4682      	mov	sl, r0
 800dde6:	460c      	mov	r4, r1
 800dde8:	4690      	mov	r8, r2
 800ddea:	461f      	mov	r7, r3
 800ddec:	d838      	bhi.n	800de60 <__ssputs_r+0x84>
 800ddee:	898a      	ldrh	r2, [r1, #12]
 800ddf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ddf4:	d032      	beq.n	800de5c <__ssputs_r+0x80>
 800ddf6:	6825      	ldr	r5, [r4, #0]
 800ddf8:	6909      	ldr	r1, [r1, #16]
 800ddfa:	eba5 0901 	sub.w	r9, r5, r1
 800ddfe:	6965      	ldr	r5, [r4, #20]
 800de00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de08:	3301      	adds	r3, #1
 800de0a:	444b      	add	r3, r9
 800de0c:	106d      	asrs	r5, r5, #1
 800de0e:	429d      	cmp	r5, r3
 800de10:	bf38      	it	cc
 800de12:	461d      	movcc	r5, r3
 800de14:	0553      	lsls	r3, r2, #21
 800de16:	d531      	bpl.n	800de7c <__ssputs_r+0xa0>
 800de18:	4629      	mov	r1, r5
 800de1a:	f7fd fd89 	bl	800b930 <_malloc_r>
 800de1e:	4606      	mov	r6, r0
 800de20:	b950      	cbnz	r0, 800de38 <__ssputs_r+0x5c>
 800de22:	230c      	movs	r3, #12
 800de24:	f8ca 3000 	str.w	r3, [sl]
 800de28:	89a3      	ldrh	r3, [r4, #12]
 800de2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de2e:	81a3      	strh	r3, [r4, #12]
 800de30:	f04f 30ff 	mov.w	r0, #4294967295
 800de34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de38:	6921      	ldr	r1, [r4, #16]
 800de3a:	464a      	mov	r2, r9
 800de3c:	f7fd fd61 	bl	800b902 <memcpy>
 800de40:	89a3      	ldrh	r3, [r4, #12]
 800de42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800de46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de4a:	81a3      	strh	r3, [r4, #12]
 800de4c:	6126      	str	r6, [r4, #16]
 800de4e:	6165      	str	r5, [r4, #20]
 800de50:	444e      	add	r6, r9
 800de52:	eba5 0509 	sub.w	r5, r5, r9
 800de56:	6026      	str	r6, [r4, #0]
 800de58:	60a5      	str	r5, [r4, #8]
 800de5a:	463e      	mov	r6, r7
 800de5c:	42be      	cmp	r6, r7
 800de5e:	d900      	bls.n	800de62 <__ssputs_r+0x86>
 800de60:	463e      	mov	r6, r7
 800de62:	4632      	mov	r2, r6
 800de64:	6820      	ldr	r0, [r4, #0]
 800de66:	4641      	mov	r1, r8
 800de68:	f000 fae4 	bl	800e434 <memmove>
 800de6c:	68a3      	ldr	r3, [r4, #8]
 800de6e:	6822      	ldr	r2, [r4, #0]
 800de70:	1b9b      	subs	r3, r3, r6
 800de72:	4432      	add	r2, r6
 800de74:	60a3      	str	r3, [r4, #8]
 800de76:	6022      	str	r2, [r4, #0]
 800de78:	2000      	movs	r0, #0
 800de7a:	e7db      	b.n	800de34 <__ssputs_r+0x58>
 800de7c:	462a      	mov	r2, r5
 800de7e:	f000 faf3 	bl	800e468 <_realloc_r>
 800de82:	4606      	mov	r6, r0
 800de84:	2800      	cmp	r0, #0
 800de86:	d1e1      	bne.n	800de4c <__ssputs_r+0x70>
 800de88:	6921      	ldr	r1, [r4, #16]
 800de8a:	4650      	mov	r0, sl
 800de8c:	f7ff ff56 	bl	800dd3c <_free_r>
 800de90:	e7c7      	b.n	800de22 <__ssputs_r+0x46>
	...

0800de94 <_svfiprintf_r>:
 800de94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de98:	4698      	mov	r8, r3
 800de9a:	898b      	ldrh	r3, [r1, #12]
 800de9c:	061b      	lsls	r3, r3, #24
 800de9e:	b09d      	sub	sp, #116	; 0x74
 800dea0:	4607      	mov	r7, r0
 800dea2:	460d      	mov	r5, r1
 800dea4:	4614      	mov	r4, r2
 800dea6:	d50e      	bpl.n	800dec6 <_svfiprintf_r+0x32>
 800dea8:	690b      	ldr	r3, [r1, #16]
 800deaa:	b963      	cbnz	r3, 800dec6 <_svfiprintf_r+0x32>
 800deac:	2140      	movs	r1, #64	; 0x40
 800deae:	f7fd fd3f 	bl	800b930 <_malloc_r>
 800deb2:	6028      	str	r0, [r5, #0]
 800deb4:	6128      	str	r0, [r5, #16]
 800deb6:	b920      	cbnz	r0, 800dec2 <_svfiprintf_r+0x2e>
 800deb8:	230c      	movs	r3, #12
 800deba:	603b      	str	r3, [r7, #0]
 800debc:	f04f 30ff 	mov.w	r0, #4294967295
 800dec0:	e0d1      	b.n	800e066 <_svfiprintf_r+0x1d2>
 800dec2:	2340      	movs	r3, #64	; 0x40
 800dec4:	616b      	str	r3, [r5, #20]
 800dec6:	2300      	movs	r3, #0
 800dec8:	9309      	str	r3, [sp, #36]	; 0x24
 800deca:	2320      	movs	r3, #32
 800decc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ded0:	f8cd 800c 	str.w	r8, [sp, #12]
 800ded4:	2330      	movs	r3, #48	; 0x30
 800ded6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e080 <_svfiprintf_r+0x1ec>
 800deda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dede:	f04f 0901 	mov.w	r9, #1
 800dee2:	4623      	mov	r3, r4
 800dee4:	469a      	mov	sl, r3
 800dee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800deea:	b10a      	cbz	r2, 800def0 <_svfiprintf_r+0x5c>
 800deec:	2a25      	cmp	r2, #37	; 0x25
 800deee:	d1f9      	bne.n	800dee4 <_svfiprintf_r+0x50>
 800def0:	ebba 0b04 	subs.w	fp, sl, r4
 800def4:	d00b      	beq.n	800df0e <_svfiprintf_r+0x7a>
 800def6:	465b      	mov	r3, fp
 800def8:	4622      	mov	r2, r4
 800defa:	4629      	mov	r1, r5
 800defc:	4638      	mov	r0, r7
 800defe:	f7ff ff6d 	bl	800dddc <__ssputs_r>
 800df02:	3001      	adds	r0, #1
 800df04:	f000 80aa 	beq.w	800e05c <_svfiprintf_r+0x1c8>
 800df08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df0a:	445a      	add	r2, fp
 800df0c:	9209      	str	r2, [sp, #36]	; 0x24
 800df0e:	f89a 3000 	ldrb.w	r3, [sl]
 800df12:	2b00      	cmp	r3, #0
 800df14:	f000 80a2 	beq.w	800e05c <_svfiprintf_r+0x1c8>
 800df18:	2300      	movs	r3, #0
 800df1a:	f04f 32ff 	mov.w	r2, #4294967295
 800df1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df22:	f10a 0a01 	add.w	sl, sl, #1
 800df26:	9304      	str	r3, [sp, #16]
 800df28:	9307      	str	r3, [sp, #28]
 800df2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df2e:	931a      	str	r3, [sp, #104]	; 0x68
 800df30:	4654      	mov	r4, sl
 800df32:	2205      	movs	r2, #5
 800df34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df38:	4851      	ldr	r0, [pc, #324]	; (800e080 <_svfiprintf_r+0x1ec>)
 800df3a:	f7f2 f951 	bl	80001e0 <memchr>
 800df3e:	9a04      	ldr	r2, [sp, #16]
 800df40:	b9d8      	cbnz	r0, 800df7a <_svfiprintf_r+0xe6>
 800df42:	06d0      	lsls	r0, r2, #27
 800df44:	bf44      	itt	mi
 800df46:	2320      	movmi	r3, #32
 800df48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df4c:	0711      	lsls	r1, r2, #28
 800df4e:	bf44      	itt	mi
 800df50:	232b      	movmi	r3, #43	; 0x2b
 800df52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df56:	f89a 3000 	ldrb.w	r3, [sl]
 800df5a:	2b2a      	cmp	r3, #42	; 0x2a
 800df5c:	d015      	beq.n	800df8a <_svfiprintf_r+0xf6>
 800df5e:	9a07      	ldr	r2, [sp, #28]
 800df60:	4654      	mov	r4, sl
 800df62:	2000      	movs	r0, #0
 800df64:	f04f 0c0a 	mov.w	ip, #10
 800df68:	4621      	mov	r1, r4
 800df6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df6e:	3b30      	subs	r3, #48	; 0x30
 800df70:	2b09      	cmp	r3, #9
 800df72:	d94e      	bls.n	800e012 <_svfiprintf_r+0x17e>
 800df74:	b1b0      	cbz	r0, 800dfa4 <_svfiprintf_r+0x110>
 800df76:	9207      	str	r2, [sp, #28]
 800df78:	e014      	b.n	800dfa4 <_svfiprintf_r+0x110>
 800df7a:	eba0 0308 	sub.w	r3, r0, r8
 800df7e:	fa09 f303 	lsl.w	r3, r9, r3
 800df82:	4313      	orrs	r3, r2
 800df84:	9304      	str	r3, [sp, #16]
 800df86:	46a2      	mov	sl, r4
 800df88:	e7d2      	b.n	800df30 <_svfiprintf_r+0x9c>
 800df8a:	9b03      	ldr	r3, [sp, #12]
 800df8c:	1d19      	adds	r1, r3, #4
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	9103      	str	r1, [sp, #12]
 800df92:	2b00      	cmp	r3, #0
 800df94:	bfbb      	ittet	lt
 800df96:	425b      	neglt	r3, r3
 800df98:	f042 0202 	orrlt.w	r2, r2, #2
 800df9c:	9307      	strge	r3, [sp, #28]
 800df9e:	9307      	strlt	r3, [sp, #28]
 800dfa0:	bfb8      	it	lt
 800dfa2:	9204      	strlt	r2, [sp, #16]
 800dfa4:	7823      	ldrb	r3, [r4, #0]
 800dfa6:	2b2e      	cmp	r3, #46	; 0x2e
 800dfa8:	d10c      	bne.n	800dfc4 <_svfiprintf_r+0x130>
 800dfaa:	7863      	ldrb	r3, [r4, #1]
 800dfac:	2b2a      	cmp	r3, #42	; 0x2a
 800dfae:	d135      	bne.n	800e01c <_svfiprintf_r+0x188>
 800dfb0:	9b03      	ldr	r3, [sp, #12]
 800dfb2:	1d1a      	adds	r2, r3, #4
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	9203      	str	r2, [sp, #12]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	bfb8      	it	lt
 800dfbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfc0:	3402      	adds	r4, #2
 800dfc2:	9305      	str	r3, [sp, #20]
 800dfc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e090 <_svfiprintf_r+0x1fc>
 800dfc8:	7821      	ldrb	r1, [r4, #0]
 800dfca:	2203      	movs	r2, #3
 800dfcc:	4650      	mov	r0, sl
 800dfce:	f7f2 f907 	bl	80001e0 <memchr>
 800dfd2:	b140      	cbz	r0, 800dfe6 <_svfiprintf_r+0x152>
 800dfd4:	2340      	movs	r3, #64	; 0x40
 800dfd6:	eba0 000a 	sub.w	r0, r0, sl
 800dfda:	fa03 f000 	lsl.w	r0, r3, r0
 800dfde:	9b04      	ldr	r3, [sp, #16]
 800dfe0:	4303      	orrs	r3, r0
 800dfe2:	3401      	adds	r4, #1
 800dfe4:	9304      	str	r3, [sp, #16]
 800dfe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfea:	4826      	ldr	r0, [pc, #152]	; (800e084 <_svfiprintf_r+0x1f0>)
 800dfec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dff0:	2206      	movs	r2, #6
 800dff2:	f7f2 f8f5 	bl	80001e0 <memchr>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d038      	beq.n	800e06c <_svfiprintf_r+0x1d8>
 800dffa:	4b23      	ldr	r3, [pc, #140]	; (800e088 <_svfiprintf_r+0x1f4>)
 800dffc:	bb1b      	cbnz	r3, 800e046 <_svfiprintf_r+0x1b2>
 800dffe:	9b03      	ldr	r3, [sp, #12]
 800e000:	3307      	adds	r3, #7
 800e002:	f023 0307 	bic.w	r3, r3, #7
 800e006:	3308      	adds	r3, #8
 800e008:	9303      	str	r3, [sp, #12]
 800e00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e00c:	4433      	add	r3, r6
 800e00e:	9309      	str	r3, [sp, #36]	; 0x24
 800e010:	e767      	b.n	800dee2 <_svfiprintf_r+0x4e>
 800e012:	fb0c 3202 	mla	r2, ip, r2, r3
 800e016:	460c      	mov	r4, r1
 800e018:	2001      	movs	r0, #1
 800e01a:	e7a5      	b.n	800df68 <_svfiprintf_r+0xd4>
 800e01c:	2300      	movs	r3, #0
 800e01e:	3401      	adds	r4, #1
 800e020:	9305      	str	r3, [sp, #20]
 800e022:	4619      	mov	r1, r3
 800e024:	f04f 0c0a 	mov.w	ip, #10
 800e028:	4620      	mov	r0, r4
 800e02a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e02e:	3a30      	subs	r2, #48	; 0x30
 800e030:	2a09      	cmp	r2, #9
 800e032:	d903      	bls.n	800e03c <_svfiprintf_r+0x1a8>
 800e034:	2b00      	cmp	r3, #0
 800e036:	d0c5      	beq.n	800dfc4 <_svfiprintf_r+0x130>
 800e038:	9105      	str	r1, [sp, #20]
 800e03a:	e7c3      	b.n	800dfc4 <_svfiprintf_r+0x130>
 800e03c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e040:	4604      	mov	r4, r0
 800e042:	2301      	movs	r3, #1
 800e044:	e7f0      	b.n	800e028 <_svfiprintf_r+0x194>
 800e046:	ab03      	add	r3, sp, #12
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	462a      	mov	r2, r5
 800e04c:	4b0f      	ldr	r3, [pc, #60]	; (800e08c <_svfiprintf_r+0x1f8>)
 800e04e:	a904      	add	r1, sp, #16
 800e050:	4638      	mov	r0, r7
 800e052:	f7fd fd67 	bl	800bb24 <_printf_float>
 800e056:	1c42      	adds	r2, r0, #1
 800e058:	4606      	mov	r6, r0
 800e05a:	d1d6      	bne.n	800e00a <_svfiprintf_r+0x176>
 800e05c:	89ab      	ldrh	r3, [r5, #12]
 800e05e:	065b      	lsls	r3, r3, #25
 800e060:	f53f af2c 	bmi.w	800debc <_svfiprintf_r+0x28>
 800e064:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e066:	b01d      	add	sp, #116	; 0x74
 800e068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e06c:	ab03      	add	r3, sp, #12
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	462a      	mov	r2, r5
 800e072:	4b06      	ldr	r3, [pc, #24]	; (800e08c <_svfiprintf_r+0x1f8>)
 800e074:	a904      	add	r1, sp, #16
 800e076:	4638      	mov	r0, r7
 800e078:	f7fd fff8 	bl	800c06c <_printf_i>
 800e07c:	e7eb      	b.n	800e056 <_svfiprintf_r+0x1c2>
 800e07e:	bf00      	nop
 800e080:	0800ec7c 	.word	0x0800ec7c
 800e084:	0800ec86 	.word	0x0800ec86
 800e088:	0800bb25 	.word	0x0800bb25
 800e08c:	0800dddd 	.word	0x0800dddd
 800e090:	0800ec82 	.word	0x0800ec82

0800e094 <__sfputc_r>:
 800e094:	6893      	ldr	r3, [r2, #8]
 800e096:	3b01      	subs	r3, #1
 800e098:	2b00      	cmp	r3, #0
 800e09a:	b410      	push	{r4}
 800e09c:	6093      	str	r3, [r2, #8]
 800e09e:	da08      	bge.n	800e0b2 <__sfputc_r+0x1e>
 800e0a0:	6994      	ldr	r4, [r2, #24]
 800e0a2:	42a3      	cmp	r3, r4
 800e0a4:	db01      	blt.n	800e0aa <__sfputc_r+0x16>
 800e0a6:	290a      	cmp	r1, #10
 800e0a8:	d103      	bne.n	800e0b2 <__sfputc_r+0x1e>
 800e0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0ae:	f7fe ba0d 	b.w	800c4cc <__swbuf_r>
 800e0b2:	6813      	ldr	r3, [r2, #0]
 800e0b4:	1c58      	adds	r0, r3, #1
 800e0b6:	6010      	str	r0, [r2, #0]
 800e0b8:	7019      	strb	r1, [r3, #0]
 800e0ba:	4608      	mov	r0, r1
 800e0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <__sfputs_r>:
 800e0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0c4:	4606      	mov	r6, r0
 800e0c6:	460f      	mov	r7, r1
 800e0c8:	4614      	mov	r4, r2
 800e0ca:	18d5      	adds	r5, r2, r3
 800e0cc:	42ac      	cmp	r4, r5
 800e0ce:	d101      	bne.n	800e0d4 <__sfputs_r+0x12>
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	e007      	b.n	800e0e4 <__sfputs_r+0x22>
 800e0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0d8:	463a      	mov	r2, r7
 800e0da:	4630      	mov	r0, r6
 800e0dc:	f7ff ffda 	bl	800e094 <__sfputc_r>
 800e0e0:	1c43      	adds	r3, r0, #1
 800e0e2:	d1f3      	bne.n	800e0cc <__sfputs_r+0xa>
 800e0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0e8 <_vfiprintf_r>:
 800e0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ec:	460d      	mov	r5, r1
 800e0ee:	b09d      	sub	sp, #116	; 0x74
 800e0f0:	4614      	mov	r4, r2
 800e0f2:	4698      	mov	r8, r3
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	b118      	cbz	r0, 800e100 <_vfiprintf_r+0x18>
 800e0f8:	6983      	ldr	r3, [r0, #24]
 800e0fa:	b90b      	cbnz	r3, 800e100 <_vfiprintf_r+0x18>
 800e0fc:	f7fd fb3c 	bl	800b778 <__sinit>
 800e100:	4b89      	ldr	r3, [pc, #548]	; (800e328 <_vfiprintf_r+0x240>)
 800e102:	429d      	cmp	r5, r3
 800e104:	d11b      	bne.n	800e13e <_vfiprintf_r+0x56>
 800e106:	6875      	ldr	r5, [r6, #4]
 800e108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e10a:	07d9      	lsls	r1, r3, #31
 800e10c:	d405      	bmi.n	800e11a <_vfiprintf_r+0x32>
 800e10e:	89ab      	ldrh	r3, [r5, #12]
 800e110:	059a      	lsls	r2, r3, #22
 800e112:	d402      	bmi.n	800e11a <_vfiprintf_r+0x32>
 800e114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e116:	f7fd fbf2 	bl	800b8fe <__retarget_lock_acquire_recursive>
 800e11a:	89ab      	ldrh	r3, [r5, #12]
 800e11c:	071b      	lsls	r3, r3, #28
 800e11e:	d501      	bpl.n	800e124 <_vfiprintf_r+0x3c>
 800e120:	692b      	ldr	r3, [r5, #16]
 800e122:	b9eb      	cbnz	r3, 800e160 <_vfiprintf_r+0x78>
 800e124:	4629      	mov	r1, r5
 800e126:	4630      	mov	r0, r6
 800e128:	f7fe fa34 	bl	800c594 <__swsetup_r>
 800e12c:	b1c0      	cbz	r0, 800e160 <_vfiprintf_r+0x78>
 800e12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e130:	07dc      	lsls	r4, r3, #31
 800e132:	d50e      	bpl.n	800e152 <_vfiprintf_r+0x6a>
 800e134:	f04f 30ff 	mov.w	r0, #4294967295
 800e138:	b01d      	add	sp, #116	; 0x74
 800e13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e13e:	4b7b      	ldr	r3, [pc, #492]	; (800e32c <_vfiprintf_r+0x244>)
 800e140:	429d      	cmp	r5, r3
 800e142:	d101      	bne.n	800e148 <_vfiprintf_r+0x60>
 800e144:	68b5      	ldr	r5, [r6, #8]
 800e146:	e7df      	b.n	800e108 <_vfiprintf_r+0x20>
 800e148:	4b79      	ldr	r3, [pc, #484]	; (800e330 <_vfiprintf_r+0x248>)
 800e14a:	429d      	cmp	r5, r3
 800e14c:	bf08      	it	eq
 800e14e:	68f5      	ldreq	r5, [r6, #12]
 800e150:	e7da      	b.n	800e108 <_vfiprintf_r+0x20>
 800e152:	89ab      	ldrh	r3, [r5, #12]
 800e154:	0598      	lsls	r0, r3, #22
 800e156:	d4ed      	bmi.n	800e134 <_vfiprintf_r+0x4c>
 800e158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e15a:	f7fd fbd1 	bl	800b900 <__retarget_lock_release_recursive>
 800e15e:	e7e9      	b.n	800e134 <_vfiprintf_r+0x4c>
 800e160:	2300      	movs	r3, #0
 800e162:	9309      	str	r3, [sp, #36]	; 0x24
 800e164:	2320      	movs	r3, #32
 800e166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e16a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e16e:	2330      	movs	r3, #48	; 0x30
 800e170:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e334 <_vfiprintf_r+0x24c>
 800e174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e178:	f04f 0901 	mov.w	r9, #1
 800e17c:	4623      	mov	r3, r4
 800e17e:	469a      	mov	sl, r3
 800e180:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e184:	b10a      	cbz	r2, 800e18a <_vfiprintf_r+0xa2>
 800e186:	2a25      	cmp	r2, #37	; 0x25
 800e188:	d1f9      	bne.n	800e17e <_vfiprintf_r+0x96>
 800e18a:	ebba 0b04 	subs.w	fp, sl, r4
 800e18e:	d00b      	beq.n	800e1a8 <_vfiprintf_r+0xc0>
 800e190:	465b      	mov	r3, fp
 800e192:	4622      	mov	r2, r4
 800e194:	4629      	mov	r1, r5
 800e196:	4630      	mov	r0, r6
 800e198:	f7ff ff93 	bl	800e0c2 <__sfputs_r>
 800e19c:	3001      	adds	r0, #1
 800e19e:	f000 80aa 	beq.w	800e2f6 <_vfiprintf_r+0x20e>
 800e1a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1a4:	445a      	add	r2, fp
 800e1a6:	9209      	str	r2, [sp, #36]	; 0x24
 800e1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	f000 80a2 	beq.w	800e2f6 <_vfiprintf_r+0x20e>
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1bc:	f10a 0a01 	add.w	sl, sl, #1
 800e1c0:	9304      	str	r3, [sp, #16]
 800e1c2:	9307      	str	r3, [sp, #28]
 800e1c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1c8:	931a      	str	r3, [sp, #104]	; 0x68
 800e1ca:	4654      	mov	r4, sl
 800e1cc:	2205      	movs	r2, #5
 800e1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d2:	4858      	ldr	r0, [pc, #352]	; (800e334 <_vfiprintf_r+0x24c>)
 800e1d4:	f7f2 f804 	bl	80001e0 <memchr>
 800e1d8:	9a04      	ldr	r2, [sp, #16]
 800e1da:	b9d8      	cbnz	r0, 800e214 <_vfiprintf_r+0x12c>
 800e1dc:	06d1      	lsls	r1, r2, #27
 800e1de:	bf44      	itt	mi
 800e1e0:	2320      	movmi	r3, #32
 800e1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1e6:	0713      	lsls	r3, r2, #28
 800e1e8:	bf44      	itt	mi
 800e1ea:	232b      	movmi	r3, #43	; 0x2b
 800e1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f6:	d015      	beq.n	800e224 <_vfiprintf_r+0x13c>
 800e1f8:	9a07      	ldr	r2, [sp, #28]
 800e1fa:	4654      	mov	r4, sl
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	f04f 0c0a 	mov.w	ip, #10
 800e202:	4621      	mov	r1, r4
 800e204:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e208:	3b30      	subs	r3, #48	; 0x30
 800e20a:	2b09      	cmp	r3, #9
 800e20c:	d94e      	bls.n	800e2ac <_vfiprintf_r+0x1c4>
 800e20e:	b1b0      	cbz	r0, 800e23e <_vfiprintf_r+0x156>
 800e210:	9207      	str	r2, [sp, #28]
 800e212:	e014      	b.n	800e23e <_vfiprintf_r+0x156>
 800e214:	eba0 0308 	sub.w	r3, r0, r8
 800e218:	fa09 f303 	lsl.w	r3, r9, r3
 800e21c:	4313      	orrs	r3, r2
 800e21e:	9304      	str	r3, [sp, #16]
 800e220:	46a2      	mov	sl, r4
 800e222:	e7d2      	b.n	800e1ca <_vfiprintf_r+0xe2>
 800e224:	9b03      	ldr	r3, [sp, #12]
 800e226:	1d19      	adds	r1, r3, #4
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	9103      	str	r1, [sp, #12]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	bfbb      	ittet	lt
 800e230:	425b      	neglt	r3, r3
 800e232:	f042 0202 	orrlt.w	r2, r2, #2
 800e236:	9307      	strge	r3, [sp, #28]
 800e238:	9307      	strlt	r3, [sp, #28]
 800e23a:	bfb8      	it	lt
 800e23c:	9204      	strlt	r2, [sp, #16]
 800e23e:	7823      	ldrb	r3, [r4, #0]
 800e240:	2b2e      	cmp	r3, #46	; 0x2e
 800e242:	d10c      	bne.n	800e25e <_vfiprintf_r+0x176>
 800e244:	7863      	ldrb	r3, [r4, #1]
 800e246:	2b2a      	cmp	r3, #42	; 0x2a
 800e248:	d135      	bne.n	800e2b6 <_vfiprintf_r+0x1ce>
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	1d1a      	adds	r2, r3, #4
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	9203      	str	r2, [sp, #12]
 800e252:	2b00      	cmp	r3, #0
 800e254:	bfb8      	it	lt
 800e256:	f04f 33ff 	movlt.w	r3, #4294967295
 800e25a:	3402      	adds	r4, #2
 800e25c:	9305      	str	r3, [sp, #20]
 800e25e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e344 <_vfiprintf_r+0x25c>
 800e262:	7821      	ldrb	r1, [r4, #0]
 800e264:	2203      	movs	r2, #3
 800e266:	4650      	mov	r0, sl
 800e268:	f7f1 ffba 	bl	80001e0 <memchr>
 800e26c:	b140      	cbz	r0, 800e280 <_vfiprintf_r+0x198>
 800e26e:	2340      	movs	r3, #64	; 0x40
 800e270:	eba0 000a 	sub.w	r0, r0, sl
 800e274:	fa03 f000 	lsl.w	r0, r3, r0
 800e278:	9b04      	ldr	r3, [sp, #16]
 800e27a:	4303      	orrs	r3, r0
 800e27c:	3401      	adds	r4, #1
 800e27e:	9304      	str	r3, [sp, #16]
 800e280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e284:	482c      	ldr	r0, [pc, #176]	; (800e338 <_vfiprintf_r+0x250>)
 800e286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e28a:	2206      	movs	r2, #6
 800e28c:	f7f1 ffa8 	bl	80001e0 <memchr>
 800e290:	2800      	cmp	r0, #0
 800e292:	d03f      	beq.n	800e314 <_vfiprintf_r+0x22c>
 800e294:	4b29      	ldr	r3, [pc, #164]	; (800e33c <_vfiprintf_r+0x254>)
 800e296:	bb1b      	cbnz	r3, 800e2e0 <_vfiprintf_r+0x1f8>
 800e298:	9b03      	ldr	r3, [sp, #12]
 800e29a:	3307      	adds	r3, #7
 800e29c:	f023 0307 	bic.w	r3, r3, #7
 800e2a0:	3308      	adds	r3, #8
 800e2a2:	9303      	str	r3, [sp, #12]
 800e2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2a6:	443b      	add	r3, r7
 800e2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2aa:	e767      	b.n	800e17c <_vfiprintf_r+0x94>
 800e2ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2b0:	460c      	mov	r4, r1
 800e2b2:	2001      	movs	r0, #1
 800e2b4:	e7a5      	b.n	800e202 <_vfiprintf_r+0x11a>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	3401      	adds	r4, #1
 800e2ba:	9305      	str	r3, [sp, #20]
 800e2bc:	4619      	mov	r1, r3
 800e2be:	f04f 0c0a 	mov.w	ip, #10
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2c8:	3a30      	subs	r2, #48	; 0x30
 800e2ca:	2a09      	cmp	r2, #9
 800e2cc:	d903      	bls.n	800e2d6 <_vfiprintf_r+0x1ee>
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d0c5      	beq.n	800e25e <_vfiprintf_r+0x176>
 800e2d2:	9105      	str	r1, [sp, #20]
 800e2d4:	e7c3      	b.n	800e25e <_vfiprintf_r+0x176>
 800e2d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2da:	4604      	mov	r4, r0
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e7f0      	b.n	800e2c2 <_vfiprintf_r+0x1da>
 800e2e0:	ab03      	add	r3, sp, #12
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	462a      	mov	r2, r5
 800e2e6:	4b16      	ldr	r3, [pc, #88]	; (800e340 <_vfiprintf_r+0x258>)
 800e2e8:	a904      	add	r1, sp, #16
 800e2ea:	4630      	mov	r0, r6
 800e2ec:	f7fd fc1a 	bl	800bb24 <_printf_float>
 800e2f0:	4607      	mov	r7, r0
 800e2f2:	1c78      	adds	r0, r7, #1
 800e2f4:	d1d6      	bne.n	800e2a4 <_vfiprintf_r+0x1bc>
 800e2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2f8:	07d9      	lsls	r1, r3, #31
 800e2fa:	d405      	bmi.n	800e308 <_vfiprintf_r+0x220>
 800e2fc:	89ab      	ldrh	r3, [r5, #12]
 800e2fe:	059a      	lsls	r2, r3, #22
 800e300:	d402      	bmi.n	800e308 <_vfiprintf_r+0x220>
 800e302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e304:	f7fd fafc 	bl	800b900 <__retarget_lock_release_recursive>
 800e308:	89ab      	ldrh	r3, [r5, #12]
 800e30a:	065b      	lsls	r3, r3, #25
 800e30c:	f53f af12 	bmi.w	800e134 <_vfiprintf_r+0x4c>
 800e310:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e312:	e711      	b.n	800e138 <_vfiprintf_r+0x50>
 800e314:	ab03      	add	r3, sp, #12
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	462a      	mov	r2, r5
 800e31a:	4b09      	ldr	r3, [pc, #36]	; (800e340 <_vfiprintf_r+0x258>)
 800e31c:	a904      	add	r1, sp, #16
 800e31e:	4630      	mov	r0, r6
 800e320:	f7fd fea4 	bl	800c06c <_printf_i>
 800e324:	e7e4      	b.n	800e2f0 <_vfiprintf_r+0x208>
 800e326:	bf00      	nop
 800e328:	0800ea14 	.word	0x0800ea14
 800e32c:	0800ea34 	.word	0x0800ea34
 800e330:	0800e9f4 	.word	0x0800e9f4
 800e334:	0800ec7c 	.word	0x0800ec7c
 800e338:	0800ec86 	.word	0x0800ec86
 800e33c:	0800bb25 	.word	0x0800bb25
 800e340:	0800e0c3 	.word	0x0800e0c3
 800e344:	0800ec82 	.word	0x0800ec82

0800e348 <_read_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4d07      	ldr	r5, [pc, #28]	; (800e368 <_read_r+0x20>)
 800e34c:	4604      	mov	r4, r0
 800e34e:	4608      	mov	r0, r1
 800e350:	4611      	mov	r1, r2
 800e352:	2200      	movs	r2, #0
 800e354:	602a      	str	r2, [r5, #0]
 800e356:	461a      	mov	r2, r3
 800e358:	f7f3 fda6 	bl	8001ea8 <_read>
 800e35c:	1c43      	adds	r3, r0, #1
 800e35e:	d102      	bne.n	800e366 <_read_r+0x1e>
 800e360:	682b      	ldr	r3, [r5, #0]
 800e362:	b103      	cbz	r3, 800e366 <_read_r+0x1e>
 800e364:	6023      	str	r3, [r4, #0]
 800e366:	bd38      	pop	{r3, r4, r5, pc}
 800e368:	200105d0 	.word	0x200105d0

0800e36c <__assert_func>:
 800e36c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e36e:	4614      	mov	r4, r2
 800e370:	461a      	mov	r2, r3
 800e372:	4b09      	ldr	r3, [pc, #36]	; (800e398 <__assert_func+0x2c>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4605      	mov	r5, r0
 800e378:	68d8      	ldr	r0, [r3, #12]
 800e37a:	b14c      	cbz	r4, 800e390 <__assert_func+0x24>
 800e37c:	4b07      	ldr	r3, [pc, #28]	; (800e39c <__assert_func+0x30>)
 800e37e:	9100      	str	r1, [sp, #0]
 800e380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e384:	4906      	ldr	r1, [pc, #24]	; (800e3a0 <__assert_func+0x34>)
 800e386:	462b      	mov	r3, r5
 800e388:	f000 f80e 	bl	800e3a8 <fiprintf>
 800e38c:	f000 f89f 	bl	800e4ce <abort>
 800e390:	4b04      	ldr	r3, [pc, #16]	; (800e3a4 <__assert_func+0x38>)
 800e392:	461c      	mov	r4, r3
 800e394:	e7f3      	b.n	800e37e <__assert_func+0x12>
 800e396:	bf00      	nop
 800e398:	20000150 	.word	0x20000150
 800e39c:	0800ec8d 	.word	0x0800ec8d
 800e3a0:	0800ec9a 	.word	0x0800ec9a
 800e3a4:	0800ecc8 	.word	0x0800ecc8

0800e3a8 <fiprintf>:
 800e3a8:	b40e      	push	{r1, r2, r3}
 800e3aa:	b503      	push	{r0, r1, lr}
 800e3ac:	4601      	mov	r1, r0
 800e3ae:	ab03      	add	r3, sp, #12
 800e3b0:	4805      	ldr	r0, [pc, #20]	; (800e3c8 <fiprintf+0x20>)
 800e3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3b6:	6800      	ldr	r0, [r0, #0]
 800e3b8:	9301      	str	r3, [sp, #4]
 800e3ba:	f7ff fe95 	bl	800e0e8 <_vfiprintf_r>
 800e3be:	b002      	add	sp, #8
 800e3c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3c4:	b003      	add	sp, #12
 800e3c6:	4770      	bx	lr
 800e3c8:	20000150 	.word	0x20000150

0800e3cc <_fstat_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4d07      	ldr	r5, [pc, #28]	; (800e3ec <_fstat_r+0x20>)
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	602b      	str	r3, [r5, #0]
 800e3da:	f7f3 fd8e 	bl	8001efa <_fstat>
 800e3de:	1c43      	adds	r3, r0, #1
 800e3e0:	d102      	bne.n	800e3e8 <_fstat_r+0x1c>
 800e3e2:	682b      	ldr	r3, [r5, #0]
 800e3e4:	b103      	cbz	r3, 800e3e8 <_fstat_r+0x1c>
 800e3e6:	6023      	str	r3, [r4, #0]
 800e3e8:	bd38      	pop	{r3, r4, r5, pc}
 800e3ea:	bf00      	nop
 800e3ec:	200105d0 	.word	0x200105d0

0800e3f0 <_isatty_r>:
 800e3f0:	b538      	push	{r3, r4, r5, lr}
 800e3f2:	4d06      	ldr	r5, [pc, #24]	; (800e40c <_isatty_r+0x1c>)
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	4608      	mov	r0, r1
 800e3fa:	602b      	str	r3, [r5, #0]
 800e3fc:	f7f3 fd8d 	bl	8001f1a <_isatty>
 800e400:	1c43      	adds	r3, r0, #1
 800e402:	d102      	bne.n	800e40a <_isatty_r+0x1a>
 800e404:	682b      	ldr	r3, [r5, #0]
 800e406:	b103      	cbz	r3, 800e40a <_isatty_r+0x1a>
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	bd38      	pop	{r3, r4, r5, pc}
 800e40c:	200105d0 	.word	0x200105d0

0800e410 <__ascii_mbtowc>:
 800e410:	b082      	sub	sp, #8
 800e412:	b901      	cbnz	r1, 800e416 <__ascii_mbtowc+0x6>
 800e414:	a901      	add	r1, sp, #4
 800e416:	b142      	cbz	r2, 800e42a <__ascii_mbtowc+0x1a>
 800e418:	b14b      	cbz	r3, 800e42e <__ascii_mbtowc+0x1e>
 800e41a:	7813      	ldrb	r3, [r2, #0]
 800e41c:	600b      	str	r3, [r1, #0]
 800e41e:	7812      	ldrb	r2, [r2, #0]
 800e420:	1e10      	subs	r0, r2, #0
 800e422:	bf18      	it	ne
 800e424:	2001      	movne	r0, #1
 800e426:	b002      	add	sp, #8
 800e428:	4770      	bx	lr
 800e42a:	4610      	mov	r0, r2
 800e42c:	e7fb      	b.n	800e426 <__ascii_mbtowc+0x16>
 800e42e:	f06f 0001 	mvn.w	r0, #1
 800e432:	e7f8      	b.n	800e426 <__ascii_mbtowc+0x16>

0800e434 <memmove>:
 800e434:	4288      	cmp	r0, r1
 800e436:	b510      	push	{r4, lr}
 800e438:	eb01 0402 	add.w	r4, r1, r2
 800e43c:	d902      	bls.n	800e444 <memmove+0x10>
 800e43e:	4284      	cmp	r4, r0
 800e440:	4623      	mov	r3, r4
 800e442:	d807      	bhi.n	800e454 <memmove+0x20>
 800e444:	1e43      	subs	r3, r0, #1
 800e446:	42a1      	cmp	r1, r4
 800e448:	d008      	beq.n	800e45c <memmove+0x28>
 800e44a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e44e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e452:	e7f8      	b.n	800e446 <memmove+0x12>
 800e454:	4402      	add	r2, r0
 800e456:	4601      	mov	r1, r0
 800e458:	428a      	cmp	r2, r1
 800e45a:	d100      	bne.n	800e45e <memmove+0x2a>
 800e45c:	bd10      	pop	{r4, pc}
 800e45e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e466:	e7f7      	b.n	800e458 <memmove+0x24>

0800e468 <_realloc_r>:
 800e468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46a:	4607      	mov	r7, r0
 800e46c:	4614      	mov	r4, r2
 800e46e:	460e      	mov	r6, r1
 800e470:	b921      	cbnz	r1, 800e47c <_realloc_r+0x14>
 800e472:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e476:	4611      	mov	r1, r2
 800e478:	f7fd ba5a 	b.w	800b930 <_malloc_r>
 800e47c:	b922      	cbnz	r2, 800e488 <_realloc_r+0x20>
 800e47e:	f7ff fc5d 	bl	800dd3c <_free_r>
 800e482:	4625      	mov	r5, r4
 800e484:	4628      	mov	r0, r5
 800e486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e488:	f000 f828 	bl	800e4dc <_malloc_usable_size_r>
 800e48c:	42a0      	cmp	r0, r4
 800e48e:	d20f      	bcs.n	800e4b0 <_realloc_r+0x48>
 800e490:	4621      	mov	r1, r4
 800e492:	4638      	mov	r0, r7
 800e494:	f7fd fa4c 	bl	800b930 <_malloc_r>
 800e498:	4605      	mov	r5, r0
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d0f2      	beq.n	800e484 <_realloc_r+0x1c>
 800e49e:	4631      	mov	r1, r6
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	f7fd fa2e 	bl	800b902 <memcpy>
 800e4a6:	4631      	mov	r1, r6
 800e4a8:	4638      	mov	r0, r7
 800e4aa:	f7ff fc47 	bl	800dd3c <_free_r>
 800e4ae:	e7e9      	b.n	800e484 <_realloc_r+0x1c>
 800e4b0:	4635      	mov	r5, r6
 800e4b2:	e7e7      	b.n	800e484 <_realloc_r+0x1c>

0800e4b4 <__ascii_wctomb>:
 800e4b4:	b149      	cbz	r1, 800e4ca <__ascii_wctomb+0x16>
 800e4b6:	2aff      	cmp	r2, #255	; 0xff
 800e4b8:	bf85      	ittet	hi
 800e4ba:	238a      	movhi	r3, #138	; 0x8a
 800e4bc:	6003      	strhi	r3, [r0, #0]
 800e4be:	700a      	strbls	r2, [r1, #0]
 800e4c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e4c4:	bf98      	it	ls
 800e4c6:	2001      	movls	r0, #1
 800e4c8:	4770      	bx	lr
 800e4ca:	4608      	mov	r0, r1
 800e4cc:	4770      	bx	lr

0800e4ce <abort>:
 800e4ce:	b508      	push	{r3, lr}
 800e4d0:	2006      	movs	r0, #6
 800e4d2:	f000 f833 	bl	800e53c <raise>
 800e4d6:	2001      	movs	r0, #1
 800e4d8:	f7f3 fcdc 	bl	8001e94 <_exit>

0800e4dc <_malloc_usable_size_r>:
 800e4dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4e0:	1f18      	subs	r0, r3, #4
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	bfbc      	itt	lt
 800e4e6:	580b      	ldrlt	r3, [r1, r0]
 800e4e8:	18c0      	addlt	r0, r0, r3
 800e4ea:	4770      	bx	lr

0800e4ec <_raise_r>:
 800e4ec:	291f      	cmp	r1, #31
 800e4ee:	b538      	push	{r3, r4, r5, lr}
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	460d      	mov	r5, r1
 800e4f4:	d904      	bls.n	800e500 <_raise_r+0x14>
 800e4f6:	2316      	movs	r3, #22
 800e4f8:	6003      	str	r3, [r0, #0]
 800e4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fe:	bd38      	pop	{r3, r4, r5, pc}
 800e500:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e502:	b112      	cbz	r2, 800e50a <_raise_r+0x1e>
 800e504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e508:	b94b      	cbnz	r3, 800e51e <_raise_r+0x32>
 800e50a:	4620      	mov	r0, r4
 800e50c:	f000 f830 	bl	800e570 <_getpid_r>
 800e510:	462a      	mov	r2, r5
 800e512:	4601      	mov	r1, r0
 800e514:	4620      	mov	r0, r4
 800e516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e51a:	f000 b817 	b.w	800e54c <_kill_r>
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d00a      	beq.n	800e538 <_raise_r+0x4c>
 800e522:	1c59      	adds	r1, r3, #1
 800e524:	d103      	bne.n	800e52e <_raise_r+0x42>
 800e526:	2316      	movs	r3, #22
 800e528:	6003      	str	r3, [r0, #0]
 800e52a:	2001      	movs	r0, #1
 800e52c:	e7e7      	b.n	800e4fe <_raise_r+0x12>
 800e52e:	2400      	movs	r4, #0
 800e530:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e534:	4628      	mov	r0, r5
 800e536:	4798      	blx	r3
 800e538:	2000      	movs	r0, #0
 800e53a:	e7e0      	b.n	800e4fe <_raise_r+0x12>

0800e53c <raise>:
 800e53c:	4b02      	ldr	r3, [pc, #8]	; (800e548 <raise+0xc>)
 800e53e:	4601      	mov	r1, r0
 800e540:	6818      	ldr	r0, [r3, #0]
 800e542:	f7ff bfd3 	b.w	800e4ec <_raise_r>
 800e546:	bf00      	nop
 800e548:	20000150 	.word	0x20000150

0800e54c <_kill_r>:
 800e54c:	b538      	push	{r3, r4, r5, lr}
 800e54e:	4d07      	ldr	r5, [pc, #28]	; (800e56c <_kill_r+0x20>)
 800e550:	2300      	movs	r3, #0
 800e552:	4604      	mov	r4, r0
 800e554:	4608      	mov	r0, r1
 800e556:	4611      	mov	r1, r2
 800e558:	602b      	str	r3, [r5, #0]
 800e55a:	f7f3 fc8b 	bl	8001e74 <_kill>
 800e55e:	1c43      	adds	r3, r0, #1
 800e560:	d102      	bne.n	800e568 <_kill_r+0x1c>
 800e562:	682b      	ldr	r3, [r5, #0]
 800e564:	b103      	cbz	r3, 800e568 <_kill_r+0x1c>
 800e566:	6023      	str	r3, [r4, #0]
 800e568:	bd38      	pop	{r3, r4, r5, pc}
 800e56a:	bf00      	nop
 800e56c:	200105d0 	.word	0x200105d0

0800e570 <_getpid_r>:
 800e570:	f7f3 bc78 	b.w	8001e64 <_getpid>

0800e574 <_init>:
 800e574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e576:	bf00      	nop
 800e578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e57a:	bc08      	pop	{r3}
 800e57c:	469e      	mov	lr, r3
 800e57e:	4770      	bx	lr

0800e580 <_fini>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	bf00      	nop
 800e584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e586:	bc08      	pop	{r3}
 800e588:	469e      	mov	lr, r3
 800e58a:	4770      	bx	lr
